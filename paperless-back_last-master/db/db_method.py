#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from db.db_Class import *
from config.value import *
from method.access import *
from method.hashpy import *
from method.other import *
from config.lib import *
from method.pdfSign import *
# from method.access import *
# from method.cal_tracking import *
# from db.db_method_4 import *
def endcode_access(one_access):
    try:
        data = {
            "iss": "paperless",
            "aud": None,
            "token_data" :one_access
        }
        encodes = jwt.encode(data, 'q2TCgLKSwawLCtVFJnShihR16YqYcNUO', algorithm='HS256')
        # encodes = jwt.encode(data,b'dawdwad',algorithm='RS256')
        encodes = encodes.decode('utf8').split('.')
        encodes[1] = encodes[1]
        encodes = encodes[2] +'.'+encodes[0]+'.'+encodes[1]
        # print (encodes)
        return encodes
    except Exception as e:
        print(str(e))
        exc_type, exc_obj, exc_tb = sys.exc_info()
        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        print(exc_type, fname, exc_tb.tb_lineno)
        return None

def parse_json_for_eform(data_json):
    arr_activity_code = []
    for x in range(len(data_json)):
        step_detail = data_json[x]['step_detail']
        for y in range(len(step_detail)):
            activity_code = step_detail[y]['activity_code']
            for xx in range(len(activity_code)):
                act_status = data_json[x]['step_detail'][y]['activity_status'][xx]
                act_time = data_json[x]['step_detail'][y]['activity_time'][xx]
        if 'A03' in activity_code and 'A04' in activity_code:
            data_json[x]['step_detail'][y]['activity_code'] = ['A05']
            data_json[x]['step_detail'][y]['activity_status'] = [act_status]
            data_json[x]['step_detail'][y]['activity_time'] = [act_time]
    return data_json
    
def data_doc(data_document):
    try:
        decodes = jwt.decode(data_document, 'yiDaGvk4c6jbmXaSdiOtIqgS7Dkn5U1ItNz5hxHU', algorithms = 'HS256')
        # print('decodes',decodes)
        return {'result':'OK', 'messageText':decodes}
    except jwt.ExpiredSignatureError:
        print('ExpiredSignatureError!')
        return {'result':'ER'}
    except jwt.InvalidTokenError:
        print('InvalidTokenError!')
        return {'result':'ER'}

def generateList_count_byEmail_v2(query_count_all):
    list2 = []
    for x in range(len(query_count_all)):
        tmp_json = {
            'sender_email': query_count_all[x].sender_email,
            'update_time':int(datetime.datetime.timestamp(query_count_all[x].update_time)),
            'send_time': int(datetime.datetime.timestamp(query_count_all[x].send_time)),
            'status':query_count_all[x].status,
            'document_status': query_count_all[x].document_status,
            'recipient_email': query_count_all[x].recipient_email
        }
        list2.append(tmp_json)
        tmp_json = {}
    return list2

def get_url_image_pdf_v1(foldername):
    list_file_name = []
    path_image = path_global_1 + '/storage/image/' + foldername
    # path_image = os.getcwd() + '/storage/image/' + foldername
    try:
        for the_file in sorted(os.listdir(path_image)):
            file_path = os.path.join(path_image, the_file)
            print(file_path)
            filename_only = str(file_path).split('/')[-1]
            url_view_image = myUrl_domain + 'api/view2/pdf_image/' + foldername +'/' + filename_only
            list_file_name.append({'image_Url': url_view_image})
    except Exception as e:
        return ({'result':'ER','messageText':None,'status_Code':200,'messageER':'not found folder name ' + str(e)})
    return ({'result': 'OK', 'messageText': list_file_name, 'status_Code': 200})

def generate_data_document(json_data):
    endcode = jwt.encode(json_data, 'yiDaGvk4c6jbmXaSdiOtIqgS7Dkn5U1ItNz5hxHU',algorithm='HS256')
    return endcode

def fine_name_surename(email):
    try:
        search_email = "%'{}'%".format(email)
        sql = '''SELECT "tb_citizen_Login"."biz_information" FROM "tb_userProfile" INNER JOIN "tb_citizen_Login" ON "tb_citizen_Login".username = "tb_userProfile".p_username \
            where "tb_userProfile".p_emailthai = :tmpemailthai or "tb_userProfile".p_emailthai2 = :tmpemailthai or "tb_userProfile".p_emailthai3 = :tmpemailthai or "tb_userProfile".employee_email ILIKE :search_email'''
        with slave.connect() as connection:
            result_ref = connection.execute(text(sql),tmpemailthai=email,search_email=search_email)
        connection.close()
        tmp_query = [dict(row) for row in result_ref]
        name_surename = ''
        if len(tmp_query) != 0:
            for i in range(len(tmp_query)):
                biz_information = tmp_query[i]['biz_information']
                biz_information_eval = eval(str(biz_information))
                name = biz_information_eval['first_name_th']
                if name != None:
                    name_surename += name
                    surename = biz_information_eval['last_name_th']
                    name_surename += ' ' + surename
                else:
                    name_surename = email
                # print ('name_surename:',name_surename)
                return name_surename
        else:
            return email
    except Exception as e:
        return email
    finally:
        connection.close()
    # query_name = paper_lesslogin.query.filter(paper_lesslogin.biz_information.contains(email)).first()
    # search_email = "%'{}'%".format(email)
    # with slave.connect() as connection:
    #     result_ref = connection.execute(text('SELECT biz_information\
    #         FROM "tb_citizen_Login" WHERE "tb_citizen_Login"."biz_information" LIKE :email'),email=search_email)
    #     connection.close()
    # tmp_query = [dict(row) for row in result_ref]
    # name_surename = ''
    # if tmp_query != None:
    #     for i in range(len(tmp_query)):
    #         biz_information = tmp_query[i]['biz_information']
    #         biz_information_eval = eval(str(biz_information))
    #         name = biz_information_eval['first_name_th']
    #         if name != None:
    #             name_surename += name
    #             surename = biz_information_eval['last_name_th']
    #             name_surename += ' ' + surename
    #         else:
    #             name_surename = email
    #         # print ('name_surename:',name_surename)
    #         return name_surename
    # else:
    #     return email

# def fine_name_surename(email):
#     query_name = paper_lesslogin.query.filter(paper_lesslogin.biz_information.contains(email)).first()
#     name_surename = ''
#     if query_name != None :
#         biz_information = query_name.biz_information
#         biz_information_eval = eval(str(biz_information))
#         name = biz_information_eval['first_name_th']
#         if name != None:
#             name_surename += name
#             surename = biz_information_eval['last_name_th']
#             name_surename += ' ' + surename
#         else:
#             name_surename = email
#         return name_surename
#     else:
#         return email

def find_name_surename_by_username(email):
    try:
        search_email = "%'{}'%".format(email)
        sql = '''SELECT "tb_citizen_Login"."biz_information" FROM "tb_userProfile" INNER JOIN "tb_citizen_Login" ON "tb_citizen_Login".username = "tb_userProfile".p_username \
            where "tb_userProfile".p_emailthai = :tmpemailthai or "tb_userProfile".p_emailthai2 = :tmpemailthai or "tb_userProfile".p_emailthai3 = :tmpemailthai  or "tb_userProfile".employee_email ILIKE :search_email'''
        with slave.connect() as connection:
            result_ref = connection.execute(text(sql),tmpemailthai=email,search_email=search_email)
        connection.close()
        tmp_query = [dict(row) for row in result_ref]
        name_surename = ''
        if len(tmp_query) != 0:
            for i in range(len(tmp_query)):
                biz_information = tmp_query[i]['biz_information']
                biz_information_eval = eval(str(biz_information))
                name = biz_information_eval['first_name_eng']
                if name != None:
                    name_surename += name
                    surename = biz_information_eval['last_name_eng']
                    name_surename += ' ' + surename
                else:
                    name_surename = email
                # print ('name_surename:',name_surename)
                return name_surename
        else:
            return email
    except Exception as e:
        return email
    finally:
        connection.close()


def fine_name_surename_list(email):
    arr_name = []
    for x in range(len(email)):
        query_name = paper_lesslogin.query.filter(paper_lesslogin.biz_information.contains(email[x])).all()
        name_surename = ''
        if query_name != None :
            for x in range(len(query_name)):
                biz_information = query_name[x].biz_information
                biz_information_eval = eval(str(biz_information))
                name = biz_information_eval['first_name_th']
                name_surename += str(name)
                surename = biz_information_eval['last_name_th']
                name_surename += ' ' + str(surename)
            if name_surename != '':
                arr_name.append(name_surename)
            else:
                arr_name.append(email[x])
    return arr_name

def fine_title_list(email):
    arr_name = []
    for x in range(len(email)):
        query_name = paper_lesslogin.query.filter(paper_lesslogin.biz_information.contains(email[x])).all()
        name_surename = ''
        if query_name != None :
            for x in range(len(query_name)):
                biz_information = query_name[x].biz_information
                biz_information_eval = eval(str(biz_information))
                title = biz_information_eval['account_title_th']
                name_surename += str(title)
            if name_surename != '':
                arr_name.append(name_surename)
            else:
                arr_name.append(email[x])
    return arr_name

def send_messageToChat_v4_2(message,start_time,token_header):
    token_bot = token_service
    bot_chat_id = bot_id

    time_sec = "{0:.2f}".format((time.time() - start_time))
    time_millisec = int((time.time() - start_time)*1000)
    try:
        headers = {
            'content-type': 'application/json',
            'Authorization':token_bot
        }
        data_Json = {
            "to": useridChat,
            "bot_id": bot_chat_id,
            "type": "text",
            "message": str(message)
        }
        
        r = requests.post(url_chat,json=data_Json,headers=headers,verify=True, cert=('cert/oneid.cer', 'cert/oneid.key'))
        
        if r.status_code == 200 or r.status_code == 201:
            return r.json()
        else:
            error_except(r.status_code,str((r.json())['message']),'service oneChat',r.status_code)
            return r.json()
    except requests.Timeout as ex:
        error_except(ex,"Timeout ",'service oneChat',r.status_code)
        return {'result':'ER','msg':'Timeout ' + str(ex)}
    except requests.HTTPError as ex:
        error_except(ex,"HTTPError ",'service oneChat',r.status_code)
        return {'result':'ER','msg':'HTTPError ' + str(ex)}
    except requests.ConnectionError as ex:
        error_except(ex,"ConnectionError ",'service oneChat',r.status_code)
        return {'result':'ER','msg':'ConnectionError ' + str(ex)}
    except requests.RequestException as ex:
        error_except(ex,"RequestException ",'service oneChat',r.status_code)
        return {'result':'ER','msg':'RequestException ' + str(ex)}
    except Exception as ex:
        error_except('ER',str(ex),'service oneChat',r.status_code)
        return {'result':'ER','msg':ex}

def getListUser(sidCode,email,name_surename,comment,typeComment):
    try:
        query = view_document.query.filter_by(step_data_sid = sidCode).first()
        doc_id = query.doc_id
        message = ''
        step_ = eval(str(query.data_json))
        step_num2 = ''
        send_onemail = query.sender_email
        tmp_json = {}
        list_onemail = []
        list_onemail2 = []
        list_status = []
        list_onemail.append(send_onemail)
        stop = False
        if 'step_num' in step_:
            # มีลำดับเดียวต้องส่งให้ senderEmail
            step_eval = eval(str(step_))
            step_num = step_eval['step_num']
            step_detail = step_eval['step_detail']
            for x in range(len(step_detail)):
                onemail = step_detail[x]['one_email']
                activity_code = step_detail[x]['activity_code']
                activity_status = step_detail[x]['activity_status']
                if email == send_onemail:
                    if typeComment == 'insert':
                        step_num2 = 'ผู้ส่งเอกสาร'
                    elif typeComment == 'update':
                        step_num2 = 'ผู้ส่งเอกสาร'
                    elif typeComment == 'delete':
                        step_num2 = 'ผู้ส่งเอกสาร'
                elif onemail == email :
                    if typeComment == 'insert':
                        step_num2 = 'ลำดับที่ ' + str(step_num)
                    elif typeComment == 'update':
                        step_num2 = 'ลำดับที่ ' + str(step_num)
                    elif typeComment == 'delete':
                        step_num2 = 'ลำดับที่ ' + str(step_num)
                for z in range(len(activity_code)):
                    if activity_code[z] == 'A03':
                        if activity_status[z] == 'Complete' or activity_status[z] == 'Reject' or activity_status[z] == 'Approve'  or activity_status[z] == 'Incomplete':
                            list_onemail.append(onemail)
        else : 
            # มีหลายลำดับต้องส่งให้ senderEmail, ลำดับก่อนหน้า
            for x in range(len(step_)):
                if stop == False:
                    list_stepNum = []
                    step_2 = step_[x]
                    step_detail = step_2['step_detail']
                    step_num = step_2['step_num']
                    for y in range(len(step_detail)):
                        activity_code = step_detail[y]['activity_code']
                        activity_status = step_detail[y]['activity_status']
                        activity_time = step_detail[y]['activity_time']
                        onemail = step_detail[y]['one_email']
                        try:
                            if email == send_onemail:
                                # step_num2 = 'ผู้ส่งเอกสารแสดงความคิดเห็น'
                                if typeComment == 'insert':
                                    step_num2 = 'ผู้ส่งเอกสาร'
                                elif typeComment == 'update':
                                    step_num2 = 'ผู้ส่งเอกสาร'
                                elif typeComment == 'delete':
                                    step_num2 = 'ผู้ส่งเอกสาร'
                            elif email == onemail :
                                # step_num2 = 'ลำดับที่ ' + str(step_num)
                                if typeComment == 'insert':
                                    step_num2 = 'ลำดับที่ ' + str(step_num)
                                elif typeComment == 'update':
                                    step_num2 = 'ลำดับที่ ' + str(step_num)
                                elif typeComment == 'delete':
                                    step_num2 = 'ลำดับที่ ' + str(step_num)
                        except Exception as e:
                            print(str(e))
                        for z in range(len(activity_code)):
                            if activity_code[z] == 'A03':
                                if activity_status[z] == 'Complete' or activity_status[z] == 'Reject' or activity_status[z] == 'Approve' or activity_status[z] == 'Incomplete':
                                    list_onemail.append(onemail)
                                    if activity_status[z] == 'Reject' or activity_status[z] == 'Approve' or activity_status[z] == 'Incomplete':
                                        stop = True                          
        
        if typeComment == 'insert':
            message = 'แจ้งเตือน Paperless' + '\n' + 'เลขที่เอกสาร ' + str(doc_id) + '\n\n'
            message += 'มีการแสดงความคิดเห็นโดย' + '\n' + 'คุณ' + str(name_surename) + ' ' + str(step_num2) + '\n\n'
            message += 'ความคิดเห็น' + ' ' + str(comment)
            message_sender =  'แจ้งเตือน Paperless' + '\n' + 'เลขที่เอกสาร ' + str(doc_id) + '\n\n'
            message_sender += 'คุณได้แสดงความคิดเห็น' + ' ' + '(' + str(name_surename) + ')\n' +'ความคิดเห็น ' + str(comment) 
            tmp_json['msg_general'] = message
            tmp_json['msg_sender'] = message_sender
        elif typeComment == 'update':
            message = 'แจ้งเตือน Paperless' + '\n' + 'เลขที่เอกสาร ' + str(doc_id) + '\n\n'
            message += 'มีการเปลี่ยนแปลงความคิดเห็นโดย' + '\n' + 'คุณ' + str(name_surename) + ' ' + str(step_num2) + '\n\n'
            message += 'ความคิดเห็น' + ' ' + str(comment)
            message_sender =  'แจ้งเตือน Paperless' + '\n' + 'เลขที่เอกสาร ' + str(doc_id) + '\n\n'
            message_sender += 'คุณได้เปลี่ยนแปลงความคิดเห็น' + ' ' + '(' + str(name_surename) + ')\n' +'ความคิดเห็น ' + str(comment) 
            tmp_json['msg_general'] = message
            tmp_json['msg_sender'] = message_sender
        elif typeComment == 'delete':
            message = 'แจ้งเตือน Paperless' + '\n' + 'เลขที่เอกสาร ' + str(doc_id) + '\n\n'
            message += 'มีการลบความคิดเห็นโดย' + '\n' + 'คุณ' + str(name_surename) + ' ' + str(step_num2) + '\n\n'
            message += 'ความคิดเห็น' + ' ' + str(comment)
            message_sender =  'แจ้งเตือน Paperless' + '\n' + 'เลขที่เอกสาร ' + str(doc_id) + '\n\n'
            message_sender += 'คุณได้ลบความคิดเห็น' + ' ' + '(' + str(name_surename) + ')\n' +'ความคิดเห็นที่ถูกลบ ' + str(comment) 
            tmp_json['msg_general'] = message
            tmp_json['msg_sender'] = message_sender
        dict_ = Counter(list_onemail)
        for x, y in dict_.items():
            list_onemail2.append(x)
        tmp_json['list_onemail'] = list_onemail2
        return tmp_json
    except Exception as e:
        exc_type, exc_obj, exc_tb = sys.exc_info()
        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        print(exc_type, fname, exc_tb.tb_lineno)
        print(str(e))
        return {'result':'ER','messageText':str(e)}

def TradeExcelReport(tmp_tax_id,result_DB):
    # print('123')
    result_biz_info = {}
    tmp_list_sid_code = []
    count_document = 0
    count_rowDocument = 0
    count_rowDocument_StatusActive = 0
    count_rowDocument_StatusReject = 0
    count_rowDocument_StatusCancel = 0
    statusFile_count_approve = 0
    statusFile_count_pendding = 0
    statusFile_count_reject = 0
    statusFile_count_wait = 0
    step_time = []
    step_time_total = []
    t1 = None
    t2 = None
    # result_DB = query_email[n]
    sid_email = result_DB.sid
    # result_DB = paper_lessdatastep.query.filter(paper_lessdatastep.sid==sid_list_email[n]).first()
    jsonData_eval = eval(result_DB.data_json)
    try:
        tmp_biz_info = eval(result_DB.biz_info)
        if str(tmp_tax_id).replace(' ','') != '':
            if tmp_biz_info['id_card_num'] == tmp_tax_id:
                result_biz_info = {
                    'id':tmp_biz_info['id'],
                    'id_card_num':tmp_biz_info['id_card_num'],
                    'first_name_eng':tmp_biz_info['first_name_eng'],
                    'first_name_th':tmp_biz_info['first_name_th']
                }
            else:
                result_biz_info = {
                    'id':tmp_biz_info['id'],
                    'id_card_num':tmp_biz_info['id_card_num'],
                    'first_name_eng':tmp_biz_info['first_name_eng'],
                    'first_name_th':tmp_biz_info['first_name_th']
                }
        else:
            result_biz_info = {
                'id':tmp_biz_info['id'],
                'id_card_num':tmp_biz_info['id_card_num'],
                'first_name_eng':tmp_biz_info['first_name_eng'],
                'first_name_th':tmp_biz_info['first_name_th']
            }

    except Exception as e:
        if result_DB.biz_info != 'None':
            result_biz_info = {
                'id':None,
                'id_card_num':None,
                'first_name_eng':None,
                'first_name_th':None
            }
        else:
            result_biz_info = {
                'id':None,
                'id_card_num':None,
                'first_name_eng':None,
                'first_name_th':None
            }
    try:
        arr_step_info = []
        timestamp_info = []
        step_time_1 = []
        step_timeline = []
        result = None
        timing_1 = None
        list_string_timing = []
        string_list_timeline = ''
        concat_steptimeline = ''
        list_arr = []
        if 'step_num' in jsonData_eval:
            step_status = ''
            step_before = ''
            my_step = ''
            res_status_file = 'Y'
            arr_step_totle = []
            json_data_info = jsonData_eval
            step_ = json_data_info
            details_email_reject = []
            details_email_incomplete = []
            if 'step_detail' in json_data_info:
                for s in range(len(json_data_info['step_detail'])):
                    json_info_step2 = {}
                    step_2 = json_data_info['step_detail'][s]
                    for u in range(len(json_data_info['step_detail'][s]['activity_code'])):
                        oneMail = json_data_info['step_detail'][s]['one_email']
                        # if str(oneMail).replace(' ','').lower() == self.emailUser:
                        if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
                            # print(timestamp_info)
                            # print(sid_email)
                            if my_step == '':
                                if json_data_info['step_detail'][s]['activity_status'][u] == 'Complete':
                                    step_status = 'Complete'
                                    timestemp = int(time.mktime(datetime.datetime.strptime(json_data_info['step_detail'][s]['activity_time'][u], "%Y-%m-%d %H:%M:%S").timetuple()))
                                    timestamp_info.append(timestemp)
                                    t1 = step_2['activity_time'][u]
                                    t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                    step_time_1.append(t2)
                                elif json_data_info['step_detail'][s]['activity_status'][u] == 'Approve':
                                    step_status = 'Complete'
                                    timestemp = int(time.mktime(datetime.datetime.strptime(json_data_info['step_detail'][s]['activity_time'][u], "%Y-%m-%d %H:%M:%S").timetuple()))
                                    timestamp_info.append(timestemp)
                                    t1 = step_2['activity_time'][u]
                                    t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                    step_time_1.append(t2)
                                elif json_data_info['step_detail'][s]['activity_status'][u] == 'Reject':
                                    step_status = 'Reject'
                                    timestemp = int(time.mktime(datetime.datetime.strptime(json_data_info['step_detail'][s]['activity_time'][u], "%Y-%m-%d %H:%M:%S").timetuple()))
                                    timestamp_info.append(timestemp)
                                    t1 = step_2['activity_time'][u]
                                    t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                    step_time_1.append(t2)
                                else:
                                    try:
                                        step_status  = 'Incomplete'
                                        # t1 = step_2['activity_time'][u]
                                        # t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                        # step_time_1.append(t2)
                                        details_email_incomplete.append({'email':json_data_info['step_detail'][s]['one_email'],'step_num':json_data_info['step_num']})
                                    except Exception as ex:
                                        step_status = 'Incomplete'
                            arr_step_info.append(step_status)
                            arr_step_info.append(step_before)
            # print(arr_step_info)
            if 'Reject' in arr_step_info:
                res_status_file = 'R'
                res_status_file_string = 'เอกสารปฏิเสธอนุมัติ'
            elif 'Complete' in arr_step_info:
                res_status_file = 'Y'
                res_status_file_string = 'อนุมัติแล้ว'
            elif 'Waitting' in arr_step_info:
                res_status_file = 'W'
                res_status_file_string = 'รออนุมัติ'
            elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                res_status_file = 'N'
                res_status_file_string = 'กำลังดำเนินการ'
            else:
                res_status_file_string = 'อนุมัติแล้ว'
            if res_status_file == 'W':
                statusFile_count_wait = statusFile_count_wait + 1
            elif res_status_file == 'Y':
                statusFile_count_approve = statusFile_count_approve + 1
            elif res_status_file == 'R':
                statusFile_count_reject = statusFile_count_reject + 1
            else:
                statusFile_count_pendding = statusFile_count_pendding + 1
            result_SenderDetails = paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_email).first()
            if result_SenderDetails !=None:
                file_name = result_SenderDetails.file_name
                dateTime_String = result_SenderDetails.send_time
                trackingCode = result_SenderDetails.tracking_id
                sender_name = result_SenderDetails.sender_name
                sender_email = result_SenderDetails.sender_email
                if sender_name == 'null null':
                    sender_name = sender_email
            result_DetailsDocument = paper_lessdocument.query.filter(paper_lessdocument.step_id==sid_email).first()
            db.session.close()
            if result_DetailsDocument != None:
                documentsign_page_options = result_DetailsDocument.sign_page_options
                
                if result_DetailsDocument.options_page != None:
                    document_options_page = eval(result_DetailsDocument.options_page)
                else:
                    document_options_page = {'subject_text':'','body_text':''}
                if result_DetailsDocument.urgent_type != None:
                    documentUrgentType = result_DetailsDocument.urgent_type
                    if documentUrgentType == 'I':
                        documentUrgentString = 'ด่วนมาก'
                    elif documentUrgentType == 'U':
                        documentUrgentString = 'ด่วน'
                    elif documentUrgentType == 'M':
                        documentUrgentString = 'ปกติ'
                if result_DetailsDocument.documentJson != None:
                    documentJson_result = eval(result_DetailsDocument.documentJson)
                    documentName = documentJson_result['document_name']
                    documentType = documentJson_result['document_type']
                else:
                    documentName = None
                    documentType = None
                document_Id = result_DetailsDocument.document_id
            start_send_time = dateTime_String.timestamp()
            now = datetime.datetime.now()
            if  res_status_file == 'W' or res_status_file == 'N' :
                timing = (now.timestamp()) - start_send_time
                # print ('w, n',timing)
            elif res_status_file == 'R' or res_status_file == 'Y':
                timing = t2 - start_send_time
                # print ('R,Y',timing)
            else:
                print('else')
            timing_1 = convert_hr_min_sec_v1(int(timing))
            string_timing = ''
            for yy in range(len(timing_1)):
                if timing_1[yy] > 0:
                    if yy == 0:
                        type_date = " วัน "
                    elif yy == 1:
                        type_date = " ชั่วโมง "
                    elif yy == 2:
                        type_date = " นาที "
                    elif yy == 3:
                        type_date = " วินาที "
                    string_timing += str(timing_1[yy]) + type_date
            string_list_timeline = ''
            concat_steptimeline = ''
            if(len(step_time_1) !=0):
                for i in range(len(step_time_1)):
                    if(i==0):
                        # print ('เริ่มต้น : ',start_send_time)
                        result = step_time_1[i] - start_send_time
                        # print ('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ',result)
                        list_timeline = convert_hr_min_sec_v1(int(result))
                        # print ('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ : ',list_timeline)
                        for yy in range(len(list_timeline)):
                            if list_timeline[yy] > 0:
                                if yy == 0:
                                    type_date = " วัน "
                                elif yy == 1:
                                    type_date = " ชั่วโมง "
                                elif yy == 2:
                                    type_date = " นาที "
                                elif yy == 3:
                                    type_date = " วินาที "
                                string_list_timeline += str(list_timeline[yy]) + type_date
                        # print('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ (string)',string_list_timeline)
                        step_timeline.append(string_list_timeline)
                        string_list_timeline = ''
                    else:
                        result = step_time_1[i] - step_time_1[i-1]
                        # print ('ลำดับปัจจุบัน- ลำดับก่อนหน้า',result)
                        list_timeline = convert_hr_min_sec_v1(int(result))
                        for yy in range(len(list_timeline)):
                            if list_timeline[yy] > 0:
                                if yy == 0:
                                    type_date = " วัน "
                                elif yy == 1:
                                    type_date = " ชั่วโมง "
                                elif yy == 2:
                                    type_date = " นาที "
                                elif yy == 3:
                                    type_date = " วินาที "
                                string_list_timeline += str(list_timeline[yy]) + type_date
                        # print('เริ่มต้น -  ลำดับก่อนหน้า (string)',string_list_timeline)
                        step_timeline.append(string_list_timeline)
                        string_list_timeline = ''
                # print ("สรุปเวลาการเซ็นแต่ละลำดับ :",step_timeline)
                concat_steptimeline += 'ระยะเวลาดำเนินการ\n'
                for j in range(len(step_timeline)):
                    if(j == (len(step_timeline))-1):
                        concat_steptimeline += '-ลำดับที่ ' +str(j+1)+ ' : ' + str(step_timeline[j])
                    else:
                        concat_steptimeline += '-ลำดับที่ ' +str(j+1)+ ' : ' + str(step_timeline[j]) + '\n'
                # print ('concat_steptimeline',concat_steptimeline)
            elif(len(step_time_1) == 0):
                concat_steptimeline += 'อยู่ระหว่างดำเนินการ'
            # string_details_avg_time = ''
            string_details_avg_time = 'ระยะเวลาทั้งหมดที่เอกสารถูกดำเนินการ\n'
            if len(timestamp_info) != 0:
                end_time_document = timestamp_info[-1]
                result_start_and_end = end_time_document - start_send_time
                list_day_hr_min_sec = convert_hr_min_sec_v1(int(result_start_and_end))
                for yy in range(len(list_day_hr_min_sec)):

                    if list_day_hr_min_sec[yy] > 0:
                        if yy == 0:
                            type_date = " วัน "
                        elif yy == 1:
                            type_date = " ชั่วโมง "
                        elif yy == 2:
                            type_date = " นาที "
                        elif yy == 3:
                            type_date = " วินาที "
                        string_details_avg_time += str(list_day_hr_min_sec[yy]) + type_date
            # print(string_details_avg_time)
            # else:
            #     string_details_avg_time = str(day_int) + " วัน " + str(hr_int) + " ชั่วโมง " + str(min_int) + " นาที " + str(sec_int) + " วินาที"
            # print(string_details_avg_time)
            if res_status_file == 'N':
                string_details_avg_time = ""

            # th_dateTime_1 = convert_datetime_TH_1(int(dateTime_String.timestamp()))
            th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
            ts = int(time.time())
            date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
            year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
            datetime_display = int(dateTime_String.timestamp())
            date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
            yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
            time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
            old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
            if date_time_today == date_time_db:
                date_display_show = time_show_db
            else:
                if year_today == yar_db:
                    date_display_show = convert_datetime_TH_2_display(datetime_display)
                else:
                    date_display_show = old_year
            lis_details = []
            string_remark_description = ''
            title_remark = ''
            if res_status_file == 'R':
                if len(details_email_reject) != 0:
                    for o in range(len(details_email_reject)):
                        query_data = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(details_email_reject[o]['email'])).all()
                        try:
                            data_json_name = eval(query_data[0].citizen_data)['first_name_th'] + ' ' + eval(query_data[0].citizen_data)['last_name_th']
                        except Exception as e:
                            data_json_name = details_email_incomplete[oi]['email']
                        details_msg = {}
                        details_msg['reject_by'] = details_email_reject[o]['email']
                        details_msg['reject_in_step_num'] = details_email_reject[o]['step_num']
                        details_msg['reject_in_datetime'] = details_email_reject[o]['datetime']
                        title_remark = 'ยกเลิกโดย ลำดับที่ ' + str(details_email_reject[o]['step_num'])
                        datetime_display = convert_datetime_TH_2(int(details_email_reject[o]['datetime_string']))
                        string_remark_description +=  '\n-' + data_json_name + '\nวันที่ ' + datetime_display
                        lis_details.append(details_msg)
            elif res_status_file == 'N':
                if len(details_email_incomplete) != 0:
                    for oi in range(len(details_email_incomplete)):
                        tmp_step_num_list_0 = details_email_incomplete[0]['step_num']
                        tmp_step_num_list = details_email_incomplete[oi]['step_num']
                        if tmp_step_num_list_0 == tmp_step_num_list:
                            query_data = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(details_email_incomplete[oi]['email'])).all()
                            try:
                                data_json_name = eval(query_data[0].citizen_data)['first_name_th'] + ' ' + eval(query_data[0].citizen_data)['last_name_th']
                            except Exception as e:
                                data_json_name = details_email_incomplete[oi]['email']
                            details_msg = {}
                            details_msg['pending_by'] = details_email_incomplete[oi]['email']
                            details_msg['pending_in_step_num'] = details_email_incomplete[oi]['step_num']
                            title_remark = 'รอการอนุมัติ ลำดับที่ ' + str(details_email_incomplete[oi]['step_num'])
                            string_remark_description += '\n-' + data_json_name + ''
                            lis_details.append(details_msg)
            list_arr.append({
                'sidCode':sid_email,
                'biz_detail':result_biz_info,
                'document_name':documentName,
                'document_type':documentType,
                'document_urgent':documentUrgentType,
                'document_urgent_string':documentUrgentString,
                'dateTime_String':str(dateTime_String).split('+')[0],
                'dateTime_String_TH_1':th_dateTime_2,
                'dateTime_display':date_display_show,
                'document_id':document_Id,
                'stamp_all':documentsign_page_options,
                'string_details_avg_time':string_details_avg_time,
                # 'dateTime_String_TH_2':th_dateTime_2,
                'date_String':str(dateTime_String).split(' ')[0],
                'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                'status_file_code':res_status_file,
                'status_file_details':lis_details,
                'status_file_string':res_status_file_string,
                'dateTime':int(dateTime_String.timestamp()),
                'tracking_id':trackingCode,
                'sender_name':sender_name,
                'sender_email':sender_email,
                'file_name':file_name,
                'remark_description': title_remark + string_remark_description,
                'timeline': concat_steptimeline,
                'timing': string_timing,
                'data_options':document_options_page
            })
            return list_arr
        else:
            step_status = ''
            res_status_file = 'Y'
            step_before = ''
            step_list_before = []
            step_list_ = []
            step_list_next = []
            arr_step_totle = []
            step_me = ''
            step_sum_status = []
            sum_status_step_list = []
            list_check_step = []
            step_list_data = []
            max_step = (len(jsonData_eval))
            step_infomation = jsonData_eval
            sum_status_step = []
            details_email_reject = []
            details_email_incomplete = []
            for i in range(len(step_infomation)):
                list_check_step = []
                json_step_info_2 = {}
                step_list_data = []
                step_ = step_infomation[i]
                step_num = step_infomation[i]['step_num']
                json_step_info_2['step_status'] = ''
                for u in range(len(step_['step_detail'])):
                    oneMail = step_['step_detail'][u]['one_email']
                    # if str(oneMail).replace(' ','').lower() == self.emailUser:
                    #     step_me = step_infomation[i]['step_num']
                    #     step_me = int(step_me) - 1
                    step_2 = step_['step_detail'][u]
                    for k in range(len(step_2['activity_code'])):
                        if step_2['activity_code'][k] == 'A03':
                            # print()
                            if step_2['activity_status'][k] == 'Complete':
                                timestemp = int(time.mktime(datetime.datetime.strptime(step_2['activity_time'][k], "%Y-%m-%d %H:%M:%S").timetuple()))
                                timestamp_info.append(timestemp)
                                t1 = str(step_2['activity_time'][k])
                                t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))

                                time_success = change_to_Timestamp(t1)
                                step_time_1.append(time_success)
                                # step_time_1.append(t2)
                            elif step_2['activity_status'][k] == 'Approve':
                                timestemp = int(time.mktime(datetime.datetime.strptime(step_2['activity_time'][k], "%Y-%m-%d %H:%M:%S").timetuple()))
                                timestamp_info.append(timestemp)
                                t1 = str(step_2['activity_time'][k])
                                t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                time_success = change_to_Timestamp(t1)
                                step_time_1.append(time_success)
                                # step_time_1.append(t2)
                            elif step_2['activity_status'][k] == 'Reject':
                                timestemp = int(time.mktime(datetime.datetime.strptime(step_2['activity_time'][k], "%Y-%m-%d %H:%M:%S").timetuple()))
                                timestamp_info.append(timestemp)
                                t1 = str(step_2['activity_time'][k])
                                t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                time_success = change_to_Timestamp(t1)
                                step_time_1.append(time_success)
                                # step_time_1.append(t2)
                            json_step_info = {}
                            json_step_info['activity_status'] = step_2['activity_status'][k]
                            json_step_info['one_email'] = step_2['one_email']
                            json_step_info['step_num'] = step_num
                            list_check_step.append(json_step_info['activity_status'])
                            step_list_data.append(json_step_info)
                    # print ('Round time', step_time_1)
                    json_step_info_2['step_info'] = step_list_data
                    if json_step_info_2['step_status'] == '':
                        if 'Reject' in list_check_step:
                            for kz in range(len(step_2['activity_code'])):
                                if step_2['activity_code'][kz] == 'A03':
                                    details_email_reject.append({'email':step_2['one_email'],'step_num':step_num,'datetime':step_2['activity_time'][kz],'datetime_string':time.mktime(datetime.datetime.strptime(step_2['activity_time'][kz], "%Y-%m-%d %H:%M:%S").timetuple())})
                            json_step_info_2['step_status'] = 'Reject'
                        elif 'Complete' in list_check_step:
                            json_step_info_2['step_status'] = 'Complete'
                        elif 'Approve' in list_check_step:
                            json_step_info_2['step_status'] = 'Complete'
                        elif 'Incomplete' in list_check_step:
                            # details_email_incomplete.append({'email':step_2['one_email'],'step_num':step_num})
                            json_step_info_2['step_status'] = 'Incomplete'
                        elif 'Pending' in list_check_step:
                            # details_email_incomplete.append({'email':step_2['one_email'],'step_num':step_num})
                            json_step_info_2['step_status'] = 'Incomplete'
                        else:
                            json_step_info_2['step_status'] = 'Complete'
                    if json_step_info_2['step_status'] == 'Incomplete':
                        if 'Reject' in list_check_step:
                            json_step_info_2['step_status'] = 'Reject'
                        elif 'Complete' in list_check_step:
                            json_step_info_2['step_status'] = 'Complete'
                        elif 'Approve' in list_check_step:
                            json_step_info_2['step_status'] = 'Complete'
                        elif 'Incomplete' in list_check_step:
                            details_email_incomplete.append({'email':step_2['one_email'],'step_num':step_num})
                            json_step_info_2['step_status'] = 'Incomplete'
                        elif 'Pending' in list_check_step:
                            details_email_incomplete.append({'email':step_2['one_email'],'step_num':step_num})
                            json_step_info_2['step_status'] = 'Incomplete'
                        else:
                            json_step_info_2['step_status'] = 'Complete'
                    
                    sum_status_step_list.append(json_step_info_2['step_status'])
                sum_status_step.append(json_step_info_2['step_status'])
                arr_step_info.append(json_step_info_2['step_status'])
            index_mystep = step_me
            # print(sid_email)
            # print(arr_step_info)
            if 'Reject' in arr_step_info:
                res_status_file = 'R'
                res_status_file_string = 'เอกสารปฏิเสธอนุมัติ'
            elif 'Incomplete_1' in arr_step_info or 'Pending_1' in arr_step_info:
                res_status_file = 'W'
                res_status_file_string = 'รออนุมัติ'
            elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                res_status_file = 'N'
                res_status_file_string = 'กำลังดำเนินการ'
            elif 'Wait__' in arr_step_info:
                res_status_file = 'Z'
                res_status_file_string = 'อยู่ในช่วงดำเนินการ'
            elif 'Waitting' in arr_step_info:
                res_status_file = 'W'
                res_status_file_string = 'รออนุมัติ'
            else:
                res_status_file_string = 'อนุมัติแล้ว'
            if res_status_file == 'W':
                statusFile_count_wait = statusFile_count_wait + 1
            elif res_status_file == 'Y':
                statusFile_count_approve = statusFile_count_approve + 1
            elif res_status_file == 'R':
                statusFile_count_reject = statusFile_count_reject + 1
            else:
                statusFile_count_pendding = statusFile_count_pendding + 1
            result_SenderDetails = paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_email).first()
            db.session.close()
            if result_SenderDetails !=None:
                file_name = result_SenderDetails.file_name
                dateTime_String = result_SenderDetails.send_time
                trackingCode = result_SenderDetails.tracking_id
                sender_name = result_SenderDetails.sender_name
                sender_email = result_SenderDetails.sender_email
                if sender_name == 'null null':
                    sender_name = sender_email
            result_DetailsDocument = paper_lessdocument.query.filter(paper_lessdocument.step_id==sid_email).first()
            db.session.close()
            if result_DetailsDocument != None:
                documentsign_page_options = result_DetailsDocument.sign_page_options
                if result_DetailsDocument.options_page != None:
                    document_options_page = eval(result_DetailsDocument.options_page)
                else:
                    document_options_page = {'subject_text':'','body_text':''}
                if result_DetailsDocument.urgent_type != None:
                    documentUrgentType = result_DetailsDocument.urgent_type
                    if documentUrgentType == 'I':
                        documentUrgentString = 'ด่วนมาก'
                    elif documentUrgentType == 'U':
                        documentUrgentString = 'ด่วน'
                    elif documentUrgentType == 'M':
                        documentUrgentString = 'ปกติ'
                if result_DetailsDocument.documentJson != None:
                    documentJson_result = eval(result_DetailsDocument.documentJson)
                    documentName = documentJson_result['document_name']
                    documentType = documentJson_result['document_type']
                else:
                    documentName = None
                    documentType = None
                document_Id = result_DetailsDocument.document_id
            start_send_time = dateTime_String.timestamp()
            now = datetime.datetime.now()
            if  res_status_file == 'W' or res_status_file == 'N' :
                timing = (now.timestamp()) - start_send_time
                # print ('w, n',timing)
            elif res_status_file == 'R' or res_status_file == 'Y':
                timing = t2 - start_send_time
                # print ('R,Y',timing)
            else:
                print('else')
            timing_1 = convert_hr_min_sec_v1(int(timing))
            string_timing = ''
            
            for yy in range(len(timing_1)):
                if timing_1[yy] > 0:
                    if yy == 0:
                        type_date = " วัน "
                    elif yy == 1:
                        type_date = " ชั่วโมง "
                    elif yy == 2:
                        type_date = " นาที "
                    elif yy == 3:
                        type_date = " วินาที "
                    string_timing += str(timing_1[yy]) + type_date
            # list_string_timing.append(string_timing)
            # string_timing = ''
            # print ('list_steptime1',step_time_1)
            string_list_timeline = ''
            concat_steptimeline = ''
            # print('step_time_1',step_time_1)
            timeline_ = getTimeline(dateTime_String,step_time_1)
            # if(len(step_time_1) != 0):
            #     for i in range(len(step_time_1)):
            #         if(i==0):
            #             # print ('เริ่มต้น : ',start_send_time)
            #             result = step_time_1[i] - start_send_time
            #             # print ('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ',result)
            #             list_timeline = convert_hr_min_sec_v1(int(result))
            #             # print ('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ : ',list_timeline)
            #             for yy in range(len(list_timeline)):
            #                 if list_timeline[yy] > 0:
            #                     if yy == 0:
            #                         type_date = " วัน "
            #                     elif yy == 1:
            #                         type_date = " ชั่วโมง "
            #                     elif yy == 2:
            #                         type_date = " นาที "
            #                     elif yy == 3:
            #                         type_date = " วินาที "
            #                     string_list_timeline += str(list_timeline[yy]) + type_date
            #             # print('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ (string)',string_list_timeline)
            #             step_timeline.append(string_list_timeline)
            #             string_list_timeline = ''
            #         else:
            #             result = step_time_1[i] - step_time_1[i-1]
            #             # print ('ลำดับปัจจุบัน- ลำดับก่อนหน้า',result)
            #             list_timeline = convert_hr_min_sec_v1(int(result))
            #             for yy in range(len(list_timeline)):
            #                 if list_timeline[yy] > 0:
            #                     if yy == 0:
            #                         type_date = " วัน "
            #                     elif yy == 1:
            #                         type_date = " ชั่วโมง "
            #                     elif yy == 2:
            #                         type_date = " นาที "
            #                     elif yy == 3:
            #                         type_date = " วินาที "
            #                     string_list_timeline += str(list_timeline[yy]) + type_date
            #             # print('เริ่มต้น - ลำดับก่อนหน้า (string)',string_list_timeline)
            #             step_timeline.append(string_list_timeline)
            #             string_list_timeline = ''
            #     # print ("สรุปเวลาการเซ็นแต่ละลำดับ :",step_timeline)
            #     concat_steptimeline += 'ระยะเวลาดำเนินการ\n'
            #     for j in range(len(step_timeline)):
            #         if(j == (len(step_timeline))-1):
            #             concat_steptimeline += '-ลำดับที่ ' +str(j+1)+ ' : ' + str(step_timeline[j])
            #         else:
            #             concat_steptimeline += '-ลำดับที่ ' +str(j+1)+ ' : ' + str(step_timeline[j]) + '\n'
            #     # print ('concat_steptimeline',concat_steptimeline)
            # elif(len(step_time_1) == 0):
            #     concat_steptimeline += 'อยู่ระหว่างดำเนินการ'

            # string_details_avg_time = ''
            string_details_avg_time = 'ระยะเวลาทั้งหมดที่เอกสารถูกดำเนินการ\n'
            if len(timestamp_info) != 0:
                # end_time_document = timestamp_info[-1]
                # result_start_and_end = end_time_document - start_send_time
                end_time_document = timestamp_info[-1]
                result_start_and_end = end_time_document - start_send_time
                list_day_hr_min_sec = convert_hr_min_sec_v1(int(result_start_and_end))
                # print(end_time_document,start_send_time)
                # print(timestamp_info)
                for yy in range(len(list_day_hr_min_sec)):
                    if list_day_hr_min_sec[yy] > 0:
                        if yy == 0:
                            type_date = " วัน "
                        elif yy == 1:
                            type_date = " ชั่วโมง "
                        elif yy == 2:
                            type_date = " นาที "
                        elif yy == 3:
                            type_date = " วินาที "
                        string_details_avg_time += str(list_day_hr_min_sec[yy]) + type_date
            # print(string_details_avg_time)
            if res_status_file == 'N':
                string_details_avg_time = ""
            # th_dateTime_1 = convert_datetime_TH_1(int(dateTime_String.timestamp()))
            th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
            ts = int(time.time())
            date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
            year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
            datetime_display = int(dateTime_String.timestamp())
            date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
            yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
            time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
            old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
            if date_time_today == date_time_db:
                date_display_show = time_show_db
            else:
                if year_today == yar_db:
                    date_display_show = convert_datetime_TH_2_display(datetime_display)
                else:
                    date_display_show = old_year
            lis_details = []
            string_remark_description = ''
            title_remark = ''
            if res_status_file == 'R':
                if len(details_email_reject) != 0:
                    for o in range(len(details_email_reject)):
                        query_data = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(details_email_reject[o]['email'])).all()
                        if len(query_data) != 0:
                            if eval(query_data[0].citizen_data)['first_name_th'] != None:
                                data_json_name = str(eval(query_data[0].citizen_data)['first_name_th'] + ' ' + eval(query_data[0].citizen_data)['last_name_th'])
                            else:
                                data_json_name = details_email_reject[o]['email']
                        else:
                            data_json_name = details_email_reject[o]['email']
                        # print(data_json_name)
                        details_msg = {}
                        details_msg['reject_by'] = details_email_reject[o]['email']
                        details_msg['reject_in_step_num'] = details_email_reject[o]['step_num']
                        details_msg['reject_in_datetime'] = details_email_reject[o]['datetime']
                        title_remark = 'ยกเลิกโดย ลำดับที่ ' + str(details_email_reject[o]['step_num'])
                        datetime_display = convert_datetime_TH_2(int(details_email_reject[o]['datetime_string']))
                        string_remark_description +=  '\n-' + data_json_name + '\nวันที่ ' + datetime_display
                        lis_details.append(details_msg)
            elif res_status_file == 'N':
                if len(details_email_incomplete) != 0:
                    for oi in range(len(details_email_incomplete)):
                        tmp_step_num_list_0 = details_email_incomplete[0]['step_num']
                        tmp_step_num_list = details_email_incomplete[oi]['step_num']
                        if tmp_step_num_list_0 == tmp_step_num_list:
                            query_data = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(details_email_incomplete[oi]['email'])).all()
                            try:
                                data_json_name = eval(query_data[0].citizen_data)['first_name_th'] + ' ' + eval(query_data[0].citizen_data)['last_name_th']
                            except Exception as e:
                                data_json_name = details_email_incomplete[oi]['email']

                            details_msg = {}
                            details_msg['pending_by'] = details_email_incomplete[oi]['email']
                            details_msg['pending_in_step_num'] = details_email_incomplete[oi]['step_num']
                            title_remark = 'รอการอนุมัติ ลำดับที่ ' + str(details_email_incomplete[oi]['step_num'])
                            string_remark_description += '\n-' + data_json_name + ''
                            lis_details.append(details_msg)
            list_arr.append({
                'sidCode':sid_email,
                'biz_detail':result_biz_info,
                'document_name':documentName,
                'document_type':documentType,
                'document_urgent':documentUrgentType,
                'document_urgent_string':documentUrgentString,
                'dateTime_String':str(dateTime_String).split('+')[0],
                'dateTime_String_TH_1':th_dateTime_2,
                'dateTime_display':date_display_show,
                'document_id':document_Id,
                'stamp_all':documentsign_page_options,
                'string_details_avg_time':string_details_avg_time,
                # 'dateTime_String_TH_2':th_dateTime_2,
                'date_String':str(dateTime_String).split(' ')[0],
                'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                'status_file_code':res_status_file,
                'status_file_details':lis_details,
                'status_file_string':res_status_file_string,
                'dateTime':int(dateTime_String.timestamp()),
                'tracking_id':trackingCode,
                'sender_name':sender_name,
                'sender_email':sender_email,
                'file_name':file_name,
                'remark_description': title_remark + string_remark_description,
                'timeline': timeline_,
                'timing': string_timing,
                'data_options':document_options_page
            })
            # print('LIST_ARR',list_arr)
            db.session.close()
            return list_arr
        db.session.close()
    except Exception as e:
        exc_type, exc_obj, exc_tb = sys.exc_info()
        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        print(exc_type, fname, exc_tb.tb_lineno)
        print('ee',e)

def find_timeduration(time):
    time_duration = str(int(time * 1000))
    return time_duration

def check_Ref_Token(token):
    decodes = token
    decodes = decodes.split('.')
    decodes[2] = decodes[2][:-32] ##[:-32] ลบข้อมูลนับจากหลังไป 32 ตัวอักษร
    decodes = decodes[1]+'.'+decodes[2]+'.'+decodes[0]
    try:
        decodes = jwt.decode(decodes, 'bill', algorithms = 'HS256')
        return {'result':'OK', 'messageText':decodes}
    except jwt.ExpiredSignatureError:
        print('ExpiredSignatureError!')
        return {'result':'ER'}
    except jwt.InvalidTokenError:
        print('InvalidTokenError!')
        return {'result':'ER'}

def change_to_Timestamp(t1):
    t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
    return t2

def getTimeline(start_send_time,step_time):
    sendtime = int(datetime.datetime.timestamp(start_send_time))
    step_time_1 = []
    step_time_1 = step_time
    string_list_timeline = ''
    concat_steptimeline = ''
    step_timeline = []
    if(len(step_time_1) !=0):
        for i in range(len(step_time_1)):
            if(i==0):
                result = step_time_1[i] - sendtime
                list_timeline = convert_hr_min_sec_v1(int(result))
                for yy in range(len(list_timeline)):
                    if list_timeline[yy] > 0:
                        if yy == 0:
                            type_date = " วัน "
                        elif yy == 1:
                            type_date = " ชั่วโมง "
                        elif yy == 2:
                            type_date = " นาที "
                        elif yy == 3:
                            type_date = " วินาที "
                        string_list_timeline += str(list_timeline[yy]) + type_date
                step_timeline.append(string_list_timeline)
                string_list_timeline = ''
            else:
                result = step_time_1[i] - step_time_1[i-1]
                # print ('ลำดับปัจจุบัน- ลำดับก่อนหน้า',result)
                list_timeline = convert_hr_min_sec_v1(int(result))
                for yy in range(len(list_timeline)):
                    if list_timeline[yy] > 0:
                        if yy == 0:
                            type_date = " วัน "
                        elif yy == 1:
                            type_date = " ชั่วโมง "
                        elif yy == 2:
                            type_date = " นาที "
                        elif yy == 3:
                            type_date = " วินาที "
                        string_list_timeline += str(list_timeline[yy]) + type_date
                step_timeline.append(string_list_timeline)
                string_list_timeline = ''
        concat_steptimeline += 'ระยะเวลาดำเนินการ\n'
        for j in range(len(step_timeline)):
            if(j == (len(step_timeline))-1):
                concat_steptimeline += '-ลำดับที่ ' +str(j+1)+ ' : ' + str(step_timeline[j])
            else:
                concat_steptimeline += '-ลำดับที่ ' +str(j+1)+ ' : ' + str(step_timeline[j]) + '\n'
        # print (concat_steptimeline)
    elif(len(step_time_1) == 0):
        concat_steptimeline += 'อยู่ระหว่างดำเนินการ'
    return concat_steptimeline

def getlistTimeline(start_send_time,step_time):
    sendtime = int(datetime.datetime.timestamp(start_send_time))
    step_time_1 = []
    step_time_1 = step_time
    string_list_timeline = ''
    concat_steptimeline = ''
    step_timeline = []
    if(len(step_time_1) !=0):
        for i in range(len(step_time_1)):
            if(i==0):
                result = step_time_1[i] - sendtime
                list_timeline = convert_hr_min_sec_v1(int(result))
                for yy in range(len(list_timeline)):
                    if list_timeline[yy] > 0:
                        if yy == 0:
                            type_date = " วัน "
                        elif yy == 1:
                            type_date = " ชั่วโมง "
                        elif yy == 2:
                            type_date = " นาที "
                        elif yy == 3:
                            type_date = " วินาที "
                        string_list_timeline += str(list_timeline[yy]) + type_date
                step_timeline.append(string_list_timeline)
                string_list_timeline = ''
            else:
                result = step_time_1[i] - step_time_1[i-1]
                list_timeline = convert_hr_min_sec_v1(int(result))
                for yy in range(len(list_timeline)):
                    if list_timeline[yy] > 0:
                        if yy == 0:
                            type_date = " วัน "
                        elif yy == 1:
                            type_date = " ชั่วโมง "
                        elif yy == 2:
                            type_date = " นาที "
                        elif yy == 3:
                            type_date = " วินาที "
                        string_list_timeline += str(list_timeline[yy]) + type_date
                step_timeline.append(string_list_timeline)
                string_list_timeline = ''
    elif(len(step_time_1) == 0):
        step_timeline = []
    return step_timeline

def timing(time,start_send_time):
    t = int(time - datetime.datetime.timestamp(start_send_time))

    timing_1 = convert_hr_min_sec_v1(int(t))
    string_timing = ''
    for yy in range(len(timing_1)):
        if timing_1[yy] > 0:
            if yy == 0:
                type_date = " วัน "
            elif yy == 1:
                type_date = " ชั่วโมง "
            elif yy == 2:
                type_date = " นาที "
            elif yy == 3:
                type_date = " วินาที "
            string_timing += str(timing_1[yy]) + type_date
    return string_timing

def random_digit_generator():
    random_list = []
    for i in range(10):
        random_list.append(random.choice(string.digits))
    return random_list

def get_random_string(length):
    random_list = []
    for i in range(length):
        random_list.append(random.choice(
            string.ascii_uppercase + string.digits))
    return random_list

def gen_digit_tracking(tracking):
    list_char = []
    list_char_new = []
    num_count = 13
    sum_digit = 0
    try:
        for i in range(len(tracking)):
            char = tracking[i]
            check_int = char.isnumeric()
            if check_int == False:
                char = int(ord(char))
            elif check_int == True:
                char = int(char)
            list_char.append(char)
            char = char*num_count
            num_count = num_count-1
            list_char_new.append(char)
        for j in range(len(list_char_new)):
            # print ('list_char_new',list_char_new[j])
            sum_digit = sum_digit+list_char_new[j]
        sum_digit = (sum_digit % 11)
        sum_digit = abs(11 - sum_digit)
        str_sum_digit = str(sum_digit)
        last_digit = str_sum_digit[-1]
        tracking_new = tracking+last_digit
        return {'result':'OK','status_Code':200,'messageText':str(tracking_new)}
    except Exception as e:
        print(str(e))
        exc_type, exc_obj, exc_tb = sys.exc_info()
        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        print(exc_type, fname, exc_tb.tb_lineno)
        return {'result':'ER','status_Code':200,'messageText':str(e)}

def check_digit_tracking(tracking):
    list_char = []
    list_char_new = []
    num_count = 13
    sum_digit = 0
    last_tracking = tracking[-1]
    first_digit = tracking[:-1]
    try:
        for i in range(len(first_digit)):
            char = first_digit[i]
            check_int = char.isnumeric()
            if check_int == False:
                char = int(ord(char))
            elif check_int == True:
                char = int(char)
            list_char.append(char)
            char = char*num_count
            num_count = num_count-1
            list_char_new.append(char)
        for j in range(len(list_char_new)):
            # print ('list_char_new',list_char_new[j])
            sum_digit = sum_digit+list_char_new[j]
        sum_digit = (sum_digit % 11)
        sum_digit = abs(11 - sum_digit)
        str_sum_digit = str(sum_digit)
        last_digit = str_sum_digit[-1]
        if str(last_digit) == str(last_tracking):
            check_digit = True
        else:
            check_digit = False
        return {'result':'OK','status_Code':200,'messageText':check_digit}
    except Exception as e:
        exc_type, exc_obj, exc_tb = sys.exc_info()
        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        print(exc_type, fname, exc_tb.tb_lineno)
        return {'result':'ER','status_Code':200,'messageText':str(e)}

def convert_hr_min_sec_v1(time):
    list_return = []
    day = time // (24 * 3600)
    time = time % (24 * 3600)
    hour = time // 3600
    time %= 3600
    minutes = time // 60
    time %= 60
    seconds = time
    list_return.append(day)
    list_return.append(hour)
    list_return.append(minutes)
    list_return.append(seconds)
    return list_return

def random_string_digit_generator():
    random_list = []
    for i in range(6):
        random_list.append(random.choice(string.ascii_uppercase))
    for i in range(3):
        random_list.append(random.choice(string.digits))
    return random_list

def random_digit_string_generator():
    random_list = []
    for i in range(6):
        random_list.append(random.choice(string.digits))
    for i in range(3):
        random_list.append(random.choice(string.ascii_uppercase))
    return random_list

def string_check(change_tracking_id,type_random):
    if type_random == 1:
        if '0' in change_tracking_id:
            change_tracking_id = get_random_string(9)
            return string_check(change_tracking_id,type_random)
        elif 'O' in change_tracking_id:
            change_tracking_id = get_random_string(9)
            return string_check(change_tracking_id,type_random)
        elif 'I' in change_tracking_id:
            change_tracking_id = get_random_string(9)
            return string_check(change_tracking_id,type_random)
        check___trackinglist = select().select_check_track(''.join(change_tracking_id))
        if check___trackinglist != 0:
            change_tracking_id = get_random_string(9)
            return string_check(change_tracking_id,type_random)
        else:
            return change_tracking_id
    elif type_random == 2:
        if '0' in change_tracking_id:
            change_tracking_id = random_string_digit_generator()
            return string_check(change_tracking_id,type_random)
        elif 'O' in change_tracking_id:
            change_tracking_id = random_string_digit_generator()
            return string_check(change_tracking_id,type_random)
        elif 'I' in change_tracking_id:
            change_tracking_id = random_string_digit_generator()
            return string_check(change_tracking_id,type_random)
        check___trackinglist = select().select_check_track(''.join(change_tracking_id))
        if check___trackinglist != 0:
            change_tracking_id = random_string_digit_generator()
            return string_check(change_tracking_id,type_random)
        else:
            return change_tracking_id
    elif type_random == 3:
        if '0' in change_tracking_id:
            change_tracking_id = random_digit_string_generator()
            return string_check(change_tracking_id,type_random)
        elif 'O' in change_tracking_id:
            change_tracking_id = random_digit_string_generator()
            return string_check(change_tracking_id,type_random)
        elif 'I' in change_tracking_id:
            change_tracking_id = random_digit_string_generator()
            return string_check(change_tracking_id,type_random)
        check___trackinglist = select().select_check_track(''.join(change_tracking_id))
        if check___trackinglist != 0:
            change_tracking_id = random_digit_string_generator()
            return string_check(change_tracking_id,type_random)
        else:
            return change_tracking_id

def id_generator(size=6, chars=string.ascii_uppercase + string.digits):
    return ''.join(random.choice(chars) for _ in range(size))

def check_insert_refCode(ref_code,sid):
        ref_code = 'REF-'+ ''.join(random_digit_generator())
        res_check = select().select_check_refCode(ref_code)
        if res_check == 0:
            res_insert_refCode = insert().insert_refCode(ref_code,sid)
            if res_insert_refCode['result'] == 'OK':
                return {'result':'OK','messageText':ref_code}
            else:
                return {'result':'ER','messageText':res_insert_refCode['messageText']}
        else:
            check_insert_refCode(ref_code,sid)

def check_insert_refCode_new_v(ref_code,sid,documentType):
        ref_code = documentType + '-R'+ ''.join(random_digit_generator())
        res_check = select().select_check_refCode(ref_code)
        if res_check == 0:
            res_insert_refCode = insert().insert_refCode(ref_code,sid)
            if res_insert_refCode['result'] == 'OK':
                return {'result':'OK','messageText':ref_code}
            else:
                return {'result':'ER','messageText':res_insert_refCode['messageText']}
        else:
            check_insert_refCode(ref_code,sid,documentType)

def convert_datetime_TH_2(timestamp_string):
    now1 = datetime.datetime.fromtimestamp(timestamp_string)
    month_name = 'x มกราคม กุมภาพันธ์ มีนาคม เมษายน พฤษภาคม มิถุนายน กรกฎาคม สิงหาคม กันยายน ตุลาคม พฤศจิกายน ธันวาคม'.split()[now1.month]
    thai_year = now1.year + 543
    time_str = now1.strftime('%H:%M:%S')
    return "%d %s %d"%(now1.day, month_name, thai_year) # 30 ตุลาคม 2560 20:45:30

def convert_datetime_TH_2_display_sendTime(timestamp_string):
    now1 = datetime.datetime.fromtimestamp(timestamp_string)
    month_name = 'x มกราคม กุมภาพันธ์ มีนาคม เมษายน พฤษภาคม มิถุนายน กรกฎาคม สิงหาคม กันยายน ตุลาคม พฤศจิกายน ธันวาคม'.split()[now1.month]
    thai_year = now1.year + 543
    time_str = now1.strftime('%H:%M:%S')
    return "%d %s %d %s"%(now1.day, month_name, thai_year,time_str) # 30 ตุลาคม 2560 20:45:30

def convert_datetime_TH_2_display(timestamp_string):
    now1 = datetime.datetime.fromtimestamp(timestamp_string)
    month_name = 'x ม.ค ก.พ มี.ค เม.ย พ.ค มิ.ย ก.ค ส.ค ก.ย ต.ค พ.ย ธ.ค'.split()[now1.month]
    thai_year = now1.year + 543
    time_str = now1.strftime('%H:%M:%S')
    return "%d %s"%(now1.day, month_name) # 30 ตุลาคม 2560 20:45:30

def find_startTime_endTime(start_time):
    list_start_end = []
    time_now = start_time
    time_now_1 = time_now.replace(hour=0, minute=0, second=0, microsecond=0)
    find_back_month = relativedelta(months = 1)
    back = start_time-find_back_month
    month = int(str(back).split('-')[1])
    year = int(str(back).split('-')[0])
    day_back = calendar.monthrange(year, month)[1]
    flashback = timedelta(days = day_back)
    start_time1 = time_now_1 - flashback
    end_time1 = (start_time - timedelta(days = 1)).replace(hour=23, minute=59, second=59, microsecond=00)
    list_start_end.append(start_time1)
    list_start_end.append(end_time1)
    return list_start_end

def find_startTime_endTime_day(start_time):
    list_start_end = []
    time_now = start_time
    time_now_1 = time_now.replace(hour=0, minute=0, second=0, microsecond=0)
    flashback = timedelta(days = 1)
    start_time1 = time_now_1 - flashback
    end_time1 = start_time1.replace(hour=23, minute=59, second=59, microsecond=00)
    list_start_end.append(start_time1)
    list_start_end.append(end_time1)
    return list_start_end

def find_startTime_endTime_week(start_time):
    list_start_end = []
    time_now = start_time
    time_now_1 = time_now.replace(hour=0, minute=0, second=0, microsecond=0)
    flashback = timedelta(days = 7)
    start_time1 = time_now_1 - flashback
    end_time1 = (time_now_1 - timedelta(days = 1)).replace(hour=23, minute=59, second=59, microsecond=00)
    list_start_end.append(start_time1)
    list_start_end.append(end_time1)
    return list_start_end

def find_startTime_endTime_hour(start_time):
    list_start_end = []
    time_now = start_time
    hour = int((str(time_now).split(' ')[1]).split(':')[0])
    flashback = timedelta(hours = 1)
    end_time1 = (time_now-flashback).replace(minute=59, second=59, microsecond=00)
    start_time1 =  (time_now-flashback)
    list_start_end.append(start_time1)
    list_start_end.append(end_time1)
    return list_start_end

def listUser(list_user_2):
    list_ = []
    email = str(list_user_2).split('(')[1]
    email_spl = str(email).split(')')[0]
    dict_email = {}
    dict_email = eval(str(email_spl))
    for x, y in dict_email.items():
        tmp = {}
        tmp['email'] = x
        tmp['count'] = y
        list_.append(tmp)
    return list_

def check_count_paper_start_end(query_count_all,list2,time_end,time_start):
    # เช็คเอกสารทั้งหมดตามเวลา
    list_json = []
    list_count_user = []
    tmp_json = {}
    tmp_json_1 = {}
    if len(query_count_all) == 0 :
        for x in range(1):
            count_all = 0
            count_active = 0
            count_reject = 0
            countStatus_Y = 0
            countStatus_N =0
            countStatus_R = 0
            countStatus_W = 0 
            countStatus_N = 0
            countStatus_None = 0
            list_user2 = []
            timestamp_end = int(datetime.datetime.timestamp(time_end))
            tmp_json['all_documents'] = count_all
            tmp_json['documents_active'] = count_active
            tmp_json['count_user'] = len(list_user2)
            tmp_json['documents_reject'] = count_reject
            tmp_json['doc_Y'] = countStatus_Y
            tmp_json['doc_W'] = countStatus_W
            tmp_json['doc_N'] = countStatus_N
            tmp_json['doc_R'] = countStatus_R
            tmp_json['doc_none'] = countStatus_None
            tmp_json['list_user'] = list_user2
            list_json.append(tmp_json)
            tmp_json = {}
        tmp_json_1['documents'] = list_json
    else:
        for x in range(1):
            count_all = 0
            count_active = 0
            count_reject = 0
            countStatus_Y = 0
            countStatus_N =0
            countStatus_R = 0
            countStatus_W = 0 
            countStatus_N = 0
            countStatus_None = 0
            list_user2 = []
            for y in range(len(list2)):
                timestamp_end = int(datetime.datetime.timestamp(time_end))
                timestamp_start = int(datetime.datetime.timestamp(time_start))
                user = list2[y]['sender_email']
                doc_status = list2[y]['document_status']
                list_user2.append(user)
                if doc_status != None:
                    if doc_status == 'Y':
                        countStatus_Y = countStatus_Y + 1
                    if doc_status == 'N':
                        countStatus_N = countStatus_N + 1 
                    if doc_status == 'W':
                        countStatus_W = countStatus_W + 1 
                    if doc_status == 'R':
                        countStatus_R = countStatus_R + 1 
                if doc_status == None:
                    countStatus_None = countStatus_None + 1
                if int(list2[y]['sendtime']) <= int(timestamp_end) and int(list2[y]['sendtime']) >= int(timestamp_start):
                    count_all = count_all + 1
                if int(list2[y]['sendtime']) <= int(timestamp_end) and int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['status'] == 'ACTIVE':
                    count_active = count_active + 1
                if int(list2[y]['sendtime']) <= int(timestamp_end) and int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['status'] == 'REJECT':
                    count_reject = count_reject + 1
            tmp_json['all_documents'] = count_all
            tmp_json['documents_active'] = count_active
            tmp_json['count_user'] = len(Counter(list_user2))
            tmp_json['documents_reject'] = count_reject
            tmp_json['doc_Y'] = countStatus_Y
            tmp_json['doc_W'] = countStatus_W
            tmp_json['doc_N'] = countStatus_N
            tmp_json['doc_R'] = countStatus_R
            tmp_json['doc_none'] = countStatus_None
            list_ = []
            list_ = listUser(Counter(list_user2))
            tmp_json['list_user'] = list_
            list_json.append(tmp_json)
            tmp_json = {}
        tmp_json_1['documents'] = list_json
    return tmp_json_1

def check_count_paper_end(query_count_all,list2,time_end):
    # เช็คเอกสารทั้งหมดตามเวลา
    list_json = []
    list_count_user = []
    tmp_json = {}
    tmp_json_1 = {}
    if len(query_count_all) == 0 :
            for x in range(1):
                count_all = 0
                count_active = 0
                count_reject = 0
                countStatus_Y = 0
                countStatus_N =0
                countStatus_R = 0
                countStatus_W = 0 
                countStatus_N = 0
                countStatus_None = 0
                list_user2 = []
                timestamp_end = int(datetime.datetime.timestamp(time_end))
                tmp_json['all_documents'] = count_all
                tmp_json['documents_active'] = count_active
                tmp_json['count_user'] = len(list_user2)
                tmp_json['documents_reject'] = count_reject
                tmp_json['list_user'] = list_user2
                tmp_json['doc_Y'] = countStatus_Y
                tmp_json['doc_W'] = countStatus_W
                tmp_json['doc_N'] = countStatus_N
                tmp_json['doc_R'] = countStatus_R
                tmp_json['doc_none'] = countStatus_None
                list_json.append(tmp_json)
                tmp_json = {}
            tmp_json_1['documents'] = list_json
    else:
        for x in range(1):
            count_all = 0
            count_active = 0
            count_reject = 0
            countStatus_Y = 0
            countStatus_N =0
            countStatus_R = 0
            countStatus_W = 0 
            countStatus_N = 0
            countStatus_None = 0
            list_user2 = []
            for y in range(len(list2)):
                timestamp_end = int(datetime.datetime.timestamp(time_end))
                user = list2[y]['sender_email']
                doc_status = list2[y]['document_status']
                list_user2.append(user)
                if doc_status != None:
                    if doc_status == 'Y':
                        countStatus_Y = countStatus_Y + 1
                    if doc_status == 'N':
                        countStatus_N = countStatus_N + 1 
                    if doc_status == 'W':
                        countStatus_W = countStatus_W + 1 
                    if doc_status == 'R':
                        countStatus_R = countStatus_R + 1 
                if doc_status == None:
                    countStatus_None = countStatus_None + 1
                if int(list2[y]['sendtime']) <= int(timestamp_end):
                    count_all = count_all + 1
                if int(list2[y]['sendtime']) <= int(timestamp_end) and list2[y]['status'] == 'ACTIVE':
                    count_active = count_active + 1
                if int(list2[y]['sendtime']) <= int(timestamp_end) and list2[y]['status'] == 'REJECT':
                    count_reject = count_reject + 1
            tmp_json['all_documents'] = count_all
            tmp_json['documents_active'] = count_active
            tmp_json['count_user'] = len(Counter(list_user2))
            tmp_json['doc_Y'] = countStatus_Y
            tmp_json['doc_W'] = countStatus_W
            tmp_json['doc_N'] = countStatus_N
            tmp_json['doc_R'] = countStatus_R
            tmp_json['doc_none'] = countStatus_None
            list_ = []
            list_ = listUser(Counter(list_user2))
            tmp_json['list_user'] = list_
            tmp_json['documents_reject'] = count_reject
            list_json.append(tmp_json)
            tmp_json = {}
        tmp_json_1['documents'] = list_json
    return tmp_json_1

def check_count_paper_start(query_count_all,list2,time_start):
    list_json = []
    list_count_user = []
    tmp_json = {}
    count_paper_all = 0
    count_paper_active = 0
    count_paper_reject = 0
    tmp_json_1 = {}
    if len(query_count_all) == 0 :
        for x in range(1):
            count_all = 0
            count_active = 0
            count_reject = 0
            countStatus_Y = 0
            countStatus_N =0
            countStatus_R = 0
            countStatus_W = 0 
            countStatus_N = 0
            countStatus_None = 0
            list_user2 = []
            timestamp_start = int(datetime.datetime.timestamp(time_start))
            tmp_json['all_documents'] = count_all
            tmp_json['documents_active'] = count_active
            tmp_json['count_user'] = len(list_user2)
            tmp_json['documents_reject'] = count_reject
            tmp_json['list_user'] = list_user2
            tmp_json['doc_Y'] = countStatus_Y
            tmp_json['doc_W'] = countStatus_W
            tmp_json['doc_N'] = countStatus_N
            tmp_json['doc_R'] = countStatus_R
            tmp_json['doc_none'] = countStatus_None
            list_json.append(tmp_json)
            tmp_json = {}
        tmp_json_1['documents'] = list_json
    else:
        for x in range(1):
            count_all = 0
            count_active = 0
            count_reject = 0
            countStatus_Y = 0
            countStatus_N =0
            countStatus_R = 0
            countStatus_W = 0 
            countStatus_N = 0
            countStatus_None = 0
            list_user2 = []
            for y in range(len(list2)):
                timestamp_start = int(datetime.datetime.timestamp(time_start))
                user = list2[y]['sender_email']
                doc_status = list2[y]['document_status']
                list_user2.append(user)
                if doc_status != None:
                    if doc_status == 'Y':
                        countStatus_Y = countStatus_Y + 1
                    if doc_status == 'N':
                        countStatus_N = countStatus_N + 1 
                    if doc_status == 'W':
                        countStatus_W = countStatus_W + 1 
                    if doc_status == 'R':
                        countStatus_R = countStatus_R + 1 
                if doc_status == None:
                    countStatus_None = countStatus_None + 1
                if int(list2[y]['sendtime']) >= int(timestamp_start):
                    count_all = count_all + 1
                if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['status'] == 'ACTIVE':
                    count_active = count_active + 1
                if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['status'] == 'REJECT':
                    count_reject = count_reject + 1
            tmp_json['all_documents'] = count_all
            tmp_json['documents_active'] = count_active
            tmp_json['count_user'] = len(Counter(list_user2))
            tmp_json['doc_Y'] = countStatus_Y
            tmp_json['doc_W'] = countStatus_W
            tmp_json['doc_N'] = countStatus_N
            tmp_json['doc_R'] = countStatus_R
            tmp_json['doc_none'] = countStatus_None
            list_ = []
            list_ = listUser(Counter(list_user2))
            tmp_json['list_user'] = list_
            tmp_json['documents_reject'] = count_reject
            list_json.append(tmp_json)
            tmp_json = {}
        tmp_json_1['documents'] = list_json
    return tmp_json_1

def check_count_paper_all(query_count_all,list2):
    list_json = []
    list_count_user = []
    tmp_json = {}
    count_paper_all = 0
    count_paper_active = 0
    count_paper_reject = 0
    tmp_json_1 = {}
    if len(query_count_all) == 0 :
        for x in range(1):
            count_all = 0
            count_active = 0
            count_reject = 0
            countStatus_Y = 0
            countStatus_N =0
            countStatus_R = 0
            countStatus_W = 0 
            countStatus_N = 0
            countStatus_None = 0
            list_user2 = []
            tmp_json['all_documents'] = count_all
            tmp_json['documents_active'] = count_active
            tmp_json['count_user'] = len(list_user2)
            tmp_json['documents_reject'] = count_reject
            tmp_json['list_user'] = list_user2
            tmp_json['doc_Y'] = countStatus_Y
            tmp_json['doc_W'] = countStatus_W
            tmp_json['doc_N'] = countStatus_N
            tmp_json['doc_R'] = countStatus_R
            tmp_json['doc_none'] = countStatus_None
            list_json.append(tmp_json)
            tmp_json = {}
        tmp_json_1['documents'] = list_json
    else:
        for x in range(1):
            count_all = 0
            count_active = 0
            count_reject = 0
            countStatus_Y = 0
            countStatus_N =0
            countStatus_R = 0
            countStatus_W = 0 
            countStatus_N = 0
            countStatus_None = 0
            list_user2 = []
            for y in range(len(list2)):
                user = list2[y]['sender_email']
                doc_status = list2[y]['document_status']
                count_all = count_all + 1
                list_user2.append(user)
                if doc_status != None:
                    if doc_status == 'Y':
                        countStatus_Y = countStatus_Y + 1
                    if doc_status == 'N':
                        countStatus_N = countStatus_N + 1 
                    if doc_status == 'W':
                        countStatus_W = countStatus_W + 1 
                    if doc_status == 'R':
                        countStatus_R = countStatus_R + 1 
                if doc_status == None:
                    countStatus_None = countStatus_None + 1
                if list2[y]['status'] == 'ACTIVE':
                    count_active = count_active + 1
                if list2[y]['status'] == 'REJECT':
                    count_reject = count_reject + 1
            tmp_json['all_documents'] = count_all
            tmp_json['documents_active'] = count_active
            tmp_json['count_user'] = len(Counter(list_user2))
            tmp_json['doc_Y'] = countStatus_Y
            tmp_json['doc_W'] = countStatus_W
            tmp_json['doc_N'] = countStatus_N
            tmp_json['doc_R'] = countStatus_R
            tmp_json['doc_none'] = countStatus_None
            list_ = []
            list_ = listUser(Counter(list_user2))
            tmp_json['list_user'] = list_
            tmp_json['documents_reject'] = count_reject
            list_json.append(tmp_json)
            tmp_json = {}
        tmp_json_1['documents'] = list_json
    return tmp_json_1

def generateList(query_count_all):
    list2 = []
    for x in range(len(query_count_all)):
        tmp_json = {
            'sender_email': query_count_all[x].sender_email,
            'sender_name': query_count_all[x].sender_email,
            'sendtime':int(datetime.datetime.timestamp(query_count_all[x].send_time)),
            'biz_info':query_count_all[x].biz_info,
            'documentType':query_count_all[x].documentType,
            'status':query_count_all[x].status,
            'document_status': query_count_all[x].document_status
        }
        list2.append(tmp_json)
        tmp_json = {}
    return list2

def size(b64string):
    return (len(b64string) * 3) / 4 - b64string.count('=', -2)

def func_list_recp(list_r):
    list_ = []
    dict_recp = {}
    dict_recp = (Counter(list_r))
    for x, y in dict_recp.items():
        tmp = {}
        tmp['email'] = x
        tmp['count'] = y
        list_.append(tmp)
    return list_

def generateList_count_byEmail(query_count_all):
    list2 = []
    for x in range(len(query_count_all)):
        tmp_json = {
            'sender_email': query_count_all[x].sender_email,
            'sendtime':int(datetime.datetime.timestamp(query_count_all[x].send_time)),
            'status':query_count_all[x].status,
            'document_status': query_count_all[x].document_status,
            'recipient_email': query_count_all[x].recipient_email
        }
        list2.append(tmp_json)
        tmp_json = {}
    return list2

def update_json_send(data_json):
    try:
        jsonData_eval = eval(data_json)
        tmp_jsonData_eval = []
        arr_step_info = []
        result_list_sum = []
        if 'step_num' in jsonData_eval:
            tmp_jsonData_eval.append(jsonData_eval)
            jsonData_eval = tmp_jsonData_eval
        if 'step_num' in jsonData_eval:
            print('if')
            step_status = ''
            step_before = ''
            res_status_file = 'Y'
            arr_step_totle = []
            json_data_info = jsonData_eval
            step_infomation = jsonData_eval
            tmp_list_email = []
            tmp_email_status = []
            tmp_status_sum = []
            email_step_sum = []
            tmp_list_status_document = []
            step_num = json_data_info['step_num']
            for i in range(len(step_infomation)):
                list_check_step = []
                json_step_info_2 = {}
                step_list_data = []
                step_status = []
                step_email = []
                # step_num = step_infomation[i]['step_num']
                json_step_info_2['step_status'] = ''
                tmp_step_detail = step_infomation['step_detail']
                for u in range(len(tmp_step_detail)):
                    tmp_arr_step_detail = tmp_step_detail[u]
                    tmp_status = tmp_arr_step_detail['activity_status']
                    tmp_code = tmp_arr_step_detail['activity_code']
                    tmp_email = str(tmp_arr_step_detail['one_email']).replace(' ','').lower()
                    for s in range(len(tmp_code)):
                        if tmp_code[s] == 'A04':
                            step_status.append(tmp_status[s])
                            step_email.append(tmp_email)
                email_step_sum.append(step_email)
                if 'Reject' in step_status:
                    tmp_status_sum.append('Reject')
                elif 'Approve' in step_status:
                    tmp_status_sum.append('Complete')
                elif 'Complete' in step_status:
                    tmp_status_sum.append('Complete')
                elif 'Incomplete' in step_status:
                    tmp_status_sum.append('Incomplete')
                elif 'Pending' in step_status:
                    tmp_status_sum.append('Incomplete')
                else:
                    tmp_status_sum.append('Complete')

            if 'step_detail' in json_data_info:
                for s in range(len(json_data_info['step_detail'])):
                    tmp_json_step = {}
                    tmp_step_detail = json_data_info['step_detail']
                    tmp_arr_step_detail_2 = tmp_step_detail[s]
                    oneMail = str(json_data_info['step_detail'][s]['one_email']).replace(' ','').lower()
                    tmp_step_del_1 = int(step_num) - 1
                    step_num_int2 = int(step_num)
                    tmp_list_email.append(oneMail)
                    tmp_activity_code = tmp_arr_step_detail_2['activity_code']
                    tmp_activity_status = tmp_arr_step_detail_2['activity_status']
                    for hh in range(len(tmp_activity_code)):
                        if tmp_activity_code[hh] == 'A03':
                            tmp_get_status = tmp_activity_status[hh]
                            if tmp_get_status == 'Reject':
                                str_status_email = 'R'
                            elif tmp_get_status == 'Incomplete' or tmp_get_status == 'Pending':
                                str_status_email = 'N'
                            elif tmp_get_status == 'Complete' or tmp_get_status == 'Approve':
                                str_status_email = 'Y'
                            tmp_email_status.append(str_status_email)
                    tmp_json_step['email'] = tmp_list_email
                    tmp_json_step['step_num'] = step_num
                    step_status_code = 'Y'
                    if tmp_status_sum[tmp_step_del_1] == 'Reject':
                        step_status_code = 'R'
                    elif tmp_status_sum[tmp_step_del_1] == 'Incomplete':
                        step_status_code = 'N'
                    elif tmp_status_sum[tmp_step_del_1] == 'Complete':
                        step_status_code = 'Y'
                    if step_num == '1' and step_status_code == 'N':
                        step_status_code = 'W'
                    
                    if step_status_code == 'W':
                        step_now = int(step_num)
                    tmp_json_step['step_status_code'] = step_status_code
                    tmp_json_step['status'] = tmp_email_status
                    tmp_json_step['step_status'] = tmp_status_sum[tmp_step_del_1]
                tmp_list_status_document.append(step_status_code)
                result_list_sum.append(tmp_json_step)
                if 'R' in tmp_list_status_document:
                    status_document = 'R'
                elif 'N' in tmp_list_status_document:
                    status_document = 'N'
                elif 'Y' in tmp_list_status_document:
                    status_document = 'Y'
                else:
                    status_document = 'N'
                result_to_user = {
                    'data_document':result_list_sum,
                    'status_document':status_document,
                    'max_step':1,
                    'step_now':step_now
                } 
                return {'result':'OK','messageText':result_to_user}
        else:
            step_now = 0
            step_status = ''
            res_status_file = 'Y'
            step_before = ''
            step_list_before = []
            step_list_ = []
            step_list_next = []
            arr_step_totle = []
            step_me = ''
            step_sum_status = []
            sum_status_step_list = []
            list_check_step = []
            step_list_data = []
            max_step = (len(jsonData_eval))
            step_infomation = jsonData_eval
            sum_status_step = []
            tmp_status_sum = []
            arr_email_list = []
            email_step_sum = []
            tmp_list_status_document = []
            status_document = ''
            result_to_user = []
            for i in range(len(step_infomation)):
                list_check_step = []
                json_step_info_2 = {}
                step_list_data = []
                step_status = []
                step_email = []
                step_ = step_infomation[i]
                step_num = step_infomation[i]['step_num']
                json_step_info_2['step_status'] = ''
                tmp_step_detail = step_['step_detail']
                for u in range(len(tmp_step_detail)):
                    tmp_arr_step_detail = tmp_step_detail[u]
                    tmp_status = tmp_arr_step_detail['activity_status']
                    tmp_code = tmp_arr_step_detail['activity_code']
                    tmp_email = str(tmp_arr_step_detail['one_email']).replace(' ','').lower()
                    for s in range(len(tmp_code)):
                        if tmp_code[s] == 'A03':
                            step_status.append(tmp_status[s])
                            step_email.append(tmp_email)
                email_step_sum.append(step_email)
                if 'Reject' in step_status:
                    tmp_status_sum.append('Reject')
                elif 'Approve' in step_status:
                    tmp_status_sum.append('Complete')
                elif 'Complete' in step_status:
                    tmp_status_sum.append('Complete')
                elif 'Incomplete' in step_status:
                    tmp_status_sum.append('Incomplete')
                elif 'Pending' in step_status:
                    tmp_status_sum.append('Incomplete')
                else:
                    tmp_status_sum.append('Complete')
            print(tmp_status_sum)
            for zzi in range(len(step_infomation)):
                tmp_list_step = []
                tmp_json_step = {}
                tmp_list_email = []
                tmp_email_status = []
                list_check_step = []
                json_step_info_2 = {}
                step_list_data = []
                step_status = []
                str_status_email = ''
                step_ = step_infomation[zzi]
                step_num = step_infomation[zzi]['step_num']
                index_step_num = zzi
                json_step_info_2['step_status'] = ''
                tmp_step_detail = step_['step_detail']
                for zi in range(len(tmp_step_detail)):
                    tmp_arr_step_detail_2 = tmp_step_detail[zi]
                    oneMail = str(tmp_arr_step_detail_2['one_email']).replace(' ','').lower()
                    tmp_step_del_1 = int(step_num) - 1
                    step_num_int2 = int(step_num)
                    tmp_list_email.append(oneMail)
                    tmp_activity_code = tmp_arr_step_detail_2['activity_code']
                    tmp_activity_status = tmp_arr_step_detail_2['activity_status']
                    for hh in range(len(tmp_activity_code)):
                        if tmp_activity_code[hh] == 'A04':
                            tmp_get_status = tmp_activity_status[hh]
                            if tmp_get_status == 'Reject':
                                str_status_email = 'R'
                            elif tmp_get_status == 'Incomplete' or tmp_get_status == 'Pending':
                                str_status_email = 'N'
                            elif tmp_get_status == 'Complete' or tmp_get_status == 'Approve':
                                str_status_email = 'Y'
                            tmp_email_status.append(str_status_email)
                    tmp_json_step['email'] = tmp_list_email
                    tmp_json_step['step_num'] = step_num
                    step_status_code = 'Y'
                    # print(tmp_status_sum)
                    if tmp_status_sum[tmp_step_del_1] == 'Reject':
                        step_status_code = 'R'
                    elif tmp_status_sum[tmp_step_del_1] == 'Incomplete':
                        step_status_code = 'N'
                    elif tmp_status_sum[tmp_step_del_1] == 'Complete':
                        step_status_code = 'Y'
                    # if step_num == '1' and step_status_code == 'N':
                    #     step_status_code = 'W'
                    tmp_json_step['step_status_code'] = step_status_code
                    tmp_json_step['step_status'] = tmp_status_sum[tmp_step_del_1]
                    tmp_json_step['status'] = tmp_email_status
                    
                tmp_list_status_document.append(step_status_code)
                result_list_sum.append(tmp_json_step)
            
            if 'R' in tmp_list_status_document:
                status_document = 'R'
                step_now = max_step
            elif 'N' in tmp_list_status_document:
                status_document = 'N'
            elif 'Y' in tmp_list_status_document:
                status_document = 'Y'
                step_now = max_step
            else:
                status_document = 'Y'
            if status_document == 'N':
                for uu in range(len(result_list_sum)):
                    tmp_step_num = result_list_sum[uu]['step_num']
                    tmp_email = result_list_sum[uu]['email']
                    tmp_step_status_code = result_list_sum[uu]['step_status_code']
                    tmp_index_step_next = int(tmp_step_num)
                    # step_now = int(tmp_step_num)
                    if tmp_step_status_code == 'Y':   
                        temp_detail = result_list_sum   
                        temp_detail[uu]['step_status_code'] = 'N'                                 
                        if temp_detail[tmp_index_step_next]['step_status_code'] != 'Y':
                            if temp_detail[tmp_index_step_next]['step_status_code'] == 'N':
                                temp_detail[tmp_index_step_next]['step_status_code'] = 'W'
                            for z in range(tmp_index_step_next,len(temp_detail),1):
                                tmp_step_num = temp_detail[z]['step_num']
                                tmp_email = temp_detail[z]['email']
                                tmp_step_status_code = temp_detail[z]['step_status_code']
                                if tmp_step_status_code == 'N':
                                    temp_detail[z]['step_status_code'] = 'Z'
                    if tmp_step_num == '1' and tmp_step_status_code == 'N':
                        step_now = int(tmp_step_num)
                        result_list_sum[uu]['step_status_code'] = 'W'
                        for z in range(tmp_index_step_next,len(result_list_sum),1):
                            if tmp_step_status_code == 'N':
                                result_list_sum[z]['step_status_code'] = 'Z'
                    if tmp_step_status_code == 'W':
                        step_now = int(tmp_step_num)
                                # else:
                                #     step_now = int(tmp_step_num)
                                        
                                            # print(temp_detail[z])
                            # print(temp_detail)
                            # print(result_list_sum)
            result_to_user = {
                'data_document':result_list_sum,
                'status_document':status_document,
                'max_step':max_step,
                'step_now':step_now
            }
        return {'result':'OK','messageText':result_to_user}
    except Exception as e:
        exc_type, exc_obj, exc_tb = sys.exc_info()
        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        print(exc_type, fname, exc_tb.tb_lineno)
        return {'result':'ER','messageText':'not found data' + str(e)}

class select:
    def count_search_admin_document_v2(self,date_start,date_end,document_id,sender_email,recipient_email,tax_id,documentType,text):
        tmp_list_result = []
        tmp_list_result2 = []
        self.date_start = date_start
        self.date_end = date_end
        self.document_id = document_id
        self.sender_email = sender_email
        self.recipient_email = recipient_email
        self.tax_id = tax_id
        self.documentType = documentType
        self.text = text
        tmp_list_sid_code = []
        count_document = 0
        count_rowDocument = 0
        count_rowDocument_StatusActive = 0
        count_rowDocument_StatusReject = 0
        count_rowDocument_StatusCancel = 0
        statusFile_count_approve = 0
        statusFile_count_pendding = 0
        statusFile_count_reject = 0
        statusFile_count_wait = 0
        step_time = []

        step_time_total = []
        t1 = None
        t2 = None

        sum_Document = 0
        Complete_Approve = 0
        Incomplete_Pendding = 0
        Reject = 0
        Wait = 0

        query_document_tmp = None
        query_document_tmp2 = None

        query_document_tmp_Active = 0
        query_document_tmp_Reject = 0
        query_document_tmp_count = 0

        try:
            # query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').count()
            # query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').count()
           
            
            if self.tax_id == 'citizen' :
                if self.tax_id != '' and self.text != '' and self.document_id == '' and self.sender_email == '' and self.recipient_email == '' and self.documentType == '':
                    query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.options_page.contains(self.text)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                    print('citizen tax_id,text')
                elif self.date_start != '' and self.date_end != '' : # date_start ไม่ว่าง , date_end ไม่ว่าง
                    if self.document_id =='':
                        if self.sender_email != '' and self.tax_id != '' and self.recipient_email != '' and self.documentType != '': # ใส่ทั้งหมด
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                            # query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()

                            query_document_tmp2 = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).count()
                            eval_biz_info = eval(query_document_tmp2[0].biz_info)
                            # print ('eval_biz_info: ',eval_biz_info['id_card_num'])
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                            print('all put')

                        elif self.sender_email != '': # ใส่ sender_email

                            if self.sender_email != '' and self.tax_id != '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).count()
                                # query_document_tmp2 = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()
                                # eval_biz_info = eval(query_document_tmp2[0].biz_info)
                                # query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType.contains(self.documentType)).filter(eval_biz_info['id_card_num'] == self.tax_id).limit(limit_ch).all()

                                print('non recipient')

                            elif self.tax_id == '' and self.recipient_email != '' and self.documentType != '': # ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).count()
                                print('non tax')

                            elif self.documentType == '' and self.recipient_email != '' and self.tax_id != '': # ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                print('non documentType')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).count()
                                print('only sender , documentType')

                            elif self.documentType == '' and self.recipient_email == '' and self.tax_id != '': # ไม่ใส่ recipient_email // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                print('only sender , tax_id')

                            elif self.tax_id == '' and self.documentType == '' and self.recipient_email == '': # ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).count()
                                print('only sender , recipient_email')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType == '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).count()
                                print('only sender')

                        elif self.recipient_email != '': # ใส่ recipient_email

                            if self.tax_id != '' and self.sender_email == '' and self.documentType == '': # ไม่ใส่ sender_email // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                print('non sender_email ,documentType')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType != '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                print('only recipient , documentType')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType == '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                print('only recipient')

                        elif self.tax_id == '' and self.recipient_email == '' and self.sender_email == '' and self.documentType != '': # ใส่ documentType
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.documentType.contains(self.documentType)).count()
                            print('only documenType')

                        elif self.tax_id != '' and self.recipient_email == ''and self.sender_email == ''and self.documentType == '': # ใส่ tax_id
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                            print('tax_id')

                        elif self.tax_id != '' and self.recipient_email == ''and self.sender_email == ''and self.documentType != '': # ใส่ tax_id,documentType
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).count()
                            print('tax_id , documenType')

                        elif self.sender_email == '' and self.tax_id == '' and self.recipient_email == ''and self.documentType == '': #ไม่ใส่อะไรเลย
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).count()
                            print('non put')

                    elif self.document_id != '':# กรอกช่อง id
                        date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                        date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                        co_str = len(self.document_id)
                        # print (co_str)
                        if co_str > 13 : # ใส่ doc_id
                            # print ('doc_id')
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.doc_id.contains(self.document_id)).all()
                        elif co_str <= 13 : # ใส่ tracking_id
                            # print ('tracking_id')
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.tracking_id.contains(self.document_id)).all()
                        print ('have id')
                elif self.date_start != '' and self.date_end == '' : # date_start ไม่ว่าง , date_end ว่าง
                    if self.document_id =='':
                        if self.sender_email != '' and self.tax_id != '' and self.recipient_email != ''and self.documentType != '': # ใส่ทั้งหมด
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).count()
                            print('all put2')

                        elif self.sender_email != '': # ใส่ sender_email

                            if self.tax_id != '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).count()
                                print('non recipient2')

                            elif self.tax_id == '' and self.recipient_email != '' and self.documentType != '': # ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).count()
                                print('non tax2')

                            elif self.documentType == '' and self.recipient_email != '' and self.tax_id != '': # ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                print('non documentType2')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).count()
                                print('only sender , documentType2')

                            elif self.documentType == '' and self.recipient_email == '' and self.tax_id != '': # ไม่ใส่ recipient_email // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                print('only sender , tax_id 2')

                            elif self.tax_id == '' and self.documentType == '' and self.recipient_email != '': # ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).count()
                                print('only sender , recipient_email2')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType == '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).count()
                                print('only sender2')

                        elif self.recipient_email != '': # ใส่ recipient_email

                            if self.tax_id != '' and self.sender_email == '' and self.documentType == '': # ไม่ใส่ sender_email // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                print('non sender_email2')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType != '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                print('only recipient , documentType2')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType == '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                print('only recipient2')

                        elif self.tax_id == '' and self.recipient_email == ''and self.sender_email == ''and self.documentType != '': # ใส่ documentType
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.documentType.contains(self.documentType)).count()
                            print('only documenType2')

                        elif self.tax_id != '' and self.recipient_email == '' and self.sender_email == '' and self.documentType == '': # ใส่ tax_id
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                            print('tax_id2')

                        elif self.tax_id != '' and self.recipient_email == ''and self.sender_email == ''and self.documentType != '': # ใส่ tax_id,documentType
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).count()
                            print('tax_id , documenType2')

                        elif self.sender_email == '' and self.tax_id == '' and self.recipient_email == '': #ไม่ใส่อะไรเลย
                            date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time>=date_start_tmp).filter(view_document.send_time<=date_end_tmp).count()
                            print('non put2')

                    elif self.document_id != '':# กรอกช่อง id
                        date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                        co_str = len(self.document_id)
                        # print (co_str)
                        if co_str > 13 : # ใส่ doc_id
                            # print ('doc_id')
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time>=date_start_tmp).filter(view_document.doc_id.contains(self.document_id)).count()
                        elif co_str <= 13 : # ใส่ tracking_id
                            # print ('tracking_id')
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time>=date_start_tmp).filter(view_document.tracking_id.contains(self.document_id)).count()
                        print ('have id2')
                elif self.date_start == '' and self.date_end != '' : # date_start ว่าง , date_end ไม่ว่าง
                    query_document_tmp = []
                elif self.date_start == '' and self.date_end == '' : # date_start ว่าง , date_end ว่าง
                    if self.document_id != '':   # กรอกช่อง id
                        co_str = len(self.document_id)
                        # print (co_str)
                        if co_str > 13 :
                            # print ('doc_id')
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.doc_id.contains(self.document_id)).count()
                        elif co_str <= 13 :
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.tracking_id.contains(self.document_id)).count()
                        print ('have id4')

                    if self.document_id =='': # ไม่กรอก id
                        if self.sender_email != '' and self.tax_id != '' and self.recipient_email != '' and self.documentType != '' : # ใส่ทั้งหมด

                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).count()
                            print('all put4')

                        elif self.sender_email != '': # ใส่ sender_email

                            if self.tax_id != '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).count()
                                print('non recipient4')

                            elif self.tax_id == '' and self.recipient_email != '' and self.documentType != '': # ไม่ใส่ tax_id
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).count()
                                print('non tax4')

                            elif self.documentType == '' and self.recipient_email != '' and self.tax_id != '': # ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                print('non documentType2')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).count()
                                print('only sender4')

                            elif self.documentType == '' and self.recipient_email == '' and self.tax_id != '': # ไม่ใส่ recipient_email // ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                print('only sender , tax_id 3')

                            elif self.tax_id == '' and self.documentType == '' and self.recipient_email != '': # ไม่ใส่ tax_id // ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).count()
                                print('only sender , recipient_email 3')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType == '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id // ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).count()
                                print('only sender4')

                        elif self.recipient_email != '': # ใส่ recipient_email
                            if self.tax_id != '' and self.sender_email == '' and self.documentType == '': # ไม่ใส่ sender_email // ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                print('non sender_email 4')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType != '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                print('only recipient , documentType4')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType == '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id // ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.recipient_email.contains(self.recipient_email)).count()
                                print('only recipient4')

                        elif self.tax_id == '' and self.recipient_email == ''and self.sender_email == ''and self.documentType != '': # ใส่ documentType

                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.documentType.contains(self.documentType)).count()
                            print('only documenType4')

                        elif self.tax_id != '' and self.recipient_email == ''and self.sender_email == ''and self.documentType == '': # ใส่ tax_id
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                            print('tax_id4')

                        elif self.tax_id != '' and self.recipient_email == '' and self.sender_email == ''and self.documentType != '': # ใส่ tax_id,documentType

                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).count()
                            print('tax_id , documenType 4')


                        elif self.sender_email == '' and self.tax_id == '' and self.recipient_email == ''and self.documentType == '':#ไม่ใส่อะไรเลย
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).count()
                            print ('No anything')
                
            else :
                print ('ELSEEEEEE')
                if self.tax_id != '' and self.text != '' and self.document_id == '' and self.sender_email == '' and self.recipient_email == '' and self.documentType == '':
                    print('else tax_id,text')
                    query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.options_page.contains(self.text)).count()
                elif self.date_start != '' and self.date_end != '' : # date_start ไม่ว่าง , date_end ไม่ว่าง
                    if self.document_id =='':
                        if self.sender_email != '' and self.tax_id != '' and self.recipient_email != '' and self.documentType != '': # ใส่ทั้งหมด
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                            # query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()

                            query_document_tmp2 = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).count()
                            eval_biz_info = eval(query_document_tmp2[0].biz_info)
                            # print ('eval_biz_info: ',eval_biz_info['id_card_num'])
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(eval_biz_info['id_card_num'] == self.tax_id).filter(view_document.options_page.contains(self.documentType)).count()
                            print('all put')

                        elif self.sender_email != '': # ใส่ sender_email

                            if self.sender_email != '' and self.tax_id != '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).count()
                                # query_document_tmp2 = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()
                                # eval_biz_info = eval(query_document_tmp2[0].biz_info)
                                # query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType.contains(self.documentType)).filter(eval_biz_info['id_card_num'] == self.tax_id).limit(limit_ch).all()

                                print('non recipient')

                            elif self.tax_id == '' and self.recipient_email != '' and self.documentType != '': # ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).count()
                                print('non tax')

                            elif self.documentType == '' and self.recipient_email != '' and self.tax_id != '': # ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                print('non documentType')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).count()
                                print('only sender , documentType')

                            elif self.documentType == '' and self.recipient_email == '' and self.tax_id != '': # ไม่ใส่ recipient_email // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                print('only sender , tax_id')

                            elif self.tax_id == '' and self.documentType == '' and self.recipient_email == '': # ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).count()
                                print('only sender , recipient_email')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType == '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).count()
                                print('only sender')

                        elif self.recipient_email != '': # ใส่ recipient_email

                            if self.tax_id != '' and self.sender_email == '' and self.documentType == '': # ไม่ใส่ sender_email // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                print('non sender_email ,documentType')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType != '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                print('only recipient , documentType')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType == '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                print('only recipient')

                        elif self.tax_id == '' and self.recipient_email == '' and self.sender_email == '' and self.documentType != '': # ใส่ documentType
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.documentType.contains(self.documentType)).count()
                            print('only documenType')

                        elif self.tax_id != '' and self.recipient_email == ''and self.sender_email == ''and self.documentType == '': # ใส่ tax_id
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.biz_info.contains(self.tax_id)).count()
                            print('tax_id')

                        elif self.tax_id != '' and self.recipient_email == ''and self.sender_email == ''and self.documentType != '': # ใส่ tax_id,documentType
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).count()
                            print('tax_id , documenType')

                        elif self.sender_email == '' and self.tax_id == '' and self.recipient_email == ''and self.documentType == '': #ไม่ใส่อะไรเลย
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).count()
                            print('non put')

                    elif self.document_id != '':# กรอกช่อง id
                        date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                        date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                        co_str = len(self.document_id)
                        # print (co_str)
                        if co_str > 13 : # ใส่ doc_id
                            # print ('doc_id')
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.doc_id.contains(self.document_id)).all()
                        elif co_str <= 13 : # ใส่ tracking_id
                            # print ('tracking_id')
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.tracking_id.contains(self.document_id)).all()
                        print ('have id')
                elif self.date_start != '' and self.date_end == '' : # date_start ไม่ว่าง , date_end ว่าง
                    if self.document_id =='':
                        if self.sender_email != '' and self.tax_id != '' and self.recipient_email != ''and self.documentType != '': # ใส่ทั้งหมด
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).count()
                            print('all put2')

                        elif self.sender_email != '': # ใส่ sender_email

                            if self.tax_id != '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).count()
                                print('non recipient2')

                            elif self.tax_id == '' and self.recipient_email != '' and self.documentType != '': # ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).count()
                                print('non tax2')

                            elif self.documentType == '' and self.recipient_email != '' and self.tax_id != '': # ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                print('non documentType2')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).count()
                                print('only sender , documentType2')

                            elif self.documentType == '' and self.recipient_email == '' and self.tax_id != '': # ไม่ใส่ recipient_email // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                print('only sender , tax_id 2')

                            elif self.tax_id == '' and self.documentType == '' and self.recipient_email != '': # ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).count()
                                print('only sender , recipient_email2')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType == '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).count()
                                print('only sender2')
                        elif self.recipient_email != '': # ใส่ recipient_email

                            if self.tax_id != '' and self.sender_email == '' and self.documentType == '': # ไม่ใส่ sender_email // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                print('non sender_email2')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType != '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                print('only recipient , documentType2')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType == '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                print('only recipient2')

                        elif self.tax_id == '' and self.recipient_email == ''and self.sender_email == ''and self.documentType != '': # ใส่ documentType
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.documentType.contains(self.documentType)).count()
                            print('only documenType2')

                        elif self.tax_id != '' and self.recipient_email == '' and self.sender_email == '' and self.documentType == '': # ใส่ tax_id
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.biz_info.contains(self.tax_id)).count()
                            print('tax_id2')

                        elif self.tax_id != '' and self.recipient_email == ''and self.sender_email == ''and self.documentType != '': # ใส่ tax_id,documentType
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).count()
                            print('tax_id , documenType2')

                        elif self.sender_email == '' and self.tax_id == '' and self.recipient_email == '': #ไม่ใส่อะไรเลย
                            date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time>=date_start_tmp).filter(view_document.send_time<=date_end_tmp).count()
                            print('non put2')

                    elif self.document_id != '':# กรอกช่อง id
                        date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                        co_str = len(self.document_id)
                        # print (co_str)
                        if co_str > 13 : # ใส่ doc_id
                            # print ('doc_id')
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time>=date_start_tmp).filter(view_document.doc_id.contains(self.document_id)).all()
                        elif co_str <= 13 : # ใส่ tracking_id
                            # print ('tracking_id')
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time>=date_start_tmp).filter(view_document.tracking_id.contains(self.document_id)).all()
                        print ('have id2')
                elif self.date_start == '' and self.date_end != '' : # date_start ว่าง , date_end ไม่ว่าง
                    query_document_tmp = []
                elif self.date_start == '' and self.date_end == '' : # date_start ว่าง , date_end ว่าง
                    if self.document_id != '':   # กรอกช่อง id
                        co_str = len(self.document_id)
                        # print (co_str)
                        if co_str > 13 :
                            # print ('doc_id')
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.doc_id.contains(self.document_id)).count()
                        elif co_str <= 13 :
                            # print ('tracking_id')
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.tracking_id.contains(self.document_id)).count()
                        print ('have id4')

                    if self.document_id =='': # ไม่กรอก id
                        if self.sender_email != '' and self.tax_id != '' and self.recipient_email != '' and self.documentType != '' : # ใส่ทั้งหมด

                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).count()
                            print('all put4')

                        elif self.sender_email != '': # ใส่ sender_email

                            if self.tax_id != '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).count()
                                print('non recipient4')

                            elif self.tax_id == '' and self.recipient_email != '' and self.documentType != '': # ไม่ใส่ tax_id
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).count()
                                print('non tax4')

                            elif self.documentType == '' and self.recipient_email != '' and self.tax_id != '': # ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                print('non documentType2')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).count()
                                print('only sender4')

                            elif self.documentType == '' and self.recipient_email == '' and self.tax_id != '': # ไม่ใส่ recipient_email // ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                print('only sender , tax_id 3')

                            elif self.tax_id == '' and self.documentType == '' and self.recipient_email != '': # ไม่ใส่ tax_id // ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).count()
                                print('only sender , recipient_email 3')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType == '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id // ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).count()
                                print('only sender4')

                        elif self.recipient_email != '': # ใส่ recipient_email
                            if self.tax_id != '' and self.sender_email == '' and self.documentType == '': # ไม่ใส่ sender_email // ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                print('non sender_email 4')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType != '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                print('only recipient , documentType4')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType == '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id // ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.recipient_email.contains(self.recipient_email)).count()
                                print('only recipient4')

                        elif self.tax_id == '' and self.recipient_email == ''and self.sender_email == ''and self.documentType != '': # ใส่ documentType

                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.documentType.contains(self.documentType)).count()
                            print('only documenType4')

                        elif self.tax_id != '' and self.recipient_email == ''and self.sender_email == ''and self.documentType == '': # ใส่ tax_id
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.biz_info.contains(self.tax_id)).count()
                            print('tax_id4')

                        elif self.tax_id != '' and self.recipient_email == '' and self.sender_email == ''and self.documentType != '': # ใส่ tax_id,documentType

                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).count()
                            print('tax_id , documenType 4')


                        elif self.sender_email == '' and self.tax_id == '' and self.recipient_email == ''and self.documentType == '':#ไม่ใส่อะไรเลย
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).count()
                            print ('No anything')
            return ({'result':'OK','messageText':query_document_tmp,'messageER':None})

        except Exception as e:
            print(str(e))
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':str(e)}
            
    def select_countpaperWeek_recpemail_v2(self, email,document_type,tax_id):
        self.email = email
        self.document_type = document_type
        self.tax_id = tax_id
        list_json = []
        list_start_time = []
        countDoc_of_week = 0
        count_Doc_of_week_reject = 0
        count_Doc_of_week_active = 0
        count_Doc_of_week_delete = 0
        count_Doc_of_week_inactive = 0
        count_user = 0
        list_count_user = []
        tmp_json_1 = {}
        start_last = 0
        startTime_list = []
        endTime_list = []
        count_1 = 3
        count_2 = 4
        count_n = 0
        count_w = 0
        count_y = 0
        count_r = 0
        count_none = 0
        query_count_all = None
        list2 = []
        list_s = []
        try:
            now = datetime.datetime.now()
            day = (str(now).split('-')[2]).split(' ')[0]
            year = str(now).split('-')[0]
            month = str(now).split('-')[1]
            day_of_week = calendar.weekday(int(year),int(month),int(day))
            flashback = timedelta(days=day_of_week)
            end_time = (now).replace(hour=23, minute=59, second=59, microsecond=00)
            start_time =  (now-flashback).replace(hour=0, minute=0, second=0, microsecond=0)
            startTime_list.append(start_time)
            endTime_list.append(end_time)
            list_user = []
            tmp_json = {}
            for x in range(count_1):
                list_start_end = find_startTime_endTime_week(start_time)
                start_time1 = list_start_end[0]
                end_time1 = list_start_end[1]
                list_user2 = []
                startTime_list.append(start_time1)
                endTime_list.append(end_time1)
                if x == count_1 - 1:
                    start_last = start_time1
                start_time = start_time1
            if self.document_type == '' and self.tax_id == '':
                query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.status,
                        view_document.document_status,
                        view_document.recipient_email
                ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
                ,(and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                .filter(view_document.recipient_email.contains(self.email))\
                .all()
                db.session.close()
            elif self.document_type != '' and self.tax_id != '':
                if self.tax_id != 'citizen': #ค้นหาแบบมี tax_id
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.status,
                        view_document.document_status,
                        view_document.recipient_email
                    ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
                    ,(and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                    .filter(view_document.recipient_email.contains(self.email))\
                    .filter(view_document.documentType == self.document_type)\
                    .filter(view_document.biz_info.contains(self.tax_id))\
                    .all()
                    db.session.close()
                else:  #ค้นหาไม่มีแบบมี tax_id
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.status,
                        view_document.document_status,
                        view_document.recipient_email
                    ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
                    ,(and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                    .filter(view_document.recipient_email.contains(self.email))\
                    .filter(view_document.documentType == self.document_type)\
                    .filter(or_(view_document.biz_info == None,view_document.biz_info == 'None'))\
                    .all()
                    db.session.close()
            elif self.document_type == '' and self.tax_id != '':
                if self.tax_id != 'citizen': #ค้นหาแบบมี tax_id
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.status,
                        view_document.document_status,
                        view_document.recipient_email
                    ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
                    ,(and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                    .filter(view_document.recipient_email.contains(self.email))\
                    .filter(view_document.biz_info.contains(self.tax_id))\
                    .all()
                    db.session.close()
                else:
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.status,
                        view_document.document_status,
                        view_document.recipient_email
                    ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
                    ,(and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                    .filter(view_document.recipient_email.contains(self.email))\
                    .filter(or_(view_document.biz_info == None,view_document.biz_info == 'None'))\
                    .all()
                    db.session.close()
            elif self.document_type != '' and self.tax_id == '':
                query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.status,
                        view_document.document_status,
                        view_document.recipient_email
                ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
                ,(and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                .filter(view_document.recipient_email.contains(self.email))\
                .filter(view_document.documentType == self.document_type)\
                .all()
                db.session.close()
            # #########################
            list2 = generateList_count_byEmail_v2(query_count_all)
            # เช็คเอกสารทั้งหมดตามเวลา
            if len(query_count_all) == 0 :
                for x in range(count_2):
                    count_all = 0
                    count_active = 0
                    count_reject = 0
                    count_delete = 0
                    count_incative = 0
                    list_user2 = []
                    countStatus_Y = 0
                    countStatus_N =0
                    countStatus_R = 0
                    countStatus_W = 0 
                    countStatus_N = 0
                    countStatus_None = 0
                    list_sender_round = []
                    timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                    timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                    tmp_json['list_recp_from'] = list_sender_round
                    tmp_json['all_documents'] = count_all
                    tmp_json['documents_active'] = count_active
                    tmp_json['documents_reject'] = count_reject
                    tmp_json['documents_delete'] = count_delete
                    tmp_json['documents_inactive'] = count_incative
                    tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                    tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                    tmp_json['timestamp_start'] = timestamp_start
                    tmp_json['timestamp_end'] = timestamp_end
                    tmp_json['doc_Y'] = countStatus_Y
                    tmp_json['doc_W'] = countStatus_W
                    tmp_json['doc_N'] = countStatus_N
                    tmp_json['doc_R'] = countStatus_R
                    tmp_json['doc_none'] = countStatus_None
                    countDoc_of_week = countDoc_of_week + count_all
                    count_Doc_of_week_active = count_Doc_of_week_active + count_active
                    count_Doc_of_week_reject = count_Doc_of_week_reject + count_reject
                    list_json.append(tmp_json)
                    tmp_json = {}
            else:
                for x in range(count_2):
                    count_all = 0
                    count_active = 0
                    count_reject = 0
                    count_delete = 0
                    count_incative = 0
                    list_user2 = []
                    list_sender_round = []
                    # list_recp_round = []
                    countStatus_Y = 0
                    countStatus_N =0
                    countStatus_R = 0
                    countStatus_W = 0 
                    countStatus_N = 0
                    countStatus_None = 0
                    for y in range(len(list2)):
                        timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                        timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                        user = list2[y]['sender_email']
                        doc_status = list2[y]['document_status']
                        sender = list2[y]['sender_email']
                        if int(list2[y]['update_time']) >= int(timestamp_start) and list2[y]['update_time'] <= int(timestamp_end)\
                        or int(list2[y]['send_time']) >= int(timestamp_start) and list2[y]['send_time'] <= int(timestamp_end):
                            list_sender_round.append(sender)
                            list_s.append(sender)
                            count_all = count_all + 1
                            if doc_status != None:
                                if doc_status == 'Y':
                                    countStatus_Y = countStatus_Y + 1
                                if doc_status == 'N':
                                    countStatus_N = countStatus_N + 1 
                                if doc_status == 'W':
                                    countStatus_W = countStatus_W + 1 
                                if doc_status == 'R':
                                    countStatus_R = countStatus_R + 1 
                            elif doc_status == None:
                                countStatus_None = countStatus_None + 1
                        if int(list2[y]['update_time']) >= int(timestamp_start) and list2[y]['update_time'] <= int(timestamp_end) and list2[y]['status'] == 'ACTIVE'\
                        or int(list2[y]['send_time']) >= int(timestamp_start) and list2[y]['send_time'] <= int(timestamp_end) and list2[y]['status'] == 'ACTIVE':
                            count_active = count_active + 1
                        if int(list2[y]['update_time']) >= int(timestamp_start) and list2[y]['update_time'] <= int(timestamp_end) and list2[y]['status'] == 'REJECT'\
                        or int(list2[y]['send_time']) >= int(timestamp_start) and list2[y]['send_time'] <= int(timestamp_end) and list2[y]['status'] == 'REJECT':
                            count_reject = count_reject + 1
                        if int(list2[y]['update_time']) >= int(timestamp_start) and list2[y]['update_time'] <= int(timestamp_end) and list2[y]['status'] == 'DELETE'\
                        or int(list2[y]['send_time']) >= int(timestamp_start) and list2[y]['send_time'] <= int(timestamp_end) and list2[y]['status'] == 'DELETE':
                            count_delete = count_delete + 1
                        if int(list2[y]['update_time']) >= int(timestamp_start) and list2[y]['update_time'] <= int(timestamp_end) and list2[y]['status'] == 'INACTIVE'\
                        or int(list2[y]['send_time']) >= int(timestamp_start) and list2[y]['send_time'] <= int(timestamp_end) and list2[y]['status'] == 'INACTIVE':
                            count_incative = count_incative + 1
                    
                    tmp_json['list_recp_from'] = func_list_recp(list_sender_round)
                    list_sender_round = []
                    tmp_json['all_documents'] = count_all
                    tmp_json['documents_active'] = count_active
                    tmp_json['documents_reject'] = count_reject
                    tmp_json['documents_delete'] = count_delete
                    tmp_json['documents_inactive'] = count_incative
                    tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                    tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                    tmp_json['timestamp_start'] = timestamp_start
                    tmp_json['timestamp_end'] = timestamp_end
                    tmp_json['doc_Y'] = countStatus_Y
                    tmp_json['doc_W'] = countStatus_W
                    tmp_json['doc_N'] = countStatus_N
                    tmp_json['doc_R'] = countStatus_R
                    tmp_json['doc_none'] = countStatus_None
                    list_json.append(tmp_json)
                    tmp_json = {}
                for y in range(len(list2)):
                    if list2[y]['status'] == 'ACTIVE':
                        count_Doc_of_week_active += 1
                    elif list2[y]['status'] == 'REJECT':
                        count_Doc_of_week_reject += 1
                    elif list2[y]['status'] == 'DELETE':
                        count_Doc_of_week_delete += 1
                    elif list2[y]['status'] == 'INACTIVE':
                        count_Doc_of_week_inactive += 1
                    if list2[y]['document_status'] != None:
                        if list2[y]['document_status'] == 'Y':
                            count_y += 1
                        if list2[y]['document_status'] == 'N':
                            count_n += 1
                        if list2[y]['document_status'] == 'W':
                            count_w += 1
                        if list2[y]['document_status'] == 'R':
                            count_r += 1
                    elif list2[y]['document_status'] == None:
                        count_none += 1
            
            
            tmp_json_1['documentsPastWeek_recp'] = list_json
            tmp_json = {}
            list_json = []
            tmp_json['documents_all'] = len(query_count_all)
            tmp_json['documents_all_active'] = count_Doc_of_week_active
            tmp_json['documents_all_reject'] = count_Doc_of_week_reject
            tmp_json['documents_all_delete'] = count_Doc_of_week_delete
            tmp_json['documents_all_inactive'] = count_Doc_of_week_inactive
            tmp_json['documents_all_n'] = count_n
            tmp_json['documents_all_w'] = count_w
            tmp_json['documents_all_r'] = count_r
            tmp_json['documents_all_y'] = count_y
            tmp_json['documents_all_none'] = count_none
            tmp_json['list_recp_from'] = func_list_recp(list_s)
            list_json.append(tmp_json)

            tmp_json_1['documentsAllWeek_recp'] = list_json
           
           
            return {'result':'OK','messageText':tmp_json_1}

        except Exception as e:
            print(e)
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'notfound data' + str(e)}
  

    def select_countpaperWeek_senderemail_v2(self, email,document_type,tax_id):
        self.email = email
        self.document_type = document_type
        self.tax_id = tax_id
        list_json = []
        list_start_time = []
        countDoc_of_week = 0
        count_Doc_of_week_reject = 0
        count_Doc_of_week_active = 0
        count_Doc_of_week_delete = 0
        count_Doc_of_week_inactive = 0
        count_user = 0
        list_count_user = []
        tmp_json_1 = {}
        start_last = 0
        startTime_list = []
        endTime_list = []
        count_1 = 3
        count_2 = 4
        count_n = 0
        count_w = 0
        count_y = 0
        count_r = 0
        count_none = 0
        query_count_all = None
        list2 = []
        list_sender = []
        list_r = []
        try:
            now = datetime.datetime.now()
            day = (str(now).split('-')[2]).split(' ')[0]
            year = str(now).split('-')[0]
            month = str(now).split('-')[1]
            day_of_week = calendar.weekday(int(year),int(month),int(day))
            flashback = timedelta(days=day_of_week)
            end_time = (now).replace(hour=23, minute=59, second=59, microsecond=00)
            start_time =  (now-flashback).replace(hour=0, minute=0, second=0, microsecond=0)
            startTime_list.append(start_time)
            endTime_list.append(end_time)
            list_user = []
            tmp_json = {}
            for x in range(count_1):
                list_start_end = find_startTime_endTime_week(start_time)
                start_time1 = list_start_end[0]
                end_time1 = list_start_end[1]
                list_user2 = []
                startTime_list.append(start_time1)
                endTime_list.append(end_time1)
                if x == count_1 - 1:
                    start_last = start_time1
                start_time = start_time1
            if self.document_type == '' and self.tax_id == '':
                query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.status,
                        view_document.document_status,
                        view_document.recipient_email
                ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
                ,(and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                .filter(view_document.sender_email == self.email)\
                .all()
                db.session.close()
            elif self.document_type != '' and self.tax_id != '':
                if self.tax_id != 'citizen': #ค้นหาแบบมี tax_id
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.status,
                        view_document.document_status,
                        view_document.recipient_email
                    ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
                    ,(and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                    .filter(view_document.sender_email == self.email)\
                    .filter(view_document.documentType == self.document_type)\
                    .filter(view_document.biz_info.contains(self.tax_id))\
                    .all()
                    db.session.close()
                else:  #ค้นหาไม่มีแบบมี tax_id
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.status,
                        view_document.document_status,
                        view_document.recipient_email
                    ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
                    ,(and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                    .filter(view_document.sender_email == self.email)\
                    .filter(view_document.documentType == self.document_type)\
                    .filter(or_(view_document.biz_info == None,view_document.biz_info == 'None'))\
                    .all()
                    db.session.close()
            elif self.document_type == '' and self.tax_id != '':
                if self.tax_id != 'citizen': #ค้นหาแบบมี tax_id
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.status,
                        view_document.document_status,
                        view_document.recipient_email
                    ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
                    ,(and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                    .filter(view_document.sender_email == self.email)\
                    .filter(view_document.biz_info.contains(self.tax_id))\
                    .all()
                    db.session.close()
                else:
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.status,
                        view_document.document_status,
                        view_document.recipient_email
                    ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
                    ,(and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                    .filter(view_document.sender_email == self.email)\
                    .filter(or_(view_document.biz_info == None,view_document.biz_info == 'None'))\
                    .all()
                    db.session.close()
            elif self.document_type != '' and self.tax_id == '':
                query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.status,
                        view_document.document_status,
                        view_document.recipient_email
                ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
                ,(and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                .filter(view_document.sender_email == self.email)\
                .filter(view_document.documentType == self.document_type)\
                .all()
                db.session.close()
            # ###################################
            list2 = generateList_count_byEmail_v2(query_count_all)
            # เช็คเอกสารทั้งหมดตามเวลา
            if len(query_count_all) == 0 :
                for x in range(count_2):
                    count_all = 0
                    count_active = 0
                    count_reject = 0
                    count_delete = 0
                    count_incative = 0
                    countStatus_Y = 0
                    countStatus_N =0
                    countStatus_R = 0
                    countStatus_W = 0 
                    countStatus_N = 0
                    countStatus_None = 0
                    list_user2 = []
                    list_recp_round = []
                    timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                    timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                    tmp_json['list_send_to'] = list_recp_round
                    tmp_json['all_documents'] = count_all
                    tmp_json['documents_active'] = count_active
                    tmp_json['documents_reject'] = count_reject
                    tmp_json['documents_delete'] = count_delete
                    tmp_json['documents_inactive'] = count_incative
                    tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                    tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                    tmp_json['timestamp_start'] = timestamp_start
                    tmp_json['timestamp_end'] = timestamp_end
                    tmp_json['doc_Y'] = countStatus_Y
                    tmp_json['doc_W'] = countStatus_W
                    tmp_json['doc_N'] = countStatus_N
                    tmp_json['doc_R'] = countStatus_R
                    tmp_json['doc_none'] = countStatus_None
                    countDoc_of_week = countDoc_of_week + count_all
                    count_Doc_of_week_active = count_Doc_of_week_active + count_active
                    count_Doc_of_week_reject = count_Doc_of_week_reject + count_reject
                    list_json.append(tmp_json)
                    tmp_json = {}
            else:
                for x in range(count_2):
                    count_all = 0
                    count_active = 0
                    count_reject = 0
                    count_delete = 0
                    count_incative = 0
                    list_user2 = []
                    list_recp_round = []
                    countStatus_Y = 0
                    countStatus_N =0
                    countStatus_R = 0
                    countStatus_W = 0 
                    countStatus_N = 0
                    countStatus_None = 0
                    for y in range(len(list2)):
                        timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                        timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                        user = list2[y]['sender_email']
                        doc_status = list2[y]['document_status']
                        recp = list2[y]['recipient_email']
                        r_eval = eval(recp)
                        if int(list2[y]['update_time']) >= int(timestamp_start) and list2[y]['update_time'] <= int(timestamp_end)\
                        or int(list2[y]['send_time']) >= int(timestamp_start) and list2[y]['send_time'] <= int(timestamp_end):
                            for xi in range(len(r_eval)):
                                list_recp_round.append(r_eval[xi])
                                list_r.append(r_eval[xi])
                            count_all = count_all + 1
                            if doc_status != None:
                                if doc_status == 'Y':
                                    countStatus_Y = countStatus_Y + 1
                                if doc_status == 'N':
                                    countStatus_N = countStatus_N + 1 
                                if doc_status == 'W':
                                    countStatus_W = countStatus_W + 1 
                                if doc_status == 'R':
                                    countStatus_R = countStatus_R + 1 
                            elif doc_status == None:
                                countStatus_None = countStatus_None + 1
                        if int(list2[y]['update_time']) >= int(timestamp_start) and list2[y]['update_time'] <= int(timestamp_end) and list2[y]['status'] == 'ACTIVE'\
                        or int(list2[y]['send_time']) >= int(timestamp_start) and list2[y]['send_time'] <= int(timestamp_end) and list2[y]['status'] == 'ACTIVE':
                            count_active = count_active + 1
                        if int(list2[y]['update_time']) >= int(timestamp_start) and list2[y]['update_time'] <= int(timestamp_end) and list2[y]['status'] == 'REJECT'\
                        or int(list2[y]['send_time']) >= int(timestamp_start) and list2[y]['send_time'] <= int(timestamp_end) and list2[y]['status'] == 'REJECT':
                            count_reject = count_reject + 1
                        if int(list2[y]['update_time']) >= int(timestamp_start) and list2[y]['update_time'] <= int(timestamp_end) and list2[y]['status'] == 'DELETE'\
                        or int(list2[y]['send_time']) >= int(timestamp_start) and list2[y]['send_time'] <= int(timestamp_end) and list2[y]['status'] == 'DELETE':
                            count_delete = count_delete + 1
                        if int(list2[y]['update_time']) >= int(timestamp_start) and list2[y]['update_time'] <= int(timestamp_end) and list2[y]['status'] == 'INACTIVE'\
                        or int(list2[y]['send_time']) >= int(timestamp_start) and list2[y]['send_time'] <= int(timestamp_end) and list2[y]['status'] == 'INACTIVE':
                            count_incative = count_incative + 1
                    tmp_json['list_send_to'] = func_list_recp(list_recp_round)
                    list_recp_round = []
                    tmp_json['all_documents'] = count_all
                    tmp_json['documents_active'] = count_active
                    tmp_json['documents_reject'] = count_reject
                    tmp_json['documents_delete'] = count_delete
                    tmp_json['documents_inactive'] = count_incative
                    tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                    tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                    tmp_json['timestamp_start'] = timestamp_start
                    tmp_json['timestamp_end'] = timestamp_end
                    tmp_json['doc_Y'] = countStatus_Y
                    tmp_json['doc_W'] = countStatus_W
                    tmp_json['doc_N'] = countStatus_N
                    tmp_json['doc_R'] = countStatus_R
                    tmp_json['doc_none'] = countStatus_None
                    list_json.append(tmp_json)
                    tmp_json = {}
                for y in range(len(list2)):
                    if list2[y]['status'] == 'ACTIVE':
                        count_Doc_of_week_active += 1
                    elif list2[y]['status'] == 'REJECT':
                        count_Doc_of_week_reject += 1
                    elif list2[y]['status'] == 'DELETE':
                        count_Doc_of_week_delete += 1
                    elif list2[y]['status'] == 'INACTIVE':
                        count_Doc_of_week_inactive += 1
                    if list2[y]['document_status'] != None:
                        if list2[y]['document_status'] == 'Y':
                            count_y += 1
                        if list2[y]['document_status'] == 'N':
                            count_n += 1
                        if list2[y]['document_status'] == 'W':
                            count_w += 1
                        if list2[y]['document_status'] == 'R':
                            count_r += 1
                    elif list2[y]['document_status'] == None:
                        count_none += 1
            # เช็คเอกสารทั้งหมดตามเวลา
            # list_recp2 = func_list_recp(list_r)
            tmp_json_1['documentsPastWeek_sender'] = list_json
            tmp_json = {}
            list_json = []
            tmp_json['documents_all'] = len(query_count_all)
            tmp_json['documents_all_active'] = count_Doc_of_week_active
            tmp_json['documents_all_reject'] = count_Doc_of_week_reject
            tmp_json['documents_all_delete'] = count_Doc_of_week_delete
            tmp_json['documents_all_inactive'] = count_Doc_of_week_inactive
            tmp_json['documents_all_n'] = count_n
            tmp_json['documents_all_w'] = count_w
            tmp_json['documents_all_r'] = count_r
            tmp_json['documents_all_y'] = count_y
            tmp_json['documents_all_none'] = count_none
            tmp_json['list_send_to'] = func_list_recp(list_r)
            list_json.append(tmp_json)
            tmp_json_1['documentsAllWeek_sender'] = list_json
           
            return {'result':'OK','messageText':tmp_json_1}

        except Exception as e:
            print(e)
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'notfound data' + str(e)}

    def selct_count_paperDay_senderemail_v2(self, email,document_type,tax_id):
        self.email = email
        self.document_type = document_type
        self.tax_id = tax_id
        list_json = []
        list_start_time = []
        list_count_user = []
        countDoc_of_day = 0
        count_Doc_of_day_reject = 0
        count_Doc_of_day_active = 0
        count_Doc_of_day_delete = 0
        count_Doc_of_day_inactive = 0
        tmp_json_1 = {}
        start_last = 0
        startTime_list = []
        endTime_list = []
        count_1 = 29
        count_2 = 30
        count_n = 0
        count_w = 0
        count_y = 0
        count_r = 0
        count_none = 0
        list_user = []
        tmp_json = {}
        list_r = []
        now = datetime.datetime.now()
        end_time = now.replace(hour=23, minute=59, second=59, microsecond=00)
        start_time = now.replace(hour=0, minute=0, second=0, microsecond=0)
        startTime_list.append(start_time)
        endTime_list.append(end_time)
        for x in range(count_1):
            list_start_end = find_startTime_endTime_day(start_time)
            start_time1 = list_start_end[0]
            end_time1 = list_start_end[1]
            startTime_list.append(start_time1)
            endTime_list.append(end_time1)
            if x == count_1 - 1:
                start_last = start_time1
            start_time = start_time1
        if self.document_type == '' and self.tax_id == '':
            query_count_all = view_document.query.with_entities(
                view_document.sender_email,
                view_document.send_time,
                view_document.update_time,
                view_document.status,
                view_document.document_status,
                view_document.recipient_email
            ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
            ,(and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
            .filter(view_document.sender_email == self.email)\
            .all()
        elif self.document_type != '' and self.tax_id != '':
            if self.tax_id != 'citizen': #ค้นหาแบบมี tax_id
                query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.send_time,
                    view_document.update_time,
                    view_document.status,
                    view_document.document_status,
                    view_document.recipient_email
                ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
                ,(and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                .filter(view_document.sender_email == self.email)\
                .filter(view_document.documentType == self.document_type)\
                .filter(view_document.biz_info.contains(self.tax_id))\
                .all()
                db.session.close()
            else:  #ค้นหาไม่มีแบบมี tax_id
                query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.send_time,
                    view_document.update_time,
                    view_document.status,
                    view_document.document_status,
                    view_document.recipient_email
                ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
                ,(and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                .filter(view_document.sender_email == self.email)\
                .filter(view_document.documentType == self.document_type)\
                .filter(or_(view_document.biz_info == None,view_document.biz_info == 'None'))\
                .all()
                db.session.close()
        elif self.document_type == '' and self.tax_id != '':
            if self.tax_id != 'citizen': #ค้นหาแบบมี tax_id
                query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.send_time,
                    view_document.update_time,
                    view_document.status,
                    view_document.document_status,
                    view_document.recipient_email
                ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
                ,(and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                .filter(view_document.sender_email == self.email)\
                .filter(view_document.biz_info.contains(self.tax_id))\
                .all()
                db.session.close()
            else:
                query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.send_time,
                    view_document.update_time,
                    view_document.status,
                    view_document.document_status,
                    view_document.recipient_email
                ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
                ,(and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                .filter(view_document.sender_email == self.email)\
                .filter(or_(view_document.biz_info == None,view_document.biz_info == 'None'))\
                .all()
                db.session.close()
        elif self.document_type != '' and self.tax_id == '':
            query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.send_time,
                    view_document.update_time,
                    view_document.status,
                    view_document.document_status,
                    view_document.recipient_email
            ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
            ,(and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
            .filter(view_document.sender_email == self.email)\
            .filter(view_document.documentType == self.document_type)\
            .all()
            db.session.close()
        # ###############################
        list2 = generateList_count_byEmail_v2(query_count_all)
        if len(query_count_all) == 0 :
            count_all = 0
            count_active = 0
            count_reject = 0
            count_delete = 0
            count_incative = 0
            list_user2 = []
            list_recp_round = []
            countStatus_Y = 0
            countStatus_N =0
            countStatus_R = 0
            countStatus_W = 0 
            countStatus_N = 0
            countStatus_None = 0
            for x in range(count_2):
                count_all = 0
                count_active = 0
                count_reject = 0
                list_user2 = []
                timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                tmp_json['list_send_to'] = list_recp_round
                tmp_json['all_documents'] = count_all
                tmp_json['documents_active'] = count_active
                tmp_json['documents_reject'] = count_reject
                tmp_json['documents_reject'] = count_reject
                tmp_json['documents_delete'] = count_delete
                tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                tmp_json['timestamp_start'] = timestamp_start
                tmp_json['timestamp_end'] = timestamp_end
                tmp_json['doc_Y'] = countStatus_Y
                tmp_json['doc_W'] = countStatus_W
                tmp_json['doc_N'] = countStatus_N
                tmp_json['doc_R'] = countStatus_R
                tmp_json['doc_none'] = countStatus_None
                countDoc_of_day = countDoc_of_day + count_all
                count_Doc_of_day_active = count_Doc_of_day_active + count_active
                count_Doc_of_day_reject = count_Doc_of_day_reject + count_reject
                list_json.append(tmp_json)
                tmp_json = {}
        else:
            for x in range(count_2):
                count_all = 0
                count_active = 0
                count_reject = 0
                count_delete = 0
                count_incative = 0
                list_user2 = []
                list_recp_round = []
                countStatus_Y = 0
                countStatus_N =0
                countStatus_R = 0
                countStatus_W = 0 
                countStatus_N = 0
                countStatus_None = 0
                # print('len',len(list2))
                for y in range(len(list2)):
                    timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                    timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                    user = list2[y]['sender_email']
                    doc_status = list2[y]['document_status']
                    recp = list2[y]['recipient_email']
                    r_eval = eval(recp)
                    # print('lene',len(r_eval))
                    if int(list2[y]['update_time']) >= int(timestamp_start) and list2[y]['update_time'] <= int(timestamp_end)\
                    or int(list2[y]['send_time']) >= int(timestamp_start) and list2[y]['send_time'] <= int(timestamp_end):
                        for xi in range(len(r_eval)):
                            list_r.append(r_eval[xi])
                            list_recp_round.append(r_eval[xi])
                        count_all = count_all + 1
                        if doc_status != None:
                            if doc_status == 'Y':
                                countStatus_Y = countStatus_Y + 1
                            if doc_status == 'N':
                                countStatus_N = countStatus_N + 1 
                            if doc_status == 'W':
                                countStatus_W = countStatus_W + 1 
                            if doc_status == 'R':
                                countStatus_R = countStatus_R + 1 
                        if doc_status == None:
                            countStatus_None = countStatus_None + 1
                        if user not in list_user2:
                            list_user2.append(user)
                        if user not in list_count_user:
                            list_count_user.append(user)
                    if int(list2[y]['update_time']) >= int(timestamp_start) and list2[y]['update_time'] <= int(timestamp_end) and list2[y]['status'] == 'ACTIVE'\
                    or int(list2[y]['send_time']) >= int(timestamp_start) and list2[y]['send_time'] <= int(timestamp_end) and list2[y]['status'] == 'ACTIVE':
                        count_active = count_active + 1
                    if int(list2[y]['update_time']) >= int(timestamp_start) and list2[y]['update_time'] <= int(timestamp_end) and list2[y]['status'] == 'REJECT'\
                    or int(list2[y]['send_time']) >= int(timestamp_start) and list2[y]['send_time'] <= int(timestamp_end) and list2[y]['status'] == 'REJECT':
                        count_reject = count_reject + 1
                    if int(list2[y]['update_time']) >= int(timestamp_start) and list2[y]['update_time'] <= int(timestamp_end) and list2[y]['status'] == 'DELETE'\
                    or int(list2[y]['send_time']) >= int(timestamp_start) and list2[y]['send_time'] <= int(timestamp_end) and list2[y]['status'] == 'DELETE':
                        count_delete = count_delete + 1
                    if int(list2[y]['update_time']) >= int(timestamp_start) and list2[y]['update_time'] <= int(timestamp_end) and list2[y]['status'] == 'INACTIVE'\
                    or int(list2[y]['send_time']) >= int(timestamp_start) and list2[y]['send_time'] <= int(timestamp_end) and list2[y]['status'] == 'INACTIVE':
                        count_incative = count_incative + 1
                tmp_json['list_send_to'] = func_list_recp(list_recp_round)
                list_recp_round = []
                tmp_json['all_documents'] = count_all
                tmp_json['documents_active'] = count_active
                tmp_json['documents_reject'] = count_reject
                tmp_json['documents_delete'] = count_delete
                tmp_json['documents_inactive'] = count_incative
                tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                tmp_json['timestamp_start'] = timestamp_start
                tmp_json['timestamp_end'] = timestamp_end
                tmp_json['doc_Y'] = countStatus_Y
                tmp_json['doc_W'] = countStatus_W
                tmp_json['doc_N'] = countStatus_N
                tmp_json['doc_R'] = countStatus_R
                tmp_json['doc_none'] = countStatus_None
                # countDoc_of_day = len(list2)
                # count_Doc_of_day_active = count_Doc_of_day_active + count_active
                # count_Doc_of_day_reject = count_Doc_of_day_reject + count_reject
                # count_n = count_n + countStatus_N
                # count_w = count_w + countStatus_W
                # count_y = count_y +  countStatus_Y
                # count_r = count_r + countStatus_R
                # count_none = count_none + countStatus_None
                list_json.append(tmp_json)
                tmp_json = {}
            for y in range(len(list2)):
                    if list2[y]['status'] == 'ACTIVE':
                        count_Doc_of_day_active += 1
                    elif list2[y]['status'] == 'REJECT':
                        count_Doc_of_day_reject += 1
                    elif list2[y]['status'] == 'DELETE':
                        count_Doc_of_day_delete += 1
                    elif list2[y]['status'] == 'INACTIVE':
                        count_Doc_of_day_inactive += 1
                    if list2[y]['document_status'] != None:
                        if list2[y]['document_status'] == 'Y':
                            count_y += 1
                        if list2[y]['document_status'] == 'N':
                            count_n += 1
                        if list2[y]['document_status'] == 'W':
                            count_w += 1
                        if list2[y]['document_status'] == 'R':
                            count_r += 1
                    elif list2[y]['document_status'] == None:
                        count_none += 1
        list_recp2 = func_list_recp(list_r)
        tmp_json_1['documentsPastDay_sender'] = list_json
        tmp_json = {}
        list_json = []
        tmp_json['documents_all'] = len(query_count_all)
        tmp_json['documents_all_active'] = count_Doc_of_day_active
        tmp_json['documents_all_reject'] = count_Doc_of_day_reject
        tmp_json['documents_all_delete'] = count_Doc_of_day_delete
        tmp_json['documents_all_inactive'] = count_Doc_of_day_inactive
        tmp_json['documents_all_n'] = count_n
        tmp_json['documents_all_w'] = count_w
        tmp_json['documents_all_r'] = count_r
        tmp_json['documents_all_y'] = count_y
        tmp_json['documents_all_none'] = count_none
        tmp_json['list_send_to'] = func_list_recp(list_r)
        # count_n = count_n + countStatus_N
        # count_w = count_w + countStatus_W
        # count_y = count_y +  countStatus_Y
        # count_r = count_r + countStatus_R
        # count_none = count_none + countStatus_None
        list_json.append(tmp_json)

        tmp_json_1['documentsAllDay_sender'] = list_json
        db.session.close()
        return {'result':'OK','messageText':tmp_json_1} 

    def selct_count_paperDay_recpemail_v2(self,email,document_type,tax_id):
        self.email = email
        self.document_type = document_type
        self.tax_id = tax_id
        list_json = []
        list_start_time = []
        list_count_user = []
        countDoc_of_day = 0
        count_Doc_of_day_reject = 0
        count_Doc_of_day_active = 0
        count_Doc_of_day_delete = 0
        count_Doc_of_day_inactive = 0
        tmp_json_1 = {}
        start_last = 0
        startTime_list = []
        endTime_list = []
        count_1 = 29
        count_2 = 30
        count_n = 0
        count_w = 0
        count_y = 0
        count_r = 0
        count_none = 0
        list_user = []
        tmp_json = {}
        list_s = []
        now = datetime.datetime.now()
        end_time = now.replace(hour=23, minute=59, second=59, microsecond=00)
        start_time = now.replace(hour=0, minute=0, second=0, microsecond=0)
        startTime_list.append(start_time)
        endTime_list.append(end_time)
        for x in range(count_1):
            list_start_end = find_startTime_endTime_day(start_time)
            start_time1 = list_start_end[0]
            end_time1 = list_start_end[1]
            startTime_list.append(start_time1)
            endTime_list.append(end_time1)
            if x == count_1 - 1:
                start_last = start_time1
            start_time = start_time1
        if self.document_type == '' and self.tax_id == '':
            query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.send_time,
                    view_document.update_time,
                    view_document.status,
                    view_document.document_status,
                    view_document.recipient_email
            ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
            ,(and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
            .filter(view_document.recipient_email.contains(self.email))\
            .all()
            db.session.close()
        elif self.document_type != '' and self.tax_id != '':
            if self.tax_id != 'citizen': #ค้นหาแบบมี tax_id
                query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.send_time,
                    view_document.update_time,
                    view_document.status,
                    view_document.document_status,
                    view_document.recipient_email
                ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
                ,(and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                .filter(view_document.recipient_email.contains(self.email))\
                .filter(view_document.documentType == self.document_type)\
                .filter(view_document.biz_info.contains(self.tax_id))\
                .all()
                db.session.close()
            else:  #ค้นหาไม่มีแบบมี tax_id
                query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.send_time,
                    view_document.update_time,
                    view_document.status,
                    view_document.document_status,
                    view_document.recipient_email
                ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
                ,(and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                .filter(view_document.recipient_email.contains(self.email))\
                .filter(view_document.documentType == self.document_type)\
                .filter(or_(view_document.biz_info == None,view_document.biz_info == 'None'))\
                .all()
                db.session.close()
        elif self.document_type == '' and self.tax_id != '':
            if self.tax_id != 'citizen': #ค้นหาแบบมี tax_id
                query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.send_time,
                    view_document.update_time,
                    view_document.status,
                    view_document.document_status,
                    view_document.recipient_email
                ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
                ,(and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                .filter(view_document.recipient_email.contains(self.email))\
                .filter(view_document.biz_info.contains(self.tax_id))\
                .all()
                db.session.close()
            else:
                query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.send_time,
                    view_document.update_time,
                    view_document.status,
                    view_document.document_status,
                    view_document.recipient_email
                ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
                ,(and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                .filter(view_document.recipient_email.contains(self.email))\
                .filter(or_(view_document.biz_info == None,view_document.biz_info == 'None'))\
                .all()
                db.session.close()
        elif self.document_type != '' and self.tax_id == '': 
            query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.send_time,
                    view_document.update_time,
                    view_document.status,
                    view_document.document_status,
                    view_document.recipient_email
            ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
            ,(and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
            .filter(view_document.recipient_email.contains(self.email))\
            .filter(view_document.documentType == self.document_type)\
            .all()
            db.session.close()
        # ############################################3
        list2 = generateList_count_byEmail_v2(query_count_all)
        if len(query_count_all) == 0 :
            count_all = 0
            count_active = 0
            count_reject = 0
            count_delete = 0
            count_incative = 0
            list_user2 = []
            countStatus_Y = 0
            countStatus_N =0
            countStatus_R = 0
            countStatus_W = 0 
            countStatus_N = 0
            countStatus_None = 0
            for x in range(count_2):
                count_all = 0
                count_active = 0
                count_reject = 0
                list_user2 = []
                list_sender_round = []
                timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                tmp_json['list_recp_from'] = list_sender_round
                tmp_json['all_documents'] = count_all
                tmp_json['documents_active'] = count_active
                tmp_json['documents_reject'] = count_reject
                tmp_json['documents_delete'] = count_delete
                tmp_json['documents_inactive'] = count_incative
                tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                tmp_json['timestamp_start'] = timestamp_start
                tmp_json['timestamp_end'] = timestamp_end
                tmp_json['doc_Y'] = countStatus_Y
                tmp_json['doc_W'] = countStatus_W
                tmp_json['doc_N'] = countStatus_N
                tmp_json['doc_R'] = countStatus_R
                tmp_json['doc_none'] = countStatus_None
                countDoc_of_day = countDoc_of_day + count_all
                count_Doc_of_day_active = count_Doc_of_day_active + count_active
                count_Doc_of_day_reject = count_Doc_of_day_reject + count_reject
                list_json.append(tmp_json)
                tmp_json = {}
        else:
            for x in range(count_2):
                count_all = 0
                count_active = 0
                count_reject = 0
                count_delete = 0
                count_incative = 0
                list_user2 = []
                list_sender_round = []
                countStatus_Y = 0
                countStatus_N =0
                countStatus_R = 0
                countStatus_W = 0 
                countStatus_N = 0
                countStatus_None = 0
                for y in range(len(list2)):
                    timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                    timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                    user = list2[y]['sender_email']
                    doc_status = list2[y]['document_status']
                    sender = list2[y]['sender_email']
                    if int(list2[y]['update_time']) >= int(timestamp_start) and list2[y]['update_time'] <= int(timestamp_end)\
                    or int(list2[y]['send_time']) >= int(timestamp_start) and list2[y]['send_time'] <= int(timestamp_end):
                        list_sender_round.append(sender)
                        list_s.append(sender)
                        count_all = count_all + 1
                        if doc_status != None:
                            if doc_status == 'Y':
                                countStatus_Y = countStatus_Y + 1
                            if doc_status == 'N':
                                countStatus_N = countStatus_N + 1 
                            if doc_status == 'W':
                                countStatus_W = countStatus_W + 1 
                            if doc_status == 'R':
                                countStatus_R = countStatus_R + 1 
                        if doc_status == None:
                            countStatus_None = countStatus_None + 1
                        if user not in list_user2:
                            list_user2.append(user)
                        if user not in list_count_user:
                            list_count_user.append(user)
                    if int(list2[y]['update_time']) >= int(timestamp_start) and list2[y]['update_time'] <= int(timestamp_end) and list2[y]['status'] == 'ACTIVE'\
                    or int(list2[y]['send_time']) >= int(timestamp_start) and list2[y]['send_time'] <= int(timestamp_end) and list2[y]['status'] == 'ACTIVE':
                        count_active = count_active + 1
                    if int(list2[y]['update_time']) >= int(timestamp_start) and list2[y]['update_time'] <= int(timestamp_end) and list2[y]['status'] == 'REJECT'\
                    or int(list2[y]['send_time']) >= int(timestamp_start) and list2[y]['send_time'] <= int(timestamp_end) and list2[y]['status'] == 'REJECT':
                        count_reject = count_reject + 1
                    if int(list2[y]['update_time']) >= int(timestamp_start) and list2[y]['update_time'] <= int(timestamp_end) and list2[y]['status'] == 'DELETE'\
                    or int(list2[y]['send_time']) >= int(timestamp_start) and list2[y]['send_time'] <= int(timestamp_end) and list2[y]['status'] == 'DELETE':
                        count_delete = count_delete + 1
                    if int(list2[y]['update_time']) >= int(timestamp_start) and list2[y]['update_time'] <= int(timestamp_end) and list2[y]['status'] == 'INACTIVE'\
                    or int(list2[y]['send_time']) >= int(timestamp_start) and list2[y]['send_time'] <= int(timestamp_end) and list2[y]['status'] == 'INACTIVE':
                        count_incative = count_incative + 1
                tmp_json['list_recp_from'] = func_list_recp(list_sender_round)
                list_sender_round = []
                tmp_json['all_documents'] = count_all
                tmp_json['documents_active'] = count_active
                tmp_json['documents_reject'] = count_reject
                tmp_json['documents_delete'] = count_delete
                tmp_json['documents_inactive'] = count_incative
                tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                tmp_json['timestamp_start'] = timestamp_start
                tmp_json['timestamp_end'] = timestamp_end
                tmp_json['doc_Y'] = countStatus_Y
                tmp_json['doc_W'] = countStatus_W
                tmp_json['doc_N'] = countStatus_N
                tmp_json['doc_R'] = countStatus_R
                tmp_json['doc_none'] = countStatus_None
                list_json.append(tmp_json)
                tmp_json = {}
            
            for y in range(len(list2)):
                    if list2[y]['status'] == 'ACTIVE':
                        count_Doc_of_day_active += 1
                    elif list2[y]['status'] == 'REJECT':
                        count_Doc_of_day_reject += 1
                    elif list2[y]['status'] == 'DELETE':
                        count_Doc_of_day_delete += 1
                    elif list2[y]['status'] == 'INACTIVE':
                        count_Doc_of_day_inactive += 1
                    if list2[y]['document_status'] != None:
                        if list2[y]['document_status'] == 'Y':
                            count_y += 1
                        if list2[y]['document_status'] == 'N':
                            count_n += 1
                        if list2[y]['document_status'] == 'W':
                            count_w += 1
                        if list2[y]['document_status'] == 'R':
                            count_r += 1
                    elif list2[y]['document_status'] == None:
                        count_none += 1
        tmp_json_1['documentsPastDay_sender'] = list_json
        tmp_json = {}
        list_json = []
        tmp_json['documents_all'] = len(query_count_all)
        tmp_json['documents_all_active'] = count_Doc_of_day_active
        tmp_json['documents_all_reject'] = count_Doc_of_day_reject
        tmp_json['documents_all_delete'] = count_Doc_of_day_delete
        tmp_json['documents_all_inactive'] = count_Doc_of_day_inactive
        tmp_json['documents_all_n'] = count_n
        tmp_json['documents_all_w'] = count_w
        tmp_json['documents_all_r'] = count_r
        tmp_json['documents_all_y'] = count_y
        tmp_json['documents_all_none'] = count_none
        tmp_json['list_recp_from'] = func_list_recp(list_s)
        list_json.append(tmp_json)

        tmp_json_1['documentsAllDay_sender'] = list_json
        db.session.close()
        return {'result':'OK','messageText':tmp_json_1} 

    def selct_count_paperHour_sendermail_v2(self, email,document_type,tax_id):
        self.email = email
        self.document_type = document_type
        self.tax_id = tax_id
        list_json = []
        list_start_time = []
        countDoc_of_hour= 0
        count_Doc_of_hour_reject = 0
        count_Doc_of_hour_active = 0
        count_Doc_of_hour_delete = 0
        count_Doc_of_hour_inactive = 0
        count_user = 0 
        tmp_json_1 = {}
        start_last = 0
        startTime_list = []
        endTime_list = []
        count_1 = 11
        count_2 = 12
        query_count_all = None
        list_user = []
        list_json_all = []
        list_count_user = []
        tmp_json = {}
        list_r = []
        count_n = 0
        count_w = 0
        count_y = 0
        count_r = 0
        count_none = 0
        now = datetime.datetime.now()
        hour = int((str(now).split(' ')[1]).split(':')[0])
        count = hour
        flashback = timedelta(hours = 1)
        end_time = now.replace(microsecond = 00)
        start_time =  (now-flashback).replace(hour=hour, minute=0, second=0, microsecond=00)
        startTime_list.append(start_time)
        endTime_list.append(end_time)
        for x in range(count):
            list_start_end = find_startTime_endTime_hour(start_time)
            start_time1 = list_start_end[0]
            end_time1 = list_start_end[1]
            list_user2 = []
            startTime_list.append(start_time1)
            endTime_list.append(end_time1)
            if x == count - 1:
                start_last = start_time1
            start_time = start_time1
        if self.document_type == '' and self.tax_id == '':
            query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.send_time,
                    view_document.update_time,
                    view_document.status,
                    view_document.document_status,
                    view_document.recipient_email
            ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
            ,(and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
            .filter(view_document.sender_email == self.email)\
            .all()
            db.session.close()
        elif self.document_type != '' and self.tax_id != '':
            if self.tax_id != 'citizen': #ค้นหาแบบมี tax_id
                query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.status,
                        view_document.document_status,
                        view_document.recipient_email
                ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
                ,(and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                .filter(view_document.sender_email == self.email)\
                .filter(view_document.documentType == self.document_type)\
                .filter(view_document.biz_info.contains(self.tax_id))\
                .all()
                db.session.close()
            else:  #ค้นหาไม่มีแบบมี tax_id
                query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.send_time,
                    view_document.update_time,
                    view_document.status,
                    view_document.document_status,
                    view_document.recipient_email
                ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
                ,(and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                .filter(view_document.sender_email == self.email)\
                .filter(view_document.documentType == self.document_type)\
                .filter(or_(view_document.biz_info == None,view_document.biz_info == 'None'))\
                .all()
                db.session.close()
        elif self.document_type == '' and self.tax_id != '':
            if self.tax_id != 'citizen': #ค้นหาแบบมี tax_id
                query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.status,
                        view_document.document_status,
                        view_document.recipient_email
                ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
                ,(and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                .filter(view_document.sender_email == self.email)\
                .filter(view_document.biz_info.contains(self.tax_id))\
                .all()
                db.session.close()
            else:  #ค้นหาไม่มีแบบมี tax_id
                query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.send_time,
                    view_document.update_time,
                    view_document.status,
                    view_document.document_status,
                    view_document.recipient_email
                ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
                ,(and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                .filter(view_document.sender_email == self.email)\
                .filter(or_(view_document.biz_info == None,view_document.biz_info == 'None'))\
                .all()
                db.session.close()
        elif self.document_type != '' and self.tax_id == '':
            query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.send_time,
                    view_document.update_time,
                    view_document.status,
                    view_document.document_status,
                    view_document.recipient_email
            ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
            ,(and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
            .filter(view_document.sender_email == self.email)\
            .filter(view_document.documentType == self.document_type)\
            .all()
            db.session.close()
        # #############################################
        # if self.document_type == '':
        #     if self.tax_id != 'citizen': #ค้นหาแบบมี tax_id
        #         query_count_all = view_document.query.with_entities(
        #             view_document.sender_email,
        #             view_document.send_time,
        #             view_document.update_time,
        #             view_document.status,
        #             view_document.document_status,
        #             view_document.recipient_email
        #         ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
        #         ,(and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
        #         .filter(view_document.sender_email == self.email)\
        #         .filter(or_(view_document.documentType == None,view_document.documentType == 'None'))\
        #         .filter(view_document.biz_info.contains(self.tax_id))\
        #         .all()
        #         db.session.close()
        #     else: #ค้นหาแบบไม่มี tax_id
        #         query_count_all = view_document.query.with_entities(
        #             view_document.sender_email,
        #             view_document.send_time,
        #             view_document.update_time,
        #             view_document.status,
        #             view_document.document_status,
        #             view_document.recipient_email
        #         ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
        #         ,(and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
        #         .filter(view_document.sender_email == self.email)\
        #         .filter(or_(view_document.documentType == None,view_document.documentType == 'None'))\
        #         .filter(or_(view_document.biz_info == None,view_document.biz_info == 'None'))\
        #         .all()
        #         db.session.close()
        # else:
        #     if self.tax_id != 'citizen': #ค้นหาแบบมี tax_id
        #         query_count_all = view_document.query.with_entities(
        #             view_document.sender_email,
        #             view_document.send_time,
        #             view_document.update_time,
        #             view_document.status,
        #             view_document.document_status,
        #             view_document.recipient_email
        #         ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
        #         ,(and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
        #         .filter(view_document.sender_email == self.email)\
        #         .filter(view_document.documentType == self.document_type)\
        #         .filter(view_document.biz_info.contains(self.tax_id))\
        #         .all()
        #         db.session.close()
        #     else:  #ค้นหาไม่มีแบบมี tax_id
        #         query_count_all = view_document.query.with_entities(
        #             view_document.sender_email,
        #             view_document.send_time,
        #             view_document.update_time,
        #             view_document.status,
        #             view_document.document_status,
        #             view_document.recipient_email
        #         ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
        #         ,(and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
        #         .filter(view_document.sender_email == self.email).all()
        #         db.session.close()
        
        db.session.close()
        list2 = []
        list2 = generateList_count_byEmail_v2(query_count_all)
        if len(query_count_all)==0:
            for x in range(count+1):
                count_all = 0
                count_active = 0
                count_reject = 0
                count_delete = 0
                count_incative = 0
                list_user2 = []
                countStatus_Y = 0
                countStatus_N =0
                countStatus_R = 0
                countStatus_W = 0 
                countStatus_N = 0
                countStatus_None = 0
                list_recp_round = []
                timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                tmp_json['list_send_to'] = list_recp_round
                tmp_json['all_documents'] = count_all
                tmp_json['documents_active'] = count_active
                tmp_json['documents_reject'] = count_reject
                tmp_json['documents_delete'] = count_delete
                tmp_json['documents_inactive'] = count_incative
                tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                tmp_json['timestamp_start'] = timestamp_start
                tmp_json['timestamp_end'] = timestamp_end
                tmp_json['doc_Y'] = countStatus_Y
                tmp_json['doc_W'] = countStatus_W
                tmp_json['doc_N'] = countStatus_N
                tmp_json['doc_R'] = countStatus_R
                tmp_json['doc_none'] = countStatus_None
                tmp_json['list_send_to'] = list_recp_round
                countDoc_of_hour = countDoc_of_hour + count_all
                count_Doc_of_hour_active = count_Doc_of_hour_active + count_active
                count_Doc_of_hour_reject = count_Doc_of_hour_reject + count_reject
                list_json.append(tmp_json)
                tmp_json = {}   
        else:
            for x in range(count+1):
                count_all = 0
                count_active = 0
                count_reject = 0
                count_delete = 0
                count_incative = 0
                list_user2 = []
                list_recp_round = []
                countStatus_Y = 0
                countStatus_N =0
                countStatus_R = 0
                countStatus_W = 0 
                countStatus_N = 0
                countStatus_None = 0
                for y in range(len(list2)):
                    timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                    timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                    user = list2[y]['sender_email']
                    doc_status = list2[y]['document_status']
                    recp = list2[y]['recipient_email']
                    r_eval = eval(recp)
                    if int(list2[y]['update_time']) >= int(timestamp_start) and list2[y]['update_time'] <= int(timestamp_end)\
                    or int(list2[y]['send_time']) >= int(timestamp_start) and list2[y]['send_time'] <= int(timestamp_end):
                        for xi in range(len(r_eval)):
                                list_recp_round.append(r_eval[xi])
                                list_r.append(r_eval[xi])
                        count_all = count_all + 1
                        if doc_status != None:
                            if doc_status == 'Y':
                                countStatus_Y = countStatus_Y + 1
                            if doc_status == 'N':
                                countStatus_N = countStatus_N + 1 
                            if doc_status == 'W':
                                countStatus_W = countStatus_W + 1 
                            if doc_status == 'R':
                                countStatus_R = countStatus_R + 1 
                        if doc_status == None:
                            countStatus_None = countStatus_None + 1
                        if user not in list_user2:
                            list_user2.append(user)
                        if user not in list_count_user:
                            list_count_user.append(user)
                    if int(list2[y]['update_time']) >= int(timestamp_start) and list2[y]['update_time'] <= int(timestamp_end) and list2[y]['status'] == 'ACTIVE'\
                    or int(list2[y]['send_time']) >= int(timestamp_start) and list2[y]['send_time'] <= int(timestamp_end) and list2[y]['status'] == 'ACTIVE':
                        count_active = count_active + 1
                    if int(list2[y]['update_time']) >= int(timestamp_start) and list2[y]['update_time'] <= int(timestamp_end) and list2[y]['status'] == 'REJECT'\
                    or int(list2[y]['send_time']) >= int(timestamp_start) and list2[y]['send_time'] <= int(timestamp_end) and list2[y]['status'] == 'REJECT':
                        count_reject = count_reject + 1
                    if int(list2[y]['update_time']) >= int(timestamp_start) and list2[y]['update_time'] <= int(timestamp_end) and list2[y]['status'] == 'DELETE'\
                    or int(list2[y]['send_time']) >= int(timestamp_start) and list2[y]['send_time'] <= int(timestamp_end) and list2[y]['status'] == 'DELETE':
                        count_delete = count_delete + 1
                    if int(list2[y]['update_time']) >= int(timestamp_start) and list2[y]['update_time'] <= int(timestamp_end) and list2[y]['status'] == 'INACTIVE'\
                    or int(list2[y]['send_time']) >= int(timestamp_start) and list2[y]['send_time'] <= int(timestamp_end) and list2[y]['status'] == 'INACTIVE':
                        count_incative = count_incative + 1
                tmp_json['list_send_to'] = func_list_recp(list_recp_round)
                list_recp_round = []
                tmp_json['all_documents'] = count_all
                tmp_json['documents_active'] = count_active
                tmp_json['documents_reject'] = count_reject
                tmp_json['documents_delete'] = count_delete
                tmp_json['documents_inactive'] = count_incative
                tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                tmp_json['timestamp_start'] = timestamp_start
                tmp_json['timestamp_end'] = timestamp_end
                tmp_json['doc_Y'] = countStatus_Y
                tmp_json['doc_W'] = countStatus_W
                tmp_json['doc_N'] = countStatus_N
                tmp_json['doc_R'] = countStatus_R
                tmp_json['doc_none'] = countStatus_None
                list_json.append(tmp_json)
                tmp_json = {}
            
            for y in range(len(list2)):
                if list2[y]['status'] == 'ACTIVE':
                    count_Doc_of_hour_active += 1
                elif list2[y]['status'] == 'REJECT':
                    count_Doc_of_hour_reject += 1
                elif list2[y]['status'] == 'DELETE':
                    count_Doc_of_hour_delete += 1
                elif list2[y]['status'] == 'INACTIVE':
                    count_Doc_of_hour_inactive += 1
                if list2[y]['document_status'] != None:
                    if list2[y]['document_status'] == 'Y':
                        count_y += 1
                    if list2[y]['document_status'] == 'N':
                        count_n += 1
                    if list2[y]['document_status'] == 'W':
                        count_w += 1
                    if list2[y]['document_status'] == 'R':
                        count_r += 1
                elif list2[y]['document_status'] == None:
                        count_none += 1
        tmp_json_1['documentsPastHour_sender'] = list_json
        tmp_json = {}
        list_json = []
        tmp_json['documents_all'] = len(query_count_all)
        tmp_json['documents_all_active'] = count_Doc_of_hour_active
        tmp_json['documents_all_reject'] = count_Doc_of_hour_reject
        tmp_json['documents_all_delete'] = count_Doc_of_hour_delete
        tmp_json['documents_all_inactive'] = count_Doc_of_hour_inactive
        tmp_json['documents_all_n'] = count_n
        tmp_json['documents_all_w'] = count_w
        tmp_json['documents_all_r'] = count_r
        tmp_json['documents_all_y'] = count_y
        tmp_json['documents_all_none'] = count_none
        tmp_json['list_send_to'] = func_list_recp(list_r)
        list_json.append(tmp_json)
       
        tmp_json_1['documentsAllHour_sender'] = list_json            
        db.session.close()
        return {'result':'OK','messageText':tmp_json_1}

    def selct_count_paperHour_recpmail_v2(self, email,document_type,tax_id):
        self.email = email
        self.document_type = document_type
        self.tax_id = tax_id
        list_json = []
        list_start_time = []
        countDoc_of_hour= 0
        count_Doc_of_hour_reject = 0
        count_Doc_of_hour_active = 0
        count_Doc_of_hour_delete = 0
        count_Doc_of_hour_inactive = 0
        count_user = 0 
        tmp_json_1 = {}
        start_last = 0
        startTime_list = []
        endTime_list = []
        count_1 = 11
        now = datetime.datetime.now()
        hour = int((str(now).split(' ')[1]).split(':')[0])
        count_2 = hour
        print('hour',hour)
        count_n = 0
        count_w = 0
        count_y = 0
        count_r = 0
        count_none = 0
        query_count_all = None
        list_user = []
        list_json_all = []
        list_count_user = []
        tmp_json = {}
        list_s = []
        try:
            now = datetime.datetime.now()
            hour = int((str(now).split(' ')[1]).split(':')[0])
            count = hour
            flashback = timedelta(hours = 1)
            end_time = now.replace(microsecond = 00)
            start_time =  (now-flashback).replace(hour=hour, minute=0, second=0, microsecond=00)
            startTime_list.append(start_time)
            endTime_list.append(end_time)
            print('')
            for x in range(count):
                list_start_end = find_startTime_endTime_hour(start_time)
                start_time1 = list_start_end[0]
                end_time1 = list_start_end[1]
                list_user2 = []
                startTime_list.append(start_time1)
                endTime_list.append(end_time1)
                if x == count - 1:
                    start_last = start_time1
                start_time = start_time1
            if self.document_type == '' and self.tax_id == '':
                query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.status,
                        view_document.document_status,
                        view_document.recipient_email
                ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
                ,(and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                .filter(view_document.recipient_email.contains(self.email))\
                .all()
                db.session.close()
            elif self.document_type != '' and self.tax_id != '':
                if self.tax_id != 'citizen': #ค้นหาแบบมี tax_id
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.status,
                        view_document.document_status,
                        view_document.recipient_email
                    ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
                    ,(and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                    .filter(view_document.recipient_email.contains(self.email))\
                    .filter(view_document.documentType == self.document_type)\
                    .filter(view_document.biz_info.contains(self.tax_id))\
                    .all()
                    db.session.close()
                else:  #ค้นหาไม่มีแบบมี tax_id
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.status,
                        view_document.document_status,
                        view_document.recipient_email
                    ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
                    ,(and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                    .filter(view_document.recipient_email.contains(self.email))\
                    .filter(view_document.documentType == self.document_type)\
                    .filter(or_(view_document.biz_info == None,view_document.biz_info == 'None'))\
                    .all()
                    db.session.close()
            elif self.document_type == '' and self.tax_id != '':
                if self.tax_id != 'citizen': #ค้นหาแบบมี tax_id
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.status,
                        view_document.document_status,
                        view_document.recipient_email
                    ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
                    ,(and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                    .filter(view_document.recipient_email.contains(self.email))\
                    .filter(view_document.biz_info.contains(self.tax_id))\
                    .all()
                    db.session.close()
                else:
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.status,
                        view_document.document_status,
                        view_document.recipient_email
                    ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
                    ,(and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                    .filter(view_document.recipient_email.contains(self.email))\
                    .filter(or_(view_document.biz_info == None,view_document.biz_info == 'None'))\
                    .all()
                    db.session.close() 
            elif self.document_type != '' and self.tax_id == '':
                query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.status,
                        view_document.document_status,
                        view_document.recipient_email
                ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
                ,(and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                .filter(view_document.recipient_email.contains(self.email))\
                .filter(view_document.documentType == self.document_type)\
                .all()
                db.session.close()
            # ##############################################
            db.session.close()
            list2 = []
            list2 = generateList_count_byEmail_v2(query_count_all)
            print(len(startTime_list))
            print('startTime_list',len(startTime_list))
            print('endTime_list',len(endTime_list))
            if len(query_count_all)==0:
                for x in range(count_2):
                    count_all = 0
                    count_active = 0
                    count_reject = 0
                    count_delete = 0
                    count_incative = 0
                    list_user2 = []
                    countStatus_Y = 0
                    countStatus_N =0
                    countStatus_R = 0
                    countStatus_W = 0 
                    countStatus_N = 0
                    countStatus_None = 0
                    list_sender_round = []
                    list_recp_from_round = []
                    timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                    timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                    tmp_json['list_recp_from'] = list_recp_from_round
                    tmp_json['all_documents'] = count_all
                    tmp_json['documents_active'] = count_active
                    tmp_json['documents_reject'] = count_reject
                    tmp_json['documents_delete'] = count_delete
                    tmp_json['documents_inactive'] = count_incative
                    tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                    tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                    tmp_json['timestamp_start'] = timestamp_start
                    tmp_json['timestamp_end'] = timestamp_end
                    tmp_json['doc_Y'] = countStatus_Y
                    tmp_json['doc_W'] = countStatus_W
                    tmp_json['doc_N'] = countStatus_N
                    tmp_json['doc_R'] = countStatus_R
                    tmp_json['doc_none'] = countStatus_None
                    list_json.append(tmp_json)
                    tmp_json = {}   
            else:
                count_all = 0
                count_active = 0
                count_reject = 0
                count_delete = 0
                count_incative = 0
                list_user2 = []
                list_sender_round = []
                countStatus_Y = 0
                countStatus_N =0
                countStatus_R = 0
                countStatus_W = 0 
                countStatus_N = 0
                countStatus_None = 0
                for x in range(count_2):
                    count_all = 0
                    count_active = 0
                    count_reject = 0
                    count_delete = 0
                    count_incative = 0
                    list_user2 = []
                    list_sender_round = []
                    countStatus_Y = 0
                    countStatus_N =0
                    countStatus_R = 0
                    countStatus_W = 0 
                    countStatus_N = 0
                    countStatus_None = 0
                    print('st',startTime_list[x])
                    for y in range(len(list2)):
                        timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                        timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                        user = list2[y]['sender_email']
                        doc_status = list2[y]['document_status']
                        sender = list2[y]['sender_email']
                        if int(list2[y]['update_time']) >= int(timestamp_start) and list2[y]['update_time'] <= int(timestamp_end)\
                        or int(list2[y]['send_time']) >= int(timestamp_start) and list2[y]['send_time'] <= int(timestamp_end):
                            list_sender_round.append(sender)
                            list_s.append(sender)
                            count_all = count_all + 1
                            if doc_status != None:
                                if doc_status == 'Y':
                                    countStatus_Y = countStatus_Y + 1
                                if doc_status == 'N':
                                    countStatus_N = countStatus_N + 1 
                                if doc_status == 'W':
                                    countStatus_W = countStatus_W + 1 
                                if doc_status == 'R':
                                    countStatus_R = countStatus_R + 1 
                            if doc_status == None:
                                countStatus_None = countStatus_None + 1
                            if user not in list_user2:
                                list_user2.append(user)
                            if user not in list_count_user:
                                list_count_user.append(user)
                        if int(list2[y]['update_time']) >= int(timestamp_start) and list2[y]['update_time'] <= int(timestamp_end) and list2[y]['status'] == 'ACTIVE'\
                        or int(list2[y]['send_time']) >= int(timestamp_start) and list2[y]['send_time'] <= int(timestamp_end) and list2[y]['status'] == 'ACTIVE':
                            count_active = count_active + 1
                        if int(list2[y]['update_time']) >= int(timestamp_start) and list2[y]['update_time'] <= int(timestamp_end) and list2[y]['status'] == 'REJECT'\
                        or int(list2[y]['send_time']) >= int(timestamp_start) and list2[y]['send_time'] <= int(timestamp_end) and list2[y]['status'] == 'REJECT':
                            count_reject = count_reject + 1
                        if int(list2[y]['update_time']) >= int(timestamp_start) and list2[y]['update_time'] <= int(timestamp_end) and list2[y]['status'] == 'DELETE'\
                        or int(list2[y]['send_time']) >= int(timestamp_start) and list2[y]['send_time'] <= int(timestamp_end) and list2[y]['status'] == 'DELETE':
                            count_delete = count_delete + 1
                        if int(list2[y]['update_time']) >= int(timestamp_start) and list2[y]['update_time'] <= int(timestamp_end) and list2[y]['status'] == 'INACTIVE'\
                        or int(list2[y]['send_time']) >= int(timestamp_start) and list2[y]['send_time'] <= int(timestamp_end) and list2[y]['status'] == 'INACTIVE':
                            count_incative = count_incative + 1
                    tmp_json['list_recp_from'] = func_list_recp(list_sender_round)
                    list_sender_round = []
                    tmp_json['all_documents'] = count_all
                    tmp_json['documents_active'] = count_active
                    tmp_json['documents_reject'] = count_reject
                    tmp_json['documents_delete'] = count_delete
                    tmp_json['documents_inactive'] = count_incative
                    tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                    tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                    tmp_json['timestamp_start'] = timestamp_start
                    tmp_json['timestamp_end'] = timestamp_end
                    tmp_json['doc_Y'] = countStatus_Y
                    tmp_json['doc_W'] = countStatus_W
                    tmp_json['doc_N'] = countStatus_N
                    tmp_json['doc_R'] = countStatus_R
                    tmp_json['doc_none'] = countStatus_None
                    list_json.append(tmp_json)
                    tmp_json = {}
                
                for y in range(len(list2)):
                    if list2[y]['status'] == 'ACTIVE':
                        count_Doc_of_hour_active += 1
                    elif list2[y]['status'] == 'REJECT':
                        count_Doc_of_hour_reject += 1
                    elif list2[y]['status'] == 'DELETE':
                        count_Doc_of_hour_delete += 1
                    elif list2[y]['status'] == 'INACTIVE':
                        count_Doc_of_hour_inactive += 1
                    if list2[y]['document_status'] != None:
                        if list2[y]['document_status'] == 'Y':
                            count_y += 1
                        if list2[y]['document_status'] == 'N':
                            count_n += 1
                        if list2[y]['document_status'] == 'W':
                            count_w += 1
                        if list2[y]['document_status'] == 'R':
                            count_r += 1
                    elif list2[y]['document_status'] == None:
                        count_none += 1
            tmp_json_1['documentsPastHour_sender'] = list_json
            tmp_json = {}
            list_json = []
            tmp_json['documents_all'] =  len(query_count_all)
            tmp_json['documents_all_active'] = count_Doc_of_hour_active
            tmp_json['documents_all_reject'] = count_Doc_of_hour_reject
            tmp_json['documents_all_delete'] = count_Doc_of_hour_delete
            tmp_json['documents_all_inactive'] = count_Doc_of_hour_inactive
            tmp_json['documents_all_n'] = count_n
            tmp_json['documents_all_w'] = count_w
            tmp_json['documents_all_r'] = count_r
            tmp_json['documents_all_y'] = count_y
            tmp_json['documents_all_none'] = count_none
            tmp_json['list_recp_from'] = func_list_recp(list_s)

            list_json.append(tmp_json)

            tmp_json_1['documentsAllHour_sender'] = list_json            
            db.session.close()
            return {'result':'OK','messageText':tmp_json_1}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            print(str(e))
            return {'result':'ER','messageText':str(e)}
    
    def selct_count_paperHour_sendermail(self, email):
        self.email = email
        list_json = []
        list_start_time = []
        countDoc_of_hour= 0
        count_Doc_of_hour_reject = 0
        count_Doc_of_hour_active = 0
        count_user = 0 
        tmp_json_1 = {}
        start_last = 0
        startTime_list = []
        endTime_list = []
        count_1 = 11
        count_2 = 12
        query_count_all = None
        list_user = []
        list_json_all = []
        list_count_user = []
        tmp_json = {}
        list_r = []
        count_n = 0
        count_w = 0
        count_y = 0
        count_r = 0
        count_none = 0
        now = datetime.datetime.now()
        hour = int((str(now).split(' ')[1]).split(':')[0])
        count = hour
        flashback = timedelta(hours = 1)
        end_time = now.replace(microsecond = 00)
        start_time =  (now-flashback).replace(hour=hour, minute=0, second=0, microsecond=00)
        startTime_list.append(start_time)
        endTime_list.append(end_time)
        for x in range(count):
            list_start_end = find_startTime_endTime_hour(start_time)
            start_time1 = list_start_end[0]
            end_time1 = list_start_end[1]
            list_user2 = []
            startTime_list.append(start_time1)
            endTime_list.append(end_time1)
            if x == count - 1:
                start_last = start_time1
            start_time = start_time1
        # เทส query
        query_count_all = view_document.query.with_entities(
            view_document.sender_email,
            view_document.send_time,
            view_document.status,
            view_document.document_status,
            view_document.recipient_email
        ).filter(view_document.send_time >= start_last).filter(view_document.send_time <= end_time).filter(view_document.sender_email == self.email).all()
        # เทส query 
        db.session.close()
        list2 = []
        list2 = generateList_count_byEmail(query_count_all)
        if len(query_count_all)==0:
            for x in range(count+1):
                count_all = 0
                count_active = 0
                count_reject = 0
                list_user2 = []
                countStatus_Y = 0
                countStatus_N =0
                countStatus_R = 0
                countStatus_W = 0 
                countStatus_N = 0
                countStatus_None = 0
                list_recp_round = []
                timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                tmp_json['list_send_to'] = list_recp_round
                tmp_json['all_documents'] = count_all
                tmp_json['documents_active'] = count_active
                tmp_json['documents_reject'] = count_reject
                tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                tmp_json['timestamp_start'] = timestamp_start
                tmp_json['timestamp_end'] = timestamp_end
                tmp_json['doc_Y'] = countStatus_Y
                tmp_json['doc_W'] = countStatus_W
                tmp_json['doc_N'] = countStatus_N
                tmp_json['doc_R'] = countStatus_R
                tmp_json['doc_none'] = countStatus_None
                tmp_json['list_send_to'] = list_recp_round
                countDoc_of_hour = countDoc_of_hour + count_all
                count_Doc_of_hour_active = count_Doc_of_hour_active + count_active
                count_Doc_of_hour_reject = count_Doc_of_hour_reject + count_reject
                list_json.append(tmp_json)
                tmp_json = {}   
        else:
            for x in range(count+1):
                count_all = 0
                count_active = 0
                count_reject = 0
                list_user2 = []
                list_recp_round = []
                countStatus_Y = 0
                countStatus_N =0
                countStatus_R = 0
                countStatus_W = 0 
                countStatus_N = 0
                countStatus_None = 0
                for y in range(len(list2)):
                    timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                    timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                    user = list2[y]['sender_email']
                    doc_status = list2[y]['document_status']
                    recp = list2[y]['recipient_email']
                    r_eval = eval(recp)
                    if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end):
                        for xi in range(len(r_eval)):
                                list_recp_round.append(r_eval[xi])
                                list_r.append(r_eval[xi])
                        count_all = count_all + 1
                        if doc_status != None:
                            if doc_status == 'Y':
                                countStatus_Y = countStatus_Y + 1
                            if doc_status == 'N':
                                countStatus_N = countStatus_N + 1 
                            if doc_status == 'W':
                                countStatus_W = countStatus_W + 1 
                            if doc_status == 'R':
                                countStatus_R = countStatus_R + 1 
                        if doc_status == None:
                            countStatus_None = countStatus_None + 1
                        if user not in list_user2:
                            list_user2.append(user)
                        if user not in list_count_user:
                            list_count_user.append(user)
                    if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end) and list2[y]['status'] == 'ACTIVE':
                        count_active = count_active + 1
                    if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end) and list2[y]['status'] == 'REJECT':
                        count_reject = count_reject + 1
                tmp_json['list_send_to'] = func_list_recp(list_recp_round)
                list_recp_round = []
                tmp_json['all_documents'] = count_all
                tmp_json['documents_active'] = count_active
                # tmp_json['count_user'] = len(list_user2)
                tmp_json['documents_reject'] = count_reject
                tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                tmp_json['timestamp_start'] = timestamp_start
                tmp_json['timestamp_end'] = timestamp_end
                tmp_json['doc_Y'] = countStatus_Y
                tmp_json['doc_W'] = countStatus_W
                tmp_json['doc_N'] = countStatus_N
                tmp_json['doc_R'] = countStatus_R
                tmp_json['doc_none'] = countStatus_None
                countDoc_of_hour = countDoc_of_hour + count_all
                count_Doc_of_hour_active = count_Doc_of_hour_active + count_active
                count_Doc_of_hour_reject = count_Doc_of_hour_reject + count_reject
                count_n = count_n + countStatus_N
                count_w = count_w + countStatus_W
                count_y = count_y +  countStatus_Y
                count_r = count_r + countStatus_R
                count_none = count_none + countStatus_None
                list_json.append(tmp_json)
                tmp_json = {}

        tmp_json_1['documentsPastHour_sender'] = list_json
        tmp_json = {}
        list_json = []
        tmp_json['documents_all'] = countDoc_of_hour
        tmp_json['documents_all_active'] = count_Doc_of_hour_active
        tmp_json['documents_all_reject'] = count_Doc_of_hour_reject
        tmp_json['documents_all_n'] = count_n
        tmp_json['documents_all_w'] = count_w
        tmp_json['documents_all_r'] = count_r
        tmp_json['documents_all_y'] = count_y
        tmp_json['documents_all_none'] = count_none
        tmp_json['list_send_to'] = func_list_recp(list_r)
        list_json.append(tmp_json)
       
        

        tmp_json_1['documentsAllHour_sender'] = list_json            
        db.session.close()
        return {'result':'OK','messageText':tmp_json_1}

    def select_count_paper_all_recp(self,email,document_type,tax_id):
        self.email = email
        self.document_type = document_type
        self.tax_id = tax_id
        list2 = []
        tmp_json_1 = {}
        count_Doc_of_all_active = 0
        count_Doc_of_all_reject = 0
        count_Doc_of_all_delete = 0
        count_Doc_of_all_inactive = 0
        count_n = 0
        count_w = 0
        count_r = 0
        count_y = 0
        count_none = 0
        if self.document_type == '' and self.tax_id == '':
            query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.send_time,
                    view_document.update_time,
                    view_document.status,
                    view_document.document_status,
                    view_document.recipient_email
            ).filter(view_document.recipient_email.contains(self.email))\
            .all()
            db.session.close()
        elif self.document_type != '' and self.tax_id != '':
            if self.tax_id != 'citizen': #ค้นหาแบบมี tax_id
                query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.send_time,
                    view_document.update_time,
                    view_document.status,
                    view_document.document_status,
                    view_document.recipient_email
                ).filter(view_document.recipient_email.contains(self.email))\
                .filter(view_document.documentType == self.document_type)\
                .filter(view_document.biz_info.contains(self.tax_id))\
                .all()
                db.session.close()
            else:  #ค้นหาไม่มีแบบมี tax_id
                query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.send_time,
                    view_document.update_time,
                    view_document.status,
                    view_document.document_status,
                    view_document.recipient_email
                ).filter(view_document.recipient_email.contains(self.email))\
                .filter(view_document.documentType == self.document_type)\
                .filter(or_(view_document.biz_info == None,view_document.biz_info == 'None'))\
                .all()
                db.session.close()
        elif self.document_type == '' and self.tax_id != '':
            if self.tax_id != 'citizen': #ค้นหาแบบมี tax_id
                query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.send_time,
                    view_document.update_time,
                    view_document.status,
                    view_document.document_status,
                    view_document.recipient_email
                ).filter(view_document.recipient_email.contains(self.email))\
                .filter(view_document.biz_info.contains(self.tax_id))\
                .all()
                db.session.close()
            else:
                query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.send_time,
                    view_document.update_time,
                    view_document.status,
                    view_document.document_status,
                    view_document.recipient_email
                ).filter(view_document.recipient_email.contains(self.email))\
                .filter(or_(view_document.biz_info == None,view_document.biz_info == 'None'))\
                .all()
                db.session.close()
        elif self.document_type != '' and self.tax_id == '':
            query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.send_time,
                    view_document.update_time,
                    view_document.status,
                    view_document.document_status,
                    view_document.recipient_email
            ).filter(view_document.recipient_email.contains(self.email))\
            .filter(view_document.documentType == self.document_type)\
            .all()
            db.session.close()
        db.session.close()
        list2 = generateList_count_byEmail_v2(query_count_all)
        for y in range(len(list2)):
            if list2[y]['status'] == 'ACTIVE':
                count_Doc_of_all_active += 1
            elif list2[y]['status'] == 'REJECT':
                count_Doc_of_all_reject += 1
            elif list2[y]['status'] == 'DELETE':
                count_Doc_of_all_delete += 1
            elif list2[y]['status'] == 'INACTIVE':
                count_Doc_of_all_inactive += 1
            if list2[y]['document_status'] != None:
                if list2[y]['document_status'] == 'Y':
                    count_y += 1
                if list2[y]['document_status'] == 'N':
                    count_n += 1
                if list2[y]['document_status'] == 'W':
                    count_w += 1
                if list2[y]['document_status'] == 'R':
                    count_r += 1
            elif list2[y]['document_status'] == None:
                count_none += 1
        tmp_json = {}
        list_json = []
        tmp_json['documents_all'] = len(query_count_all)
        tmp_json['documents_all_active'] = count_Doc_of_all_active
        tmp_json['documents_all_reject'] = count_Doc_of_all_reject
        tmp_json['documents_all_delete'] = count_Doc_of_all_delete
        tmp_json['documents_all_inactive'] = count_Doc_of_all_inactive
        tmp_json['documents_all_n'] = count_n
        tmp_json['documents_all_w'] = count_w
        tmp_json['documents_all_r'] = count_r
        tmp_json['documents_all_y'] = count_y
        tmp_json['documents_all_none'] = count_none
        list_json.append(tmp_json)
        tmp_json_1['documentsAll_recp'] = list_json
        return {'result':'OK','messageText':tmp_json_1}

    def select_count_paper_all_sender_v2(self,email,document_type,tax_id):
        self.email = email
        self.document_type = document_type
        self.tax_id = tax_id

    def select_count_paper_all_sender(self,email,document_type,tax_id):
        self.email = email
        self.document_type = document_type
        self.tax_id = tax_id
        list2 = []
        tmp_json_1 = {}
        count_Doc_of_all_active = 0
        count_Doc_of_all_reject = 0
        count_Doc_of_all_delete = 0
        count_Doc_of_all_inactive = 0
        count_n = 0
        count_w = 0
        count_r = 0
        count_y = 0
        count_none = 0
        if self.document_type == '' and self.tax_id == '':
            query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.send_time,
                    view_document.update_time,
                    view_document.status,
                    view_document.document_status,
                    view_document.recipient_email
            ).filter(view_document.sender_email == self.email)\
            .all()
            db.session.close()
        elif self.document_type != '' and self.tax_id != '':
            if self.tax_id != 'citizen': #ค้นหาแบบมี tax_id
                query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.send_time,
                    view_document.update_time,
                    view_document.status,
                    view_document.document_status,
                    view_document.recipient_email
                ).filter(view_document.sender_email == self.email)\
                .filter(view_document.documentType == self.document_type)\
                .filter(view_document.biz_info.contains(self.tax_id))\
                .all()
                db.session.close()
            else:  #ค้นหาไม่มีแบบมี tax_id
                query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.send_time,
                    view_document.update_time,
                    view_document.status,
                    view_document.document_status,
                    view_document.recipient_email
                ).filter(view_document.sender_email == self.email)\
                .filter(view_document.documentType == self.document_type)\
                .filter(or_(view_document.biz_info == None,view_document.biz_info == 'None'))\
                .all()
                db.session.close()
        elif self.document_type == '' and self.tax_id != '':
            if self.tax_id != 'citizen': #ค้นหาแบบมี tax_id
                query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.send_time,
                    view_document.update_time,
                    view_document.status,
                    view_document.document_status,
                    view_document.recipient_email
                ).filter(view_document.sender_email == self.email)\
                .filter(view_document.biz_info.contains(self.tax_id))\
                .all()
                db.session.close()
            else:
                query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.send_time,
                    view_document.update_time,
                    view_document.status,
                    view_document.document_status,
                    view_document.recipient_email
                ).filter(view_document.sender_email == self.email)\
                .filter(or_(view_document.biz_info == None,view_document.biz_info == 'None'))\
                .all()
                db.session.close()
        elif self.document_type != '' and self.tax_id == '':
            query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.send_time,
                    view_document.update_time,
                    view_document.status,
                    view_document.document_status,
                    view_document.recipient_email
            ).filter(view_document.sender_email == self.email)\
            .filter(view_document.documentType == self.document_type)\
            .all()
            db.session.close()
        db.session.close()
        list2 = generateList_count_byEmail_v2(query_count_all)
        for y in range(len(list2)):
            if list2[y]['status'] == 'ACTIVE':
                count_Doc_of_all_active += 1
            elif list2[y]['status'] == 'REJECT':
                count_Doc_of_all_reject += 1
            elif list2[y]['status'] == 'DELETE':
                count_Doc_of_all_delete += 1
            elif list2[y]['status'] == 'INACTIVE':
                count_Doc_of_all_inactive += 1
            if list2[y]['document_status'] != None:
                if list2[y]['document_status'] == 'Y':
                    count_y += 1
                if list2[y]['document_status'] == 'N':
                    count_n += 1
                if list2[y]['document_status'] == 'W':
                    count_w += 1
                if list2[y]['document_status'] == 'R':
                    count_r += 1
            elif list2[y]['document_status'] == None:
                count_none += 1
        tmp_json = {}
        list_json = []
        tmp_json['documents_all'] = len(query_count_all)
        tmp_json['documents_all_active'] = count_Doc_of_all_active
        tmp_json['documents_all_reject'] = count_Doc_of_all_reject
        tmp_json['documents_all_delete'] = count_Doc_of_all_delete
        tmp_json['documents_all_inactive'] = count_Doc_of_all_inactive
        tmp_json['documents_all_n'] = count_n
        tmp_json['documents_all_w'] = count_w
        tmp_json['documents_all_r'] = count_r
        tmp_json['documents_all_y'] = count_y
        tmp_json['documents_all_none'] = count_none
        list_json.append(tmp_json)
        tmp_json_1['documentsAll_sender'] = list_json
        return {'result':'OK','messageText':tmp_json_1}


    def select_countpaperWeek_senderemail(self, email):
        self.email = email
        list_json = []
        list_start_time = []
        countDoc_of_week = 0
        count_Doc_of_week_reject = 0
        count_Doc_of_week_active = 0
        count_user = 0
        list_count_user = []
        tmp_json_1 = {}
        start_last = 0
        startTime_list = []
        endTime_list = []
        count_1 = 3
        count_2 = 4
        count_n = 0
        count_w = 0
        count_y = 0
        count_r = 0
        count_none = 0
        query_count_all = None
        list2 = []
        list_sender = []
        list_r = []
        try:
            now = datetime.datetime.now()
            day = (str(now).split('-')[2]).split(' ')[0]
            year = str(now).split('-')[0]
            month = str(now).split('-')[1]
            day_of_week = calendar.weekday(int(year),int(month),int(day))
            flashback = timedelta(days=day_of_week)
            end_time = (now).replace(hour=23, minute=59, second=59, microsecond=00)
            start_time =  (now-flashback).replace(hour=0, minute=0, second=0, microsecond=0)
            startTime_list.append(start_time)
            endTime_list.append(end_time)
            list_user = []
            tmp_json = {}
            for x in range(count_1):
                list_start_end = find_startTime_endTime_week(start_time)
                start_time1 = list_start_end[0]
                end_time1 = list_start_end[1]
                list_user2 = []
                startTime_list.append(start_time1)
                endTime_list.append(end_time1)
                if x == count_1 - 1:
                    start_last = start_time1
                start_time = start_time1
            # query
            query_count_all = view_document.query.with_entities(
                view_document.sender_email,
                view_document.send_time,
                view_document.status,
                view_document.document_status,
                view_document.recipient_email
            ).filter(view_document.send_time >= start_last).filter(view_document.send_time <= end_time).filter(view_document.sender_email == self.email).all()
            db.session.close()
            # query 
            list2 = generateList_count_byEmail(query_count_all)
            # เช็คเอกสารทั้งหมดตามเวลา
            if len(query_count_all) == 0 :
                for x in range(count_2):
                    count_all = 0
                    count_active = 0
                    count_reject = 0
                    countStatus_Y = 0
                    countStatus_N =0
                    countStatus_R = 0
                    countStatus_W = 0 
                    countStatus_N = 0
                    countStatus_None = 0
                    list_user2 = []
                    list_recp_round = []
                    timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                    timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                    tmp_json['list_send_to'] = list_recp_round
                    tmp_json['all_documents'] = count_all
                    tmp_json['documents_active'] = count_active
                    # tmp_json['count_user'] = len(list_user2)
                    tmp_json['documents_reject'] = count_reject
                    tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                    tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                    tmp_json['timestamp_start'] = timestamp_start
                    tmp_json['timestamp_end'] = timestamp_end
                    tmp_json['doc_Y'] = countStatus_Y
                    tmp_json['doc_W'] = countStatus_W
                    tmp_json['doc_N'] = countStatus_N
                    tmp_json['doc_R'] = countStatus_R
                    tmp_json['doc_none'] = countStatus_None
                    countDoc_of_week = countDoc_of_week + count_all
                    count_Doc_of_week_active = count_Doc_of_week_active + count_active
                    count_Doc_of_week_reject = count_Doc_of_week_reject + count_reject
                    list_json.append(tmp_json)
                    tmp_json = {}
            else:
                for x in range(count_2):
                    count_all = 0
                    count_active = 0
                    count_reject = 0
                    list_user2 = []
                    list_recp_round = []
                    countStatus_Y = 0
                    countStatus_N =0
                    countStatus_R = 0
                    countStatus_W = 0 
                    countStatus_N = 0
                    countStatus_None = 0
                    for y in range(len(list2)):
                        timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                        timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                        user = list2[y]['sender_email']
                        doc_status = list2[y]['document_status']
                        recp = list2[y]['recipient_email']
                        r_eval = eval(recp)
                        if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end):
                            for xi in range(len(r_eval)):
                                list_recp_round.append(r_eval[xi])
                                list_r.append(r_eval[xi])
                            count_all = count_all + 1
                            if doc_status != None:
                                if doc_status == 'Y':
                                    countStatus_Y = countStatus_Y + 1
                                if doc_status == 'N':
                                    countStatus_N = countStatus_N + 1 
                                if doc_status == 'W':
                                    countStatus_W = countStatus_W + 1 
                                if doc_status == 'R':
                                    countStatus_R = countStatus_R + 1 
                            elif doc_status == None:
                                countStatus_None = countStatus_None + 1
                        if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end) and list2[y]['status'] == 'ACTIVE':
                            count_active = count_active + 1
                        if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end) and list2[y]['status'] == 'REJECT':
                            count_reject = count_reject + 1
                    tmp_json['list_send_to'] = func_list_recp(list_recp_round)
                    list_recp_round = []
                    tmp_json['all_documents'] = count_all
                    tmp_json['documents_active'] = count_active
                    tmp_json['documents_reject'] = count_reject
                    tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                    tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                    tmp_json['timestamp_start'] = timestamp_start
                    tmp_json['timestamp_end'] = timestamp_end
                    tmp_json['doc_Y'] = countStatus_Y
                    tmp_json['doc_W'] = countStatus_W
                    tmp_json['doc_N'] = countStatus_N
                    tmp_json['doc_R'] = countStatus_R
                    tmp_json['doc_none'] = countStatus_None
                    countDoc_of_week = countDoc_of_week + count_all
                    count_Doc_of_week_active = count_Doc_of_week_active + count_active
                    count_Doc_of_week_reject = count_Doc_of_week_reject + count_reject
                    count_n = count_n + countStatus_N
                    count_w = count_w + countStatus_W
                    count_y = count_y +  countStatus_Y
                    count_r = count_r + countStatus_R
                    count_none = count_none + countStatus_None
                    list_json.append(tmp_json)
                    tmp_json = {}
            # เช็คเอกสารทั้งหมดตามเวลา
            # list_recp2 = func_list_recp(list_r)
            tmp_json_1['documentsPastWeek_sender'] = list_json
            tmp_json = {}
            list_json = []
            tmp_json['documents_all'] = countDoc_of_week
            tmp_json['documents_all_active'] = count_Doc_of_week_active
            tmp_json['documents_all_reject'] = count_Doc_of_week_reject
            tmp_json['documents_all_n'] = count_n
            tmp_json['documents_all_w'] = count_w
            tmp_json['documents_all_r'] = count_r
            tmp_json['documents_all_y'] = count_y
            tmp_json['documents_all_none'] = count_none
            tmp_json['list_send_to'] = func_list_recp(list_r)
            list_json.append(tmp_json)
            tmp_json_1['documentsAllWeek_sender'] = list_json
           
            return {'result':'OK','messageText':tmp_json_1}

        except Exception as e:
            print(e)
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'notfound data' + str(e)}

    def select_countpaperWeek_recpemail(self, email):
        self.email = email
        list_json = []
        list_start_time = []
        countDoc_of_week = 0
        count_Doc_of_week_reject = 0
        count_Doc_of_week_active = 0
        count_user = 0
        list_count_user = []
        tmp_json_1 = {}
        start_last = 0
        startTime_list = []
        endTime_list = []
        count_1 = 3
        count_2 = 4
        count_n = 0
        count_w = 0
        count_y = 0
        count_r = 0
        count_none = 0
        query_count_all = None
        list2 = []
        list_s = []
        try:
            now = datetime.datetime.now()
            day = (str(now).split('-')[2]).split(' ')[0]
            year = str(now).split('-')[0]
            month = str(now).split('-')[1]
            day_of_week = calendar.weekday(int(year),int(month),int(day))
            flashback = timedelta(days=day_of_week)
            end_time = (now).replace(hour=23, minute=59, second=59, microsecond=00)
            start_time =  (now-flashback).replace(hour=0, minute=0, second=0, microsecond=0)
            startTime_list.append(start_time)
            endTime_list.append(end_time)
            list_user = []
            tmp_json = {}
            for x in range(count_1):
                list_start_end = find_startTime_endTime_week(start_time)
                start_time1 = list_start_end[0]
                end_time1 = list_start_end[1]
                list_user2 = []
                startTime_list.append(start_time1)
                endTime_list.append(end_time1)
                if x == count_1 - 1:
                    start_last = start_time1
                start_time = start_time1
            # query
            query_count_all = view_document.query.with_entities(
                view_document.sender_email,
                view_document.send_time,
                view_document.status,
                view_document.document_status,
                view_document.recipient_email
            ).filter(view_document.send_time >= start_last).filter(view_document.send_time <= end_time).filter(view_document.recipient_email.contains(self.email)).all()
            db.session.close()
            # query 
            list2 = generateList_count_byEmail(query_count_all)
            # เช็คเอกสารทั้งหมดตามเวลา
            if len(query_count_all) == 0 :
                for x in range(count_2):
                    count_all = 0
                    count_active = 0
                    count_reject = 0
                    list_user2 = []
                    countStatus_Y = 0
                    countStatus_N =0
                    countStatus_R = 0
                    countStatus_W = 0 
                    countStatus_N = 0
                    countStatus_None = 0
                    list_sender_round = []
                    timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                    timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                    tmp_json['list_recp_from'] = list_sender_round
                    tmp_json['all_documents'] = count_all
                    tmp_json['documents_active'] = count_active
                    tmp_json['documents_reject'] = count_reject
                    tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                    tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                    tmp_json['timestamp_start'] = timestamp_start
                    tmp_json['timestamp_end'] = timestamp_end
                    tmp_json['doc_Y'] = countStatus_Y
                    tmp_json['doc_W'] = countStatus_W
                    tmp_json['doc_N'] = countStatus_N
                    tmp_json['doc_R'] = countStatus_R
                    tmp_json['doc_none'] = countStatus_None
                    countDoc_of_week = countDoc_of_week + count_all
                    count_Doc_of_week_active = count_Doc_of_week_active + count_active
                    count_Doc_of_week_reject = count_Doc_of_week_reject + count_reject
                    list_json.append(tmp_json)
                    tmp_json = {}
            else:
                for x in range(count_2):
                    count_all = 0
                    count_active = 0
                    count_reject = 0
                    list_user2 = []
                    list_sender_round = []
                    # list_recp_round = []
                    countStatus_Y = 0
                    countStatus_N =0
                    countStatus_R = 0
                    countStatus_W = 0 
                    countStatus_N = 0
                    countStatus_None = 0
                    for y in range(len(list2)):
                        timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                        timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                        user = list2[y]['sender_email']
                        doc_status = list2[y]['document_status']
                        sender = list2[y]['sender_email']
                        if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end):
                            list_sender_round.append(sender)
                            list_s.append(sender)
                            count_all = count_all + 1
                            if doc_status != None:
                                if doc_status == 'Y':
                                    countStatus_Y = countStatus_Y + 1
                                if doc_status == 'N':
                                    countStatus_N = countStatus_N + 1 
                                if doc_status == 'W':
                                    countStatus_W = countStatus_W + 1 
                                if doc_status == 'R':
                                    countStatus_R = countStatus_R + 1 
                            elif doc_status == None:
                                countStatus_None = countStatus_None + 1
                        if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end) and list2[y]['status'] == 'ACTIVE':
                            count_active = count_active + 1
                        if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end) and list2[y]['status'] == 'REJECT':
                            count_reject = count_reject + 1
                    tmp_json['list_recp_from'] = func_list_recp(list_sender_round)
                    list_sender_round = []
                    tmp_json['all_documents'] = count_all
                    tmp_json['documents_active'] = count_active
                    tmp_json['documents_reject'] = count_reject
                    tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                    tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                    tmp_json['timestamp_start'] = timestamp_start
                    tmp_json['timestamp_end'] = timestamp_end
                    tmp_json['doc_Y'] = countStatus_Y
                    tmp_json['doc_W'] = countStatus_W
                    tmp_json['doc_N'] = countStatus_N
                    tmp_json['doc_R'] = countStatus_R
                    tmp_json['doc_none'] = countStatus_None
                    countDoc_of_week = countDoc_of_week + count_all
                    count_Doc_of_week_active = count_Doc_of_week_active + count_active
                    count_Doc_of_week_reject = count_Doc_of_week_reject + count_reject
                    count_n = count_n + countStatus_N
                    count_w = count_w + countStatus_W
                    count_y = count_y +  countStatus_Y
                    count_r = count_r + countStatus_R
                    count_none = count_none + countStatus_None
                 
                    list_json.append(tmp_json)
                    tmp_json = {}
            # เช็คเอกสารทั้งหมดตามเวลา
            
            tmp_json_1['documentsPastWeek_sender'] = list_json

            tmp_json = {}
            list_json = []
            tmp_json['documents_all'] = countDoc_of_week
            tmp_json['documents_all_active'] = count_Doc_of_week_active
            tmp_json['documents_all_reject'] = count_Doc_of_week_reject
            tmp_json['documents_all_n'] = count_n
            tmp_json['documents_all_w'] = count_w
            tmp_json['documents_all_r'] = count_r
            tmp_json['documents_all_y'] = count_y
            tmp_json['documents_all_none'] = count_none
            tmp_json['list_recp_from'] = func_list_recp(list_s)
            list_json.append(tmp_json)

            tmp_json_1['documentsAllWeek_sender'] = list_json
           
           
            return {'result':'OK','messageText':tmp_json_1}

        except Exception as e:
            print(e)
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'notfound data' + str(e)}

    def selct_count_paperDay_senderemail(self, email):
        self.email = email
        list_json = []
        list_start_time = []
        list_count_user = []
        countDoc_of_day = 0
        count_Doc_of_day_reject = 0
        count_Doc_of_day_active = 0
        tmp_json_1 = {}
        start_last = 0
        startTime_list = []
        endTime_list = []
        count_1 = 29
        count_2 = 30
        count_n = 0
        count_w = 0
        count_y = 0
        count_r = 0
        count_none = 0
        list_user = []
        tmp_json = {}
        list_r = []
        now = datetime.datetime.now()
        end_time = now.replace(hour=23, minute=59, second=59, microsecond=00)
        start_time = now.replace(hour=0, minute=0, second=0, microsecond=0)
        startTime_list.append(start_time)
        endTime_list.append(end_time)
        for x in range(count_1):
            list_start_end = find_startTime_endTime_day(start_time)
            start_time1 = list_start_end[0]
            end_time1 = list_start_end[1]
            startTime_list.append(start_time1)
            endTime_list.append(end_time1)
            if x == count_1 - 1:
                start_last = start_time1
            start_time = start_time1
        # เทส query
        query_count_all = view_document.query.with_entities(
            view_document.sender_email,
            view_document.send_time,
            view_document.status,
            view_document.document_status,
            view_document.recipient_email
        ).filter(view_document.send_time >= start_last).filter(view_document.send_time <= end_time).filter(view_document.sender_email == self.email).all()
        # เทส query 
        db.session.close()
        list2 = generateList_count_byEmail(query_count_all)
        if len(query_count_all) == 0 :
            count_all = 0
            count_active = 0
            count_reject = 0
            list_user2 = []
            list_recp_round = []
            countStatus_Y = 0
            countStatus_N =0
            countStatus_R = 0
            countStatus_W = 0 
            countStatus_N = 0
            countStatus_None = 0
            for x in range(count_2):
                count_all = 0
                count_active = 0
                count_reject = 0
                list_user2 = []
                timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                tmp_json['list_send_to'] = list_recp_round
                tmp_json['all_documents'] = count_all
                tmp_json['documents_active'] = count_active
                tmp_json['documents_reject'] = count_reject
                tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                tmp_json['timestamp_start'] = timestamp_start
                tmp_json['timestamp_end'] = timestamp_end
                tmp_json['doc_Y'] = countStatus_Y
                tmp_json['doc_W'] = countStatus_W
                tmp_json['doc_N'] = countStatus_N
                tmp_json['doc_R'] = countStatus_R
                tmp_json['doc_none'] = countStatus_None
                countDoc_of_day = countDoc_of_day + count_all
                count_Doc_of_day_active = count_Doc_of_day_active + count_active
                count_Doc_of_day_reject = count_Doc_of_day_reject + count_reject
                list_json.append(tmp_json)
                tmp_json = {}
        else:
            for x in range(count_2):
                count_all = 0
                count_active = 0
                count_reject = 0
                list_user2 = []
                list_recp_round = []
                countStatus_Y = 0
                countStatus_N =0
                countStatus_R = 0
                countStatus_W = 0 
                countStatus_N = 0
                countStatus_None = 0
                # print('len',len(list2))
                for y in range(len(list2)):
                    timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                    timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                    user = list2[y]['sender_email']
                    doc_status = list2[y]['document_status']
                    recp = list2[y]['recipient_email']
                    r_eval = eval(recp)
                    # print('lene',len(r_eval))
                    if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end):
                        for xi in range(len(r_eval)):
                            list_r.append(r_eval[xi])
                            list_recp_round.append(r_eval[xi])
                        count_all = count_all + 1
                        if doc_status != None:
                            if doc_status == 'Y':
                                countStatus_Y = countStatus_Y + 1
                            if doc_status == 'N':
                                countStatus_N = countStatus_N + 1 
                            if doc_status == 'W':
                                countStatus_W = countStatus_W + 1 
                            if doc_status == 'R':
                                countStatus_R = countStatus_R + 1 
                        if doc_status == None:
                            countStatus_None = countStatus_None + 1
                        if user not in list_user2:
                            list_user2.append(user)
                        if user not in list_count_user:
                            list_count_user.append(user)
                    if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end) and list2[y]['status'] == 'ACTIVE':
                        count_active = count_active + 1
                        # print('count_active',count_active)
                    if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end) and list2[y]['status'] == 'REJECT':
                        count_reject = count_reject + 1
                        # print('count_reject',count_reject)
                tmp_json['list_send_to'] = func_list_recp(list_recp_round)
                list_recp_round = []
                tmp_json['all_documents'] = count_all
                tmp_json['documents_active'] = count_active
                tmp_json['documents_reject'] = count_reject
                tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                tmp_json['timestamp_start'] = timestamp_start
                tmp_json['timestamp_end'] = timestamp_end
                tmp_json['doc_Y'] = countStatus_Y
                tmp_json['doc_W'] = countStatus_W
                tmp_json['doc_N'] = countStatus_N
                tmp_json['doc_R'] = countStatus_R
                tmp_json['doc_none'] = countStatus_None
                countDoc_of_day = len(list2)
                count_Doc_of_day_active = count_Doc_of_day_active + count_active
                count_Doc_of_day_reject = count_Doc_of_day_reject + count_reject
                count_n = count_n + countStatus_N
                count_w = count_w + countStatus_W
                count_y = count_y +  countStatus_Y
                count_r = count_r + countStatus_R
                count_none = count_none + countStatus_None
                list_json.append(tmp_json)
                tmp_json = {}
        list_recp2 = func_list_recp(list_r)
        tmp_json_1['documentsPastDay_sender'] = list_json
        tmp_json = {}
        list_json = []
        tmp_json['documents_all'] = countDoc_of_day
        tmp_json['documents_all_active'] = count_Doc_of_day_active
        tmp_json['documents_all_reject'] = count_Doc_of_day_reject
        tmp_json['documents_all_n'] = count_n
        tmp_json['documents_all_w'] = count_w
        tmp_json['documents_all_r'] = count_r
        tmp_json['documents_all_y'] = count_y
        tmp_json['documents_all_none'] = count_none
        tmp_json['list_send_to'] = func_list_recp(list_r)
        count_n = count_n + countStatus_N
        count_w = count_w + countStatus_W
        count_y = count_y +  countStatus_Y
        count_r = count_r + countStatus_R
        count_none = count_none + countStatus_None
        list_json.append(tmp_json)

        tmp_json_1['documentsAllDay_sender'] = list_json
        db.session.close()
        return {'result':'OK','messageText':tmp_json_1} 

    def selct_count_paperDay_recpemail(self, email):
        self.email = email
        list_json = []
        list_start_time = []
        list_count_user = []
        countDoc_of_day = 0
        count_Doc_of_day_reject = 0
        count_Doc_of_day_active = 0
        tmp_json_1 = {}
        start_last = 0
        startTime_list = []
        endTime_list = []
        count_1 = 29
        count_2 = 30
        count_n = 0
        count_w = 0
        count_y = 0
        count_r = 0
        count_none = 0
        list_user = []
        tmp_json = {}
        list_s = []
        now = datetime.datetime.now()
        end_time = now.replace(hour=23, minute=59, second=59, microsecond=00)
        start_time = now.replace(hour=0, minute=0, second=0, microsecond=0)
        startTime_list.append(start_time)
        endTime_list.append(end_time)
        for x in range(count_1):
            list_start_end = find_startTime_endTime_day(start_time)
            start_time1 = list_start_end[0]
            end_time1 = list_start_end[1]
            startTime_list.append(start_time1)
            endTime_list.append(end_time1)
            if x == count_1 - 1:
                start_last = start_time1
            start_time = start_time1
        # เทส query
        query_count_all = view_document.query.with_entities(
            view_document.sender_email,
            view_document.send_time,
            view_document.status,
            view_document.document_status,
            view_document.recipient_email
        ).filter(view_document.send_time >= start_last).filter(view_document.send_time <= end_time).filter(view_document.recipient_email.contains(self.email)).all()
        # เทส query 
        db.session.close()
        list2 = generateList_count_byEmail(query_count_all)
        if len(query_count_all) == 0 :
            count_all = 0
            count_active = 0
            count_reject = 0
            list_user2 = []
            countStatus_Y = 0
            countStatus_N =0
            countStatus_R = 0
            countStatus_W = 0 
            countStatus_N = 0
            countStatus_None = 0
            for x in range(count_2):
                count_all = 0
                count_active = 0
                count_reject = 0
                list_user2 = []
                list_sender_round = []
                timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                tmp_json['list_recp_from'] = list_sender_round
                tmp_json['all_documents'] = count_all
                tmp_json['documents_active'] = count_active
                tmp_json['documents_reject'] = count_reject
                tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                tmp_json['timestamp_start'] = timestamp_start
                tmp_json['timestamp_end'] = timestamp_end
                tmp_json['doc_Y'] = countStatus_Y
                tmp_json['doc_W'] = countStatus_W
                tmp_json['doc_N'] = countStatus_N
                tmp_json['doc_R'] = countStatus_R
                tmp_json['doc_none'] = countStatus_None
                countDoc_of_day = countDoc_of_day + count_all
                count_Doc_of_day_active = count_Doc_of_day_active + count_active
                count_Doc_of_day_reject = count_Doc_of_day_reject + count_reject
                list_json.append(tmp_json)
                tmp_json = {}
        else:
            for x in range(count_2):
                count_all = 0
                count_active = 0
                count_reject = 0
                list_user2 = []
                list_sender_round = []
                countStatus_Y = 0
                countStatus_N =0
                countStatus_R = 0
                countStatus_W = 0 
                countStatus_N = 0
                countStatus_None = 0
                for y in range(len(list2)):
                    timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                    timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                    user = list2[y]['sender_email']
                    doc_status = list2[y]['document_status']
                    sender = list2[y]['sender_email']
                    if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end):
                        list_sender_round.append(sender)
                        list_s.append(sender)
                        count_all = count_all + 1
                        if doc_status != None:
                            if doc_status == 'Y':
                                countStatus_Y = countStatus_Y + 1
                            if doc_status == 'N':
                                countStatus_N = countStatus_N + 1 
                            if doc_status == 'W':
                                countStatus_W = countStatus_W + 1 
                            if doc_status == 'R':
                                countStatus_R = countStatus_R + 1 
                        if doc_status == None:
                            countStatus_None = countStatus_None + 1
                        if user not in list_user2:
                            list_user2.append(user)
                        if user not in list_count_user:
                            list_count_user.append(user)
                    if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end) and list2[y]['status'] == 'ACTIVE':
                        count_active = count_active + 1
                        # print('count_active',count_active)
                    if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end) and list2[y]['status'] == 'REJECT':
                        count_reject = count_reject + 1
                        # print('count_reject',count_reject)
                tmp_json['list_recp_from'] = func_list_recp(list_sender_round)
                list_sender_round = []
                tmp_json['all_documents'] = count_all
                tmp_json['documents_active'] = count_active
                tmp_json['documents_reject'] = count_reject
                tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                tmp_json['timestamp_start'] = timestamp_start
                tmp_json['timestamp_end'] = timestamp_end
                tmp_json['doc_Y'] = countStatus_Y
                tmp_json['doc_W'] = countStatus_W
                tmp_json['doc_N'] = countStatus_N
                tmp_json['doc_R'] = countStatus_R
                tmp_json['doc_none'] = countStatus_None
                countDoc_of_day = len(list2)
                count_Doc_of_day_active = count_Doc_of_day_active + count_active
                count_Doc_of_day_reject = count_Doc_of_day_reject + count_reject
                count_n = count_n + countStatus_N
                count_w = count_w + countStatus_W
                count_y = count_y +  countStatus_Y
                count_r = count_r + countStatus_R
                count_none = count_none + countStatus_None
                list_json.append(tmp_json)
                tmp_json = {}
            
        tmp_json_1['documentsPastDay_sender'] = list_json
        tmp_json = {}
        list_json = []
        tmp_json['documents_all'] = countDoc_of_day
        tmp_json['documents_all_active'] = count_Doc_of_day_active
        tmp_json['documents_all_reject'] = count_Doc_of_day_reject
        tmp_json['documents_all_n'] = count_n
        tmp_json['documents_all_w'] = count_w
        tmp_json['documents_all_r'] = count_r
        tmp_json['documents_all_y'] = count_y
        tmp_json['documents_all_none'] = count_none
        tmp_json['list_recp_from'] = func_list_recp(list_s)
        list_json.append(tmp_json)

        tmp_json_1['documentsAllDay_sender'] = list_json
        db.session.close()
        return {'result':'OK','messageText':tmp_json_1} 

    def selct_count_paperHour_sendermail(self, email):
        self.email = email
        list_json = []
        list_start_time = []
        countDoc_of_hour= 0
        count_Doc_of_hour_reject = 0
        count_Doc_of_hour_active = 0
        count_user = 0 
        tmp_json_1 = {}
        start_last = 0
        startTime_list = []
        endTime_list = []
        count_1 = 11
        count_2 = 12
        query_count_all = None
        list_user = []
        list_json_all = []
        list_count_user = []
        tmp_json = {}
        list_r = []
        count_n = 0
        count_w = 0
        count_y = 0
        count_r = 0
        count_none = 0
        now = datetime.datetime.now()
        hour = int((str(now).split(' ')[1]).split(':')[0])
        count = hour
        flashback = timedelta(hours = 1)
        end_time = now.replace(microsecond = 00)
        start_time =  (now-flashback).replace(hour=hour, minute=0, second=0, microsecond=00)
        startTime_list.append(start_time)
        endTime_list.append(end_time)
        for x in range(count):
            list_start_end = find_startTime_endTime_hour(start_time)
            start_time1 = list_start_end[0]
            end_time1 = list_start_end[1]
            list_user2 = []
            startTime_list.append(start_time1)
            endTime_list.append(end_time1)
            if x == count - 1:
                start_last = start_time1
            start_time = start_time1
        # เทส query
        query_count_all = view_document.query.with_entities(
            view_document.sender_email,
            view_document.send_time,
            view_document.status,
            view_document.document_status,
            view_document.recipient_email
        ).filter(view_document.send_time >= start_last).filter(view_document.send_time <= end_time).filter(view_document.sender_email == self.email).all()
        # เทส query 
        db.session.close()
        list2 = []
        list2 = generateList_count_byEmail(query_count_all)
        if len(query_count_all)==0:
            for x in range(count+1):
                count_all = 0
                count_active = 0
                count_reject = 0
                list_user2 = []
                countStatus_Y = 0
                countStatus_N =0
                countStatus_R = 0
                countStatus_W = 0 
                countStatus_N = 0
                countStatus_None = 0
                list_recp_round = []
                timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                tmp_json['list_send_to'] = list_recp_round
                tmp_json['all_documents'] = count_all
                tmp_json['documents_active'] = count_active
                tmp_json['documents_reject'] = count_reject
                tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                tmp_json['timestamp_start'] = timestamp_start
                tmp_json['timestamp_end'] = timestamp_end
                tmp_json['doc_Y'] = countStatus_Y
                tmp_json['doc_W'] = countStatus_W
                tmp_json['doc_N'] = countStatus_N
                tmp_json['doc_R'] = countStatus_R
                tmp_json['doc_none'] = countStatus_None
                tmp_json['list_send_to'] = list_recp_round
                countDoc_of_hour = countDoc_of_hour + count_all
                count_Doc_of_hour_active = count_Doc_of_hour_active + count_active
                count_Doc_of_hour_reject = count_Doc_of_hour_reject + count_reject
                list_json.append(tmp_json)
                tmp_json = {}   
        else:
            for x in range(count+1):
                count_all = 0
                count_active = 0
                count_reject = 0
                list_user2 = []
                list_recp_round = []
                countStatus_Y = 0
                countStatus_N =0
                countStatus_R = 0
                countStatus_W = 0 
                countStatus_N = 0
                countStatus_None = 0
                for y in range(len(list2)):
                    timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                    timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                    user = list2[y]['sender_email']
                    doc_status = list2[y]['document_status']
                    recp = list2[y]['recipient_email']
                    r_eval = eval(recp)
                    if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end):
                        for xi in range(len(r_eval)):
                                list_recp_round.append(r_eval[xi])
                                list_r.append(r_eval[xi])
                        count_all = count_all + 1
                        if doc_status != None:
                            if doc_status == 'Y':
                                countStatus_Y = countStatus_Y + 1
                            if doc_status == 'N':
                                countStatus_N = countStatus_N + 1 
                            if doc_status == 'W':
                                countStatus_W = countStatus_W + 1 
                            if doc_status == 'R':
                                countStatus_R = countStatus_R + 1 
                        if doc_status == None:
                            countStatus_None = countStatus_None + 1
                        if user not in list_user2:
                            list_user2.append(user)
                        if user not in list_count_user:
                            list_count_user.append(user)
                    if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end) and list2[y]['status'] == 'ACTIVE':
                        count_active = count_active + 1
                    if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end) and list2[y]['status'] == 'REJECT':
                        count_reject = count_reject + 1
                tmp_json['list_send_to'] = func_list_recp(list_recp_round)
                list_recp_round = []
                tmp_json['all_documents'] = count_all
                tmp_json['documents_active'] = count_active
                # tmp_json['count_user'] = len(list_user2)
                tmp_json['documents_reject'] = count_reject
                tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                tmp_json['timestamp_start'] = timestamp_start
                tmp_json['timestamp_end'] = timestamp_end
                tmp_json['doc_Y'] = countStatus_Y
                tmp_json['doc_W'] = countStatus_W
                tmp_json['doc_N'] = countStatus_N
                tmp_json['doc_R'] = countStatus_R
                tmp_json['doc_none'] = countStatus_None
                countDoc_of_hour = countDoc_of_hour + count_all
                count_Doc_of_hour_active = count_Doc_of_hour_active + count_active
                count_Doc_of_hour_reject = count_Doc_of_hour_reject + count_reject
                count_n = count_n + countStatus_N
                count_w = count_w + countStatus_W
                count_y = count_y +  countStatus_Y
                count_r = count_r + countStatus_R
                count_none = count_none + countStatus_None
                list_json.append(tmp_json)
                tmp_json = {}

        tmp_json_1['documentsPastHour_sender'] = list_json
        tmp_json = {}
        list_json = []
        tmp_json['documents_all'] = countDoc_of_hour
        tmp_json['documents_all_active'] = count_Doc_of_hour_active
        tmp_json['documents_all_reject'] = count_Doc_of_hour_reject
        tmp_json['documents_all_n'] = count_n
        tmp_json['documents_all_w'] = count_w
        tmp_json['documents_all_r'] = count_r
        tmp_json['documents_all_y'] = count_y
        tmp_json['documents_all_none'] = count_none
        tmp_json['list_send_to'] = func_list_recp(list_r)
        list_json.append(tmp_json)
       
        

        tmp_json_1['documentsAllHour_sender'] = list_json            
        db.session.close()
        return {'result':'OK','messageText':tmp_json_1}

    def selct_count_paperHour_recpmail(self, email):
        self.email = email
        list_json = []
        list_start_time = []
        countDoc_of_hour= 0
        count_Doc_of_hour_reject = 0
        count_Doc_of_hour_active = 0
        count_user = 0 
        tmp_json_1 = {}
        start_last = 0
        startTime_list = []
        endTime_list = []
        count_1 = 11
        count_2 = 12
        count_n = 0
        count_w = 0
        count_y = 0
        count_r = 0
        count_none = 0
        query_count_all = None
        list_user = []
        list_json_all = []
        list_count_user = []
        tmp_json = {}
        list_s = []
        now = datetime.datetime.now()
        hour = int((str(now).split(' ')[1]).split(':')[0])
        count = hour
        flashback = timedelta(hours = 1)
        end_time = now.replace(microsecond = 00)
        start_time =  (now-flashback).replace(hour=hour, minute=0, second=0, microsecond=00)
        startTime_list.append(start_time)
        endTime_list.append(end_time)
        print('')
        for x in range(count):
            list_start_end = find_startTime_endTime_hour(start_time)
            start_time1 = list_start_end[0]
            end_time1 = list_start_end[1]
            list_user2 = []
            startTime_list.append(start_time1)
            endTime_list.append(end_time1)
            if x == count - 1:
                start_last = start_time1
            start_time = start_time1
        # เทส query
        query_count_all = view_document.query.with_entities(
            view_document.sender_email,
            view_document.send_time,
            view_document.status,
            view_document.document_status,
            view_document.recipient_email
        ).filter(view_document.send_time >= start_last).filter(view_document.send_time <= end_time).filter(view_document.recipient_email.contains(self.email)).all()
        # เทส query 
        db.session.close()
        list2 = []
        list2 = generateList_count_byEmail(query_count_all)
        if len(query_count_all)==0:
            for x in range(count+1):
                count_all = 0
                count_active = 0
                count_reject = 0
                list_user2 = []
                countStatus_Y = 0
                countStatus_N =0
                countStatus_R = 0
                countStatus_W = 0 
                countStatus_N = 0
                countStatus_None = 0
                list_sender_round = []
                list_recp_from_round = []
                timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                tmp_json['list_recp_from'] = list_recp_from_round
                tmp_json['all_documents'] = count_all
                tmp_json['documents_active'] = count_active
                tmp_json['documents_reject'] = count_reject
                tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                tmp_json['timestamp_start'] = timestamp_start
                tmp_json['timestamp_end'] = timestamp_end
                tmp_json['doc_Y'] = countStatus_Y
                tmp_json['doc_W'] = countStatus_W
                tmp_json['doc_N'] = countStatus_N
                tmp_json['doc_R'] = countStatus_R
                tmp_json['doc_none'] = countStatus_None
                countDoc_of_hour = countDoc_of_hour + count_all
                count_Doc_of_hour_active = count_Doc_of_hour_active + count_active
                count_Doc_of_hour_reject = count_Doc_of_hour_reject + count_reject
                list_json.append(tmp_json)
                tmp_json = {}   
        else:
            for x in range(count+1):
                count_all = 0
                count_active = 0
                count_reject = 0
                list_user2 = []
                list_sender_round = []
                countStatus_Y = 0
                countStatus_N =0
                countStatus_R = 0
                countStatus_W = 0 
                countStatus_N = 0
                countStatus_None = 0
                for y in range(len(list2)):
                    timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                    timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                    user = list2[y]['sender_email']
                    doc_status = list2[y]['document_status']
                    sender = list2[y]['sender_email']
                    if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end):
                        list_sender_round.append(sender)
                        list_s.append(sender)
                        count_all = count_all + 1
                        if doc_status != None:
                            if doc_status == 'Y':
                                countStatus_Y = countStatus_Y + 1
                            if doc_status == 'N':
                                countStatus_N = countStatus_N + 1 
                            if doc_status == 'W':
                                countStatus_W = countStatus_W + 1 
                            if doc_status == 'R':
                                countStatus_R = countStatus_R + 1 
                        if doc_status == None:
                            countStatus_None = countStatus_None + 1
                        if user not in list_user2:
                            list_user2.append(user)
                        if user not in list_count_user:
                            list_count_user.append(user)
                    if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end) and list2[y]['status'] == 'ACTIVE':
                        count_active = count_active + 1
                    if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end) and list2[y]['status'] == 'REJECT':
                        count_reject = count_reject + 1
                tmp_json['list_recp_from'] = func_list_recp(list_sender_round)
                list_sender_round = []
                tmp_json['all_documents'] = count_all
                tmp_json['documents_active'] = count_active
                # tmp_json['count_user'] = len(list_user2)
                tmp_json['documents_reject'] = count_reject
                tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                tmp_json['timestamp_start'] = timestamp_start
                tmp_json['timestamp_end'] = timestamp_end
                tmp_json['doc_Y'] = countStatus_Y
                tmp_json['doc_W'] = countStatus_W
                tmp_json['doc_N'] = countStatus_N
                tmp_json['doc_R'] = countStatus_R
                tmp_json['doc_none'] = countStatus_None
                countDoc_of_hour = countDoc_of_hour + count_all
                count_Doc_of_hour_active = count_Doc_of_hour_active + count_active
                count_Doc_of_hour_reject = count_Doc_of_hour_reject + count_reject
                count_n = count_n + countStatus_N
                count_w = count_w + countStatus_W
                count_y = count_y +  countStatus_Y
                count_r = count_r + countStatus_R
                count_none = count_none + countStatus_None
                list_json.append(tmp_json)
                tmp_json = {}

        tmp_json_1['documentsPastHour_sender'] = list_json

        tmp_json = {}
        list_json = []
        tmp_json['documents_all'] = countDoc_of_hour
        tmp_json['documents_all_active'] = count_Doc_of_hour_active
        tmp_json['documents_all_reject'] = count_Doc_of_hour_reject
        tmp_json['documents_all_n'] = count_n
        tmp_json['documents_all_w'] = count_w
        tmp_json['documents_all_r'] = count_r
        tmp_json['documents_all_y'] = count_y
        tmp_json['documents_all_none'] = count_none
        tmp_json['list_recp_from'] = func_list_recp(list_s)
        list_json.append(tmp_json)
        tmp_json_1['documentsAllHour_sender'] = list_json            
        db.session.close()
        return {'result':'OK','messageText':tmp_json_1}

    def select_deptname_onebox(self,sid_code):
        try:
            self.sid_code = sid_code
            query_select_dept = paper_lessdatastep.query.with_entities(paper_lessdatastep.biz_info).filter(paper_lessdatastep.sid == self.sid_code).first()
            if query_select_dept != None and query_select_dept != '':
                query_select_dept = eval(str(query_select_dept[0]))
                if 'dept_name' in query_select_dept:
                    # dept_name = query_select_dept['dept_name'][0]
                    if query_select_dept['dept_name'] != []:
                        dept_name = query_select_dept['dept_name'][0]
                    elif query_select_dept['dept_name'] == []:
                        dept_name = 'อื่นๆ'
                    print ('dept_name: ',dept_name)
                    # if dept_name == []
                else :
                    dept_name = 'อื่นๆ'
                return {'result':'OK','messageText':dept_name,'status_Code':200,'messageER':None}
            else:
                dept_name = 'อื่นๆ'
                return {'result':'OK','messageText':dept_name,'status_Code':200,'messageER':None}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

    def select_report_v2(self,email_list,document_type,start_datetime,end_datetime,tmp_tax_id):
        self.email_list = email_list
        self.document_type = document_type
        self.start_datetime = start_datetime
        self.end_datetime = end_datetime
        self.tmp_tax_id = tmp_tax_id
        tmp_list_sid_code = []
        count_document = 0
        count_rowDocument = 0
        count_rowDocument_StatusActive = 0
        count_rowDocument_StatusReject = 0
        count_rowDocument_StatusCancel = 0
        statusFile_count_approve = 0
        statusFile_count_pendding = 0
        statusFile_count_reject = 0
        statusFile_count_wait = 0
        step_time = []
        step_time_total = []
        t1 = None
        t2 = None
        try:
            time_setting = 'start'
            if self.start_datetime != "" and self.end_datetime != "":
                date_start_tmp = datetime.datetime.fromtimestamp(self.start_datetime)
                date_end_tmp = datetime.datetime.fromtimestamp(self.end_datetime)
            elif self.start_datetime != "" and self.end_datetime == "":
                date_start_tmp = datetime.datetime.fromtimestamp(self.start_datetime)
                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
            else:
                time_setting = 'all'
        except Exception as e:
            time_setting = 'all'
        sid_list_email = []
        list_arr = []
        json_Data = {}
        try:
            for i in range(len(self.email_list)):
                if len(str(self.document_type).replace(' ','')) != 0:
                    if time_setting == 'start':
                        query_list = paper_lesssender.query.join(paper_lessdocument, paper_lesssender.step_data_sid==paper_lessdocument.step_id).filter(paper_lessdocument.documentType==self.document_type).filter(paper_lesssender.recipient_email.contains(self.email_list[i]),paper_lesssender.send_time>=date_start_tmp,paper_lesssender.send_time<=date_end_tmp).all()
                        db.session.close()
                    else:
                        query_list = paper_lesssender.query.join(paper_lessdocument, paper_lesssender.step_data_sid==paper_lessdocument.step_id).filter(paper_lessdocument.documentType==self.document_type).filter(paper_lesssender.recipient_email.contains(self.email_list[i])).all()
                        db.session.close()
                else:
                    if time_setting == 'start':
                        query_list = paper_lesssender.query.join(paper_lessdocument, paper_lesssender.step_data_sid==paper_lessdocument.step_id).filter().filter(paper_lesssender.recipient_email.contains(self.email_list[i]),paper_lesssender.send_time>=date_start_tmp,paper_lesssender.send_time<=date_end_tmp).all()
                        db.session.close()
                    else:
                        query_list = paper_lesssender.query.join(paper_lessdocument, paper_lesssender.step_data_sid==paper_lessdocument.step_id).filter().filter(paper_lesssender.recipient_email.contains(self.email_list[i])).all()
                        db.session.close()
                # query_list = paper_lesssender.query.filter(paper_lesssender.send_time>=date_start_tmp,paper_lesssender.send_time<=date_end_tmp).all()
                if len(query_list) != 0:
                    for u in range(len(query_list)):
                        sid_code = query_list[u].step_data_sid
                        if sid_code not in tmp_list_sid_code:
                            tmp_list_sid_code.append(sid_code)
                            count_document = count_document + 1
                            sid_list_email.append(sid_code)
            try:
                if str(self.tmp_tax_id).replace(' ','') != '':
                    query_email = paper_lessdatastep.query.filter(paper_lessdatastep.sid.in_(sid_list_email)).filter(paper_lessdatastep.biz_info.contains("'id_card_num': '"+self.tmp_tax_id+"'")).all()
                    db.session.close()
                else:
                    query_email = paper_lessdatastep.query.filter(paper_lessdatastep.sid.in_(sid_list_email)).all()
                    db.session.close()
               
  
                with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
                    future_to_url = {executor.submit(TradeExcelReport,self.tmp_tax_id ,query_email): query_email for query_email in query_email}

                    for future in concurrent.futures.as_completed(future_to_url):
                        try:
                            db.session.close()
                            data = future.result(timeout = None)
                            list_arr.append(data[0])
                            db.session.close()
                        except Exception as exc:
                            print(' generated an exception: %s' % (exc))
                list_arr = sorted(list_arr, key=lambda k: k['dateTime'], reverse=True)
                json_Data['Document_Details'] = list_arr
                db.session.close()
                if len(list_arr)==0 :
                    return {'result':'ER','messageText':None,'status_Code':200,'messageER':'data not found'}
                return {'result':'OK','messageText':json_Data,'status_Code':200,'messageER':None}
               
            except Exception as e:
                exc_type, exc_obj, exc_tb = sys.exc_info()
                fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                print(exc_type, fname, exc_tb.tb_lineno)

                return {'result':'ER','messageText':None,'status_Code':200,'messageER':str(e)}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)

            return {'result':'ER','messageText':None,'status_Code':200,'messageER':str(e)}

    def select_pdf_group_v1(self,groupidhash):
        self.groupidhash = groupidhash
        try:
            tmp_query = tb_group_document.query.filter(tb_group_document.hash_id==self.groupidhash).first()
            if tmp_query != None:
                tmp_pdf_org = tmp_query.pdf_org
                tmp_pdf_sign = tmp_query.pdf_sign
                if tmp_pdf_sign != None:
                    tmp_pdf = tmp_pdf_sign
                else:
                    tmp_pdf = tmp_pdf_org
                return {'result':'OK','messageText':tmp_pdf}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(e)}

    def select_signning_profile_v1(self,emailone):
        self.emailone = emailone
        try:
            tmp_query = paper_lessuserProfile.query.filter(paper_lessuserProfile.p_emailthai==self.emailone).first()
            if tmp_query != None:
                print(tmp_query)
                if tmp_query.p_sign != None:
                    return {'result':'OK','messageText': tmp_query.p_sign}
                else:
                    return {'result':'ER','messageText': None}
            else:
                return {'result':'ER','messageText': None}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(e)}

    def select_group_one_email_v3(self,group_id,email_one):
        self.group_id = group_id
        self.email_one = email_one
        tmp_arrjson = []
        try:
            tmp_query = tb_group_document.query.filter(or_(tb_group_document.status_group.contains(self.email_one),tb_group_document.email_view_group.contains(self.email_one)),tb_group_document.id==self.group_id,tb_group_document.status=='ACTIVE')\
                .order_by(desc(tb_group_document.updatetime))\
                .limit(1)\
                .all()
            if len(tmp_query) != 0:
                for n in range(len(tmp_query)):
                    tmp_arr_status_group = []
                    tmp_arr_status_email = []
                    tmparr_stepstatus = []
                    tmp_arr_status_group_001 = []
                    tmp_text_status = 'Y'
                    tmp_text_status_string = 'อนุมัติแล้ว'
                    tmp_json = tmp_query[n].__dict__
                    arr_data_sum = []
                    json_tmp = {}
                    tmp_arr_data_sum_01 = []
                    tmp_color = None
                    tmp_groupid = tmp_json['id']
                    tmp_sidgroup = tmp_json['sid_group']
                    tmp_updatetime = tmp_json['updatetime']
                    tmp_status = tmp_json['status']
                    tmp_group_other = tmp_json['group_other']
                    tmp_group_data_json = tmp_json['group_data_json']
                    tmp_step_group_detail = tmp_json['step_group_detail']
                    tmp_status_group = tmp_json['status_group']
                    tmp_email_view_group = tmp_json['email_view_group']
                    tmp_pdf_org = tmp_json['pdf_org']
                    tmp_pdf_sign = tmp_json['pdf_sign']
                    tmp_hashid = tmp_json['hash_id']
                    tmp_html_data = tmp_json['html_data']
                    tmp_tracking_group = tmp_json['tracking_group']
                    arr_email_list = []
                    if tmp_pdf_sign != None:
                        tmp_pdf = tmp_pdf_sign
                    else:
                        tmp_pdf = tmp_pdf_org
                    jsonurl_info = None
                    if tmp_pdf != None:
                        url_downloadpdf = myUrl_domain + 'api/v1/download/group_pdf?groupid=' + tmp_hashid
                        url_viewpdf = myUrl_domain + 'api/v1/view/group_pdf?groupid=' + tmp_hashid
                        jsonurl_info = {'view_pdf':url_viewpdf,'download_pdf':url_downloadpdf}
                    list_file_name = []
                    path_image = path_global_1 + '/storage/image/' + self.group_id
                    # path_image = os.getcwd() + '/storage/image/' + self.group_id
                    try:
                        for the_file in os.listdir(path_image):
                            file_path = os.path.join(path_image, the_file)
                            # print(file_path)
                            filename_only = str(file_path).split('/')[-1]
                            url_view_image = myUrl_domain + 'api/view2/pdf_image/' + self.group_id +'/' + filename_only
                            list_file_name.append({'image_Url': url_view_image})
                    except Exception as e:
                        list_file_name = []
                        # print(str(e))
                        # return jsonify({'result':'ER','messageText':None,'status_Code':200,'messageER':'not found folder name ' + str(e)}),200
                    status_viewGroup = False
                    if tmp_email_view_group != None:
                        tmp_email_view_group = eval(tmp_email_view_group)
                        if len(tmp_email_view_group) != 0:
                            for z in range(len(tmp_email_view_group)):
                                if self.email_one in tmp_email_view_group[z]['email_view_group']:
                                    status_viewGroup = True
                                    tmparr_stepstatus.append('V')
                    if tmp_status_group != None:
                        tmp_status_group = eval(tmp_status_group)
                        for z in range(len(tmp_status_group)):
                            print(tmp_status_group[z])
                            tmpstatusgroup = tmp_status_group[z]
                            tmp_arr_status_group.append(tmpstatusgroup['status'])
                            tmp_arr_status_email.append(tmpstatusgroup['email_one'])
                    # print(tmp_arr_status_group)
                    # print(tmp_arr_status_email)
                    count_email = tmp_arr_status_email.count(self.email_one)
                    for g in range(len(tmp_arr_status_group)):
                        tmpstatus = tmp_arr_status_group[g]
                        tmpemailone = tmp_arr_status_email[g]
                        if type(tmpemailone) is list:
                            for h in tmpemailone:
                                if self.email_one == h:
                                    my_status = tmpstatus
                                    tmpemailone = self.email_one
                        if tmpemailone == self.email_one:
                            my_status = tmpstatus
                        # print(tmp_arr_status_group)     
                        index_stepnum = g - 1
                        tmpbefore_status = tmp_arr_status_group[index_stepnum]
                        tmpbefore_emailone = tmp_arr_status_email[index_stepnum]
                        if 'Reject' in tmp_arr_status_group:
                            step_now = g
                            tmparr_stepstatus.append('Reject')
                        elif tmpemailone == self.email_one and my_status == 'Incomplete_input':
                            step_now = g
                            tmparr_stepstatus.append('Wait_input')
                        elif tmpemailone == self.email_one and my_status == 'Incomplete_1':
                            step_now = g
                            tmparr_stepstatus.append('Incomplete')
                        elif tmpemailone == self.email_one and my_status == 'Incomplete':                                        
                            if self.email_one not in arr_email_list:
                                index_step_me = g
                                if index_step_me != 0:
                                    while index_step_me > 0:
                                        if len(tmparr_stepstatus) == 0:
                                            index_step_me = index_step_me - 1
                                            if tmp_arr_status_group[index_step_me] == 'Incomplete_1':
                                                step_now = g
                                                tmparr_stepstatus.append('Incomplete')
                                            elif tmp_arr_status_group[index_step_me] == 'Incomplete':
                                                step_now = g
                                                tmparr_stepstatus.append('Incomplete')
                                            else:
                                                step_now = g
                                                tmparr_stepstatus.append('Wait')
                                            arr_email_list.append(self.email_one)
                                        else:
                                            index_step_me = index_step_me - 1
                                            continue
                                else:
                                    step_now = g
                                    tmparr_stepstatus.append('Wait')
                        elif tmpemailone == self.email_one and my_status == 'Complete':      
                            if self.email_one not in arr_email_list:
                                if count_email == 1:
                                    for nz in range(g,len(tmp_arr_status_group),1):
                                        if self.email_one in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Incomplete':
                                            step_now = g
                                            tmparr_stepstatus.append('Wait')
                                        elif self.email_one not in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Incomplete':
                                            step_now = g
                                            tmparr_stepstatus.append('Progress')
                                    arr_email_list.append(self.email_one)
                                else:                                                
                                    for nz in range(g,len(tmp_arr_status_group),1):
                                        if self.email_one not in arr_email_list:
                                            if self.email_one in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Complete':
                                                pass                                                    
                                            if self.email_one in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Incomplete':
                                                step_now = step_num_int2
                                                tmparr_stepstatus.append('Wait')
                                                arr_email_list.append(self.email_one)
                                            if self.email_one not in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Incomplete':
                                                step_now = step_num_int2
                                                tmparr_stepstatus.append('Progress')
                                                arr_email_list.append(self.email_one)
                        # if tmpemailone == self.email_one:
                        #     if tmpstatus == 'Complete':
                        #         tmparr_stepstatus.append('Y')
                        #     if tmpstatus == 'Incomplete':
                        #         if tmpbefore_status == 'Complete':
                        #             tmparr_stepstatus.append(tmpstatus)
                        #         else:
                        #             tmparr_stepstatus.append('N')
                        #         tmparr_stepstatus.append('N')
                        #     elif tmpstatus == 'Complete':
                        #         tmparr_stepstatus.append('Z')
                        tmp_arr_status_group_001.append(tmpstatus)
                    print(tmparr_stepstatus)
                    if 'Reject' in tmparr_stepstatus:
                        tmp_text_status = 'R'
                        tmp_text_status_string = 'เอกสารที่ส่งคืนแก้ไข'
                    elif 'Wait_input' in tmparr_stepstatus:
                        tmp_text_status = 'WI'
                        tmp_text_status_string = 'รอคุณกรอกข้อมูล'
                    elif 'V' in tmparr_stepstatus:   
                        tmp_text_status = 'V'
                        tmp_text_status_string = 'ดูเอกสาร'
                    elif 'Progress' in tmparr_stepstatus and 'Wait' in tmparr_stepstatus:
                        tmp_text_status = 'Z'
                        tmp_text_status_string = 'อยู่ในช่วงดำเนินการ'
                    elif 'Wait' in tmparr_stepstatus:
                        tmp_text_status = 'W'
                        tmp_text_status_string = 'รอคุณอนุมัติ'
                    elif 'Incomplete' in tmparr_stepstatus:
                        tmp_text_status = 'Z'
                        tmp_text_status_string = 'อยู่ในช่วงดำเนินการ'
                    elif 'Progress' in tmparr_stepstatus:
                        tmp_text_status = 'N'
                        tmp_text_status_string = 'กำลังดำเนินการ'                    
                    elif tmparr_stepstatus.count('Incomplete') >= 2:
                        tmp_text_status = 'Z'
                        tmp_text_status_string = 'อยู่ในช่วงดำเนินการ'
                    elif 'Incomplete' in tmparr_stepstatus and 'Complete' in tmparr_stepstatus:
                        tmp_text_status = 'N'
                        tmp_text_status_string = 'กำลังดำเนินการ'
                    else:
                        tmp_text_status_string = 'อนุมัติแล้ว'
                    # if 'Complete' in tmp_arr_status_group_001 and tmp_arr_status_group_001.count('Complete') == len(tmp_arr_status_group_001):
                    #     tmp_text_status = 'Y'
                    #     tmp_text_status_string = 'อนุมัติแล้ว'
                    # elif 'N' in tmparr_stepstatus and tmparr_stepstatus.count('N') == len(tmparr_stepstatus):
                    #     tmp_text_status = 'W'
                    #     tmp_text_status_string = 'รอคุณอนุมัติ'                  
                    # elif 'Incomplete' in tmparr_stepstatus:
                    #     tmp_text_status = 'W'
                    #     tmp_text_status_string = 'รอคุณอนุมัติ'
                    # elif 'V' in tmparr_stepstatus:   
                    #     tmp_text_status = 'V'
                    #     tmp_text_status_string = 'ดูเอกสาร'
                    # elif 'Z' in tmparr_stepstatus and 'Y' in tmparr_stepstatus:   
                    #     tmp_text_status = 'Y'
                    #     tmp_text_status_string = 'อนุมัติแล้ว'
                    # elif 'N' in tmparr_stepstatus:   
                    #     tmp_text_status = 'N'
                    #     tmp_text_status_string = 'รอกำลังดำเนินการ'
                    # elif 'Z' in tmparr_stepstatus:   
                    #     tmp_text_status = 'Z'
                    #     tmp_text_status_string = 'กำลังดำเนินการ'
                    if tmp_step_group_detail != None:
                        tmp_step_group_detail = eval(tmp_step_group_detail)
                    if tmp_sidgroup != None:
                        tmp_sidgroup = eval(tmp_sidgroup)
                    if tmp_updatetime != None:
                        tmp_updatetime = tmp_updatetime
                        tmp_datetimeString = str(tmp_updatetime).split('+')[0]
                    if tmp_group_other != None:
                        tmp_group_other = eval(tmp_group_other)
                        for i in range(len(tmp_group_other)):
                            if 'color' in tmp_group_other[i]:
                                tmp_color = tmp_group_other[i]['color']
                    if tmp_group_data_json != None:
                        tmp_group_data_json = eval(tmp_group_data_json)
                        for o in range(len(tmp_group_data_json)):
                            if 'data_sum' in tmp_group_data_json[o]:
                                tmp_data_sum = tmp_group_data_json[o]['data_sum']
                                for z in range(len(tmp_data_sum)):
                                    if 'name' in tmp_data_sum[z]:
                                        tmp_key = str(tmp_data_sum[z]['name']).replace(' ','')
                                        tmp_value = (tmp_data_sum[z]['value'])
                                        json_tmp[tmp_key] = tmp_value
                                        # arr_data_sum.append({tmp_key:tmp_value})
                                tmp_arr_data_sum_01.append(json_tmp)
                            else:
                                # if len(tmp_arr_data_sum_01) != 0:
                                if len(tmp_group_data_json[o]) != 0:
                                    # if 'CustomerName' in tmp_group_data_json[o][0]:
                                    tmp_arr_data_sum_01.append(tmp_group_data_json[o][0])
                    json_info = {}
                    arr_sign = []
                    # if tmp_color == 'green':
                    #     # json_info['email_user'] = 'tivanon.ja@one.th'
                    #     json_info['email_user'] = 'jirayu.ko@thai.com'
                    #     tmp_querydb = paper_lessuserProfile.query.filter(paper_lessuserProfile.p_emailthai==json_info['email_user']).first()
                    #     if tmp_querydb != None:
                    #         tmp_signning = tmp_querydb.p_sign
                    #         if tmp_signning != None:
                    #             tmp_signning = tmp_signning
                    #             json_info['signature'] = tmp_signning
                    #             json_info['url_sign'] = myUrl_domain + 'api/v1/view_sign/image?email=' + json_info['email_user']
                    #             arr_sign.append(json_info)
                    # elif tmp_color == 'yellow':
                    #     # emailarr_tmp = ['tivanon.ja@one.th','fakunya.pi@one.th']
                    #     emailarr_tmp = ['jirayu.ko@thai.com']
                    #     tmp_querydb = paper_lessuserProfile.query.filter(paper_lessuserProfile.p_emailthai.in_(emailarr_tmp)).all()
                    #     if len(tmp_querydb) != 0:
                    #         for zz in range(len(tmp_querydb)):
                    #             tmp_signning = tmp_querydb[zz].p_sign
                    #             tmp_emailone = tmp_querydb[zz].p_emailthai
                    #             if tmp_signning != None:
                    #                 json_info = {}
                    #                 tmp_signning = tmp_signning
                    #                 json_info['signature'] = tmp_signning
                    #                 json_info['email_user'] = tmp_emailone
                    #                 json_info['url_sign'] = myUrl_domain + 'api/v1/view_sign/image?email=' + tmp_emailone
                    #                 arr_sign.append(json_info)
                    # elif tmp_color == 'red':
                    #     # emailarr_tmp = ['tivanon.ja@one.th','fakunya.pi@one.th']
                    #     emailarr_tmp = ['jirayu.ko@thai.com']
                    #     tmp_querydb = paper_lessuserProfile.query.filter(paper_lessuserProfile.p_emailthai.in_(emailarr_tmp)).all()
                    #     if len(tmp_querydb) != 0:
                    #         for zz in range(len(tmp_querydb)):
                    #             tmp_signning = tmp_querydb[zz].p_sign
                    #             tmp_emailone = tmp_querydb[zz].p_emailthai
                    #             if tmp_signning != None:
                    #                 json_info = {}
                    #                 tmp_signning = tmp_signning
                    #                 json_info['signature'] = tmp_signning
                    #                 json_info['email_user'] = tmp_emailone
                    #                 json_info['url_sign'] = myUrl_domain + 'api/v1/view_sign/image?email=' + tmp_emailone
                    #                 arr_sign.append(json_info)
                    tmp_arrjson.append({
                        'group_id':tmp_groupid,
                        'sid_group':tmp_sidgroup,
                        'color_group':tmp_color,
                        'datetime':int(tmp_updatetime.timestamp()),
                        'datetime_string':tmp_datetimeString,
                        'document_count':len(tmp_sidgroup),
                        'document_data':tmp_arr_data_sum_01,
                        'signature_info':[],
                        'status_group':tmp_text_status,
                        'status_group_string':tmp_text_status_string,
                        'viewgroup':status_viewGroup,
                        'image_display':list_file_name,
                        'pdf_info':tmp_pdf,
                        'sign_position':tmp_step_group_detail,
                        'html_data':tmp_html_data,
                        'html_url':None,
                        'tracking_group':tmp_tracking_group,
                        'url_info':jsonurl_info
                    })
                
                return {'result':'OK','messageText':tmp_arrjson}
            else:
                return {'result':'ER','messageER':'data not found'}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(e)}

    def select_group_one_email_v1_groupchat(self,group_id,email_one):
        self.group_id = group_id
        self.email_one = email_one
        tmp_arrjson = []
        try:
            tmp_query = tb_group_document.query.filter(or_(tb_group_document.status_group.contains(self.email_one),tb_group_document.email_view_group.contains(self.email_one)),tb_group_document.hash_id==self.group_id,tb_group_document.status=='ACTIVE')\
                .order_by(desc(tb_group_document.updatetime))\
                .limit(1)\
                .all()
            if len(tmp_query) != 0:
                for n in range(len(tmp_query)):
                    tmp_arr_status_group = []
                    tmp_arr_status_email = []
                    tmparr_stepstatus = []
                    tmp_arr_status_group_001 = []
                    tmp_text_status = 'Y'
                    tmp_text_status_string = 'อนุมัติแล้ว'
                    tmp_json = tmp_query[n].__dict__
                    arr_data_sum = []
                    json_tmp = {}
                    tmp_arr_data_sum_01 = []
                    tmp_color = None
                    tmp_groupid = tmp_json['id']
                    tmp_sidgroup = tmp_json['sid_group']
                    tmp_updatetime = tmp_json['updatetime']
                    tmp_status = tmp_json['status']
                    tmp_group_other = tmp_json['group_other']
                    tmp_group_data_json = tmp_json['group_data_json']
                    tmp_step_group_detail = tmp_json['step_group_detail']
                    tmp_status_group = tmp_json['status_group']
                    tmp_email_view_group = tmp_json['email_view_group']
                    tmp_pdf_org = tmp_json['pdf_org']
                    tmp_pdf_sign = tmp_json['pdf_sign']
                    tmp_document_type = tmp_json['document_type']
                    tmp_hashid = tmp_json['hash_id']
                    arr_email_list = []
                    if tmp_pdf_sign != None:
                        tmp_pdf = tmp_pdf_sign
                    else:
                        tmp_pdf = tmp_pdf_org
                    jsonurl_info = None
                    if tmp_pdf != None:
                        url_downloadpdf = myUrl_domain + 'api/v1/download/group_pdf?groupid=' + tmp_hashid
                        url_viewpdf = myUrl_domain + 'api/v1/view/group_pdf?groupid=' + tmp_hashid
                        jsonurl_info = {'view_pdf':url_viewpdf,'download_pdf':url_downloadpdf}
                    list_file_name = []
                    tmp_groupid = str(tmp_groupid)
                    path_image = path_global_1 + '/storage/image/' + tmp_groupid
                    # path_image = os.getcwd() + '/storage/image/' + tmp_groupid
                    try:
                        for the_file in os.listdir(path_image):
                            file_path = os.path.join(path_image, the_file)
                            # print(file_path)
                            filename_only = str(file_path).split('/')[-1]
                            url_view_image = myUrl_domain + 'api/view2/pdf_image/' + tmp_groupid +'/' + filename_only
                            list_file_name.append({'image_Url': url_view_image})
                    except Exception as e:
                        list_file_name = []
                    status_viewGroup = False
                    if tmp_email_view_group != None:
                        tmp_email_view_group = eval(tmp_email_view_group)
                        if len(tmp_email_view_group) != 0:
                            for z in range(len(tmp_email_view_group)):
                                if self.email_one in tmp_email_view_group[z]['email_view_group']:
                                    status_viewGroup = True
                    if tmp_status_group != None:
                        tmp_status_group = eval(tmp_status_group)
                        for z in range(len(tmp_status_group)):
                            tmpstatusgroup = tmp_status_group[z]
                            tmp_arr_status_group.append(tmpstatusgroup['status'])
                            tmp_arr_status_email.append(tmpstatusgroup['email_one'])
                    # print(tmp_arr_status_group)
                    # print(tmp_arr_status_email)
                    count_email = tmp_arr_status_email.count(self.email_one)
                    for g in range(len(tmp_arr_status_group)):
                        tmpstatus = tmp_arr_status_group[g]
                        tmpemailone = tmp_arr_status_email[g]
                        if tmpemailone == self.email_one:
                            my_status = tmpstatus
                        
                        index_stepnum = g - 1
                        tmpbefore_status = tmp_arr_status_group[index_stepnum]
                        tmpbefore_emailone = tmp_arr_status_email[index_stepnum]
                        if 'Reject' in tmp_arr_status_group:
                            step_now = g
                            tmparr_stepstatus.append('Reject')
                        elif tmpemailone == self.email_one and my_status == 'Incomplete_input':
                            step_now = g
                            tmparr_stepstatus.append('Wait_input')
                        elif tmpemailone == self.email_one and my_status == 'Incomplete_1':
                            step_now = g
                            tmparr_stepstatus.append('Incomplete')
                        elif tmpemailone == self.email_one and my_status == 'Incomplete':                                        
                            if self.email_one not in arr_email_list:
                                index_step_me = g
                                if index_step_me != 0:
                                    while index_step_me > 0:
                                        if len(tmparr_stepstatus) == 0:
                                            index_step_me = index_step_me - 1
                                            if tmp_arr_status_group[index_step_me] == 'Incomplete_1':
                                                step_now = g
                                                tmparr_stepstatus.append('Incomplete')
                                            elif tmp_arr_status_group[index_step_me] == 'Incomplete':
                                                step_now = g
                                                tmparr_stepstatus.append('Incomplete')
                                            else:
                                                step_now = g
                                                tmparr_stepstatus.append('Wait')
                                            arr_email_list.append(self.email_one)
                                        else:
                                            index_step_me = index_step_me - 1
                                            continue
                                else:
                                    step_now = g
                                    tmparr_stepstatus.append('Wait')
                        elif tmpemailone == self.email_one and my_status == 'Complete':                                    
                            if self.email_one not in arr_email_list:
                                if count_email == 1:
                                    for nz in range(g,len(tmp_arr_status_group),1):
                                        if self.email_one in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Incomplete':
                                            step_now = g
                                            tmparr_stepstatus.append('Wait')
                                        elif self.email_one not in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Incomplete':
                                            step_now = g
                                            tmparr_stepstatus.append('Progress')
                                    arr_email_list.append(self.email_one)
                                else:                                                
                                    for nz in range(g,len(tmp_arr_status_group),1):
                                        if self.email_one not in arr_email_list:
                                            if self.email_one in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Complete':
                                                pass                                                    
                                            if self.email_one in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Incomplete':
                                                step_now = step_num_int2
                                                tmparr_stepstatus.append('Wait')
                                                arr_email_list.append(self.email_one)
                                            if self.email_one not in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Incomplete':
                                                step_now = step_num_int2
                                                tmparr_stepstatus.append('Progress')
                                                arr_email_list.append(self.email_one)
                        # if tmpemailone == self.email_one:
                        #     if tmpstatus == 'Complete':
                        #         tmparr_stepstatus.append('Y')
                        #     if tmpstatus == 'Incomplete':
                        #         if tmpbefore_status == 'Complete':
                        #             tmparr_stepstatus.append(tmpstatus)
                        #         else:
                        #             tmparr_stepstatus.append('N')
                        #         tmparr_stepstatus.append('N')
                        #     elif tmpstatus == 'Complete':
                        #         tmparr_stepstatus.append('Z')
                        tmp_arr_status_group_001.append(tmpstatus)
                    print(tmparr_stepstatus)
                    if 'Reject' in tmparr_stepstatus:
                        tmp_text_status = 'R'
                        tmp_text_status_string = 'เอกสารที่ส่งคืนแก้ไข'
                    elif 'Wait_input' in tmparr_stepstatus:
                        tmp_text_status = 'WI'
                        tmp_text_status_string = 'รอคุณกรอกข้อมูล'
                    elif 'V' in tmparr_stepstatus:   
                        tmp_text_status = 'V'
                        tmp_text_status_string = 'ดูเอกสาร'
                    elif 'Progress' in tmparr_stepstatus and 'Wait' in tmparr_stepstatus:
                        tmp_text_status = 'Z'
                        tmp_text_status_string = 'อยู่ในช่วงดำเนินการ'
                    elif 'Wait' in tmparr_stepstatus:
                        tmp_text_status = 'W'
                        tmp_text_status_string = 'รอคุณอนุมัติ'
                    elif 'Incomplete' in tmparr_stepstatus:
                        tmp_text_status = 'Z'
                        tmp_text_status_string = 'อยู่ในช่วงดำเนินการ'
                    elif 'Progress' in tmparr_stepstatus:
                        tmp_text_status = 'N'
                        tmp_text_status_string = 'กำลังดำเนินการ'                    
                    elif tmparr_stepstatus.count('Incomplete') >= 2:
                        tmp_text_status = 'Z'
                        tmp_text_status_string = 'อยู่ในช่วงดำเนินการ'
                    elif 'Incomplete' in tmparr_stepstatus and 'Complete' in tmparr_stepstatus:
                        tmp_text_status = 'N'
                        tmp_text_status_string = 'กำลังดำเนินการ'
                    else:
                        tmp_text_status_string = 'อนุมัติแล้ว'
                    if tmp_step_group_detail != None:
                        tmp_step_group_detail = eval(tmp_step_group_detail)
                    if tmp_sidgroup != None:
                        tmp_sidgroup = eval(tmp_sidgroup)
                    if tmp_updatetime != None:
                        tmp_updatetime = tmp_updatetime
                        tmp_datetimeString = str(tmp_updatetime).split('+')[0]
                    if tmp_group_other != None:
                        tmp_group_other = eval(tmp_group_other)
                        for i in range(len(tmp_group_other)):
                            if 'color' in tmp_group_other[i]:
                                tmp_color = tmp_group_other[i]['color']
                    if tmp_group_data_json != None:
                        tmp_group_data_json = eval(tmp_group_data_json)
                        for o in range(len(tmp_group_data_json)):
                            if 'data_sum' in tmp_group_data_json[o]:
                                tmp_data_sum = tmp_group_data_json[o]['data_sum']
                                for z in range(len(tmp_data_sum)):
                                    if 'name' in tmp_data_sum[z]:
                                        tmp_key = str(tmp_data_sum[z]['name']).replace(' ','')
                                        tmp_value = (tmp_data_sum[z]['value'])
                                        json_tmp[tmp_key] = tmp_value
                                        # arr_data_sum.append({tmp_key:tmp_value})
                                tmp_arr_data_sum_01.append(json_tmp)
                            else:
                                # if len(tmp_arr_data_sum_01) != 0:
                                if len(tmp_group_data_json[o]) != 0:
                                    if 'CustomerName' in tmp_group_data_json[o][0]:
                                        tmp_arr_data_sum_01.append(tmp_group_data_json[o][0])
                    json_info = {}
                    arr_sign = []
                    owner_arr =[]
                    # if tmp_color == 'green':
                    #     # json_info['email_user'] = 'tivanon.ja@one.th'
                    #     json_info['email_user'] = 'jirayu.ko@thai.com'
                    #     tmp_querydb = paper_lessuserProfile.query.filter(paper_lessuserProfile.p_emailthai==json_info['email_user']).first()
                    #     if tmp_querydb != None:
                    #         tmp_signning = tmp_querydb.p_sign
                    #         if tmp_signning != None:
                    #             tmp_signning = tmp_signning
                    #             json_info['signature'] = tmp_signning
                    #             json_info['url_sign'] = myUrl_domain + 'api/v1/view_sign/image?email=' + json_info['email_user']
                    #             arr_sign.append(json_info)
                    # elif tmp_color == 'yellow':
                    #     # emailarr_tmp = ['tivanon.ja@one.th','fakunya.pi@one.th']
                    #     emailarr_tmp = ['jirayu.ko@thai.com']
                    #     tmp_querydb = paper_lessuserProfile.query.filter(paper_lessuserProfile.p_emailthai.in_(emailarr_tmp)).all()
                    #     if len(tmp_querydb) != 0:
                    #         for zz in range(len(tmp_querydb)):
                    #             tmp_signning = tmp_querydb[zz].p_sign
                    #             tmp_emailone = tmp_querydb[zz].p_emailthai
                    #             if tmp_signning != None:
                    #                 json_info = {}
                    #                 tmp_signning = tmp_signning
                    #                 json_info['signature'] = tmp_signning
                    #                 json_info['email_user'] = tmp_emailone
                    #                 json_info['url_sign'] = myUrl_domain + 'api/v1/view_sign/image?email=' + tmp_emailone
                    #                 arr_sign.append(json_info)
                    # elif tmp_color == 'red':
                    #     # emailarr_tmp = ['tivanon.ja@one.th','fakunya.pi@one.th']
                    #     emailarr_tmp = ['jirayu.ko@thai.com']
                    #     tmp_querydb = paper_lessuserProfile.query.filter(paper_lessuserProfile.p_emailthai.in_(emailarr_tmp)).all()
                    #     if len(tmp_querydb) != 0:
                    #         for zz in range(len(tmp_querydb)):
                    #             tmp_signning = tmp_querydb[zz].p_sign
                    #             tmp_emailone = tmp_querydb[zz].p_emailthai
                    #             if tmp_signning != None:
                    #                 json_info = {}
                    #                 tmp_signning = tmp_signning
                    #                 json_info['signature'] = tmp_signning
                    #                 json_info['email_user'] = tmp_emailone
                    #                 json_info['url_sign'] = myUrl_domain + 'api/v1/view_sign/image?email=' + tmp_emailone
                    #                 arr_sign.append(json_info)
                    tmp_querydb_sign = paper_lessuserProfile.query.filter(paper_lessuserProfile.p_emailthai==(self.email_one)).first()
                    if tmp_querydb_sign != None:
                        json_owner = {}
                        # print(tmp_querydb_sign)
                        jsontmp = tmp_querydb_sign.__dict__
                        json_owner['signature'] = jsontmp['p_sign']
                        json_owner['email_user'] = jsontmp['p_emailthai']
                        owner_arr.append(json_owner)
                        # for zz in range(len(tmp_querydb_sign)):
                        #     tmp_signning = tmp_querydb_sign[zz].p_sign
                        #     tmp_emailone = tmp_querydb_sign[zz].p_emailthai
                        #     json_owner['signature'] = tmp_signning
                        #     json_owner['email_user'] = tmp_emailone
                        #     owner_arr.append(owner_arr)
                    tmp_arrjson.append({
                        'group_id':tmp_groupid,
                        'sid_group':tmp_sidgroup,
                        'color_group':tmp_color,
                        'datetime':int(tmp_updatetime.timestamp()),
                        'datetime_string':tmp_datetimeString,
                        'document_count':len(tmp_sidgroup),
                        'document_data':tmp_arr_data_sum_01,
                        'signature_info':[],
                        'sign_position':tmp_step_group_detail,
                        'status_group':tmp_text_status,
                        'status_group_string':tmp_text_status_string,
                        'owner_sign':owner_arr,
                        'viewgroup':status_viewGroup,
                        'image_display':list_file_name,
                        'pdf_info':tmp_pdf,
                        'url_info':jsonurl_info,
                        'document_type':tmp_document_type
                    })
                
                return {'result':'OK','messageText':tmp_arrjson}
            else:
                return {'result':'ER','messageER':'data not found'}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(e)}

    def select_group_list_email_v2(self,email_one,status_group,datetime,datetime_end_tmp):
        self.email_one = email_one
        self.status_group = status_group
        self.datetime = datetime
        self.datetime_end_tmp = datetime_end_tmp
        tmp_arrjson = []
        try:
            tmp_query = tb_group_document.query.filter(tb_group_document.email_group.contains(self.email_one),tb_group_document.status=='ACTIVE')\
                .filter(and_(tb_group_document.group_other.contains('color'),tb_group_document.group_other.contains(self.status_group)))\
                .filter(tb_group_document.updatetime>=self.datetime,tb_group_document.updatetime<=self.datetime_end_tmp)\
                .order_by(desc(tb_group_document.updatetime))\
                .limit(1)\
                .all()
            if len(tmp_query) != 0:
                for n in range(len(tmp_query)):
                    tmp_json = tmp_query[n].__dict__
                    arr_data_sum = []
                    json_tmp = {}
                    tmp_arr_data_sum_01 = []
                    tmp_color = None
                    tmp_groupid = tmp_json['id']
                    tmp_sidgroup = tmp_json['sid_group']
                    tmp_updatetime = tmp_json['updatetime']
                    tmp_status = tmp_json['status']
                    tmp_group_other = tmp_json['group_other']
                    tmp_group_data_json = tmp_json['group_data_json']
                    tmp_step_group_detail = tmp_json['step_group_detail']
                    # tmp_updatetime = tmp_json['updatetime']
                    if tmp_step_group_detail != None:
                        tmp_step_group_detail = eval(tmp_step_group_detail)
                    if tmp_sidgroup != None:
                        tmp_sidgroup = eval(tmp_sidgroup)
                    if tmp_updatetime != None:
                        tmp_updatetime = tmp_updatetime
                        tmp_datetimeString = str(tmp_updatetime).split('+')[0]
                    if tmp_group_other != None:
                        tmp_group_other = eval(tmp_group_other)
                        for i in range(len(tmp_group_other)):
                            if 'color' in tmp_group_other[i]:
                                tmp_color = tmp_group_other[i]['color']
                    if tmp_group_data_json != None:
                        tmp_group_data_json = eval(tmp_group_data_json)
                        for o in range(len(tmp_group_data_json)):
                            if 'data_sum' in tmp_group_data_json[o]:
                                tmp_data_sum = tmp_group_data_json[o]['data_sum']
                                for z in range(len(tmp_data_sum)):
                                    if 'name' in tmp_data_sum[z]:
                                        tmp_key = str(tmp_data_sum[z]['name']).replace(' ','')
                                        tmp_value = (tmp_data_sum[z]['value'])
                                        json_tmp[tmp_key] = tmp_value
                                        # arr_data_sum.append({tmp_key:tmp_value})
                                tmp_arr_data_sum_01.append(json_tmp)
                            else:
                                # if len(tmp_arr_data_sum_01) != 0:
                                if len(tmp_group_data_json[o]) != 0:
                                    if 'CustomerName' in tmp_group_data_json[o][0]:
                                        tmp_arr_data_sum_01.append(tmp_group_data_json[o][0])
                    json_info = {}
                    arr_sign = []
                    if tmp_color == 'green':
                        # json_info['email_user'] = 'tivanon.ja@one.th'
                        json_info['email_user'] = 'jirayu.ko@thai.com'
                        tmp_querydb = paper_lessuserProfile.query.filter(paper_lessuserProfile.p_emailthai==json_info['email_user']).first()
                        if tmp_querydb != None:
                            tmp_signning = tmp_querydb.p_sign
                            if tmp_signning != None:
                                tmp_signning = tmp_signning
                                json_info['signature'] = tmp_signning
                                json_info['url_sign'] = myUrl_domain + 'api/v1/view_sign/image?email=' + json_info['email_user']
                                arr_sign.append(json_info)
                    elif tmp_color == 'yellow':
                        emailarr_tmp = ['jirayu.ko@thai.com','sarawut.sint_6340@thai.com']
                        tmp_querydb = paper_lessuserProfile.query.filter(paper_lessuserProfile.p_emailthai.in_(emailarr_tmp)).all()
                        if len(tmp_querydb) != 0:
                            for zz in range(len(tmp_querydb)):
                                tmp_signning = tmp_querydb[zz].p_sign
                                tmp_emailone = tmp_querydb[zz].p_emailthai
                                if tmp_signning != None:
                                    json_info = {}
                                    tmp_signning = tmp_signning
                                    json_info['signature'] = tmp_signning
                                    json_info['email_user'] = tmp_emailone
                                    json_info['url_sign'] = myUrl_domain + 'api/v1/view_sign/image?email=' + tmp_emailone
                                    arr_sign.append(json_info)
                    elif tmp_color == 'red':
                        emailarr_tmp = ['jirayu.ko@thai.com','sarawut.sint_6340@thai.com']
                        tmp_querydb = paper_lessuserProfile.query.filter(paper_lessuserProfile.p_emailthai.in_(emailarr_tmp)).all()
                        if len(tmp_querydb) != 0:
                            for zz in range(len(tmp_querydb)):
                                tmp_signning = tmp_querydb[zz].p_sign
                                tmp_emailone = tmp_querydb[zz].p_emailthai
                                if tmp_signning != None:
                                    json_info = {}
                                    tmp_signning = tmp_signning
                                    json_info['signature'] = tmp_signning
                                    json_info['email_user'] = tmp_emailone
                                    json_info['url_sign'] = myUrl_domain + 'api/v1/view_sign/image?email=' + tmp_emailone
                                    arr_sign.append(json_info)
                    tmp_arrjson.append({
                        'group_id':tmp_groupid,
                        'sid_group':tmp_sidgroup,
                        'color_group':tmp_color,
                        'datetime':int(tmp_updatetime.timestamp()),
                        'datetime_string':tmp_datetimeString,
                        'document_count':len(tmp_sidgroup),
                        'document_data':tmp_arr_data_sum_01,
                        'signature_info':arr_sign,
                        'sign_position':tmp_step_group_detail
                    })
                
                return {'result':'OK','messageText':tmp_arrjson}
            else:
                return {'result':'ER','messageER':'data not found'}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(e)}

    def select_group_list_email_v1(self,email_one):
        self.email_one = email_one
        tmp_arrjson = []
        list_arr = []
        try:
            tmp_query = tb_group_document.query.filter(or_(tb_group_document.email_view_group.contains(self.email_one),tb_group_document.status_group.contains(self.email_one)),tb_group_document.status=='ACTIVE').all()
            if len(tmp_query) != 0:
                for n in range(len(tmp_query)):
                    tmp_arr_status_group = []
                    tmp_arr_status_email = []
                    tmp_arr_status_group_001 = []
                    tmparr_stepstatus = []
                    arr_email_list = []
                    json_tmp = {}
                    tmp_text_status = 'Y'
                    tmp_text_status_string = 'อนุมัติแล้ว'
                    tmp_arr_data_sum_01 = []
                    tmp_json = tmp_query[n].__dict__
                    if '_sa_instance_state' in tmp_json:
                        del tmp_json['_sa_instance_state']
                    # print(tmp_json)
                    
                    tmp_color = None
                    tmp_groupid = tmp_json['id']
                    tmp_sidgroup = tmp_json['sid_group']
                    tmp_updatetime = tmp_json['updatetime']
                    tmp_status = tmp_json['status']
                    tmp_group_other = tmp_json['group_other']
                    tmp_group_data_json = tmp_json['group_data_json']
                    tmp_status_group = tmp_json['status_group']
                    tmp_email_view_group = tmp_json['email_view_group']
                    status_viewGroup = False
                    if tmp_email_view_group != None:
                        tmp_email_view_group = eval(tmp_email_view_group)
                        if len(tmp_email_view_group) != 0:
                            for z in range(len(tmp_email_view_group)):
                                if self.email_one in tmp_email_view_group[z]['email_view_group']:
                                    status_viewGroup = True
                    if tmp_status_group != None:
                        tmp_status_group = eval(tmp_status_group)
                        for z in range(len(tmp_status_group)):
                            tmpstatusgroup = tmp_status_group[z]
                            tmp_arr_status_group.append(tmpstatusgroup['status'])
                            tmp_arr_status_email.append(tmpstatusgroup['email_one'])
                    # print(tmp_arr_status_group)
                    # print(tmp_arr_status_email)
                    count_email = tmp_arr_status_email.count(self.email_one)
                    for g in range(len(tmp_arr_status_group)):
                        tmpstatus = tmp_arr_status_group[g]
                        tmpemailone = tmp_arr_status_email[g]
                        if tmpemailone == self.email_one:
                            my_status = tmpstatus
                        
                        index_stepnum = g - 1
                        tmpbefore_status = tmp_arr_status_group[index_stepnum]
                        tmpbefore_emailone = tmp_arr_status_email[index_stepnum] 
                        if 'Reject' in tmp_arr_status_group:
                            step_now = g
                            tmparr_stepstatus.append('Reject')
                        elif tmpemailone == self.email_one and my_status == 'Incomplete_input':
                            step_now = g
                            tmparr_stepstatus.append('Wait_input')
                        elif tmpemailone == self.email_one and my_status == 'Incomplete_1':
                            step_now = g
                            tmparr_stepstatus.append('Incomplete')
                        elif tmpemailone == self.email_one and my_status == 'Incomplete':                                      
                            if self.email_one not in arr_email_list:
                                index_step_me = g
                                if index_step_me != 0:
                                    while index_step_me > 0:
                                        if len(tmparr_stepstatus) == 0:
                                            index_step_me = index_step_me - 1
                                            if tmp_arr_status_group[index_step_me] == 'Incomplete_1':
                                                step_now = g
                                                tmparr_stepstatus.append('Incomplete')
                                            elif tmp_arr_status_group[index_step_me] == 'Incomplete':
                                                step_now = g
                                                tmparr_stepstatus.append('Incomplete')
                                            else:
                                                step_now = g
                                                tmparr_stepstatus.append('Wait')
                                            arr_email_list.append(self.email_one)
                                        else:
                                            index_step_me = index_step_me - 1
                                            continue
                                else:
                                    step_now = g
                                    tmparr_stepstatus.append('Wait')
                        elif tmpemailone == self.email_one and my_status == 'Complete':                                    
                            if self.email_one not in arr_email_list:
                                if count_email == 1:
                                    for nz in range(g,len(tmp_arr_status_group),1):
                                        if self.email_one in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Incomplete':
                                            step_now = g
                                            tmparr_stepstatus.append('Wait')
                                        elif self.email_one not in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Incomplete':
                                            step_now = g
                                            tmparr_stepstatus.append('Progress')
                                    arr_email_list.append(self.email_one)
                                else:                                                
                                    for nz in range(g,len(tmp_arr_status_group),1):
                                        if self.email_one not in arr_email_list:
                                            if self.email_one in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Complete':
                                                pass                                                    
                                            if self.email_one in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Incomplete':
                                                step_now = step_num_int2
                                                tmparr_stepstatus.append('Wait')
                                                arr_email_list.append(self.email_one)
                                            if self.email_one not in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Incomplete':
                                                step_now = step_num_int2
                                                tmparr_stepstatus.append('Progress')
                                                arr_email_list.append(self.email_one)
                        # if tmpemailone == self.email_one:
                        #     if tmpstatus == 'Complete':
                        #         tmparr_stepstatus.append('Y')
                        #     if tmpstatus == 'Incomplete':
                        #         if tmpbefore_status == 'Complete':
                        #             tmparr_stepstatus.append(tmpstatus)
                        #         else:
                        #             tmparr_stepstatus.append('N')
                        #         tmparr_stepstatus.append('N')
                        #     elif tmpstatus == 'Complete':
                        #         tmparr_stepstatus.append('Z')
                        tmp_arr_status_group_001.append(tmpstatus)
                    if 'Reject' in tmparr_stepstatus:
                        tmp_text_status = 'R'
                        tmp_text_status_string = 'เอกสารที่ส่งคืนแก้ไข'
                    elif 'Wait_input' in tmparr_stepstatus:
                        tmp_text_status = 'WI'
                        tmp_text_status_string = 'รอคุณกรอกข้อมูล'
                    elif 'V' in tmparr_stepstatus:   
                        tmp_text_status = 'V'
                        tmp_text_status_string = 'ดูเอกสาร'
                    elif 'Progress' in tmparr_stepstatus and 'Wait' in tmparr_stepstatus:
                        tmp_text_status = 'Z'
                        tmp_text_status_string = 'อยู่ในช่วงดำเนินการ'
                    elif 'Wait' in tmparr_stepstatus:
                        tmp_text_status = 'W'
                        tmp_text_status_string = 'รอคุณอนุมัติ'
                    elif 'Incomplete' in tmparr_stepstatus:
                        tmp_text_status = 'Z'
                        tmp_text_status_string = 'อยู่ในช่วงดำเนินการ'
                    elif 'Progress' in tmparr_stepstatus:
                        tmp_text_status = 'N'
                        tmp_text_status_string = 'กำลังดำเนินการ'                    
                    elif tmparr_stepstatus.count('Incomplete') >= 2:
                        tmp_text_status = 'Z'
                        tmp_text_status_string = 'อยู่ในช่วงดำเนินการ'
                    elif 'Incomplete' in tmparr_stepstatus and 'Complete' in tmparr_stepstatus:
                        tmp_text_status = 'N'
                        tmp_text_status_string = 'กำลังดำเนินการ'
                    else:
                        tmp_text_status_string = 'อนุมัติแล้ว'
                    
                        # print(tmp_status_group[z])
                    if tmp_sidgroup != None:
                        tmp_sidgroup = eval(tmp_sidgroup)
                    if tmp_updatetime != None:
                        tmp_updatetime = tmp_updatetime
                        tmp_datetimeString = str(tmp_updatetime).split('+')[0]
                    if tmp_group_other != None:
                        tmp_group_other = eval(tmp_group_other)
                        for i in range(len(tmp_group_other)):
                            if 'color' in tmp_group_other[i]:
                                tmp_color = tmp_group_other[i]['color']
                    if tmp_group_data_json != None:
                        tmp_group_data_json = eval(tmp_group_data_json)
                        for o in range(len(tmp_group_data_json)):
                            if 'data_sum' in tmp_group_data_json[o]:
                                tmp_data_sum = tmp_group_data_json[o]['data_sum']
                                for z in range(len(tmp_data_sum)):
                                    if 'name' in tmp_data_sum[z]:
                                        tmp_key = str(tmp_data_sum[z]['name']).replace(' ','')
                                        tmp_value = (tmp_data_sum[z]['value'])
                                        json_tmp[tmp_key] = tmp_value
                                        # arr_data_sum.append({tmp_key:tmp_value})
                                tmp_arr_data_sum_01.append(json_tmp)
                            else:
                                if len(tmp_group_data_json[o]) != 0:
                                    # if len(tmp_group_data_json[o][0]) != 0:
                                    #     tmp_arr_data_sum_01.append(tmp_group_data_json[o][0])
                                    if 'CustomerName' in tmp_group_data_json[o][0]:
                                        tmp_arr_data_sum_01.append(tmp_group_data_json[o][0])
                    tmp_arrjson.append({
                        'group_id':tmp_groupid,
                        'sid_group':tmp_sidgroup,
                        'color_group':tmp_color,
                        'datetime':int(tmp_updatetime.timestamp()),
                        'datetime_string':tmp_datetimeString,
                        'document_count':len(tmp_sidgroup),
                        'document_data':tmp_arr_data_sum_01,
                        'status_group':tmp_text_status,
                        'status_group_string':tmp_text_status_string,
                        'viewgroup':status_viewGroup
                    })
                    if len(tmp_arrjson) != 0:
                        list_arr = sorted(tmp_arrjson, key=lambda k: k['datetime'], reverse=True)
                    else:
                        return {'result':'ER','messageER':'data not found'}
                return {'result':'OK','messageText':list_arr}
            else:
                return {'result':'ER','messageER':'data not found'}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(e)}

    def select_group_list_email_new_v2(self,email_one):
        self.email_one = email_one
        tmp_arrjson = []
        list_arr = []
        try:
            tmp_query = tb_group_document.query.filter(or_(tb_group_document.email_view_group.contains(self.email_one),tb_group_document.status_group.contains(self.email_one)),tb_group_document.status=='ACTIVE').all()
            if len(tmp_query) != 0:
                for n in range(len(tmp_query)):
                    tmp_arr_status_group = []
                    tmp_arr_status_email = []
                    tmp_arr_status_group_001 = []
                    tmparr_stepstatus = []
                    arr_email_list = []
                    json_tmp = {}
                    tmp_text_status = 'Y'
                    tmp_text_status_string = 'อนุมัติแล้ว'
                    tmp_arr_data_sum_01 = []
                    tmp_json = tmp_query[n].__dict__
                    if '_sa_instance_state' in tmp_json:
                        del tmp_json['_sa_instance_state']
                    # print(tmp_json)
                    
                    tmp_color = None
                    tmp_average = None
                    tmp_groupid = tmp_json['id']
                    tmp_sidgroup = tmp_json['sid_group']
                    tmp_updatetime = tmp_json['updatetime']
                    tmp_status = tmp_json['status']
                    tmp_group_other = tmp_json['group_other']
                    tmp_group_data_json = tmp_json['group_data_json']
                    tmp_status_group = tmp_json['status_group']
                    tmp_email_view_group = tmp_json['email_view_group']
                    status_viewGroup = False
                    if tmp_email_view_group != None:
                        tmp_email_view_group = eval(tmp_email_view_group)
                        if len(tmp_email_view_group) != 0:
                            for z in range(len(tmp_email_view_group)):
                                if self.email_one in tmp_email_view_group[z]['email_view_group']:
                                    status_viewGroup = True
                    if tmp_status_group != None:
                        tmp_status_group = eval(tmp_status_group)
                        for z in range(len(tmp_status_group)):
                            tmpstatusgroup = tmp_status_group[z]
                            tmp_arr_status_group.append(tmpstatusgroup['status'])
                            tmp_arr_status_email.append(tmpstatusgroup['email_one'])
                    # print(tmp_arr_status_group)
                    # print(tmp_arr_status_email)
                    count_email = tmp_arr_status_email.count(self.email_one)
                    for g in range(len(tmp_arr_status_group)):
                        tmpstatus = tmp_arr_status_group[g]
                        tmpemailone = tmp_arr_status_email[g]
                        if type(tmpemailone) is list:
                            for h in tmpemailone:
                                if self.email_one == h:
                                    my_status = tmpstatus
                                    tmpemailone = self.email_one
                        if tmpemailone == self.email_one:
                            my_status = tmpstatus
                        # print(my_status)
                        index_stepnum = g - 1
                        tmpbefore_status = tmp_arr_status_group[index_stepnum]
                        tmpbefore_emailone = tmp_arr_status_email[index_stepnum] 
                        if 'Reject' in tmp_arr_status_group:
                            step_now = g
                            tmparr_stepstatus.append('Reject')
                        elif tmpemailone == self.email_one and my_status == 'Incomplete_input':
                            step_now = g
                            tmparr_stepstatus.append('Wait_input')
                        elif tmpemailone == self.email_one and my_status == 'Incomplete_1':
                            step_now = g
                            tmparr_stepstatus.append('Incomplete')
                        elif tmpemailone == self.email_one and my_status == 'Incomplete':                                      
                            if self.email_one not in arr_email_list:
                                index_step_me = g
                                if index_step_me != 0:
                                    while index_step_me > 0:
                                        if len(tmparr_stepstatus) == 0:
                                            index_step_me = index_step_me - 1
                                            if tmp_arr_status_group[index_step_me] == 'Incomplete_1':
                                                step_now = g
                                                tmparr_stepstatus.append('Incomplete')
                                            elif tmp_arr_status_group[index_step_me] == 'Incomplete':
                                                step_now = g
                                                tmparr_stepstatus.append('Incomplete')
                                            else:
                                                step_now = g
                                                tmparr_stepstatus.append('Wait')
                                            arr_email_list.append(self.email_one)
                                        else:
                                            index_step_me = index_step_me - 1
                                            continue
                                else:
                                    step_now = g
                                    tmparr_stepstatus.append('Wait')
                        elif tmpemailone == self.email_one and my_status == 'Complete':                                    
                            if self.email_one not in arr_email_list:
                                if count_email == 1:
                                    for nz in range(g,len(tmp_arr_status_group),1):
                                        if self.email_one in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Incomplete':
                                            step_now = g
                                            tmparr_stepstatus.append('Wait')
                                        elif self.email_one not in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Incomplete':
                                            step_now = g
                                            tmparr_stepstatus.append('Progress')
                                    arr_email_list.append(self.email_one)
                                else:                                                
                                    for nz in range(g,len(tmp_arr_status_group),1):
                                        if self.email_one not in arr_email_list:
                                            if self.email_one in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Complete':
                                                pass                                                    
                                            if self.email_one in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Incomplete':
                                                step_now = step_num_int2
                                                tmparr_stepstatus.append('Wait')
                                                arr_email_list.append(self.email_one)
                                            if self.email_one not in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Incomplete':
                                                step_now = step_num_int2
                                                tmparr_stepstatus.append('Progress')
                                                arr_email_list.append(self.email_one)
                        # if tmpemailone == self.email_one:
                        #     if tmpstatus == 'Complete':
                        #         tmparr_stepstatus.append('Y')
                        #     if tmpstatus == 'Incomplete':
                        #         if tmpbefore_status == 'Complete':
                        #             tmparr_stepstatus.append(tmpstatus)
                        #         else:
                        #             tmparr_stepstatus.append('N')
                        #         tmparr_stepstatus.append('N')
                        #     elif tmpstatus == 'Complete':
                        #         tmparr_stepstatus.append('Z')
                        tmp_arr_status_group_001.append(tmpstatus)
                    if 'Reject' in tmparr_stepstatus:
                        tmp_text_status = 'R'
                        tmp_text_status_string = 'เอกสารที่ส่งคืนแก้ไข'
                    elif 'Wait_input' in tmparr_stepstatus:
                        tmp_text_status = 'WI'
                        tmp_text_status_string = 'รอคุณกรอกข้อมูล'
                    elif 'V' in tmparr_stepstatus:   
                        tmp_text_status = 'V'
                        tmp_text_status_string = 'ดูเอกสาร'
                    elif 'Progress' in tmparr_stepstatus and 'Wait' in tmparr_stepstatus:
                        tmp_text_status = 'Z'
                        tmp_text_status_string = 'อยู่ในช่วงดำเนินการ'
                    elif 'Wait' in tmparr_stepstatus:
                        tmp_text_status = 'W'
                        tmp_text_status_string = 'รอคุณอนุมัติ'
                    elif 'Incomplete' in tmparr_stepstatus:
                        tmp_text_status = 'Z'
                        tmp_text_status_string = 'อยู่ในช่วงดำเนินการ'
                    elif 'Progress' in tmparr_stepstatus:
                        tmp_text_status = 'N'
                        tmp_text_status_string = 'กำลังดำเนินการ'                    
                    elif tmparr_stepstatus.count('Incomplete') >= 2:
                        tmp_text_status = 'Z'
                        tmp_text_status_string = 'อยู่ในช่วงดำเนินการ'
                    elif 'Incomplete' in tmparr_stepstatus and 'Complete' in tmparr_stepstatus:
                        tmp_text_status = 'N'
                        tmp_text_status_string = 'กำลังดำเนินการ'
                    else:
                        tmp_text_status_string = 'อนุมัติแล้ว'
                    
                        # print(tmp_status_group[z])
                    if tmp_sidgroup != None:
                        tmp_sidgroup = eval(tmp_sidgroup)
                    if tmp_updatetime != None:
                        tmp_updatetime = tmp_updatetime
                        tmp_datetimeString = str(tmp_updatetime).split('+')[0]
                    if tmp_group_other != None:
                        tmp_group_other = eval(tmp_group_other)
                        for i in range(len(tmp_group_other)):
                            if 'color' in tmp_group_other[i]:
                                tmp_color = tmp_group_other[i]['color']
                    if tmp_group_data_json != None:
                        tmp_group_data_json = eval(tmp_group_data_json)
                        for o in range(len(tmp_group_data_json)):
                            if 'data_sum' in tmp_group_data_json[o]:
                                tmp_data_sum = tmp_group_data_json[o]['data_sum']
                                for z in range(len(tmp_data_sum)):
                                    if 'name' in tmp_data_sum[z]:
                                        tmp_key = str(tmp_data_sum[z]['name']).replace(' ','')
                                        tmp_value = (tmp_data_sum[z]['value'])
                                        json_tmp[tmp_key] = tmp_value
                                        # arr_data_sum.append({tmp_key:tmp_value})
                                tmp_arr_data_sum_01.append(json_tmp)
                            else:
                                if len(tmp_group_data_json[o]) != 0:
                                    tmp_arr_data_sum_01.append(tmp_group_data_json[o][0])
                                    # if len(tmp_group_data_json[o][0]) != 0:
                                    #     tmp_arr_data_sum_01.append(tmp_group_data_json[o][0])
                                    # if 'CustomerName' in tmp_group_data_json[o][0]:
                                    #     tmp_arr_data_sum_01.append(tmp_group_data_json[o][0])
                    tmp_arrjson.append({
                        'group_id':tmp_groupid,
                        'sid_group':tmp_sidgroup,
                        'color_group':tmp_color,
                        'datetime':int(tmp_updatetime.timestamp()),
                        'datetime_string':tmp_datetimeString,
                        'document_count':len(tmp_sidgroup),
                        'document_data':tmp_arr_data_sum_01,
                        'status_group':tmp_text_status,
                        'status_group_string':tmp_text_status_string,
                        'viewgroup':status_viewGroup
                    })
                    if len(tmp_arrjson) != 0:
                        list_arr = sorted(tmp_arrjson, key=lambda k: k['datetime'], reverse=True)
                    else:
                        return {'result':'ER','messageER':'data not found'}
                return {'result':'OK','messageText':list_arr}
            else:
                return {'result':'ER','messageER':'data not found'}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(e)}

    def select_user_first(self,sid):
        self.sid = sid
        list_user = []
        tmp_user ={}
        try:
            result_query = db.session.query(\
                paper_lesssender,
                paper_lessuserProfile
                )\
                .join(paper_lesssender,paper_lesssender.send_user==paper_lessuserProfile.p_username)\
                .filter(paper_lesssender.step_data_sid == self.sid)\
                .first()
            for u in range(len(result_query)):
                tmpjson = result_query[u].__dict__
                if '_sa_instance_state' in tmpjson:
                    del tmpjson['_sa_instance_state']
            tmp_user['username'] = tmpjson['p_username']
            tmp_user['userid'] = tmpjson['p_userid']
            return {'result':'OK','messageText':tmp_user}
        except Exception as e:
            print(str(e))
            return {'result':'ER','messageText':str(e)}

    def select_filter_sidcode_to_group_v1(self,sidcode):
        self.sidcode = sidcode
        tmp_sid_code_list = []
        tmp_sidcode = []
        try:
            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(and_(paper_lesssender.status=='ACTIVE',paper_lesssender.document_status=='N',paper_lesssender.step_data_sid.in_(self.sidcode)))\
                .order_by(desc(paper_lesssender.send_time))\
                .all()
            if len(query_temp) != 0:
                for u in range(len(query_temp)):
                    for z in range(len(query_temp[u])):
                        if z == 0:
                            tmp_dict_json = query_temp[u][z].__dict__
                            # if '_sa_instance_state' in tmp_dict_json:
                            #     del tmp_dict_json['_sa_instance_state']
                            tmp_sicode = tmp_dict_json['step_data_sid']
                            print(tmp_sicode)
                            tmp_sid_code_list.append(tmp_sicode)
                            tmp_send_time = tmp_dict_json['send_time']
                            tmp_document_id = tmp_dict_json['doc_id']
                            tmp_tracking_id = tmp_dict_json['tracking_id']
                            tmp_sender_name = tmp_dict_json['sender_name']
                            tmp_sender_email = tmp_dict_json['sender_email']
                            tmp_file_name = tmp_dict_json['file_name']
                            tmp_group_id = tmp_dict_json['group_id']
                            statusGroup_detail = False
                            if tmp_group_id != None:
                                tmp_group_id = eval(tmp_group_id)
                                if len(tmp_group_id) != 0:
                                    statusGroup_detail = True
                        if z == 1:
                            arr_temp_step_group = []
                            tmp_dict_json = query_temp[u][z].__dict__
                            # if '_sa_instance_state' in tmp_dict_json:
                            #     del tmp_dict_json['_sa_instance_state']
                            tmp_sign_page_options = tmp_dict_json['sign_page_options']
                            tmp_document_type = tmp_dict_json['documentType']
                            if tmp_dict_json['options_page'] != None:
                                tmp_op = eval(tmp_dict_json['options_page'])
                                tmp_options_page = [eval(tmp_dict_json['options_page'])]
                            else:
                                tmp_options_page = []
                            if statusGroup_detail == False:
                                if 'group_detail' in tmp_op:
                                    tmp_group_detail = tmp_op['group_detail']
                                    if 'group_status' in tmp_group_detail:
                                        tmp_status_group = tmp_group_detail['group_status']
                                        if tmp_status_group == True:
                                            tmpstep_group = tmp_group_detail['step_num']
                                            for n in range(len(tmpstep_group)):
                                                # print(tmpstep_group[n])
                                                arr_temp_step_group.append(tmpstep_group[n])
                            if tmp_dict_json['documentJson'] != None:
                                documentJson_result = eval(tmp_dict_json['documentJson'])
                                documentName = documentJson_result['document_name']
                                documentType = documentJson_result['document_type']
                            else:
                                documentName = None
                                documentType = None
                            if tmp_dict_json['urgent_type'] != None:
                                documentUrgentType = tmp_dict_json['urgent_type']
                                if documentUrgentType == 'I':
                                    documentUrgentString = 'ด่วนมาก'
                                elif documentUrgentType == 'U':
                                    documentUrgentString = 'ด่วน'
                                elif documentUrgentType == 'M':
                                    documentUrgentString = 'ปกติ'
                        if z == 2:
                            tmp_dict_json = query_temp[u][z].__dict__
                            tmp_biz_info = None 
                            # if '_sa_instance_state' in tmp_dict_json:
                            #     del tmp_dict_json['_sa_instance_state']
                            step_now2 = 0
                            step_now = None
                            tmprole_name = None
                            tmpdept_name = None
                            tmprole_level = None
                            jsonData_eval = eval(tmp_dict_json['data_json'])
                            arr_step_info = []
                            if tmp_dict_json['biz_info'] != None or tmp_dict_json['biz_info'] != '':
                                if tmp_dict_json['biz_info'] != 'None':
                                    tmp_biz_info = None
                                    eval_biz_info = eval(tmp_dict_json['biz_info'])
                                    if 'role_name' in eval_biz_info:
                                        tmprole_name = eval_biz_info['role_name']
                                    if 'dept_name' in eval_biz_info:
                                        tmpdept_name = eval_biz_info['dept_name']
                                    if 'role_level' in eval_biz_info:
                                        tmprole_level = eval_biz_info['role_level']
                                    if 'dept_name' in eval_biz_info:            
                                        tmp_biz_info = {
                                            'tax_id':eval_biz_info['id_card_num'],
                                            'role_name' : tmprole_name,
                                            'dept_name' : tmpdept_name,
                                            'role_level' : tmprole_level          
                                        }                                
                                    elif 'dept_name' not in eval_biz_info:
                                        tmp_biz_info = {
                                            'tax_id':eval_biz_info['id_card_num'],
                                            'role_name' : tmprole_name,
                                            'dept_name' : [],
                                            'role_level' : tmprole_level              
                                        }
                            tmp_list_step_infomation = []
                            if 'step_num' in jsonData_eval:
                                tmp_step_info = [eval(tmp_dict_json['data_json'])]
                            else:
                                tmp_step_info = eval(tmp_dict_json['data_json'])
                            if 'step_num' in jsonData_eval:
                                tmp_list_step_infomation.append(jsonData_eval)
                                jsonData_eval = tmp_list_step_infomation

                            if 'step_num' in jsonData_eval:
                                step_status = ''
                                step_before = ''
                                res_status_file = 'Y'
                                arr_step_totle = []
                                json_data_info = jsonData_eval
                                if 'step_detail' in json_data_info:
                                    for s in range(len(json_data_info['step_detail'])):
                                        json_info_step2 = {}
                                        for u in range(len(json_data_info['step_detail'][s]['activity_code'])):
                                            oneMail = str(json_data_info['step_detail'][s]['one_email']).replace(' ','').lower()
                                            if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
                                                if step_before == '':
                                                    try:
                                                        if json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Complete':
                                                            step_before = 'Complete'
                                                        elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Approve':
                                                            step_before = 'Complete'
                                                        elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Reject':
                                                            step_before = 'Reject'
                                                    except Exception as e:
                                                        step_before = ''
                                                if step_before != 'Reject':
                                                    if json_data_info['step_detail'][s]['activity_status'][u] == 'Complete':
                                                        step_status = 'Complete'
                                                    elif json_data_info['step_detail'][s]['activity_status'][u] == 'Approve':
                                                        step_status = 'Complete'
                                                    elif json_data_info['step_detail'][s]['activity_status'][u] == 'Reject':
                                                        step_status = 'Reject'
                                                    else:
                                                        try:
                                                            step_status  = 'Incomplete'
                                                        except Exception as ex:
                                                            step_status = 'Incomplete'
                                                arr_step_info.append(step_status)
                                                arr_step_info.append(step_before)
                                if 'Reject' in arr_step_info:
                                    res_status_file = 'R'
                                    res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                                elif 'Complete' in arr_step_info:
                                    res_status_file = 'Y'
                                    res_status_file_string = 'อนุมัติแล้ว'
                                elif 'Waitting' in arr_step_info:
                                    res_status_file = 'W'
                                    res_status_file_string = 'รอคุณอนุมัติ'
                                elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                                    res_status_file = 'W'
                                    res_status_file_string = 'รอคุณอนุมัติ'
                                else:
                                    res_status_file_string = 'อนุมัติแล้ว'
                                if res_status_file == 'W':
                                    statusFile_count_wait = statusFile_count_wait + 1
                                elif res_status_file == 'Y':
                                    statusFile_count_approve = statusFile_count_approve + 1
                                elif res_status_file == 'R':
                                    statusFile_count_reject = statusFile_count_reject + 1
                                else:
                                    statusFile_count_pendding = statusFile_count_pendding + 1
                            else:
                                tmp_sum_email = []
                                step_status = ''
                                res_status_file = 'Y'
                                res_status_file_string = ''
                                step_before = ''
                                step_list_before = []
                                step_list_ = []
                                step_list_next = []
                                arr_step_totle = []
                                step_me = ''
                                step_sum_status = []
                                sum_status_step_list = []
                                list_check_step = []
                                step_list_data = []
                                max_step = (len(jsonData_eval))
                                step_infomation = jsonData_eval
                                sum_status_step = []
                                tmp_status_sum = []
                                tmp_acvt_code_sum = []
                                arr_email_list = []
                                email_step_sum = []
                                arr_04_sid = []
                                for i in range(len(step_infomation)):
                                    list_check_step = []
                                    json_step_info_2 = {}
                                    step_list_data = []
                                    step_status = []
                                    step_email = []
                                    tmp_acvt_code = []
                                    tmp_keep_status = []
                                    tmp_acvt_status = []
                                    step_ = step_infomation[i]
                                    step_num = step_infomation[i]['step_num']
                                    json_step_info_2['step_status'] = ''
                                    tmp_step_detail = step_['step_detail']
                                    for u in range(len(tmp_step_detail)):
                                        tmp_arr_step_detail = tmp_step_detail[u]
                                        tmp_status = tmp_arr_step_detail['activity_status']
                                        tmp_code = tmp_arr_step_detail['activity_code']
                                        tmp_email = tmp_arr_step_detail['one_email']
                                        for s in range(len(tmp_code)):
                                            if tmp_code[s] == 'A03':
                                                tmp_acvt_code.append(tmp_code[s])
                                                step_status.append(tmp_status[s])
                                                tmp_acvt_status.append(tmp_status[s])
                                                step_email.append(tmp_email)
                                                tmp_sum_email.append(tmp_email)
                                    email_step_sum.append(step_email)
                                    if 'step_sign' in step_:
                                        tmp_step_sign = step_['step_sign']
                                        if tmp_step_sign['status'] == True:
                                            len_step_status = len(tmp_step_sign['data'])
                                            if 'Complete' in step_status and step_status.count('Complete') == len_step_status:
                                                tmp_status_sum.append('Complete')
                                            else:
                                                for tyy in range(len(tmp_step_detail)):
                                                    tmp_arr_step_detail = tmp_step_detail[tyy]
                                                    tmp_status = tmp_arr_step_detail['activity_status']
                                                    tmp_code = tmp_arr_step_detail['activity_code']
                                                    tmp_email = tmp_arr_step_detail['one_email']                                        
                                                if 'Incomplete' not in tmp_keep_status:
                                                    tmp_status_sum.append('Incomplete_1')
                                                    tmp_keep_status.append('Incomplete')  
                                        else:
                                            if 'Reject' in step_status:
                                                tmp_status_sum.append('Reject')
                                            elif 'Approve' in step_status:
                                                tmp_status_sum.append('Complete')
                                            elif 'Complete' in step_status:
                                                tmp_status_sum.append('Complete')
                                            elif 'Incomplete' in step_status:
                                                tmp_status_sum.append('Incomplete')
                                            elif 'Pending' in step_status:
                                                tmp_status_sum.append('Incomplete')
                                            else:
                                                tmp_status_sum.append('Complete')
                                    else:
                                        if 'Reject' in step_status:
                                            tmp_status_sum.append('Reject')
                                        elif 'Approve' in step_status:
                                            tmp_status_sum.append('Complete')
                                        elif 'Complete' in step_status:
                                            tmp_status_sum.append('Complete')
                                        elif 'Incomplete' in step_status:
                                            tmp_status_sum.append('Incomplete')
                                        elif 'Pending' in step_status:
                                            tmp_status_sum.append('Incomplete')
                                        else:
                                            tmp_status_sum.append('Complete')
                                if len(tmp_status_sum) != 0:
                                    # count_email = tmp_sum_email.count(self.emailUser)
                                    for zzi in range(len(step_infomation)):
                                        list_check_step = []
                                        json_step_info_2 = {}
                                        step_list_data = []
                                        step_status = []
                                        step_ = step_infomation[zzi]
                                        step_num = step_infomation[zzi]['step_num']
                                        json_step_info_2['step_status'] = ''
                                        tmp_step_detail = step_['step_detail']
                                        
                                        for zi in range(len(tmp_step_detail)):
                                            tmp_arr_step_detail_2 = tmp_step_detail[zi]
                                            oneMail = str(tmp_arr_step_detail_2['one_email']).replace(' ','').lower()            
                                            tmp_step_me = int(step_num) - 1
                                            step_num_int2 = int(step_num)
                                            stop = False
                                            for ii in range(len(tmp_status_sum)):
                                                if stop == False :
                                                    list_status = Counter(tmp_status_sum)
                                                    if 'Complete' in list_status and len(list_status) == 1 :
                                                        step_now2 = len(tmp_status_sum)
                                                        stop = True
                                                    elif tmp_status_sum[ii] == 'Incomplete' or tmp_status_sum[ii] == 'Reject' or tmp_status_sum[ii] == 'Approve':
                                                        step_now2 = ii+1
                                                        stop = True
                                            if step_now == None:                                  
                                                step_now = step_num_int2
                            arr_temp_step_group.sort()
                            if len(arr_temp_step_group) != 0:
                                # tmparrreult = sorted(arr_temp_step_group)
                                # print(arr_temp_step_group , 'arr_temp_step_group')
                                if step_now2 == arr_temp_step_group[0]:
                                    if tmp_status_sum[tmp_step_me] == 'Incomplete':
                                        tmp_sidcode.append(tmp_sicode)
                if len(tmp_sidcode) != 0:
                    return {'result':'OK','messageText':tmp_sidcode}
                else:
                    return {'result':'ER','messageText':None}
            else:
                return {'result':'ER','messageText':None}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

    def select_step_code_togroup_v1(self,stepcode):
        self.stepcode = stepcode
        arr_sidcode = []
        arr_stepcode = []
        try:
            for n in range(len(self.stepcode)):
                arr_tmpsidcode = []
                tmp_stepcode = self.stepcode[n]
                tmp_query = paper_lesstrack.query.filter(paper_lesstrack.step_Code==tmp_stepcode).all()
                if len(tmp_query) != 0:
                    for z in range(len(tmp_query)):
                        tmp_json = tmp_query[z].__dict__
                        if tmp_json['step_data_sid'] != None:
                            arr_tmpsidcode.append(tmp_json['step_data_sid'])
                arr_sidcode.append(arr_tmpsidcode)
                arr_stepcode.append(tmp_stepcode)
            return {'result':'OK','messageText':{'data':arr_sidcode,'stepcode':arr_stepcode}}
                # else:
                #     return {'result':'ER','messageText': None,'messageER':'data not found'}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

    def select_dashboard_collect_one_v1(self,group_id,emailUser):
        self.emailUser = emailUser
        self.group_id = group_id
        try:
            tmp_query = tb_group_document.query.filter(tb_group_document.id==self.group_id,tb_group_document.status=='ACTIVE').first()
            if tmp_query != None:
                tmp_group_id = tmp_query.id
                tmp_sidcode_group = eval(tmp_query.sid_group)
                tmp_data_group = eval(tmp_query.data_group)
                tmp_updatetime = tmp_query.updatetime
                tmp_email_group = eval(tmp_query.email_group)
                tmp_create_by = tmp_query.create_by
                tmp_update_by = tmp_query.update_by
                tmp_step_group = tmp_query.step_group
                tmp_pdf_org = tmp_query.pdf_org
                tmp_pdf_sign = tmp_query.pdf_sign
                tmp_step_group_detail = tmp_query.step_group_detail
                tmp_group_data_json = tmp_query.group_data_json
                json_tmp = {}
                tmp_arr_data_sum_01 = []
                if tmp_group_data_json != None:
                    tmp_group_data_json = eval(tmp_group_data_json)
                    for o in range(len(tmp_group_data_json)):
                        if 'data_sum' in tmp_group_data_json[o]:
                            tmp_data_sum = tmp_group_data_json[o]['data_sum']
                            for z in range(len(tmp_data_sum)):
                                if 'name' in tmp_data_sum[z]:
                                    tmp_key = str(tmp_data_sum[z]['name']).replace(' ','')
                                    tmp_value = (tmp_data_sum[z]['value'])
                                    json_tmp[tmp_key] = tmp_value
                                    # arr_data_sum.append({tmp_key:tmp_value})
                            tmp_arr_data_sum_01.append(json_tmp)
                        else:
                            # if len(tmp_arr_data_sum_01) != 0:
                            tmp_arr_data_sum_01.append(tmp_group_data_json[o][0])
                if len(tmp_sidcode_group) != 0:
                    arr_tmp = []
                    arr_group_info = []
                    for z in range(len(tmp_sidcode_group)):
                        tmpsidcode = tmp_sidcode_group[z]
                        tmp_query = db.session.query(
                        paper_lessdatastep,
                        paper_lesssender,
                        paper_lessdocument,
                        paper_lesspdf,
                        # paper_lessstep
                        )\
                        .join(paper_lesssender,paper_lesssender.step_data_sid==paper_lessdatastep.sid)\
                        .join(paper_lessdocument,paper_lessdocument.step_id==paper_lessdatastep.sid)\
                        .join(paper_lesspdf,paper_lesspdf.fid==paper_lessdocument.fileid)\
                        .filter(paper_lessdatastep.sid==tmpsidcode)\
                        .all()
                        arr_step_info = []
                        list_step_email = []
                        sign_detail = []
                        sign_data = []
                        tmp_status_file_code = 'Y'
                        tmp_status_file_string = ''
                        list_sign_info = []
                        require_sign_info = []
                        sign_detail_require = []
                        tmp_tempname = ''
                        tmp_condition = ''
                        for n in range(len(tmp_query)):
                            for u in range(len(tmp_query[n])):
                                if u == 1:
                                    tmpjson_sender = tmp_query[n][u].__dict__
                                    tmp_datetime = tmpjson_sender['send_time']
                                    tmp_step_code = tmpjson_sender['step_code']                        
                                    if str(tmp_step_code).replace(' ','') != '':
                                        result_template = paper_lessstep.query.filter(paper_lessstep.step_Code==tmp_step_code,paper_lessstep.status=='ACTIVE').first()
                                        if result_template != None:
                                            tmp_tempname = str(result_template.step_Name)
                                            tmp_condition = str(result_template.condition_temp)
                                    document_timestamp = int(tmp_datetime.timestamp())
                                    tmp_datetime_display = convert_datetime_TH_2_display_sendTime(document_timestamp)
                                    try:
                                        tmp_email_center = eval(tmpjson_sender['email_center'])
                                    except Exception as e:
                                        tmp_email_center = tmpjson_sender['email_center']
                                if u == 0:
                                    tmpjson = tmp_query[n][u].__dict__
                                    del tmpjson['_sa_instance_state']
                                    step_infomation = eval(tmpjson['data_json'])
                                    tmp_file_user_status_detail = []
                                    tmp_sign_detail_list = []
                                    tmp_list_step_infomation = []
                                    # print(step_infomation)
                                    if 'step_num' in step_infomation:
                                        tmp_step_info = [eval(tmpjson['data_json'])]
                                    else:
                                        tmp_step_info = eval(tmpjson['data_json'])
                                    if 'step_num' in step_infomation:
                                        tmp_list_step_infomation.append(step_infomation)
                                        step_infomation = tmp_list_step_infomation
                                    step_status = ''
                                    res_status_file = 'Y'
                                    step_before = ''
                                    step_list_before = []
                                    step_list_ = []
                                    step_list_next = []
                                    arr_step_totle = []
                                    step_me = ''
                                    step_sum_status = []
                                    sum_status_step_list = []
                                    list_check_step = []
                                    step_list_data = []
                                    max_step = (len(step_infomation))
                                    sum_status_step = []
                                    tmp_status_sum = []
                                    arr_email_list = []
                                    email_step_sum = []
                                    email_one_sum = []
                                    time_success = None
                                    step_time_1 = []
                                    sendtime = tmpjson['upload_time']
                                    list_my_email = []
                                    tmp_list_sign_id = []
                                    sign_info_id = []
                                    for i in range(len(step_infomation)):
                                        list_check_step = []
                                        json_step_info_2 = {}
                                        step_list_data = []
                                        step_status = []
                                        step_email = []
                                        tmp_step_num = ''
                                        step_ = step_infomation[i]
                                        step_num = step_infomation[i]['step_num']
                                        json_step_info_2['step_status'] = ''
                                        tmp_step_detail = step_['step_detail']
                                        for u in range(len(tmp_step_detail)):
                                            tmp_arr_step_detail = tmp_step_detail[u]
                                            tmp_status = tmp_arr_step_detail['activity_status']
                                            tmp_code = tmp_arr_step_detail['activity_code']
                                            tmp_activity_data = tmp_arr_step_detail['activity_data']
                                            for js in range(len(tmp_activity_data)):
                                                if 'id' in tmp_activity_data[js]:
                                                    tmp_list_sign_id.append(tmp_activity_data[js]['id'])
                                            tmp_email = str(tmp_arr_step_detail['one_email']).replace(' ','').lower()
                                            # print(tmp_email)
                                            if tmp_email == self.emailUser:                                    
                                                tmp_step_num = u
                                                for hg in range(len(tmp_code)):
                                                    if tmp_code[hg] == 'A03':
                                                        sign_detail_require = []
                                                        tmp_activity_data = tmp_arr_step_detail['activity_data'][hg]
                                                        if 'status' in tmp_activity_data:
                                                            if tmp_activity_data['status'] == 'incomplete':
                                                                sign_detail_require.append(tmp_activity_data)
                                                                list_my_email.append(u)
                                                if 'step_sign' in  step_infomation[i]:
                                                    if  step_infomation[i]['step_sign']['status'] == True:
                                                        tmp_data_ssign = step_infomation[i]['step_sign']['data']
                                                        for zy in range(len(tmp_data_ssign)):
                                                            if 'step_index' in tmp_data_ssign[zy]: 
                                                                if len(tmp_data_ssign[zy]['step_index']) != 0:
                                                                    # print(tmp_step_num , tmp_data_ssign[zy]['step_index'])
                                                                    if tmp_step_num in tmp_data_ssign[zy]['step_index']:
                                                                        if  tmp_data_ssign[zy]['status'] == 'incomplete':
                                                                            sign_detail_require.append(tmp_data_ssign[zy])
                                                                else:
                                                                    if 'id' in tmp_data_ssign[zy]:
                                                                        if tmp_data_ssign[zy]['id'] not in tmp_list_sign_id:
                                                                            if  tmp_data_ssign[zy]['status'] == 'incomplete':
                                                                                sign_detail_require.append(tmp_data_ssign[zy])
                                                                    else:
                                                                        sign_detail_require.append(tmp_data_ssign[zy])
                                                # print(sign_detail_require , step_num)
                                                info_step = {
                                                    'data':sign_detail_require,
                                                    'step_num':step_num
                                                }
                                                require_sign_info.append(info_step)
                                            for s in range(len(tmp_code)):
                                                if tmp_code[s] == 'A03':
                                                    step_status.append(tmp_status[s])
                                                    step_email.append(tmp_email)
                                                    email_one_sum.append(tmp_email)
                                                    #process หา timeline
                                                    if (tmp_arr_step_detail['activity_status'][s] == 'Complete' or tmp_arr_step_detail['activity_status'][s] =='Reject' or tmp_arr_step_detail['activity_status'][s] == 'Approve'):
                                                        t1 = str(tmp_arr_step_detail['activity_time'][s])
                                                        # print ('else activity_time',t1)
                                                        time_success = change_to_Timestamp(t1)
                                                        step_time_1.append(time_success)
                                                    #สิ้นสุดการหา timeline
                                            timeline_ = getTimeline(sendtime,step_time_1)
                                            tmp_timeline = timeline_  
                                            list_timeline = getlistTimeline(sendtime,step_time_1)
                                            tmp_timeline_list = list_timeline
                                        email_step_sum.append(step_email)
                                        if 'Reject' in step_status:
                                            tmp_status_sum.append('Reject')
                                        elif 'Approve' in step_status:
                                            tmp_status_sum.append('Complete')
                                        elif 'Complete' in step_status:
                                            tmp_status_sum.append('Complete')
                                        elif 'Incomplete' in step_status:
                                            tmp_status_sum.append('Incomplete')
                                        elif 'Pending' in step_status:
                                            tmp_status_sum.append('Incomplete')
                                        else:
                                            tmp_status_sum.append('Complete')
                                    tmp_sign_pad = None
                                    if self.emailUser in email_one_sum:
                                        for zzi in range(len(step_infomation)):
                                            list_check_step = []
                                            json_step_info_2 = {}
                                            step_list_data = []
                                            step_status = []
                                            step_ = step_infomation[zzi]
                                            step_num = step_infomation[zzi]['step_num']
                                            json_step_info_2['step_status'] = ''
                                            tmp_step_detail = step_['step_detail']
                                            
                                            for zi in range(len(tmp_step_detail)):
                                                tmp_arr_step_detail_2 = tmp_step_detail[zi]
                                                oneMail = str(tmp_arr_step_detail_2['one_email']).replace(' ','').lower()
                                                
                                                tmp_step_me = int(step_num) - 1
                                                step_num_int2 = int(step_num)
                                                if 'Reject' in tmp_status_sum:
                                                    arr_step_info.append('Reject')
                                                elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Incomplete':
                                                    if self.emailUser not in arr_email_list:
                                                        index_step_me = tmp_step_me
                                                        if index_step_me != 0:
                                                            while index_step_me > 0:
                                                                if len(arr_step_info) == 0:
                                                                    index_step_me = index_step_me - 1
                                                                    if tmp_status_sum[index_step_me] == 'Incomplete':
                                                                        arr_step_info.append('Incomplete')
                                                                    else:
                                                                        if oneMail == self.emailUser:
                                                                            if 'signpad' in step_:
                                                                                tmp_sign_pad = step_['signpad']
                                                                            else:
                                                                                tmp_sign_pad = None
                                                                        arr_step_info.append('Wait')
                                                                    arr_email_list.append(self.emailUser)
                                                                else:
                                                                    index_step_me = index_step_me - 1
                                                                    continue
                                                        else:
                                                            if oneMail == self.emailUser:
                                                                if 'signpad' in step_:
                                                                    tmp_sign_pad = step_['signpad']
                                                                else:
                                                                    tmp_sign_pad = None
                                                            arr_step_info.append('Wait')
                                                elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Complete':
                                                    if self.emailUser not in arr_email_list:
                                                        for nz in range(step_num_int2,len(tmp_status_sum),1):
                                                            if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                                arr_step_info.append('Incomplete')
                                                            elif self.emailUser not in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                                arr_step_info.append('Progress')
                                                        arr_email_list.append(self.emailUser)
                                        if 'Reject' in arr_step_info:
                                            res_status_file = 'R'
                                            res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                                        elif 'Wait' in arr_step_info:
                                            res_status_file = 'W'
                                            res_status_file_string = 'รออนุมัติ'
                                        elif 'Incomplete' in arr_step_info:
                                            res_status_file = 'Z'
                                            res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                                        elif 'Progress' in arr_step_info:
                                            res_status_file = 'N'
                                            res_status_file_string = 'กำลังดำเนินการ'                    
                                        elif arr_step_info.count('Incomplete') >= 2:
                                            res_status_file = 'Z'
                                            res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                                        else:
                                            res_status_file = 'Y'
                                            res_status_file_string = 'อนุมัติแล้ว'
                                        tmp_status_file_code = res_status_file
                                        tmp_status_file_string = res_status_file_string
                                        status_step_sum = ''
                                        sum_status_step_list = []
                                        alr_mail = []
                                        # json_data_res['step_info'] = eval(result_Select_step.data_json)
                                        for i in range(len(step_infomation)):
                                            sign_json_info = {}
                                            tmp_sign_list_info = []
                                            step_ = step_infomation[i]
                                            step_num = step_infomation[i]['step_num']
                                            json_step_info_2['step_status'] = ''
                                            if 'step_sign' in step_:
                                                tmp_stepsign = step_['step_sign']
                                                tmp_status_stepsign = tmp_stepsign['status']
                                                if tmp_status_stepsign == True:
                                                    tmp_data_stepsign = tmp_stepsign['data']
                                                    for y in range(len(tmp_data_stepsign)):
                                                        step_signning = tmp_data_stepsign[y]
                                                        if 'id' in step_signning:
                                                            if step_signning['id'] not in tmp_list_sign_id:
                                                                tmp_sign_list_info.append(step_signning)
                                                            else:
                                                                tmp_sign_list_info.append(step_signning)
                                                        else:
                                                            tmp_sign_list_info.append(step_signning)

                                            for u in range(len(step_['step_detail'])):
                                                step_2 = step_['step_detail'][u]
                                                for k in range(len(step_2['activity_data'])): 
                                                    if 'status' in step_2['activity_data'][k]:                                            
                                                        sign_json_info = step_2['activity_data'][k]
                                                        if 'sign_llx' in step_2['activity_data'][k]:
                                                            if 'id' in step_2['activity_data'][k]:
                                                                if step_2['activity_data'][k]['id'] not in tmp_list_sign_id:
                                                                    tmp_sign_list_info.append(sign_json_info)
                                                            else:
                                                                tmp_sign_list_info.append(sign_json_info)
                                            # print(tmp_sign_list_info)
                                            sign_json_info = {
                                                'data':tmp_sign_list_info,
                                                'step_num':step_num
                                            }
                                            # print(sign_json_info)
                                            tmp_sign_detail_list.append(sign_json_info)
                                        for i in range(len(step_infomation)):
                                            list_check_step = []
                                            json_step_info_2 = {}
                                            step_list_data = []
                                            step_ = step_infomation[i]
                                            step_num = step_infomation[i]['step_num']
                                            json_step_info_2['step_status'] = ''
                                            for u in range(len(step_['step_detail'])):
                                                step_2 = step_['step_detail'][u]
                                                for k in range(len(step_2['activity_code'])):
                                                    if step_2['activity_code'][k] == 'A03':
                                                        tmp_one_email = str(step_2['one_email']).replace(' ','').lower()
                                                        if self.emailUser == tmp_one_email:
                                                            if self.emailUser not in alr_mail:

                                                                # print(alr_mail ,step_2['activity_status'][k])
                                                                if step_2['activity_status'][k] == 'Complete':
                                                                    # alr_mail.append(step_2['one_email'])
                                                                    tmp_file_user_status = step_2['activity_status'][k]
                                                                elif step_2['activity_status'][k] == 'Approve':
                                                                    # alr_mail.append(step_2['one_email'])
                                                                    tmp_file_user_status = step_2['activity_status'][k]
                                                                else:
                                                                    alr_mail.append(step_2['one_email'])
                                                                    tmp_file_user_status = step_2['activity_status'][k]

                                                        # print(alr_mail)
                                                        json_step_info = {}
                                                        json_step_info['activity_status'] = step_2['activity_status'][k]
                                                        json_step_info['one_email'] = tmp_one_email
                                                        json_step_info['rf_step'] = None
                                                        json_step_info['ref_step_num'] = None
                                                        if 'rf_step' in step_:
                                                            if step_['rf_step'] != None:
                                                                json_step_info['rf_step'] = step_['rf_step']
                                                                json_step_info['ref_step_num'] = str(step_['rf_step']).split('-')[1]

                                                        tmp_account_name = tmp_one_email
                                                        if json_step_info['one_email'] != '':
                                                            query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(tmp_one_email)).all()
                                                            if len(query_name_account) != 0:
                                                                try:
                                                                    tmp_account_name = eval(query_name_account[0].citizen_data)
                                                                    tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                                                except Exception as e:
                                                                    tmp_account_name = tmp_one_email
                                                                    exc_type, exc_obj, exc_tb = sys.exc_info()
                                                                    fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                                                                    print(exc_type, fname, exc_tb.tb_lineno)
                                                        json_step_info['step_num'] = step_num
                                                        json_step_info['account_name'] = tmp_account_name
                                                        list_check_step.append(json_step_info['activity_status'])
                                                        step_list_data.append(json_step_info)
                                                json_step_info_2['step_info'] = step_list_data
                                            
                                            # print(len(list_check_step))
                                            
                                            if json_step_info_2['step_status'] == '':
                                                if 'Reject' in list_check_step:
                                                    json_step_info_2['step_status'] = 'Reject'
                                                elif 'Approve' in list_check_step:
                                                    json_step_info_2['step_status'] = 'Complete'
                                                elif 'Complete' in list_check_step:
                                                    json_step_info_2['step_status'] = 'Complete'
                                                elif 'Incomplete' in list_check_step:
                                                    json_step_info_2['step_status'] = 'Incomplete'
                                                elif 'Pending' in list_check_step:
                                                    json_step_info_2['step_status'] = 'Incomplete'
                                                else:
                                                    json_step_info_2['step_status'] = 'Complete'
                                            # print(list_check_step)
                                            if 'step_sign' in step_:
                                                tmp_step_sign = step_['step_sign']
                                                len_step_status = len(tmp_step_sign['data'])
                                                # print(len_step_status)
                                                if tmp_step_sign['status'] == True:
                                                    if 'Incomplete' in list_check_step and list_check_step.count('Incomplete') == len_step_status:
                                                        json_step_info_2['step_status'] = 'Incomplete'
                                                    elif 'Complete' in list_check_step and list_check_step.count('Complete') == len_step_status:
                                                        json_step_info_2['step_status'] = 'Complete'
                                                    else:
                                                        json_step_info_2['step_status'] = 'Incomplete'
                                                    # for yt in range(len(list_check_step)):
                                                    #     tmp_status_step_one = list_check_step[yt]
                                                        
                                                    #     print(tmp_status_step_one)
                                            sum_status_step_list.append(json_step_info_2['step_status'])
                                            tmp_file_user_status_detail.append(json_step_info_2)
                                        if 'Reject' in sum_status_step_list:
                                            status_step_sum = 'Reject'
                                            # sendtime = json_data_res['send_time']
                                            timing_ = timing(time_success,sendtime)
                                            tmp_timing = timing_
                                        elif 'Incomplete' in sum_status_step_list:
                                            status_step_sum = 'Incomplete'
                                            now = datetime.datetime.now()
                                            # sendtime = json_data_res['send_time']
                                            timing_ = timing(datetime.datetime.timestamp(now),sendtime)
                                            tmp_timing = timing_
                                        elif 'Pending' in sum_status_step_list:
                                            status_step_sum = 'Incomplete'
                                            now = datetime.datetime.now()
                                            # sendtime = json_data_res['send_time']
                                            timing_ = timing(datetime.datetime.timestamp(now),sendtime)
                                            tmp_timing = timing_
                                        elif 'Approve' in sum_status_step_list:
                                            status_step_sum = 'Complete'
                                            # sendtime = json_data_res['send_time']
                                            timing_ = timing(time_success,sendtime)
                                            tmp_timing = timing_
                                        elif 'Complete' in sum_status_step_list:
                                            status_step_sum = 'Complete'
                                            # sendtime = json_data_res['send_time']
                                            timing_ = timing(time_success,sendtime)
                                            tmp_timing = timing_
                                        else:
                                            status_step_sum = 'Complete'
                                            # sendtime = json_data_res['send_time']
                                            timing_ = timing(time_success,sendtime)
                                            tmp_timing = timing_
                                        tmp_file_status_sum = status_step_sum
                                    tmp_sign_detail = sign_detail
                                    
                                    tmp_view_details = eval(tmpjson['view_details'])
                                    if tmpjson['qrCode_position'] != None or str(tmpjson['qrCode_position']).replace(' ','') != '':
                                        tmp_qrCode_position = eval(tmpjson['qrCode_position'])
                                        tmp_qrCode_status = True
                                    else:
                                        tmp_qrCode_position = tmpjson['qrCode_position']
                                        tmp_qrCode_status = False                    
                                if u == 2:
                                    tmpjson_document = tmp_query[n][u].__dict__
                                    if tmpjson_document['options_page'] == None:
                                        tmp_option_page = []
                                    else:                                
                                        tmp_option_page = eval(tmpjson_document['options_page'])
                                        tmp_options_page_document = [tmp_option_page]
                                        if 'ca_require' in tmp_option_page:
                                            tmp_ca_require = tmp_option_page['ca_require']
                                            if type(tmp_ca_require) is bool:
                                                tmp_digit_sign = bool(tmp_ca_require)
                                            else:
                                                tmp_digit_sign = ""
                                        else:
                                            tmp_digit_sign = bool(tmpjson_document['digit_sign'])
                                    tmp_documentJson = eval(tmpjson_document['documentJson'])
                                    tmp_strdocument = str(tmpjson_document['documentJson'])
                                if u == 3:
                                    tmpjson_pdf = tmp_query[n][u].__dict__
                                    if tmpjson_pdf['string_sign'] != None:
                                        tmp_file_status = 'Complete'
                                    else:
                                        tmp_file_status = 'Incomplete'
                                
                                # if u == 4:
                                #     tmpjson_template = tmp_query[n][u].__dict__
                                #     tmp_tempname = str(tmpjson_template['step_Name'])
                                #     tmp_condition = str(tmpjson_template['condition_temp'])
                            info = {
                                'attempted_folder':tmpjson_document['attempted_folder'],
                                'condition_template':tmp_condition,
                                'digit_sign':tmp_digit_sign,
                                'document_Id':tmpjson_sender['doc_id'],
                                'document_details':tmp_documentJson,
                                'document_details_string':tmp_strdocument,
                                'document_time':document_timestamp,
                                'email_center':tmp_email_center,
                                'file_id':int(tmpjson_document['fileid']),
                                'file_name':tmpjson_sender['file_name'],
                                'file_status':tmp_file_status,
                                'file_status_sum':tmp_file_status_sum,
                                'file_user_status':[],
                                'file_user_status_detail':[],
                                'options_page_document':tmp_options_page_document,
                                'qrCode_position':tmp_qrCode_position,
                                'qrCode_status':tmp_qrCode_status,
                                'send_time':tmp_datetime,
                                'send_time_display':tmp_datetime_display,
                                'send_time_string':str(tmp_datetime).split('+')[0],
                                'sender_email':tmpjson_sender['sender_email'],
                                'sender_name':tmpjson_sender['sender_name'],
                                'sender_position':tmpjson_sender['sender_position'],
                                'sign_detail':tmp_sign_detail,
                                'signpad':[],
                                'stamp_all':tmpjson_document['sign_page_options'],
                                'status':tmpjson_sender['status'],
                                'status_file_code':tmp_status_file_code,
                                'status_file_string':tmp_status_file_string,
                                'step_code':tmpjson_sender['step_code'],
                                'step_data_sid':tmpjson_sender['step_data_sid'],
                                'step_info':tmp_step_info,
                                'template_name':tmp_tempname,
                                'template_webhook':tmpjson_sender['template_webhook'],
                                'timeline':tmp_timeline,
                                'timeline_list':tmp_timeline_list,
                                'timing':tmp_timing,
                                'tracking_id':tmpjson_sender['tracking_id'],
                                'urgent_code':tmpjson_document['urgent_type'],
                                'view_details':tmp_view_details,
                                'sign_info':tmp_sign_detail_list,
                                'sign_require':require_sign_info
                            }
                            arr_tmp.append(info)
                    arr_group_info.append({
                        'group_id':tmp_group_id,
                        'sidcode_group':tmp_sidcode_group,
                        'data_group':tmp_data_group,
                        'datetime':int(tmp_updatetime.timestamp()),
                        'datetime_String':str(tmp_updatetime).split('+')[0],
                        'create_by':tmp_create_by,
                        'update_by':tmp_update_by,
                        'pdf_org':tmp_pdf_org,
                        'pdf_sign':tmp_pdf_sign,
                        'step_in_group':tmp_step_group_detail,
                        'document_data':tmp_arr_data_sum_01
                        
                    })
                    return {'result':'OK','messageText':arr_tmp,'data':arr_group_info}
                    # return {'result':'OK','messageText':list_arr}
                else:
                    return {'result':'ER','messageText':'data not found'}
            else:
                return {'result':'ER','messageText':'data not found'}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

    def select_dashboard_recipient_v3_v2(self,emailUser):
        self.emailUser = emailUser
        sid_list = []
        sid_list_email = []
        json_Data = {}
        list_arr = []
        list_json = []
        list_group = []
        stop_loop = True
        list_sid_ever = []
        list_id_group = []
        try:
            tmp_list = []             
            count_rowDocument = 0
            count_rowDocument_StatusActive = 0
            count_rowDocument_StatusReject = 0
            count_rowDocument_StatusCancel = 0
            statusFile_count_approve = 0
            statusFile_count_pendding = 0
            statusFile_count_reject = 0
            statusFile_count_wait = 0
            list_temp_query = []
            tmp_sid_code_list = []
            arr_gruop = []
            arr_group_sid = []
            tmp_arr_sid = []
            tmp_group_id = None
            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.contains(self.emailUser))\
                .order_by(desc(paper_lesssender.send_time))\
                .all()            
           
            count_rowDocument_StatusActive = db.session.query(paper_lesssender, paper_lessdocument,paper_lessdatastep)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.contains(self.emailUser))\
                .order_by(desc(paper_lesssender.send_time))\
                .count()
            count_rowDocument_StatusReject = db.session.query(paper_lesssender, paper_lessdocument,paper_lessdatastep)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='REJECT').filter(paper_lesssender.recipient_email.contains(self.emailUser))\
                .order_by(desc(paper_lesssender.send_time))\
                .count()
            count_rowDocument_StatusCancel = db.session.query(paper_lesssender, paper_lessdocument,paper_lessdatastep)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='CANCEL').filter(paper_lesssender.recipient_email.contains(self.emailUser))\
                .order_by(desc(paper_lesssender.send_time))\
                .count()
            for u in range(len(query_temp)):
                for z in range(len(query_temp[u])):
                    if z == 0:
                        # list_email = []
                        tmp_dict_json = query_temp[u][z].__dict__
                        # if '_sa_instance_state' in tmp_dict_json:
                        #     del tmp_dict_json['_sa_instance_state']
                        tmp_sicode = tmp_dict_json['step_data_sid']
                        tmp_sid_code_list.append(tmp_sicode)
                        tmp_send_time = tmp_dict_json['send_time']
                        tmp_document_id = tmp_dict_json['doc_id']
                        tmp_tracking_id = tmp_dict_json['tracking_id']
                        tmp_sender_name = tmp_dict_json['sender_name']
                        tmp_sender_email = tmp_dict_json['sender_email']
                        tmp_file_name = tmp_dict_json['file_name']
                        tmp_group_id = tmp_dict_json['group_id']
                        tmp_status_group = False
                        tmp_query_select = db.session.query(tb_group_document)\
                            .filter(tb_group_document.sid_group.contains(tmp_sicode)).filter(tb_group_document.status == 'ACTIVE')\
                            .all()
                        # ถ้าเอกสารมี group
                        if len(tmp_query_select) != 0:
                            for g in range(len(tmp_query_select)):
                                tmp_group_id_one = str(tmp_query_select[g].id)
                                tmp_group_sidarr = eval(tmp_query_select[g].sid_group)
                                tmp_group_updatetime = (tmp_query_select[g].updatetime)
                                tmp_group_status = (tmp_query_select[g].status)
                                tmp_group_data = eval(tmp_query_select[g].data_group)
                                tmp_group_email = eval(str(tmp_query_select[g].email_group))
                                eval_tmp_group_email = eval(str(tmp_group_email))
                                list_email = []
                                if tmp_group_email != None:
                                    for ee in range(len(tmp_group_email)):
                                        email = tmp_group_email[ee]
                                        email_one = email['email_one']
                                        email_split = str(email_one).split('\'')[1]
                                        list_email.append(email_split)
                                if tmp_group_id_one not in arr_gruop:
                                    arr_gruop.append(tmp_group_id_one)
                                    query_temp_01 = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep)\
                                        .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                        .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                        .filter(paper_lesssender.status=='ACTIVE')\
                                        .filter(paper_lesssender.step_data_sid.in_(tmp_group_sidarr))\
                                        .order_by(desc(paper_lesssender.send_time))\
                                        .all()
                                       
                                    tmp_arr_tmp_tracking_id = []
                                    tmp_arr_tmp_sicode = []
                                    tmp_arr_document_id = []
                                    tmp_arr_sendername = []
                                    tmp_arr_sender_email = []
                                    tmp_arr_filename = []
                                    tmp_arr_options_page = []


                                    tmp_arr_options_page_document = []
                                    tmp_arr_urgent_type = []
                                    tmp_arr_document_name = []
                                    tmp_arr_documentUrgentString = []
                                    tmp_arr_document_type = []
                                    tmp_arr_maxstep = []
                                    tmp_arr_stepnow = []
                                    tmp_arr_res_status_file = []
                                    tmp_arr_res_status_file_string = []
                                    tmp_arr_tmp_bizinfo = []
                                    tmp_arr_datetime_str= []
                                    tmp_arr_dateime_th = []
                                    tmp_arr_date_display_show = []
                                    tmp_arr_sign_page_options = []
                                    tmp_arr_date_str = []
                                    tmp_arr_time_str = []

                                    for d in range(len(query_temp_01)):
                                       
                                        for t in range(len(query_temp_01[d])):
                                            if t == 0:
                                                tmp_dict_json01 = query_temp_01[d][t].__dict__
                                                # if '_sa_instance_state' in tmp_dict_json:
                                                #     del tmp_dict_json['_sa_instance_state']
                                                tmp_sicode01 = tmp_dict_json01['step_data_sid']
                                                list_sid_ever.append(tmp_sicode01)
                                                # time
                                                date_display_show = None
                                                tmp_send_time = tmp_dict_json01['send_time']
                                                datetimeStr = str(tmp_send_time).split('+')[0]
                                                ts = int(time.time())
                                                date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                                                th_dateTime_2 = convert_datetime_TH_2(int(tmp_send_time.timestamp()))
                                                year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                                                datetime_display = int(tmp_send_time.timestamp())
                                                date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                                                time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                                                old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                                                date_String = str(datetimeStr).split(' ')[0]
                                                time_String = str(datetimeStr).split(' ')[1].split('+')[0]
                                                tmp_arr_date_str.append(date_String)
                                                tmp_arr_time_str.append(time_String)
                                                if date_time_today == date_time_db:
                                                    date_display_show = time_show_db
                                                else:
                                                    if year_today == yar_db:
                                                        date_display_show = convert_datetime_TH_2_display(datetime_display)
                                                    else:
                                                        date_display_show = old_year
                                                tmp_arr_date_display_show.append(date_display_show)
                                                # time
                                                tmp_document_id = tmp_dict_json01['doc_id']
                                                tmp_tracking_id01 = tmp_dict_json01['tracking_id']
                                                tmp_sender_name = tmp_dict_json01['sender_name']
                                                tmp_sender_email = tmp_dict_json01['sender_email']
                                                tmp_file_name = tmp_dict_json['file_name']
                                                tmp_arr_dateime_th.append(th_dateTime_2)
                                                tmp_arr_tmp_sicode.append(tmp_sicode01)
                                                tmp_arr_datetime_str.append(datetimeStr)
                                                tmp_arr_tmp_tracking_id.append(tmp_tracking_id01)
                                                tmp_arr_document_id.append(tmp_document_id)
                                                tmp_arr_sendername.append(tmp_sender_name)
                                                tmp_arr_sender_email.append(tmp_sender_email)
                                                tmp_arr_filename.append(tmp_file_name)
                                            if t == 1 :
                                                tmp_dict_json02 = query_temp_01[d][t].__dict__
                                                tmp_options_page_document = eval(str(tmp_dict_json02['options_page']))
                                                tmp_urgent_type = tmp_dict_json02['urgent_type']
                                                tmp_sign_page_options = tmp_dict_json02['sign_page_options']
                                                tmp_arr_sign_page_options.append(tmp_sign_page_options)
                                                documentUrgentString = ''
                                                if tmp_urgent_type != None:
                                                    if tmp_urgent_type == 'I':
                                                        documentUrgentString = 'ด่วนมาก'
                                                    elif tmp_urgent_type == 'U':
                                                        documentUrgentString = 'ด่วน'
                                                    elif tmp_urgent_type == 'M':
                                                        documentUrgentString = 'ปกติ'
                                                tmp_arr_documentUrgentString.append(documentUrgentString)
                                                documentJson = eval(str(tmp_dict_json02['documentJson']))
                                                tmp_document_name = documentJson['document_name']
                                                tmp_document_type = documentJson['document_type']
                                                tmp_arr_options_page_document.append(tmp_options_page_document)
                                                tmp_arr_urgent_type.append(tmp_urgent_type)
                                                tmp_arr_document_name.append(tmp_document_name)
                                                tmp_arr_document_type.append(tmp_document_type)
                                            if t == 2 :
                                                tmp_dict_json03 = query_temp_01[d][t].__dict__
                                                tmp_biz_info = None 
                                                step_now2 = 0
                                                step_now = None
                                                email_one_sum = []
                                                jsonData_eval = eval(tmp_dict_json03['data_json'])
                                                arr_step_info = []
                                                if tmp_dict_json03['biz_info'] != None or tmp_dict_json03['biz_info'] != '':
                                                    if tmp_dict_json03['biz_info'] != 'None':
                                                        tmp_biz_info = None
                                                        eval_biz_info = eval(tmp_dict_json03['biz_info'])
                                                        if 'dept_name' in eval_biz_info:            
                                                            tmp_biz_info = {
                                                                'tax_id':eval_biz_info['id_card_num'],
                                                                'role_name' : eval_biz_info['role_name'],
                                                                'dept_name' : eval_biz_info['dept_name'],
                                                                'role_level' : eval_biz_info['role_level']               
                                                            }
                                                        elif 'dept_name' not in eval_biz_info:
                                                            tmp_biz_info = {
                                                                'tax_id':eval_biz_info['id_card_num'],
                                                                'role_name' : eval_biz_info['role_name'],
                                                                'dept_name' : [],
                                                                'role_level' : eval_biz_info['role_level']               
                                                            }
                                                tmp_group_stepnum = []
                                                tmpemail = False
                                                if len(tmp_options_page) != 0:
                                                    if 'group_detail' in tmp_options_page[0]:
                                                        tmp_group_detail = tmp_options_page[0]['group_detail']
                                                        if 'group_type' in tmp_group_detail:
                                                            tmp_group_stepnum = tmp_group_detail['step_num']
                                                tmp_list_step_infomation = []
                                                if 'step_num' in jsonData_eval:
                                                    tmp_step_info = [eval(tmp_dict_json03['data_json'])]
                                                else:
                                                    tmp_step_info = eval(tmp_dict_json03['data_json'])
                                                if 'step_num' in jsonData_eval:
                                                    tmp_list_step_infomation.append(jsonData_eval)
                                                    jsonData_eval = tmp_list_step_infomation
                                                tmp_arr_tmp_bizinfo.append(tmp_biz_info)
                                                if 'step_num' in jsonData_eval:
                                                    step_status = ''
                                                    step_before = ''
                                                    res_status_file = 'Y'
                                                    arr_step_totle = []
                                                    json_data_info = jsonData_eval
                                                    if 'step_detail' in json_data_info:
                                                        max_step = 1
                                                        tmp_arr_maxstep.append(max_step)
                                                        tmp_arr_stepnow.append('1')
                                                        for s in range(len(json_data_info['step_detail'])):
                                                            json_info_step2 = {}
                                                            for u in range(len(json_data_info['step_detail'][s]['activity_code'])):
                                                                oneMail = str(json_data_info['step_detail'][s]['one_email']).replace(' ','').lower()
                                                                if str(oneMail).replace(' ','').lower() == self.emailUser:
                                                                    if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
                                                                        if step_before == '':
                                                                            try:
                                                                                if json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Complete':
                                                                                    step_before = 'Complete'
                                                                                elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Approve':
                                                                                    step_before = 'Complete'
                                                                                elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Reject':
                                                                                    step_before = 'Reject'
                                                                            except Exception as e:
                                                                                step_before = ''
                                                                        if step_before != 'Reject':
                                                                            if json_data_info['step_detail'][s]['activity_status'][u] == 'Complete':
                                                                                step_status = 'Complete'
                                                                            elif json_data_info['step_detail'][s]['activity_status'][u] == 'Approve':
                                                                                step_status = 'Complete'
                                                                            elif json_data_info['step_detail'][s]['activity_status'][u] == 'Reject':
                                                                                step_status = 'Reject'
                                                                            else:
                                                                                try:
                                                                                    step_status  = 'Incomplete'
                                                                                except Exception as ex:
                                                                                    step_status = 'Incomplete'
                                                                        arr_step_info.append(step_status)
                                                                        arr_step_info.append(step_before)
                                                    if 'Reject' in arr_step_info:
                                                        res_status_file = 'R'
                                                        res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                                                    elif 'Complete' in arr_step_info:
                                                        res_status_file = 'Y'
                                                        res_status_file_string = 'อนุมัติแล้ว'
                                                    elif 'Waitting' in arr_step_info:
                                                        res_status_file = 'W'
                                                        res_status_file_string = 'รอคุณอนุมัติ'
                                                    elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                                                        res_status_file = 'W'
                                                        res_status_file_string = 'รอคุณอนุมัติ'
                                                    else:
                                                        res_status_file_string = 'อนุมัติแล้ว'
                                                    if res_status_file == 'W':
                                                        statusFile_count_wait = statusFile_count_wait + 1
                                                    elif res_status_file == 'Y':
                                                        statusFile_count_approve = statusFile_count_approve + 1
                                                    elif res_status_file == 'R':
                                                        statusFile_count_reject = statusFile_count_reject + 1
                                                    else:
                                                        statusFile_count_pendding = statusFile_count_pendding + 1
                                                    tmp_arr_res_status_file.append(res_status_file)
                                                    tmp_arr_stepnow.append(step_now2)
                                                    tmp_arr_res_status_file_string.append(res_status_file_string)
                                                else:
                                                    tmp_sum_email = []
                                                    step_status = ''
                                                    res_status_file = 'Y'
                                                    res_status_file_string = ''
                                                    step_before = ''
                                                    step_list_before = []
                                                    step_list_ = []
                                                    step_list_next = []
                                                    arr_step_totle = []
                                                    step_me = ''
                                                    step_sum_status = []
                                                    sum_status_step_list = []
                                                    list_check_step = []
                                                    step_list_data = []
                                                    max_step = (len(jsonData_eval))
                                                    # เก็บค่า max_step
                                                    tmp_arr_maxstep.append(max_step)
                                                    step_infomation = jsonData_eval
                                                    sum_status_step = []
                                                    tmp_status_sum = []
                                                    tmp_acvt_code_sum = []
                                                    arr_email_list = []
                                                    email_step_sum = []
                                                    arr_04_sid = []
                                                    for i in range(len(step_infomation)):
                                                        list_check_step = []
                                                        json_step_info_2 = {}
                                                        step_list_data = []
                                                        step_status = []
                                                        step_email = []
                                                        tmp_acvt_code = []
                                                        tmp_keep_status = []
                                                        tmp_acvt_status = []
                                                        step_ = step_infomation[i]
                                                        step_num = step_infomation[i]['step_num']
                                                        json_step_info_2['step_status'] = ''
                                                        tmp_step_detail = step_['step_detail']
                                                        for u in range(len(tmp_step_detail)):
                                                            tmp_arr_step_detail = tmp_step_detail[u]
                                                            tmp_status = tmp_arr_step_detail['activity_status']
                                                            tmp_code = tmp_arr_step_detail['activity_code']
                                                            tmp_email = tmp_arr_step_detail['one_email']
                                                            for s in range(len(tmp_code)):
                                                                if tmp_code[s] == 'A03':
                                                                    tmp_acvt_code.append(tmp_code[s])
                                                                    step_status.append(tmp_status[s])
                                                                    tmp_acvt_status.append(tmp_status[s])
                                                                    step_email.append(tmp_email)
                                                                    tmp_sum_email.append(tmp_email)
                                                                    email_one_sum.append(tmp_email)
                                                        email_step_sum.append(step_email)
                                                        if 'step_sign' in step_:
                                                            tmp_step_sign = step_['step_sign']
                                                            if tmp_step_sign['status'] == True:
                                                                len_step_status = len(tmp_step_sign['data'])
                                                                if 'Complete' in step_status and step_status.count('Complete') == len_step_status:
                                                                    tmp_status_sum.append('Complete')
                                                                else:
                                                                    for tyy in range(len(tmp_step_detail)):
                                                                        tmp_arr_step_detail = tmp_step_detail[tyy]
                                                                        tmp_status = tmp_arr_step_detail['activity_status']
                                                                        tmp_code = tmp_arr_step_detail['activity_code']
                                                                        tmp_email = tmp_arr_step_detail['one_email']
                                                                        for zui in range(len(tmp_code)):
                                                                            if tmp_code[zui] == 'A03':
                                                                                if tmp_email == self.emailUser and tmp_status[zui] == 'Incomplete':
                                                                                    tmp_status_sum.append('Incomplete')
                                                                                    tmp_keep_status.append('Incomplete')
                                                                                elif tmp_email == self.emailUser and tmp_status[zui] == 'Complete':
                                                                                    tmp_status_sum.append('Incomplete_1')
                                                                                    tmp_keep_status.append('Incomplete')                                            
                                                                    if 'Incomplete' not in tmp_keep_status:
                                                                        tmp_status_sum.append('Incomplete_1')
                                                                        tmp_keep_status.append('Incomplete')  
                                                            else:
                                                                if 'Reject' in step_status:
                                                                    tmp_status_sum.append('Reject')
                                                                elif 'Approve' in step_status:
                                                                    tmp_status_sum.append('Complete')
                                                                elif 'Complete' in step_status:
                                                                    tmp_status_sum.append('Complete')
                                                                elif 'Incomplete' in step_status:
                                                                    tmp_status_sum.append('Incomplete')
                                                                elif 'Pending' in step_status:
                                                                    tmp_status_sum.append('Incomplete')
                                                                else:
                                                                    tmp_status_sum.append('Complete')
                                                        else:
                                                            if 'Reject' in step_status:
                                                                tmp_status_sum.append('Reject')
                                                            elif 'Approve' in step_status:
                                                                tmp_status_sum.append('Complete')
                                                            elif 'Complete' in step_status:
                                                                tmp_status_sum.append('Complete')
                                                            elif 'Incomplete' in step_status:
                                                                tmp_status_sum.append('Incomplete')
                                                            elif 'Pending' in step_status:
                                                                tmp_status_sum.append('Incomplete')
                                                            else:
                                                                tmp_status_sum.append('Complete')
                                                    if self.emailUser in email_one_sum:
                                                        if len(tmp_status_sum) != 0:
                                                            count_email = tmp_sum_email.count(self.emailUser)
                                                            for zzi in range(len(step_infomation)):
                                                                list_check_step = []
                                                                json_step_info_2 = {}
                                                                step_list_data = []
                                                                step_status = []
                                                                step_ = step_infomation[zzi]
                                                                step_num = step_infomation[zzi]['step_num']
                                                                json_step_info_2['step_status'] = ''
                                                                tmp_step_detail = step_['step_detail']
                                                                for zi in range(len(tmp_step_detail)):
                                                                    tmp_arr_step_detail_2 = tmp_step_detail[zi]
                                                                    oneMail = str(tmp_arr_step_detail_2['one_email']).replace(' ','').lower()            
                                                                    tmp_step_me = int(step_num) - 1
                                                                    step_num_int2 = int(step_num)
                                                                    stop = False
                                                                    for ii in range(len(tmp_status_sum)):
                                                                        if stop == False :
                                                                            list_status = Counter(tmp_status_sum)
                                                                            if 'Complete' in list_status and len(list_status) == 1 :
                                                                                step_now2 = len(tmp_status_sum)
                                                                                stop = True
                                                                            elif tmp_status_sum[ii] == 'Incomplete' or tmp_status_sum[ii] == 'Reject' or tmp_status_sum[ii] == 'Approve':
                                                                                step_now2 = ii+1
                                                                                stop = True

                                                                    if 'Reject' in tmp_status_sum:
                                                                        step_now = step_num_int2
                                                                        arr_step_info.append('Reject')
                                                                    elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Incomplete_input':
                                                                        step_now = step_num_int2
                                                                        arr_step_info.append('Wait_input')
                                                                    elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Incomplete_1':
                                                                        step_now = step_num_int2
                                                                        arr_step_info.append('Incomplete')
                                                                    elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Incomplete':                                        
                                                                        if self.emailUser not in arr_email_list:
                                                                            index_step_me = tmp_step_me
                                                                            if index_step_me != 0:
                                                                                while index_step_me > 0:
                                                                                    if len(arr_step_info) == 0:
                                                                                        index_step_me = index_step_me - 1
                                                                                        if tmp_status_sum[index_step_me] == 'Incomplete_1':
                                                                                            step_now = step_num_int2
                                                                                            arr_step_info.append('Incomplete')
                                                                                        elif tmp_status_sum[index_step_me] == 'Incomplete':
                                                                                            step_now = step_num_int2
                                                                                            arr_step_info.append('Incomplete')
                                                                                        else:
                                                                                            step_now = step_num_int2
                                                                                            arr_step_info.append('Wait')
                                                                                        arr_email_list.append(self.emailUser)
                                                                                    else:
                                                                                        index_step_me = index_step_me - 1
                                                                                        continue
                                                                            else:
                                                                                step_now = step_num_int2
                                                                                arr_step_info.append('Wait')
                                                                    elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Complete':                                    
                                                                        if self.emailUser not in arr_email_list:
                                                                            if count_email == 1:
                                                                                for nz in range(step_num_int2,len(tmp_status_sum),1):
                                                                                    if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                                                        step_now = step_num_int2
                                                                                        arr_step_info.append('Wait')
                                                                                    elif self.emailUser not in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                                                        step_now = step_num_int2
                                                                                        arr_step_info.append('Progress')
                                                                                arr_email_list.append(self.emailUser)
                                                                            else:                                                
                                                                                for nz in range(step_num_int2,len(tmp_status_sum),1):
                                                                                    if self.emailUser not in arr_email_list:
                                                                                        if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Complete':
                                                                                            pass                                                    
                                                                                        if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                                                            step_now = step_num_int2
                                                                                            arr_step_info.append('Wait')
                                                                                            arr_email_list.append(self.emailUser)
                                                                                        if self.emailUser not in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                                                            step_now = step_num_int2
                                                                                            arr_step_info.append('Progress')
                                                                                            arr_email_list.append(self.emailUser)
                                                                    if step_now == None:                                  
                                                                        step_now = step_num_int2
                                                    else :  
                                                        for zzi in range(len(step_infomation)):
                                                            list_check_step = []
                                                            json_step_info_2 = {}
                                                            step_list_data = []
                                                            step_status = []
                                                            step_ = step_infomation[zzi]
                                                            step_num = step_infomation[zzi]['step_num']
                                                            json_step_info_2['step_status'] = ''
                                                            tmp_step_detail = step_['step_detail']
                                                            for zi in range(len(tmp_step_detail)):
                                                                tmp_arr_step_detail_2 = tmp_step_detail[zi]
                                                                oneMail = tmp_arr_step_detail_2['one_email']
                                                                tmp_step_me = int(step_num) - 1
                                                                step_num_int2 = int(step_num)
                                                                stop = False
                                                                for ii in range(len(tmp_status_sum)):
                                                                    if stop == False :
                                                                        list_status = Counter(tmp_status_sum)
                                                                        if 'Complete' in list_status and len(list_status) == 1 :
                                                                            step_now2 = len(tmp_status_sum)
                                                                            stop = True
                                                                        elif tmp_status_sum[ii] == 'Incomplete' or tmp_status_sum[ii] == 'Reject' or tmp_status_sum[ii] == 'Approve':
                                                                            step_now2 = ii+1
                                                                            stop = True
                                                                # print('tmp_status_sum',tmp_status_sum)
                                                                # print('sid', tmp_sicode)
                                                                if 'Reject' in tmp_status_sum:
                                                                    step_now = step_num_int2
                                                                    arr_step_info.append('Reject')
                                                                elif 'Incomplete' in tmp_status_sum:
                                                                    step_now = step_num_int2
                                                                    arr_step_info.append('Progress')    
                                                                if step_now == None:                                  
                                                                    step_now = step_num_int2
                                                    if 'Reject' in arr_step_info:
                                                        res_status_file = 'R'
                                                        res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                                                    elif 'Wait_input' in arr_step_info:
                                                        res_status_file = 'WI'
                                                        res_status_file_string = 'รอคุณกรอกข้อมูล'
                                                    elif 'Progress' in arr_step_info and 'Wait' in arr_step_info:
                                                        res_status_file = 'Z'
                                                        res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                                                    elif 'Wait' in arr_step_info:
                                                        res_status_file = 'W'
                                                        res_status_file_string = 'รอคุณอนุมัติ'
                                                    elif 'Incomplete' in arr_step_info:
                                                        res_status_file = 'Z'
                                                        res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                                                    elif 'Progress' in arr_step_info:
                                                        res_status_file = 'N'
                                                        res_status_file_string = 'กำลังดำเนินการ'                    
                                                    elif arr_step_info.count('Incomplete') >= 2:
                                                        res_status_file = 'Z'
                                                        res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                                                    elif 'Incomplete' in arr_step_info and 'Complete' in arr_step_info:
                                                        res_status_file = 'N'
                                                        res_status_file_string = 'กำลังดำเนินการ'
                                                    else:
                                                        res_status_file_string = 'อนุมัติแล้ว'
                                                    if res_status_file == 'W':
                                                        statusFile_count_wait = statusFile_count_wait + 1
                                                    elif res_status_file == 'Y':
                                                        statusFile_count_approve = statusFile_count_approve + 1
                                                    elif res_status_file == 'R':
                                                        statusFile_count_reject = statusFile_count_reject + 1
                                                    else:
                                                        statusFile_count_pendding = statusFile_count_pendding + 1
                                                tmp_arr_res_status_file.append(res_status_file)
                                                tmp_arr_stepnow.append(step_now2)
                                                tmp_arr_res_status_file_string.append(res_status_file_string)
                                    list_group.append({
                                        'list_onemail': list_email,
                                        'group_status': tmp_group_status,
                                        'group_id':tmp_group_id_one,
                                        'dateTime':int(tmp_group_updatetime.timestamp()),
                                        'sidCode':tmp_arr_tmp_sicode,
                                        'tracking_id':tmp_arr_tmp_tracking_id,
                                        'document_id': tmp_arr_document_id,
                                        'sender_name': tmp_arr_sendername,
                                        'sender_email': tmp_arr_sender_email,
                                        'file_name': tmp_arr_filename,
                                        # 'options_page_document': tmp_arr_options_page_document,
                                        'options_page_document':tmp_group_data,
                                        'urgent_type': tmp_arr_urgent_type,
                                        'document_name': tmp_arr_document_name,
                                        'document_urgent_string': tmp_arr_documentUrgentString,
                                        'document_type' : tmp_arr_document_type,
                                        'max_step': tmp_arr_maxstep,
                                        'step_now2': tmp_arr_stepnow,
                                        'status_file_code':tmp_arr_res_status_file,
                                        'status_file_string': tmp_arr_res_status_file_string,
                                        'tmp_biz_info' : tmp_arr_tmp_bizinfo,
                                        'datetime_str': tmp_arr_datetime_str,
                                        'datetime_TH' : tmp_arr_dateime_th,
                                        'dateTime_display': tmp_arr_date_display_show,
                                        'stamp_all' : tmp_arr_sign_page_options,
                                        'date_String':  tmp_arr_date_str,
                                        'time_String': tmp_arr_time_str,
                                    })
                                    # print('tmp_arr_datetime_str : ',tmp_arr_datetime_str)
                                    # print('len :', len(list_group))
                    if z == 1:
                        tmp_dict_json = query_temp[u][z].__dict__
                        # if '_sa_instance_state' in tmp_dict_json:
                        #     del tmp_dict_json['_sa_instance_state']
                        tmp_sign_page_options = tmp_dict_json['sign_page_options']
                        tmp_document_type = tmp_dict_json['documentType']
                        # tmp_group_id = tmp_dict_json['group_id']
                        # print(tmp_dict_json['options_page'])
                        if tmp_dict_json['options_page'] != None:
                            tmp_options_page = [eval(tmp_dict_json['options_page'])]
                        else:
                            tmp_options_page = []
                        if tmp_dict_json['documentJson'] != None:
                            documentJson_result = eval(tmp_dict_json['documentJson'])
                            documentName = documentJson_result['document_name']
                            documentType = documentJson_result['document_type']
                        else:
                            documentName = None
                            documentType = None
                        if tmp_dict_json['urgent_type'] != None:
                            documentUrgentType = tmp_dict_json['urgent_type']
                            if documentUrgentType == 'I':
                                documentUrgentString = 'ด่วนมาก'
                            elif documentUrgentType == 'U':
                                documentUrgentString = 'ด่วน'
                            elif documentUrgentType == 'M':
                                documentUrgentString = 'ปกติ'
                        # print(tmp_options_page)   
                    if z == 2:
                        tmp_dict_json = query_temp[u][z].__dict__
                        tmp_biz_info = None 
                        # if '_sa_instance_state' in tmp_dict_json:
                        #     del tmp_dict_json['_sa_instance_state']
                        step_now2 = 0
                        step_now = None
                        jsonData_eval = eval(tmp_dict_json['data_json'])
                        arr_step_info = []
                        if tmp_dict_json['biz_info'] != None or tmp_dict_json['biz_info'] != '':
                            if tmp_dict_json['biz_info'] != 'None':
                                tmp_biz_info = None
                                eval_biz_info = eval(tmp_dict_json['biz_info'])
                                if 'dept_name' in eval_biz_info:            
                                    tmp_biz_info = {
                                        'tax_id':eval_biz_info['id_card_num'],
                                        'role_name' : eval_biz_info['role_name'],
                                        'dept_name' : eval_biz_info['dept_name'],
                                        'role_level' : eval_biz_info['role_level']               
                                    }                                
                                elif 'dept_name' not in eval_biz_info:
                                    tmp_biz_info = {
                                        'tax_id':eval_biz_info['id_card_num'],
                                        'role_name' : eval_biz_info['role_name'],
                                        'dept_name' : [],
                                        'role_level' : eval_biz_info['role_level']               
                                    }
                        tmp_group_stepnum = []
                        tmpemail = False
                        if len(tmp_options_page) != 0:
                            if 'group_detail' in tmp_options_page[0]:
                                tmp_group_detail = tmp_options_page[0]['group_detail']
                                if 'group_type' in tmp_group_detail:
                                    tmp_group_stepnum = tmp_group_detail['step_num']
                        tmp_list_step_infomation = []
                        if 'step_num' in jsonData_eval:
                            tmp_step_info = [eval(tmp_dict_json['data_json'])]
                        else:
                            tmp_step_info = eval(tmp_dict_json['data_json'])
                        if 'step_num' in jsonData_eval:
                            tmp_list_step_infomation.append(jsonData_eval)
                            jsonData_eval = tmp_list_step_infomation

                        if 'step_num' in jsonData_eval:
                            step_status = ''
                            step_before = ''
                            res_status_file = 'Y'
                            arr_step_totle = []
                            json_data_info = jsonData_eval
                            if 'step_detail' in json_data_info:
                                for s in range(len(json_data_info['step_detail'])):
                                    json_info_step2 = {}
                                    for u in range(len(json_data_info['step_detail'][s]['activity_code'])):
                                        oneMail = str(json_data_info['step_detail'][s]['one_email']).replace(' ','').lower()
                                        if str(oneMail).replace(' ','').lower() == self.emailUser:
                                            if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
                                                if step_before == '':
                                                    try:
                                                        if json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Complete':
                                                            step_before = 'Complete'
                                                        elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Approve':
                                                            step_before = 'Complete'
                                                        elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Reject':
                                                            step_before = 'Reject'
                                                    except Exception as e:
                                                        step_before = ''
                                                if step_before != 'Reject':
                                                    if json_data_info['step_detail'][s]['activity_status'][u] == 'Complete':
                                                        step_status = 'Complete'
                                                    elif json_data_info['step_detail'][s]['activity_status'][u] == 'Approve':
                                                        step_status = 'Complete'
                                                    elif json_data_info['step_detail'][s]['activity_status'][u] == 'Reject':
                                                        step_status = 'Reject'
                                                    else:
                                                        try:
                                                            step_status  = 'Incomplete'
                                                        except Exception as ex:
                                                            step_status = 'Incomplete'
                                                arr_step_info.append(step_status)
                                                arr_step_info.append(step_before)
                            if 'Reject' in arr_step_info:
                                res_status_file = 'R'
                                res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                            elif 'Complete' in arr_step_info:
                                res_status_file = 'Y'
                                res_status_file_string = 'อนุมัติแล้ว'
                            elif 'Waitting' in arr_step_info:
                                res_status_file = 'W'
                                res_status_file_string = 'รอคุณอนุมัติ'
                            elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                                res_status_file = 'W'
                                res_status_file_string = 'รอคุณอนุมัติ'
                            else:
                                res_status_file_string = 'อนุมัติแล้ว'
                            if res_status_file == 'W':
                                statusFile_count_wait = statusFile_count_wait + 1
                            elif res_status_file == 'Y':
                                statusFile_count_approve = statusFile_count_approve + 1
                            elif res_status_file == 'R':
                                statusFile_count_reject = statusFile_count_reject + 1
                            else:
                                statusFile_count_pendding = statusFile_count_pendding + 1
                        else:
                            tmp_sum_email = []
                            step_status = ''
                            res_status_file = 'Y'
                            res_status_file_string = ''
                            step_before = ''
                            step_list_before = []
                            step_list_ = []
                            step_list_next = []
                            arr_step_totle = []
                            step_me = ''
                            step_sum_status = []
                            sum_status_step_list = []
                            list_check_step = []
                            step_list_data = []
                            max_step = (len(jsonData_eval))
                            step_infomation = jsonData_eval
                            sum_status_step = []
                            tmp_status_sum = []
                            tmp_acvt_code_sum = []
                            arr_email_list = []
                            email_step_sum = []
                            arr_04_sid = []
                            for i in range(len(step_infomation)):
                                list_check_step = []
                                json_step_info_2 = {}
                                step_list_data = []
                                step_status = []
                                step_email = []
                                tmp_acvt_code = []
                                tmp_keep_status = []
                                tmp_acvt_status = []
                                step_ = step_infomation[i]
                                step_num = step_infomation[i]['step_num']
                                json_step_info_2['step_status'] = ''
                                tmp_step_detail = step_['step_detail']
                                for u in range(len(tmp_step_detail)):
                                    tmp_arr_step_detail = tmp_step_detail[u]
                                    tmp_status = tmp_arr_step_detail['activity_status']
                                    tmp_code = tmp_arr_step_detail['activity_code']
                                    tmp_email = tmp_arr_step_detail['one_email']
                                    for s in range(len(tmp_code)):
                                        if tmp_code[s] == 'A03':
                                            tmp_acvt_code.append(tmp_code[s])
                                            step_status.append(tmp_status[s])
                                            tmp_acvt_status.append(tmp_status[s])
                                            step_email.append(tmp_email)
                                            tmp_sum_email.append(tmp_email)
                                email_step_sum.append(step_email)
                                # print(step_status)
                                # if tmp_sicode not in arr_04_sid:
                                if 'step_sign' in step_:
                                    tmp_step_sign = step_['step_sign']
                                    if tmp_step_sign['status'] == True:
                                        len_step_status = len(tmp_step_sign['data'])
                                        if 'Complete' in step_status and step_status.count('Complete') == len_step_status:
                                            tmp_status_sum.append('Complete')
                                        else:
                                            for tyy in range(len(tmp_step_detail)):
                                                tmp_arr_step_detail = tmp_step_detail[tyy]
                                                tmp_status = tmp_arr_step_detail['activity_status']
                                                tmp_code = tmp_arr_step_detail['activity_code']
                                                tmp_email = tmp_arr_step_detail['one_email']
                                                for zui in range(len(tmp_code)):
                                                    if tmp_code[zui] == 'A03':
                                                        if tmp_email == self.emailUser and tmp_status[zui] == 'Incomplete':
                                                            tmp_status_sum.append('Incomplete')
                                                            tmp_keep_status.append('Incomplete')
                                                        elif tmp_email == self.emailUser and tmp_status[zui] == 'Complete':
                                                            tmp_status_sum.append('Incomplete_1')
                                                            tmp_keep_status.append('Incomplete')                                            
                                            if 'Incomplete' not in tmp_keep_status:
                                                tmp_status_sum.append('Incomplete_1')
                                                tmp_keep_status.append('Incomplete')  
                                    else:
                                        if 'Reject' in step_status:
                                            tmp_status_sum.append('Reject')
                                        elif 'Approve' in step_status:
                                            tmp_status_sum.append('Complete')
                                        elif 'Complete' in step_status:
                                            tmp_status_sum.append('Complete')
                                        elif 'Incomplete' in step_status:
                                            tmp_status_sum.append('Incomplete')
                                        elif 'Pending' in step_status:
                                            tmp_status_sum.append('Incomplete')
                                        else:
                                            tmp_status_sum.append('Complete')
                                else:
                                    if 'Reject' in step_status:
                                        tmp_status_sum.append('Reject')
                                    elif 'Approve' in step_status:
                                        tmp_status_sum.append('Complete')
                                    elif 'Complete' in step_status:
                                        tmp_status_sum.append('Complete')
                                    elif 'Incomplete' in step_status:
                                        tmp_status_sum.append('Incomplete')
                                    elif 'Pending' in step_status:
                                        tmp_status_sum.append('Incomplete')
                                    else:
                                        tmp_status_sum.append('Complete')
                            if len(tmp_status_sum) != 0:
                                count_email = tmp_sum_email.count(self.emailUser)
                                for zzi in range(len(step_infomation)):
                                    list_check_step = []
                                    json_step_info_2 = {}
                                    step_list_data = []
                                    step_status = []
                                    step_ = step_infomation[zzi]
                                    step_num = step_infomation[zzi]['step_num']
                                    json_step_info_2['step_status'] = ''
                                    tmp_step_detail = step_['step_detail']
                                    
                                    for zi in range(len(tmp_step_detail)):
                                        tmp_arr_step_detail_2 = tmp_step_detail[zi]
                                        oneMail = str(tmp_arr_step_detail_2['one_email']).replace(' ','').lower()            
                                        tmp_step_me = int(step_num) - 1
                                        step_num_int2 = int(step_num)
                                        stop = False
                                        for ii in range(len(tmp_status_sum)):
                                            if stop == False :
                                                list_status = Counter(tmp_status_sum)
                                                if 'Complete' in list_status and len(list_status) == 1 :
                                                    step_now2 = len(tmp_status_sum)
                                                    stop = True
                                                elif tmp_status_sum[ii] == 'Incomplete' or tmp_status_sum[ii] == 'Reject' or tmp_status_sum[ii] == 'Approve':
                                                    step_now2 = ii+1
                                                    stop = True
                                        if 'Reject' in tmp_status_sum:
                                            step_now = step_num_int2
                                            arr_step_info.append('Reject')
                                        elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Incomplete_input':
                                            step_now = step_num_int2
                                            arr_step_info.append('Wait_input')
                                        elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Incomplete_1':
                                            step_now = step_num_int2
                                            arr_step_info.append('Incomplete')
                                        elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Incomplete':                                        
                                            if self.emailUser not in arr_email_list:
                                                index_step_me = tmp_step_me
                                                if index_step_me != 0:
                                                    while index_step_me > 0:
                                                        if len(arr_step_info) == 0:
                                                            index_step_me = index_step_me - 1
                                                            if tmp_status_sum[index_step_me] == 'Incomplete_1':
                                                                step_now = step_num_int2
                                                                arr_step_info.append('Incomplete')
                                                            elif tmp_status_sum[index_step_me] == 'Incomplete':
                                                                step_now = step_num_int2
                                                                arr_step_info.append('Incomplete')
                                                            else:
                                                                step_now = step_num_int2
                                                                arr_step_info.append('Wait')
                                                            arr_email_list.append(self.emailUser)
                                                        else:
                                                            index_step_me = index_step_me - 1
                                                            continue
                                                else:
                                                    step_now = step_num_int2
                                                    arr_step_info.append('Wait')                                            
                                        elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Complete':                                    
                                            if self.emailUser not in arr_email_list:
                                                if count_email == 1:
                                                    for nz in range(step_num_int2,len(tmp_status_sum),1):
                                                        if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                            step_now = step_num_int2
                                                            arr_step_info.append('Wait')
                                                        elif self.emailUser not in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                            step_now = step_num_int2
                                                            arr_step_info.append('Progress')
                                                    arr_email_list.append(self.emailUser)
                                                else:                                                
                                                    for nz in range(step_num_int2,len(tmp_status_sum),1):
                                                        if self.emailUser not in arr_email_list:
                                                            if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Complete':
                                                                pass                                                    
                                                            if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                                step_now = step_num_int2
                                                                arr_step_info.append('Wait')
                                                                arr_email_list.append(self.emailUser)
                                                            if self.emailUser not in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                                step_now = step_num_int2
                                                                arr_step_info.append('Progress')
                                                                arr_email_list.append(self.emailUser)
                                        if step_now == None:                                  
                                            step_now = step_num_int2
                                if 'Reject' in arr_step_info:
                                    res_status_file = 'R'
                                    res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                                elif 'Wait_input' in arr_step_info:
                                    res_status_file = 'WI'
                                    res_status_file_string = 'รอคุณกรอกข้อมูล'
                                elif 'Progress' in arr_step_info and 'Wait' in arr_step_info:
                                    res_status_file = 'Z'
                                    res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                                elif 'Wait' in arr_step_info:
                                    res_status_file = 'W'
                                    res_status_file_string = 'รอคุณอนุมัติ'
                                elif 'Incomplete' in arr_step_info:
                                    res_status_file = 'Z'
                                    res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                                elif 'Progress' in arr_step_info:
                                    res_status_file = 'N'
                                    res_status_file_string = 'กำลังดำเนินการ'                    
                                elif arr_step_info.count('Incomplete') >= 2:
                                    res_status_file = 'Z'
                                    res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                                elif 'Incomplete' in arr_step_info and 'Complete' in arr_step_info:
                                    res_status_file = 'N'
                                    res_status_file_string = 'กำลังดำเนินการ'
                                else:
                                    res_status_file_string = 'อนุมัติแล้ว'
                                if res_status_file == 'W':
                                    statusFile_count_wait = statusFile_count_wait + 1
                                elif res_status_file == 'Y':
                                    statusFile_count_approve = statusFile_count_approve + 1
                                elif res_status_file == 'R':
                                    statusFile_count_reject = statusFile_count_reject + 1
                                else:
                                    statusFile_count_pendding = statusFile_count_pendding + 1
                    list_temp_query.append(tmp_dict_json)
                    dateTime_String = tmp_send_time
                    th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                    ts = int(time.time())
                    date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                    year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                    datetime_display = int(dateTime_String.timestamp())
                    date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                    yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                    time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                    old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                    if date_time_today == date_time_db:
                        date_display_show = time_show_db
                    else:
                        if year_today == yar_db:
                            date_display_show = convert_datetime_TH_2_display(datetime_display)
                        else:
                            date_display_show = old_year
                count_rowDocument = len(tmp_sid_code_list)
                json_Data['sum_Document']  = count_rowDocument
                json_Data['DocumentInfo'] = {
                    'Document_Active':count_rowDocument_StatusActive,
                    'Document_Reject':count_rowDocument_StatusReject,
                    'Document_Cancel':count_rowDocument_StatusCancel
                }
                int_step_now2 = step_now2 - 1
                for x in range(len(list_group)):
                    # print('len: ',x)
                    group_x = list_group[x]
                    email_ = group_x['list_onemail']
                    id_group =  group_x['group_id']
                    if id_group not in list_id_group :
                        list_id_group.append(id_group)
                        if group_x['group_status'] == 'ACTIVE' and self.emailUser in email_:
                            # print('6666666666666666')
                            # print('tmp_sicode : ',tmp_sicode)
                            tracking_id = group_x['tracking_id']
                            group_id = group_x['group_id']
                            sid_code = group_x['sidCode']
                            dateTime = group_x['dateTime']
                            doc_id = group_x['document_id']
                            sender_name = group_x['sender_name']
                            sender_email = group_x['sender_email']
                            file_name = group_x['file_name']
                            options_page_document = group_x['options_page_document']
                            document_urgent = group_x['urgent_type']
                            document_name = group_x['document_name']
                            document_urgent_string = group_x['document_urgent_string']
                            document_type = group_x['document_type']
                            max_step  = group_x['max_step']
                            step_now2 = group_x['step_now2']
                            status_file_code = group_x['status_file_code']
                            status_file_string = group_x['status_file_string']
                            tmp_biz_info =  group_x['tmp_biz_info']
                            datetime_str =  group_x['datetime_str']
                            datetime_TH = group_x['datetime_TH']
                            dateTime_display = group_x['dateTime_display']
                            stamp_all =  group_x['stamp_all']
                            date_String = group_x['date_String']
                            time_String = group_x['time_String']

                            list_arr.append({
                                'group_id': group_id,
                                'group_status':True,
                                'sidCode':sid_code,
                                'document_name': document_name,
                                'document_type': document_type,
                                'document_urgent': document_urgent,
                                'document_urgent_string': document_urgent_string,
                                'dateTime_String' : datetime_str,
                                'dateTime_String_TH_1' : datetime_TH,
                                'dateTime_display': dateTime_display,
                                'doc_id': doc_id,
                                'stamp_all': stamp_all,
                                'options_page_document': options_page_document,
                                'max_step' : max_step,
                                'step_now': step_now2,
                                'date_String': date_String,
                                'time_String': time_String,
                                'status_file_code': status_file_code,
                                'status_file_string': status_file_string,
                                'dateTime':int(dateTime_String.timestamp()),
                                'tracking_id' : tracking_id,
                                'sender_name': sender_name,
                                'sender_email': sender_email,
                                'file_name': file_name,
                                'document_business' : tmp_biz_info,
                            })
                if tmp_sicode not in list_sid_ever:
                    list_arr.append({
                        'group_id':None,
                        'group_status':False,
                        'sidCode':tmp_sicode,
                        'document_name':documentName,
                        'document_type':tmp_document_type,
                        'document_urgent':documentUrgentType,
                        'document_urgent_string':documentUrgentString,
                        'dateTime_String':str(dateTime_String).split('+')[0],
                        'dateTime_String_TH_1':th_dateTime_2,
                        'dateTime_display':date_display_show,
                        'document_id':tmp_document_id,
                        'stamp_all':tmp_sign_page_options,
                        'options_page_document':tmp_options_page,
                        'max_step':max_step,
                        'step_now':step_now2,
                        'date_String':str(dateTime_String).split(' ')[0],
                        'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                        'status_file_code':res_status_file,
                        'status_file_string':res_status_file_string,
                        'dateTime':int(dateTime_String.timestamp()),
                        'tracking_id':tmp_tracking_id,
                        'sender_name':tmp_sender_name,
                        'sender_email':tmp_sender_email,
                        'file_name':tmp_file_name,
                        'document_business':tmp_biz_info
                    })
            json_Data['Document_Status_Details']  = {
                'Incomplete_Pendding':statusFile_count_pendding,
                'Complete_Approve':statusFile_count_approve,
                'Reject':statusFile_count_reject,
                'Wait':statusFile_count_wait
            }
            list_arr = sorted(list_arr, key=lambda k: k['dateTime'], reverse=True)
            json_Data['Document_Details'] = list_arr
            return {'result':'OK','messageText':json_Data,'status_Code':200,'messageER':None}
            
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

    def select_email_collect_v1(self,email_one):
        self.emailUser = email_one
        try:
            arr_group_id = []
            arr_sidcode = []
            tmp_query = paper_lessdocument.query.filter(and_(paper_lessdocument.options_page.contains('group_detail'),paper_lessdocument.options_page.contains(self.emailUser))).all()
            for z in range(len(tmp_query)):
                tmp_sidcode = tmp_query[z].step_id
                arr_sidcode.append(tmp_sidcode)
            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.step_data_sid.in_(arr_sidcode))\
                .order_by(desc(paper_lesssender.send_time))\
                .all()
            tmp_list = []             
            count_rowDocument = 0
            count_rowDocument_StatusActive = 0
            count_rowDocument_StatusReject = 0
            count_rowDocument_StatusCancel = 0
            statusFile_count_approve = 0
            statusFile_count_pendding = 0
            statusFile_count_reject = 0
            statusFile_count_wait = 0
            list_temp_query = []
            tmp_sid_code_list = []
            arr_gruop = []
            arr_group_sid = []
            tmp_arr_sid = []
            tmp_group_id = None
            sid_list = []
            sid_list_email = []
            json_Data = {}
            list_arr = []
            list_json = []
            for u in range(len(query_temp)):
                for z in range(len(query_temp[u])):
                    if z == 0:
                        tmp_dict_json = query_temp[u][z].__dict__
                        # if '_sa_instance_state' in tmp_dict_json:
                        #     del tmp_dict_json['_sa_instance_state']
                        tmp_sicode = tmp_dict_json['step_data_sid']
                        tmp_sid_code_list.append(tmp_sicode)
                        tmp_send_time = tmp_dict_json['send_time']
                        tmp_document_id = tmp_dict_json['doc_id']
                        tmp_tracking_id = tmp_dict_json['tracking_id']
                        tmp_sender_name = tmp_dict_json['sender_name']
                        tmp_sender_email = tmp_dict_json['sender_email']
                        tmp_file_name = tmp_dict_json['file_name']
                        tmp_group_id = tmp_dict_json['group_id']
                        if tmp_group_id != None:
                            tmp_group_id = eval(tmp_group_id)
                            for p in range(len(tmp_group_id)):
                                if tmp_group_id[p] not in arr_group_id:
                                    arr_group_id.append(tmp_group_id[p])
                    if z == 1:
                        tmp_dict_json = query_temp[u][z].__dict__
                        # if '_sa_instance_state' in tmp_dict_json:
                        #     del tmp_dict_json['_sa_instance_state']
                        tmp_sign_page_options = tmp_dict_json['sign_page_options']
                        tmp_document_type = tmp_dict_json['documentType']
                        # print(tmp_dict_json['options_page'])
                        if tmp_dict_json['options_page'] != None:
                            tmp_options_page = [eval(tmp_dict_json['options_page'])]
                        else:
                            tmp_options_page = []
                        if tmp_dict_json['documentJson'] != None:
                            documentJson_result = eval(tmp_dict_json['documentJson'])
                            documentName = documentJson_result['document_name']
                            documentType = documentJson_result['document_type']
                        else:
                            documentName = None
                            documentType = None
                        if tmp_dict_json['urgent_type'] != None:
                            documentUrgentType = tmp_dict_json['urgent_type']
                            if documentUrgentType == 'I':
                                documentUrgentString = 'ด่วนมาก'
                            elif documentUrgentType == 'U':
                                documentUrgentString = 'ด่วน'
                            elif documentUrgentType == 'M':
                                documentUrgentString = 'ปกติ'
                        
                    if z == 2:
                        tmp_dict_json = query_temp[u][z].__dict__
                        tmp_biz_info = None 
                        # if '_sa_instance_state' in tmp_dict_json:
                        #     del tmp_dict_json['_sa_instance_state']
                        step_now2 = 0
                        step_now = None
                        jsonData_eval = eval(tmp_dict_json['data_json'])
                        arr_step_info = []
                        if tmp_dict_json['biz_info'] != None or tmp_dict_json['biz_info'] != '':
                            if tmp_dict_json['biz_info'] != 'None':
                                tmp_biz_info = None
                                eval_biz_info = eval(tmp_dict_json['biz_info'])
                                if 'dept_name' in eval_biz_info:            
                                    tmp_biz_info = {
                                        'tax_id':eval_biz_info['id_card_num'],
                                        'role_name' : eval_biz_info['role_name'],
                                        'dept_name' : eval_biz_info['dept_name'],
                                        'role_level' : eval_biz_info['role_level']               
                                    }                                
                                elif 'dept_name' not in eval_biz_info:
                                    tmp_biz_info = {
                                        'tax_id':eval_biz_info['id_card_num'],
                                        'role_name' : eval_biz_info['role_name'],
                                        'dept_name' : [],
                                        'role_level' : eval_biz_info['role_level']               
                                    }
                        
                        tmp_list_step_infomation = []
                        if 'step_num' in jsonData_eval:
                            tmp_step_info = [eval(tmp_dict_json['data_json'])]
                        else:
                            tmp_step_info = eval(tmp_dict_json['data_json'])
                        if 'step_num' in jsonData_eval:
                            tmp_list_step_infomation.append(jsonData_eval)
                            jsonData_eval = tmp_list_step_infomation

                        if 'step_num' in jsonData_eval:
                            step_status = ''
                            step_before = ''
                            res_status_file = 'Y'
                            arr_step_totle = []
                            json_data_info = jsonData_eval
                            if 'step_detail' in json_data_info:
                                for s in range(len(json_data_info['step_detail'])):
                                    json_info_step2 = {}
                                    for u in range(len(json_data_info['step_detail'][s]['activity_code'])):
                                        oneMail = str(json_data_info['step_detail'][s]['one_email']).replace(' ','').lower()
                                        if str(oneMail).replace(' ','').lower() == self.emailUser:
                                            if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
                                                if step_before == '':
                                                    try:
                                                        if json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Complete':
                                                            step_before = 'Complete'
                                                        elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Approve':
                                                            step_before = 'Complete'
                                                        elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Reject':
                                                            step_before = 'Reject'
                                                    except Exception as e:
                                                        step_before = ''
                                                if step_before != 'Reject':
                                                    if json_data_info['step_detail'][s]['activity_status'][u] == 'Complete':
                                                        step_status = 'Complete'
                                                    elif json_data_info['step_detail'][s]['activity_status'][u] == 'Approve':
                                                        step_status = 'Complete'
                                                    elif json_data_info['step_detail'][s]['activity_status'][u] == 'Reject':
                                                        step_status = 'Reject'
                                                    else:
                                                        try:
                                                            step_status  = 'Incomplete'
                                                        except Exception as ex:
                                                            step_status = 'Incomplete'
                                                arr_step_info.append(step_status)
                                                arr_step_info.append(step_before)
                            if 'Reject' in arr_step_info:
                                res_status_file = 'R'
                                res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                            elif 'Complete' in arr_step_info:
                                res_status_file = 'Y'
                                res_status_file_string = 'อนุมัติแล้ว'
                            elif 'Waitting' in arr_step_info:
                                res_status_file = 'W'
                                res_status_file_string = 'รอคุณอนุมัติ'
                            elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                                res_status_file = 'W'
                                res_status_file_string = 'รอคุณอนุมัติ'
                            else:
                                res_status_file_string = 'อนุมัติแล้ว'
                            if res_status_file == 'W':
                                statusFile_count_wait = statusFile_count_wait + 1
                            elif res_status_file == 'Y':
                                statusFile_count_approve = statusFile_count_approve + 1
                            elif res_status_file == 'R':
                                statusFile_count_reject = statusFile_count_reject + 1
                            else:
                                statusFile_count_pendding = statusFile_count_pendding + 1
                        else:
                            tmp_sum_email = []
                            step_status = ''
                            res_status_file = 'Y'
                            res_status_file_string = ''
                            step_before = ''
                            step_list_before = []
                            step_list_ = []
                            step_list_next = []
                            arr_step_totle = []
                            step_me = ''
                            step_sum_status = []
                            sum_status_step_list = []
                            list_check_step = []
                            step_list_data = []
                            max_step = (len(jsonData_eval))
                            step_infomation = jsonData_eval
                            sum_status_step = []
                            tmp_status_sum = []
                            tmp_acvt_code_sum = []
                            arr_email_list = []
                            email_step_sum = []
                            arr_04_sid = []
                            for i in range(len(step_infomation)):
                                list_check_step = []
                                json_step_info_2 = {}
                                step_list_data = []
                                step_status = []
                                step_email = []
                                tmp_acvt_code = []
                                tmp_keep_status = []
                                tmp_acvt_status = []
                                step_ = step_infomation[i]
                                step_num = step_infomation[i]['step_num']
                                json_step_info_2['step_status'] = ''
                                tmp_step_detail = step_['step_detail']
                                for u in range(len(tmp_step_detail)):
                                    tmp_arr_step_detail = tmp_step_detail[u]
                                    tmp_status = tmp_arr_step_detail['activity_status']
                                    tmp_code = tmp_arr_step_detail['activity_code']
                                    tmp_email = tmp_arr_step_detail['one_email']
                                    for s in range(len(tmp_code)):
                                        if tmp_code[s] == 'A03':
                                            tmp_acvt_code.append(tmp_code[s])
                                            step_status.append(tmp_status[s])
                                            tmp_acvt_status.append(tmp_status[s])
                                            step_email.append(tmp_email)
                                            tmp_sum_email.append(tmp_email)
                                        # if tmp_code[s] == 'A04':
                                        #     tmp_acvt_code.append(tmp_code[s])
                                        #     tmp_acvt_status.append(tmp_status[s])
                                        #     arr_04_sid.append(tmp_sicode)
                                        #     step_email.append(tmp_email)
                                        #     tmp_sum_email.append(tmp_email)
                                email_step_sum.append(step_email)
                                # print(step_status)
                                # if tmp_sicode not in arr_04_sid:
                                if 'step_sign' in step_:
                                    tmp_step_sign = step_['step_sign']
                                    if tmp_step_sign['status'] == True:
                                        len_step_status = len(tmp_step_sign['data'])
                                        
                                        if 'Complete' in step_status and step_status.count('Complete') == len_step_status:
                                            tmp_status_sum.append('Complete')
                                        else:
                                            for tyy in range(len(tmp_step_detail)):
                                                tmp_arr_step_detail = tmp_step_detail[tyy]
                                                tmp_status = tmp_arr_step_detail['activity_status']
                                                tmp_code = tmp_arr_step_detail['activity_code']
                                                tmp_email = tmp_arr_step_detail['one_email']
                                                for zui in range(len(tmp_code)):
                                                    if tmp_code[zui] == 'A03':
                                                        if tmp_email == self.emailUser and tmp_status[zui] == 'Incomplete':
                                                            tmp_status_sum.append('Incomplete')
                                                            tmp_keep_status.append('Incomplete')
                                                        elif tmp_email == self.emailUser and tmp_status[zui] == 'Complete':
                                                            tmp_status_sum.append('Incomplete_1')
                                                            tmp_keep_status.append('Incomplete')                                            
                                            if 'Incomplete' not in tmp_keep_status:
                                                tmp_status_sum.append('Incomplete_1')
                                                tmp_keep_status.append('Incomplete')  
                                    else:
                                        if 'Reject' in step_status:
                                            tmp_status_sum.append('Reject')
                                        elif 'Approve' in step_status:
                                            tmp_status_sum.append('Complete')
                                        elif 'Complete' in step_status:
                                            tmp_status_sum.append('Complete')
                                        elif 'Incomplete' in step_status:
                                            tmp_status_sum.append('Incomplete')
                                        elif 'Pending' in step_status:
                                            tmp_status_sum.append('Incomplete')
                                        else:
                                            tmp_status_sum.append('Complete')
                                else:
                                    if 'Reject' in step_status:
                                        tmp_status_sum.append('Reject')
                                    elif 'Approve' in step_status:
                                        tmp_status_sum.append('Complete')
                                    elif 'Complete' in step_status:
                                        tmp_status_sum.append('Complete')
                                    elif 'Incomplete' in step_status:
                                        tmp_status_sum.append('Incomplete')
                                    elif 'Pending' in step_status:
                                        tmp_status_sum.append('Incomplete')
                                    else:
                                        tmp_status_sum.append('Complete')
                            if len(tmp_status_sum) != 0:
                                count_email = tmp_sum_email.count(self.emailUser)
                                for zzi in range(len(step_infomation)):
                                    list_check_step = []
                                    json_step_info_2 = {}
                                    step_list_data = []
                                    step_status = []
                                    step_ = step_infomation[zzi]
                                    step_num = step_infomation[zzi]['step_num']
                                    json_step_info_2['step_status'] = ''
                                    tmp_step_detail = step_['step_detail']
                                    
                                    for zi in range(len(tmp_step_detail)):
                                        tmp_arr_step_detail_2 = tmp_step_detail[zi]
                                        oneMail = str(tmp_arr_step_detail_2['one_email']).replace(' ','').lower()            
                                        tmp_step_me = int(step_num) - 1
                                        step_num_int2 = int(step_num)
                                        stop = False
                                        for ii in range(len(tmp_status_sum)):
                                            if stop == False :
                                                list_status = Counter(tmp_status_sum)
                                                if 'Complete' in list_status and len(list_status) == 1 :
                                                    step_now2 = len(tmp_status_sum)
                                                    stop = True
                                                elif tmp_status_sum[ii] == 'Incomplete' or tmp_status_sum[ii] == 'Reject' or tmp_status_sum[ii] == 'Approve':
                                                    step_now2 = ii+1
                                                    stop = True
                                        if 'Reject' in tmp_status_sum:
                                            step_now = step_num_int2
                                            arr_step_info.append('Reject')
                                        elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Incomplete_input':
                                            step_now = step_num_int2
                                            arr_step_info.append('Wait_input')
                                        elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Incomplete_1':
                                            step_now = step_num_int2
                                            arr_step_info.append('Incomplete')
                                        elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Incomplete':                                        
                                            if self.emailUser not in arr_email_list:
                                                index_step_me = tmp_step_me
                                                if index_step_me != 0:
                                                    while index_step_me > 0:
                                                        if len(arr_step_info) == 0:
                                                            index_step_me = index_step_me - 1
                                                            if tmp_status_sum[index_step_me] == 'Incomplete_1':
                                                                step_now = step_num_int2
                                                                arr_step_info.append('Incomplete')
                                                            elif tmp_status_sum[index_step_me] == 'Incomplete':
                                                                step_now = step_num_int2
                                                                arr_step_info.append('Incomplete')
                                                            else:
                                                                step_now = step_num_int2
                                                                arr_step_info.append('Wait')
                                                            arr_email_list.append(self.emailUser)
                                                        else:
                                                            index_step_me = index_step_me - 1
                                                            continue
                                                else:
                                                    step_now = step_num_int2
                                                    arr_step_info.append('Wait')                                            
                                        elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Complete':                                    
                                            if self.emailUser not in arr_email_list:
                                                if count_email == 1:
                                                    for nz in range(step_num_int2,len(tmp_status_sum),1):
                                                        if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                            step_now = step_num_int2
                                                            arr_step_info.append('Wait')
                                                        elif self.emailUser not in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                            step_now = step_num_int2
                                                            arr_step_info.append('Progress')
                                                    arr_email_list.append(self.emailUser)
                                                else:                                                
                                                    for nz in range(step_num_int2,len(tmp_status_sum),1):
                                                        if self.emailUser not in arr_email_list:
                                                            if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Complete':
                                                                pass                                                    
                                                            if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                                step_now = step_num_int2
                                                                arr_step_info.append('Wait')
                                                                arr_email_list.append(self.emailUser)
                                                            if self.emailUser not in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                                step_now = step_num_int2
                                                                arr_step_info.append('Progress')
                                                                arr_email_list.append(self.emailUser)
                                                            
                                        
                                        if step_now == None:                                  
                                            step_now = step_num_int2
                                if 'Reject' in arr_step_info:
                                    res_status_file = 'R'
                                    res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                                elif 'Wait_input' in arr_step_info:
                                    res_status_file = 'WI'
                                    res_status_file_string = 'รอคุณกรอกข้อมูล'
                                elif 'Progress' in arr_step_info and 'Wait' in arr_step_info:
                                    res_status_file = 'Z'
                                    res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                                elif 'Wait' in arr_step_info:
                                    res_status_file = 'W'
                                    res_status_file_string = 'รอคุณอนุมัติ'
                                elif 'Incomplete' in arr_step_info:
                                    res_status_file = 'Z'
                                    res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                                elif 'Progress' in arr_step_info:
                                    res_status_file = 'N'
                                    res_status_file_string = 'กำลังดำเนินการ'                    
                                elif arr_step_info.count('Incomplete') >= 2:
                                    res_status_file = 'Z'
                                    res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                                elif 'Incomplete' in arr_step_info and 'Complete' in arr_step_info:
                                    res_status_file = 'N'
                                    res_status_file_string = 'กำลังดำเนินการ'
                                else:
                                    res_status_file_string = 'อนุมัติแล้ว'
                                if res_status_file == 'W':
                                    statusFile_count_wait = statusFile_count_wait + 1
                                elif res_status_file == 'Y':
                                    statusFile_count_approve = statusFile_count_approve + 1
                                elif res_status_file == 'R':
                                    statusFile_count_reject = statusFile_count_reject + 1
                                else:
                                    statusFile_count_pendding = statusFile_count_pendding + 1
                    list_temp_query.append(tmp_dict_json)
                    dateTime_String = tmp_send_time
                    th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                    ts = int(time.time())
                    date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                    year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                    datetime_display = int(dateTime_String.timestamp())
                    date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                    yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                    time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                    old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                    if date_time_today == date_time_db:
                        date_display_show = time_show_db
                    else:
                        if year_today == yar_db:
                            date_display_show = convert_datetime_TH_2_display(datetime_display)
                        else:
                            date_display_show = old_year
                count_rowDocument = len(tmp_sid_code_list)
                json_Data['sum_Document']  = count_rowDocument
                
                int_step_now2 = step_now2 - 1
                
                list_arr.append({
                    'group_id':None,
                    'group_status':False,
                    'sidCode':tmp_sicode,
                    'document_name':documentName,
                    'document_type':tmp_document_type,
                    'document_urgent':documentUrgentType,
                    'document_urgent_string':documentUrgentString,
                    'dateTime_String':str(dateTime_String).split('+')[0],
                    'dateTime_String_TH_1':th_dateTime_2,
                    'dateTime_display':date_display_show,
                    'document_id':tmp_document_id,
                    'stamp_all':tmp_sign_page_options,
                    'options_page_document':tmp_options_page,
                    'max_step':max_step,
                    'step_now':step_now2,
                    # 'dateTime_String_TH_2':th_dateTime_2,
                    'date_String':str(dateTime_String).split(' ')[0],
                    'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                    'status_file_code':res_status_file,
                    'status_file_string':res_status_file_string,
                    'dateTime':int(dateTime_String.timestamp()),
                    'tracking_id':tmp_tracking_id,
                    'sender_name':tmp_sender_name,
                    'sender_email':tmp_sender_email,
                    'file_name':tmp_file_name,
                    'document_business':tmp_biz_info
                })
            list_group_detail = []
            tmp_query_group = tb_group_document.query.filter(tb_group_document.id.in_(arr_group_id)).filter(tb_group_document.status=='ACTIVE').all()
            for n in range(len(tmp_query_group)):
                arr_file_name = []
                arr_trakcing_id = []
                arr_documentName = []
                arr_document_Type = []
                arr_documentUrgentType = []
                arr_documentUrgentString = []
                arr_dateTime_String = []
                arr_th_dateTime_2 = []
                arr_date_display_show = []
                arr_tmp_document_id = []
                arr_tmp_sign_page_options = []
                arr_date_String = []
                arr_time_String = []
                arr_dateTime = []
                arr_tmp_sender_name = []
                arr_tmp_sender_email = []
                arr_document_business = []
                arr_res_status_file = []
                arr_max_step = []
                arr_step_now2 = []
                tmp_group_id = tmp_query_group[n].id
                tmp_sid_group = tmp_query_group[n].sid_group                
                tmp_data_group = tmp_query_group[n].data_group
                tmp_datetime_group = tmp_query_group[n].updatetime
                tmp_create_by = tmp_query_group[n].create_by
                tmp_update_by = tmp_query_group[n].update_by
                if tmp_sid_group != None:
                    tmp_sid_group = eval(tmp_sid_group)
                    # tmp_query_db = paper_lesssender.query.filter(paper_lesssender.step_data_sid.in_(tmp_sid_group)).all()
                    tmp_query_db = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep)\
                        .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                        .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                        .filter(paper_lesssender.status=='ACTIVE')\
                        .filter(paper_lesssender.step_data_sid.in_(tmp_sid_group))\
                        .order_by(desc(paper_lesssender.send_time))\
                        .all()
                    for u in range(len(tmp_query_db)):
                        for z in range(len(tmp_query_db[u])):
                            if z == 0:
                                tmp_dict_json = tmp_query_db[u][z].__dict__
                                # if '_sa_instance_state' in tmp_dict_json:
                                #     del tmp_dict_json['_sa_instance_state']
                                tmp_sicode = tmp_dict_json['step_data_sid']
                                tmp_sid_code_list.append(tmp_sicode)
                                tmp_send_time = tmp_dict_json['send_time']
                                tmp_document_id = tmp_dict_json['doc_id']
                                tmp_tracking_id = tmp_dict_json['tracking_id']
                                tmp_sender_name = tmp_dict_json['sender_name']
                                tmp_sender_email = tmp_dict_json['sender_email']
                                tmp_file_name = tmp_dict_json['file_name']
                                arr_file_name.append(tmp_file_name)
                                arr_trakcing_id.append(tmp_tracking_id)
                                dateTime_String = tmp_send_time
                                th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                                ts = int(time.time())
                                date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                                year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                                datetime_display = int(dateTime_String.timestamp())
                                date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                                yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                                time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                                old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                                if date_time_today == date_time_db:
                                    date_display_show = time_show_db
                                else:
                                    if year_today == yar_db:
                                        date_display_show = convert_datetime_TH_2_display(datetime_display)
                                    else:
                                        date_display_show = old_year
                                arr_dateTime_String.append(str(dateTime_String).split('+')[0])
                                arr_th_dateTime_2.append(th_dateTime_2)
                                arr_date_display_show.append(date_display_show)
                                arr_tmp_document_id.append(tmp_document_id)
                                arr_date_String.append(str(dateTime_String).split(' ')[0])
                                arr_time_String.append(str(dateTime_String).split(' ')[1].split('+')[0])
                                arr_dateTime.append(int(dateTime_String.timestamp()))
                                arr_tmp_sender_name.append(tmp_sender_name)
                                arr_tmp_sender_email.append(tmp_sender_email)
                            if z == 1:
                                tmp_dict_json = tmp_query_db[u][z].__dict__
                                # if '_sa_instance_state' in tmp_dict_json:
                                #     del tmp_dict_json['_sa_instance_state']
                                tmp_sign_page_options = tmp_dict_json['sign_page_options']
                                tmp_document_type = tmp_dict_json['documentType']
                                if tmp_dict_json['options_page'] != None:
                                    tmp_options_page = [eval(tmp_dict_json['options_page'])]
                                else:
                                    tmp_options_page = []
                                if tmp_dict_json['documentJson'] != None:
                                    documentJson_result = eval(tmp_dict_json['documentJson'])
                                    documentName = documentJson_result['document_name']
                                    documentType = documentJson_result['document_type']
                                else:
                                    documentName = None
                                    documentType = None
                                if tmp_dict_json['urgent_type'] != None:
                                    documentUrgentType = tmp_dict_json['urgent_type']
                                    if documentUrgentType == 'I':
                                        documentUrgentString = 'ด่วนมาก'
                                    elif documentUrgentType == 'U':
                                        documentUrgentString = 'ด่วน'
                                    elif documentUrgentType == 'M':
                                        documentUrgentString = 'ปกติ'
                                arr_documentName.append(documentName)
                                arr_document_Type.append(documentType)
                                arr_documentUrgentType.append(documentUrgentType)
                                arr_documentUrgentString.append(documentUrgentString)
                                arr_tmp_sign_page_options.append(tmp_sign_page_options)
                            if z == 2:
                                tmp_dict_json = tmp_query_db[u][z].__dict__
                                tmp_biz_info = None 
                                # if '_sa_instance_state' in tmp_dict_json:
                                #     del tmp_dict_json['_sa_instance_state']
                                step_now2 = 0
                                step_now = None
                                jsonData_eval = eval(tmp_dict_json['data_json'])
                                arr_step_info = []
                                if tmp_dict_json['biz_info'] != None or tmp_dict_json['biz_info'] != '':
                                    if tmp_dict_json['biz_info'] != 'None':
                                        tmp_biz_info = None
                                        eval_biz_info = eval(tmp_dict_json['biz_info'])
                                        if 'dept_name' in eval_biz_info:            
                                            tmp_biz_info = {
                                                'tax_id':eval_biz_info['id_card_num'],
                                                'role_name' : eval_biz_info['role_name'],
                                                'dept_name' : eval_biz_info['dept_name'],
                                                'role_level' : eval_biz_info['role_level']               
                                            }                                
                                        elif 'dept_name' not in eval_biz_info:
                                            tmp_biz_info = {
                                                'tax_id':eval_biz_info['id_card_num'],
                                                'role_name' : eval_biz_info['role_name'],
                                                'dept_name' : [],
                                                'role_level' : eval_biz_info['role_level']               
                                            }
                                arr_document_business.append(tmp_biz_info)
                                
                                tmp_list_step_infomation = []
                                if 'step_num' in jsonData_eval:
                                    tmp_step_info = [eval(tmp_dict_json['data_json'])]
                                else:
                                    tmp_step_info = eval(tmp_dict_json['data_json'])
                                if 'step_num' in jsonData_eval:
                                    tmp_list_step_infomation.append(jsonData_eval)
                                    jsonData_eval = tmp_list_step_infomation
                                if 'step_num' in jsonData_eval:
                                    step_status = ''
                                    step_before = ''
                                    res_status_file = 'Y'
                                    arr_step_totle = []
                                    json_data_info = jsonData_eval
                                    if 'step_detail' in json_data_info:
                                        for s in range(len(json_data_info['step_detail'])):
                                            json_info_step2 = {}
                                            for u in range(len(json_data_info['step_detail'][s]['activity_code'])):
                                                oneMail = str(json_data_info['step_detail'][s]['one_email']).replace(' ','').lower()
                                                if str(oneMail).replace(' ','').lower() == self.emailUser:
                                                    if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
                                                        if step_before == '':
                                                            try:
                                                                if json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Complete':
                                                                    step_before = 'Complete'
                                                                elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Approve':
                                                                    step_before = 'Complete'
                                                                elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Reject':
                                                                    step_before = 'Reject'
                                                            except Exception as e:
                                                                step_before = ''
                                                        if step_before != 'Reject':
                                                            if json_data_info['step_detail'][s]['activity_status'][u] == 'Complete':
                                                                step_status = 'Complete'
                                                            elif json_data_info['step_detail'][s]['activity_status'][u] == 'Approve':
                                                                step_status = 'Complete'
                                                            elif json_data_info['step_detail'][s]['activity_status'][u] == 'Reject':
                                                                step_status = 'Reject'
                                                            else:
                                                                try:
                                                                    step_status  = 'Incomplete'
                                                                except Exception as ex:
                                                                    step_status = 'Incomplete'
                                                        arr_step_info.append(step_status)
                                                        arr_step_info.append(step_before)
                                    if 'Reject' in arr_step_info:
                                        res_status_file = 'R'
                                        res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                                    elif 'Complete' in arr_step_info:
                                        res_status_file = 'Y'
                                        res_status_file_string = 'อนุมัติแล้ว'
                                    elif 'Waitting' in arr_step_info:
                                        res_status_file = 'W'
                                        res_status_file_string = 'รอคุณอนุมัติ'
                                    elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                                        res_status_file = 'W'
                                        res_status_file_string = 'รอคุณอนุมัติ'
                                    else:
                                        res_status_file_string = 'อนุมัติแล้ว'
                                    if res_status_file == 'W':
                                        statusFile_count_wait = statusFile_count_wait + 1
                                    elif res_status_file == 'Y':
                                        statusFile_count_approve = statusFile_count_approve + 1
                                    elif res_status_file == 'R':
                                        statusFile_count_reject = statusFile_count_reject + 1
                                    else:
                                        statusFile_count_pendding = statusFile_count_pendding + 1
                                else:
                                    tmp_sum_email = []
                                    step_status = ''
                                    res_status_file = 'Y'
                                    res_status_file_string = ''
                                    step_before = ''
                                    step_list_before = []
                                    step_list_ = []
                                    step_list_next = []
                                    arr_step_totle = []
                                    step_me = ''
                                    step_sum_status = []
                                    sum_status_step_list = []
                                    list_check_step = []
                                    step_list_data = []
                                    max_step = (len(jsonData_eval))
                                    step_infomation = jsonData_eval
                                    sum_status_step = []
                                    tmp_status_sum = []
                                    tmp_acvt_code_sum = []
                                    arr_email_list = []
                                    email_step_sum = []
                                    arr_04_sid = []
                                    for i in range(len(step_infomation)):
                                        list_check_step = []
                                        json_step_info_2 = {}
                                        step_list_data = []
                                        step_status = []
                                        step_email = []
                                        tmp_acvt_code = []
                                        tmp_keep_status = []
                                        tmp_acvt_status = []
                                        step_ = step_infomation[i]
                                        step_num = step_infomation[i]['step_num']
                                        json_step_info_2['step_status'] = ''
                                        tmp_step_detail = step_['step_detail']
                                        for u in range(len(tmp_step_detail)):
                                            tmp_arr_step_detail = tmp_step_detail[u]
                                            tmp_status = tmp_arr_step_detail['activity_status']
                                            tmp_code = tmp_arr_step_detail['activity_code']
                                            tmp_email = tmp_arr_step_detail['one_email']
                                            for s in range(len(tmp_code)):
                                                if tmp_code[s] == 'A03':
                                                    tmp_acvt_code.append(tmp_code[s])
                                                    step_status.append(tmp_status[s])
                                                    tmp_acvt_status.append(tmp_status[s])
                                                    step_email.append(tmp_email)
                                                    tmp_sum_email.append(tmp_email)
                                                # if tmp_code[s] == 'A04':
                                                #     tmp_acvt_code.append(tmp_code[s])
                                                #     tmp_acvt_status.append(tmp_status[s])
                                                #     arr_04_sid.append(tmp_sicode)
                                                #     step_email.append(tmp_email)
                                                #     tmp_sum_email.append(tmp_email)
                                        email_step_sum.append(step_email)
                                        # print(step_status)
                                        # if tmp_sicode not in arr_04_sid:
                                        if 'step_sign' in step_:
                                            tmp_step_sign = step_['step_sign']
                                            if tmp_step_sign['status'] == True:
                                                len_step_status = len(tmp_step_sign['data'])
                                                
                                                if 'Complete' in step_status and step_status.count('Complete') == len_step_status:
                                                    tmp_status_sum.append('Complete')
                                                else:
                                                    for tyy in range(len(tmp_step_detail)):
                                                        tmp_arr_step_detail = tmp_step_detail[tyy]
                                                        tmp_status = tmp_arr_step_detail['activity_status']
                                                        tmp_code = tmp_arr_step_detail['activity_code']
                                                        tmp_email = tmp_arr_step_detail['one_email']
                                                        for zui in range(len(tmp_code)):
                                                            if tmp_code[zui] == 'A03':
                                                                if tmp_email == self.emailUser and tmp_status[zui] == 'Incomplete':
                                                                    tmp_status_sum.append('Incomplete')
                                                                    tmp_keep_status.append('Incomplete')
                                                                elif tmp_email == self.emailUser and tmp_status[zui] == 'Complete':
                                                                    tmp_status_sum.append('Incomplete_1')
                                                                    tmp_keep_status.append('Incomplete')                                            
                                                    if 'Incomplete' not in tmp_keep_status:
                                                        tmp_status_sum.append('Incomplete_1')
                                                        tmp_keep_status.append('Incomplete')  
                                            else:
                                                if 'Reject' in step_status:
                                                    tmp_status_sum.append('Reject')
                                                elif 'Approve' in step_status:
                                                    tmp_status_sum.append('Complete')
                                                elif 'Complete' in step_status:
                                                    tmp_status_sum.append('Complete')
                                                elif 'Incomplete' in step_status:
                                                    tmp_status_sum.append('Incomplete')
                                                elif 'Pending' in step_status:
                                                    tmp_status_sum.append('Incomplete')
                                                else:
                                                    tmp_status_sum.append('Complete')
                                        else:
                                            if 'Reject' in step_status:
                                                tmp_status_sum.append('Reject')
                                            elif 'Approve' in step_status:
                                                tmp_status_sum.append('Complete')
                                            elif 'Complete' in step_status:
                                                tmp_status_sum.append('Complete')
                                            elif 'Incomplete' in step_status:
                                                tmp_status_sum.append('Incomplete')
                                            elif 'Pending' in step_status:
                                                tmp_status_sum.append('Incomplete')
                                            else:
                                                tmp_status_sum.append('Complete')
                                    if len(tmp_status_sum) != 0:
                                        count_email = tmp_sum_email.count(self.emailUser)
                                        for zzi in range(len(step_infomation)):
                                            list_check_step = []
                                            json_step_info_2 = {}
                                            step_list_data = []
                                            step_status = []
                                            step_ = step_infomation[zzi]
                                            step_num = step_infomation[zzi]['step_num']
                                            json_step_info_2['step_status'] = ''
                                            tmp_step_detail = step_['step_detail']
                                            
                                            for zi in range(len(tmp_step_detail)):
                                                tmp_arr_step_detail_2 = tmp_step_detail[zi]
                                                oneMail = str(tmp_arr_step_detail_2['one_email']).replace(' ','').lower()            
                                                tmp_step_me = int(step_num) - 1
                                                step_num_int2 = int(step_num)
                                                stop = False
                                                for ii in range(len(tmp_status_sum)):
                                                    if stop == False :
                                                        list_status = Counter(tmp_status_sum)
                                                        if 'Complete' in list_status and len(list_status) == 1 :
                                                            step_now2 = len(tmp_status_sum)
                                                            stop = True
                                                        elif tmp_status_sum[ii] == 'Incomplete' or tmp_status_sum[ii] == 'Reject' or tmp_status_sum[ii] == 'Approve':
                                                            step_now2 = ii+1
                                                            stop = True
                                                if 'Reject' in tmp_status_sum:
                                                    step_now = step_num_int2
                                                    arr_step_info.append('Reject')
                                                elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Incomplete_input':
                                                    step_now = step_num_int2
                                                    arr_step_info.append('Wait_input')
                                                elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Incomplete_1':
                                                    step_now = step_num_int2
                                                    arr_step_info.append('Incomplete')
                                                elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Incomplete':                                        
                                                    if self.emailUser not in arr_email_list:
                                                        index_step_me = tmp_step_me
                                                        if index_step_me != 0:
                                                            while index_step_me > 0:
                                                                if len(arr_step_info) == 0:
                                                                    index_step_me = index_step_me - 1
                                                                    if tmp_status_sum[index_step_me] == 'Incomplete_1':
                                                                        step_now = step_num_int2
                                                                        arr_step_info.append('Incomplete')
                                                                    elif tmp_status_sum[index_step_me] == 'Incomplete':
                                                                        step_now = step_num_int2
                                                                        arr_step_info.append('Incomplete')
                                                                    else:
                                                                        step_now = step_num_int2
                                                                        arr_step_info.append('Wait')
                                                                    arr_email_list.append(self.emailUser)
                                                                else:
                                                                    index_step_me = index_step_me - 1
                                                                    continue
                                                        else:
                                                            step_now = step_num_int2
                                                            arr_step_info.append('Wait')                                            
                                                elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Complete':                                    
                                                    if self.emailUser not in arr_email_list:
                                                        if count_email == 1:
                                                            for nz in range(step_num_int2,len(tmp_status_sum),1):
                                                                if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                                    step_now = step_num_int2
                                                                    arr_step_info.append('Wait')
                                                                elif self.emailUser not in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                                    step_now = step_num_int2
                                                                    arr_step_info.append('Progress')
                                                            arr_email_list.append(self.emailUser)
                                                        else:                                                
                                                            for nz in range(step_num_int2,len(tmp_status_sum),1):
                                                                if self.emailUser not in arr_email_list:
                                                                    if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Complete':
                                                                        pass                                                    
                                                                    if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                                        step_now = step_num_int2
                                                                        arr_step_info.append('Wait')
                                                                        arr_email_list.append(self.emailUser)
                                                                    if self.emailUser not in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                                        step_now = step_num_int2
                                                                        arr_step_info.append('Progress')
                                                                        arr_email_list.append(self.emailUser)
                                                                    
                                                
                                                if step_now == None:                                  
                                                    step_now = step_num_int2
                                        if 'Reject' in arr_step_info:
                                            res_status_file = 'R'
                                            res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                                        elif 'Wait_input' in arr_step_info:
                                            res_status_file = 'WI'
                                            res_status_file_string = 'รอคุณกรอกข้อมูล'
                                        elif 'Progress' in arr_step_info and 'Wait' in arr_step_info:
                                            res_status_file = 'Z'
                                            res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                                        elif 'Wait' in arr_step_info:
                                            res_status_file = 'W'
                                            res_status_file_string = 'รอคุณอนุมัติ'
                                        elif 'Incomplete' in arr_step_info:
                                            res_status_file = 'Z'
                                            res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                                        elif 'Progress' in arr_step_info:
                                            res_status_file = 'N'
                                            res_status_file_string = 'กำลังดำเนินการ'                    
                                        elif arr_step_info.count('Incomplete') >= 2:
                                            res_status_file = 'Z'
                                            res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                                        elif 'Incomplete' in arr_step_info and 'Complete' in arr_step_info:
                                            res_status_file = 'N'
                                            res_status_file_string = 'กำลังดำเนินการ'
                                        else:
                                            res_status_file_string = 'อนุมัติแล้ว'
                                        # if res_status_file == 'W':
                                        #     statusFile_count_wait = statusFile_count_wait + 1
                                        # elif res_status_file == 'Y':
                                        #     statusFile_count_approve = statusFile_count_approve + 1
                                        # elif res_status_file == 'R':
                                        #     statusFile_count_reject = statusFile_count_reject + 1
                                        # else:
                                        #     statusFile_count_pendding = statusFile_count_pendding + 1
                                        arr_res_status_file.append(res_status_file)
                                        arr_max_step.append(max_step)
                                        arr_step_now2.append(step_now2)
                    list_group_detail.append({
                        'group_id':tmp_group_id,
                        'group_status':True,
                        'sidCode':tmp_sid_group,
                        'file_name':arr_file_name,
                        'tracking_id':arr_trakcing_id,
                        'document_name':arr_documentName,
                        'document_type':arr_document_Type,
                        'document_urgent':arr_documentUrgentType,
                        'document_urgent_string':arr_documentUrgentString,
                        'dateTime_String':arr_dateTime_String,
                        'dateTime_String_TH_1':arr_th_dateTime_2,
                        'dateTime_display':arr_date_display_show,
                        'document_id':arr_tmp_document_id,
                        'stamp_all':arr_tmp_sign_page_options,
                        'options_page_document':arr_tmp_sign_page_options,
                        'date_String':arr_date_String,
                        'time_String':arr_time_String,   
                        'max_step':arr_max_step,
                        'step_now':arr_step_now2, 
                        'dateTime':arr_dateTime,
                        'sender_name':arr_tmp_sender_name,
                        'sender_email':arr_tmp_sender_email,
                        'document_business':arr_document_business,
                        'status_file_code':arr_res_status_file,
                        'status_file_string':[],    
                        'group_date_time':int(tmp_datetime_group.timestamp()),
                        'group_create_by':(tmp_create_by),
                        'group_update_by':(tmp_update_by) 
                    })
            json_Data['Document_Status_Details']  = {
                'Incomplete_Pendding':statusFile_count_pendding,
                'Complete_Approve':statusFile_count_approve,
                'Reject':statusFile_count_reject,
                'Wait':statusFile_count_wait
            }
            list_arr = sorted(list_arr, key=lambda k: k['dateTime'], reverse=True)
            json_Data['Document_Details'] = list_arr
            json_Data['Document_Group_Detail'] = list_group_detail
            return {'result':'OK','messageText':json_Data,'status_Code':200,'messageER':None}
            return {'result':'OK','messageText':None}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':[],'messageER':'notfound data' + str(e)}

    def select_sidcode_stepNow_nextStep_v1(self,sidcode,step_num):
        self.sidcode = sidcode
        self.step_num = step_num
        self.next_step_num = str(int(self.step_num) + 1)
        try:
            arr_email_nowstep_01 = []
            arr_email_nowstep = []
            arr_email_nextstep = []
            arrtmp_ = []
            tmp_query = paper_lessdatastep.query.filter(paper_lessdatastep.sid==(self.sidcode)).first()
            if tmp_query != None:
                tmp_datajson = eval(tmp_query.data_json)
                if 'step_num' in tmp_datajson:
                    arrtmp_.append(tmp_datajson)
                    tmp_datajson = arrtmp_
                for z in range(len(tmp_datajson)):
                    # if ''
                    tmp_data = tmp_datajson[z]
                    tmp_step_num = tmp_data['step_num']
                    count = 0
                    if 'step_sign' in tmp_data:
                        tmp_step_sign = tmp_data['step_sign']
                        tmp_data_stepsign = tmp_step_sign['data']
                        if 'status' in tmp_step_sign:
                            if tmp_step_sign['status'] == True:
                                for y in range(len(tmp_data_stepsign)):
                                    if 'status' in tmp_data_stepsign[y]:
                                        if tmp_data_stepsign[y]['status'] == 'complete':
                                            count = count + 1
                    # print(count)
                    if self.step_num == tmp_step_num:
                        tmp_stepdetail = tmp_data['step_detail']
                        for u in range(len(tmp_stepdetail)):
                            tmp_activity_code = tmp_stepdetail[u]['activity_code']
                            tmp_activity_data = tmp_stepdetail[u]['activity_data']
                            tmpemail_one = tmp_stepdetail[u]['one_email']
                            for z in range(len(tmp_activity_code)):
                                tmp_activity_code_one = tmp_activity_code[z]
                                if tmp_activity_code_one == 'A03':
                                    if 'status' in tmp_activity_data[z]:
                                        tmp_status_sign = tmp_activity_data[z]['status']
                                        arr_email_nowstep_01.append(tmpemail_one)
                                        if tmp_status_sign == 'complete':
                                            arr_email_nowstep.append(tmpemail_one)
                        if len(arr_email_nowstep_01) == count:
                            arr_email_nowstep =arr_email_nowstep_01
                    elif (self.next_step_num) == tmp_step_num:
                        tmp_stepdetail = tmp_data['step_detail']
                        for u in range(len(tmp_stepdetail)):
                            tmpemail_one = tmp_stepdetail[u]['one_email']
                            arr_email_nextstep.append(tmpemail_one)
                print(arr_email_nowstep)
                print(arr_email_nextstep)
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':[],'messageER':'notfound data' + str(e)}
    
    def select_datajson_toemail(self,sidcode):
        self.sidcode = sidcode
        try:
            arr_emailone_sum = []
            arr_sum_stepnum = []
            arr_datajson = []
            arr_sum_data_2 = []
            arr_sum_email_view = []
            tmpRes = []
            datasum_detail = None
            arr_calculate = []
            tmp_datajson = []
            arr_tmpeformdataBi = []
            tmpeformdataBi = None
            for z in range(len(self.sidcode)):
                json = {}
                arr_emailone = []
                arr_stepnum = []
                arr_sum_data = []
                arr_sum_email_view_group = []
                arr_calculate = []
                tmpsidcode = self.sidcode[z]
                print('tmpsidcode',tmpsidcode)
                tmp_query = db.session.query(\
                    paper_lessdocument,
                    paper_lessdatastep,
                    paper_lesssender)\
                    .join(paper_lessdatastep,paper_lessdocument.step_id==paper_lessdatastep.sid)\
                    .join(paper_lesssender,paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .filter(paper_lessdatastep.sid==tmpsidcode)\
                    .first()
                # print(tmp_query)
                if tmp_query != None:
                    for y in range(len(tmp_query)):
                        json_tmp = {}
                        tmp_arr_data_sum_01 = []
                        tmpjson = tmp_query[y].__dict__
                        if y == 0:
                            tmp_stepnum = []
                            tmp_option_page = tmpjson['options_page']
                            try:
                                tmp_option_page = eval(tmp_option_page)
                            except Exception as e:
                                tmp_option_page = ''
                            try:
                                tmpdocumentJson = eval(tmpjson['documentJson'])
                            except Exception as e:
                                tmpdocumentJson = ''
                            tmpdocument_id = tmpjson['document_id']
                            tmpdata_document = tmpjson['data_document']
                            
                            if 'group_detail' in tmp_option_page:
                                tmp_group_detils = tmp_option_page['group_detail']
                                if 'group_status' in tmp_group_detils:
                                    tmp_group_status = tmp_group_detils['group_status']
                                    if tmp_group_status == True:
                                        if 'step_num' in tmp_group_detils:
                                            tmp_stepnum = tmp_group_detils['step_num']
                                            for zu in range(len(tmp_stepnum)):
                                                arr_stepnum.append(tmp_stepnum[zu])
                                if 'email_viewgroup' in tmp_group_detils:
                                    tmp_email_viewgroup = tmp_group_detils['email_viewgroup']
                                    for j in range(len(tmp_email_viewgroup)):
                                        arr_sum_email_view_group.append(tmp_email_viewgroup[j])
                            arr_sum_email_view.append({'email_view_group':arr_sum_email_view_group})
                            # print(tmp_option_page)
                            if 'service_properties' in tmp_option_page:
                                tmpsp = (tmp_option_page['service_properties'])
                                for n in range(len(tmpsp)):
                                    tmp_spdata = tmpsp[n]
                                    if 'name_service' in tmp_spdata:
                                        if tmp_spdata['name_service'] == 'GROUP':
                                            if 'other' in tmp_spdata:
                                                tmp_other = tmp_spdata['other']
                                                for u in range(len(tmp_other)):
                                                    if 'properties' in tmp_other[u]:
                                                        tmp_proper = tmp_other[u]['properties']
                                                        for n in range(len(tmp_proper)):
                                                            
                                                            if 'name' in tmp_proper[n]:                                                            
                                                                tmp_key = str(tmp_proper[n]['name']).replace(' ','')
                                                                if 'type' in tmp_proper[n]:
                                                                    if str(tmp_proper[n]['type']).lower() == 'number':
                                                                        arr_calculate.append(tmp_key)
                                                                if 'value' in tmp_proper[n]:
                                                                    tmp_value = (tmp_proper[n]['value'])
                                                                    json_tmp[tmp_key] = tmp_value
                                                                    # print(json_tmp)
                                                            # arr_sum_data.append(tmp_proper[n])
                                                    tmp_arr_data_sum_01.append(json_tmp)
                            datasum_detail = tmp_arr_data_sum_01
                            arr_sum_data_2.append(tmp_arr_data_sum_01)
                            arr_sum_stepnum.append({'step_num':arr_stepnum})
                        if y == 1:
                            str_datetimeUpload = tmpjson['upload_time']
                            tmp_datajson = tmpjson['data_json']
                            tmp_datajson = eval(tmp_datajson)
                            if 'step_num' in tmp_datajson:
                                arr_datajson.append(tmp_datajson)
                                tmp_datajson = arr_datajson
                            if len(tmp_stepnum) != 0:
                                for a in range(len(tmp_datajson)):
                                    if 'step_num' in tmp_datajson[a]:
                                        tmp_step_num = tmp_datajson[a]['step_num']
                                        tmp_step_detail = tmp_datajson[a]['step_detail']
                                        for j in range(len(tmp_step_detail)):                      
                                            tmpemail_one = tmp_step_detail[j]['one_email']
                                            if int(tmp_step_num) in tmp_stepnum:
                                                arr_emailone.append(tmpemail_one)
                                                # print(tmpemail_one)
                                arr_emailone_sum.append({'email_one':arr_emailone})
                        if y == 2:
                            tmpfilename = tmpjson['file_name']
                            tmpsender_name = tmpjson['sender_name']
                            tmpsender_email = tmpjson['sender_email']
                            tmptracking_id = tmpjson['tracking_id']
                    if len(datasum_detail) == 0:
                        detail = None
                    else:
                        detail = datasum_detail[0]
                    json = {
                        'dateTime_String':str(str_datetimeUpload).split('+')[0],
                        'document_id':tmpdocument_id,
                        'document_name':tmpdocumentJson['document_name'],
                        'document_type':tmpdocumentJson['document_type'],
                        'file_name':tmpfilename,
                        'sender_email':tmpsender_email,
                        'sender_name':tmpsender_name,
                        'tracking_id':tmptracking_id,
                        "detail":detail
                    }
                    tmpeformdataBi = None
                    tmpdataeform = data_doc(tmpdata_document)
                    # print(tmpdataeform)
                    if 'messageText' in tmpdataeform:
                        tmpdataeformmessage = tmpdataeform['messageText']
                        if 'formdata_eform' in tmpdataeformmessage:
                            if 'data_json_key' in tmpdataeformmessage['formdata_eform']:
                                tmpeformdataBi = tmpdataeformmessage['formdata_eform']['data_json_key']
                                for u in range(len(tmpeformdataBi)):
                                    if 'document_id' in tmpeformdataBi[u]:
                                        tmpeformdataBi[u]['document_id'] = tmpdocument_id
                    # if tmpeformdataBi != None:
                    arr_tmpeformdataBi.append(tmpeformdataBi)
                tmpRes.append(json)     
            return {'result':'OK','messageText':arr_emailone_sum,'step_num_sum':arr_sum_stepnum,'data_sum':arr_sum_data_2,'email_view_group':arr_sum_email_view,'calculated_fields':arr_calculate,'maxstep':len(tmp_datajson),'data_bi':tmpRes,'data_document':arr_tmpeformdataBi}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':[],'messageER':'notfound data' + str(e)}

    def select_docid_tosidcode_v1(self,list_docid):
        self.list_docid = list_docid
        arrsidcode = []
        try:
            tmpquery = paper_lesssender.query.filter(paper_lesssender.doc_id.in_(self.list_docid)).all()
            for n in range(len(tmpquery)):
                tmpjson = tmpquery[n].__dict__
                sidcode = tmpjson['step_data_sid']
                arrsidcode.append(sidcode)
            return {'result':'OK','messageText':arrsidcode}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':[],'messageER':'notfound data' + str(e)}

    def select_report_service_v1(self,start_datetime,end_datetime,tmp_servicename,tmp_tax_id):
        try:
            list_result = []
            self.start_datetime = start_datetime
            self.end_datetime = end_datetime
            self.tmp_servicename = tmp_servicename
            self.tmp_tax_id = tmp_tax_id
            date_start_tmp = datetime.datetime.fromtimestamp(self.start_datetime)
            date_end_tmp = datetime.datetime.fromtimestamp(self.end_datetime)
            if str(self.tmp_tax_id).replace(' ','') != '':
                tmp_query = db.session.query(
                    tb_transaction_servicelog,
                    paper_lesssender,
                    paper_lessdatastep
                    )\
                    .outerjoin(paper_lesssender,paper_lesssender.step_data_sid==tb_transaction_servicelog.sidcode)\
                    .outerjoin(paper_lessdatastep,paper_lessdatastep.sid==tb_transaction_servicelog.sidcode)\
                    .filter(tb_transaction_servicelog.datetime>=date_start_tmp,tb_transaction_servicelog.datetime<=date_end_tmp,tb_transaction_servicelog.service_type==self.tmp_servicename,paper_lessdatastep.biz_info.contains("'id_card_num': '"+self.tmp_tax_id+"'"))\
                    .order_by(desc(tb_transaction_servicelog.datetime))\
                    .all()
            else:
                tmp_query = db.session.query(
                    tb_transaction_servicelog,
                    paper_lesssender,
                    paper_lessdatastep
                    )\
                    .outerjoin(paper_lesssender,paper_lesssender.step_data_sid==tb_transaction_servicelog.sidcode)\
                    .outerjoin(paper_lessdatastep,paper_lessdatastep.sid==tb_transaction_servicelog.sidcode)\
                    .filter(tb_transaction_servicelog.datetime>=date_start_tmp,tb_transaction_servicelog.datetime<=date_end_tmp,tb_transaction_servicelog.service_type==self.tmp_servicename)\
                    .order_by(desc(tb_transaction_servicelog.datetime))\
                    .all()
            
            for y in range(len(tmp_query)):
                tmpinfo = {}
                for z in range(len(tmp_query[y])):
                    tmp_data = tmp_query[y][z]
                    tmp_json = tmp_data.__dict__
                    if '_sa_instance_state' in tmp_json:
                        del tmp_json['_sa_instance_state']
                    if z == 0:
                        tmp_sidcode = tmp_json['sidcode']
                        tmp_datetime = tmp_json['datetime']
                        tmp_status = tmp_json['status']
                        tmp_message = tmp_json['message_error']
                        tmp_service_type = tmp_json['service_type']
                    if z == 1:
                        tmp_doc_id = tmp_json['doc_id']
                tmpinfo = {
                    'sidcode':tmp_sidcode,
                    'datetime':str(tmp_datetime).split('+')[0],
                    'status':'NOT',
                    'service':tmp_service_type,
                    'message':tmp_message,
                    'document_id':tmp_doc_id
                }
                tmp_query_status = db.session.query(
                    paper_lessdocument,
                    paper_lesstransactionSftp
                    )\
                    .outerjoin(paper_lesstransactionSftp,paper_lesstransactionSftp.folder_path.contains(paper_lessdocument.attempted_folder))\
                    .filter(paper_lessdocument.step_id==tmp_sidcode)\
                    .first()
                if tmp_query_status != None:
                    tmpjson = tmp_query_status._asdict()
                    if 'paper_lesstransactionSftp' in tmpjson:
                        if tmpjson['paper_lesstransactionSftp'] != None:
                            tmpjson['paper_lesstransactionSftp'] = tmpjson['paper_lesstransactionSftp'].__dict__
                            if 'status' in tmpjson['paper_lesstransactionSftp']:
                                tmpstatus_sftp = tmpjson['paper_lesstransactionSftp']['status']
                                if 'Errno' in tmpstatus_sftp:
                                    tmpinfo['status'] = 'ER'
                                    tmpinfo['message'] = tmpstatus_sftp
                                else:
                                    tmpinfo['status'] = 'OK'
                                    tmpinfo['message'] = tmpstatus_sftp
                    # print(tmpjson)
                list_result.append(tmpinfo)
            return {'result':'OK','messageText':list_result}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':[],'messageER':'notfound data' + str(e)}

    def select_signProfile(self):
        try:
            tmp_arr = []
            query = paper_lessuserProfile.query.filter_by().all()
            # print(query)
            if query != None:
                for u in query:
                    size_file = ''
                    tmp_sign = ''
                    json = {}                
                    if u.p_sign != None:
                        tmp_sign = u.p_sign
                        username = u.p_username
                        print(len(tmp_sign))
                        size_file = size(tmp_sign)
                        json = {
                            'username':username,
                            'sign':tmp_sign,
                            'sign_filesize':size_file
                        }
                        tmp_arr.append(json)
                    else:
                        username = u.p_username
                        json = {
                            'username':username,
                            'sign':None,
                            'sign_filesize':None
                        }
                        tmp_arr.append(json)
                return {'result':'OK','message':tmp_arr}                
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':[],'messageER':'notfound data' + str(e)}

    def select_hash_tosid(self,hashdata):
        self.hashdata = hashdata
        try:
            tmp_sid = paper_lesstrack.query.filter_by(hash_sid_code=self.hashdata).first()
            if tmp_sid != None:
                sidcode = tmp_sid.step_data_sid
                return {'result':'OK','message':sidcode}
            else:
                return {'result':'ER','message':None}
        except Exception as e:
            return {'result':'ER','message':str(e)}

    def select_track_v2(self,tracking):
        self.tracking = tracking
        if len(self.tracking) > 0:
            try:
                data_step = ''
                json_step_data = {}
                arr_get_sid = []
                json_data_res = {}
                list_data_res = []
                k = paper_lesstrack.query.filter(func.lower(paper_lesstrack.tracking) == func.lower(self.tracking)).first()
                # k = paper_lesstrack.query.filter_by((tracking)=self.tracking).first()
                if k == None:
                    doc_id = paper_lesssender.query.filter(func.lower(paper_lesssender.doc_id) == func.lower(self.tracking)).first()
                    # doc_id =  paper_lesssender.query.filter_by(doc_id=self.tracking).first()
                    if doc_id == None:
                        return jsonify({'result': 'ER', 'messageText': 'ไม่พบข้อมูลเลข ' + self.tracking})
                    self.sidCode = doc_id.step_data_sid
                    print('sidCoide',self.sidCode)
                elif k != None:
                    self.sidCode = k.step_data_sid
                else:
                    print ('ERRORRR')
                    return jsonify({'result': 'ER', 'messageText': 'ไม่พบข้อมูลเลข ' + self.tracking})
                try:
                    result_Select_step = paper_lessdatastep.query.filter(paper_lessdatastep.sid==self.sidCode).first()
                    result_Select_sender = paper_lesssender.query.filter(paper_lesssender.step_data_sid==self.sidCode).first()
                    result_Select_document = paper_lessdocument.query.filter(paper_lessdocument.step_id==self.sidCode).first()
                    if result_Select_document.fileid != None:
                        result_Select_pdf = paper_lesspdf.query.filter(paper_lesspdf.fid==result_Select_document.fileid).first()
                    if result_Select_sender != None:
                        json_data_res['tracking']  = result_Select_sender.tracking_id
                        json_data_res['tracking_id'] = result_Select_sender.tracking_id
                        json_data_res['sender_email'] = result_Select_sender.sender_email
                        json_data_res['sender_name'] = result_Select_sender.sender_name
                        json_data_res['send_time'] = result_Select_sender.send_time
                        json_data_res['sender_position'] = result_Select_sender.sender_position
                        date_time_stamp_ = result_Select_sender.send_time.timestamp()
                        date_time_stamp_ = int(date_time_stamp_)
                        json_data_res['send_time_display'] = convert_datetime_TH_2_display_sendTime(date_time_stamp_)
                        json_data_res['send_time_string'] = str(result_Select_sender.send_time).split('+')[0]
                        json_data_res['generate_time'] = convert_datetime_TH_2_display_sendTime(date_time_stamp_)
                        json_data_res['generate_time_string'] = str(result_Select_sender.send_time).split('+')[0]
                        json_data_res['step_code'] = result_Select_sender.step_code
                        json_data_res['step_data_sid'] = result_Select_sender.step_data_sid
                        json_data_res['document_Id'] = result_Select_sender.doc_id
                        json_data_res['file_name'] = result_Select_sender.file_name
                        json_data_res['template_webhook'] = result_Select_sender.template_webhook
                        json_data_res['email_center'] = result_Select_sender.email_center
                        json_data_res['status'] = result_Select_sender.status
                        json_data_res['status_service'] = eval(str(result_Select_sender.status_service))
                        if result_Select_sender.list_ref != [] and result_Select_sender.list_ref != None:
                            json_data_res['list_ref'] = eval(result_Select_sender.list_ref)
                        else:
                            json_data_res['list_ref'] = (result_Select_sender.list_ref)
                        try:
                            json_data_res['status_service'] = eval(str(result_Select_sender.status_service))
                        except Exception as e:
                            json_data_res['status_service'] = []
                    if result_Select_document != None:
                        if result_Select_document.options_page != None:
                            json_data_res['options_page_document'] = [eval(result_Select_document.options_page)]
                        else:
                            json_data_res['options_page_document'] = []
                        json_data_res['stamp_all'] = result_Select_document.sign_page_options
                        json_data_res['document_time'] = int(result_Select_document.timest)
                        json_data_res['document_details'] = eval(result_Select_document.documentJson)
                        json_data_res['document_details_string'] = str(result_Select_document.documentJson)
                        json_data_res['file_id'] = int(result_Select_document.fileid)
                        json_data_res['urgent_code'] = result_Select_document.urgent_type
                        json_data_res['digit_sign'] = bool(result_Select_document.digit_sign)
                        json_data_res['attempted_folder'] = result_Select_document.attempted_folder
                    if result_Select_step != None:
                        json_data_res['view_details'] = eval(result_Select_step.view_details)
                        json_data_res['qrCode_position'] = eval(result_Select_step.qrCode_position)
                        if result_Select_step.qrCode_position != None or str(result_Select_step.qrCode_position).replace(' ','') != '':
                            json_data_res['qrCode_status'] = True
                        else:
                            json_data_res['qrCode_status'] = False
                    if result_Select_pdf != None:
                        if result_Select_pdf.string_sign != None:
                            json_data_res['file_status'] = 'Complete'
                        else:
                            json_data_res['file_status'] = 'InComplete'
                    step_infomation = eval(result_Select_step.data_json)
                    if 'step_num' in step_infomation:
                        step_infomation = [step_infomation]
                    step_infomation = parse_json_for_eform(step_infomation)
                    # print(step_infomation)
                    json_data_res['file_user_status_detail'] = []
                    if 'step_num' in step_infomation:
                        status_step_sum = ''
                        sum_status_step_list = []
                        list_check_step = []
                        json_step_info_2 = {}
                        step_list_data = []
                        step_ = step_infomation
                        time_success = None
                        step_time_1 = []
                        sendtime = json_data_res['send_time']
                        step_num = step_infomation['step_num']
                        json_data_res['step_info'] = step_infomation
                        json_step_info_2['step_status'] = ''
                        for u in range(len(step_['step_detail'])):
                            step_2 = step_['step_detail'][u]
                            for k in range(len(step_2['activity_code'])):
                                if step_2['activity_code'][k] == 'A03':
                                    json_step_info = {}
                                    json_step_info['activity_status'] = step_2['activity_status'][k]
                                    if json_step_info['activity_status'] == 'Complete' or json_step_info['activity_status'] == 'Reject':
                                        json_step_info['activity_time'] = step_2['activity_time'][k]
                                    else:
                                        json_step_info['activity_time'] = None
                                    json_step_info['one_email'] = step_2['one_email']
                                    #process หา timeline
                                    if (step_2['activity_status'][k] == 'Complete' or step_2['activity_status'][k] =='Reject' or step_2['activity_status'][k] == 'Approve'):
                                        t1 = str(step_2['activity_time'][k])
                                        time_success = change_to_Timestamp(t1)
                                        step_time_1.append(time_success)
                                    #สิ้นสุดการหา timeline
                                    query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(step_2['one_email'])).all()
                                    if len(query_name_account) != 0:
                                        tmp_account_name = eval(query_name_account[0].citizen_data)
                                        try:
                                            tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                        except Exception as e:
                                            tmp_account_name=None
                                    else:
                                        tmp_account_name = None
                                    json_step_info['account_name'] = tmp_account_name
                                    json_step_info['step_num'] = step_num

                                    list_check_step.append(json_step_info['activity_status'])
                                    step_list_data.append(json_step_info)
                                elif step_2['activity_code'][k] == 'A04':
                                    json_step_info = {}
                                    json_step_info['activity_status'] = step_2['activity_status'][k]
                                    if json_step_info['activity_status'] == 'Complete' or json_step_info['activity_status'] == 'Reject':
                                        json_step_info['activity_time'] = step_2['activity_time'][k]
                                    else:
                                        json_step_info['activity_time'] = None
                                    json_step_info['one_email'] = step_2['one_email']
                                    #process หา timeline
                                    if (step_2['activity_status'][k] == 'Complete' or step_2['activity_status'][k] =='Reject' or step_2['activity_status'][k] == 'Approve'):
                                        t1 = str(step_2['activity_time'][k])
                                        time_success = change_to_Timestamp(t1)
                                        step_time_1.append(time_success)
                                    #สิ้นสุดการหา timeline
                                    query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(step_2['one_email'])).all()
                                    if len(query_name_account) != 0:
                                        tmp_account_name = eval(query_name_account[0].citizen_data)
                                        try:
                                            tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                        except Exception as e:
                                            tmp_account_name=None
                                    else:
                                        tmp_account_name = None
                                    json_step_info['account_name'] = tmp_account_name
                                    json_step_info['step_num'] = step_num

                                    list_check_step.append(json_step_info['activity_status'])
                                    step_list_data.append(json_step_info)
                                elif step_2['activity_code'][k] == 'A05':
                                    json_step_info = {}
                                    json_step_info['activity_status'] = step_2['activity_status'][k]
                                    if json_step_info['activity_status'] == 'Complete' or json_step_info['activity_status'] == 'Reject':
                                        json_step_info['activity_time'] = step_2['activity_time'][k]
                                    else:
                                        json_step_info['activity_time'] = None
                                    json_step_info['one_email'] = step_2['one_email']
                                    #process หา timeline
                                    if (step_2['activity_status'][k] == 'Complete' or step_2['activity_status'][k] =='Reject' or step_2['activity_status'][k] == 'Approve'):
                                        t1 = str(step_2['activity_time'][k])
                                        time_success = change_to_Timestamp(t1)
                                        step_time_1.append(time_success)
                                    #สิ้นสุดการหา timeline
                                    query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(step_2['one_email'])).all()
                                    if len(query_name_account) != 0:
                                        tmp_account_name = eval(query_name_account[0].citizen_data)
                                        try:
                                            tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                        except Exception as e:
                                            tmp_account_name=None
                                    else:
                                        tmp_account_name = None
                                    json_step_info['account_name'] = tmp_account_name
                                    json_step_info['step_num'] = step_num

                                    list_check_step.append(json_step_info['activity_status'])
                                    step_list_data.append(json_step_info)
                            json_step_info_2['step_info'] = step_list_data
                            if json_step_info_2['step_status'] == '':
                                if 'Reject' in list_check_step:
                                    json_step_info_2['step_status'] = 'Reject'
                                elif 'Incomplete' in list_check_step:
                                    json_step_info_2['step_status'] = 'Incomplete'
                                elif 'Pending' in list_check_step:
                                    json_step_info_2['step_status'] = 'Incomplete'
                                else:
                                    json_step_info_2['step_status'] = 'Complete'
                            else:
                                if 'Complete' in list_check_step:
                                    json_step_info_2['step_status'] = 'Complete'
                            sum_status_step_list.append(json_step_info_2['step_status'])
                            timeline_ = getTimeline(sendtime,step_time_1)
                            list_timeline = getlistTimeline(sendtime,step_time_1)
                        json_data_res['list_timeline'] = list_timeline
                        json_data_res['timeline'] = timeline_
                        json_data_res['file_user_status_detail'].append(json_step_info_2)
                        if 'Reject' in sum_status_step_list:
                            status_step_sum = 'Reject'
                            sendtime = json_data_res['send_time']
                            timing_ = timing(time_success,sendtime)
                            json_data_res['timing'] = timing_
                        elif 'Incomplete' in sum_status_step_list:
                            status_step_sum = 'Incomplete'
                            now = datetime.datetime.now()
                            sendtime = json_data_res['send_time']
                            timing_ = timing(datetime.datetime.timestamp(now),sendtime)
                            json_data_res['timing'] = timing_
                        elif 'Pending' in sum_status_step_list:
                            status_step_sum = 'Incomplete'
                            now = datetime.datetime.now()
                            sendtime = json_data_res['send_time']
                            timing_ = timing(datetime.datetime.timestamp(now),sendtime)
                            json_data_res['timing'] = timing_
                        elif 'Complete' in sum_status_step_list:
                            status_step_sum = 'Complete'
                            sendtime = json_data_res['send_time']
                            timing_ = timing(time_success,sendtime)
                            json_data_res['timing'] = timing_
                        elif 'Approve' in sum_status_step_list:
                            status_step_sum = 'Complete'
                            sendtime = json_data_res['send_time']
                            timing_ = timing(time_success,sendtime)
                            json_data_res['timing'] = timing_
                        else:
                            status_step_sum = 'Complete'
                            sendtime = json_data_res['send_time']
                            timing_ = timing(time_success,sendtime)
                            json_data_res['timing'] = timing_

                        # if 'Reject' in sum_status_step_list:
                        #     status_step_sum = 'Reject'
                        #     for u in range(len(step_['step_detail'])):
                        #         step_2 = step_['step_detail'][u]
                        #         for k in range(len(step_2['activity_code'])):
                        #             if self.emailUser == step_2['one_email']:
                        #                 json_data_res['file_user_status'] = 'Reject'
                        #             # json_data_res['file_user_status'] = step_2['activity_status'][k]
                        # elif 'Incomplete' in sum_status_step_list:
                        #     status_step_sum = 'Incomplete'
                        #     for u in range(len(step_['step_detail'])):
                        #         step_2 = step_['step_detail'][u]
                        #         json_data_res['file_user_status'] = step_2['activity_status'][k]
                        # elif 'Pending' in sum_status_step_list:
                        #     status_step_sum = 'Incomplete'
                        #     for u in range(len(step_['step_detail'])):
                        #         step_2 = step_['step_detail'][u]
                        #         if self.emailUser == step_2['one_email']:
                        #             for k in range(len(step_2['activity_code'])):
                        #                     if step_2['activity_code'][k] == 'A03':
                        #                         json_data_res['file_user_status'] = step_2['activity_status'][k]
                        # else:
                        #     status_step_sum = 'Complete'
                            # for u in range(len(step_['step_detail'])):
                            #     step_2 = step_['step_detail'][u]
                            #     if self.emailUser == step_2['one_email']:
                            #         for k in range(len(step_2['activity_code'])):
                            #                 if step_2['activity_code'][k] == 'A03':
                            #                     json_data_res['file_user_status'] = step_2['activity_status'][k]
                        json_data_res['file_status_sum'] = status_step_sum
                    else:
                        status_step_sum = ''
                        sum_status_step_list = []
                        alr_mail = []
                        time_success = None
                        step_time_1 = []
                        sendtime = json_data_res['send_time']
                        json_data_res['step_info'] = step_infomation
                        for i in range(len(step_infomation)):
                            list_check_step = []
                            json_step_info_2 = {}
                            step_list_data = []
                            step_ = step_infomation[i]
                            step_num = step_infomation[i]['step_num']
                            json_step_info_2['step_status'] = ''
                            for u in range(len(step_['step_detail'])):
                                step_2 = step_['step_detail'][u]
                                for k in range(len(step_2['activity_code'])):
                                    if step_2['activity_code'][k] == 'A03':
                                        json_step_info = {}
                                        json_step_info['activity_status'] = step_2['activity_status'][k]
                                        if json_step_info['activity_status'] == 'Complete' or json_step_info['activity_status'] == 'Reject':
                                            json_step_info['activity_time'] = step_2['activity_time'][k]
                                        else:
                                            json_step_info['activity_time'] = None
                                        json_step_info['one_email'] = step_2['one_email']
                                        query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(step_2['one_email'])).all()
                                        # print('activity_time',step_2['activity_time'][k])
                                        # print('activity_status',step_2['activity_status'][k])
                                        #process หา timeline
                                        if (step_2['activity_status'][k] == 'Complete' or step_2['activity_status'][k] =='Reject' or step_2['activity_status'][k] == 'Approve'):
                                            t1 = str(step_2['activity_time'][k])
                                            print ('else activity_time',t1)
                                            time_success = change_to_Timestamp(t1)
                                            step_time_1.append(time_success)
                                        #สิ้นสุดการหา timeline
                                        if len(query_name_account) != 0:
                                            try:
                                                tmp_account_name = eval(query_name_account[0].citizen_data)
                                                tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                            except Exception as e:
                                                tmp_account_name = None
                                                exc_type, exc_obj, exc_tb = sys.exc_info()
                                                fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                                                print(exc_type, fname, exc_tb.tb_lineno)

                                        else:
                                            tmp_account_name = None
                                        json_step_info['step_num'] = step_num
                                        json_step_info['account_name'] = tmp_account_name
                                        list_check_step.append(json_step_info['activity_status'])
                                        step_list_data.append(json_step_info)
                                    elif step_2['activity_code'][k] == 'A04':
                                        json_step_info = {}
                                        json_step_info['activity_status'] = step_2['activity_status'][k]
                                        if json_step_info['activity_status'] == 'Complete' or json_step_info['activity_status'] == 'Reject':
                                            json_step_info['activity_time'] = step_2['activity_time'][k]
                                        else:
                                            json_step_info['activity_time'] = None
                                        json_step_info['one_email'] = step_2['one_email']
                                        query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(step_2['one_email'])).all()
                                        # print('activity_time',step_2['activity_time'][k])
                                        # print('activity_status',step_2['activity_status'][k])
                                        #process หา timeline
                                        if (step_2['activity_status'][k] == 'Complete' or step_2['activity_status'][k] =='Reject' or step_2['activity_status'][k] == 'Approve'):
                                            t1 = str(step_2['activity_time'][k])
                                            print ('else activity_time',t1)
                                            time_success = change_to_Timestamp(t1)
                                            step_time_1.append(time_success)
                                        #สิ้นสุดการหา timeline
                                        if len(query_name_account) != 0:
                                            try:
                                                tmp_account_name = eval(query_name_account[0].citizen_data)
                                                tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                            except Exception as e:
                                                tmp_account_name = None
                                                exc_type, exc_obj, exc_tb = sys.exc_info()
                                                fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                                                print(exc_type, fname, exc_tb.tb_lineno)

                                        else:
                                            tmp_account_name = None
                                        json_step_info['step_num'] = step_num
                                        json_step_info['account_name'] = tmp_account_name
                                        list_check_step.append(json_step_info['activity_status'])
                                        step_list_data.append(json_step_info)
                                    elif step_2['activity_code'][k] == 'A05':
                                        json_step_info = {}
                                        json_step_info['activity_status'] = step_2['activity_status'][k]
                                        if json_step_info['activity_status'] == 'Complete' or json_step_info['activity_status'] == 'Reject':
                                            json_step_info['activity_time'] = step_2['activity_time'][k]
                                        else:
                                            json_step_info['activity_time'] = None
                                        json_step_info['one_email'] = step_2['one_email']
                                        query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(step_2['one_email'])).all()
                                        # print('activity_time',step_2['activity_time'][k])
                                        # print('activity_status',step_2['activity_status'][k])
                                        #process หา timeline
                                        if (step_2['activity_status'][k] == 'Complete' or step_2['activity_status'][k] =='Reject' or step_2['activity_status'][k] == 'Approve'):
                                            t1 = str(step_2['activity_time'][k])
                                            print ('else activity_time',t1)
                                            time_success = change_to_Timestamp(t1)
                                            step_time_1.append(time_success)
                                        #สิ้นสุดการหา timeline
                                        if len(query_name_account) != 0:
                                            try:
                                                tmp_account_name = eval(query_name_account[0].citizen_data)
                                                tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                            except Exception as e:
                                                tmp_account_name = None
                                                exc_type, exc_obj, exc_tb = sys.exc_info()
                                                fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                                                print(exc_type, fname, exc_tb.tb_lineno)

                                        else:
                                            tmp_account_name = None
                                        json_step_info['step_num'] = step_num
                                        json_step_info['account_name'] = tmp_account_name
                                        list_check_step.append(json_step_info['activity_status'])
                                        step_list_data.append(json_step_info)
                                json_step_info_2['step_info'] = step_list_data
                                if json_step_info_2['step_status'] == '':
                                    if 'Reject' in list_check_step:
                                        json_step_info_2['step_status'] = 'Reject'
                                    elif 'Incomplete' in list_check_step:
                                        json_step_info_2['step_status'] = 'Incomplete'
                                    elif 'Pending' in list_check_step:
                                        json_step_info_2['step_status'] = 'Incomplete'
                                    else:
                                        json_step_info_2['step_status'] = 'Complete'
                                else:
                                    if 'Complete' in list_check_step:
                                        json_step_info_2['step_status'] = 'Complete'
                                sum_status_step_list.append(json_step_info_2['step_status'])
                            timeline_ = getTimeline(sendtime,step_time_1)
                            json_data_res['timeline'] = timeline_ 
                            list_timeline = getlistTimeline(sendtime,step_time_1)
                            json_data_res['list_timeline'] = list_timeline
  
                            json_data_res['file_user_status_detail'].append(json_step_info_2)
                        if 'Reject' in sum_status_step_list:
                            status_step_sum = 'Reject'
                            sendtime = json_data_res['send_time']
                            timing_ = timing(time_success,sendtime)
                            json_data_res['timing'] = timing_
                        elif 'Incomplete' in sum_status_step_list:
                            status_step_sum = 'Incomplete'
                            now = datetime.datetime.now()
                            sendtime = json_data_res['send_time']
                            timing_ = timing(datetime.datetime.timestamp(now),sendtime)
                            json_data_res['timing'] = timing_
                        elif 'Pending' in sum_status_step_list:
                            status_step_sum = 'Incomplete'
                            now = datetime.datetime.now()
                            sendtime = json_data_res['send_time']
                            timing_ = timing(datetime.datetime.timestamp(now),sendtime)
                            json_data_res['timing'] = timing_
                        else:
                            status_step_sum = 'Complete'
                            sendtime = json_data_res['send_time']
                            timing_ = timing(time_success,sendtime)
                            json_data_res['timing'] = timing_
                        json_data_res['file_status_sum'] = status_step_sum

                    list_data_res.append(json_data_res)
                    if len(list_data_res) != 0:
                        return jsonify(json_data_res),200
                    else:
                        return jsonify({'result':'ER','messageText':[],'messageER':'not found sidcode'}),200
                except Exception as ex:
                    exc_type, exc_obj, exc_tb = sys.exc_info()
                    fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                    print(exc_type, fname, exc_tb.tb_lineno)
                    return {'result':'ER','messageText':[],'messageER':'notfound data' + str(ex)}

            except Exception as ex:
                print ('ERRORR!!')
                exc_type, exc_obj, exc_tb = sys.exc_info()
                fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                print(exc_type, fname, exc_tb.tb_lineno)
                return jsonify({'result': 'ER', 'messageText': 'ไม่พบข้อมูลเลข ' + self.tracking,'messageER':str(ex)})
        else:
            return jsonify({'result': 'ER', 'messageText': 'กรุณาใส่ข้อมูลเลข ' + self.tracking})

    def select_countpaper_datetime(self,tax_id,document_type,level_admin,datetimeStart,datetimeEnd):
        self.tax_id = tax_id
        self.document_type = document_type
        self.level_admin = level_admin
        self.datetimeStart = datetimeStart
        self.datetimeEnd = datetimeEnd
        query_count_all = 0
        list_json = []
        tmp_json_1 = {}
        try:
            if self.datetimeStart != '' and self.datetimeEnd == '': #ใส่ start อย่างเดียว
                time_start = datetime.datetime.fromtimestamp(int(self.datetimeStart))
                if self.tax_id == '' and self.document_type == '' : # tax_id = ค่าว่าง , document_type = ค่าว่าง
                    # query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status,
                        view_document.document_status
                    ).filter(view_document.send_time >= time_start).all()
                    # query 
                    list2 = generateList(query_count_all)
                    tmp_json_1 = check_count_paper_start(query_count_all,list2,time_start)
                elif self.tax_id != '' and self.document_type == '': # tax_id = มีค่า document_type = ค่าว่าง
                    if self.tax_id == 'citizen':
                        # เทส query
                        query_count_all = view_document.query.with_entities(
                            view_document.sender_email,
                            view_document.sender_name,
                            view_document.send_time,
                            view_document.biz_info,
                            view_document.documentType,
                            view_document.status,
                            view_document.document_status
                        ).filter(view_document.send_time >= time_start).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                        # เทส query 
                    elif len(self.tax_id) != 13 :
                        return {'result':'ER','messageText':'error because tax_id incorret'} 
                    else:
                        # เทส query
                        query_count_all = view_document.query.with_entities(
                            view_document.sender_email,
                            view_document.sender_name,
                            view_document.send_time,
                            view_document.biz_info,
                            view_document.documentType,
                            view_document.status,
                            view_document.document_status
                        ).filter(view_document.send_time >= time_start).filter(view_document.biz_info.contains(self.tax_id)).all()
                        # เทส query  
                    list2 = generateList(query_count_all)
                    tmp_json_1 = check_count_paper_start(query_count_all,list2,time_start)
                elif self.tax_id == '' and self.document_type != '': # tax_id = ค่าว่าง , document_type = มีค่า 
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status,
                        view_document.document_status
                    ).filter(view_document.send_time >= time_start).filter(view_document.documentType == self.document_type).all()
                    # เทส query 
                    list2 = generateList(query_count_all)
                    tmp_json_1 = check_count_paper_start(query_count_all,list2,time_start)
                elif self.tax_id != '' and self.document_type != '': # tax_id = มีค่า , document_type = มีค่า
                    if self.tax_id == 'citizen':
                        # เทส query
                        query_count_all = view_document.query.with_entities(
                            view_document.sender_email,
                            view_document.sender_name,
                            view_document.send_time,
                            view_document.biz_info,
                            view_document.documentType,
                            view_document.status,
                            view_document.document_status
                        ).filter(view_document.send_time >= time_start).filter(view_document.documentType == self.document_type).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                        # เทส query 
                    
                    elif len(self.tax_id) != 13 :
                        return {'result':'ER','messageText':'error because tax_id incorret'} 
                    
                    else:
                        # เทส query
                        query_count_all = view_document.query.with_entities(
                            view_document.sender_email,
                            view_document.sender_name,
                            view_document.send_time,
                            view_document.biz_info,
                            view_document.documentType,
                            view_document.status,
                            view_document.document_status
                        ).filter(view_document.send_time >= time_start).filter(view_document.documentType == self.document_type).filter(view_document.biz_info.contains(self.tax_id)).all()
                        # เทส query
                    list2 = generateList(query_count_all)
                    tmp_json_1 = check_count_paper_start(query_count_all,list2,time_start)   
            elif self.datetimeStart == '' and self.datetimeEnd != '' : #ใส่ end อย่างเดียว
                time_end = datetime.datetime.fromtimestamp(int(self.datetimeEnd))
                if self.tax_id == '' and self.document_type == '' : # tax_id = ค่าว่าง , document_type = ค่าว่าง
                    # query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status,
                        view_document.document_status
                    ).filter(view_document.send_time <= time_end).all()
                    # query 
                elif self.tax_id != '' and self.document_type == '': # tax_id = มีค่า document_type = ค่าว่าง
                    if self.tax_id == 'citizen':
                        # เทส query
                        query_count_all = view_document.query.with_entities(
                            view_document.sender_email,
                            view_document.sender_name,
                            view_document.send_time,
                            view_document.biz_info,
                            view_document.documentType,
                            view_document.status,
                            view_document.document_status
                        ).filter(view_document.send_time <= time_end).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                        # เทส query 
                    elif len(self.tax_id) != 13 :
                        return {'result':'ER','messageText':'error because tax_id incorret'} 
                    else:
                        # เทส query
                        query_count_all = view_document.query.with_entities(
                            view_document.sender_email,
                            view_document.sender_name,
                            view_document.send_time,
                            view_document.biz_info,
                            view_document.documentType,
                            view_document.status,
                            view_document.document_status
                        ).filter(view_document.send_time <= time_end).filter(view_document.biz_info.contains(self.tax_id)).all()
                        # เทส query  
                elif self.tax_id == '' and self.document_type != '': # tax_id = ค่าว่าง , document_type = มีค่า 
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status,
                        view_document.document_status
                    ).filter(view_document.send_time <= time_end).filter(view_document.documentType == self.document_type).all()
                    # เทส query  
                elif self.tax_id != '' and self.document_type != '': # tax_id = มีค่า , document_type = มีค่า
                    if self.tax_id == 'citizen':
                        # เทส query
                        query_count_all = view_document.query.with_entities(
                            view_document.sender_email,
                            view_document.sender_name,
                            view_document.send_time,
                            view_document.biz_info,
                            view_document.documentType,
                            view_document.status,
                            view_document.document_status
                        ).filter(view_document.send_time <= time_end).filter(view_document.documentType == self.document_type).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                        # เทส query 
                    
                    elif len(self.tax_id) != 13 :
                        return {'result':'ER','messageText':'error because tax_id incorret'} 
                    
                    else:
                        # เทส query
                        query_count_all = view_document.query.with_entities(
                            view_document.sender_email,
                            view_document.sender_name,
                            view_document.send_time,
                            view_document.biz_info,
                            view_document.documentType,
                            view_document.status,
                            view_document.document_status
                        ).filter(view_document.send_time <= time_end).filter(view_document.documentType == self.document_type).filter(view_document.biz_info.contains(self.tax_id)).all()
                        # เทส query
                list2 = generateList(query_count_all)
                tmp_json_1 = check_count_paper_end(query_count_all,list2,time_end)
            elif self.datetimeStart != '' and self.datetimeEnd != '' : #ใส่ start และ end:
                time_end = datetime.datetime.fromtimestamp(int(self.datetimeEnd))
                time_start = datetime.datetime.fromtimestamp(int(self.datetimeStart))
                if self.tax_id == '' and self.document_type == '' : # tax_id = ค่าว่าง , document_type = ค่าว่าง
                    # query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status,
                        view_document.document_status
                    ).filter(view_document.send_time <= time_end).filter(view_document.send_time >= time_start).all()
                    # query 
                elif self.tax_id != '' and self.document_type == '': # tax_id = มีค่า document_type = ค่าว่าง
                    if self.tax_id == 'citizen':
                        # เทส query
                        query_count_all = view_document.query.with_entities(
                            view_document.sender_email,
                            view_document.sender_name,
                            view_document.send_time,
                            view_document.biz_info,
                            view_document.documentType,
                            view_document.status,
                            view_document.document_status
                        ).filter(view_document.send_time <= time_end).filter(view_document.send_time >= time_start).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                        # เทส query 
                    elif len(self.tax_id) != 13 :
                        return {'result':'ER','messageText':'error because tax_id incorret'} 
                    else:
                        # เทส query
                        query_count_all = view_document.query.with_entities(
                            view_document.sender_email,
                            view_document.sender_name,
                            view_document.send_time,
                            view_document.biz_info,
                            view_document.documentType,
                            view_document.status,
                            view_document.document_status
                        ).filter(view_document.send_time <= time_end).filter(view_document.send_time >= time_start).filter(view_document.biz_info.contains(self.tax_id)).all()
                        # เทส query  
                    
                elif self.tax_id == '' and self.document_type != '': # tax_id = ค่าว่าง , document_type = มีค่า 
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status,
                        view_document.document_status
                    ).filter(view_document.send_time <= time_end).filter(view_document.send_time >= time_start).filter(view_document.documentType == self.document_type).all()
                    # เทส query 
                   
                elif self.tax_id != '' and self.document_type != '': # tax_id = มีค่า , document_type = มีค่า
                    if self.tax_id == 'citizen':
                        # เทส query
                        query_count_all = view_document.query.with_entities(
                            view_document.sender_email,
                            view_document.sender_name,
                            view_document.send_time,
                            view_document.biz_info,
                            view_document.documentType,
                            view_document.status,
                            view_document.document_status
                        ).filter(view_document.send_time <= time_end).filter(view_document.send_time >= time_start).filter(view_document.documentType == self.document_type).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                        # เทส query 
                    
                    elif len(self.tax_id) != 13 :
                        return {'result':'ER','messageText':'error because tax_id incorret'} 
                    
                    else:
                        # เทส query
                        query_count_all = view_document.query.with_entities(
                            view_document.sender_email,
                            view_document.sender_name,
                            view_document.send_time,
                            view_document.biz_info,
                            view_document.documentType,
                            view_document.status,
                            view_document.document_status
                        ).filter(view_document.send_time <= time_end).filter(view_document.send_time >= time_start).filter(view_document.documentType == self.document_type).filter(view_document.biz_info.contains(self.tax_id)).all()
                        # เทส query
                list2 = generateList(query_count_all)
                tmp_json_1 = check_count_paper_start_end(query_count_all,list2,time_end,time_start)
            elif self.datetimeStart == '' and self.datetimeEnd == '' : #ไม่ใส่ start และ end:
                if self.tax_id == '' and self.document_type == '' : # tax_id = ค่าว่าง , document_type = ค่าว่าง
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status,
                        view_document.document_status
                    ).all() 
                elif self.tax_id != '' and self.document_type == '': # tax_id = มีค่า document_type = ค่าว่าง
                    if self.tax_id == 'citizen':
                        # เทส query
                        query_count_all = view_document.query.with_entities(
                            view_document.sender_email,
                            view_document.sender_name,
                            view_document.send_time,
                            view_document.biz_info,
                            view_document.documentType,
                            view_document.status,
                            view_document.document_status
                        ).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                        # เทส query 
                    elif len(self.tax_id) != 13 :
                        return {'result':'ER','messageText':'error because tax_id incorret'} 
                    else:
                        # เทส query
                        query_count_all = view_document.query.with_entities(
                            view_document.sender_email,
                            view_document.sender_name,
                            view_document.send_time,
                            view_document.biz_info,
                            view_document.documentType,
                            view_document.status,
                            view_document.document_status
                        ).filter(view_document.biz_info.contains(self.tax_id)).all()
                        # เทส query  
                    
                elif self.tax_id == '' and self.document_type != '': # tax_id = ค่าว่าง , document_type = มีค่า 
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status,
                        view_document.document_status
                    ).filter(view_document.documentType == self.document_type).all()
                    # เทส query 
                   
                elif self.tax_id != '' and self.document_type != '': # tax_id = มีค่า , document_type = มีค่า
                    if self.tax_id == 'citizen':
                        # เทส query
                        query_count_all = view_document.query.with_entities(
                            view_document.sender_email,
                            view_document.sender_name,
                            view_document.send_time,
                            view_document.biz_info,
                            view_document.documentType,
                            view_document.status,
                            view_document.document_status
                        ).filter(view_document.documentType == self.document_type).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                        # เทส query 
                    elif len(self.tax_id) != 13 :
                        return {'result':'ER','messageText':'error because tax_id incorret'} 
                    else:
                        # เทส query
                        query_count_all = view_document.query.with_entities(
                            view_document.sender_email,
                            view_document.sender_name,
                            view_document.send_time,
                            view_document.biz_info,
                            view_document.documentType,
                            view_document.status,
                            view_document.document_status
                        ).filter(view_document.documentType == self.document_type).filter(view_document.biz_info.contains(self.tax_id)).all()
                        # เทส query
                list2 = generateList(query_count_all)
                tmp_json_1 = check_count_paper_all(query_count_all,list2)
               
            return {'result':'OK','messageText':tmp_json_1}

        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'notfound data' + str(e)}

    def select_admin_count_all(self,tax_id,document_type,level_admin):
        self.tax_id = tax_id
        self.document_type = document_type
        self.level_admin = int(level_admin)
        list_json = []
        list_start_time = []
        countDoc_of_hour= 0
        count_Doc_of_hour_reject = 0
        count_Doc_of_hour_active = 0
        count_user = 0 
        tmp_json_1 = {}
        if self.level_admin == 0:
            if self.tax_id == '' and self.document_type == '': # tax_id ค่าว่าง , document_type != ค่าว่าง
                list_user = []
                query_sendername = view_document.query.with_entities(
                    view_document.sender_email
                ).all()
                
                for x in range(len(query_sendername)):
                    user = str(query_sendername[x])
                    list_user.append(user)
                query_count_active = (view_document.query.filter(view_document.status == 'ACTIVE')).count()
                query_count_reject = (view_document.query.filter(view_document.status == 'REJECT')).count()
                query_count_all = (view_document.query).count()
                tmp_json = {}
                tmp_json['all'] = query_count_all
                tmp_json['active'] = query_count_active
                tmp_json['reject'] = query_count_reject
                tmp_json['countUser_all'] = len(Counter(list_user))
                list_json.append(tmp_json)
                tmp_json_1['documents_all'] = list_json                
                db.session.close()
            elif self.tax_id != '' and self.document_type == '':  # tax_id มีค่า , document_type != ค่าว่าง
                if self.tax_id == 'citizen':
                    list_user = []
                    query_sendername = view_document.query.with_entities(
                        view_document.sender_email
                    ).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                    for x in range(len(query_sendername)):
                        user = str(query_sendername[x])
                        list_user.append(user)
                    query_count_active = (view_document.query.filter(view_document.status == 'ACTIVE').filter(or_(view_document.biz_info == 'None',view_document.biz_info == None))).count()
                    query_count_reject = (view_document.query.filter(view_document.status == 'REJECT').filter(or_(view_document.biz_info == 'None',view_document.biz_info == None))).count()
                    query_count_all = (view_document.query.filter(or_(view_document.biz_info == 'None',view_document.biz_info == None))).count()
                    tmp_json = {}
                    tmp_json['all'] = query_count_all
                    tmp_json['active'] = query_count_active
                    tmp_json['reject'] = query_count_reject
                    tmp_json['countUser_all'] = len(Counter(list_user))
                    list_json.append(tmp_json)
                    tmp_json_1['documents_all'] = list_json                    
                    db.session.close()
                elif len(self.tax_id) == 13:
                    list_user = []
                    query_sendername = view_document.query.with_entities(
                        view_document.sender_email
                    ).filter(view_document.biz_info.contains(self.tax_id)).all()
                    for x in range(len(query_sendername)):
                        user = str(query_sendername[x])
                        list_user.append(user)
                    query_count_active = (view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.biz_info.contains(self.tax_id))).count()
                    query_count_reject = (view_document.query.filter(view_document.status == 'REJECT').filter(view_document.biz_info.contains(self.tax_id))).count()
                    query_count_all = (view_document.query.filter(view_document.biz_info.contains(self.tax_id))).count()
                    tmp_json = {}
                    tmp_json['all'] = query_count_all
                    tmp_json['active'] = query_count_active
                    tmp_json['reject'] = query_count_reject
                    tmp_json['countUser_all'] = len(Counter(list_user))
                    list_json.append(tmp_json)
                    tmp_json_1['documents_all'] = list_json                    
                    db.session.close()
                else:
                    return {'result':'ER','messageText':'error because tax_id incorret'} 
 
            elif self.tax_id != '' and self.document_type != '':  # tax_id มีค่า , document_type != มีค่า
                if self.tax_id == 'citizen':
                    list_user = []
                    query_sendername = view_document.query.with_entities(
                        view_document.sender_email
                    ).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType == self.document_type).all()
                    for x in range(len(query_sendername)):
                        user = str(query_sendername[x])
                        list_user.append(user)
                    query_count_active = (view_document.query.filter(view_document.status == 'ACTIVE').filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType == self.document_type)).count()
                    query_count_reject = (view_document.query.filter(view_document.status == 'REJECT').filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType == self.document_type)).count()
                    query_count_all = (view_document.query.filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType == self.document_type)).count()
                    tmp_json = {}
                    tmp_json['all'] = query_count_all
                    tmp_json['active'] = query_count_active
                    tmp_json['reject'] = query_count_reject
                    tmp_json['countUser_all'] = len(Counter(list_user))
                    list_json.append(tmp_json)
                    tmp_json_1['documents_all'] = list_json                    
                    db.session.close()
                elif len(self.tax_id) == 13 :
                    list_user = []
                    query_sendername = view_document.query.with_entities(
                        view_document.sender_email
                    ).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType == self.document_type).all()
                    for x in range(len(query_sendername)):
                        user = str(query_sendername[x])
                        list_user.append(user)
                    query_count_active = (view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType == self.document_type)).count()
                    query_count_reject = (view_document.query.filter(view_document.status == 'REJECT').filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType == self.document_type)).count()
                    query_count_all = (view_document.query.filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType == self.document_type)).count()
                    tmp_json = {}
                    tmp_json['all'] = query_count_all
                    tmp_json['active'] = query_count_active
                    tmp_json['reject'] = query_count_reject
                    tmp_json['countUser_all'] = len(Counter(list_user))
                    list_json.append(tmp_json)
                    tmp_json_1['documents_all'] = list_json                    
                    db.session.close()
                else:
                    return {'result':'ER','messageText':'error because tax_id incorret'} 
            
            elif self.tax_id == '' and self.document_type != '':  # tax_id ค่าว่าง , document_type != มีค่า
                list_user = []
                query_sendername = view_document.query.with_entities(
                    view_document.sender_email
                ).filter(view_document.documentType == self.document_type).all()
                for x in range(len(query_sendername)):
                    user = str(query_sendername[x])
                    list_user.append(user)
                query_count_active = (view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.documentType == self.document_type)).count()
                query_count_reject = (view_document.query.filter(view_document.status == 'REJECT').filter(view_document.documentType == self.document_type)).count()
                query_count_all = (view_document.query.filter(view_document.documentType == self.document_type)).count()
                tmp_json = {}
                tmp_json['all'] = query_count_all
                tmp_json['active'] = query_count_active
                tmp_json['reject'] = query_count_reject
                tmp_json['countUser_all'] = len(Counter(list_user))
                list_json.append(tmp_json)
                tmp_json_1['documents_all'] = list_json
                db.session.close()
        elif(self.level_admin == 1):
            if self.tax_id != '' and self.document_type == '':  # tax_id มีค่า , document_type  ค่าว่าง
                list_user = []
                query_sendername = view_document.query.with_entities(
                    view_document.sender_email
                ).filter(view_document.biz_info.contains(self.tax_id)).all()
                for x in range(len(query_sendername)):
                    user = str(query_sendername[x])
                    list_user.append(user)
                query_count_active = (view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.biz_info.contains(self.tax_id))).count()
                query_count_reject = (view_document.query.filter(view_document.status == 'REJECT').filter(view_document.biz_info.contains(self.tax_id))).count()
                query_count_all = (view_document.query.filter(view_document.biz_info.contains(self.tax_id))).count()
                tmp_json = {}
                tmp_json['all'] = query_count_all
                tmp_json['active'] = query_count_active
                tmp_json['reject'] = query_count_reject
                tmp_json['countUser_all'] = len(Counter(list_user))
                tmp_json_1['documents_all'] = list_json
                list_json.append(tmp_json)
                tmp_json_1['documents_all'] = list_json                
                db.session.close()
            elif self.tax_id != '' and self.document_type != '':  # tax_id มีค่า , document_type != มีค่า
                list_user = []
                query_sendername = view_document.query.with_entities(
                    view_document.sender_email
                ).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType == self.document_type).all()
                for x in range(len(query_sendername)):
                    user = str(query_sendername[x])
                    list_user.append(user)
                query_count_active = (view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType == self.document_type)).count()
                query_count_reject = (view_document.query.filter(view_document.status == 'REJECT').filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType == self.document_type)).count()
                query_count_all = (view_document.query.filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType == self.document_type)).count()
                tmp_json = {}
                tmp_json['all'] = query_count_all
                tmp_json['active'] = query_count_active
                tmp_json['reject'] = query_count_reject
                tmp_json['countUser_all'] = len(Counter(list_user))
                list_json.append(tmp_json)
                tmp_json_1['documents_all'] = list_json
                db.session.close()
        return {'result':'OK','messageText':list_json} 

    def select_admin_count_viewdoc_hour_v2(self,tax_id,document_type,level_admin):
        self.tax_id = tax_id
        self.document_type = document_type
        self.level_admin = int(level_admin)
        list_json = []
        list_start_time = []
        countDoc_of_hour= 0
        count_Doc_of_hour_reject = 0
        count_Doc_of_hour_active = 0
        count_user = 0 
        tmp_json_1 = {}
        start_last = 0
        startTime_list = []
        endTime_list = []
        count_1 = 11
        count_2 = 12
        query_count_all = None
        try:
            list_user = []
            list_json_all = []
            list_count_user = []
            tmp_json = {}
            now = datetime.datetime.now()
            hour = int((str(now).split(' ')[1]).split(':')[0])
            count = hour
            flashback = timedelta(hours = 1)
            end_time = now.replace(microsecond = 00)
            start_time =  (now-flashback).replace(hour=hour, minute=0, second=0, microsecond=00)
            startTime_list.append(start_time)
            endTime_list.append(end_time)
            for x in range(count):
                list_start_end = find_startTime_endTime_hour(start_time)
                start_time1 = list_start_end[0]
                end_time1 = list_start_end[1]
                list_user2 = []
                startTime_list.append(start_time1)
                endTime_list.append(end_time1)
                if x == count - 1:
                    start_last = start_time1
                start_time = start_time1
            if self.tax_id == '' and self.document_type == '' : # tax_id = ค่าว่าง , document_type = ค่าว่าง 
                # เทส query
                query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.sender_name,
                    view_document.send_time,
                    view_document.biz_info,
                    view_document.documentType,
                    view_document.status
                ).filter(view_document.send_time >= start_last).filter(view_document.send_time <= end_time).all()
                # เทส query 
                db.session.close()
            elif self.tax_id != '' and self.document_type == '': # tax_id = มีค่า document_type = ค่าว่าง
                if self.tax_id == 'citizen':
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status
                    ).filter(view_document.send_time >= start_last).filter(view_document.send_time <= end_time).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                    # เทส query
                    db.session.close()
                elif len(self.tax_id) != 13 :
                    return {'result':'ER','messageText':'error because tax_id incorret'} 

                else:
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status
                    ).filter(view_document.send_time >= start_last).filter(view_document.send_time <= end_time).filter(view_document.biz_info.contains(self.tax_id)).all()
                    # เทส query  
                    db.session.close()
            elif self.tax_id == '' and self.document_type != '': # tax_id = ค่าว่าง , document_type = มีค่า 
                # เทส query
                query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.sender_name,
                    view_document.send_time,
                    view_document.biz_info,
                    view_document.documentType,
                    view_document.status
                ).filter(view_document.send_time >= start_last).filter(view_document.send_time <= end_time).filter(view_document.documentType == self.document_type).all()
                # เทส query 
                db.session.close()
            elif self.tax_id != '' and self.document_type != '': # tax_id = มีค่า , document_type = มีค่า
                if self.tax_id == 'citizen':
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status
                    ).filter(view_document.send_time >= start_last).filter(view_document.send_time <= end_time).filter(view_document.documentType == self.document_type).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                    # เทส query 
                    db.session.close()
                elif len(self.tax_id) != 13 :
                    print('wekkkkkk11111')
                    return {'result':'ER','messageText':'error because tax_id incorret'} 
                
                else:
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status
                    ).filter(view_document.send_time >= start_last).filter(view_document.send_time <= end_time).filter(view_document.documentType == self.document_type).filter(view_document.biz_info.contains(self.tax_id)).all()
                    # เทส query
                    db.session.close()
            list2 = []
            for x in range(len(query_count_all)):
                tmp_json = {
                    'sender_email': query_count_all[x].sender_email,
                    'sender_name': query_count_all[x].sender_email,
                    'sendtime':int(datetime.datetime.timestamp(query_count_all[x].send_time)),
                    'biz_info':query_count_all[x].biz_info,
                    'documentType':query_count_all[x].documentType,
                    'status':query_count_all[x].status,
                }
                list2.append(tmp_json)
                tmp_json = {}
            
            if len(query_count_all)==0:
                for x in range(count+1):
                    count_all = 0
                    count_active = 0
                    count_reject = 0
                    list_user2 = []
                    timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                    timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                    tmp_json['all_documents'] = count_all
                    tmp_json['documents_active'] = count_active
                    tmp_json['count_user'] = len(list_user2)
                    tmp_json['documents_reject'] = count_reject
                    tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                    tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                    tmp_json['timestamp_start'] = timestamp_start
                    tmp_json['timestamp_end'] = timestamp_end
                    countDoc_of_hour = countDoc_of_hour + count_all
                    count_Doc_of_hour_active = count_Doc_of_hour_active + count_active
                    count_Doc_of_hour_reject = count_Doc_of_hour_reject + count_reject
                    list_json.append(tmp_json)
                    tmp_json = {}
            else:
                for x in range(count+1):
                    count_all = 0
                    count_active = 0
                    count_reject = 0
                    list_user2 = []
                    for y in range(len(list2)):
                        timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                        timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                        user = list2[y]['sender_email']
                        if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end):
                            count_all = count_all + 1
                            if user not in list_user2:
                                list_user2.append(user)
                            if user not in list_count_user:
                                list_count_user.append(user)
                        if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end) and list2[y]['status'] == 'ACTIVE':
                            count_active = count_active + 1
                        if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end) and list2[y]['status'] == 'REJECT':
                            count_reject = count_reject + 1
                    tmp_json['all_documents'] = count_all
                    tmp_json['documents_active'] = count_active
                    tmp_json['count_user'] = len(list_user2)
                    tmp_json['documents_reject'] = count_reject
                    tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                    tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                    tmp_json['timestamp_start'] = timestamp_start
                    tmp_json['timestamp_end'] = timestamp_end
                    countDoc_of_hour = countDoc_of_hour + count_all
                    count_Doc_of_hour_active = count_Doc_of_hour_active + count_active
                    count_Doc_of_hour_reject = count_Doc_of_hour_reject + count_reject
                    list_json.append(tmp_json)
                    tmp_json = {}

            tmp_json_1['documents_past_hour'] = list_json

            tmp_json = {}
            list_json = []
            tmp_json['documents_all'] = countDoc_of_hour
            tmp_json['documents_all_active'] = count_Doc_of_hour_active
            tmp_json['documents_all_reject'] = count_Doc_of_hour_reject
            tmp_json['countUser_of_hour'] = len(list_count_user)
            list_json.append(tmp_json)

            tmp_json_1['documents_all_hour'] = list_json            
            db.session.close()
            return {'result':'OK','messageText':tmp_json_1}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'notfound data' + str(e)}

    def select_admin_count_viewdoc_week_v2(self,tax_id,document_type,level_admin):
        self.tax_id = tax_id
        self.document_type = document_type
        self.level_admin = int(level_admin)
        list_json = []
        list_start_time = []
        countDoc_of_week = 0
        count_Doc_of_week_reject = 0
        count_Doc_of_week_active = 0
        count_user = 0
        list_count_user = []
        tmp_json_1 = {}
        # count = 4
        start_last = 0
        startTime_list = []
        endTime_list = []
        count_1 = 3
        count_2 = 4
        query_count_all = None
        try:
            now = datetime.datetime.now()
            day = (str(now).split('-')[2]).split(' ')[0]
            year = str(now).split('-')[0]
            month = str(now).split('-')[1]
            day_of_week = calendar.weekday(int(year),int(month),int(day))
            flashback = timedelta(days=day_of_week)
            end_time = (now).replace(hour=23, minute=59, second=59, microsecond=00)
            start_time =  (now-flashback).replace(hour=0, minute=0, second=0, microsecond=0)
            startTime_list.append(start_time)
            endTime_list.append(end_time)
            list_user = []
            tmp_json = {}

            for x in range(count_1):
                list_start_end = find_startTime_endTime_week(start_time)
                start_time1 = list_start_end[0]
                end_time1 = list_start_end[1]
                list_user2 = []
                startTime_list.append(start_time1)
                endTime_list.append(end_time1)
                if x == count_1 - 1:
                    start_last = start_time1
                start_time = start_time1

            if self.tax_id == '' and self.document_type == '' : # tax_id = ค่าว่าง , document_type = ค่าว่าง
                # เทส query
                query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.sender_name,
                    view_document.send_time,
                    view_document.biz_info,
                    view_document.documentType,
                    view_document.status
                ).filter(view_document.send_time >= start_last).filter(view_document.send_time <= end_time).all()
                # เทส query 
                db.session.close()
            elif self.tax_id != '' and self.document_type == '': # tax_id = มีค่า document_type = ค่าว่าง
                if self.tax_id == 'citizen':
                    print('tax_id',self.tax_id)
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status
                    ).filter(view_document.send_time >= start_last).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                    db.session.close()
                    # เทส query 
                elif len(self.tax_id) != 13 :
                    return {'result':'ER','messageText':'error because tax_id incorret'} 
                
                else:
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status
                    ).filter(view_document.send_time >= start_last).filter(view_document.send_time <= end_time).filter(view_document.biz_info.contains(self.tax_id)).all()
                    # เทส query  
                    db.session.close()
            elif self.tax_id == '' and self.document_type != '': # tax_id = ค่าว่าง , document_type = มีค่า 
                 # เทส query
                query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.sender_name,
                    view_document.send_time,
                    view_document.biz_info,
                    view_document.documentType,
                    view_document.status
                ).filter(view_document.send_time >= start_last).filter(view_document.send_time <= end_time).filter(view_document.documentType == self.document_type).all()
                # เทส query 
                db.session.close()
            elif self.tax_id != '' and self.document_type != '': # tax_id = มีค่า , document_type = มีค่า
                if self.tax_id == 'citizen':
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status
                    ).filter(view_document.send_time >= start_last).filter(view_document.send_time <= end_time).filter(view_document.documentType == self.document_type).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                    # เทส query 
                    db.session.close()
                elif len(self.tax_id) != 13 :
                    print('wekkkkkk11111')
                    return {'result':'ER','messageText':'error because tax_id incorret'} 
                
                else:
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status
                    ).filter(view_document.send_time >= start_last).filter(view_document.send_time <= end_time).filter(view_document.documentType == self.document_type).filter(view_document.biz_info.contains(self.tax_id)).all()
                    # เทส query 
                    db.session.close()
            list2 = []
            for x in range(len(query_count_all)):
                tmp_json = {
                    'sender_email': query_count_all[x].sender_email,
                    'sender_name': query_count_all[x].sender_email,
                    'sendtime':int(datetime.datetime.timestamp(query_count_all[x].send_time)),
                    'biz_info':query_count_all[x].biz_info,
                    'documentType':query_count_all[x].documentType,
                    'status':query_count_all[x].status,
                }
                list2.append(tmp_json)
                tmp_json = {}

          

            # เช็คเอกสารทั้งหมดตามเวลา
            if len(query_count_all) == 0 :
                for x in range(count_2):
                    count_all = 0
                    count_active = 0
                    count_reject = 0
                    list_user2 = []
                    timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                    timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                    tmp_json['all_documents'] = count_all
                    tmp_json['documents_active'] = count_active
                    tmp_json['count_user'] = len(list_user2)
                    tmp_json['documents_reject'] = count_reject
                    tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                    tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                    tmp_json['timestamp_start'] = timestamp_start
                    tmp_json['timestamp_end'] = timestamp_end
                    countDoc_of_week = countDoc_of_week + count_all
                    count_Doc_of_week_active = count_Doc_of_week_active + count_active
                    count_Doc_of_week_reject = count_Doc_of_week_reject + count_reject
                    list_json.append(tmp_json)
                    tmp_json = {}
            else:
                for x in range(count_2):
                    count_all = 0
                    count_active = 0
                    count_reject = 0
                    list_user2 = []
                    for y in range(len(list2)):
                        timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                        timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                        user = list2[y]['sender_name']
                        if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end):
                        # if int(list2[y]['sendtime']) <= int(timestamp_end) and list2[y]['sendtime'] >= int(timestamp_start):
                            count_all = count_all + 1
                            if user not in list_user2:
                                list_user2.append(user)
                            if user not in list_count_user:
                                list_count_user.append(user)
                        if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end) and list2[y]['status'] == 'ACTIVE':
                            count_active = count_active + 1
                        if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end) and list2[y]['status'] == 'REJECT':
                            count_reject = count_reject + 1
                    tmp_json['all_documents'] = count_all
                    tmp_json['documents_active'] = count_active
                    tmp_json['count_user'] = len(list_user2)
                    tmp_json['documents_reject'] = count_reject
                    tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                    tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                    tmp_json['timestamp_start'] = timestamp_start
                    tmp_json['timestamp_end'] = timestamp_end
                    countDoc_of_week = countDoc_of_week + count_all
                    count_Doc_of_week_active = count_Doc_of_week_active + count_active
                    count_Doc_of_week_reject = count_Doc_of_week_reject + count_reject
                    list_json.append(tmp_json)
                    tmp_json = {}
            # เช็คเอกสารทั้งหมดตามเวลา
            tmp_json_1['documents_past_week'] = list_json

            tmp_json = {}
            list_json = []
            tmp_json['documents_all'] = countDoc_of_week
            tmp_json['documents_all_active'] = count_Doc_of_week_active
            tmp_json['documents_all_reject'] = count_Doc_of_week_reject
            tmp_json['countUser_of_week'] = len(list_count_user)
            list_json.append(tmp_json)

            tmp_json_1['documents_all_week'] = list_json
            # tmp_json_1['list email user'] = Counter(list_count_user)
            return {'result':'OK','messageText':tmp_json_1}
            db.session.close()
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'notfound data' + str(e)}

    def select_admin_count_viewdoc_day_v2(self,tax_id,document_type,level_admin):
        self.tax_id = tax_id
        self.document_type = document_type
        self.level_admin = int(level_admin)
        list_json = []
        list_start_time = []
        list_count_user = []
        countDoc_of_day = 0
        count_Doc_of_day_reject = 0
        count_Doc_of_day_active = 0
        tmp_json_1 = {}
        start_last = 0
        startTime_list = []
        endTime_list = []
        count_1 = 29
        count_2 = 30
        try:
            if self.tax_id == '' and self.document_type == '' : # tax_id = ค่าว่าง , document_type = ค่าว่าง 
                list_user = []
                tmp_json = {}
                now = datetime.datetime.now()
                end_time = now.replace(hour=23, minute=59, second=59, microsecond=00)
                start_time = now.replace(hour=0, minute=0, second=0, microsecond=0)
                startTime_list.append(start_time)
                endTime_list.append(end_time)
                for x in range(count_1):
                    list_start_end = find_startTime_endTime_day(start_time)
                    start_time1 = list_start_end[0]
                    end_time1 = list_start_end[1]
                    startTime_list.append(start_time1)
                    endTime_list.append(end_time1)
                    if x == count_1 - 1:
                        start_last = start_time1
                    start_time = start_time1
                # เทส query
                query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.sender_name,
                    view_document.send_time,
                    view_document.biz_info,
                    view_document.documentType,
                    view_document.status
                ).filter(view_document.send_time >= start_last).filter(view_document.send_time <= end_time).all()
                # เทส query 
                db.session.close()
                list2 = []
                for x in range(len(query_count_all)):
                    tmp_json = {
                        'sender_email': query_count_all[x].sender_email,
                        'sender_name': query_count_all[x].sender_email,
                        'sendtime':int(datetime.datetime.timestamp(query_count_all[x].send_time)),
                        'biz_info':query_count_all[x].biz_info,
                        'documentType':query_count_all[x].documentType,
                        'status':query_count_all[x].status,
                    }
                    list2.append(tmp_json)
                    tmp_json = {}

                if len(query_count_all) == 0 :
                    for x in range(count_2):
                        count_all = 0
                        count_active = 0
                        count_reject = 0
                        list_user2 = []
                        timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                        timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                        tmp_json['all_documents'] = count_all
                        tmp_json['documents_active'] = count_active
                        tmp_json['count_user'] = len(list_user2)
                        tmp_json['documents_reject'] = count_reject
                        tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                        tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                        tmp_json['timestamp_start'] = timestamp_start
                        tmp_json['timestamp_end'] = timestamp_end
                        countDoc_of_day = countDoc_of_day + count_all
                        count_Doc_of_day_active = count_Doc_of_day_active + count_active
                        count_Doc_of_day_reject = count_Doc_of_day_reject + count_reject
                        list_json.append(tmp_json)
                        tmp_json = {}
                    
                else:
                    for x in range(count_2):
                            count_all = 0
                            count_active = 0
                            count_reject = 0
                            list_user2 = []
                            for y in range(len(list2)):
                                timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                                timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                                user = list2[y]['sender_email']
                                if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end):
                                    count_all = count_all + 1
                                    if user not in list_user2:
                                        list_user2.append(user)
                                    if user not in list_count_user:
                                        list_count_user.append(user)
                                if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end) and list2[y]['status'] == 'ACTIVE':
                                    count_active = count_active + 1
                                if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end) and list2[y]['status'] == 'REJECT':
                                    count_reject = count_reject + 1
                            tmp_json['all_documents'] = count_all
                            tmp_json['documents_active'] = count_active
                            tmp_json['count_user'] = len(list_user2)
                            tmp_json['documents_reject'] = count_reject
                            tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                            tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                            tmp_json['timestamp_start'] = timestamp_start
                            tmp_json['timestamp_end'] = timestamp_end
                            countDoc_of_day = countDoc_of_day + count_all
                            count_Doc_of_day_active = count_Doc_of_day_active + count_active
                            count_Doc_of_day_reject = count_Doc_of_day_reject + count_reject
                            list_json.append(tmp_json)
                            tmp_json = {}
                        
                tmp_json_1['documents_past_day'] = list_json
                tmp_json = {}
                list_json = []
                tmp_json['documents_all'] = countDoc_of_day
                tmp_json['documents_all_active'] = count_Doc_of_day_active
                tmp_json['documents_all_reject'] = count_Doc_of_day_reject
                tmp_json['countUser_of_day'] = len(list_count_user)
                list_json.append(tmp_json)

                tmp_json_1['documents_all_day'] = list_json
                # tmp_json_1['list email user'] = Counter(list_count_user)
                db.session.close()
                return {'result':'OK','messageText':tmp_json_1}         
            
            elif self.tax_id != '' and self.document_type == '': # tax_id = มีค่า , document_type = ค่าว่าง
                if self.tax_id == 'citizen':
                    list_user = []
                    tmp_json = {}
                    now = datetime.datetime.now()
                    end_time = now.replace(hour=23, minute=59, second=59, microsecond=00)
                    start_time = now.replace(hour=0, minute=0, second=0, microsecond=0)
                    startTime_list.append(start_time)
                    endTime_list.append(end_time)
                   
                    for x in range(count_1):
                        list_start_end = find_startTime_endTime_day(start_time)
                        start_time1 = list_start_end[0]
                        end_time1 = list_start_end[1]
                        startTime_list.append(start_time1)
                        endTime_list.append(end_time1)
                        if x == count_1 - 1:
                            start_last = start_time1
                        start_time = start_time1
                    
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status
                    ).filter(view_document.send_time >= start_last).filter(view_document.send_time <= end_time).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                    # เทส query 
                    db.session.close()
                    list2 = []
                    for x in range(len(query_count_all)):
                        tmp_json = {
                            'sender_email': query_count_all[x].sender_email,
                            'sender_name': query_count_all[x].sender_email,
                            'sendtime':int(datetime.datetime.timestamp(query_count_all[x].send_time)),
                            'biz_info':query_count_all[x].biz_info,
                            'documentType':query_count_all[x].documentType,
                            'status':query_count_all[x].status,
                        }
                        list2.append(tmp_json)
                        tmp_json = {}

                    if len(query_count_all) == 0 :
                        for x in range(count_2):
                            count_all = 0
                            count_active = 0
                            count_reject = 0
                            list_user2 = []
                            timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                            timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                            tmp_json['all_documents'] = count_all
                            tmp_json['documents_active'] = count_active
                            tmp_json['count_user'] = len(list_user2)
                            tmp_json['documents_reject'] = count_reject
                            tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                            tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                            tmp_json['timestamp_start'] = timestamp_start
                            tmp_json['timestamp_end'] = timestamp_end
                            countDoc_of_day = countDoc_of_day + count_all
                            count_Doc_of_day_active = count_Doc_of_day_active + count_active
                            count_Doc_of_day_reject = count_Doc_of_day_reject + count_reject
                            list_json.append(tmp_json)
                            tmp_json = {}
                        
                    else :
                        for x in range(count_2):
                            count_all = 0
                            count_active = 0
                            count_reject = 0
                            list_user2 = []
                            for y in range(len(list2)):
                                timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                                timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                                user = list2[y]['sender_email']
                                if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end):
                                    count_all = count_all + 1
                                    if user not in list_user2:
                                        list_user2.append(user)
                                    if user not in list_count_user:
                                        list_count_user.append(user)
                                if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end) and list2[y]['status'] == 'ACTIVE':
                                    count_active = count_active + 1
                                if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end) and list2[y]['status'] == 'REJECT':
                                    count_reject = count_reject + 1
                            tmp_json['all_documents'] = count_all
                            tmp_json['documents_active'] = count_active
                            tmp_json['count_user'] = len(list_user2)
                            tmp_json['documents_reject'] = count_reject
                            tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                            tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                            tmp_json['timestamp_start'] = timestamp_start
                            tmp_json['timestamp_end'] = timestamp_end
                            countDoc_of_day = countDoc_of_day + count_all
                            count_Doc_of_day_active = count_Doc_of_day_active + count_active
                            count_Doc_of_day_reject = count_Doc_of_day_reject + count_reject
                            list_json.append(tmp_json)
                            tmp_json = {}
                            
                    list_json.append(tmp_json)
                    tmp_json_1['documents_past_day'] = list_json

                    tmp_json = {}
                    list_json = []
                    tmp_json['documents_all'] = countDoc_of_day
                    tmp_json['documents_all_active'] = count_Doc_of_day_active
                    tmp_json['documents_all_reject'] = count_Doc_of_day_reject
                    tmp_json['countUser_of_day'] = len(list_count_user)
                    list_json.append(tmp_json)

                    tmp_json_1['documents_all_day'] = list_json
                    db.session.close()
                    return {'result':'OK','messageText':tmp_json_1} 
                
                elif len(self.tax_id) != 13 :
                    return {'result':'ER','messageText':'error because tax_id incorret'} 
                
                else:
                    list_user = []
                    tmp_json = {}
                    now = datetime.datetime.now()
                    end_time = now.replace(hour=23, minute=59, second=59, microsecond=00)
                    start_time = now.replace(hour=0, minute=0, second=0, microsecond=0)
                    startTime_list.append(start_time)
                    endTime_list.append(end_time)

                  
                    for x in range(count_1):
                        list_start_end = find_startTime_endTime_day(start_time)
                        start_time1 = list_start_end[0]
                        end_time1 = list_start_end[1]
                        list_user2 = []
                        startTime_list.append(start_time1)
                        endTime_list.append(end_time1)
                        if x == count_1 - 1:
                            start_last = start_time1
                        start_time = start_time1
                        
                    
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status
                    ).filter(view_document.send_time >= start_last).filter(view_document.send_time <= end_time).filter(view_document.biz_info.contains(self.tax_id)).all()
                    # เทส query  
                    db.session.close()
                    list2 = []
                    for x in range(len(query_count_all)):
                        tmp_json = {
                            'sender_email': query_count_all[x].sender_email,
                            'sender_name': query_count_all[x].sender_email,
                            'sendtime':int(datetime.datetime.timestamp(query_count_all[x].send_time)),
                            'biz_info':query_count_all[x].biz_info,
                            'documentType':query_count_all[x].documentType,
                            'status':query_count_all[x].status,
                        }
                        list2.append(tmp_json)
                        tmp_json = {}
                    
                    if len(query_count_all) == 0 :
                        for x in range(count_2):
                            count_all = 0
                            count_active = 0
                            count_reject = 0
                            list_user2 = []
                            timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                            timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                            tmp_json['all_documents'] = count_all
                            tmp_json['documents_active'] = count_active
                            tmp_json['count_user'] = len(list_user2)
                            tmp_json['documents_reject'] = count_reject
                            tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                            tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                            tmp_json['timestamp_start'] = timestamp_start
                            tmp_json['timestamp_end'] = timestamp_end
                            countDoc_of_day = countDoc_of_day + count_all
                            count_Doc_of_day_active = count_Doc_of_day_active + count_active
                            count_Doc_of_day_reject = count_Doc_of_day_reject + count_reject
                            list_json.append(tmp_json)
                            tmp_json = {}
                    
                    else:
                        for x in range(count_2):
                            count_all = 0
                            count_active = 0
                            count_reject = 0
                            list_user2 = []
                            for y in range(len(list2)):
                                timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                                timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                                user = list2[y]['sender_email']
                                if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end):
                                    count_all = count_all + 1
                                    if user not in list_user2:
                                        list_user2.append(user)
                                    if user not in list_count_user:
                                        list_count_user.append(user)
                                if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end) and list2[y]['status'] == 'ACTIVE':
                                    count_active = count_active + 1
                                if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end) and list2[y]['status'] == 'REJECT':
                                    count_reject = count_reject + 1
                            tmp_json['all_documents'] = count_all
                            tmp_json['documents_active'] = count_active
                            tmp_json['count_user'] = len(list_user2)
                            tmp_json['documents_reject'] = count_reject
                            tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                            tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                            tmp_json['timestamp_start'] = timestamp_start
                            tmp_json['timestamp_end'] = timestamp_end
                            countDoc_of_day = countDoc_of_day + count_all
                            count_Doc_of_day_active = count_Doc_of_day_active + count_active
                            count_Doc_of_day_reject = count_Doc_of_day_reject + count_reject
                            list_json.append(tmp_json)
                            tmp_json = {}
                        
                    list_json.append(tmp_json)
                    tmp_json_1['documents_past_day'] = list_json

                    tmp_json = {}
                    list_json = []
                    tmp_json['documents_all'] = countDoc_of_day
                    tmp_json['documents_all_active'] = count_Doc_of_day_active
                    tmp_json['documents_all_reject'] = count_Doc_of_day_reject
                    tmp_json['countUser_of_day'] = len(list_count_user)
                    list_json.append(tmp_json)

                    tmp_json_1['documents_all_day'] = list_json
                    db.session.close()
                    return {'result':'OK','messageText':tmp_json_1}
  
            elif self.tax_id == '' and self.document_type != '': # tax_id = ค่าว่าง , document_type = มีค่า 
                list_user = []
                tmp_json = {}
                now = datetime.datetime.now()
                end_time = now.replace(hour=23, minute=59, second=59, microsecond=00)
                start_time = now.replace(hour=0, minute=0, second=0, microsecond=0)
                startTime_list.append(start_time)
                endTime_list.append(end_time)
               
                for x in range(count_1):
                    list_start_end = find_startTime_endTime_day(start_time)
                    start_time1 = list_start_end[0]
                    end_time1 = list_start_end[1]
                    list_user2 = []
                    startTime_list.append(start_time1)
                    endTime_list.append(end_time1)
                    if x == count_1 - 1:
                        start_last = start_time1
                    start_time = start_time1
                

                 # เทส query
                query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.sender_name,
                    view_document.send_time,
                    view_document.biz_info,
                    view_document.documentType,
                    view_document.status
                ).filter(view_document.send_time >= start_last).filter(view_document.send_time <= end_time).filter(view_document.documentType == self.document_type).all()
                # เทส query 

                db.session.close()
                list2 = []
                for x in range(len(query_count_all)):
                    tmp_json = {
                        'sender_email': query_count_all[x].sender_email,
                        'sender_name': query_count_all[x].sender_email,
                        'sendtime':int(datetime.datetime.timestamp(query_count_all[x].send_time)),
                        'biz_info':query_count_all[x].biz_info,
                        'documentType':query_count_all[x].documentType,
                        'status':query_count_all[x].status,
                    }
                    list2.append(tmp_json)
                    tmp_json = {}
               
                if len(query_count_all) == 0:
                    for x in range(count_2):
                        count_all = 0
                        count_active = 0
                        count_reject = 0
                        list_user2 = []
                        timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                        timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                        tmp_json['all_documents'] = count_all
                        tmp_json['documents_active'] = count_active
                        tmp_json['count_user'] = len(list_user2)
                        tmp_json['documents_reject'] = count_reject
                        tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                        tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                        tmp_json['timestamp_start'] = timestamp_start
                        tmp_json['timestamp_end'] = timestamp_end
                        countDoc_of_day = countDoc_of_day + count_all
                        count_Doc_of_day_active = count_Doc_of_day_active + count_active
                        count_Doc_of_day_reject = count_Doc_of_day_reject + count_reject
                        list_json.append(tmp_json)
                        tmp_json = {}
                        

                else:
                    for x in range(count_2):
                        count_all = 0
                        count_active = 0
                        count_reject = 0
                        list_user2 = []
                        for y in range(len(list2)):
                            timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                            timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                            user = list2[y]['sender_email']
                            if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end):
                                count_all = count_all + 1
                                if user not in list_user2:
                                    list_user2.append(user)
                                if user not in list_count_user:
                                    list_count_user.append(user)
                            if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end) and list2[y]['status'] == 'ACTIVE':
                                count_active = count_active + 1
                            if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end) and list2[y]['status'] == 'REJECT':
                                count_reject = count_reject + 1
                        tmp_json['all_documents'] = count_all
                        tmp_json['documents_active'] = count_active
                        tmp_json['count_user'] = len(list_user2)
                        tmp_json['documents_reject'] = count_reject
                        tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                        tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                        tmp_json['timestamp_start'] = timestamp_start
                        tmp_json['timestamp_end'] = timestamp_end
                        countDoc_of_day = countDoc_of_day + count_all
                        count_Doc_of_day_active = count_Doc_of_day_active + count_active
                        count_Doc_of_day_reject = count_Doc_of_day_reject + count_reject
                        list_json.append(tmp_json)
                        tmp_json = {}
                        

                # list_json.append(tmp_json)
                tmp_json_1['documents_past_day'] = list_json

                tmp_json = {}
                list_json = []
                tmp_json['documents_all'] = countDoc_of_day
                tmp_json['documents_all_active'] = count_Doc_of_day_active
                tmp_json['documents_all_reject'] = count_Doc_of_day_reject
                tmp_json['countUser_of_day'] = len(list_count_user)
                list_json.append(tmp_json)

                tmp_json_1['documents_all_day'] = list_json
                db.session.close()
                return {'result':'OK','messageText':tmp_json_1}
  
            elif self.tax_id != '' and self.document_type != '': # tax_id = มีค่า , document_type = มีค่า
                if self.tax_id == 'citizen':
                    list_user = []
                    tmp_json = {}
                    now = datetime.datetime.now()
                    end_time = now.replace(hour=23, minute=59, second=59, microsecond=00)
                    start_time = now.replace(hour=0, minute=0, second=0, microsecond=0)
                    startTime_list.append(start_time)
                    endTime_list.append(end_time)
   
                    for x in range(count_1):
                        list_start_end = find_startTime_endTime_day(start_time)
                        start_time1 = list_start_end[0]
                        end_time1 = list_start_end[1]
                        startTime_list.append(start_time1)
                        endTime_list.append(end_time1)
                        if x == count_1 - 1:
                            start_last = start_time1
                        start_time = start_time1
                 
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status
                    ).filter(view_document.send_time >= start_last).filter(view_document.send_time <= end_time).filter(view_document.documentType == self.document_type).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                    # เทส query 
                    db.session.close()
                    list2 = []
                    for x in range(len(query_count_all)):
                        tmp_json = {
                            'sender_email': query_count_all[x].sender_email,
                            'sender_name': query_count_all[x].sender_email,
                            'sendtime':int(datetime.datetime.timestamp(query_count_all[x].send_time)),
                            'biz_info':query_count_all[x].biz_info,
                            'documentType':query_count_all[x].documentType,
                            'status':query_count_all[x].status,
                        }
                        list2.append(tmp_json)
                        tmp_json = {}
                   
                    if len(query_count_all) ==  0:
                        for x in range(count_2):
                            count_all = 0
                            count_active = 0
                            count_reject = 0
                            list_user2 = []
                            timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                            timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                            tmp_json['all_documents'] = count_all
                            tmp_json['documents_active'] = count_active
                            tmp_json['count_user'] = len(list_user2)
                            tmp_json['documents_reject'] = count_reject
                            tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                            tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                            tmp_json['timestamp_start'] = timestamp_start
                            tmp_json['timestamp_end'] = timestamp_end
                            countDoc_of_day = countDoc_of_day + count_all
                            count_Doc_of_day_active = count_Doc_of_day_active + count_active
                            count_Doc_of_day_reject = count_Doc_of_day_reject + count_reject
                            list_json.append(tmp_json)
                            tmp_json = {}

                    else:
                        for x in range(count_2):
                            count_all = 0
                            count_active = 0
                            count_reject = 0
                            list_user2 = []
                            for y in range(len(list2)):
                                timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                                timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                                user = list2[y]['sender_email']
                                if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end):
                                    count_all = count_all + 1
                                    if user not in list_user2:
                                        list_user2.append(user)
                                    if user not in list_count_user:
                                        list_count_user.append(user)
                                if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end) and list2[y]['status'] == 'ACTIVE':
                                    count_active = count_active + 1
                                if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end) and list2[y]['status'] == 'REJECT':
                                    count_reject = count_reject + 1
                            tmp_json['all_documents'] = count_all
                            tmp_json['documents_active'] = count_active
                            tmp_json['count_user'] = len(list_user2)
                            tmp_json['documents_reject'] = count_reject
                            tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                            tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                            tmp_json['timestamp_start'] = timestamp_start
                            tmp_json['timestamp_end'] = timestamp_end
                            countDoc_of_day = countDoc_of_day + count_all
                            count_Doc_of_day_active = count_Doc_of_day_active + count_active
                            count_Doc_of_day_reject = count_Doc_of_day_reject + count_reject
                            list_json.append(tmp_json)
                            tmp_json = {}

                    tmp_json_1['documents_past_day'] = list_json

                    tmp_json = {}
                    list_json = []
                    tmp_json['documents_all'] = countDoc_of_day
                    tmp_json['documents_all_active'] = count_Doc_of_day_active
                    tmp_json['documents_all_reject'] = count_Doc_of_day_reject
                    tmp_json['countUser_of_day'] = len(list_count_user)
                    list_json.append(tmp_json)

                    tmp_json_1['documents_all_day'] = list_json
                    db.session.close()
                    return {'result':'OK','messageText':tmp_json_1} 
                
                elif len(self.tax_id) != 13 :
                    print('wekkkkkk11111')
                    return {'result':'ER','messageText':'error because tax_id incorret'} 
               
                else:
                    list_user = []
                    tmp_json = {}
                    now = datetime.datetime.now()
                    end_time = now.replace(hour=23, minute=59, second=59, microsecond=00)
                    start_time = now.replace(hour=0, minute=0, second=0, microsecond=0)
                    startTime_list.append(start_time)
                    endTime_list.append(end_time)

                    for x in range(count_1):
                        list_start_end = find_startTime_endTime_day(start_time)
                        start_time1 = list_start_end[0]
                        end_time1 = list_start_end[1]
                        list_user2 = []
                        startTime_list.append(start_time1)
                        endTime_list.append(end_time1)
                        if x == count_1 - 1:
                            start_last = start_time1
                        start_time = start_time1



                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status
                    ).filter(view_document.send_time >= start_last).filter(view_document.send_time <= end_time).filter(view_document.documentType == self.document_type).filter(view_document.biz_info.contains(self.tax_id)).all()
                    # เทส query 


                    list2 = []
                    for x in range(len(query_count_all)):
                        tmp_json = {
                            'sender_email': query_count_all[x].sender_email,
                            'sender_name': query_count_all[x].sender_email,
                            'sendtime':int(datetime.datetime.timestamp(query_count_all[x].send_time)),
                            'biz_info':query_count_all[x].biz_info,
                            'documentType':query_count_all[x].documentType,
                            'status':query_count_all[x].status,
                        }
                        list2.append(tmp_json)
                        tmp_json = {}
                    

                    if len(query_count_all) == 0: 
                        for x in range(count_2):
                            count_all = 0
                            count_active = 0
                            count_reject = 0
                            list_user2 = []
                            timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                            timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                            tmp_json['all_documents'] = count_all
                            tmp_json['documents_active'] = count_active
                            tmp_json['count_user'] = len(list_user2)
                            tmp_json['documents_reject'] = count_reject
                            tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                            tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                            tmp_json['timestamp_start'] = timestamp_start
                            tmp_json['timestamp_end'] = timestamp_end
                            countDoc_of_day = countDoc_of_day + count_all
                            count_Doc_of_day_active = count_Doc_of_day_active + count_active
                            count_Doc_of_day_reject = count_Doc_of_day_reject + count_reject
                            list_json.append(tmp_json)
                            tmp_json = {}
                

                    else:
                        for x in range(count_2):
                            count_all = 0
                            count_active = 0
                            count_reject = 0
                            list_user2 = []
                            for y in range(len(list2)):
                                timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                                timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                                user = list2[y]['sender_email']
                                if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end):
                                    count_all = count_all + 1
                                    if user not in list_user2:
                                        list_user2.append(user)
                                    if user not in list_count_user:
                                        list_count_user.append(user)
                                if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end) and list2[y]['status'] == 'ACTIVE':
                                    count_active = count_active + 1
                                if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end) and list2[y]['status'] == 'REJECT':
                                    count_reject = count_reject + 1
                            tmp_json['all_documents'] = count_all
                            tmp_json['documents_active'] = count_active
                            tmp_json['count_user'] = len(list_user2)
                            tmp_json['documents_reject'] = count_reject
                            tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                            tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                            tmp_json['timestamp_start'] = timestamp_start
                            tmp_json['timestamp_end'] = timestamp_end
                            countDoc_of_day = countDoc_of_day + count_all
                            count_Doc_of_day_active = count_Doc_of_day_active + count_active
                            count_Doc_of_day_reject = count_Doc_of_day_reject + count_reject
                            list_json.append(tmp_json)
                            tmp_json = {}
                    


                    tmp_json_1['documents_past_day'] = list_json

                    tmp_json = {}
                    list_json = []
                    tmp_json['documents_all'] = countDoc_of_day
                    tmp_json['documents_all_active'] = count_Doc_of_day_active
                    tmp_json['documents_all_reject'] = count_Doc_of_day_reject
                    tmp_json['countUser_of_day'] = len(list_count_user)
                    list_json.append(tmp_json)

                    tmp_json_1['documents_all_day'] = list_json
                    db.session.close()
                    return {'result':'OK','messageText':tmp_json_1}

        except Exception as e:
            return {'result':'ER','messageText':'notfound data' + str(e)}

    def select_admin_count_viewdoc_month(self,tax_id,document_type,level_admin):
        self.tax_id = tax_id
        self.document_type = document_type
        self.level_admin = int(level_admin)
        list_json = []
        list_count_user = []
        list_start_time = []
        count = 11
        countDoc_of_month = 0
        count_Doc_of_month_active = 0
        count_Doc_of_month_reject = 0
        tmp_json_1 = {}
        try:
            if self.tax_id == '' and self.document_type == '' : # tax_id = ค่าว่าง , document_type = ค่าว่าง 
                now = datetime.datetime.now()
                day = (str(now).split('-')[2]).split(' ')[0]
                day_2 = int(day) - 1
                flashback = timedelta(days=day_2)
                end_time = (now).replace(hour=23, minute=59, second=59, microsecond=00)
                start_time =  (now-flashback).replace(hour=0, minute=0, second=0, microsecond=0)
                list_user = []
                tmp_json = {}
                query_count_active_time = (view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time <= end_time).filter(view_document.send_time >= start_time)).count()
                query_count_reject_time = (view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time <= end_time).filter(view_document.send_time >= start_time)).count()
                query_count_all_time = (view_document.query.filter(view_document.send_time <= end_time).filter(view_document.send_time >= start_time)).count()
                
                query_sendername = view_document.query.with_entities(
                    view_document.sender_email
                ).filter(view_document.send_time <= end_time).filter(view_document.send_time >= start_time).all()

                for x in range(len(query_sendername)):
                    user = str(query_sendername[x])
                    if user not in list_user:
                        list_user.append(user)
                    if user not in list_count_user:
                        list_count_user.append(user)
                tmp_json['count_user'] = len(list_user)
                tmp_json['datetime_start'] = str(start_time)
                tmp_json['datetime_end'] = str(end_time)
                tmp_json['timestamp_start'] = int(datetime.datetime.timestamp(start_time))
                tmp_json['timestamp_end'] = int(datetime.datetime.timestamp(end_time))
                tmp_json['all_documents'] = query_count_all_time
                tmp_json['documents_active'] = query_count_active_time
                tmp_json['documents_reject'] = query_count_reject_time
                countDoc_of_month = countDoc_of_month + query_count_all_time
                count_Doc_of_month_active = count_Doc_of_month_active + query_count_active_time
                count_Doc_of_month_reject= count_Doc_of_month_reject + query_count_reject_time
                list_json.append(tmp_json)
                tmp_json = {}            
                for x in range(count):
                    list_start_end = find_startTime_endTime(start_time)
                    start_time1 = list_start_end[0]
                    end_time1 = list_start_end[1]
                    list_user2 = []
                  
                    query_sendername2 = view_document.query.with_entities(
                        view_document.sender_email
                    ).filter(view_document.send_time <= end_time1).filter(view_document.send_time >= start_time1).all()
                    for x in range(len(query_sendername2)):
                        user = str(query_sendername2[x])
                        if user not in list_user2:
                            list_user2.append(user)
                        if user not in list_count_user:
                            list_count_user.append(user)

                    query_count_active_time = (view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time <= end_time1).filter(view_document.send_time >= start_time1)).count()
                    query_count_reject_time = (view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time <= end_time1).filter(view_document.send_time >= start_time1)).count()
                    query_count_all_time = (view_document.query.filter(view_document.send_time <= end_time1).filter(view_document.send_time >= start_time1)).count()
                  
                    tmp_json['count_user'] = len(list_user2)
                    tmp_json['all_documents'] = query_count_all_time
                    tmp_json['documents_active'] = query_count_active_time
                    tmp_json['documents_reject'] = query_count_reject_time
                    tmp_json['datetime_start'] = str(start_time1)
                    tmp_json['datetime_end'] = str(end_time1)
                    tmp_json['timestamp_start'] = int(datetime.datetime.timestamp(start_time1))
                    tmp_json['timestamp_end'] = int(datetime.datetime.timestamp(end_time1))
                    countDoc_of_month = countDoc_of_month + query_count_all_time
                    count_Doc_of_month_active = count_Doc_of_month_active + query_count_active_time
                    count_Doc_of_month_reject= count_Doc_of_month_reject + query_count_reject_time
                    list_json.append(tmp_json)
                    tmp_json = {}
                    start_time = start_time1                
                
                tmp_json_1['documents_past_month'] = list_json

                tmp_json = {}
                list_json = []
                tmp_json['documents_all'] = countDoc_of_month
                tmp_json['documents_all_active'] = count_Doc_of_month_active
                tmp_json['documents_all_reject'] = count_Doc_of_month_reject
                tmp_json['countUser_of_month'] = len(list_count_user)
                list_json.append(tmp_json)

                tmp_json_1['documents_all_month'] = list_json
                db.session.close()
                return {'result':'OK','messageText':tmp_json_1} 
                    
            elif self.tax_id != '' and self.document_type == '': # tax_id = มีค่า , document_type = ค่าว่าง
                if tax_id == 'citizen':

                    list_user = []
                    now = datetime.datetime.now()
                    day = (str(now).split('-')[2]).split(' ')[0]
                    day_2 = int(day) - 1
                    flashback = timedelta(days=day_2)
                    end_time = (now).replace(hour=23, minute=59, second=59, microsecond=00)
                    start_time =  (now-flashback).replace(hour=0, minute=0, second=0, microsecond=0)
                    tmp_json = {}

                    query_sendername = view_document.query.with_entities(
                            view_document.sender_email
                    ).filter(view_document.send_time <= end_time).filter(view_document.send_time >= start_time).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                    query_count_active_time = (view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time <= end_time).filter(view_document.send_time >= start_time).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None))).count()
                    query_count_reject_time = (view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time <= end_time).filter(view_document.send_time >= start_time).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None))).count()
                    query_count_all_time = (view_document.query.filter(view_document.send_time <= end_time).filter(view_document.send_time >= start_time).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None))).count()
                    
                    for x in range(len(query_sendername)):
                        user = str(query_sendername[x])
                        if user not in list_user:
                            list_user.append(user)
                        if user not in list_count_user:
                            list_count_user.append(user)
                
                    tmp_json['count_user'] = len(list_user)
                    tmp_json['datetime_start'] = str(start_time)
                    tmp_json['datetime_end'] = str(end_time)
                    tmp_json['timestamp_start'] = int(datetime.datetime.timestamp(start_time))
                    tmp_json['timestamp_end'] = int(datetime.datetime.timestamp(end_time))
                    tmp_json['all_documents'] = query_count_all_time
                    tmp_json['documents_active'] = query_count_active_time
                    tmp_json['documents_reject'] = query_count_reject_time
                    countDoc_of_month = countDoc_of_month + query_count_all_time
                    count_Doc_of_month_active = count_Doc_of_month_active + query_count_active_time
                    count_Doc_of_month_reject = count_Doc_of_month_reject + query_count_reject_time
                    list_json.append(tmp_json)
                    tmp_json = {}
                    for x in range(count):
                        list_start_end = find_startTime_endTime(start_time)
                        start_time1 = list_start_end[0]
                        end_time1 = list_start_end[1]
                        list_user2 = []
                        query_sendername2 = view_document.query.with_entities(
                            view_document.sender_email
                        ).filter(view_document.send_time <= end_time1).filter(view_document.send_time >= start_time1).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                        query_count_active_time = (view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time <= end_time1).filter(view_document.send_time >= start_time1).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None))).count()
                        query_count_reject_time = (view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time <= end_time1).filter(view_document.send_time >= start_time1).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None))).count()
                        query_count_all_time = (view_document.query.filter(view_document.send_time <= end_time1).filter(view_document.send_time >= start_time1).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None))).count()
                        for x in range(len(query_sendername2)):
                            user = str(query_sendername2[x])
                            if user not in list_user2:
                                list_user2.append(user)
                            if user not in list_count_user:
                                list_count_user.append(user)
                        tmp_json['count_user'] = len(list_user2)
                        tmp_json['all_documents'] = query_count_all_time
                        tmp_json['documents_active'] = query_count_active_time
                        tmp_json['documents_reject'] = query_count_reject_time
                        tmp_json['datetime_start'] = str(start_time1)
                        tmp_json['datetime_end'] = str(end_time1)
                        tmp_json['timestamp_start'] = int(datetime.datetime.timestamp(start_time1))
                        tmp_json['timestamp_end'] = int(datetime.datetime.timestamp(end_time1))
                        countDoc_of_month = countDoc_of_month + query_count_all_time
                        count_Doc_of_month_active = count_Doc_of_month_active + query_count_active_time
                        count_Doc_of_month_reject = count_Doc_of_month_reject + query_count_reject_time
                        list_json.append(tmp_json)
                        tmp_json = {}
                        start_time = start_time1
                        list_json.append(tmp_json)
                    tmp_json_1['documents_past_month'] = list_json
                    tmp_json = {}
                    list_json = []
                    tmp_json['documents_all'] = countDoc_of_month
                    tmp_json['documents_all_active'] = count_Doc_of_month_active
                    tmp_json['documents_all_reject'] = count_Doc_of_month_reject
                    tmp_json['countUser_of_month'] = len(list_count_user)
                    list_json.append(tmp_json)

                    tmp_json_1['documents_all_month'] = list_json
                    db.session.close()
                    return {'result':'OK','messageText':tmp_json_1} 
               
                elif len(self.tax_id) != 13 :
                    return {'result':'ER','messageText':'error because tax_id incorret'} 
                
                else :
                    list_user = []
                    now = datetime.datetime.now()
                    day = (str(now).split('-')[2]).split(' ')[0]
                    day_2 = int(day) - 1
                    flashback = timedelta(days=day_2)
                    end_time = (now).replace(hour=23, minute=59, second=59, microsecond=00)
                    start_time =  (now-flashback).replace(hour=0, minute=0, second=0, microsecond=0)
                    tmp_json = {}

                    query_sendername = view_document.query.with_entities(
                            view_document.sender_email
                    ).filter(view_document.send_time <= end_time).filter(view_document.send_time >= start_time).filter(view_document.biz_info.contains(self.tax_id)).all()
                    query_count_active_time = (view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time <= end_time).filter(view_document.send_time >= start_time).filter(view_document.biz_info.contains(self.tax_id))).count()
                    query_count_reject_time = (view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time <= end_time).filter(view_document.send_time >= start_time).filter(view_document.biz_info.contains(self.tax_id))).count()
                    query_count_all_time = (view_document.query.filter(view_document.send_time <= end_time).filter(view_document.send_time >= start_time).filter(view_document.biz_info.contains(self.tax_id))).count()
                   
                    for x in range(len(query_sendername)):
                        user = str(query_sendername[x])
                        if user not in list_user:
                            list_user.append(user)
                        if user not in list_count_user:
                            list_count_user.append(user)
                    tmp_json['count_user'] = len(list_user)
                    tmp_json['datetime_start'] = str(start_time)
                    tmp_json['datetime_end'] = str(end_time)
                    tmp_json['timestamp_start'] = int(datetime.datetime.timestamp(start_time))
                    tmp_json['timestamp_end'] = int(datetime.datetime.timestamp(end_time))
                    tmp_json['all_documents'] = query_count_all_time
                    tmp_json['documents_active'] = query_count_active_time
                    tmp_json['documents_reject'] = query_count_reject_time
                    countDoc_of_month = countDoc_of_month + query_count_all_time
                    count_Doc_of_month_active = count_Doc_of_month_active + query_count_active_time
                    count_Doc_of_month_reject = count_Doc_of_month_reject + query_count_reject_time
                    list_json.append(tmp_json)
                    tmp_json = {}
                    for x in range(1,12):
                        list_start_end = find_startTime_endTime(start_time)
                        start_time1 = list_start_end[0]
                        end_time1 = list_start_end[1]
                        list_user2 = []
                       
                        query_sendername2 = view_document.query.with_entities(
                            view_document.sender_email
                        ).filter(view_document.send_time <= end_time1).filter(view_document.send_time >= start_time1).filter(view_document.biz_info.contains(self.tax_id)).all()
                        query_count_active_time = (view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time <= end_time1).filter(view_document.send_time >= start_time1).filter(view_document.biz_info.contains(self.tax_id))).count()
                        query_count_reject_time = (view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time <= end_time1).filter(view_document.send_time >= start_time1).filter(view_document.biz_info.contains(self.tax_id))).count()
                        query_count_all_time = (view_document.query.filter(view_document.send_time <= end_time1).filter(view_document.send_time >= start_time1).filter(view_document.biz_info.contains(self.tax_id))).count()
                       
                        for x in range(len(query_sendername2)):
                            user = str(query_sendername2[x])
                            if user not in list_user2:
                                list_user2.append(user)
                            if user not in list_count_user:
                                list_count_user.append(user)
                        tmp_json['count_user'] = len(list_user2)
                        tmp_json['all_documents'] = query_count_all_time
                        tmp_json['documents_active'] = query_count_active_time
                        tmp_json['documents_reject'] = query_count_reject_time
                        tmp_json['datetime_start'] = str(start_time1)
                        tmp_json['datetime_end'] = str(end_time1)
                        tmp_json['timestamp_start'] = int(datetime.datetime.timestamp(start_time1))
                        tmp_json['timestamp_end'] = int(datetime.datetime.timestamp(end_time1))
                        countDoc_of_month = countDoc_of_month + query_count_all_time
                        count_Doc_of_month_active = count_Doc_of_month_active + query_count_active_time
                        count_Doc_of_month_reject = count_Doc_of_month_reject + query_count_reject_time


                        list_json.append(tmp_json)
                        tmp_json = {}
                        start_time = start_time1
                        # print('________________________________________')
                    list_json.append(tmp_json)
                    tmp_json_1['documents_past_month'] = list_json

                    tmp_json = {}
                    list_json = []
                    tmp_json['documents_all'] = countDoc_of_month
                    tmp_json['documents_all_active'] = count_Doc_of_month_active
                    tmp_json['documents_all_reject'] = count_Doc_of_month_reject
                    tmp_json['countUser_of_month'] = len(list_count_user)
                    list_json.append(tmp_json)

                    tmp_json_1['documents_all_month'] = list_json
                    db.session.close()
                    return {'result':'OK','messageText':tmp_json_1}  

            elif self.tax_id == '' and self.document_type != '': # tax_id = ค่าว่าง , document_type = มีค่า
                list_user = []
                now = datetime.datetime.now()
                day = (str(now).split('-')[2]).split(' ')[0]
                day_2 = int(day) - 1
                flashback = timedelta(days=day_2)
                end_time = (now).replace(hour=23, minute=59, second=59, microsecond=00)
                start_time =  (now-flashback).replace(hour=0, minute=0, second=0, microsecond=0)

                tmp_json = {}
                query_sendername = view_document.query.with_entities(
                        view_document.sender_email
                ).filter(view_document.send_time <= end_time).filter(view_document.send_time >= start_time).filter(view_document.documentType == self.document_type).all()
                query_count_active_time = (view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time <= end_time).filter(view_document.send_time >= start_time).filter(view_document.documentType == self.document_type)).count()
                query_count_reject_time = (view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time <= end_time).filter(view_document.send_time >= start_time).filter(view_document.documentType == self.document_type)).count()
                query_count_all_time = (view_document.query.filter(view_document.send_time <= end_time).filter(view_document.send_time >= start_time).filter(view_document.documentType == self.document_type)).count()
               
                

                for x in range(len(query_sendername)):
                    user = str(query_sendername[x])
                    if user not in list_user:
                        list_user.append(user)
                    if user not in list_count_user:
                        list_count_user.append(user)
            
                tmp_json['count_user'] = len(list_user)
                tmp_json['datetime_start'] = str(start_time)
                tmp_json['datetime_end'] = str(end_time)
                tmp_json['all_documents'] = query_count_all_time
                tmp_json['documents_active'] = query_count_active_time
                tmp_json['documents_reject'] = query_count_reject_time
                tmp_json['timestamp_start'] = int(datetime.datetime.timestamp(start_time))
                tmp_json['timestamp_end'] = int(datetime.datetime.timestamp(end_time))
                countDoc_of_month = countDoc_of_month + query_count_all_time
                count_Doc_of_month_active = count_Doc_of_month_active + query_count_active_time
                count_Doc_of_month_reject = count_Doc_of_month_reject + query_count_reject_time
                list_json.append(tmp_json)
                tmp_json = {}
                for x in range(1,12):
                    list_start_end = find_startTime_endTime(start_time)
                    start_time1 = list_start_end[0]
                    end_time1 = list_start_end[1]
                    list_user2 = []
                    
                    query_sendername2 = view_document.query.with_entities(
                        view_document.sender_email
                    ).filter(view_document.send_time <= end_time1).filter(view_document.send_time >= start_time1).filter(view_document.documentType == self.document_type).all()
                    query_count_active_time = (view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time <= end_time1).filter(view_document.send_time >= start_time1).filter(view_document.documentType == self.document_type)).count()
                    query_count_reject_time = (view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time <= end_time1).filter(view_document.send_time >= start_time1).filter(view_document.documentType == self.document_type)).count()
                    query_count_all_time = (view_document.query.filter(view_document.send_time <= end_time1).filter(view_document.send_time >= start_time1).filter(view_document.documentType == self.document_type)).count()
                    for x in range(len(query_sendername2)):
                        user = str(query_sendername2[x])
                        if user not in list_user2:
                            list_user2.append(user)
                        if user not in list_count_user:
                            list_count_user.append(user)
                
                    tmp_json['count_user'] = len(list_user2)
                    tmp_json['all_documents'] = query_count_all_time
                    tmp_json['documents_active'] = query_count_active_time
                    tmp_json['documents_reject'] = query_count_reject_time
                    tmp_json['datetime_start'] = str(start_time1)
                    tmp_json['datetime_end'] = str(end_time1)
                    tmp_json['timestamp_start'] = int(datetime.datetime.timestamp(start_time1))
                    tmp_json['timestamp_end'] = int(datetime.datetime.timestamp(end_time1))
                    countDoc_of_month = countDoc_of_month + query_count_all_time
                    count_Doc_of_month_active = count_Doc_of_month_active + query_count_active_time
                    count_Doc_of_month_reject = count_Doc_of_month_reject + query_count_reject_time
                    list_json.append(tmp_json)
                    tmp_json = {}
                    start_time = start_time1
                    
                list_json.append(tmp_json)
                tmp_json_1['documents_past_month'] = list_json

                tmp_json = {}
                list_json = []
                tmp_json['documents_all'] = countDoc_of_month
                tmp_json['documents_all_active'] = count_Doc_of_month_active
                tmp_json['documents_all_reject'] = count_Doc_of_month_reject
                tmp_json['countUser_of_month'] = len(list_count_user)
                list_json.append(tmp_json)

                tmp_json_1['documents_all_month'] = list_json
                db.session.close()
                return {'result':'OK','messageText':tmp_json_1}  
            
            elif self.tax_id != '' and self.document_type != '': # tax_id = มีค่า , document_type = มีค่า
                if self.tax_id == 'citizen':
                    list_user = []
                    now = datetime.datetime.now()
                    day = (str(now).split('-')[2]).split(' ')[0]
                    day_2 = int(day) - 1
                    flashback = timedelta(days=day_2)
                    end_time = (now).replace(hour=23, minute=59, second=59, microsecond=00)
                    start_time =  (now-flashback).replace(hour=0, minute=0, second=0, microsecond=0)

                    tmp_json = {}
                    query_sendername = view_document.query.with_entities(
                            view_document.sender_email
                    ).filter(view_document.send_time <= end_time).filter(view_document.send_time >= start_time).filter(view_document.documentType == self.document_type).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                    query_count_active_time = (view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time <= end_time).filter(view_document.send_time >= start_time).filter(view_document.documentType == self.document_type).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None))).count()
                    query_count_reject_time = (view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time <= end_time).filter(view_document.send_time >= start_time).filter(view_document.documentType == self.document_type).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None))).count()
                    query_count_all_time = (view_document.query.filter(view_document.send_time <= end_time).filter(view_document.send_time >= start_time).filter(view_document.documentType == self.document_type).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None))).count()
                
                    
                    for x in range(len(query_sendername)):
                        user = str(query_sendername[x])
                        if user not in list_user:
                            list_user.append(user)
                        if user not in list_count_user:
                            list_count_user.append(user)
                    tmp_json['count_user'] = len(list_user)
                    tmp_json['datetime_start'] = str(start_time)
                    tmp_json['datetime_end'] = str(end_time)
                    tmp_json['timestamp_start'] = int(datetime.datetime.timestamp(start_time))
                    tmp_json['timestamp_end'] = int(datetime.datetime.timestamp(end_time))
                    tmp_json['all_documents'] = query_count_all_time
                    tmp_json['documents_active'] = query_count_active_time
                    tmp_json['documents_reject'] = query_count_reject_time
                    countDoc_of_month = countDoc_of_month + query_count_all_time
                    count_Doc_of_month_active = count_Doc_of_month_active + query_count_active_time
                    count_Doc_of_month_reject = count_Doc_of_month_reject + query_count_reject_time
                    list_json.append(tmp_json)
                    tmp_json = {}
                    for x in range(1,12):
                        list_start_end = find_startTime_endTime(start_time)
                        start_time1 = list_start_end[0]
                        end_time1 = list_start_end[1]
                        list_user2 = []
                        
                        query_sendername2 = view_document.query.with_entities(
                            view_document.sender_email
                         ).filter(view_document.send_time <= end_time1).filter(view_document.send_time >= start_time1).filter(view_document.documentType == self.document_type).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                        query_count_active_time = (view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time <= end_time1).filter(view_document.send_time >= start_time1).filter(view_document.documentType == self.document_type).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None))).count()
                        query_count_reject_time = (view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time <= end_time1).filter(view_document.send_time >= start_time1).filter(view_document.documentType == self.document_type).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None))).count()
                        query_count_all_time = (view_document.query.filter(view_document.send_time <= end_time1).filter(view_document.send_time >= start_time1).filter(view_document.documentType == self.document_type).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None))).count()
                        
                        for x in range(len(query_sendername2)):
                            user = str(query_sendername2[x])
                            if user not in list_user2:
                                list_user2.append(user)
                            if user not in list_count_user:
                                list_count_user.append(user)
                        tmp_json['count_user'] = len(list_user2)
                        tmp_json['all_documents'] = query_count_all_time
                        tmp_json['documents_active'] = query_count_active_time
                        tmp_json['documents_reject'] = query_count_reject_time
                        tmp_json['datetime_start'] = str(start_time1)
                        tmp_json['datetime_end'] = str(end_time1)
                        tmp_json['timestamp_start'] = int(datetime.datetime.timestamp(start_time1))
                        tmp_json['timestamp_end'] = int(datetime.datetime.timestamp(end_time1))
                        countDoc_of_month = countDoc_of_month + query_count_all_time
                        count_Doc_of_month_active = count_Doc_of_month_active + query_count_active_time
                        count_Doc_of_month_reject = count_Doc_of_month_reject + query_count_reject_time

                        list_json.append(tmp_json)
                        tmp_json = {}
                        start_time = start_time1
                        # print('________________________________________')
                    # tmp_json_1['documents_past_month'] = list_json
                    # return {'result':'OK','messageText':tmp_json_1}
                    
                    list_json.append(tmp_json)
                    tmp_json_1['documents_past_month'] = list_json
                    tmp_json = {}
                    list_json = []
                    tmp_json['documents_all'] = countDoc_of_month
                    tmp_json['documents_all_active'] = count_Doc_of_month_active
                    tmp_json['documents_all_reject'] = count_Doc_of_month_reject
                    tmp_json['countUser_of_month'] = len(list_count_user)
                    list_json.append(tmp_json)
                    tmp_json_1['documents_all_month'] = list_json
                    db.session.close()
                    return {'result':'OK','messageText':tmp_json_1}   
                
                elif len(self.tax_id) != 13 :
                    return {'result':'ER','messageText':'error because tax_id incorret'} 
                
                else:
                    list_user = []
                    now = datetime.datetime.now()
                    day = (str(now).split('-')[2]).split(' ')[0]
                    day_2 = int(day) - 1
                    flashback = timedelta(days=day_2)
                    end_time = (now).replace(hour=23, minute=59, second=59, microsecond=00)
                    start_time =  (now-flashback).replace(hour=0, minute=0, second=0, microsecond=0)
                    

                    query_count_active = (view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.documentType == self.document_type).filter(view_document.biz_info.contains(self.tax_id))).count()
                    query_count_reject = (view_document.query.filter(view_document.status == 'REJECT').filter(view_document.documentType == self.document_type).filter(view_document.biz_info.contains(self.tax_id))).count()
                    query_count_all = (view_document.query.filter(view_document.documentType == self.document_type).filter(view_document.biz_info.contains(self.tax_id))).count()
                    

                    tmp_json = {}
                    query_sendername = view_document.query.with_entities(
                            view_document.sender_email
                    ).filter(view_document.send_time <= end_time).filter(view_document.send_time >= start_time).filter(view_document.documentType == self.document_type).filter(view_document.biz_info.contains(self.tax_id)).all()
                    query_count_active_time = (view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time <= end_time).filter(view_document.send_time >= start_time).filter(view_document.documentType == self.document_type).filter(view_document.biz_info.contains(self.tax_id))).count()
                    query_count_reject_time = (view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time <= end_time).filter(view_document.send_time >= start_time).filter(view_document.documentType == self.document_type).filter(view_document.biz_info.contains(self.tax_id))).count()
                    query_count_all_time = (view_document.query.filter(view_document.send_time <= end_time).filter(view_document.send_time >= start_time).filter(view_document.documentType == self.document_type).filter(view_document.biz_info.contains(self.tax_id))).count()
                   
                    for x in range(len(query_sendername)):
                        user = str(query_sendername[x])
                        if user not in list_user:
                            list_user.append(user)
                        if user not in list_count_user:
                            list_count_user.append(user)
                    tmp_json['count_user'] = len(list_user)
                    tmp_json['datetime_start'] = str(start_time)
                    tmp_json['datetime_end'] = str(end_time)
                    tmp_json['timestamp_start'] = int(datetime.datetime.timestamp(start_time))
                    tmp_json['timestamp_end'] = int(datetime.datetime.timestamp(end_time))
                    tmp_json['all_documents'] = query_count_all_time
                    tmp_json['documents_active'] = query_count_active_time
                    tmp_json['documents_reject'] = query_count_reject_time
                    countDoc_of_month = countDoc_of_month + query_count_all_time
                    count_Doc_of_month_active = count_Doc_of_month_active + query_count_active_time
                    count_Doc_of_month_reject = count_Doc_of_month_reject + query_count_reject_time
                    list_json.append(tmp_json)
                    tmp_json = {}
                    for x in range(count):
                        list_start_end = find_startTime_endTime(start_time)
                        start_time1 = list_start_end[0]
                        end_time1 = list_start_end[1]
                        list_user2 = []
                        
                        query_sendername2 = view_document.query.with_entities(
                            view_document.sender_email
                         ).filter(view_document.send_time <= end_time1).filter(view_document.send_time >= start_time1).filter(view_document.documentType == self.document_type).filter(view_document.biz_info.contains(self.tax_id)).all()
                        query_count_active_time = (view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time <= end_time1).filter(view_document.send_time >= start_time1).filter(view_document.documentType == self.document_type).filter(view_document.biz_info.contains(self.tax_id))).count()
                        query_count_reject_time = (view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time <= end_time1).filter(view_document.send_time >= start_time1).filter(view_document.documentType == self.document_type).filter(view_document.biz_info.contains(self.tax_id))).count()
                        query_count_all_time = (view_document.query.filter(view_document.send_time <= end_time1).filter(view_document.send_time >= start_time1).filter(view_document.documentType == self.document_type).filter(view_document.biz_info.contains(self.tax_id))).count()
                        
                        for x in range(len(query_sendername2)):
                            user = str(query_sendername2[x])
                            if user not in list_user2:
                                list_user2.append(user)
                            if user not in list_count_user:
                                list_count_user.append(user)
                        tmp_json['count_user'] = len(list_user2)
                        tmp_json['all_documents'] = query_count_all_time
                        tmp_json['documents_active'] = query_count_active_time
                        tmp_json['documents_reject'] = query_count_reject_time
                        tmp_json['datetime_start'] = str(start_time1)
                        tmp_json['datetime_end'] = str(end_time1)
                        tmp_json['timestamp_start'] = int(datetime.datetime.timestamp(start_time1))
                        tmp_json['timestamp_end'] = int(datetime.datetime.timestamp(end_time1))
                        countDoc_of_month = countDoc_of_month + query_count_all_time
                        count_Doc_of_month_active = count_Doc_of_month_active + query_count_active_time
                        count_Doc_of_month_reject = count_Doc_of_month_reject + query_count_reject_time
                        list_json.append(tmp_json)
                        tmp_json = {}
                        start_time = start_time1
                        # print('________________________________________')
                    # tmp_json_1['documents_past_month'] = list_json
                    # return {'result':'OK','messageText':tmp_json_1} 
                    list_json.append(tmp_json)
                    tmp_json_1['documents_past_month'] = list_json

                    tmp_json = {}
                    list_json = []
                    tmp_json['documents_all'] = countDoc_of_month
                    tmp_json['documents_all_active'] = count_Doc_of_month_active
                    tmp_json['documents_all_reject'] = count_Doc_of_month_reject
                    tmp_json['countUser_of_month'] = len(list_count_user)
                    list_json.append(tmp_json)
                    
                    tmp_json_1['documents_all_month'] = list_json
                    db.session.close()
                    return {'result':'OK','messageText':tmp_json_1}  
        except Exception as e:
           return {'result':'ER','messageText':'notfound data' + str(e)}
        
    def select_admin_count_viewdoc_month_v2(self,tax_id,document_type,level_admin):
        self.tax_id = tax_id
        self.document_type = document_type
        self.level_admin = int(level_admin)
        list_json = []
        list_count_user = []
        list_start_time = []
        countDoc_of_month = 0
        count_Doc_of_month_active = 0
        count_Doc_of_month_reject = 0
        tmp_json_1 = {}
        start_last = 0
        startTime_list = []
        endTime_list = []
        count_1 = 11
        count_2 = 12
        query_count_all = None
        
        try:
            list_user = []
            tmp_json = {}
            now = datetime.datetime.now()
            day = (str(now).split('-')[2]).split(' ')[0]
            day_2 = int(day) - 1
            flashback = timedelta(days=day_2)
            end_time = (now).replace(hour=23, minute=59, second=59, microsecond=00)
            start_time =  (now-flashback).replace(hour=0, minute=0, second=0, microsecond=0)
            startTime_list.append(start_time)
            endTime_list.append(end_time)

            for x in range(count_1):
                list_start_end = find_startTime_endTime(start_time)
                start_time1 = list_start_end[0]
                end_time1 = list_start_end[1]
                startTime_list.append(start_time1)
                endTime_list.append(end_time1)
                if x == count_1 - 1:
                    start_last = start_time1
                start_time = start_time1
            
            if self.tax_id == '' and self.document_type == '' : # tax_id = ค่าว่าง , document_type = ค่าว่าง 
                # เทส query
                query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.sender_name,
                    view_document.send_time,
                    view_document.biz_info,
                    view_document.documentType,
                    view_document.status
                ).filter(view_document.send_time >= start_last).filter(view_document.send_time <= end_time).all()
                # เทส query 
                    
            elif self.tax_id != '' and self.document_type == '': # tax_id = มีค่า , document_type = ค่าว่าง
                if tax_id == 'citizen':
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status
                    ).filter(view_document.send_time >= start_last).filter(view_document.send_time <= end_time).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                    # เทส query 
                   
                elif len(self.tax_id) != 13 :
                    return {'result':'ER','messageText':'error because tax_id incorret'} 
                
                else :
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status
                    ).filter(view_document.send_time >= start_last).filter(view_document.send_time <= end_time).filter(view_document.biz_info.contains(self.tax_id)).all()
                    # เทส query  
            
            elif self.tax_id == '' and self.document_type != '': # tax_id = ค่าว่าง , document_type = มีค่า
                # เทส query
                query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.sender_name,
                    view_document.send_time,
                    view_document.biz_info,
                    view_document.documentType,
                    view_document.status
                ).filter(view_document.send_time >= start_last).filter(view_document.send_time <= end_time).filter(view_document.documentType == self.document_type).all()
                # เทส query 
            
            elif self.tax_id != '' and self.document_type != '': # tax_id = มีค่า , document_type = มีค่า
                if self.tax_id == 'citizen':
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status
                    ).filter(view_document.send_time >= start_last).filter(view_document.send_time <= end_time).filter(view_document.documentType == self.document_type).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                    # เทส query 

                elif len(self.tax_id) != 13 :
                    return {'result':'ER','messageText':'error because tax_id incorret'} 
                
                else:
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status
                    ).filter(view_document.send_time >= start_last).filter(view_document.send_time <= end_time).filter(view_document.documentType == self.document_type).filter(view_document.biz_info.contains(self.tax_id)).all()
                    # เทส query 

          
            list2 = []
            for x in range(len(query_count_all)):
                tmp_json = {
                    'sender_email': query_count_all[x].sender_email,
                    'sender_name': query_count_all[x].sender_email,
                    'sendtime':int(datetime.datetime.timestamp(query_count_all[x].send_time)),
                    'biz_info':query_count_all[x].biz_info,
                    'documentType':query_count_all[x].documentType,
                    'status':query_count_all[x].status,
                }
                list2.append(tmp_json)
                tmp_json = {}
            
            if len(query_count_all) == 0 :
                for x in range(count_2):
                    count_all = 0
                    count_active = 0
                    count_reject = 0
                    list_user2 = []
                    timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                    timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                    tmp_json['all_documents'] = count_all
                    tmp_json['documents_active'] = count_active
                    tmp_json['count_user'] = len(list_user2)
                    tmp_json['documents_reject'] = count_reject
                    tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                    tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                    tmp_json['timestamp_start'] = timestamp_start
                    tmp_json['timestamp_end'] = timestamp_end
                    countDoc_of_month = countDoc_of_month + count_all
                    count_Doc_of_month_active = count_Doc_of_month_active + count_active
                    count_Doc_of_month_reject = count_Doc_of_month_reject + count_reject
                    list_json.append(tmp_json)
                    tmp_json = {}

            else:
                for x in range(count_2):
                    count_all = 0
                    count_active = 0
                    count_reject = 0
                    list_user2 = []
                    for y in range(len(list2)):
                        timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                        timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                        user = list2[y]['sender_email']
                        list_count_user.append(user)
                        if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end):
                            count_all = count_all + 1
                            list_user2.append(user)
                            # if user not in list_user2:
                                # list_user2.append(user)
                            # if user not in list_count_user:
                                # list_count_user.append(user)
                        if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end) and list2[y]['status'] == 'ACTIVE':
                            count_active = count_active + 1
                        if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end) and list2[y]['status'] == 'REJECT':
                            count_reject = count_reject + 1
                    tmp_json['all_documents'] = count_all
                    tmp_json['documents_active'] = count_active
                    tmp_json['count_user'] = len(Counter(list_user2))
                    list_user2 = []
                    tmp_json['documents_reject'] = count_reject
                    tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                    tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                    tmp_json['timestamp_start'] = timestamp_start
                    tmp_json['timestamp_end'] = timestamp_end
                    countDoc_of_month = countDoc_of_month + count_all
                    count_Doc_of_month_active = count_Doc_of_month_active + count_active
                    count_Doc_of_month_reject = count_Doc_of_month_reject + count_reject
                    list_json.append(tmp_json)
                    tmp_json = {}

            tmp_json_1['documents_past_month'] = list_json

            tmp_json = {}
            list_json = []
            tmp_json['documents_all'] = countDoc_of_month
            tmp_json['documents_all_active'] = count_Doc_of_month_active
            tmp_json['documents_all_reject'] = count_Doc_of_month_reject
            tmp_json['countUser_of_month'] = len(Counter(list_count_user))
            list_json.append(tmp_json)

            tmp_json_1['documents_all_month'] = list_json
            
            return {'result':'OK','messageText':tmp_json_1}
  
        except Exception as e:
           return {'result':'ER','messageText':'notfound data' + str(e)}

    def select_data_for_addAttachment(self,sid):
        self.sid = sid
        try:
            query_tmp = view_document.query.filter(view_document.step_data_sid == self.sid).first()
            tmpjson = query_tmp.__dict__
            if '_sa_instance_state' in tmpjson:
                del tmpjson['_sa_instance_state']
            # print(query_tmp)
            return {'result':'OK','messageText':tmpjson}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            db.session.rollback()
            raise
            return {'result':'ER','messageText':str(ex)}
        
    def select_foldername_for_addAttachment(self,folder_id):
        self.folder_id = folder_id
        try:
            query_tmp = paper_lesstransactionfile.query.filter(paper_lesstransactionfile.folder_name == self.folder_id).first()
            tmpjson = query_tmp.__dict__
            if '_sa_instance_state' in tmpjson:
                del tmpjson['_sa_instance_state']
            return {'result':'OK','messageText':tmpjson} 

        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            db.session.rollback()
            raise
            return {'result':'ER','messageText':str(ex)}

    def select_dashboard_recipient_v5(self,emailUser,number_of_day):
        self.emailUser = emailUser
        sid_list = []
        sid_list_email = []
        json_Data = {}
        list_arr = []
        list_json = []

        now = datetime.datetime.now()
        flashback = timedelta(days=int(number_of_day))
        end_time = (now)
        start_time =  (now-flashback)

        # print ('start_time: ',start_time)
        # print ('end_time: ',end_time)

        try:
            tmp_list = []             
            count_rowDocument = 0
            count_rowDocument_StatusActive = 0
            count_rowDocument_StatusReject = 0
            count_rowDocument_StatusCancel = 0
            statusFile_count_approve = 0
            statusFile_count_pendding = 0
            statusFile_count_reject = 0
            statusFile_count_wait = 0
            list_temp_query = []
            tmp_sid_code_list = []
            query_temp = db.session.query(paper_lesssender, paper_lessdocument,paper_lessdatastep)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.contains(self.emailUser))\
                .filter(paper_lesssender.send_time <= end_time).filter(paper_lesssender.send_time >= start_time)\
                .order_by(desc(paper_lesssender.send_time))\
                .all()            
           
            count_rowDocument_StatusActive = db.session.query(paper_lesssender, paper_lessdocument,paper_lessdatastep)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.contains(self.emailUser))\
                .filter(paper_lesssender.send_time <= end_time).filter(paper_lesssender.send_time >= start_time)\
                .order_by(desc(paper_lesssender.send_time))\
                .count()
            count_rowDocument_StatusReject = db.session.query(paper_lesssender, paper_lessdocument,paper_lessdatastep)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='REJECT').filter(paper_lesssender.recipient_email.contains(self.emailUser))\
                .filter(paper_lesssender.send_time <= end_time).filter(paper_lesssender.send_time >= start_time)\
                .order_by(desc(paper_lesssender.send_time))\
                .count()
            count_rowDocument_StatusCancel = db.session.query(paper_lesssender, paper_lessdocument,paper_lessdatastep)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='CANCEL').filter(paper_lesssender.recipient_email.contains(self.emailUser))\
                .filter(paper_lesssender.send_time <= end_time).filter(paper_lesssender.send_time >= start_time)\
                .order_by(desc(paper_lesssender.send_time))\
                .count()
            for u in range(len(query_temp)):
                for z in range(len(query_temp[u])):
                    if z == 0:
                        tmp_dict_json = query_temp[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            del tmp_dict_json['_sa_instance_state']
                        tmp_sicode = tmp_dict_json['step_data_sid']
                        tmp_sid_code_list.append(tmp_sicode)
                        tmp_send_time = tmp_dict_json['send_time']
                        tmp_document_id = tmp_dict_json['doc_id']
                        tmp_tracking_id = tmp_dict_json['tracking_id']
                        tmp_sender_name = tmp_dict_json['sender_name']
                        tmp_sender_email = tmp_dict_json['sender_email']
                        tmp_file_name = tmp_dict_json['file_name']
                    if z == 1:
                        tmp_dict_json = query_temp[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            del tmp_dict_json['_sa_instance_state']
                        tmp_sign_page_options = tmp_dict_json['sign_page_options']
                        tmp_document_type = tmp_dict_json['documentType']
                        # print(tmp_dict_json['options_page'])
                        if tmp_dict_json['options_page'] != None:
                            tmp_options_page = [eval(tmp_dict_json['options_page'])]
                        else:
                            tmp_options_page = []
                        if tmp_dict_json['documentJson'] != None:
                            documentJson_result = eval(tmp_dict_json['documentJson'])
                            documentName = documentJson_result['document_name']
                            documentType = documentJson_result['document_type']
                        else:
                            documentName = None
                            documentType = None
                        if tmp_dict_json['urgent_type'] != None:
                            documentUrgentType = tmp_dict_json['urgent_type']
                            if documentUrgentType == 'I':
                                documentUrgentString = 'ด่วนมาก'
                            elif documentUrgentType == 'U':
                                documentUrgentString = 'ด่วน'
                            elif documentUrgentType == 'M':
                                documentUrgentString = 'ปกติ'
                    if z == 2:
                        tmp_dict_json = query_temp[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            del tmp_dict_json['_sa_instance_state']
                        jsonData_eval = eval(tmp_dict_json['data_json'])
                        eval_biz_info = eval(str(tmp_dict_json['biz_info']))
                        if eval_biz_info == None or eval_biz_info == '' or eval_biz_info == 'None':
                            tmp_biz_info = None
                        elif eval_biz_info != None or eval_biz_info != '' or eval_biz_info != 'None':
                            # print ('eval_tmp_dict: ',eval_biz_info)
                            tmp_biz_info = None
                            if 'dept_name' in eval_biz_info:
                                # print ('eval_tmp_dict_dept_name: ',eval_biz_info['dept_name'])
                                tmp_biz_info = {
                                    'role_name' : eval_biz_info['role_name'],
                                    'dept_name' : eval_biz_info['dept_name'],
                                    'role_level' : eval_biz_info['role_level']               
                                }
                                
                            elif 'dept_name' not in eval_biz_info:
                                tmp_biz_info = {
                                    'role_name' : eval_biz_info['role_name'],
                                    'dept_name' : [],
                                    'role_level' : eval_biz_info['role_level']               
                                }
                        arr_step_info = []
                        if 'step_num' in jsonData_eval:
                            step_status = ''
                            step_before = ''
                            res_status_file = 'Y'
                            arr_step_totle = []
                            json_data_info = jsonData_eval
                            if 'step_detail' in json_data_info:
                                for s in range(len(json_data_info['step_detail'])):
                                    json_info_step2 = {}
                                    for u in range(len(json_data_info['step_detail'][s]['activity_code'])):
                                        oneMail = str(json_data_info['step_detail'][s]['one_email']).replace(' ','').lower()
                                        if str(oneMail).replace(' ','').lower() == self.emailUser:
                                            if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
                                                if step_before == '':
                                                    try:
                                                        if json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Complete':
                                                            step_before = 'Complete'
                                                        elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Approve':
                                                            step_before = 'Complete'
                                                        elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Reject':
                                                            step_before = 'Reject'
                                                    except Exception as e:
                                                        step_before = ''
                                                if step_before != 'Reject':
                                                    if json_data_info['step_detail'][s]['activity_status'][u] == 'Complete':
                                                        step_status = 'Complete'
                                                    elif json_data_info['step_detail'][s]['activity_status'][u] == 'Approve':
                                                        step_status = 'Complete'
                                                    elif json_data_info['step_detail'][s]['activity_status'][u] == 'Reject':
                                                        step_status = 'Reject'
                                                    else:
                                                        try:
                                                            step_status  = 'Incomplete'
                                                        except Exception as ex:
                                                            step_status = 'Incomplete'
                                                arr_step_info.append(step_status)
                                                arr_step_info.append(step_before)
                            if 'Reject' in arr_step_info:
                                res_status_file = 'R'
                                res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                            elif 'Complete' in arr_step_info:
                                res_status_file = 'Y'
                                res_status_file_string = 'อนุมัติแล้ว'
                            elif 'Waitting' in arr_step_info:
                                res_status_file = 'W'
                                res_status_file_string = 'รออนุมัติ'
                            elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                                res_status_file = 'W'
                                res_status_file_string = 'รออนุมัติ'
                            else:
                                res_status_file_string = 'อนุมัติแล้ว'
                            if res_status_file == 'W':
                                statusFile_count_wait = statusFile_count_wait + 1
                            elif res_status_file == 'Y':
                                statusFile_count_approve = statusFile_count_approve + 1
                            elif res_status_file == 'R':
                                statusFile_count_reject = statusFile_count_reject + 1
                            else:
                                statusFile_count_pendding = statusFile_count_pendding + 1
                        else:
                            tmp_sum_email = []
                            step_status = ''
                            res_status_file = 'Y'
                            step_before = ''
                            step_list_before = []
                            step_list_ = []
                            step_list_next = []
                            arr_step_totle = []
                            step_me = ''
                            step_sum_status = []
                            sum_status_step_list = []
                            list_check_step = []
                            step_list_data = []
                            max_step = (len(jsonData_eval))
                            step_infomation = jsonData_eval
                            sum_status_step = []
                            tmp_status_sum = []
                            arr_email_list = []
                            email_step_sum = []
                            for i in range(len(step_infomation)):
                                list_check_step = []
                                json_step_info_2 = {}
                                step_list_data = []
                                step_status = []
                                step_email = []
                                step_ = step_infomation[i]
                                step_num = step_infomation[i]['step_num']
                                json_step_info_2['step_status'] = ''
                                tmp_step_detail = step_['step_detail']
                                for u in range(len(tmp_step_detail)):
                                    tmp_arr_step_detail = tmp_step_detail[u]
                                    tmp_status = tmp_arr_step_detail['activity_status']
                                    tmp_code = tmp_arr_step_detail['activity_code']
                                    tmp_email = tmp_arr_step_detail['one_email']
                                    for s in range(len(tmp_code)):
                                        if tmp_code[s] == 'A03':
                                            step_status.append(tmp_status[s])
                                            step_email.append(tmp_email)
                                            tmp_sum_email.append(tmp_email)
                                email_step_sum.append(step_email)
                                if 'Reject' in step_status:
                                    tmp_status_sum.append('Reject')
                                elif 'Approve' in step_status:
                                    tmp_status_sum.append('Complete')
                                elif 'Complete' in step_status:
                                    tmp_status_sum.append('Complete')
                                elif 'Incomplete' in step_status:
                                    tmp_status_sum.append('Incomplete')
                                elif 'Pending' in step_status:
                                    tmp_status_sum.append('Incomplete')
                                else:
                                    tmp_status_sum.append('Complete')
                            count_email = tmp_sum_email.count(self.emailUser)
                            for zzi in range(len(step_infomation)):
                                list_check_step = []
                                json_step_info_2 = {}
                                step_list_data = []
                                step_status = []
                                step_ = step_infomation[zzi]
                                step_num = step_infomation[zzi]['step_num']
                                json_step_info_2['step_status'] = ''
                                tmp_step_detail = step_['step_detail']
                                
                                for zi in range(len(tmp_step_detail)):
                                    tmp_arr_step_detail_2 = tmp_step_detail[zi]
                                    oneMail = str(tmp_arr_step_detail_2['one_email']).replace(' ','').lower()            
                                    tmp_step_me = int(step_num) - 1
                                    step_num_int2 = int(step_num)
                                    # if len(arr_step_info) != 0:
                                    #     break
                                    # if tmp_sicode == '77b2f80d-0dcd-440c-a627-8392c0b01a10':
                                    #     print(step_num_int2)
                                    #     print(len(tmp_status_sum) , tmp_step_me)
                                    #     print(tmp_status_sum)
                                    #     print(oneMail, oneMail == self.emailUser , tmp_status_sum[tmp_step_me] == 'Incomplete',arr_step_info , tmp_status_sum[tmp_step_me])
                                    if 'Reject' in tmp_status_sum:
                                        arr_step_info.append('Reject')
                                    elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Incomplete':                                        
                                        if self.emailUser not in arr_email_list:
                                            index_step_me = tmp_step_me
                                            if index_step_me != 0:
                                                while index_step_me > 0:
                                                    if len(arr_step_info) == 0:
                                                        index_step_me = index_step_me - 1
                                                        if tmp_status_sum[index_step_me] == 'Incomplete':
                                                            arr_step_info.append('Incomplete')
                                                        else:
                                                            arr_step_info.append('Wait')
                                                        arr_email_list.append(self.emailUser)
                                                    else:
                                                        index_step_me = index_step_me - 1
                                                        continue
                                            else:
                                                arr_step_info.append('Wait')                                            
                                    elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Complete':                                        
                                        if self.emailUser not in arr_email_list:
                                            if count_email == 1:
                                                for nz in range(step_num_int2,len(tmp_status_sum),1):
                                                    if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                        arr_step_info.append('Wait')
                                                    elif self.emailUser not in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                        arr_step_info.append('Progress')
                                                arr_email_list.append(self.emailUser)
                                            else:                                                
                                                for nz in range(step_num_int2,len(tmp_status_sum),1):
                                                    if self.emailUser not in arr_email_list:
                                                        if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Complete':
                                                            pass                                                    
                                                        if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                            arr_step_info.append('Wait')
                                                            arr_email_list.append(self.emailUser)
                                                        if self.emailUser not in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                            arr_step_info.append('Progress')
                                                            arr_email_list.append(self.emailUser)
                            if 'Reject' in arr_step_info:
                                res_status_file = 'R'
                                res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                            elif 'Progress' in arr_step_info and 'Wait' in arr_step_info:
                                res_status_file = 'Z'
                                res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                            elif 'Wait' in arr_step_info:
                                res_status_file = 'W'
                                res_status_file_string = 'รออนุมัติ'
                            elif 'Incomplete' in arr_step_info:
                                res_status_file = 'Z'
                                res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                            elif 'Progress' in arr_step_info:
                                res_status_file = 'N'
                                res_status_file_string = 'กำลังดำเนินการ'                    
                            elif arr_step_info.count('Incomplete') >= 2:
                                res_status_file = 'Z'
                                res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                            elif 'Incomplete' in arr_step_info and 'Complete' in arr_step_info:
                                res_status_file = 'N'
                                res_status_file_string = 'กำลังดำเนินการ'
                            else:
                                res_status_file_string = 'อนุมัติแล้ว'
                            if res_status_file == 'W':
                                statusFile_count_wait = statusFile_count_wait + 1
                            elif res_status_file == 'Y':
                                statusFile_count_approve = statusFile_count_approve + 1
                            elif res_status_file == 'R':
                                statusFile_count_reject = statusFile_count_reject + 1
                            else:
                                statusFile_count_pendding = statusFile_count_pendding + 1
                        
                    list_temp_query.append(tmp_dict_json)
                    dateTime_String = tmp_send_time
                    th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                    ts = int(time.time())
                    date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                    year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                    datetime_display = int(dateTime_String.timestamp())
                    date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                    yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                    time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                    old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                    if date_time_today == date_time_db:
                        date_display_show = time_show_db
                    else:
                        if year_today == yar_db:
                            date_display_show = convert_datetime_TH_2_display(datetime_display)
                        else:
                            date_display_show = old_year
                count_rowDocument = len(tmp_sid_code_list)
                json_Data['sum_Document']  = count_rowDocument
                json_Data['DocumentInfo'] = {
                    'Document_Active':count_rowDocument_StatusActive,
                    'Document_Reject':count_rowDocument_StatusReject,
                    'Document_Cancel':count_rowDocument_StatusCancel
                }  
                list_arr.append({
                    'sidCode':tmp_sicode,
                    'document_name':documentName,
                    'document_type':tmp_document_type,
                    'document_urgent':documentUrgentType,
                    'document_urgent_string':documentUrgentString,
                    'dateTime_String':str(dateTime_String).split('+')[0],
                    'dateTime_String_TH_1':th_dateTime_2,
                    'dateTime_display':date_display_show,
                    'document_id':tmp_document_id,
                    'stamp_all':tmp_sign_page_options,
                    'options_page_document':tmp_options_page,
                    # 'dateTime_String_TH_2':th_dateTime_2,
                    'date_String':str(dateTime_String).split(' ')[0],
                    'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                    'status_file_code':res_status_file,
                    'status_file_string':res_status_file_string,
                    'dateTime':int(dateTime_String.timestamp()),
                    'tracking_id':tmp_tracking_id,
                    'sender_name':tmp_sender_name,
                    'sender_email':tmp_sender_email,
                    'file_name':tmp_file_name,
                    'document_biz':tmp_biz_info
                })
            json_Data['Document_Status_Details']  = {
                'Incomplete_Pendding':statusFile_count_pendding,
                'Complete_Approve':statusFile_count_approve,
                'Reject':statusFile_count_reject,
                'Wait':statusFile_count_wait
            }
            list_arr = sorted(list_arr, key=lambda k: k['dateTime'], reverse=True)
            json_Data['Document_Details'] = list_arr
            return {'result':'OK','messageText':json_Data,'status_Code':200,'messageER':None}
            
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

    def select_dashboard_sender_v5(self,username,emailUser,number_of_day):
        self.username = username
        self.emailUser = emailUser
        sid_list = []
        sid_list_email = []
        json_Data = {}
        list_arr = []
        list_json = []
        lis_details = []
       
        now = datetime.datetime.now()
        flashback = timedelta(days=int(number_of_day))
        end_time = (now)
        start_time =  (now-flashback)
        # date_start_tmp = datetime.datetime.timestamp(start_time)
        # date_end_tmp = datetime.datetime.timestamp(end_time)

        # f_date_start_tmp = datetime.datetime.fromtimestamp(date_start_tmp)
        # f_date_end_tmp = datetime.datetime.fromtimestamp(date_end_tmp)

        # print ('start_time: ',start_time)
        # print ('end_time: ',end_time)
        try:
            tmp_list = []
             
            count_rowDocument = 0
            count_rowDocument_StatusActive = 0
            count_rowDocument_StatusReject = 0
            count_rowDocument_StatusCancel = 0
            statusFile_count_approve = 0
            statusFile_count_pendding = 0
            statusFile_count_reject = 0
            statusFile_count_wait = 0
            list_temp_query = []
            tmp_sid_code_list = []
            query_temp = db.session.query(paper_lesssender, paper_lessdocument,paper_lessdatastep)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                .filter(paper_lesssender.send_time <= end_time).filter(paper_lesssender.send_time >= start_time)\
                .order_by(desc(paper_lesssender.send_time))\
                .all()            
           
            count_rowDocument_StatusActive = db.session.query(paper_lesssender, paper_lessdocument,paper_lessdatastep)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                .filter(paper_lesssender.send_time <= end_time).filter(paper_lesssender.send_time >= start_time)\
                .order_by(desc(paper_lesssender.send_time))\
                .count()
            count_rowDocument_StatusReject = db.session.query(paper_lesssender, paper_lessdocument,paper_lessdatastep)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='REJECT').filter(paper_lesssender.send_user==self.username)\
                .filter(paper_lesssender.send_time <= end_time).filter(paper_lesssender.send_time >= start_time)\
                .order_by(desc(paper_lesssender.send_time))\
                .count()
            count_rowDocument_StatusCancel = db.session.query(paper_lesssender, paper_lessdocument,paper_lessdatastep)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='CANCEL').filter(paper_lesssender.send_user==self.username)\
                .filter(paper_lesssender.send_time <= end_time).filter(paper_lesssender.send_time >= start_time)\
                .order_by(desc(paper_lesssender.send_time))\
                .count()
            for u in range(len(query_temp)):
                for z in range(len(query_temp[u])):
                    if z == 0:
                        tmp_dict_json = query_temp[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            del tmp_dict_json['_sa_instance_state']
                        tmp_sicode = tmp_dict_json['step_data_sid']
                        tmp_sid_code_list.append(tmp_sicode)
                        tmp_send_time = tmp_dict_json['send_time']
                        tmp_document_id = tmp_dict_json['doc_id']
                        tmp_tracking_id = tmp_dict_json['tracking_id']
                        tmp_sender_name = tmp_dict_json['sender_name']
                        tmp_sender_email = tmp_dict_json['sender_email']
                        tmp_file_name = tmp_dict_json['file_name']
                    if z == 1:
                        tmp_dict_json = query_temp[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            del tmp_dict_json['_sa_instance_state']
                        tmp_sign_page_options = tmp_dict_json['sign_page_options']
                        tmp_document_type = tmp_dict_json['documentType']
                        # print(tmp_dict_json['options_page'])
                        if tmp_dict_json['options_page'] != None:
                            tmp_options_page = [eval(tmp_dict_json['options_page'])]
                        else:
                            tmp_options_page = []
                        if tmp_dict_json['documentJson'] != None:
                            documentJson_result = eval(tmp_dict_json['documentJson'])
                            documentName = documentJson_result['document_name']
                            documentType = documentJson_result['document_type']
                        else:
                            documentName = None
                            documentType = None
                        if tmp_dict_json['urgent_type'] != None:
                            documentUrgentType = tmp_dict_json['urgent_type']
                            if documentUrgentType == 'I':
                                documentUrgentString = 'ด่วนมาก'
                            elif documentUrgentType == 'U':
                                documentUrgentString = 'ด่วน'
                            elif documentUrgentType == 'M':
                                documentUrgentString = 'ปกติ'
                    if z == 2:
                        tmp_dict_json = query_temp[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            del tmp_dict_json['_sa_instance_state']
                        jsonData_eval = eval(tmp_dict_json['data_json'])
                        eval_biz_info = eval(str(tmp_dict_json['biz_info']))
                        if eval_biz_info == None or eval_biz_info == '' or eval_biz_info == 'None':
                            tmp_biz_info = None
                        elif eval_biz_info != None or eval_biz_info != '' or eval_biz_info != 'None':                           
                            tmp_biz_info = None
                            if 'dept_name' in eval_biz_info:            
                                tmp_biz_info = {
                                    'role_name' : eval_biz_info['role_name'],
                                    'dept_name' : eval_biz_info['dept_name'],
                                    'role_level' : eval_biz_info['role_level']               
                                }
                                
                            elif 'dept_name' not in eval_biz_info:
                                tmp_biz_info = {
                                    'role_name' : eval_biz_info['role_name'],
                                    'dept_name' : [],
                                    'role_level' : eval_biz_info['role_level']               
                                }
                        # print ('jsonData_eval: ',jsonData_eval)
                        arr_step_info = []
                        if 'step_num' in jsonData_eval:
                            step_status = ''
                            step_before = ''
                            res_status_file = 'Y'
                            arr_step_totle = []
                            json_data_info = jsonData_eval
                            if 'step_detail' in json_data_info:
                                for s in range(len(json_data_info['step_detail'])):
                                    json_info_step2 = {}
                                    for u in range(len(json_data_info['step_detail'][s]['activity_code'])):
                                        oneMail = json_data_info['step_detail'][s]['one_email']
                                        if str(oneMail).replace(' ','').lower() == self.emailUser:
                                            if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
                                                if step_before == '':
                                                    try:
                                                        if json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Complete':
                                                            step_before = 'Complete'
                                                        elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Approve':
                                                            step_before = 'Complete'
                                                        elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Reject':
                                                            step_before = 'Reject'
                                                    except Exception as e:
                                                        step_before = ''
                                                if step_before != 'Reject':
                                                    if json_data_info['step_detail'][s]['activity_status'][u] == 'Complete':
                                                        step_status = 'Complete'
                                                    elif json_data_info['step_detail'][s]['activity_status'][u] == 'Approve':
                                                        step_status = 'Complete'
                                                    elif json_data_info['step_detail'][s]['activity_status'][u] == 'Reject':
                                                        step_status = 'Reject'
                                                    else:
                                                        try:
                                                            step_status  = 'Incomplete'
                                                        except Exception as ex:
                                                            step_status = 'Incomplete'
                                                arr_step_info.append(step_status)
                                                arr_step_info.append(step_before)
                            if 'Reject' in arr_step_info:
                                res_status_file = 'R'
                                res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                            elif 'Complete' in arr_step_info:
                                res_status_file = 'Y'
                                res_status_file_string = 'อนุมัติแล้ว'
                            elif 'Waitting' in arr_step_info:
                                res_status_file = 'W'
                                res_status_file_string = 'รออนุมัติ'
                            elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                                res_status_file = 'W'
                                res_status_file_string = 'รออนุมัติ'
                            else:
                                res_status_file_string = 'อนุมัติแล้ว'
                            if res_status_file == 'W':
                                statusFile_count_wait = statusFile_count_wait + 1
                            elif res_status_file == 'Y':
                                statusFile_count_approve = statusFile_count_approve + 1
                            elif res_status_file == 'R':
                                statusFile_count_reject = statusFile_count_reject + 1
                            else:
                                statusFile_count_pendding = statusFile_count_pendding + 1
                        else:
                            step_status = ''
                            res_status_file = 'Y'
                            step_before = ''
                            step_list_before = []
                            step_list_ = []
                            step_list_next = []
                            arr_step_totle = []
                            step_me = ''
                            step_sum_status = []
                            sum_status_step_list = []
                            list_check_step = []
                            step_list_data = []
                            max_step = (len(jsonData_eval))
                            step_infomation = jsonData_eval
                            sum_status_step = []
                            tmp_status_sum = []
                            arr_email_list = []
                            email_step_sum = []
                            email_one_sum = []
                            for i in range(len(step_infomation)):
                                list_check_step = []
                                json_step_info_2 = {}
                                step_list_data = []
                                step_status = []
                                step_email = []
                                step_ = step_infomation[i]
                                step_num = step_infomation[i]['step_num']
                                json_step_info_2['step_status'] = ''
                                tmp_step_detail = step_['step_detail']
                                for u in range(len(tmp_step_detail)):
                                    tmp_arr_step_detail = tmp_step_detail[u]
                                    tmp_status = tmp_arr_step_detail['activity_status']
                                    tmp_code = tmp_arr_step_detail['activity_code']
                                    tmp_email = tmp_arr_step_detail['one_email']
                                    for s in range(len(tmp_code)):
                                        if tmp_code[s] == 'A03':
                                            step_status.append(tmp_status[s])
                                            step_email.append(tmp_email)
                                            email_one_sum.append(tmp_email)
                                    len_step_status = len(step_status)
                                email_step_sum.append(step_email)
                                if 'Reject' in step_status:
                                    tmp_status_sum.append('Reject')
                                elif 'Approve' in step_status:
                                    tmp_status_sum.append('Complete')
                                elif 'Complete' in step_status:
                                    tmp_status_sum.append('Complete')
                                elif 'Incomplete' in step_status:
                                    tmp_status_sum.append('Incomplete')
                                elif 'Pending' in step_status:
                                    tmp_status_sum.append('Incomplete')
                                else:
                                    tmp_status_sum.append('Complete')

                            if self.emailUser in email_one_sum:
                                for zzi in range(len(step_infomation)):
                                    list_check_step = []
                                    json_step_info_2 = {}
                                    step_list_data = []
                                    step_status = []
                                    step_ = step_infomation[zzi]
                                    step_num = step_infomation[zzi]['step_num']
                                    json_step_info_2['step_status'] = ''
                                    tmp_step_detail = step_['step_detail']
                                    for zi in range(len(tmp_step_detail)):
                                        tmp_arr_step_detail_2 = tmp_step_detail[zi]
                                        oneMail = tmp_arr_step_detail_2['one_email']
                                        tmp_step_me = int(step_num) - 1
                                        step_num_int2 = int(step_num)
                                        if 'Reject' in tmp_status_sum:
                                            arr_step_info.append('Reject')
                                        elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Incomplete':
                                            if self.emailUser not in arr_email_list:
                                                index_step_me = tmp_step_me
                                                if index_step_me != 0:
                                                    while index_step_me > 0:
                                                        if len(arr_step_info) == 0:
                                                            index_step_me = index_step_me - 1
                                                            if tmp_status_sum[index_step_me] == 'Incomplete':
                                                                arr_step_info.append('Incomplete')
                                                            else:
                                                                arr_step_info.append('Wait')
                                                            arr_email_list.append(self.emailUser)
                                                        else:
                                                            index_step_me = index_step_me - 1
                                                            continue
                                                else:
                                                    arr_step_info.append('Wait')
                                        elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Complete':
                                            # print('Complete')
                                            if self.emailUser not in arr_email_list:
                                                for nz in range(step_num_int2,len(tmp_status_sum),1):
                                                    if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                        arr_step_info.append('Incomplete')
                                                    elif self.emailUser not in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                        arr_step_info.append('Progress')
                                                arr_email_list.append(self.emailUser)
                            else:
                                for zzi in range(len(step_infomation)):
                                    list_check_step = []
                                    json_step_info_2 = {}
                                    step_list_data = []
                                    step_status = []
                                    step_ = step_infomation[zzi]
                                    step_num = step_infomation[zzi]['step_num']
                                    json_step_info_2['step_status'] = ''
                                    tmp_step_detail = step_['step_detail']
                                    for zi in range(len(tmp_step_detail)):
                                        tmp_arr_step_detail_2 = tmp_step_detail[zi]
                                        oneMail = tmp_arr_step_detail_2['one_email']
                                        tmp_step_me = int(step_num) - 1
                                        step_num_int2 = int(step_num)
                                        if 'Reject' in tmp_status_sum:
                                            arr_step_info.append('Reject')
                                        elif 'Incomplete' in tmp_status_sum:
                                            arr_step_info.append('Progress')
                            if 'Reject' in arr_step_info:
                                res_status_file = 'R'
                                res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                            elif 'Progress' in arr_step_info and 'Wait' in arr_step_info:
                                res_status_file = 'Z'
                                res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                            elif 'Wait' in arr_step_info:
                                res_status_file = 'W'
                                res_status_file_string = 'รออนุมัติ'
                            elif 'Incomplete' in arr_step_info:
                                res_status_file = 'Z'
                                res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                            elif 'Progress' in arr_step_info:
                                res_status_file = 'N'
                                if len(tmp_status_sum) != 0:
                                    for oi in range(len(jsonData_eval)):
                                        # print('jsonData_eval: ',jsonData_eval)
                                        # tmp_step_num_list_0 = tmp_status_sum[0]['step_num']
                                        # tmp_step_num_list = tmp_status_sum[oi]['step_num']
                                        # if tmp_step_num_list_0 == tmp_step_num_list:
                                        #     query_data = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(tmp_status_sum[oi]['email'])).all()
                                        #     try:
                                        #         data_json_name = eval(query_data[0].citizen_data)['first_name_th'] + ' ' + eval(query_data[0].citizen_data)['last_name_th']
                                        #     except Exception as e:
                                        #         data_json_name = tmp_status_sum[oi]['email']
                                        step_num_count = jsonData_eval[oi]['step_num']
                                        activity_a = jsonData_eval[oi]['step_detail'][0]['activity_code']
                                        # print ('activity_a: ',activity_a)
                                        # print ('step_num_count: ',step_num_count)
                                        details_msg = {}
                                        # print ('tmp_status_sum: ',tmp_status_sum)
                                        # details_msg['pending_by'] = tmp_status_sum[oi]['email']
                                        number_detail = (jsonData_eval[oi]['step_num'])
                                        title_remark = 'รอการอนุมัติ ลำดับที่ ' + str(jsonData_eval[oi]['step_num'])
                                        # string_remark_description += '\n-' + data_json_name + ''
                                        lis_details.append(details_msg)
                                        # print ('lis_details: ', lis_details)           
                                res_status_file_string = 'กำลังดำเนินการ' + '(' + str(number_detail) + ')'
                                    
                            elif arr_step_info.count('Incomplete') >= 2:
                                res_status_file = 'Z'
                                res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                            elif 'Incomplete' in arr_step_info and 'Complete' in arr_step_info:
                                res_status_file = 'N'
                                res_status_file_string = 'กำลังดำเนินการ'
                                
                                

                            else:
                                res_status_file_string = 'อนุมัติแล้ว'
                            if res_status_file == 'W':
                                statusFile_count_wait = statusFile_count_wait + 1
                            elif res_status_file == 'Y':
                                statusFile_count_approve = statusFile_count_approve + 1
                            elif res_status_file == 'R':
                                statusFile_count_reject = statusFile_count_reject + 1
                            else:
                                statusFile_count_pendding = statusFile_count_pendding + 1
                        
                    list_temp_query.append(tmp_dict_json)
                    dateTime_String = tmp_send_time
                    th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                    ts = int(time.time())
                    date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                    year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                    datetime_display = int(dateTime_String.timestamp())
                    date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                    yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                    time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                    old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                    if date_time_today == date_time_db:
                        date_display_show = time_show_db
                    else:
                        if year_today == yar_db:
                            date_display_show = convert_datetime_TH_2_display(datetime_display)
                        else:
                            date_display_show = old_year
                count_rowDocument = len(tmp_sid_code_list)
                json_Data['sum_Document']  = count_rowDocument
                json_Data['DocumentInfo'] = {
                    'Document_Active':count_rowDocument_StatusActive,
                    'Document_Reject':count_rowDocument_StatusReject,
                    'Document_Cancel':count_rowDocument_StatusCancel
                }  
                list_arr.append({
                    'sidCode':tmp_sicode,
                    'document_name':documentName,
                    'document_type':tmp_document_type,
                    'document_urgent':documentUrgentType,
                    'document_urgent_string':documentUrgentString,
                    'dateTime_String':str(dateTime_String).split('+')[0],
                    'dateTime_String_TH_1':th_dateTime_2,
                    'dateTime_display':date_display_show,
                    'document_id':tmp_document_id,
                    'stamp_all':tmp_sign_page_options,
                    'options_page_document':tmp_options_page,
                    'date_String':str(dateTime_String).split(' ')[0],
                    'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                    'status_file_code':res_status_file,
                    'status_file_string':res_status_file_string,
                    'dateTime':int(dateTime_String.timestamp()),
                    'tracking_id':tmp_tracking_id,
                    'sender_name':tmp_sender_name,
                    'sender_email':tmp_sender_email,
                    'file_name':tmp_file_name,
                    'document_biz':tmp_biz_info
                })
            json_Data['Document_Status_Details']  = {
                'Incomplete_Pendding':statusFile_count_pendding,
                'Complete_Approve':statusFile_count_approve,
                'Reject':statusFile_count_reject,
                'Wait':statusFile_count_wait
            }
            list_arr = sorted(list_arr, key=lambda k: k['dateTime'], reverse=True)
            json_Data['Document_Details'] = list_arr
            return {'result':'OK','messageText':json_Data,'status_Code':200,'messageER':None}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

    def select_document_type_forOthers_v1(self,sidcode,tax_id):
        self.sidcode = sidcode
        self.tax_id = tax_id
        tmp_id_card_num = None
        try:
            tq = db.session.query(\
                paper_lessdocument,
                paper_lessdatastep,
                paper_lesssender
            )\
            .join(paper_lesssender,paper_lesssender.step_data_sid==paper_lessdocument.step_id)\
            .join(paper_lessdatastep,paper_lessdatastep.sid==paper_lessdocument.step_id)\
            .filter(paper_lessdocument.step_id==self.sidcode)\
            .first()
            tmp_biz_info = None
            tmp_usersender = None
            # print(tq[1])
            for u in range(len(tq)):
                tmpjson = tq[u].__dict__
                if '_sa_instance_state' in tmpjson:
                    del tmpjson['_sa_instance_state']
                if u == 0:
                    # print(tmpjson)
                    tmp_document_type = tmpjson['documentType']
                if u == 1:
                    print(tmpjson['biz_info'])
                    tmp_biz_info = tmpjson['biz_info']
                if u == 2:
                    tmp_usersender = tmpjson['send_user']
                # print(tmp_usersender)
                if tmp_biz_info == 'None':
                    tmp_biz_info = None
            if tmp_biz_info != None:
                try:
                    tmp_biz_info = eval(tmp_biz_info)
                    tmp_id_card_num = tmp_biz_info['id_card_num']
                    # print(tmp_id_card_num)
                    if tmp_id_card_num in self.tax_id:
                        document_query = db.session.query(\
                            paper_lessdocument_detail
                        )\
                        .filter(paper_lessdocument_detail.documentType==tmp_document_type,paper_lessdocument_detail.biz_info.contains(tmp_id_card_num),paper_lessdocument_detail.documentStatus=='ACTIVE')\
                        .first()
                    else:
                        return {'result':'ER'}
                except Exception as e:
                    tax_id = None
                    tmp_id_card_num =None
            else:
                return {'result':'ER'}
                document_query = db.session.query(\
                    paper_lessdocument_detail
                )\
                .filter(paper_lessdocument_detail.documentUser==tmp_usersender,paper_lessdocument_detail.documentType==tmp_document_type,or_(paper_lessdocument_detail.biz_info==tmp_biz_info,paper_lessdocument_detail.biz_info==''),paper_lessdocument_detail.documentStatus=='ACTIVE')\
                .first()
            if document_query != None:
                tmp_document_query = document_query.__dict__
                del tmp_document_query['_sa_instance_state']
                tmp_service_other = tmp_document_query['other_service_permission']
            return {'result':'OK','messageText':tmp_service_other,'tax_id':tmp_id_card_num}
        except Exception as e:
            print(str(e))
            return {'result':'ER','messageText':str(e)}

    def select_log_tosavefile_json(self):
        try:
            date_start_tmp = datetime.datetime.fromtimestamp(1575133199)
            filetime = datetime.datetime.fromtimestamp(1575133199).strftime('%Y-%m-%d')
            file_name = 'backup_log_' + filetime + '.json'
            file_name_req = 'backup_reqlog_' + filetime + '.json'
            # print(tb_transactionlogrequest.query.filter(tb_transactionlogrequest.datetime <= date_start_tmp).count())
            
            # return ''
            list_append = []
            print(tb_transactionlog.query.filter(tb_transactionlog.datetime <= date_start_tmp).count())
            tmp_count_log = tb_transactionlogrequest.query.filter(tb_transactionlogrequest.datetime <= date_start_tmp).all()
            # tmp_count_log = tb_transactionlog.query.filter(tb_transactionlog.datetime <= date_start_tmp).all()
            for u in range(len(tmp_count_log)):
                tmp_log_json = tmp_count_log[u].__dict__
                del tmp_log_json['_sa_instance_state']
                tmp_log_json['id'] = str(tmp_log_json['id'])
                tmp_log_json['datetime'] = str(tmp_log_json['datetime'])
                list_append.append(tmp_log_json)
            # with open(file_name, 'w') as outfile:
            #     json.dump(list_append, outfile)
            with open(file_name_req, 'w') as outfile:
                json.dump(list_append, outfile)
                # print(tmp_log_json)
                
        except Exception as e:
            print(e)
            return {'result':'ER','messageText':str(e)}

    def select_tb_bizpaperAndbizprofile_register_business_v2(self):
        json_data = []
        list_data = []
        result_bizprofile = None
        data = []

        try:
            result_bizpaper = paper_lessbizPaperless.query.with_entities(paper_lessbizPaperless.tax_id).all()
            result_bizprofile = paper_lessbizProfile.query.with_entities(paper_lessbizProfile.bizTax).all()
            final_list = list(set(result_bizpaper) | set(result_bizprofile))

            for x in range(len(final_list)):
                tmp_json = {}
                final_list_split = str(final_list[x]).split('\'')[1]
                result_all_biz = paper_lessbizProfile.query.with_entities(paper_lessbizProfile.bizInfoJson).filter(paper_lessbizProfile.bizTax.contains(final_list_split)).all()
                eval_result_all_biz = eval(str(result_all_biz))
                if result_all_biz == []:
                    tmp_json['id'] = None
                    tmp_json['first_name_eng'] = None
                    tmp_json['first_name_th'] = None
                    tmp_json['id_card_num'] = final_list_split
                    tmp_json['id_card_type'] = None
                elif result_all_biz !=  []:
                    split_result_all_biz = (str(eval_result_all_biz[0]).split('"')[1])
                    eval_split_result_all_biz = eval(split_result_all_biz)
                    tmp_json['id'] = eval_split_result_all_biz['id']
                    tmp_json['first_name_eng'] = eval_split_result_all_biz['first_name_eng']
                    tmp_json['first_name_th'] = eval_split_result_all_biz['first_name_th']
                    tmp_json['id_card_num'] = eval_split_result_all_biz['id_card_num']
                    tmp_json['id_card_type'] = eval_split_result_all_biz['id_card_type']
                list_data.append(tmp_json)
                
            return {'result':'OK','messageText': list_data,'count':len(final_list)}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText': ex}

    def select_list_user_admin(self):
        query_result_select = None
        list_json = []
        try:
            query_result_select = tb_user_admin.query.order_by(desc(tb_user_admin.datetime_create)).filter(tb_user_admin.status == 'Active').all()
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText': ex}    

        try: 
            for u in range(len(query_result_select)):
                tmp_json = {}
                tmp_test = query_result_select[u].__dict__                
                del tmp_test['_sa_instance_state']
                tmp_test['datetime_create_string'] = str(tmp_test['datetime_create']).split('+')[0]
                tmp_test['datetime_update_string'] = str(tmp_test['datetime_update']).split('+')[0]
                list_json.append(tmp_test)
            count = (len(query_result_select))
            
            return {'result':'OK','messageText': list_json,'count':count}
        
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return jsonify({'result':'ER','messageText':None,'messageER':str(e),'status_Code':401}),401

    def select_folder_name_attm_file_v1(self,sid):
        self.sid = sid
        try:
            result_select = paper_lessdocument.query.filter(paper_lessdocument.step_id==self.sid).first()
            if result_select != None:
                tmp_json = result_select.__dict__
                tmp_attmp_folder = tmp_json['attempted_folder']
                # print(tmp_attmp_folder)
                if tmp_attmp_folder != None:
                    return {'result':'OK','messageText':True}
                else:
                    return {'result':'OK','messageText':False}
            else:
                return {'result':'ER','messageText':'data not found'}
        except Exception as e:
            return {'result':'ER','messageText':str(e)}

    def select_datajson_form_step_data_update_sender_v1(self,sidcode):
        self.sidcode = sidcode
        try:
            result_select = paper_lessdatastep.query.filter(paper_lessdatastep.sid==self.sidcode).first()
            # print(result_select)
            db.session.close()
            if result_select != None:
                if result_select.data_json != None:
                    jsonData_eval = eval(result_select.data_json)
                    tmp_jsonData_eval = []
                    arr_step_info = []
                    result_list_sum = []
                    if 'step_num' in jsonData_eval:
                        tmp_jsonData_eval.append(jsonData_eval)
                        jsonData_eval = tmp_jsonData_eval
                    if 'step_num' in jsonData_eval:
                        step_status = ''
                        step_before = ''
                        res_status_file = 'Y'
                        arr_step_totle = []
                        json_data_info = jsonData_eval
                        step_infomation = jsonData_eval
                        tmp_list_email = []
                        tmp_email_status = []
                        
                        tmp_status_sum = []
                        email_step_sum = []
                        tmp_list_status_document = []
                        step_num = json_data_info['step_num']
                        for i in range(len(step_infomation)):
                            list_check_step = []
                            json_step_info_2 = {}
                            step_list_data = []
                            step_status = []
                            step_email = []
                            # step_num = step_infomation[i]['step_num']
                            json_step_info_2['step_status'] = ''
                            tmp_step_detail = step_infomation['step_detail']
                            for u in range(len(tmp_step_detail)):
                                tmp_arr_step_detail = tmp_step_detail[u]
                                tmp_status = tmp_arr_step_detail['activity_status']
                                tmp_code = tmp_arr_step_detail['activity_code']
                                tmp_email = str(tmp_arr_step_detail['one_email']).replace(' ','').lower()
                                for s in range(len(tmp_code)):
                                    if tmp_code[s] == 'A03':
                                        step_status.append(tmp_status[s])
                                        step_email.append(tmp_email)
                            email_step_sum.append(step_email)
                            if 'Reject' in step_status:
                                tmp_status_sum.append('Reject')
                            elif 'Approve' in step_status:
                                tmp_status_sum.append('Complete')
                            elif 'Complete' in step_status:
                                tmp_status_sum.append('Complete')
                            elif 'Incomplete' in step_status:
                                tmp_status_sum.append('Incomplete')
                            elif 'Pending' in step_status:
                                tmp_status_sum.append('Incomplete')
                            else:
                                tmp_status_sum.append('Complete')

                        if 'step_detail' in json_data_info:
                            for s in range(len(json_data_info['step_detail'])):
                                tmp_json_step = {}
                                tmp_step_detail = json_data_info['step_detail']
                                tmp_arr_step_detail_2 = tmp_step_detail[s]
                                oneMail = str(json_data_info['step_detail'][s]['one_email']).replace(' ','').lower()
                                tmp_step_del_1 = int(step_num) - 1
                                step_num_int2 = int(step_num)
                                tmp_list_email.append(oneMail)
                                tmp_activity_code = tmp_arr_step_detail_2['activity_code']
                                tmp_activity_status = tmp_arr_step_detail_2['activity_status']
                                for hh in range(len(tmp_activity_code)):
                                    if tmp_activity_code[hh] == 'A03':
                                        tmp_get_status = tmp_activity_status[hh]
                                        if tmp_get_status == 'Reject':
                                            str_status_email = 'R'
                                        elif tmp_get_status == 'Incomplete' or tmp_get_status == 'Pending':
                                            str_status_email = 'N'
                                        elif tmp_get_status == 'Complete' or tmp_get_status == 'Approve':
                                            str_status_email = 'Y'
                                        tmp_email_status.append(str_status_email)
                                tmp_json_step['email'] = tmp_list_email
                                tmp_json_step['step_num'] = step_num
                                step_status_code = 'Y'
                                if tmp_status_sum[tmp_step_del_1] == 'Reject':
                                    step_status_code = 'R'
                                elif tmp_status_sum[tmp_step_del_1] == 'Incomplete':
                                    step_status_code = 'N'
                                elif tmp_status_sum[tmp_step_del_1] == 'Complete':
                                    step_status_code = 'Y'
                                if step_num == '1' and step_status_code == 'N':
                                    step_status_code = 'W'
                                
                                if step_status_code == 'W':
                                    step_now = int(step_num)
                                tmp_json_step['step_status_code'] = step_status_code
                                tmp_json_step['status'] = tmp_email_status
                                tmp_json_step['step_status'] = tmp_status_sum[tmp_step_del_1]
                            tmp_list_status_document.append(step_status_code)
                            result_list_sum.append(tmp_json_step)
                            if 'R' in tmp_list_status_document:
                                status_document = 'R'
                            elif 'N' in tmp_list_status_document:
                                status_document = 'N'
                            elif 'Y' in tmp_list_status_document:
                                status_document = 'Y'
                            else:
                                status_document = 'N'
                            result_to_user = {
                                'data_document':result_list_sum,
                                'status_document':status_document,
                                'max_step':1,
                                'step_now':step_now
                            }                                    
                    else:
                        step_now = 0
                        step_status = ''
                        res_status_file = 'Y'
                        step_before = ''
                        step_list_before = []
                        step_list_ = []
                        step_list_next = []
                        arr_step_totle = []
                        step_me = ''
                        step_sum_status = []
                        sum_status_step_list = []
                        list_check_step = []
                        step_list_data = []
                        max_step = (len(jsonData_eval))
                        step_infomation = jsonData_eval
                        sum_status_step = []
                        tmp_status_sum = []
                        arr_email_list = []
                        email_step_sum = []
                        tmp_list_status_document = []
                        status_document = ''
                        result_to_user = []
                        for i in range(len(step_infomation)):
                            list_check_step = []
                            json_step_info_2 = {}
                            step_list_data = []
                            step_status = []
                            step_email = []
                            step_ = step_infomation[i]
                            step_num = step_infomation[i]['step_num']
                            json_step_info_2['step_status'] = ''
                            tmp_step_detail = step_['step_detail']
                            for u in range(len(tmp_step_detail)):
                                tmp_arr_step_detail = tmp_step_detail[u]
                                tmp_status = tmp_arr_step_detail['activity_status']
                                tmp_code = tmp_arr_step_detail['activity_code']
                                tmp_email = str(tmp_arr_step_detail['one_email']).replace(' ','').lower()
                                for s in range(len(tmp_code)):
                                    if tmp_code[s] == 'A03' or tmp_code[s] == 'A04':
                                        step_status.append(tmp_status[s])
                                        step_email.append(tmp_email)
                            email_step_sum.append(step_email)
                            if 'Reject' in step_status:
                                tmp_status_sum.append('Reject')
                            elif 'Approve' in step_status:
                                tmp_status_sum.append('Complete')
                            elif 'Complete' in step_status:
                                tmp_status_sum.append('Complete')
                            elif 'Incomplete' in step_status:
                                tmp_status_sum.append('Incomplete')
                            elif 'Pending' in step_status:
                                tmp_status_sum.append('Incomplete')
                            else:
                                tmp_status_sum.append('Complete')
                        for zzi in range(len(step_infomation)):
                            tmp_list_step = []
                            tmp_json_step = {}
                            tmp_list_email = []
                            tmp_email_status = []
                            list_check_step = []
                            json_step_info_2 = {}
                            step_list_data = []
                            step_status = []
                            str_status_email = ''
                            step_ = step_infomation[zzi]
                            step_num = step_infomation[zzi]['step_num']
                            index_step_num = zzi
                            json_step_info_2['step_status'] = ''
                            tmp_step_detail = step_['step_detail']
                            for zi in range(len(tmp_step_detail)):
                                tmp_arr_step_detail_2 = tmp_step_detail[zi]
                                oneMail = str(tmp_arr_step_detail_2['one_email']).replace(' ','').lower()
                                tmp_step_del_1 = int(step_num) - 1
                                step_num_int2 = int(step_num)
                                tmp_list_email.append(oneMail)
                                tmp_activity_code = tmp_arr_step_detail_2['activity_code']
                                tmp_activity_status = tmp_arr_step_detail_2['activity_status']
                                for hh in range(len(tmp_activity_code)):
                                    if tmp_activity_code[hh] == 'A03':
                                        tmp_get_status = tmp_activity_status[hh]
                                        if tmp_get_status == 'Reject':
                                            str_status_email = 'R'
                                        elif tmp_get_status == 'Incomplete' or tmp_get_status == 'Pending':
                                            str_status_email = 'N'
                                        elif tmp_get_status == 'Complete' or tmp_get_status == 'Approve':
                                            str_status_email = 'Y'
                                        tmp_email_status.append(str_status_email)
                                    if tmp_activity_code[hh] == 'A04':
                                        tmp_get_status = tmp_activity_status[hh]
                                        if tmp_get_status == 'Reject':
                                            str_status_email = 'R'
                                        elif tmp_get_status == 'Incomplete' or tmp_get_status == 'Pending':
                                            str_status_email = 'N'
                                        elif tmp_get_status == 'Complete' or tmp_get_status == 'Approve':
                                            str_status_email = 'Y'
                                        tmp_email_status.append(str_status_email)
                                tmp_json_step['email'] = tmp_list_email
                                tmp_json_step['step_num'] = step_num
                                step_status_code = 'Y'
                                # print(tmp_status_sum)
                                if tmp_status_sum[tmp_step_del_1] == 'Reject':
                                    step_status_code = 'R'
                                elif tmp_status_sum[tmp_step_del_1] == 'Incomplete':
                                    step_status_code = 'N'
                                elif tmp_status_sum[tmp_step_del_1] == 'Complete':
                                    step_status_code = 'Y'
                                # if step_num == '1' and step_status_code == 'N':
                                #     step_status_code = 'W'
                                tmp_json_step['step_status_code'] = step_status_code
                                tmp_json_step['step_status'] = tmp_status_sum[tmp_step_del_1]
                                tmp_json_step['status'] = tmp_email_status
                                
                            tmp_list_status_document.append(step_status_code)
                            result_list_sum.append(tmp_json_step)
                        
                        if 'R' in tmp_list_status_document:
                            status_document = 'R'
                            step_now = max_step
                        elif 'N' in tmp_list_status_document:
                            status_document = 'N'
                        elif 'Y' in tmp_list_status_document:
                            status_document = 'Y'
                            step_now = max_step
                        else:
                            status_document = 'Y'
                        if status_document == 'N':
                            for uu in range(len(result_list_sum)):
                                tmp_step_num = result_list_sum[uu]['step_num']
                                tmp_email = result_list_sum[uu]['email']
                                tmp_step_status_code = result_list_sum[uu]['step_status_code']
                                tmp_index_step_next = int(tmp_step_num)
                                # step_now = int(tmp_step_num)
                                if tmp_step_status_code == 'Y':   
                                    temp_detail = result_list_sum   
                                    temp_detail[uu]['step_status_code'] = 'N'                 
                                    if temp_detail[tmp_index_step_next]['step_status_code'] != 'Y':
                                        if temp_detail[tmp_index_step_next]['step_status_code'] == 'N':
                                            temp_detail[tmp_index_step_next]['step_status_code'] = 'W'
                                        for z in range(tmp_index_step_next,len(temp_detail),1):
                                            tmp_step_num = temp_detail[z]['step_num']
                                            tmp_email = temp_detail[z]['email']
                                            tmp_step_status_code = temp_detail[z]['step_status_code']
                                            if tmp_step_status_code == 'N':
                                                temp_detail[z]['step_status_code'] = 'Z'
                                if tmp_step_num == '1' and tmp_step_status_code == 'N':
                                    step_now = int(tmp_step_num)
                                    result_list_sum[uu]['step_status_code'] = 'W'
                                    for z in range(tmp_index_step_next,len(result_list_sum),1):
                                        if tmp_step_status_code == 'N':
                                            result_list_sum[z]['step_status_code'] = 'Z'
                                if tmp_step_status_code == 'W':
                                    step_now = int(tmp_step_num)
                                # else:
                                #     step_now = int(tmp_step_num)
                                        
                                            # print(temp_detail[z])
                            # print(temp_detail)
                            # print(result_list_sum)
                        result_to_user = {
                            'data_document':result_list_sum,
                            'status_document':status_document,
                            'max_step':max_step,
                            'step_now':step_now
                        }
                    return {'result':'OK','messageText':result_to_user}
                else:
                    return {'result':'ER','messageText':'not found data json'}
            else:
                return {'result':'ER','messageText':'not found data sidcode'}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found data' + str(e)}
    
    def select_datajson_form_step_data_insert_sender_v1(self,sidcode):
        self.sidcode = sidcode
        try:
            result_select = paper_lessdatastep.query.filter(paper_lessdatastep.sid==self.sidcode).first()
            if result_select != None:
                if result_select.data_json != None:
                    jsonData_eval = eval(result_select.data_json)
                    arr_step_info = []
                    result_list_sum = []
                    if 'step_num' in jsonData_eval:
                        step_status = ''
                        step_before = ''
                        res_status_file = 'Y'
                        arr_step_totle = []
                        json_data_info = jsonData_eval
                        step_infomation = jsonData_eval
                        tmp_list_email = []
                        tmp_email_status = []
                        
                        tmp_status_sum = []
                        email_step_sum = []
                        tmp_list_status_document = []
                        step_num = json_data_info['step_num']
                        for i in range(len(step_infomation)):
                            list_check_step = []
                            json_step_info_2 = {}
                            step_list_data = []
                            step_status = []
                            step_email = []
                            # step_num = step_infomation[i]['step_num']
                            json_step_info_2['step_status'] = ''
                            tmp_step_detail = step_infomation['step_detail']
                            for u in range(len(tmp_step_detail)):
                                tmp_arr_step_detail = tmp_step_detail[u]
                                tmp_status = tmp_arr_step_detail['activity_status']
                                tmp_code = tmp_arr_step_detail['activity_code']
                                tmp_email = tmp_arr_step_detail['one_email']
                                for s in range(len(tmp_code)):
                                    if tmp_code[s] == 'A03':
                                        step_status.append(tmp_status[s])
                                        step_email.append(tmp_email)
                            email_step_sum.append(step_email)
                            if 'Reject' in step_status:
                                tmp_status_sum.append('Reject')
                            elif 'Approve' in step_status:
                                tmp_status_sum.append('Complete')
                            elif 'Complete' in step_status:
                                tmp_status_sum.append('Complete')
                            elif 'Incomplete' in step_status:
                                tmp_status_sum.append('Incomplete')
                            elif 'Pending' in step_status:
                                tmp_status_sum.append('Incomplete')
                            else:
                                tmp_status_sum.append('Complete')

                        if 'step_detail' in json_data_info:
                            for s in range(len(json_data_info['step_detail'])):
                                tmp_json_step = {}
                                tmp_step_detail = json_data_info['step_detail']
                                tmp_arr_step_detail_2 = tmp_step_detail[s]
                                oneMail = json_data_info['step_detail'][s]['one_email']
                                tmp_step_del_1 = int(step_num) - 1
                                step_num_int2 = int(step_num)
                                tmp_list_email.append(oneMail)
                                tmp_activity_code = tmp_arr_step_detail_2['activity_code']
                                tmp_activity_status = tmp_arr_step_detail_2['activity_status']
                                for hh in range(len(tmp_activity_code)):
                                    if tmp_activity_code[hh] == 'A03':
                                        tmp_get_status = tmp_activity_status[hh]
                                        if tmp_get_status == 'Reject':
                                            str_status_email = 'R'
                                        elif tmp_get_status == 'Incomplete' or tmp_get_status == 'Pending':
                                            str_status_email = 'N'
                                        elif tmp_get_status == 'Complete' or tmp_get_status == 'Approve':
                                            str_status_email = 'Y'
                                        tmp_email_status.append(str_status_email)
                                tmp_json_step['email'] = tmp_list_email
                                tmp_json_step['step_num'] = step_num
                                step_status_code = 'Y'
                                if tmp_status_sum[tmp_step_del_1] == 'Reject':
                                    step_status_code = 'R'
                                elif tmp_status_sum[tmp_step_del_1] == 'Incomplete':
                                    step_status_code = 'N'
                                elif tmp_status_sum[tmp_step_del_1] == 'Complete':
                                    step_status_code = 'Y'
                                if step_num == '1' and step_status_code == 'N':
                                    step_status_code = 'W'
                                tmp_json_step['step_status_code'] = step_status_code
                                tmp_json_step['status'] = tmp_email_status
                                tmp_json_step['step_status'] = tmp_status_sum[tmp_step_del_1]
                            tmp_list_status_document.append(step_status_code)
                            result_list_sum.append(tmp_json_step)
                            if 'R' in tmp_list_status_document:
                                status_document = 'R'
                            elif 'N' in tmp_list_status_document:
                                status_document = 'N'
                            elif 'Y' in tmp_list_status_document:
                                status_document = 'Y'
                            else:
                                status_document = 'Y'
                            result_to_user = {
                                'data_document':result_list_sum,
                                'status_document':status_document
                            }                                    
                    else:
                        step_status = ''
                        res_status_file = 'Y'
                        step_before = ''
                        step_list_before = []
                        step_list_ = []
                        step_list_next = []
                        arr_step_totle = []
                        step_me = ''
                        step_sum_status = []
                        sum_status_step_list = []
                        list_check_step = []
                        step_list_data = []
                        max_step = (len(jsonData_eval))
                        step_infomation = jsonData_eval
                        sum_status_step = []
                        tmp_status_sum = []
                        arr_email_list = []
                        email_step_sum = []
                        tmp_list_status_document = []
                        status_document = ''
                        result_to_user = []
                        for i in range(len(step_infomation)):
                            list_check_step = []
                            json_step_info_2 = {}
                            step_list_data = []
                            step_status = []
                            step_email = []
                            step_ = step_infomation[i]
                            step_num = step_infomation[i]['step_num']
                            json_step_info_2['step_status'] = ''
                            tmp_step_detail = step_['step_detail']
                            for u in range(len(tmp_step_detail)):
                                tmp_arr_step_detail = tmp_step_detail[u]
                                tmp_status = tmp_arr_step_detail['activity_status']
                                tmp_code = tmp_arr_step_detail['activity_code']
                                tmp_email = tmp_arr_step_detail['one_email']
                                for s in range(len(tmp_code)):
                                    if tmp_code[s] == 'A03':
                                        step_status.append(tmp_status[s])
                                        step_email.append(tmp_email)
                            email_step_sum.append(step_email)
                            if 'Reject' in step_status:
                                tmp_status_sum.append('Reject')
                            elif 'Approve' in step_status:
                                tmp_status_sum.append('Complete')
                            elif 'Complete' in step_status:
                                tmp_status_sum.append('Complete')
                            elif 'Incomplete' in step_status:
                                tmp_status_sum.append('Incomplete')
                            elif 'Pending' in step_status:
                                tmp_status_sum.append('Incomplete')
                            else:
                                tmp_status_sum.append('Complete')

                        for zzi in range(len(step_infomation)):
                            tmp_list_step = []
                            tmp_json_step = {}
                            tmp_list_email = []
                            tmp_email_status = []
                            list_check_step = []
                            json_step_info_2 = {}
                            step_list_data = []
                            step_status = []
                            str_status_email = ''
                            step_ = step_infomation[zzi]
                            step_num = step_infomation[zzi]['step_num']
                            json_step_info_2['step_status'] = ''
                            tmp_step_detail = step_['step_detail']
                            for zi in range(len(tmp_step_detail)):
                                tmp_arr_step_detail_2 = tmp_step_detail[zi]
                                oneMail = tmp_arr_step_detail_2['one_email']
                                tmp_step_del_1 = int(step_num) - 1
                                step_num_int2 = int(step_num)
                                tmp_list_email.append(oneMail)
                                tmp_activity_code = tmp_arr_step_detail_2['activity_code']
                                tmp_activity_status = tmp_arr_step_detail_2['activity_status']
                                for hh in range(len(tmp_activity_code)):
                                    if tmp_activity_code[hh] == 'A03':
                                        tmp_get_status = tmp_activity_status[hh]
                                        if tmp_get_status == 'Reject':
                                            str_status_email = 'R'
                                        elif tmp_get_status == 'Incomplete' or tmp_get_status == 'Pending':
                                            str_status_email = 'N'
                                        elif tmp_get_status == 'Complete' or tmp_get_status == 'Approve':
                                            str_status_email = 'Y'
                                        tmp_email_status.append(str_status_email)
                                tmp_json_step['email'] = tmp_list_email
                                tmp_json_step['step_num'] = step_num
                                step_status_code = 'Y'
                                if tmp_status_sum[tmp_step_del_1] == 'Reject':
                                    step_status_code = 'R'
                                elif tmp_status_sum[tmp_step_del_1] == 'Incomplete':
                                    step_status_code = 'N'
                                elif tmp_status_sum[tmp_step_del_1] == 'Complete':
                                    step_status_code = 'Y'
                                if step_num == '1' and step_status_code == 'N':
                                    step_status_code = 'W'
                                tmp_json_step['step_status_code'] = step_status_code
                                tmp_json_step['status'] = tmp_email_status
                                tmp_json_step['step_status'] = tmp_status_sum[tmp_step_del_1]
                            tmp_list_status_document.append(step_status_code)
                            result_list_sum.append(tmp_json_step)                        
                        if 'R' in tmp_list_status_document:
                            status_document = 'R'
                        elif 'N' in tmp_list_status_document:
                            status_document = 'N'
                        elif 'Y' in tmp_list_status_document:
                            status_document = 'Y'
                        else:
                            status_document = 'Y'
                        
                        
                        result_to_user = {
                            'data_document':result_list_sum,
                            'status_document':status_document
                        }
                    return {'result':'OK','messageText':result_to_user}
                else:
                    return {'result':'ER','messageText':'not found data json'}
            else:
                return {'result':'ER','messageText':'not found data sidcode'}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found data' + str(e)}

    def select_user_id_from_email_chat_v1(self,email_user):
        self.email_user = email_user
        tmp_json = {}
        search_email = "%'{}'%".format(self.email_user)
        try:
            sql = '''
                SELECT
                    "tb_userProfile".p_userid AS "p_userid"
                FROM
                    "tb_userProfile" 
                WHERE
                    "tb_userProfile".p_emailthai = :tmpp_emailthai
                    OR "tb_userProfile".p_emailthai2 = :tmpp_emailthai
                    OR "tb_userProfile".p_emailthai3 = :tmpp_emailthai
                    OR "tb_userProfile".employee_email LIKE :search_email
            '''
            with slave.connect() as connection:
                result = connection.execute(text(sql),tmpp_emailthai=self.email_user,search_email=search_email)
            connection.close()
            resultQuery = [dict(row) for row in result]
            # query_Profile = paper_lessuserProfile.query.filter(paper_lessuserProfile.p_emailthai==self.email_user)
            # print(query_Profile)
            if len(resultQuery) > 0:
                tmp_json['user_id'] = resultQuery[0]['p_userid']
            else:
                tmp_json['user_id'] = None
            return {'result':'OK','messageText':tmp_json}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'notfound data' + str(e)}
        finally:
            connection.close()

    def select_data_for_chat_v1(self,sidcode):
        self.sidcode = sidcode
        tmp_json = {}
        try:
            query_tmp = paper_lesssender.query.filter(paper_lesssender.step_data_sid == self.sidcode).first()
            query_tmp_doc = paper_lessdocument.query.filter(paper_lessdocument.step_id == self.sidcode).first()
            if query_tmp != None:
                search_email = "%{}%".format(query_tmp.sender_email)
                sql = '''SELECT p_userid FROM "tb_userProfile"  WHERE p_emailthai=:p_emailthai OR p_emailthai2=:p_emailthai OR p_emailthai3=:p_emailthai OR employee_email LIKE :search_email'''
                # query_Profile = paper_lessuserProfile.query.filter(or_(paper_lessuserProfile.p_emailthai==query_tmp.sender_email,paper_lessuserProfile.p_emailthai2==query_tmp.sender_email)).first()
                connection = slave.connect()
                result = connection.execute(text(sql),p_emailthai=query_tmp.sender_email,search_email=search_email)
                connection.close()
                data = [dict(row) for row in result]
                # print(data)
                # return ''
                query_Profile = data[0]
                tmp_json['user_id'] = query_Profile['p_userid']
                tmp_json['send_user'] = query_tmp.send_user
                tmp_json['send_time'] = str(query_tmp.send_time)
                try:
                    tmp_json['sender_name'] = eval(query_tmp.sender_name)['th']
                except Exception as e:
                    tmp_json['sender_name'] = query_tmp.sender_name
                try:
                    tmp_json['sender_name_eng'] = eval(query_tmp.sender_name)['eng']
                except Exception as e:
                    tmp_json['sender_name_eng'] = query_tmp.sender_name
                tmp_json['sender_email'] = query_tmp.sender_email
                tmp_json['tracking_id'] = query_tmp.tracking_id
                tmp_json['document_id'] = query_tmp.doc_id
                tmp_json['template_webhook'] = query_tmp.template_webhook
                tmp_json['email_center'] = query_tmp.email_center
                tmp_json['recipient_email'] = eval(query_tmp.recipient_email)
                tmp_json['typefile'] = query_tmp_doc.typefile
                tmp_json['documentType'] = query_tmp_doc.documentType
                tmp_json['digit_sign'] = query_tmp_doc.digit_sign
                tmp_json['options_page'] = eval(query_tmp_doc.options_page)
                tmp_json['body_text'] = ['เอกสารที่ต้องอนุมัติ','']
                if len(tmp_json['options_page']) != 0:
                    tmp_json['body_text'] = [str(tmp_json['options_page']['subject_text']),str(tmp_json['options_page']['body_text'])]
                tmp_json['button_text'] = ['Approve','Reject']
                tmp_json['task_btn_text'] = ['View Detail']
                tmp_json['bio_authen'] = 'false'
                tmp_json['filename'] = query_tmp.file_name
                tmp_json['fid'] = query_tmp.file_id
                return {'result':'OK','messageText':tmp_json}
            else:
                 return {'result':'ER','messageText':'data not found'}
        except Exception as e:
            print(str(e))
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'notfound data' + str(e)}
        finally:
            connection.close()
            db.session.close()

    def select_chat_group_v1(self,groupid):
        self.groupid = groupid
        list_json = []
        list_json2 = []
        arr_step_num = []
        arr_sum = []
        json_tmp = {}
        tmp_sidcode = ''
        try:
            tmp_groupid = uuid.UUID(self.groupid)
            from sqlalchemy import text
            with engine.connect() as connection:
                result = connection.execute(text('SELECT "id","sid_group","data_group","updatetime","email_group","status","create_by","update_by","step_group","pdf_org","pdf_sign","step_group_detail",\
                "group_data_json","group_other","email_view_group","hash_id","tracking_group","status_group","group_title","group_name","document_type","bizinfo","group_status","cover_page",\
                "calculate_fieds","maxstep","email_middle","html_data" FROM "tb_group_document" WHERE id=:val'),val=tmp_groupid)
                tmp_query = [dict(row) for row in result]
                tmpjson = tmp_query[0]
                tmp_status_group = tmpjson['status_group']
                tmp_sid_group = tmpjson['sid_group']
                if tmp_sid_group != None:
                    tmp_sid_group = eval(tmp_sid_group)
                    if len(tmp_sid_group) != 0:
                        tmp_sidcode = tmp_sid_group[0]
                if tmp_status_group != None:
                    tmp_status_group = eval(tmp_status_group)
                    for z in range(len(tmp_status_group)):
                        arremail = []
                        arrstatus = []
                        json_tmp = {}
                        tmp_email_one = tmp_status_group[z]['email_one']
                        tmp_status = tmp_status_group[z]['status']
                        arremail.append(tmp_email_one)
                        arrstatus.append(tmp_status)
                        json_tmp['emailone'] = arremail
                        json_tmp['status'] = arrstatus
                        
                        arr_sum.append(json_tmp)
                    return {'result':'OK','messageText':arr_sum,'sidcode':tmp_sidcode}
            # tmp_query = tb_group_document.query.filter(tb_group_document.id==tmp_groupid).first()
            # print(tmp_query)
            # if tmp_query != None:
            #     tmpjson = tmp_query.__dict__
            #     tmp_status_group = tmpjson['status_group']
            #     tmp_sid_group = tmpjson['sid_group']
            #     if tmp_sid_group != None:
            #         tmp_sid_group = eval(tmp_sid_group)
            #         if len(tmp_sid_group) != 0:
            #             tmp_sidcode = tmp_sid_group[0]
            #     if tmp_status_group != None:
            #         tmp_status_group = eval(tmp_status_group)
            #         for z in range(len(tmp_status_group)):
            #             arremail = []
            #             arrstatus = []
            #             json_tmp = {}
            #             tmp_email_one = tmp_status_group[z]['email_one']
            #             tmp_status = tmp_status_group[z]['status']
            #             arremail.append(tmp_email_one)
            #             arrstatus.append(tmp_status)
            #             json_tmp['emailone'] = arremail
            #             json_tmp['status'] = arrstatus
                        
            #             arr_sum.append(json_tmp)
            #         return {'result':'OK','messageText':arr_sum,'sidcode':tmp_sidcode}
            #     else:
            #         return {'result':'ER','messageText':' data not found'}
            # else:
            #     return {'result':'ER','messageText':' data not found'}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'notfound data' + str(e)}

    def select_chat_sender_v1(self,sidcode):
        self.sidcode = sidcode
        list_json = []
        list_json2 = []
        arr_step_num = []
        try:
            query_sid_chat_sender = paper_lessdatastep.query.filter(paper_lessdatastep.sid == self.sidcode).first()
            query_document = paper_lessdocument.query.filter(paper_lessdocument.step_id == self.sidcode).first()
            if query_sid_chat_sender != None:
                try:
                    tmp_json_data_eval = eval(query_sid_chat_sender.data_json)
                except Exception as e:
                    raise
                tmp_document_optionspage = query_document.options_page
                if tmp_document_optionspage != None:
                    tmp_document_optionspage = eval(tmp_document_optionspage)
                    if 'group_detail' in tmp_document_optionspage:
                        tmp_groupdetail = tmp_document_optionspage['group_detail']
                        if 'group_status' in tmp_groupdetail:
                            tmp_group_status = tmp_groupdetail['group_status']
                            if tmp_group_status == True:
                                if 'step_num' in tmp_groupdetail:
                                    tmp_step_num_group = tmp_groupdetail['step_num']
                                    for u in range(len(tmp_step_num_group)):
                                        arr_step_num.append(tmp_step_num_group[u])
                if 'step_num' in tmp_json_data_eval:
                    tmp_status_chat = False
                    tmp_status_step_sign = False
                    tmp_json = {}
                    list_email = []
                    list_status_ppl = []
                    list_status_Chat = []
                    list_status = []
                    list_chat_id = []
                    list_task_id = []
                    list_state = []
                    list_task_id_status = []
                    list_chat_id_status = []
                    tmp_step_detail = tmp_json_data_eval['step_detail']
                    tmp_step_num = tmp_json_data_eval['step_num']
                    tmp_json['step_num'] = tmp_step_num
                    if 'step_sign' in tmp_json_data_eval:
                        tmp_step_sign = tmp_json_data_eval['step_sign']
                        tmp_status_step_sign = tmp_step_sign['status']
                        if tmp_status_step_sign == True:
                            print(tmp_status_step_sign)                    
                    for i in range(len(tmp_step_detail)):
                        tmp_status_chat = False
                        tmp_state = {}
                        tmp_step_details_1 = tmp_step_detail[i]
                        if 'chat_id_status' in tmp_step_details_1:
                            tmp_chat_id_status = bool(tmp_step_details_1['chat_id_status'])
                            list_chat_id_status.append(tmp_chat_id_status)
                        if 'task_id_status' in tmp_step_details_1:
                            tmp_task_id_status = bool(tmp_step_details_1['task_id_status'])
                            list_task_id_status.append(tmp_task_id_status)
                        if 'chat_id' in tmp_step_details_1:
                            tmp_chat_id = tmp_step_details_1['chat_id']
                            list_chat_id.append(tmp_chat_id)
                        if 'task_id' in tmp_step_details_1:
                            tmp_chat_id = tmp_step_details_1['task_id']
                            list_task_id.append(tmp_chat_id)
                        if 'activity_code' in tmp_step_details_1:
                            tmp_activity_code = tmp_step_details_1['activity_code']
                            tmp_activity_status = tmp_step_details_1['activity_status']
                            for u in range(len(tmp_activity_code)):
                                if tmp_activity_code[u] == 'A02':
                                    list_status.append(tmp_activity_status[u])
                                elif tmp_activity_code[u] == 'A03':
                                    list_status_ppl.append(tmp_activity_status[u])
                            if 'A02' in tmp_activity_code:
                                tmp_status_chat = True
                                list_status_Chat.append(tmp_status_chat)
                            else:
                                list_status_Chat.append(tmp_status_chat)
                        tmp_one_email = tmp_step_details_1['one_email']
                        query_Profile = paper_lessuserProfile.query.filter(paper_lessuserProfile.p_emailthai==tmp_one_email).first()
                        if query_Profile != None:
                            if query_Profile.p_taskchat != None:
                                tmp_detail_taskchat = query_Profile.p_taskchat
                                tmp_todo = query_Profile.p_todo
                                tmp_doing = query_Profile.p_doing
                                tmp_done = query_Profile.p_done
                                tmp_state['todo'] = tmp_todo
                                tmp_state['doing'] = tmp_doing
                                tmp_state['done'] = tmp_done
                                list_state.append(tmp_state)
                            else:
                                tmp_state['todo'] = None
                                tmp_state['doing'] = None
                                tmp_state['done'] = None
                                list_state.append(tmp_state)
                        else:
                            tmp_state['todo'] = None
                            tmp_state['doing'] = None
                            tmp_state['done'] = None
                            list_state.append(tmp_state)
                        list_email.append(tmp_one_email)
                    tmp_json['email'] = list_email
                    tmp_json['status_Chat'] = list_status_Chat
                    tmp_json['status'] = list_status
                    tmp_json['status_ppl'] = list_status_ppl
                    tmp_json['chat_id'] = list_chat_id
                    tmp_json['chat_id_status'] = list_chat_id_status
                    tmp_json['chat_state'] = list_state
                    tmp_json['task_id_status'] = list_task_id_status
                    tmp_json['task_id'] = list_task_id
                    tmp_json['status_stepsign'] = tmp_status_step_sign 
                    tmp_json['step_num_group'] = arr_step_num 
                    list_json.append(tmp_json)
                else:
                    for u in range(len(tmp_json_data_eval)):
                        tmp_status_chat = False
                        tmp_status_step_sign = False
                        tmp_json = {}
                        list_email = []
                        list_status = []
                        list_status_ppl = []
                        list_status_Chat = []
                        list_chat_id = []
                        list_chat_id_status =[]
                        list_task_id_status = []
                        list_task_id = []
                        list_state = []
                        tmp_step = tmp_json_data_eval[u]
                        tmp_step_detail = tmp_step['step_detail']
                        tmp_step_num = tmp_step['step_num']
                        tmp_json['step_num'] = tmp_step_num
                        if 'step_sign' in tmp_step:
                            tmp_step_sign = tmp_step['step_sign']
                            tmp_status_step_sign = tmp_step_sign['status']
                            if tmp_status_step_sign == True:
                                print(tmp_status_step_sign)
                            # print(tmp_step['step_sign'])
                        for z in range(len(tmp_step_detail)):
                            tmp_status_chat = False
                            tmp_state = {}
                            tmp_step_details_1 = tmp_step_detail[z]
                            if 'chat_id_status' in tmp_step_details_1:
                                tmp_chat_id_status = bool(tmp_step_details_1['chat_id_status'])
                                list_chat_id_status.append(tmp_chat_id_status)
                            if 'task_id_status' in tmp_step_details_1:
                                tmp_task_id_status = bool(tmp_step_details_1['task_id_status'])
                                list_task_id_status.append(tmp_task_id_status)
                            if 'chat_id' in tmp_step_details_1:
                                tmp_chat_id = tmp_step_details_1['chat_id']
                                list_chat_id.append(tmp_chat_id)
                            if 'task_id' in tmp_step_details_1:
                                tmp_chat_id = tmp_step_details_1['task_id']
                                list_task_id.append(tmp_chat_id)
                            if 'activity_code' in tmp_step_details_1:
                                tmp_activity_code = tmp_step_details_1['activity_code']
                                tmp_activity_status = tmp_step_details_1['activity_status']
                                for u in range(len(tmp_activity_code)):
                                    if tmp_activity_code[u] == 'A02':
                                        list_status.append(tmp_activity_status[u])
                                    elif tmp_activity_code[u] == 'A03':
                                        list_status_ppl.append(tmp_activity_status[u])
                                if 'A02' in tmp_activity_code:
                                    tmp_status_chat = True
                                    list_status_Chat.append(tmp_status_chat)
                                else:
                                    list_status_Chat.append(tmp_status_chat)
                            tmp_one_email = tmp_step_details_1['one_email']
                            query_Profile = paper_lessuserProfile.query.filter(paper_lessuserProfile.p_emailthai==tmp_one_email).first()
                            if query_Profile != None:
                                if query_Profile.p_taskchat != None:
                                    tmp_detail_taskchat = query_Profile.p_taskchat
                                    tmp_todo = query_Profile.p_todo
                                    tmp_doing = query_Profile.p_doing
                                    tmp_done = query_Profile.p_done
                                    tmp_state['todo'] = tmp_todo
                                    tmp_state['doing'] = tmp_doing
                                    tmp_state['done'] = tmp_done
                                    list_state.append(tmp_state)
                                else:
                                    tmp_state['todo'] = None
                                    tmp_state['doing'] = None
                                    tmp_state['done'] = None
                                    list_state.append(tmp_state)
                            else:
                                tmp_state['todo'] = None
                                tmp_state['doing'] = None
                                tmp_state['done'] = None
                                list_state.append(tmp_state)
                            list_email.append(tmp_one_email)
                        tmp_json['email'] = list_email
                        tmp_json['status_Chat'] = list_status_Chat
                        tmp_json['status'] = list_status
                        tmp_json['status_ppl'] = list_status_ppl
                        tmp_json['chat_id'] = list_chat_id
                        tmp_json['chat_id_status'] = list_chat_id_status
                        tmp_json['chat_state'] = list_state
                        tmp_json['task_id_status'] = list_task_id_status
                        tmp_json['task_id'] = list_task_id
                        tmp_json['status_stepsign'] = tmp_status_step_sign 
                        tmp_json['step_num_group'] = arr_step_num 
                        list_json.append(tmp_json)

            return {'result':'OK','messageText':list_json}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'notfound data' + str(e)}

    def select_step_template(self,tax_id,documentStatus):
        self.tax_id = tax_id
        self.documentStatus = documentStatus
        query_document_detail = None
        list_json = []
        count = 0
        try:
            if self.tax_id != '' and self.documentStatus != '':
                if self.tax_id  == 'citizen':
                    query_document_detail = paper_lessstep.query.with_entities(
                        paper_lessstep.step_Code,
                        paper_lessstep.step_Data,
                        paper_lessstep.step_Max,
                        paper_lessstep.username,
                        paper_lessstep.email,
                        paper_lessstep.DateTime,
                        paper_lessstep.step_Description,
                        paper_lessstep.step_Name,
                        paper_lessstep.step_Upload,
                        paper_lessstep.qrCode_position,
                        paper_lessstep.documentDetails,
                        paper_lessstep.urgent_type,
                        paper_lessstep.webhook,
                        paper_lessstep.condition_temp,
                        paper_lessstep.email_center,
                        paper_lessstep.formula_temp,
                        paper_lessstep.digit_sign,
                        paper_lessstep.page_sign_options,
                        paper_lessstep.options_page,
                    # 20
                    ).filter(or_(paper_lessstep.template_biz == 'None',paper_lessstep.template_biz == None)).filter(paper_lessstep.status == self.documentStatus).order_by((paper_lessstep.status_Update).desc()).all()

                    if len(query_document_detail) == 0:
                        return {'result': 'OK', 'messageText': 'data not found','count':count,'status_Code':200}
                    print ('tax_id & documentStatus')
                    try:
                        if len(query_document_detail) != 0 :
                            for u in range(len(query_document_detail)):
                                # tmp_json['sid'] = query_document_detail[u].sid
                                tmp_json = {}
                                tmp_json['step_Code'] = (query_document_detail[u].step_Code)
                                tmp_json['data_step'] = eval(str(query_document_detail[u].step_Data))
                                tmp_json['step_Max'] = query_document_detail[u].step_Max
                                tmp_json['username'] = query_document_detail[u].username
                                tmp_json['email'] = query_document_detail[u].email
                                tmp_json['dateTime'] = query_document_detail[u].DateTime
                                tmp_json['dateTime_string'] = str(query_document_detail[u].DateTime).split('+')[0]
                                tmp_json['step_Description'] = (query_document_detail[u].step_Description)
                                tmp_json['step_Name'] = query_document_detail[u].step_Name
                                tmp_json['step_Upload'] = eval(str(query_document_detail[u].step_Upload))
                                # tmp_json['template_images'] = query_document_detail[u].template_images
                                # tmp_json['template_biz'] = eval(str(query_document_detail[u].template_biz))
                                tmp_json['qrCode_position'] = eval(query_document_detail[u].qrCode_position)
                                # tmp_json['status'] = query_document_detail[u].status
                                # tmp_json['status_Update'] = query_document_detail[u].status_Update
                                tmp_json['document_details'] = query_document_detail[u].documentDetails
                                tmp_json['document_details_string'] = str(query_document_detail[u].documentDetails)
                                tmp_json['urgent_code'] = query_document_detail[u].urgent_type
                                if tmp_json['urgent_code'] != None:
                                    documentUrgentType = tmp_json['urgent_code']
                                    if documentUrgentType == 'I':
                                        documentUrgentString_th = 'ด่วนมาก'
                                        documentUrgentString_eng = ' immediately'
                                    elif documentUrgentType == 'U':
                                        documentUrgentString_th = 'ด่วน'
                                        documentUrgentString_eng = 'Urgent'
                                    elif documentUrgentType == 'M':
                                        documentUrgentString_th = 'ปกติ'
                                        documentUrgentString_eng = 'Medium'
                                else:
                                    documentUrgentString_th = tmp_json['urgent_code']
                                    documentUrgentString_eng = tmp_json['urgent_code']
                                tmp_json['urgent_string_th'] = documentUrgentString_th
                                tmp_json['urgent_string_en'] = documentUrgentString_eng
                                tmp_json['condition_string'] = str(query_document_detail[u].condition_temp)
                                tmp_json['template_webhook'] = (query_document_detail[u].webhook)
                                tmp_json['email_center'] = query_document_detail[u].email_center
                                tmp_json['formula_temp'] = query_document_detail[u].formula_temp
                                tmp_json['formula_temp_string'] = str(query_document_detail[u].formula_temp)
                                tmp_json['digit_sign'] = query_document_detail[u].digit_sign
                                tmp_json['stamp_all'] = query_document_detail[u].page_sign_options
                                tmp_json['options_page'] = query_document_detail[u].options_page

                                count += 1
                                list_json.append(tmp_json)
                            print (count)
                            return {'result': 'OK', 'messageText': list_json,'count':count,'status_Code':200}
                    except Exception as e:
                        exc_type, exc_obj, exc_tb = sys.exc_info()
                        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                        print(exc_type, fname, exc_tb.tb_lineno)
                        return {'result':'ER','messageText':str(e),'status_Code':200},200

                
                ###################################
                else:
                    query_document_detail = paper_lessstep.query.with_entities(
                        paper_lessstep.step_Code,
                        paper_lessstep.step_Data,
                        paper_lessstep.step_Max,
                        paper_lessstep.username,
                        paper_lessstep.email,
                        paper_lessstep.DateTime,
                        paper_lessstep.step_Description,
                        paper_lessstep.step_Name,
                        paper_lessstep.step_Upload,
                        paper_lessstep.qrCode_position,
                        paper_lessstep.documentDetails,
                        paper_lessstep.urgent_type,
                        paper_lessstep.webhook,
                        paper_lessstep.condition_temp,
                        paper_lessstep.email_center,
                        paper_lessstep.formula_temp,
                        paper_lessstep.digit_sign,
                        paper_lessstep.page_sign_options,
                        paper_lessstep.options_page,
                    # 20
                    ).filter(paper_lessstep.template_biz.contains(self.tax_id)).filter(paper_lessstep.status == self.documentStatus).order_by((paper_lessstep.status_Update).desc()).all()

                    if len(query_document_detail) == 0:
                        return {'result': 'OK', 'messageText': 'data not found','count':count,'status_Code':200}
                    print ('tax_id & documentStatus')
                    try:
                        if len(query_document_detail) != 0 :
                            for u in range(len(query_document_detail)):
                                # tmp_json['sid'] = query_document_detail[u].sid
                                tmp_json = {}
                                tmp_json['step_Code'] = (query_document_detail[u].step_Code)
                                tmp_json['data_step'] = eval(str(query_document_detail[u].step_Data))
                                tmp_json['step_Max'] = query_document_detail[u].step_Max
                                tmp_json['username'] = query_document_detail[u].username
                                tmp_json['email'] = query_document_detail[u].email
                                tmp_json['dateTime'] = query_document_detail[u].DateTime
                                tmp_json['dateTime_string'] = str(query_document_detail[u].DateTime).split('+')[0]
                                tmp_json['step_Description'] = (query_document_detail[u].step_Description)
                                tmp_json['step_Name'] = query_document_detail[u].step_Name
                                tmp_json['step_Upload'] = eval(str(query_document_detail[u].step_Upload))
                                # tmp_json['template_images'] = query_document_detail[u].template_images
                                # tmp_json['template_biz'] = eval(str(query_document_detail[u].template_biz))
                                tmp_json['qrCode_position'] = eval(query_document_detail[u].qrCode_position)
                                # tmp_json['status'] = query_document_detail[u].status
                                # tmp_json['status_Update'] = query_document_detail[u].status_Update
                                tmp_json['document_details'] = query_document_detail[u].documentDetails
                                tmp_json['document_details_string'] = str(query_document_detail[u].documentDetails)
                                tmp_json['urgent_code'] = query_document_detail[u].urgent_type
                                if tmp_json['urgent_code'] != None:
                                    documentUrgentType = tmp_json['urgent_code']
                                    if documentUrgentType == 'I':
                                        documentUrgentString_th = 'ด่วนมาก'
                                        documentUrgentString_eng = ' immediately'
                                    elif documentUrgentType == 'U':
                                        documentUrgentString_th = 'ด่วน'
                                        documentUrgentString_eng = 'Urgent'
                                    elif documentUrgentType == 'M':
                                        documentUrgentString_th = 'ปกติ'
                                        documentUrgentString_eng = 'Medium'
                                else:
                                    documentUrgentString_th = tmp_json['urgent_code']
                                    documentUrgentString_eng = tmp_json['urgent_code']
                                tmp_json['urgent_string_th'] = documentUrgentString_th
                                tmp_json['urgent_string_en'] = documentUrgentString_eng
                                tmp_json['condition_string'] = str(query_document_detail[u].condition_temp)
                                tmp_json['template_webhook'] = (query_document_detail[u].webhook)
                                tmp_json['email_center'] = query_document_detail[u].email_center
                                tmp_json['formula_temp'] = query_document_detail[u].formula_temp
                                tmp_json['formula_temp_string'] = str(query_document_detail[u].formula_temp)
                                tmp_json['digit_sign'] = query_document_detail[u].digit_sign
                                tmp_json['stamp_all'] = query_document_detail[u].page_sign_options
                                tmp_json['options_page'] = query_document_detail[u].options_page

                                count += 1
                                list_json.append(tmp_json)
                            print (count)
                            return {'result': 'OK', 'messageText': list_json,'count':count,'status_Code':200}
                    except Exception as e:
                        exc_type, exc_obj, exc_tb = sys.exc_info()
                        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                        print(exc_type, fname, exc_tb.tb_lineno)
                        return {'result':'ER','messageText':str(e),'status_Code':200},200

            elif self.tax_id == '' and self.documentStatus != '':
                # query_document_detail = paper_lessstep.query.order_by(desc(paper_lessstep.status_Update)).filter(paper_lessstep.status == self.documentStatus).all()

                query_document_detail = paper_lessstep.query.with_entities(
                    paper_lessstep.step_Code,
                    paper_lessstep.step_Data,
                    paper_lessstep.step_Max,
                    paper_lessstep.username,
                    paper_lessstep.email,
                    paper_lessstep.DateTime,
                    paper_lessstep.step_Description,
                    paper_lessstep.step_Name,
                    paper_lessstep.step_Upload,
                    paper_lessstep.qrCode_position,
                    paper_lessstep.documentDetails,
                    paper_lessstep.urgent_type,
                    paper_lessstep.webhook,
                    paper_lessstep.condition_temp,
                    paper_lessstep.email_center,
                    paper_lessstep.formula_temp,
                    paper_lessstep.digit_sign,
                    paper_lessstep.page_sign_options,
                    paper_lessstep.options_page,
                # 20
                ).filter(paper_lessstep.status == self.documentStatus).order_by((paper_lessstep.status_Update).desc()).all()


                if len(query_document_detail) == 0:
                    return {'result': 'OK', 'messageText': 'data not found','count':count,'status_Code':200}

                print ('documentStatus')
                try:

                    if len(query_document_detail) != 0 :
                        for u in range(len(query_document_detail)):
                            # tmp_json['sid'] = query_document_detail[u].sid
                            tmp_json = {}
                            tmp_json['step_Code'] = (query_document_detail[u].step_Code)
                            tmp_json['data_step'] = eval(str(query_document_detail[u].step_Data))
                            tmp_json['step_Max'] = query_document_detail[u].step_Max
                            tmp_json['username'] = query_document_detail[u].username
                            tmp_json['email'] = query_document_detail[u].email
                            tmp_json['dateTime'] = query_document_detail[u].DateTime
                            tmp_json['dateTime_string'] = str(query_document_detail[u].DateTime).split('+')[0]
                            tmp_json['step_Description'] = (query_document_detail[u].step_Description)
                            tmp_json['step_Name'] = query_document_detail[u].step_Name
                            tmp_json['step_Upload'] = eval(str(query_document_detail[u].step_Upload))
                            # tmp_json['template_images'] = query_document_detail[u].template_images
                            # tmp_json['template_biz'] = eval(str(query_document_detail[u].template_biz))
                            tmp_json['qrCode_position'] = eval(query_document_detail[u].qrCode_position)
                            # tmp_json['status'] = query_document_detail[u].status
                            # tmp_json['status_Update'] = query_document_detail[u].status_Update
                            tmp_json['document_details'] = query_document_detail[u].documentDetails
                            tmp_json['document_details_string'] = str(query_document_detail[u].documentDetails)
                            tmp_json['urgent_code'] = query_document_detail[u].urgent_type
                            if tmp_json['urgent_code'] != None:
                                documentUrgentType = tmp_json['urgent_code']
                                if documentUrgentType == 'I':
                                    documentUrgentString_th = 'ด่วนมาก'
                                    documentUrgentString_eng = ' immediately'
                                elif documentUrgentType == 'U':
                                    documentUrgentString_th = 'ด่วน'
                                    documentUrgentString_eng = 'Urgent'
                                elif documentUrgentType == 'M':
                                    documentUrgentString_th = 'ปกติ'
                                    documentUrgentString_eng = 'Medium'
                            else:
                                documentUrgentString_th = tmp_json['urgent_code']
                                documentUrgentString_eng = tmp_json['urgent_code']
                            tmp_json['urgent_string_th'] = documentUrgentString_th
                            tmp_json['urgent_string_en'] = documentUrgentString_eng
                            tmp_json['condition_string'] = str(query_document_detail[u].condition_temp)
                            tmp_json['template_webhook'] = (query_document_detail[u].webhook)
                            tmp_json['email_center'] = query_document_detail[u].email_center
                            tmp_json['formula_temp'] = query_document_detail[u].formula_temp
                            tmp_json['formula_temp_string'] = str(query_document_detail[u].formula_temp)
                            tmp_json['digit_sign'] = query_document_detail[u].digit_sign
                            tmp_json['stamp_all'] = query_document_detail[u].page_sign_options
                            tmp_json['options_page'] = query_document_detail[u].options_page
                            count += 1
                            list_json.append(tmp_json)
                        print (count)
                        return {'result': 'OK', 'messageText': list_json,'count':count,'status_Code':200}
                except Exception as e:
                    exc_type, exc_obj, exc_tb = sys.exc_info()
                    fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                    print(exc_type, fname, exc_tb.tb_lineno)
                    return {'result':'ER','messageText':str(e),'status_Code':200},200
        except Exception as e:
                exc_type, exc_obj, exc_tb = sys.exc_info()
                fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                print(exc_type, fname, exc_tb.tb_lineno)
                db.session.rollback()
                raise
                return {'result': 'ER', 'messageText': str(e),'count':count,'status_Code':200}
        finally:
            db.session.close()

    def select_document_detail(self,tax_id,documentStatus):
        self.tax_id = tax_id
        self.documentStatus = documentStatus
        query_document_detail = None
        list_json = []
        count = 0
        try:
            if self.tax_id != '' and self.documentStatus != '':
                print('hello')
                query_document_detail = None
                if self.tax_id == 'citizen':
                    query_document_detail = paper_lessdocument_detail.query.order_by(desc(paper_lessdocument_detail.documentUpdate)).filter(or_(paper_lessdocument_detail.biz_info == 'None',paper_lessdocument_detail.biz_info == None)).filter(paper_lessdocument_detail.documentStatus == self.documentStatus).all()
                    print ('tax_id & documentStatus')
                    if len(query_document_detail) == 0:
                        return {'result': 'OK', 'messageText': 'data not found','count':count,'status_Code':200}
                    else:
                        try:
                            if len(query_document_detail) != 0 :
                                for u in range(len(query_document_detail)):
                                    tmp_json = {}
                                    tmp_json['documentType'] = query_document_detail[u].documentType
                                    tmp_json['documentJson'] = eval(query_document_detail[u].documentJson)
                                    tmp_json['documentUser'] = query_document_detail[u].documentUser
                                    tmp_json['documentUpdate'] = query_document_detail[u].documentUpdate
                                    tmp_json['documentUpdate_string'] = str(query_document_detail[u].documentUpdate).split('+')[0]
                                    # tmp_json['business_json'] = eval(query_document_detail[u].biz_info)
                                    # tmp_json['business_string'] = str(eval(query_document_detail[u].biz_info))
                                    tmp_json['business_json'] =  None
                                    tmp_json['business_string'] = None
                                    tmp_json['documentCode'] = query_document_detail[u].documentCode
                                    tmp_json['status'] = query_document_detail[u].documentStatus
                                    tmp_json['email'] = (query_document_detail[u].email)
                                    tmp_json['documentUser'] = (query_document_detail[u].documentUser)

                                    count += 1
                                    list_json.append(tmp_json)
                                print (count)
                                return {'result': 'OK', 'messageText': list_json,'count':count,'status_Code':200}
                        except Exception as e:
                            exc_type, exc_obj, exc_tb = sys.exc_info()
                            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                            print(exc_type, fname, exc_tb.tb_lineno)
                            return {'result':'ER','messageText':str(e),'status_Code':200},200
                else:
                    query_document_detail = paper_lessdocument_detail.query.order_by(desc(paper_lessdocument_detail.documentUpdate)).filter(paper_lessdocument_detail.biz_info.contains(self.tax_id)).filter(paper_lessdocument_detail.documentStatus == self.documentStatus).all()
                    print ('tax_id & documentStatus')
                    if len(query_document_detail) == 0:
                        return {'result': 'OK', 'messageText': 'data not found','count':count,'status_Code':200}
                    else:
                        try:
                            print ('11111')
                            if len(query_document_detail) != 0 :
                                for u in range(len(query_document_detail)):
                                    tmp_json = {}
                                    tmp_json['documentType'] = query_document_detail[u].documentType
                                    tmp_json['documentJson'] = eval(query_document_detail[u].documentJson)
                                    tmp_json['documentUser'] = query_document_detail[u].documentUser
                                    tmp_json['documentUpdate'] = query_document_detail[u].documentUpdate
                                    tmp_json['documentUpdate_string'] = str(query_document_detail[u].documentUpdate).split('+')[0]
                                    tmp_json['business_json'] = eval(query_document_detail[u].biz_info)
                                    tmp_json['business_string'] = str(eval(query_document_detail[u].biz_info))
                                    tmp_json['documentCode'] = query_document_detail[u].documentCode
                                    tmp_json['status'] = query_document_detail[u].documentStatus
                                    tmp_json['email'] = (query_document_detail[u].email)
                                    tmp_json['documentUser'] = (query_document_detail[u].documentUser)

                                # tmp_json['chat_bot'] = eval(str(query_document_detail[u].chat_bot))
                                # tmp_json['service_permission'] = query_document_detail[u].service_permission
                                # tmp_json['other_service_permission'] = eval(str(query_document_detail[u].other_service_permission))

                                    # tmp_json['biz_info'] = eval(query_document_detail[u].biz_info)
                                    # tmp_json['email'] = (query_document_detail[u].email)
                                    count += 1
                                    list_json.append(tmp_json)
                                print (count)
                                return {'result': 'OK', 'messageText': list_json,'count':count,'status_Code':200}
                        except Exception as e:
                            exc_type, exc_obj, exc_tb = sys.exc_info()
                            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                            print(exc_type, fname, exc_tb.tb_lineno)
                            return {'result':'ER','messageText':str(e),'status_Code':200},200
                
            elif self.tax_id == '' and self.documentStatus != '':
                query_document_detail = paper_lessdocument_detail.query.order_by(desc(paper_lessdocument_detail.documentUpdate)).filter(paper_lessdocument_detail.documentStatus == self.documentStatus).all()
                print ('documentStatus')
                if len(query_document_detail) == 0:
                    return {'result': 'OK', 'messageText': 'data not found','count':count,'status_Code':200}
                else:
                    try:
                        print ('2')
                        if len(query_document_detail) != 0 :
                            for u in range(len(query_document_detail)):
                                tmp_json = {}
                                tmp_json['documentType'] = query_document_detail[u].documentType
                                tmp_json['documentJson'] = eval(query_document_detail[u].documentJson)
                                tmp_json['documentUser'] = query_document_detail[u].documentUser
                                tmp_json['documentUpdate'] = query_document_detail[u].documentUpdate
                                tmp_json['documentUpdate_string'] = str(query_document_detail[u].documentUpdate).split('+')[0]
                                biz_info = query_document_detail[u].biz_info
                                if biz_info == None or biz_info == '':
                                    print('1')
                                    print ('biz_info: ',biz_info)
                                    tmp_json['business_json'] = (query_document_detail[u].biz_info)
                                elif biz_info != None:
                                    print('2')
                                    print ('biz_info: ',biz_info)
                                    tmp_json['business_json'] = eval(str(query_document_detail[u].biz_info))

                                # tmp_json['business_string'] = str(eval(query_document_detail[u].biz_info))
                                tmp_json['documentCode'] = query_document_detail[u].documentCode
                                tmp_json['status'] = query_document_detail[u].documentStatus
                                tmp_json['email'] = (query_document_detail[u].email)
                                tmp_json['documentUser'] = (query_document_detail[u].documentUser)
                                count += 1
                                list_json.append(tmp_json)
                            print (count)
                            return {'result': 'OK', 'messageText': list_json,'count':count,'status_Code':200}
                    except Exception as e:
                        exc_type, exc_obj, exc_tb = sys.exc_info()
                        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                        print(exc_type, fname, exc_tb.tb_lineno)
                        return {'result':'ER','messageText':str(e),'status_Code':200},200


        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            db.session.rollback()
            raise
            return {'result': 'ER', 'messageText': str(e),'count':count,'status_Code':200}
        finally:
            db.session.close()

    def select_chat_sender_v1_text(self,sidcode,document_id,lang):
        self.sidcode = sidcode
        self.document_id = document_id
        self.lang = lang
        list_json = []
        list_json2 = []
        list_check_step_num = []
        text_totle_chat = ''
        text_chat = ''
        print(lang)
        if self.lang == None:
            self.lang = 'th'
        if self.lang == 'th':
            title_chat = 'แจ้งเตือน Paperless' + '\n' + 'เลขที่เอกสาร ' + self.document_id
        elif self.lang == 'eng':
            title_chat = 'Notification Paperless' + '\n' + 'Document No. ' + self.document_id
        try:
            sql = ''' 
                SELECT
                    tb_step_data.data_json AS "data_json"
                FROM
                    tb_step_data 
                WHERE
                    tb_step_data.sid = :tmpsid
            '''
            connection = slave.connect()
            result = connection.execute(text(sql),tmpsid=self.sidcode)
            resultQuery = [dict(row) for row in result]
            if len(resultQuery) > 0:
                try:
                    tmp_json_data_eval = eval(resultQuery[0]['data_json'])
                except Exception as e:
                    raise
                # print(tmp_json_data_eval)
                if 'step_num' in tmp_json_data_eval:
                    tmp_status_chat = False
                    tmp_json = {}
                    list_email = []
                    list_status_ppl = []
                    list_status_Chat = []
                    list_status = []
                    list_chat_id = []
                    list_chat_id_status = []
                    tmp_step_detail = tmp_json_data_eval['step_detail']
                    tmp_step_num = tmp_json_data_eval['step_num']
                    tmp_json['step_num'] = tmp_step_num
                    for z in range(len(tmp_step_detail)):
                        tmp_step_details_1 = tmp_step_detail[z]
                        tmp_one_email = tmp_step_details_1['one_email']
                        tmp_account_name =   tmp_one_email                      
                        if tmp_one_email != '':
                            query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(tmp_one_email)).all()
                            if len(query_name_account) != 0:
                                try:
                                    tmp_account_name = eval(query_name_account[0].citizen_data)
                                    if self.lang == 'th':
                                        tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                    elif self.lang == 'eng':
                                        tmp_account_name = tmp_account_name['first_name_eng'] + ' ' + tmp_account_name['last_name_eng']
                                except Exception as e:
                                    tmp_account_name = tmp_one_email
                                    exc_type, exc_obj, exc_tb = sys.exc_info()
                                    fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                                    print(exc_type, fname, exc_tb.tb_lineno)
                        tmp_activity_code = tmp_step_details_1['activity_code']
                        tmp_activity_status = tmp_step_details_1['activity_status']
                        for u in range(len(tmp_activity_code)):
                            if tmp_activity_code[u] == 'A03':
                                status_ppl_temp = tmp_activity_status[u]
                                if status_ppl_temp == 'Complete' or status_ppl_temp == 'Approve':
                                    if self.lang == 'th':
                                        status_ppl_temp = 'อนุมัติแล้ว'
                                    elif self.lang == 'eng':
                                        status_ppl_temp = 'Approved'
                                elif status_ppl_temp == 'Incomplete' or status_ppl_temp == 'Pending':
                                    if self.lang == 'th':
                                        status_ppl_temp = 'ยังไม่อนุมัติ'
                                    elif self.lang == 'eng':
                                        status_ppl_temp = 'Not yet approved'
                                elif status_ppl_temp == 'Reject':
                                    if self.lang == 'th':
                                        status_ppl_temp = 'ปฏิเสธอนุมัติ'
                                    elif self.lang == 'eng':
                                        status_ppl_temp = 'Reject approval'
                                tmp_text_chat_email = '- ' + tmp_account_name + ' ' + status_ppl_temp
                        if str(tmp_step_num) not in list_check_step_num:
                            list_check_step_num.append(str(tmp_step_num))
                            if self.lang == 'th':
                                text_chat += 'ลำดับการอนุมัติที่ ' + str(tmp_step_num) + '\n' + tmp_text_chat_email + '\n' + ''
                            elif self.lang == 'eng':
                                text_chat += 'Order of approval ' + str(tmp_step_num) + '\n' + tmp_text_chat_email + '\n' + ''
                        else:
                            text_chat += tmp_text_chat_email + '\n'
                    text_totle_chat = (title_chat + '\n\n' + text_chat)
                else:
                    for u in range(len(tmp_json_data_eval)):
                        tmp_status_chat = False
                        tmp_json = {}
                        list_email = []
                        list_status = []
                        list_status_ppl = []
                        list_status_Chat = []
                        list_chat_id = []
                        list_chat_id_status =[]
                        tmp_step = tmp_json_data_eval[u]
                        tmp_text_chat_email = ''
                        tmp_step_detail = tmp_step['step_detail']
                        tmp_step_num = tmp_step['step_num']
                        tmp_json['step_num'] = tmp_step_num
                        for z in range(len(tmp_step_detail)):
                            tmp_step_details_1 = tmp_step_detail[z]
                            tmp_one_email = tmp_step_details_1['one_email']
                            tmp_account_name =   tmp_one_email
                            if tmp_one_email != '':
                                query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(tmp_one_email)).all()
                                if len(query_name_account) != 0:
                                    try:
                                        tmp_account_name = eval(query_name_account[0].citizen_data)
                                        if self.lang == 'th':
                                            tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                        elif self.lang == 'eng':
                                            tmp_account_name = tmp_account_name['first_name_eng'] + ' ' + tmp_account_name['last_name_eng']
                                    except Exception as e:
                                        tmp_account_name = tmp_one_email
                                        exc_type, exc_obj, exc_tb = sys.exc_info()
                                        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                                        print(exc_type, fname, exc_tb.tb_lineno)
                            tmp_activity_code = tmp_step_details_1['activity_code']
                            tmp_activity_status = tmp_step_details_1['activity_status']
                            for u in range(len(tmp_activity_code)):
                                if tmp_activity_code[u] == 'A03':
                                    status_ppl_temp = tmp_activity_status[u]
                                    if status_ppl_temp == 'Complete' or status_ppl_temp == 'Approve':
                                        if self.lang == 'th':
                                            status_ppl_temp = 'อนุมัติแล้ว'
                                        elif self.lang == 'eng':
                                            status_ppl_temp = 'Approved'
                                    elif status_ppl_temp == 'Incomplete' or status_ppl_temp == 'Pending':
                                        if self.lang == 'th':
                                            status_ppl_temp = 'ยังไม่อนุมัติ'
                                        elif self.lang == 'eng':
                                            status_ppl_temp = 'Not yet approved'
                                    elif status_ppl_temp == 'Reject':
                                        if self.lang == 'th':
                                            status_ppl_temp = 'ปฏิเสธอนุมัติ'
                                        elif self.lang == 'eng':
                                            status_ppl_temp = 'Reject approval'
                                    tmp_text_chat_email = '- ' + tmp_account_name + ' ' + status_ppl_temp
                            if str(tmp_step_num) not in list_check_step_num:
                                list_check_step_num.append(str(tmp_step_num))
                                if self.lang == 'th':
                                    text_chat += '\nลำดับการอนุมัติที่ ' + str(tmp_step_num) + '\n' + tmp_text_chat_email + '\n' + ''
                                elif self.lang == 'eng':
                                    text_chat += '\nOrder of approval ' + str(tmp_step_num) + '\n' + tmp_text_chat_email + '\n' + ''
                            else:
                                text_chat += tmp_text_chat_email + '\n'
                    text_totle_chat = (title_chat + '\n\n' + text_chat)


            return {'result':'OK','messageText':text_totle_chat}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'notfound data' + str(e)}
        finally:
            connection.close()

    def select_mail_sender_v1_text(self,sidcode,document_id):
        self.sidcode = sidcode
        self.document_id = document_id
        list_json = []
        list_json2 = []
        list_check_step_num = []
        text_totle_chat = ''
        text_chat = ''
        title_chat = ''
        # title_chat = 'แจ้งเตือน Paperless' + '\n' + 'เลขที่เอกสาร ' + self.document_id
        try:
            query_sid_chat_sender = paper_lessdatastep.query.filter(paper_lessdatastep.sid == self.sidcode).first()
            if query_sid_chat_sender != None:
                try:
                    tmp_json_data_eval = eval(query_sid_chat_sender.data_json)
                except Exception as e:
                    raise
                # print(tmp_json_data_eval)
                if 'step_num' in tmp_json_data_eval:
                    tmp_status_chat = False
                    tmp_json = {}
                    list_email = []
                    list_status_ppl = []
                    list_status_Chat = []
                    list_status = []
                    list_chat_id = []
                    list_chat_id_status = []
                    tmp_step_detail = tmp_json_data_eval['step_detail']
                    tmp_step_num = tmp_json_data_eval['step_num']
                    tmp_json['step_num'] = tmp_step_num
                    for z in range(len(tmp_step_detail)):
                        tmp_step_details_1 = tmp_step_detail[z]
                        tmp_one_email = tmp_step_details_1['one_email']
                        tmp_account_name =   tmp_one_email                      
                        if tmp_one_email != '':
                            query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(tmp_one_email)).all()
                            if len(query_name_account) != 0:
                                try:
                                    tmp_account_name = eval(query_name_account[0].citizen_data)
                                    tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                except Exception as e:
                                    tmp_account_name = tmp_one_email
                                    exc_type, exc_obj, exc_tb = sys.exc_info()
                                    fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                                    print(exc_type, fname, exc_tb.tb_lineno)
                        tmp_activity_code = tmp_step_details_1['activity_code']
                        tmp_activity_status = tmp_step_details_1['activity_status']
                        for u in range(len(tmp_activity_code)):
                            if tmp_activity_code[u] == 'A03':
                                status_ppl_temp = tmp_activity_status[u]
                                if status_ppl_temp == 'Complete' or status_ppl_temp == 'Approve':
                                    status_ppl_temp = 'อนุมัติแล้ว'
                                elif status_ppl_temp == 'Incomplete' or status_ppl_temp == 'Pending':
                                    status_ppl_temp = 'ยังไม่อนุมัติ'
                                elif status_ppl_temp == 'Reject':
                                    status_ppl_temp = 'ปฏิเสธอนุมัติ'
                                tmp_text_chat_email = '- ' + tmp_account_name + ' ' + status_ppl_temp
                        if str(tmp_step_num) not in list_check_step_num:
                            list_check_step_num.append(str(tmp_step_num))
                            text_chat += '<br>ลำดับการอนุมัติที่ ' + str(tmp_step_num) + '<br>' + tmp_text_chat_email + '<br>' + ''
                        else:
                            text_chat += tmp_text_chat_email + '<br>'
                    text_totle_chat = (title_chat + '<br><br>' + text_chat)
                else:
                    for u in range(len(tmp_json_data_eval)):
                        tmp_status_chat = False
                        tmp_json = {}
                        list_email = []
                        list_status = []
                        list_status_ppl = []
                        list_status_Chat = []
                        list_chat_id = []
                        list_chat_id_status =[]
                        tmp_step = tmp_json_data_eval[u]
                        tmp_text_chat_email = ''
                        tmp_step_detail = tmp_step['step_detail']
                        tmp_step_num = tmp_step['step_num']
                        tmp_json['step_num'] = tmp_step_num
                        for z in range(len(tmp_step_detail)):
                            tmp_step_details_1 = tmp_step_detail[z]
                            tmp_one_email = tmp_step_details_1['one_email']
                            tmp_account_name =   tmp_one_email
                            if tmp_one_email != '':
                                query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(tmp_one_email)).all()
                                if len(query_name_account) != 0:
                                    try:
                                        tmp_account_name = eval(query_name_account[0].citizen_data)
                                        tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                    except Exception as e:
                                        tmp_account_name = tmp_one_email
                                        exc_type, exc_obj, exc_tb = sys.exc_info()
                                        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                                        print(exc_type, fname, exc_tb.tb_lineno)
                            tmp_activity_code = tmp_step_details_1['activity_code']
                            tmp_activity_status = tmp_step_details_1['activity_status']
                            for u in range(len(tmp_activity_code)):
                                if tmp_activity_code[u] == 'A03':
                                    status_ppl_temp = tmp_activity_status[u]
                                    if status_ppl_temp == 'Complete' or status_ppl_temp == 'Approve':
                                        status_ppl_temp = 'อนุมัติแล้ว'
                                    elif status_ppl_temp == 'Incomplete' or status_ppl_temp == 'Pending':
                                        status_ppl_temp = 'ยังไม่อนุมัติ'
                                    elif status_ppl_temp == 'Reject':
                                        status_ppl_temp = 'ปฏิเสธอนุมัติ'
                                    tmp_text_chat_email = '- ' + tmp_account_name + ' ' + status_ppl_temp
                            if str(tmp_step_num) not in list_check_step_num:
                                list_check_step_num.append(str(tmp_step_num))
                                text_chat += '<br>ลำดับการอนุมัติที่ ' + str(tmp_step_num) + '<br>' + tmp_text_chat_email + '<br>' + ''
                            else:
                                text_chat += tmp_text_chat_email + '<br>'
                    text_totle_chat = (title_chat + '<br><br>' + text_chat)

            db.session.close()
            return {'result':'OK','messageText':text_totle_chat}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'notfound data' + str(e)}
        finally:
            db.session.close()

    def select_level_admin_v1(self,username,email_thai):
        self.username = username
        self.email_thai = email_thai
        try:
            result_get = tb_user_admin.query.filter(tb_user_admin.username==self.username,tb_user_admin.email_user==self.email_thai).first()
            if result_get != None:
                json_result = {}
                if result_get.level_admin != None:
                    json_result['level_admin'] = str(result_get.level_admin)
                    return {'result':'OK','messageText':json_result}
                else:
                    json_result['level_admin'] = None
                    return {'result':'OK','messageText':json_result}
            else:
                return {'result':'ER','messageText':'data not found'}
        except Exception as e:
            return {'result':'ER','messageText':str(e)}

    def select_sender_db_v2(self,userName,sidCode):
        self.sidCode = sidCode
        self.userName = userName
        json_data_res = {}
        list_data_res = []
        try:
            result_Select_step = paper_lessdatastep.query.filter(paper_lessdatastep.sid==self.sidCode).first()
            # print(result_Select_step)
            if result_Select_step == None:
                return {'result':'ER','messageText':'data not found'}
            result_Select_sender = paper_lesssender.query.filter(paper_lesssender.step_data_sid==self.sidCode).first()
            result_Select_document = paper_lessdocument.query.filter(paper_lessdocument.step_id==self.sidCode).first()
            result_Select_pdf = paper_lesspdf.query.filter(paper_lesspdf.fid==result_Select_document.fileid).first()
            if result_Select_sender != None:
                json_data_res['tracking_id'] = result_Select_sender.tracking_id
                json_data_res['sender_email'] = result_Select_sender.sender_email
                json_data_res['sender_name'] = result_Select_sender.sender_name
                json_data_res['send_time'] = result_Select_sender.send_time
                date_time_stamp_ = result_Select_sender.send_time.timestamp()
                date_time_stamp_ = int(date_time_stamp_)
                json_data_res['send_time_display'] = convert_datetime_TH_2_display_sendTime(date_time_stamp_)
                json_data_res['sender_position'] = result_Select_sender.sender_position
                json_data_res['send_time_string'] = str(result_Select_sender.send_time).split('+')[0]
                json_data_res['step_code'] = result_Select_sender.step_code
                json_data_res['step_data_sid'] = result_Select_sender.step_data_sid
                json_data_res['document_Id'] = result_Select_sender.doc_id
                json_data_res['template_webhook'] = result_Select_sender.template_webhook
                json_data_res['email_center'] = result_Select_sender.email_center
                json_data_res['file_name'] = result_Select_sender.file_name
                json_data_res['status'] = result_Select_sender.status
            if result_Select_document != None:
                if result_Select_document.options_page != None:
                    json_data_res['options_page_document'] = [eval(result_Select_document.options_page)]
                else:
                    json_data_res['options_page_document'] = []
                json_data_res['document_time'] = int(result_Select_document.timest)
                json_data_res['document_details'] = eval(result_Select_document.documentJson)
                json_data_res['document_details_string'] = str(result_Select_document.documentJson)
                json_data_res['file_id'] = int(result_Select_document.fileid)
                json_data_res['urgent_code'] = result_Select_document.urgent_type
                json_data_res['attempted_folder'] = result_Select_document.attempted_folder
            if result_Select_step != None:
                step_infomation = eval(result_Select_step.data_json)
                if 'step_num' in step_infomation:
                    json_data_res['step_info'] = [eval(result_Select_step.data_json)]
                else:
                    json_data_res['step_info'] = eval(result_Select_step.data_json)
                # json_data_res['step_info_01'] = eval(result_Select_step.data_json)
                json_data_res['view_details'] = eval(result_Select_step.view_details)
                json_data_res['qrCode_position'] = eval(result_Select_step.qrCode_position)
                if result_Select_step.qrCode_position != None or str(result_Select_step.qrCode_position).replace(' ','') != '':
                    json_data_res['qrCode_status'] = True
                else:
                    json_data_res['qrCode_status'] = False
            if result_Select_pdf != None:
                if result_Select_pdf.string_sign != None:
                    json_data_res['file_status'] = 'Complete'
                else:
                    json_data_res['file_status'] = 'InComplete'

            json_data_res['file_user_status_detail'] = []
            if 'step_num' in step_infomation:
                print ('if')
                status_step_sum = ''
                sum_status_step_list = []
                list_check_step = []
                json_step_info_2 = {}
                step_list_data = []
                step_ = step_infomation
                time_success = None
                step_time_1 = []
                sendtime = json_data_res['send_time']
                step_num = step_infomation['step_num']
                json_step_info_2['step_status'] = ''
                for u in range(len(step_['step_detail'])):
                    print(step_['step_detail'][u])
                    step_2 = step_['step_detail'][u]
                    for k in range(len(step_2['activity_code'])):
                        if step_2['activity_code'][k] == 'A03':
                            json_step_info = {}
                            json_step_info['activity_status'] = step_2['activity_status'][k]
                            json_step_info['one_email'] = step_2['one_email']
                            #process หา timeline
                            if (step_2['activity_status'][k] == 'Complete' or step_2['activity_status'][k] =='Reject' or step_2['activity_status'][k] == 'Approve'):
                                t1 = str(step_2['activity_time'][k])
                                print ('if activity_time',t1)
                                time_success = change_to_Timestamp(t1)
                                step_time_1.append(time_success)
                            #สิ้นสุดการหา timeline
                            query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(step_2['one_email'])).all()
                            if len(query_name_account) != 0:
                                tmp_account_name = eval(query_name_account[0].citizen_data)
                                try:
                                    tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                except Exception as e:
                                    tmp_account_name=None
                            else:
                                tmp_account_name = None
                            json_step_info['account_name'] = tmp_account_name
                            json_step_info['step_num'] = step_num
                            list_check_step.append(json_step_info['activity_status'])
                            step_list_data.append(json_step_info)
                    json_step_info_2['step_info'] = step_list_data
                    if json_step_info_2['step_status'] == '':
                        if 'Reject' in list_check_step:
                            json_step_info_2['step_status'] = 'Reject'
                        elif 'Complete' in list_check_step:
                            json_step_info_2['step_status'] = 'Complete'
                        elif 'Approve' in list_check_step:
                            json_step_info_2['step_status'] = 'Complete'
                        elif 'Incomplete' in list_check_step:
                            json_step_info_2['step_status'] = 'Incomplete'
                        elif 'Pending' in list_check_step:
                            json_step_info_2['step_status'] = 'Incomplete'
                        else:
                            json_step_info_2['step_status'] = 'Complete'
                    sum_status_step_list.append(json_step_info_2['step_status'])
                    timeline_ = getTimeline(sendtime,step_time_1)
                    json_data_res['timeline'] = timeline_
                json_data_res['file_user_status_detail'].append(json_step_info_2)
                if 'Reject' in sum_status_step_list:
                    status_step_sum = 'Reject'
                    sendtime = json_data_res['send_time']
                    timing_ = timing(time_success,sendtime)
                    json_data_res['timing'] = timing_
                elif 'Incomplete' in sum_status_step_list:
                    status_step_sum = 'Incomplete'
                    now = datetime.datetime.now()
                    sendtime = json_data_res['send_time']
                    timing_ = timing(datetime.datetime.timestamp(now),sendtime)
                    json_data_res['timing'] = timing_
                elif 'Pending' in sum_status_step_list:
                    status_step_sum = 'Incomplete'
                    now = datetime.datetime.now()
                    sendtime = json_data_res['send_time']
                    timing_ = timing(datetime.datetime.timestamp(now),sendtime)
                    json_data_res['timing'] = timing_
                elif 'Complete' in sum_status_step_list:
                    status_step_sum = 'Complete'
                    sendtime = json_data_res['send_time']
                    timing_ = timing(time_success,sendtime)
                    json_data_res['timing'] = timing_
                elif 'Approve' in sum_status_step_list:
                    status_step_sum = 'Complete'
                    sendtime = json_data_res['send_time']
                    timing_ = timing(time_success,sendtime)
                    json_data_res['timing'] = timing_
                else:
                    status_step_sum = 'Complete'
                    sendtime = json_data_res['send_time']
                    timing_ = timing(time_success,sendtime)
                    json_data_res['timing'] = timing_

                json_data_res['file_status_sum'] = status_step_sum
            else:
                print ('else')
                status_step_sum = ''
                time_success = None
                step_time_1 = []
                sendtime = json_data_res['send_time']
                sum_status_step_list = []
                for i in range(len(step_infomation)):
                    list_check_step = []
                    json_step_info_2 = {}
                    step_list_data = []
                    step_ = step_infomation[i]
                    step_num = step_infomation[i]['step_num']
                    json_step_info_2['step_status'] = ''
                    for u in range(len(step_['step_detail'])):
                        step_2 = step_['step_detail'][u]
                        for k in range(len(step_2['activity_code'])):
                            if step_2['activity_code'][k] == 'A03':
                                json_step_info = {}
                                json_step_info['activity_status'] = step_2['activity_status'][k]
                                json_step_info['one_email'] = step_2['one_email']
                                query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(step_2['one_email'])).all()
                                if len(query_name_account) != 0:
                                    tmp_account_name = eval(query_name_account[0].citizen_data)
                                    try:
                                        tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                    except Exception as e:
                                        tmp_account_name=None
                                else:
                                    tmp_account_name = None
                                json_step_info['account_name'] = tmp_account_name
                                json_step_info['step_num'] = step_num
                                #process หา timeline
                                if (step_2['activity_status'][k] == 'Complete' or step_2['activity_status'][k] =='Reject' or step_2['activity_status'][k] == 'Approve'):
                                    t1 = str(step_2['activity_time'][k])
                                    print ('else activity_time',t1)
                                    time_success = change_to_Timestamp(t1)
                                    step_time_1.append(time_success)
                                #สิ้นสุดการหา timeline
                                list_check_step.append(json_step_info['activity_status'])
                                step_list_data.append(json_step_info)
                        json_step_info_2['step_info'] = step_list_data
                        timeline_ = getTimeline(sendtime,step_time_1)
                        json_data_res['timeline'] = timeline_
                    if json_step_info_2['step_status'] == '':
                        if 'Reject' in list_check_step:
                            json_step_info_2['step_status'] = 'Reject'
                        elif 'Complete' in list_check_step:
                            json_step_info_2['step_status'] = 'Complete'
                        elif 'Approve' in list_check_step:
                            json_step_info_2['step_status'] = 'Complete'
                        elif 'Incomplete' in list_check_step:
                            json_step_info_2['step_status'] = 'Incomplete'
                        elif 'Pending' in list_check_step:
                            json_step_info_2['step_status'] = 'Incomplete'
                        else:
                            json_step_info_2['step_status'] = 'Complete'
                    sum_status_step_list.append(json_step_info_2['step_status'])
                    json_data_res['file_user_status_detail'].append(json_step_info_2)
                if 'Reject' in sum_status_step_list:
                    status_step_sum = 'Reject'
                    sendtime = json_data_res['send_time']
                    timing_ = timing(time_success,sendtime)
                    json_data_res['timing'] = timing_
                elif 'Incomplete' in sum_status_step_list:
                    status_step_sum = 'Incomplete'
                    now = datetime.datetime.now()
                    sendtime = json_data_res['send_time']
                    timing_ = timing(datetime.datetime.timestamp(now),sendtime)
                    json_data_res['timing'] = timing_
                elif 'Pending' in sum_status_step_list:
                    status_step_sum = 'Incomplete'
                    now = datetime.datetime.now()
                    sendtime = json_data_res['send_time']
                    timing_ = timing(datetime.datetime.timestamp(now),sendtime)
                    json_data_res['timing'] = timing_
                elif 'Complete' in sum_status_step_list:
                    status_step_sum = 'Complete'
                    sendtime = json_data_res['send_time']
                    timing_ = timing(time_success,sendtime)
                    json_data_res['timing'] = timing_
                elif 'Approve' in sum_status_step_list:
                    status_step_sum = 'Complete'
                    sendtime = json_data_res['send_time']
                    timing_ = timing(time_success,sendtime)
                    json_data_res['timing'] = timing_
                else:
                    status_step_sum = 'Complete'
                    sendtime = json_data_res['send_time']
                    timing_ = timing(time_success,sendtime)
                    json_data_res['timing'] = timing_
                json_data_res['file_status_sum'] = status_step_sum

            list_data_res.append(json_data_res)
            if len(list_data_res) != 0:
                return {'result':'OK','messageText':list_data_res,'messageER':None}
            else:
                return {'result':'ER','messageText':[],'messageER':'not found sid code'}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':[],'messageER':'notfound data' + str(ex)}

    def select_recpin_db_v2(self,emailUser,sidCode):
        self.sidCode = sidCode
        self.emailUser = emailUser
        json_data_res = {}
        list_data_res = []
        try:
            result_Select_step = paper_lessdatastep.query.filter(paper_lessdatastep.sid==self.sidCode).first()
            if result_Select_step == None:
                return {'result':'ER','messageText':'data not found'}
            result_Select_sender = paper_lesssender.query.filter(paper_lesssender.step_data_sid==self.sidCode).first()
            result_Select_document = paper_lessdocument.query.filter(paper_lessdocument.step_id==self.sidCode).first()
            if result_Select_document.fileid != None:
                result_Select_pdf = paper_lesspdf.query.filter(paper_lesspdf.fid==result_Select_document.fileid).first()
            if result_Select_sender != None:
                json_data_res['tracking_id'] = result_Select_sender.tracking_id
                json_data_res['sender_email'] = result_Select_sender.sender_email
                json_data_res['sender_name'] = result_Select_sender.sender_name
                json_data_res['send_time'] = result_Select_sender.send_time
                json_data_res['sender_position'] = result_Select_sender.sender_position
                date_time_stamp_ = result_Select_sender.send_time.timestamp()
                date_time_stamp_ = int(date_time_stamp_)
                json_data_res['send_time_display'] = convert_datetime_TH_2_display_sendTime(date_time_stamp_)
                json_data_res['send_time_string'] = str(result_Select_sender.send_time).split('+')[0]
                json_data_res['step_code'] = result_Select_sender.step_code
                json_data_res['step_data_sid'] = result_Select_sender.step_data_sid
                json_data_res['document_Id'] = result_Select_sender.doc_id
                json_data_res['file_name'] = result_Select_sender.file_name
                json_data_res['template_webhook'] = result_Select_sender.template_webhook
                try:
                    json_data_res['email_center'] = eval(result_Select_sender.email_center)
                except Exception as e:
                    json_data_res['email_center'] = result_Select_sender.email_center
                json_data_res['status'] = result_Select_sender.status
            if result_Select_document != None:
                if result_Select_document.options_page != None:
                    json_data_res['options_page_document'] = [eval(result_Select_document.options_page)]
                else:
                    json_data_res['options_page_document'] = []
                json_data_res['stamp_all'] = result_Select_document.sign_page_options
                json_data_res['document_time'] = int(result_Select_document.timest)
                json_data_res['document_details'] = eval(result_Select_document.documentJson)
                json_data_res['document_details_string'] = str(result_Select_document.documentJson)
                json_data_res['file_id'] = int(result_Select_document.fileid)
                json_data_res['urgent_code'] = result_Select_document.urgent_type
                json_data_res['digit_sign'] = bool(result_Select_document.digit_sign)
                json_data_res['attempted_folder'] = result_Select_document.attempted_folder
            if result_Select_step != None:
                json_data_res['view_details'] = eval(result_Select_step.view_details)
                json_data_res['qrCode_position'] = eval(result_Select_step.qrCode_position)
                if result_Select_step.qrCode_position != None or str(result_Select_step.qrCode_position).replace(' ','') != '':
                    json_data_res['qrCode_status'] = True
                else:
                    json_data_res['qrCode_status'] = False
            if result_Select_pdf != None:
                if result_Select_pdf.string_sign != None:
                    json_data_res['file_status'] = 'Complete'
                else:
                    json_data_res['file_status'] = 'Incomplete'
            step_infomation = eval(result_Select_step.data_json)
            json_data_res['file_user_status_detail'] = []
            if 'step_num' in step_infomation:
                status_step_sum = ''
                sum_status_step_list = []
                list_check_step = []
                json_step_info_2 = {}
                step_list_data = []
                step_ = step_infomation
                step_num = step_infomation['step_num']
                time_success = None
                step_time_1 = []
                sendtime = json_data_res['send_time']
                json_data_res['step_info'] = [eval(result_Select_step.data_json)]
                json_step_info_2['step_status'] = ''
                for u in range(len(step_['step_detail'])):
                    step_2 = step_['step_detail'][u]
                    for k in range(len(step_2['activity_code'])):
                        if step_2['activity_code'][k] == 'A03':
                            json_step_info = {}
                            json_step_info['activity_status'] = step_2['activity_status'][k]
                            json_step_info['one_email'] = str(step_2['one_email']).replace(' ','')
                            #process หา timeline
                            if (step_2['activity_status'][k] == 'Complete' or step_2['activity_status'][k] =='Reject' or step_2['activity_status'][k] == 'Approve'):
                                t1 = str(step_2['activity_time'][k])
                                time_success = change_to_Timestamp(t1)
                                step_time_1.append(time_success)
                            #สิ้นสุดการหา timeline
                            query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(step_2['one_email'])).all()
                            if len(query_name_account) != 0:
                                tmp_account_name = eval(query_name_account[0].citizen_data)
                                try:
                                    tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                except Exception as e:
                                    tmp_account_name=None
                            else:
                                tmp_account_name = None
                            json_step_info['account_name'] = tmp_account_name
                            json_step_info['step_num'] = step_num

                            list_check_step.append(json_step_info['activity_status'])
                            step_list_data.append(json_step_info)
                    json_step_info_2['step_info'] = step_list_data
                    timeline_ = getTimeline(sendtime,step_time_1)
                    json_data_res['timeline'] = timeline_
                if json_step_info_2['step_status'] == '':
                    if 'Reject' in list_check_step:
                        json_step_info_2['step_status'] = 'Reject'
                    elif 'Approve' in list_check_step:
                        json_step_info_2['step_status'] = 'Complete'
                    elif 'Complete' in list_check_step:
                        json_step_info_2['step_status'] = 'Complete'
                    elif 'Incomplete' in list_check_step:
                        json_step_info_2['step_status'] = 'Incomplete'
                    elif 'Pending' in list_check_step:
                        json_step_info_2['step_status'] = 'Incomplete'
                    else:
                        json_step_info_2['step_status'] = 'Complete'
                sum_status_step_list.append(json_step_info_2['step_status'])
                json_data_res['file_user_status_detail'].append(json_step_info_2)
                if 'Reject' in sum_status_step_list:
                    status_step_sum = 'Reject'
                    sendtime = json_data_res['send_time']
                    timing_ = timing(time_success,sendtime)
                    json_data_res['timing'] = timing_
                    for u in range(len(step_['step_detail'])):
                        step_2 = step_['step_detail'][u]
                        for k in range(len(step_2['activity_code'])):
                            if self.emailUser == str(step_2['one_email']).replace(' ',''):
                                json_data_res['file_user_status'] = 'Reject'
                            # json_data_res['file_user_status'] = step_2['activity_status'][k]
                elif 'Incomplete' in sum_status_step_list:
                    status_step_sum = 'Incomplete'
                    now = datetime.datetime.now()
                    sendtime = json_data_res['send_time']
                    timing_ = timing(datetime.datetime.timestamp(now),sendtime)
                    json_data_res['timing'] = timing_
                    for u in range(len(step_['step_detail'])):
                        step_2 = step_['step_detail'][u]
                        if self.emailUser == str(step_2['one_email']).replace(' ',''):
                            for k in range(len(step_2['activity_code'])):
                                if step_2['activity_code'][k] == 'A03':
                                    json_data_res['file_user_status'] = step_2['activity_status'][k]
                elif 'Pending' in sum_status_step_list:
                    status_step_sum = 'Incomplete'
                    now = datetime.datetime.now()
                    sendtime = json_data_res['send_time']
                    timing_ = timing(datetime.datetime.timestamp(now),sendtime)
                    json_data_res['timing'] = timing_
                    for u in range(len(step_['step_detail'])):
                        step_2 = step_['step_detail'][u]
                        if self.emailUser == str(step_2['one_email']).replace(' ',''):
                            for k in range(len(step_2['activity_code'])):
                                if step_2['activity_code'][k] == 'A03':
                                    json_data_res['file_user_status'] = step_2['activity_status'][k]
                else:
                    status_step_sum = 'Complete'
                    sendtime = json_data_res['send_time']
                    timing_ = timing(time_success,sendtime)
                    json_data_res['timing'] = timing_
                    for u in range(len(step_['step_detail'])):
                        step_2 = step_['step_detail'][u]
                        if self.emailUser == str(step_2['one_email']).replace(' ',''):
                            for k in range(len(step_2['activity_code'])):
                                if step_2['activity_code'][k] == 'A03':
                                    json_data_res['file_user_status'] = step_2['activity_status'][k]
                json_data_res['file_status_sum'] = status_step_sum
            else:
                status_step_sum = ''
                sum_status_step_list = []
                alr_mail = []
                time_success = None
                step_time_1 = []
                sendtime = json_data_res['send_time']
                json_data_res['step_info'] = eval(result_Select_step.data_json)
                for i in range(len(step_infomation)):
                    list_check_step = []
                    json_step_info_2 = {}
                    step_list_data = []
                    step_ = step_infomation[i]
                    step_num = step_infomation[i]['step_num']
                    # timeline_ = None
                    json_step_info_2['step_status'] = ''
                    for u in range(len(step_['step_detail'])):
                        step_2 = step_['step_detail'][u]
                        for k in range(len(step_2['activity_code'])):
                            if step_2['activity_code'][k] == 'A03':

                                if self.emailUser == str(step_2['one_email']).replace(' ',''):
                                    if self.emailUser not in alr_mail:

                                        # print(alr_mail ,step_2['activity_status'][k])
                                        if step_2['activity_status'][k] == 'Complete':
                                            # alr_mail.append(step_2['one_email'])
                                            json_data_res['file_user_status'] = step_2['activity_status'][k]
                                        elif step_2['activity_status'][k] == 'Approve':
                                            # alr_mail.append(step_2['one_email'])
                                            json_data_res['file_user_status'] = step_2['activity_status'][k]
                                        else:
                                            alr_mail.append(step_2['one_email'])
                                            json_data_res['file_user_status'] = step_2['activity_status'][k]

                                print(alr_mail)
                                json_step_info = {}
                                json_step_info['activity_status'] = step_2['activity_status'][k]
                                json_step_info['one_email'] = str(step_2['one_email']).replace(' ','')
                                #process หา timeline
                                if (step_2['activity_status'][k] == 'Complete' or step_2['activity_status'][k] =='Reject' or step_2['activity_status'][k] == 'Approve'):
                                    t1 = str(step_2['activity_time'][k])
                                    time_success = change_to_Timestamp(t1)
                                    step_time_1.append(time_success)
                                #สิ้นสุดการหา timeline
                                query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(step_2['one_email'])).all()
                                if len(query_name_account) != 0:
                                    try:
                                        tmp_account_name = eval(query_name_account[0].citizen_data)
                                        tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                    except Exception as e:
                                        tmp_account_name = None
                                        exc_type, exc_obj, exc_tb = sys.exc_info()
                                        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                                else:
                                    tmp_account_name = None
                                json_step_info['step_num'] = step_num
                                json_step_info['account_name'] = tmp_account_name
                                list_check_step.append(json_step_info['activity_status'])
                                step_list_data.append(json_step_info)
                        json_step_info_2['step_info'] = step_list_data
                        timeline_ = getTimeline(sendtime,step_time_1)
                        json_data_res['timeline'] = timeline_
                    if json_step_info_2['step_status'] == '':
                        if 'Reject' in list_check_step:
                            json_step_info_2['step_status'] = 'Reject'
                        elif 'Approve' in list_check_step:
                            json_step_info_2['step_status'] = 'Complete'
                        elif 'Complete' in list_check_step:
                            json_step_info_2['step_status'] = 'Complete'
                        elif 'Incomplete' in list_check_step:
                            json_step_info_2['step_status'] = 'Incomplete'
                        elif 'Pending' in list_check_step:
                            json_step_info_2['step_status'] = 'Incomplete'
                        else:
                            json_step_info_2['step_status'] = 'Complete'
                    sum_status_step_list.append(json_step_info_2['step_status'])
                    json_data_res['file_user_status_detail'].append(json_step_info_2)
                if 'Reject' in sum_status_step_list:
                    status_step_sum = 'Reject'
                    sendtime = json_data_res['send_time']
                    timing_ = timing(time_success,sendtime)
                    json_data_res['timing'] = timing_
                elif 'Incomplete' in sum_status_step_list:
                    status_step_sum = 'Incomplete'
                    now = datetime.datetime.now()
                    sendtime = json_data_res['send_time']
                    timing_ = timing(datetime.datetime.timestamp(now),sendtime)
                    json_data_res['timing'] = timing_
                elif 'Pending' in sum_status_step_list:
                    status_step_sum = 'Incomplete'
                    now = datetime.datetime.now()
                    sendtime = json_data_res['send_time']
                    timing_ = timing(datetime.datetime.timestamp(now),sendtime)
                    json_data_res['timing'] = timing_
                elif 'Approve' in sum_status_step_list:
                    status_step_sum = 'Complete'
                    sendtime = json_data_res['send_time']
                    timing_ = timing(time_success,sendtime)
                    json_data_res['timing'] = timing_
                elif 'Complete' in sum_status_step_list:
                    status_step_sum = 'Complete'
                    sendtime = json_data_res['send_time']
                    timing_ = timing(time_success,sendtime)
                    json_data_res['timing'] = timing_
                else:
                    status_step_sum = 'Complete'
                json_data_res['file_status_sum'] = status_step_sum

            list_data_res.append(json_data_res)
            if len(list_data_res) != 0:
                return {'result':'OK','messageText':list_data_res,'messageER':None}
            else:
                return {'result':'ER','messageText':[],'messageER':'not found sidcode'}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':[],'messageER':'notfound data' + str(ex)}

    def select_profile_for_get_project_v1(self,username,email_thai):
        self.username = username
        self.email_thai = email_thai
        tmp_json = {}
        try:
            result_select = paper_lessuserProfile.query.filter(paper_lessuserProfile.p_username==self.username,paper_lessuserProfile.p_emailthai==self.email_thai).first()
            if result_select != None:
                if result_select.p_taskchat != None:
                    tmp_json['status_taskchat'] = True
                else:
                    tmp_json['status_taskchat'] = False
                if result_select.p_signca != None:
                    tmp_json['sign_ca'] = result_select.p_signca
                else:
                    tmp_json['sign_ca'] = None
            else:
                return {'result':'ER','messageText':'data not found'}
            return {'result':'OK','messageText':tmp_json}
        except exc.SQLAlchemyError as ex:
            return {'result':'ER','messageText':str(ex)}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def select_document_for_report_admin_v2(self,date_start,date_end,document_id,sender_email,recipient_email,tax_id,documentType):
        tmp_list_result = []
        tmp_list_result2 = []
        self.date_start = date_start
        self.date_end = date_end
        self.document_id = document_id
        self.sender_email = sender_email
        self.recipient_email = recipient_email
        self.tax_id = tax_id
        self.documentType = documentType
        # self.limit = limit

        # limit_ch = self.limit
        tmp_list_sid_code = []
        count_document = 0
        count_rowDocument = 0
        count_rowDocument_StatusActive = 0
        count_rowDocument_StatusReject = 0
        count_rowDocument_StatusCancel = 0
        statusFile_count_approve = 0
        statusFile_count_pendding = 0
        statusFile_count_reject = 0
        statusFile_count_wait = 0
        statusFile_count_delete = 0
        statusFile_count_cancle = 0
        step_time = []

        step_time_total = []
        t1 = None
        t2 = None

        sum_Document = 0
        Complete_Approve = 0
        Incomplete_Pendding = 0
        Reject = 0
        Wait = 0

        query_document_tmp = None
        print('1111')
        try:

            # if (limit_ch == ''):
            #     limit_ch = 1000
            # elif (limit_ch != ''):
            #     limit_ch = self.limit
            #     if limit_ch > 1000:
            #         limit_ch = 1000
            
            if self.tax_id == 'citizen':
                if self.date_start != '' and self.date_end != '' : # date_start ไม่ว่าง , date_end ไม่ว่าง
                    if self.document_id =='':
                        if self.sender_email != '' and self.tax_id != '' and self.recipient_email != '' and self.documentType != '': # ใส่ทั้งหมด
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).all()
                            print('all put')

                        elif self.sender_email != '': # ใส่ sender_email

                            if self.tax_id != '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).all()
                                print('non recipient')

                            elif self.tax_id == '' and self.recipient_email != '' and self.documentType != '': # ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).all()
                                print('non tax')

                            elif self.documentType == '' and self.recipient_email != '' and self.tax_id != '': # ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                                print('non documentType')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).all()
                                print('only sender , documentType')

                            elif self.documentType == '' and self.recipient_email == '' and self.tax_id != '': # ไม่ใส่ recipient_email // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                                print('only sender , tax_id')

                            elif self.tax_id == '' and self.documentType == '' and self.recipient_email == '': # ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).all()
                                print('only sender , recipient_email')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType == '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).all()
                                print('only sender')

                        elif self.recipient_email != '': # ใส่ recipient_email

                            if self.tax_id != '' and self.sender_email == '' and self.documentType == '': # ไม่ใส่ sender_email // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                                print('non sender_email ,documentType')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType != '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).all()
                                print('only recipient , documentType')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType:# ไม่ใส่ sender_email // ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).all()
                                print('only recipient')

                        elif self.tax_id == '' and self.recipient_email == '' and self.sender_email == '' and self.documentType != '': # ใส่ documentType
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).all()
                            print('only documenType')

                        elif self.tax_id != '' and self.recipient_email == ''and self.sender_email == ''and self.documentType == '': # ใส่ tax_id
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                            print('tax_id')

                        elif self.tax_id != '' and self.recipient_email == ''and self.sender_email == ''and self.documentType != '': # ใส่ tax_id,documentType
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).all()
                            print('tax_id , documenType')



                        elif self.sender_email == '' and self.tax_id == '' and self.recipient_email == ''and self.documentType == '': #ไม่ใส่อะไรเลย
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).all()
                            print('non put')

                    elif self.document_id != '':# กรอกช่อง id
                        date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                        date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                        co_str = len(self.document_id)
                        # print (co_str)
                        if co_str > 13 : # ใส่ doc_id
                            # print ('doc_id')
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.doc_id.contains(self.document_id)).all()
                        elif co_str <= 13 : # ใส่ tracking_id
                            # print ('tracking_id')
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.tracking_id.contains(self.document_id)).all()
                        print ('have id')
                elif self.date_start != '' and self.date_end == '' : # date_start ไม่ว่าง , date_end ว่าง
                    if self.document_id =='':
                        if self.sender_email != '' and self.tax_id != '' and self.recipient_email != ''and self.documentType != '': # ใส่ทั้งหมด
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).all()
                            print('all put2')

                        elif self.sender_email != '': # ใส่ sender_email

                            if self.tax_id != '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).all()
                                print('non recipient2')

                            elif self.tax_id == '' and self.recipient_email != '' and self.documentType != '': # ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).all()
                                print('non tax2')

                            elif self.documentType == '' and self.recipient_email != '' and self.tax_id != '': # ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                                print('non documentType2')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).all()
                                print('only sender , documentType2')

                            elif self.documentType == '' and self.recipient_email == '' and self.tax_id != '': # ไม่ใส่ recipient_email // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                                print('only sender , tax_id 2')

                            elif self.tax_id == '' and self.documentType == '' and self.recipient_email != '': # ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).all()
                                print('only sender , recipient_email2')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType == '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).all()
                                print('only sender2')


                        elif self.recipient_email != '': # ใส่ recipient_email

                            if self.tax_id != '' and self.sender_email == '' and self.documentType == '': # ไม่ใส่ sender_email // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                                print('non sender_email2')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType != '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).all()
                                print('only recipient , documentType2')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType == '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).all()
                                print('only recipient2')

                        elif self.tax_id == '' and self.recipient_email == ''and self.sender_email == ''and self.documentType != '': # ใส่ documentType
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).all()
                            print('only documenType2')

                        elif self.tax_id != '' and self.recipient_email == '' and self.sender_email == '' and self.documentType == '': # ใส่ tax_id
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                            print('tax_id2')

                        elif self.tax_id != '' and self.recipient_email == ''and self.sender_email == ''and self.documentType != '': # ใส่ tax_id,documentType
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).all()
                            print('tax_id , documenType2')

                        elif self.sender_email == '' and self.tax_id == '' and self.recipient_email == '': #ไม่ใส่อะไรเลย
                            date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time>=date_start_tmp).filter(view_document.send_time<=date_end_tmp).all()
                            print('non put2')

                    elif self.document_id != '':# กรอกช่อง id
                        date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                        co_str = len(self.document_id)
                        # print (co_str)
                        if co_str > 13 : # ใส่ doc_id
                            # print ('doc_id')
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time>=date_start_tmp).filter(view_document.doc_id.contains(self.document_id)).all()
                        elif co_str <= 13 : # ใส่ tracking_id
                            # print ('tracking_id')
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time>=date_start_tmp).filter(view_document.tracking_id.contains(self.document_id)).all()
                        print ('have id2')
                elif self.date_start == '' and self.date_end != '' : # date_start ว่าง , date_end ไม่ว่าง
                    query_document_tmp = []
                elif self.date_start == '' and self.date_end == '' : # date_start ว่าง , date_end ว่าง
                    if self.document_id != '':   # กรอกช่อง id
                        co_str = len(self.document_id)
                        # print (co_str)
                        if co_str > 13 :
                            # print ('doc_id')
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.doc_id.contains(self.document_id)).all()
                        elif co_str <= 13 :
                            # print ('tracking_id')
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.tracking_id.contains(self.document_id)).all()
                        print ('have id4')

                    if self.document_id =='': # ไม่กรอก id
                        if self.sender_email != '' and self.tax_id != '' and self.recipient_email != '' and self.documentType != '' : # ใส่ทั้งหมด

                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).all()
                            print('all put4')

                        elif self.sender_email != '': # ใส่ sender_email

                            if self.tax_id != '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).all()
                                print('non recipient4')

                            elif self.tax_id == '' and self.recipient_email != '' and self.documentType != '': # ไม่ใส่ tax_id
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).all()
                                print('non tax4')

                            elif self.documentType == '' and self.recipient_email != '' and self.tax_id != '': # ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                                print('non documentType2')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).all()
                                print('only sender4')

                            elif self.documentType == '' and self.recipient_email == '' and self.tax_id != '': # ไม่ใส่ recipient_email // ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                                print('only sender , tax_id 3')

                            elif self.tax_id == '' and self.documentType == '' and self.recipient_email != '': # ไม่ใส่ tax_id // ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).all()
                                print('only sender , recipient_email 3')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType == '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id // ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).all()
                                print('only sender4')

                        elif self.recipient_email != '': # ใส่ recipient_email
                            if self.tax_id != '' and self.sender_email == '' and self.documentType == '': # ไม่ใส่ sender_email // ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                                print('non sender_email 4')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType != '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).all()
                                print('only recipient , documentType4')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType == '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id // ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).all()
                                print('only recipient4')

                        elif self.tax_id == '' and self.recipient_email == ''and self.sender_email == ''and self.documentType != '': # ใส่ documentType

                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).all()
                            print('only documenType4')

                        elif self.tax_id != '' and self.recipient_email == ''and self.sender_email == ''and self.documentType == '': # ใส่ tax_id
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                            print('tax_id4')

                        elif self.tax_id != '' and self.recipient_email == '' and self.sender_email == ''and self.documentType != '': # ใส่ tax_id,documentType

                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).all()
                            print('tax_id , documenType 4')


                        elif self.sender_email == '' and self.tax_id == '' and self.recipient_email == ''and self.documentType == '':#ไม่ใส่อะไรเลย
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).all()
                            print ('No anything')
            else:
                if self.date_start != '' and self.date_end != '' : # date_start ไม่ว่าง , date_end ไม่ว่าง
                    if self.document_id =='':
                        if self.sender_email != '' and self.tax_id != '' and self.recipient_email != '' and self.documentType != '': # ใส่ทั้งหมด
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).all()
                            print('all put')

                        elif self.sender_email != '': # ใส่ sender_email

                            if self.tax_id != '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).all()
                                print('non recipient')

                            elif self.tax_id == '' and self.recipient_email != '' and self.documentType != '': # ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).all()
                                print('non tax')

                            elif self.documentType == '' and self.recipient_email != '' and self.tax_id != '': # ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(view_document.biz_info.contains(self.tax_id)).all()
                                print('non documentType')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).all()
                                print('only sender , documentType')

                            elif self.documentType == '' and self.recipient_email == '' and self.tax_id != '': # ไม่ใส่ recipient_email // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).all()
                                print('only sender , tax_id')

                            elif self.tax_id == '' and self.documentType == '' and self.recipient_email == '': # ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).all()
                                print('only sender , recipient_email')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType == '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).all()
                                print('only sender')

                        elif self.recipient_email != '': # ใส่ recipient_email

                            if self.tax_id != '' and self.sender_email == '' and self.documentType == '': # ไม่ใส่ sender_email // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).all()
                                print('non sender_email ,documentType')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType != '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).all()
                                print('only recipient , documentType')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType == '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).all()
                                print('only recipient')

                        elif self.tax_id == '' and self.recipient_email == '' and self.sender_email == '' and self.documentType != '': # ใส่ documentType
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).all()
                            print('only documenType')

                        elif self.tax_id != '' and self.recipient_email == ''and self.sender_email == ''and self.documentType == '': # ใส่ tax_id
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.biz_info.contains(self.tax_id)).all()
                            print('tax_id')

                        elif self.tax_id != '' and self.recipient_email == ''and self.sender_email == ''and self.documentType != '': # ใส่ tax_id,documentType
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).all()
                            print('tax_id , documenType')



                        elif self.sender_email == '' and self.tax_id == '' and self.recipient_email == ''and self.documentType == '': #ไม่ใส่อะไรเลย
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).all()
                            print('non put')

                    elif self.document_id != '':# กรอกช่อง id
                        date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                        date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                        co_str = len(self.document_id)
                        # print (co_str)
                        if co_str > 13 : # ใส่ doc_id
                            # print ('doc_id')
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.doc_id.contains(self.document_id)).all()
                        elif co_str <= 13 : # ใส่ tracking_id
                            # print ('tracking_id')
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.tracking_id.contains(self.document_id)).all()
                        print ('have id')
                elif self.date_start != '' and self.date_end == '' : # date_start ไม่ว่าง , date_end ว่าง
                    if self.document_id =='':
                        if self.sender_email != '' and self.tax_id != '' and self.recipient_email != ''and self.documentType != '': # ใส่ทั้งหมด
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).all()
                            print('all put2')

                        elif self.sender_email != '': # ใส่ sender_email

                            if self.tax_id != '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).all()
                                print('non recipient2')

                            elif self.tax_id == '' and self.recipient_email != '' and self.documentType != '': # ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).all()
                                print('non tax2')

                            elif self.documentType == '' and self.recipient_email != '' and self.tax_id != '': # ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(view_document.biz_info.contains(self.tax_id)).all()
                                print('non documentType2')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).all()
                                print('only sender , documentType2')

                            elif self.documentType == '' and self.recipient_email == '' and self.tax_id != '': # ไม่ใส่ recipient_email // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).all()
                                print('only sender , tax_id 2')

                            elif self.tax_id == '' and self.documentType == '' and self.recipient_email != '': # ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).all()
                                print('only sender , recipient_email2')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType == '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).all()
                                print('only sender2')


                        elif self.recipient_email != '': # ใส่ recipient_email

                            if self.tax_id != '' and self.sender_email == '' and self.documentType == '': # ไม่ใส่ sender_email // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).all()
                                print('non sender_email2')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType != '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).all()
                                print('only recipient , documentType2')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType == '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).all()
                                print('only recipient2')

                        elif self.tax_id == '' and self.recipient_email == ''and self.sender_email == ''and self.documentType != '': # ใส่ documentType
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).all()
                            print('only documenType2')

                        elif self.tax_id != '' and self.recipient_email == '' and self.sender_email == '' and self.documentType == '': # ใส่ tax_id
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.biz_info.contains(self.tax_id)).all()
                            print('tax_id2')

                        elif self.tax_id != '' and self.recipient_email == ''and self.sender_email == ''and self.documentType != '': # ใส่ tax_id,documentType
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).all()
                            print('tax_id , documenType2')

                        elif self.sender_email == '' and self.tax_id == '' and self.recipient_email == '': #ไม่ใส่อะไรเลย
                            date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time>=date_start_tmp).filter(view_document.send_time<=date_end_tmp).all()
                            print('non put2')

                    elif self.document_id != '':# กรอกช่อง id
                        date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                        co_str = len(self.document_id)
                        # print (co_str)
                        if co_str > 13 : # ใส่ doc_id
                            # print ('doc_id')
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time>=date_start_tmp).filter(view_document.doc_id.contains(self.document_id)).all()
                        elif co_str <= 13 : # ใส่ tracking_id
                            # print ('tracking_id')
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time>=date_start_tmp).filter(view_document.tracking_id.contains(self.document_id)).all()
                        print ('have id2')
                elif self.date_start == '' and self.date_end != '' : # date_start ว่าง , date_end ไม่ว่าง
                    query_document_tmp = []
                elif self.date_start == '' and self.date_end == '' : # date_start ว่าง , date_end ว่าง
                    if self.document_id != '':   # กรอกช่อง id
                        co_str = len(self.document_id)
                        # print (co_str)
                        if co_str > 13 :
                            # print ('doc_id')
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.doc_id.contains(self.document_id)).all()
                        elif co_str <= 13 :
                            # print ('tracking_id')
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.tracking_id.contains(self.document_id)).all()
                        print ('have id4')

                    if self.document_id =='': # ไม่กรอก id
                        if self.sender_email != '' and self.tax_id != '' and self.recipient_email != '' and self.documentType != '' : # ใส่ทั้งหมด

                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).all()
                            print('all put4')

                        elif self.sender_email != '': # ใส่ sender_email

                            if self.tax_id != '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).all()
                                print('non recipient4')

                            elif self.tax_id == '' and self.recipient_email != '' and self.documentType != '': # ไม่ใส่ tax_id
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).all()
                                print('non tax4')

                            elif self.documentType == '' and self.recipient_email != '' and self.tax_id != '': # ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(view_document.biz_info.contains(self.tax_id)).all()
                                print('non documentType2')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).all()
                                print('only sender4')

                            elif self.documentType == '' and self.recipient_email == '' and self.tax_id != '': # ไม่ใส่ recipient_email // ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).all()
                                print('only sender , tax_id 3')

                            elif self.tax_id == '' and self.documentType == '' and self.recipient_email != '': # ไม่ใส่ tax_id // ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).all()
                                print('only sender , recipient_email 3')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType == '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id // ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).all()
                                print('only sender4')

                        elif self.recipient_email != '': # ใส่ recipient_email
                            if self.tax_id != '' and self.sender_email == '' and self.documentType == '': # ไม่ใส่ sender_email // ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).all()
                                print('non sender_email 4')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType != '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).all()
                                print('only recipient , documentType4')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType == '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id // ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.recipient_email.contains(self.recipient_email)).all()
                                print('only recipient4')

                        elif self.tax_id == '' and self.recipient_email == ''and self.sender_email == ''and self.documentType != '': # ใส่ documentType

                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).all()
                            print('only documenType4')

                        elif self.tax_id != '' and self.recipient_email == ''and self.sender_email == ''and self.documentType == '': # ใส่ tax_id
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.biz_info.contains(self.tax_id)).all()
                            print('tax_id4')

                        elif self.tax_id != '' and self.recipient_email == '' and self.sender_email == ''and self.documentType != '': # ใส่ tax_id,documentType

                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).all()
                            print('tax_id , documenType 4')


                        elif self.sender_email == '' and self.tax_id == '' and self.recipient_email == ''and self.documentType == '':#ไม่ใส่อะไรเลย
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).all()
                            print ('No anything')
        except Exception as e:
            return {'result':'ER','messageText':str(e)}

        try:
            if query_document_tmp == None:
                return {'result':'ER','messageText':'data not found'} 
            if len(query_document_tmp) !=0:
                tmp_data = {}
                documentJson_result = None
                for u in range(len(query_document_tmp)):
                    status_doc = query_document_tmp[u].status
                    string_list_timeline = ''
                    concat_steptimeline = ''
                    sid_email = query_document_tmp[u].step_data_sid
                    jsonData_eval = eval(query_document_tmp[u].data_json)
                    arr_step_info = []
                    timestamp_info = []
                    step_time_1 = []
                    step_timeline = []
                    result = None
                    timing_1 = None
                    lis_details = []
                    list_string_timing = []
                    list_options_page = []

                    if 'step_num' in jsonData_eval:
                        step_status = ''
                        step_before = ''
                        my_step = ''
                        res_status_file = 'Y'
                        arr_step_totle = []
                        json_data_info = jsonData_eval
                        details_email_reject = []
                        details_email_incomplete = []
                        if 'step_detail' in json_data_info:
                            for s in range(len(json_data_info['step_detail'])):
                                json_info_step2 = {}
                                for su in range(len(json_data_info['step_detail'][s]['activity_code'])):
                                    oneMail = json_data_info['step_detail'][s]['one_email']
                                    step_2 = json_data_info['step_detail'][s]
                                    # if str(oneMail).replace(' ','').lower() == self.emailUser:
                                    if json_data_info['step_detail'][s]['activity_code'][su] == 'A03':
                                        print(timestamp_info)
                                        print(sid_email)
                                        if my_step == '':
                                            if json_data_info['step_detail'][s]['activity_status'][su] == 'Complete':
                                                step_status = 'Complete'
                                                timestemp = int(time.mktime(datetime.datetime.strptime(json_data_info['step_detail'][s]['activity_time'][su], "%Y-%m-%d %H:%M:%S").timetuple()))
                                                timestamp_info.append(timestemp)
                                                t1 = step_2['activity_time'][su]
                                                t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                                step_time_1.append(t2)
                                            elif json_data_info['step_detail'][s]['activity_status'][su] == 'Approve':
                                                step_status = 'Complete'
                                                timestemp = int(time.mktime(datetime.datetime.strptime(json_data_info['step_detail'][s]['activity_time'][su], "%Y-%m-%d %H:%M:%S").timetuple()))
                                                timestamp_info.append(timestemp)
                                                t1 = step_2['activity_time'][su]
                                                t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                                step_time_1.append(t2)
                                            elif json_data_info['step_detail'][s]['activity_status'][su] == 'Reject':
                                                step_status = 'Reject'
                                                timestemp = int(time.mktime(datetime.datetime.strptime(json_data_info['step_detail'][s]['activity_time'][su], "%Y-%m-%d %H:%M:%S").timetuple()))
                                                timestamp_info.append(timestemp)
                                                t1 = step_2['activity_time'][su]
                                                t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                                step_time_1.append(t2)
                                            else:
                                                try:
                                                    step_status  = 'Incomplete'
                                                    # t1 = step_2['activity_time'][su]
                                                    # t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                                    # step_time_1.append(t2)
                                                    details_email_incomplete.append({'email':json_data_info['step_detail'][s]['one_email'],'step_num':json_data_info['step_num']})
                                                except Exception as ex:
                                                    step_status = 'Incomplete'
                                        arr_step_info.append(step_status)
                                        arr_step_info.append(step_before)
                        print(arr_step_info)
                        if status_doc == 'ACTIVE':
                            if 'Reject' in arr_step_info:
                                res_status_file = 'R'
                                res_status_file_string = 'เอกสารปฏิเสธอนุมัติ'
                            elif 'Incomplete_1' in arr_step_info or 'Pending_1' in arr_step_info:
                                res_status_file = 'W'
                                res_status_file_string = 'รออนุมัติ'
                            elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                                res_status_file = 'N'
                                res_status_file_string = 'กำลังดำเนินการ'
                            elif 'Wait__' in arr_step_info:
                                res_status_file = 'Z'
                                res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                            elif 'Waitting' in arr_step_info:
                                res_status_file = 'W'
                                res_status_file_string = 'รออนุมัติ'
                            else:
                                res_status_file_string = 'อนุมัติแล้ว'
                            if res_status_file == 'W':
                                statusFile_count_wait = statusFile_count_wait + 1
                            elif res_status_file == 'Y':
                                statusFile_count_approve = statusFile_count_approve + 1
                            elif res_status_file == 'R':
                                statusFile_count_reject = statusFile_count_reject + 1
                            else:
                                statusFile_count_pendding = statusFile_count_pendding + 1
                        else:
                            if status_doc == 'REJECT':
                                res_status_file = 'C'
                                res_status_file_string = 'เอกสารถูกยกเลิก'
                                statusFile_count_cancle = statusFile_count_cancle + 1
                            elif status_doc == 'DELETE':
                                res_status_file = 'D'
                                res_status_file_string = 'เอกสารถูกลบ'
                                statusFile_count_delete = statusFile_count_delete + 1

                        dateTime_String = query_document_tmp[u].send_time
                        start_send_time = dateTime_String.timestamp()
                        now = datetime.datetime.now()
                        timing = (now.timestamp()) - start_send_time
                        timing_1 = convert_hr_min_sec_v1(int(timing))
                        string_timing = ''
                        for yy in range(len(timing_1)):

                            if timing_1[yy] > 0:
                                if yy == 0:
                                    type_date = " วัน "
                                elif yy == 1:
                                    type_date = " ชั่วโมง "
                                elif yy == 2:
                                    type_date = " นาที "
                                elif yy == 3:
                                    type_date = " วินาที "
                                string_timing += str(timing_1[yy]) + type_date
                        # list_string_timing.append(string_timing)
                        # string_timing = ''
                        # print ('list_steptime1',step_time_1)
                        if(len(step_time_1) != 0):
                            for i in range(len(step_time_1)):
                                if(i==0):
                                    string_list_timeline = ''
                                    # print ('เริ่มต้น : ',start_send_time)
                                    result = step_time_1[i] - start_send_time
                                    # print ('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ',result)
                                    list_timeline = convert_hr_min_sec_v1(int(result))
                                    # print ('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ : ',list_timeline)
                                    for yy in range(len(list_timeline)):
                                        if list_timeline[yy] > 0:
                                            if yy == 0:
                                                type_date = " วัน "
                                            elif yy == 1:
                                                type_date = " ชั่วโมง "
                                            elif yy == 2:
                                                type_date = " นาที "
                                            elif yy == 3:
                                                type_date = " วินาที "
                                            string_list_timeline += str(list_timeline[yy]) + type_date
                                    # print('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ (string)',string_list_timeline)
                                    step_timeline.append(string_list_timeline)

                                else:
                                    string_list_timeline = ''
                                    result = step_time_1[i] - step_time_1[i-1]
                                    # print ('ลำดับปัจจุบัน- ลำดับก่อนหน้า',result)
                                    list_timeline = convert_hr_min_sec_v1(int(result))
                                    for yy in range(len(list_timeline)):
                                        if list_timeline[yy] > 0:
                                            if yy == 0:
                                                type_date = " วัน "
                                            elif yy == 1:
                                                type_date = " ชั่วโมง "
                                            elif yy == 2:
                                                type_date = " นาที "
                                            elif yy == 3:
                                                type_date = " วินาที "
                                            string_list_timeline += str(list_timeline[yy]) + type_date
                                    # print('เริ่มต้น - ลำดับก่อนหน้า (string)',string_list_timeline)
                                    step_timeline.append(string_list_timeline)
                            # print ("สรุปเวลาการเซ็นแต่ละลำดับ :",step_timeline)
                            for j in range(len(step_timeline)):
                                if(j == (len(step_timeline))-1):
                                    concat_steptimeline += '-ลำดับที่ ' +str(j+1)+ ' : ' + str(step_timeline[j])
                                else:
                                    concat_steptimeline += '-ลำดับที่ ' +str(j+1)+ ' : ' + str(step_timeline[j]) + '\n'
                            # print ('concat_steptimeline',concat_steptimeline)
                        elif(len(step_time_1) == 0):
                            if res_status_file == 'C':
                                concat_steptimeline = ''
                            elif res_status_file == 'D':
                                concat_steptimeline = ''
                            else:
                                concat_steptimeline = 'อยู่ระหว่างดำเนินการ'

                        # string_details_avg_time = ''
                        string_details_avg_time = ''
                        if len(timestamp_info) != 0:
                            # end_time_document = timestamp_info[-1]
                            # result_start_and_end = end_time_document - start_send_time
                            end_time_document = timestamp_info[-1]
                            result_start_and_end = end_time_document - start_send_time
                            list_day_hr_min_sec = convert_hr_min_sec_v1(int(result_start_and_end))
                            for yy in range(len(list_day_hr_min_sec)):
                                if list_day_hr_min_sec[yy] > 0:
                                    if yy == 0:
                                        type_date = " วัน "
                                    elif yy == 1:
                                        type_date = " ชั่วโมง "
                                    elif yy == 2:
                                        type_date = " นาที "
                                    elif yy == 3:
                                        type_date = " วินาที "
                                    string_details_avg_time += str(list_day_hr_min_sec[yy]) + type_date
                        print(string_details_avg_time)
                        if res_status_file == 'N':
                            string_details_avg_time = ""
                        # th_dateTime_1 = convert_datetime_TH_1(int(dateTime_String.timestamp()))
                        th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                        ts = int(time.time())
                        date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                        year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                        datetime_display = int(dateTime_String.timestamp())
                        date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                        yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                        time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                        time_reject = datetime.datetime.fromtimestamp(datetime_display).strftime(' %H:%M:%S')
                        old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                        if date_time_today == date_time_db:
                            date_display_show = time_show_db
                        else:
                            if year_today == yar_db:
                                date_display_show = convert_datetime_TH_2_display(datetime_display)
                            else:
                                date_display_show = old_year
                        string_remark_description = ''
                        title_remark = ''
                        if res_status_file == 'R':
                            if len(details_email_reject) != 0:
                                for o in range(len(details_email_reject)):
                                    query_data = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(details_email_reject[o]['email'])).all()
                                    data_json_name = eval(query_data[0].citizen_data)['first_name_th'] + ' ' + eval(query_data[0].citizen_data)['last_name_th']
                                    # print(data_json_name)
                                    details_msg = {}
                                    details_msg['reject_by'] = details_email_reject[o]['email']
                                    details_msg['reject_in_step_num'] = str(details_email_reject[o]['step_num'])
                                    details_msg['reject_in_datetime'] = details_email_reject[o]['datetime']
                                    title_remark = 'ปฏิเสธอนุมัติโดย ลำดับที่ ' + str(details_email_reject[o]['step_num'])
                                    datetime_display = convert_datetime_TH_2(int(details_email_reject[o]['datetime_string']))
                                    string_remark_description +=  '\n-' + data_json_name + '\n' + datetime_display + time_reject
                                    lis_details.append(details_msg)
                        elif res_status_file == 'N':
                            if len(details_email_incomplete) != 0:
                                for oi in range(len(details_email_incomplete)):
                                    tmp_step_num_list_0 = details_email_incomplete[0]['step_num']
                                    tmp_step_num_list = details_email_incomplete[oi]['step_num']
                                    if tmp_step_num_list_0 == tmp_step_num_list:
                                        query_data = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(details_email_incomplete[oi]['email'])).all()
                                        try:
                                            data_json_name = eval(query_data[0].citizen_data)['first_name_th'] + ' ' + eval(query_data[0].citizen_data)['last_name_th']
                                        except Exception as e:
                                            data_json_name = details_email_incomplete[oi]['email']

                                        details_msg = {}
                                        details_msg['pending_by'] = details_email_incomplete[oi]['email']
                                        details_msg['pending_in_step_num'] = str(details_email_incomplete[oi]['step_num'])
                                        title_remark = 'รอการอนุมัติ ลำดับที่ ' + str(details_email_incomplete[oi]['step_num'])
                                        string_remark_description += '\n-' + data_json_name + ''
                                        lis_details.append(details_msg)
                    else: 
                        details_email_reject = []
                        tmp_sum_email = []
                        step_status = ''
                        res_status_file = 'Y'
                        res_status_file_string = ''
                        step_before = ''
                        step_list_before = []
                        step_list_ = []
                        step_list_next = []
                        arr_step_totle = []
                        step_me = ''
                        step_sum_status = []
                        sum_status_step_list = []
                        list_check_step = []
                        step_list_data = []
                        max_step = (len(jsonData_eval))
                        step_infomation = jsonData_eval
                        sum_status_step = []
                        tmp_status_sum = []
                        tmp_acvt_code_sum = []
                        arr_email_list = []
                        email_step_sum = []
                        arr_04_sid = []
                        details_email_incomplete = []
                        for i in range(len(step_infomation)):
                            list_check_step = []
                            json_step_info_2 = {}
                            step_list_data = []
                            step_ = step_infomation[i]
                            step_num = step_infomation[i]['step_num']
                            json_step_info_2['step_status'] = ''
                            for m in range(len(step_['step_detail'])):
                                oneMail = step_['step_detail'][m]['one_email']
                                # if str(oneMail).replace(' ','').lower() == self.emailUser:
                                #     step_me = step_infomation[i]['step_num']
                                #     step_me = int(step_me) - 1
                                step_2 = step_['step_detail'][m]
                                for k in range(len(step_2['activity_code'])):
                                    if step_2['activity_code'][k] == 'A03':
                                        # print()
                                        if step_2['activity_status'][k] == 'Complete':
                                            timestemp = int(time.mktime(datetime.datetime.strptime(step_2['activity_time'][k], "%Y-%m-%d %H:%M:%S").timetuple()))
                                            timestamp_info.append(timestemp)
                                            t1 = step_2['activity_time'][k]
                                            t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                            step_time_1.append(t2)
                                        elif step_2['activity_status'][k] == 'Approve':
                                            timestemp = int(time.mktime(datetime.datetime.strptime(step_2['activity_time'][k], "%Y-%m-%d %H:%M:%S").timetuple()))
                                            timestamp_info.append(timestemp)
                                            t1 = step_2['activity_time'][k]
                                            t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                            step_time_1.append(t2)
                                        elif step_2['activity_status'][k] == 'Reject':
                                            timestemp = int(time.mktime(datetime.datetime.strptime(step_2['activity_time'][k], "%Y-%m-%d %H:%M:%S").timetuple()))
                                            timestamp_info.append(timestemp)
                                            t1 = step_2['activity_time'][k]
                                            t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                            step_time_1.append(t2)
                                        json_step_info = {}
                                        json_step_info['activity_status'] = step_2['activity_status'][k]
                                        json_step_info['one_email'] = step_2['one_email']
                                        json_step_info['step_num'] = step_num
                                        list_check_step.append(json_step_info['activity_status'])
                                        step_list_data.append(json_step_info)
                                # print ('Round time', step_time_1)
                                json_step_info_2['step_info'] = step_list_data
                                if json_step_info_2['step_status'] == '':
                                    if 'Reject' in list_check_step:
                                        for kz in range(len(step_2['activity_code'])):
                                            if step_2['activity_code'][kz] == 'A03':
                                                details_email_reject.append({'email':step_2['one_email'],'step_num':step_num,'datetime':step_2['activity_time'][kz],'datetime_string':time.mktime(datetime.datetime.strptime(step_2['activity_time'][kz], "%Y-%m-%d %H:%M:%S").timetuple())})
                                        json_step_info_2['step_status'] = 'Reject'
                                    elif 'Complete' in list_check_step:
                                        json_step_info_2['step_status'] = 'Complete'
                                    elif 'Approve' in list_check_step:
                                        json_step_info_2['step_status'] = 'Complete'
                                    elif 'Incomplete' in list_check_step:
                                        # details_email_incomplete.append({'email':step_2['one_email'],'step_num':step_num})
                                        json_step_info_2['step_status'] = 'Incomplete'
                                    elif 'Pending' in list_check_step:
                                        # details_email_incomplete.append({'email':step_2['one_email'],'step_num':step_num})
                                        json_step_info_2['step_status'] = 'Incomplete'
                                    else:
                                        json_step_info_2['step_status'] = 'Complete'
                                if json_step_info_2['step_status'] == 'Incomplete':
                                    if 'Reject' in list_check_step:
                                        json_step_info_2['step_status'] = 'Reject'
                                    elif 'Complete' in list_check_step:
                                        json_step_info_2['step_status'] = 'Complete'
                                    elif 'Approve' in list_check_step:
                                        json_step_info_2['step_status'] = 'Complete'
                                    elif 'Incomplete' in list_check_step:
                                        details_email_incomplete.append({'email':step_2['one_email'],'step_num':step_num})
                                        json_step_info_2['step_status'] = 'Incomplete'
                                    elif 'Pending' in list_check_step:
                                        details_email_incomplete.append({'email':step_2['one_email'],'step_num':step_num})
                                        json_step_info_2['step_status'] = 'Incomplete'
                                    else:
                                        json_step_info_2['step_status'] = 'Complete'

                                sum_status_step_list.append(json_step_info_2['step_status'])
                            sum_status_step.append(json_step_info_2['step_status'])
                            arr_step_info.append(json_step_info_2['step_status'])
                        index_mystep = step_me
                        # print(sid_email)
                        # print(arr_step_info)
                        if status_doc == 'ACTIVE':
                            if 'Reject' in arr_step_info:
                                res_status_file = 'R'
                                res_status_file_string = 'เอกสารปฏิเสธอนุมัติ'
                            elif 'Incomplete_1' in arr_step_info or 'Pending_1' in arr_step_info:
                                res_status_file = 'W'
                                res_status_file_string = 'รออนุมัติ'
                            elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                                res_status_file = 'N'
                                res_status_file_string = 'กำลังดำเนินการ'
                            elif 'Wait__' in arr_step_info:
                                res_status_file = 'Z'
                                res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                            elif 'Waitting' in arr_step_info:
                                res_status_file = 'W'
                                res_status_file_string = 'รออนุมัติ'
                            else:
                                res_status_file_string = 'อนุมัติแล้ว'
                            if res_status_file == 'W':
                                statusFile_count_wait = statusFile_count_wait + 1
                            elif res_status_file == 'Y':
                                statusFile_count_approve = statusFile_count_approve + 1
                            elif res_status_file == 'R':
                                statusFile_count_reject = statusFile_count_reject + 1
                            else:
                                statusFile_count_pendding = statusFile_count_pendding + 1
                        else:
                            if status_doc.upper() == 'REJECT':
                                res_status_file = 'C'
                                res_status_file_string = 'เอกสารถูกยกเลิก'
                                statusFile_count_cancle = statusFile_count_cancle + 1
                            elif status_doc.upper() == 'DELETE':
                                res_status_file = 'D'
                                res_status_file_string = 'เอกสารถูกลบ'
                                statusFile_count_delete = statusFile_count_delete + 1

                        dateTime_String = query_document_tmp[u].send_time
                        start_send_time = dateTime_String.timestamp()
                        now = datetime.datetime.now()
                        timing = (now.timestamp()) - start_send_time
                        timing_1 = convert_hr_min_sec_v1(int(timing))
                        string_timing = ''
                        for yy in range(len(timing_1)):

                            if timing_1[yy] > 0:
                                if yy == 0:
                                    type_date = " วัน "
                                elif yy == 1:
                                    type_date = " ชั่วโมง "
                                elif yy == 2:
                                    type_date = " นาที "
                                elif yy == 3:
                                    type_date = " วินาที "
                                string_timing += str(timing_1[yy]) + type_date
                        # list_string_timing.append(string_timing)
                        # string_timing = ''
                        # print ('list_steptime1',step_time_1)
                        if(len(step_time_1) != 0):

                            for i in range(len(step_time_1)):
                                if(i==0):
                                    string_list_timeline = ''
                                    # print ('เริ่มต้น : ',start_send_time)
                                    result = step_time_1[i] - start_send_time
                                    # print ('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ',result)
                                    list_timeline = convert_hr_min_sec_v1(int(result))
                                    # print ('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ : ',list_timeline)
                                    for yy in range(len(list_timeline)):
                                        if list_timeline[yy] > 0:
                                            if yy == 0:
                                                type_date = " วัน "
                                            elif yy == 1:
                                                type_date = " ชั่วโมง "
                                            elif yy == 2:
                                                type_date = " นาที "
                                            elif yy == 3:
                                                type_date = " วินาที "
                                            string_list_timeline += str(list_timeline[yy]) + type_date
                                    # print('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ (string)',string_list_timeline)
                                    step_timeline.append(string_list_timeline)
                                else:
                                    string_list_timeline = ''
                                    result = step_time_1[i] - step_time_1[i-1]
                                    # print ('ลำดับปัจจุบัน- ลำดับก่อนหน้า',result)
                                    list_timeline = convert_hr_min_sec_v1(int(result))
                                    for yy in range(len(list_timeline)):
                                        if list_timeline[yy] > 0:
                                            if yy == 0:
                                                type_date = " วัน "
                                            elif yy == 1:
                                                type_date = " ชั่วโมง "
                                            elif yy == 2:
                                                type_date = " นาที "
                                            elif yy == 3:
                                                type_date = " วินาที "
                                            string_list_timeline += str(list_timeline[yy]) + type_date
                                    # print('เริ่มต้น - ลำดับก่อนหน้า (string)',string_list_timeline)
                                    step_timeline.append(string_list_timeline)
                                    string_list_timeline = ''
                            # print ("สรุปเวลาการเซ็นแต่ละลำดับ :",step_timeline)
                            for j in range(len(step_timeline)):
                                if(j == (len(step_timeline))-1):
                                    concat_steptimeline += '-ลำดับที่ ' +str(j+1)+ ' : ' + str(step_timeline[j])
                                else:
                                    concat_steptimeline += '-ลำดับที่ ' +str(j+1)+ ' : ' + str(step_timeline[j]) + '\n'
                            # print ('concat_steptimeline',concat_steptimeline)
                        elif(len(step_time_1) == 0):
                            if res_status_file == 'C':
                                concat_steptimeline = ''
                            elif res_status_file == 'D':
                                concat_steptimeline = ''
                            else:
                                concat_steptimeline = 'อยู่ระหว่างดำเนินการ'

                        # string_details_avg_time = ''
                        string_details_avg_time = ''
                        if len(timestamp_info) != 0:
                            # end_time_document = timestamp_info[-1]
                            # result_start_and_end = end_time_document - start_send_time
                            end_time_document = timestamp_info[-1]
                            result_start_and_end = end_time_document - start_send_time
                            list_day_hr_min_sec = convert_hr_min_sec_v1(int(result_start_and_end))
                            # print(end_time_document,start_send_time)
                            # print(timestamp_info)
                            for yy in range(len(list_day_hr_min_sec)):
                                if list_day_hr_min_sec[yy] > 0:
                                    if yy == 0:
                                        type_date = " วัน "
                                    elif yy == 1:
                                        type_date = " ชั่วโมง "
                                    elif yy == 2:
                                        type_date = " นาที "
                                    elif yy == 3:
                                        type_date = " วินาที "
                                    string_details_avg_time += str(list_day_hr_min_sec[yy]) + type_date
                        # print(string_details_avg_time)
                        if res_status_file == 'N':
                            string_details_avg_time = ""
                        # th_dateTime_1 = convert_datetime_TH_1(int(dateTime_String.timestamp()))
                        th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                        ts = int(time.time())
                        date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                        year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                        datetime_display = int(dateTime_String.timestamp())
                        date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                        yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                        time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                        time_reject = datetime.datetime.fromtimestamp(datetime_display).strftime(' %H:%M:%S')
                        old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                        if date_time_today == date_time_db:
                            date_display_show = time_show_db
                        else:
                            if year_today == yar_db:
                                date_display_show = convert_datetime_TH_2_display(datetime_display)
                            else:
                                date_display_show = old_year
                        string_remark_description = ''
                        title_remark = ''
                        if res_status_file == 'R':
                            if len(details_email_reject) != 0:
                                for o in range(len(details_email_reject)):
                                    query_data = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(details_email_reject[o]['email'])).all()
                                    try:
                                        data_json_name = eval(query_data[0].citizen_data)['first_name_th'] + ' ' + eval(query_data[0].citizen_data)['last_name_th']
                                    except Exception as e:
                                        data_json_name = details_email_incomplete[oi]['email']
                                    # print(data_json_name)
                                    details_msg = {}
                                    details_msg['reject_by'] = details_email_reject[o]['email']
                                    details_msg['reject_in_step_num'] = details_email_reject[o]['step_num']
                                    details_msg['reject_in_datetime'] = details_email_reject[o]['datetime']
                                    title_remark = 'ปฏิเสธอนุมัติโดย ลำดับที่ ' + str(details_email_reject[o]['step_num'])
                                    datetime_display = convert_datetime_TH_2(int(details_email_reject[o]['datetime_string']))
                                    string_remark_description +=  '\n-' + data_json_name + '\n ' + datetime_display + time_reject
                                    lis_details.append(details_msg)
                        elif res_status_file == 'N':
                            if len(details_email_incomplete) != 0:
                                for oi in range(len(details_email_incomplete)):
                                    tmp_step_num_list_0 = details_email_incomplete[0]['step_num']
                                    tmp_step_num_list = details_email_incomplete[oi]['step_num']
                                    if tmp_step_num_list_0 == tmp_step_num_list:
                                        query_data = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(details_email_incomplete[oi]['email'])).all()
                                        try:
                                            data_json_name = eval(query_data[0].citizen_data)['first_name_th'] + ' ' + eval(query_data[0].citizen_data)['last_name_th']
                                        except Exception as e:
                                            data_json_name = details_email_incomplete[oi]['email']

                                        details_msg = {}
                                        details_msg['pending_by'] = details_email_incomplete[oi]['email']
                                        details_msg['pending_in_step_num'] = details_email_incomplete[oi]['step_num']
                                        title_remark = 'รอการอนุมัติ ลำดับที่ ' + str(details_email_incomplete[oi]['step_num'])
                                        string_remark_description += '\n-' + data_json_name + ''
                                        lis_details.append(details_msg)
                    tmp_json = {}
                    ts = int(time.time())
                    date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                    year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                    dateTime_timestamp = int((query_document_tmp[u].send_time).timestamp())
                    update_time_timestamp = int((query_document_tmp[u].update_time).timestamp())
                    date_time_db = datetime.datetime.fromtimestamp(dateTime_timestamp).strftime('%Y-%m-%d')
                    yar_db = datetime.datetime.fromtimestamp(dateTime_timestamp).strftime('%Y')
                    time_show_db = datetime.datetime.fromtimestamp(dateTime_timestamp).strftime('%H:%M')
                    old_year = datetime.datetime.fromtimestamp(dateTime_timestamp).strftime('%d/%m/%Y')
                    if date_time_today == date_time_db:
                        date_display_show = time_show_db
                    else:
                        if year_today == yar_db:
                            date_display_show = convert_datetime_TH_2_display(dateTime_timestamp)
                        else:
                            date_display_show = old_year

                    if query_document_tmp[u].urgent_type != None:
                        documentUrgentType = query_document_tmp[u].urgent_type
                        if documentUrgentType == 'I':
                            documentUrgentString = 'ด่วนมาก'
                        elif documentUrgentType == 'U':
                            documentUrgentString = 'ด่วน'
                        elif documentUrgentType == 'M':
                            documentUrgentString = 'ปกติ'

                    if query_document_tmp[u].documentJson != None:
                        documentJson_result = eval(query_document_tmp[u].documentJson)
                        print(documentJson_result)
                        documentName = documentJson_result['document_name']
                        documentType = documentJson_result['document_type']
                    else:
                        documentName = None
                        documentType = None
                    
                    senderName = query_document_tmp[u].sender_name
                    updatetime_date_th = convert_datetime_TH_2(update_time_timestamp)
                    updatetim_time = str(query_document_tmp[u].update_time).split(' ')[1].split('+')[0]
                    if res_status_file == 'C':
                        title_remark = 'เอกสารถูกยกเลิกวันที่\n'
                        string_remark_description = updatetime_date_th +' '+ updatetim_time
                    elif res_status_file == 'D':
                        title_remark = 'เอกสารถูกลบวันที่\n'
                        string_remark_description = updatetime_date_th +' '+ updatetim_time
                    elif res_status_file == 'R' and title_remark == '':
                        title_remark = 'ปฏิเสธอนุมัติโดย ลำดับที่ 1\n-'+ senderName +'\n'
                        string_remark_description = updatetime_date_th +' '+ updatetim_time
                    
                    tmp_json['update_time'] = query_document_tmp[u].update_time
                    tmp_json['update_time_String'] = str(query_document_tmp[u].update_time).split('+')[0]
                    tmp_json['update_time_String_TH'] = updatetime_date_th
                    tmp_json['update_time_time'] = updatetim_time
                    tmp_json['send_time'] = query_document_tmp[u].send_time
                    tmp_json['dateTime'] = dateTime_timestamp
                    tmp_json['dateTime_String'] = str(query_document_tmp[u].send_time).split('+')[0]
                    tmp_json['dateTime_String_TH_1'] = convert_datetime_TH_2(dateTime_timestamp)
                    tmp_json['dateTime_display'] = date_display_show
                    tmp_json['date_String'] = str(query_document_tmp[u].send_time).split(' ')[0]
                    tmp_json['time_String'] = str(query_document_tmp[u].send_time).split(' ')[1].split('+')[0]

                    tmp_json['document_urgent_string'] = documentUrgentString
                    tmp_json['document_name'] = documentName
                    tmp_json['document_type'] = documentType
                    tmp_json['sender_name'] = senderName
                    tmp_json['sender_email'] = query_document_tmp[u].sender_email
                    if tmp_json['sender_name'] == 'null null':
                        tmp_json['sender_name'] = tmp_json['sender_email']
                    tmp_json['recipient_email'] = eval(query_document_tmp[u].recipient_email)
                    tmp_json['document_id'] = query_document_tmp[u].doc_id
                    tmp_json['tracking_id'] = query_document_tmp[u].tracking_id
                    tmp_json['file_name'] = query_document_tmp[u].file_name
                    if query_document_tmp[u].string_pdf != None:
                        tmp_json['status_original_pdf_file'] = True
                    else:
                        tmp_json['status_original_pdf_file'] = False
                    if query_document_tmp[u].string_sign != None:
                        tmp_json['status_sign_pdf_file'] = True
                    else:
                        tmp_json['status_sign_pdf_file'] = False
                    # tmp_json['data_json'] = eval(query_document_tmp[u].data_json)
                    tmp_json['fid'] = query_document_tmp[u].fid
                    # tmp_json['document_type'] = query_document_tmp[u].documentType
                    # tmp_json['documentJson'] = query_document_tmp[u].documentJson
                    tmp_json['digit_sign'] = query_document_tmp[u].digit_sign
                    tmp_json['document_urgent'] = query_document_tmp[u].urgent_type
                    if query_document_tmp[u].options_page != None :
                        option_eval=eval(query_document_tmp[u].options_page)
                        list_options_page.append(option_eval)
                        tmp_json['options_page'] = list_options_page
                    else :
                        tmp_json['options_page'] = None
                    list_options_page.append(option_eval)
                    tmp_json['options_page'] = list_options_page

                    tmp_json['stamp_all'] = query_document_tmp[u].sign_page_options
                    tmp_json['sidCode'] = query_document_tmp[u].step_data_sid
                    try:
                        tmp_json['email_center'] = eval(query_document_tmp[u].email_center)
                    except Exception as e:
                        tmp_json['email_center'] = query_document_tmp[u].email_center
                    # if เช็คค่า null ของ attempted_folder -v-
                    tmp_json['attempted_folder'] = query_document_tmp[u].attempted_folder
                    tmp_json['status_file_code'] = res_status_file
                    tmp_json['status_file_details'] = lis_details
                    tmp_json['status_file_string'] = res_status_file_string
                    tmp_json['string_details_avg_time'] = string_details_avg_time
                    tmp_json['timeline'] = concat_steptimeline
                    tmp_json['timing'] = string_timing
                    tmp_json['remark_description'] = title_remark + string_remark_description


                    tmp_biz_info = (query_document_tmp[u].biz_info)
                    if tmp_biz_info == 'None':
                        tmp_biz_info = 'None'
                        list_biz = []
                        dict_biz= {}
                        dict_biz['id'] = None
                        dict_biz['id_card_num'] = None
                        dict_biz['first_name_eng'] = None
                        dict_biz['first_name_th'] = None
                        list_biz.append(dict_biz)
                        tmp_json['biz_detail'] = list_biz

                    else :
                        tmp_biz_info = eval(tmp_biz_info)
                        if 'id' in tmp_biz_info:
                            tmp_id_biz = tmp_biz_info['id']
                            tmp_id_card_num_biz = tmp_biz_info['id_card_num']
                            tmp_first_name_eng_biz = tmp_biz_info['first_name_eng']
                            tmp_first_name_th_biz = tmp_biz_info['first_name_th']
                        tmp_json['biz_detail'] = [{'id':tmp_id_biz,'id_card_num':tmp_id_card_num_biz,'first_name_eng':tmp_first_name_eng_biz,'first_name_th':tmp_first_name_th_biz}]

                    # print (u)
                    sum_Document = sum_Document+1

                    if ((u+1) == len(query_document_tmp)):
                        last_time = (tmp_json['send_time'])
                        dt_object = int(datetime.datetime.timestamp(last_time))


                    tmp_list_result.append(tmp_json)
                tmp_data['data'] = tmp_list_result
                tmp_data['sum_Document'] = len(tmp_list_result)
                tmp_data['Document_Status_Details']  = [{
                    'Incomplete_Pendding':statusFile_count_pendding,
                    'Complete_Approve':statusFile_count_approve,
                    'Cancle' : statusFile_count_cancle,
                    'Reject':statusFile_count_reject,
                    'Delete' :statusFile_count_delete
                }]
                tmp_list_result2.append(tmp_data)
                # print ('tmp_list_result2',tmp_list_result2)
                return {'result':'OK','last_time':dt_object,'messageText':tmp_list_result2}
            else:
                return {'result':'ER','messageText':'data not found'}
        except exc.SQLAlchemyError as ex:
            db.session.rollback()
            raise
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            db.session.rollback()
            raise
            return {'result':'ER','messageText':'cant select ' + str(e)}
        finally:
            db.session.close()

    def select_admin_username_login_v1(self,username,password):
        self.username = username
        self.password = password
        tmp_json = {}
        tmp_json2 = {}
        json_data = []
        json_data2 = []
        check = False
        try:
            result_login = tb_user_admin.query.filter(tb_user_admin.username == self.username).filter(tb_user_admin.status == 'Active').first()

            print('result_login',result_login)
            tmp_json['result_login'] = result_login
            tmp_json2['level_admin'] = result_login.level_admin
            json_data.append(tmp_json)
            json_data2.append(tmp_json2)
            if result_login != None:
                check = True
                return {'result':'OK','messageText':json_data,'check':check,'level_admin':json_data2}
            else:
                check = False
                return {'result':'ER','messageText':None,'check':check,'level_admin':None}
        except exc.SQLAlchemyError as ex:
            return {'result':'ER','messageText':str(ex),'check':check,'level_admin':None}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex),'check':check,'level_admin':None}

    def select_admin_dashboard_pdf_v1(self,sidcode):
        self.sidcode = sidcode
        tmp_list_result = []
        try:
            query_pdf_tmp = view_document.query.filter(view_document.step_data_sid == self.sidcode).all()
        except Exception as e:
            return {'result':'ER','messageText':str(e)}
        try:
            if len(query_pdf_tmp) !=0:
                for u in range(len(query_pdf_tmp)):
                    tmp_json = {}
                    tmp_json['string_pdf'] = query_pdf_tmp[u].string_pdf
                    tmp_json['string_sign'] = query_pdf_tmp[u].string_sign
                    tmp_json['pdf_rejectorcancle'] = query_pdf_tmp[u].pdf_rejectorcancle
                    tmp_json['file_name'] = query_pdf_tmp[u].file_name
                    tmp_list_result.append(tmp_json)
                    return {'result':'OK','messageText':tmp_list_result}
            else:
                return {'result':'ER','messageText':'data not found'}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            db.session.rollback()
            raise
            return {'result':'ER','messageText':'cant select','messageER':str(e)}
        finally:
            db.session.close()

    def select_citizenlogin_to_onechatlogin_addbottofrdAUto(self,user_id):
        self.user_id = user_id
        json_data = []
        json_data2 = []
        one_access_token = None
        email_addbot = None
        list_email = []
        list_userid = []
        list_one_access_token = []
        list_access_token = []
        credentials_list = None
        access_token = None

        try:
            query_by_userid = paper_lesslogin.query.filter(paper_lesslogin.account_id == self.user_id).first()
            tmp_json = {}
            tmp_json['user_id'] = self.user_id
            # list_userid.append(self.user_id)
            # tmp_json['id'] = query_by_userid.id
            # tmp_json['username'] =  query_by_userid.username
            # tmp_json['access_time'] =  query_by_userid.access_time
            # tmp_json['vertify_token'] =  query_by_userid.vertify_token
            access_token = query_by_userid.access_token
            # tmp_json['access_token'] =  access_token
            # list_access_token.append(access_token)
            # tmp_json['access_token_time'] =  query_by_userid.access_token_time
            # tmp_json['access_token_begin'] =  query_by_userid.access_token_begin

            one_access_token = query_by_userid.one_access_token
            # tmp_json['one_access_token'] =  one_access_token
            # list_one_access_token.append(one_access_token)

            citizen = query_by_userid.citizen_data
            citizen_eval = eval(str(citizen))
            tmp_json['citizen_data'] = citizen_eval
            email = citizen_eval['email']
            for x in range(len(email)):
                email_addbot = citizen_eval['email'][x]['email']


            # tmp_json['hash_data'] =  query_by_userid.hash_data

            # biz_info = query_by_userid.biz_information
            # biz_info_eval = eval(str(biz_info))
            # tmp_json['biz_information'] = biz_info_eval
            # tmp_json['secure_number'] = query_by_userid.secure_number
            # tmp_json['ipaddress'] = query_by_userid.ipaddress
            tmp_json2 = {}
            tmp_json2['user_id'] = self.user_id
            tmp_json2['one_access_token'] = one_access_token
            tmp_json2['access_token'] = access_token
            tmp_json2['email_addbot'] = email_addbot
            json_data2.append(tmp_json2)
            # json_data.append(tmp_json)
            return {'result':'OK','messageText': json_data,'status_Code':200,'messageER':None,'forward':json_data2}
        except Exception as e:
            return {'result':'ER','messageText':str(e)}

    def select_admin_document_one_v1(self,sidCode,tax_id):
        self.sidCode = sidCode
        self.tax_id = tax_id
        tmp_list_result = []
        tmp_list_result2 = []
        tmp_data = {}
        query_document_tmp = None
        sum_Document = 0
        try:
            if self.tax_id == 'citizen':
                query_document_tmp = view_document.query.filter(view_document.step_data_sid == self.sidCode).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
            else:
                query_document_tmp = view_document.query.filter(view_document.step_data_sid == self.sidCode).filter(view_document.biz_info.contains(self.tax_id)).all()
        except Exception as e:
            return {'result':'ER','messageText':str(e)}
        try:
            if len(query_document_tmp) !=0:
                for u in range(len(query_document_tmp)):
                    tmp_json = {}
                    tmp_json['send_time'] = query_document_tmp[u].send_time
                    tmp_json['sender_name'] = query_document_tmp[u].sender_name
                    tmp_json['sender_email'] = query_document_tmp[u].sender_email
                    if tmp_json['sender_name'] == 'null null':
                        tmp_json['sender_name'] = tmp_json['sender_email']
                    tmp_json['recipient_email'] = eval(query_document_tmp[u].recipient_email)
                    tmp_json['document_id'] = query_document_tmp[u].doc_id
                    tmp_json['tracking_id'] = query_document_tmp[u].tracking_id
                    tmp_json['file_name'] = query_document_tmp[u].file_name
                    eval_data_json = eval(query_document_tmp[u].data_json)
                    tmp_json['file_user_status_detail'] = []

                    if 'step_num' in eval_data_json:
                        print ('CASE:IF')
                        status_step_sum = ''
                        sum_status_step_list = []
                        list_check_step = []
                        json_step_info_2 = {}
                        step_list_data = []

                        step_ = eval_data_json
                        step_num = eval_data_json['step_num']
                        tmp_json['step_info'] = eval_data_json         #[eval(result_Select_step.data_json)]
                        json_step_info_2['step_status'] = ''
                        for su in range(len(step_['step_detail'])):
                            step_2 = step_['step_detail'][su]
                            for k in range(len(step_2['activity_code'])):
                                if step_2['activity_code'][k] == 'A03':
                                    json_step_info = {}
                                    json_step_info['activity_status'] = step_2['activity_status'][k]
                                    json_step_info['one_email'] = str(step_2['one_email']).replace(' ','')
                                    query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(step_2['one_email'])).all()
                                    if len(query_name_account) != 0:
                                        tmp_account_name = eval(query_name_account[0].citizen_data)
                                        try:
                                            tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                        except Exception as e:
                                            tmp_account_name=None
                                    else:
                                        tmp_account_name = None
                                    json_step_info['account_name'] = tmp_account_name
                                    json_step_info['step_num'] = step_num

                                    list_check_step.append(json_step_info['activity_status'])
                                    step_list_data.append(json_step_info)
                            json_step_info_2['step_info'] = step_list_data
                        if json_step_info_2['step_status'] == '':
                            if 'Reject' in list_check_step:
                                json_step_info_2['step_status'] = 'Reject'
                            elif 'Approve' in list_check_step:
                                json_step_info_2['step_status'] = 'Complete'
                            elif 'Complete' in list_check_step:
                                json_step_info_2['step_status'] = 'Complete'
                            elif 'Incomplete' in list_check_step:
                                json_step_info_2['step_status'] = 'Incomplete'
                            elif 'Pending' in list_check_step:
                                json_step_info_2['step_status'] = 'Incomplete'
                            else:
                                json_step_info_2['step_status'] = 'Complete'
                        sum_status_step_list.append(json_step_info_2['step_status'])
                        tmp_json['file_user_status_detail'].append(json_step_info_2)

                        if 'Reject' in sum_status_step_list:
                            status_step_sum = 'Reject'
                        elif 'Incomplete' in sum_status_step_list:
                            status_step_sum = 'Incomplete'
                        elif 'Pending' in sum_status_step_list:
                            status_step_sum = 'Incomplete'
                        else:
                            status_step_sum = 'Complete'
                        tmp_json['file_status_sum'] = status_step_sum
                    else:
                        print ('CASE:ELSE')
                        status_step_sum = ''
                        sum_status_step_list = []
                        alr_mail = []
                        tmp_json['step_info'] = eval_data_json                  #eval(result_Select_step.data_json)
                        for i in range(len(eval_data_json)):
                            list_check_step = []
                            json_step_info_2 = {}
                            step_list_data = []
                            step_ = eval_data_json[i]
                            step_num = eval_data_json[i]['step_num']
                            json_step_info_2['step_status'] = ''
                            for su2 in range(len(step_['step_detail'])):
                                step_2 = step_['step_detail'][su2]
                                for k in range(len(step_2['activity_code'])):
                                    if step_2['activity_code'][k] == 'A03':
                                        json_step_info = {}
                                        json_step_info['activity_status'] = step_2['activity_status'][k]
                                        json_step_info['one_email'] = str(step_2['one_email']).replace(' ','')
                                        query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(step_2['one_email'])).all()
                                        if len(query_name_account) != 0:
                                            try:
                                                tmp_account_name = eval(query_name_account[0].citizen_data)
                                                tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                            except Exception as e:
                                                tmp_account_name = None
                                                exc_type, exc_obj, exc_tb = sys.exc_info()
                                                fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                                                print(exc_type, fname, exc_tb.tb_lineno)

                                        else:
                                            tmp_account_name = None
                                        json_step_info['step_num'] = step_num
                                        json_step_info['account_name'] = tmp_account_name
                                        list_check_step.append(json_step_info['activity_status'])
                                        step_list_data.append(json_step_info)
                                json_step_info_2['step_info'] = step_list_data
                            if json_step_info_2['step_status'] == '':
                                if 'Reject' in list_check_step:
                                    json_step_info_2['step_status'] = 'Reject'
                                elif 'Approve' in list_check_step:
                                    json_step_info_2['step_status'] = 'Complete'
                                elif 'Complete' in list_check_step:
                                    json_step_info_2['step_status'] = 'Complete'
                                elif 'Incomplete' in list_check_step:
                                    json_step_info_2['step_status'] = 'Incomplete'
                                elif 'Pending' in list_check_step:
                                    json_step_info_2['step_status'] = 'Incomplete'
                                else:
                                    json_step_info_2['step_status'] = 'Complete'
                            sum_status_step_list.append(json_step_info_2['step_status'])
                            tmp_json['file_user_status_detail'].append(json_step_info_2)
                        if 'Reject' in sum_status_step_list:
                            status_step_sum = 'Reject'
                        elif 'Incomplete' in sum_status_step_list:
                            status_step_sum = 'Incomplete'
                        elif 'Pending' in sum_status_step_list:
                            status_step_sum = 'Incomplete'
                        elif 'Approve' in sum_status_step_list:
                            status_step_sum = 'Complete'
                        elif 'Complete' in sum_status_step_list:
                            status_step_sum = 'Complete'
                        else:
                            status_step_sum = 'Complete'
                        tmp_json['file_status_sum'] = status_step_sum

                    tmp_json['fid'] = query_document_tmp[u].fid
                    tmp_json['document_type'] = query_document_tmp[u].documentType
                    tmp_json['documentJson'] = eval(query_document_tmp[u].documentJson)
                    tmp_json['digit_sign'] = query_document_tmp[u].digit_sign
                    tmp_json['document_urgent'] = query_document_tmp[u].urgent_type

                    option_eval=eval(query_document_tmp[u].options_page)
                    # list_options_page.append(option_eval)
                    # tmp_json['options_page'] = list_options_page

                    tmp_json['stamp_all'] = query_document_tmp[u].sign_page_options
                    tmp_json['sidCode'] = query_document_tmp[u].step_data_sid
                    tmp_json['email_center'] = query_document_tmp[u].email_center
                    tmp_json['biz_info'] = eval(query_document_tmp[u].biz_info)

                    tmp_json['step_Name'] = (query_document_tmp[u].step_Name)
                    tmp_json['documentDetails'] = (query_document_tmp[u].documentDetails)
                    tmp_json['condition_temp'] = (query_document_tmp[u].condition_temp)
                    tmp_json['step_Code'] = (query_document_tmp[u].step_Code)
                    tmp_json['status'] = (query_document_tmp[u].status)

                    tmp_json['attempted_folder'] = query_document_tmp[u].attempted_folder
                    tmp_biz_info = (query_document_tmp[u].biz_info)
                    if tmp_biz_info == 'None':
                        tmp_biz_info = 'None'
                        list_biz = []
                        dict_biz= {}
                        dict_biz['id'] = None
                        dict_biz['id_card_num'] = None
                        dict_biz['first_name_eng'] = None
                        dict_biz['first_name_th'] = None
                        list_biz.append(dict_biz)
                        tmp_json['biz_detail'] = list_biz

                    else :
                        tmp_biz_info = eval(tmp_biz_info)
                        if 'id' in tmp_biz_info:
                            tmp_id_biz = tmp_biz_info['id']
                            tmp_id_card_num_biz = tmp_biz_info['id_card_num']
                            tmp_first_name_eng_biz = tmp_biz_info['first_name_eng']
                            tmp_first_name_th_biz = tmp_biz_info['first_name_th']
                        tmp_json['biz_detail'] = [{'id':tmp_id_biz,'id_card_num':tmp_id_card_num_biz,'first_name_eng':tmp_first_name_eng_biz,'first_name_th':tmp_first_name_th_biz}]

                    # print (u)
                    sum_Document = sum_Document+1

                    if ((u+1) == len(query_document_tmp)):
                        last_time = (tmp_json['send_time'])
                        dt_object = int(datetime.datetime.timestamp(last_time))


                    tmp_list_result.append(tmp_json)
                tmp_data['data'] = tmp_list_result
                tmp_list_result2.append(tmp_data)
                return {'result':'OK','messageText':tmp_list_result2}
            else:
                return {'result':'ER','messageText':'data not found'}
        except exc.SQLAlchemyError as ex:
            db.session.rollback()
            raise
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            db.session.rollback()
            raise
            return {'result':'ER','messageText':'cant select','messageER':str(e)}
        finally:
            db.session.close()

    def select_admin_document_one_v2(self,sidCode,tax_id):
        self.sidCode = sidCode
        self.tax_id = tax_id
        tmp_list_result = []
        tmp_list_result2 = []
        tmp_data = {}
        query_document_tmp = None
        query_document_tmp2 = None
        sum_Document = 0

        tmp_list_sid_code = []
        count_document = 0
        count_rowDocument = 0
        count_rowDocument_StatusActive = 0
        count_rowDocument_StatusReject = 0
        count_rowDocument_StatusCancel = 0
        statusFile_count_approve = 0
        statusFile_count_pendding = 0
        statusFile_count_reject = 0
        statusFile_count_wait = 0
        step_time = []

        step_time_total = []
        t1 = None
        t2 = None

        sum_Document = 0
        Complete_Approve = 0
        Incomplete_Pendding = 0
        Reject = 0
        Wait = 0

        try:
            # query_document_tmp = view_document.query.filter(view_document.step_data_sid == self.sidCode).all()
            query_document_tmp2 = view_document.query.filter(view_document.step_data_sid == self.sidCode).all()
            eval_biz_info = eval(query_document_tmp2[0].biz_info)
            print ('eval_biz_info: ',eval_biz_info['id_card_num'])
            query_document_tmp = view_document.query.filter(view_document.step_data_sid == self.sidCode).filter(eval_biz_info['id_card_num'] == self.tax_id).all()

        except Exception as e:
            return {'result':'ER','messageText':str(e)}
        try:
            if len(query_document_tmp) !=0:
                tmp_data = {}
                documentJson_result = None
                string_list_timeline = ''
                concat_steptimeline = ''
                for u in range(len(query_document_tmp)):
                    print ('UUUU: ',u)
                    sid_email = query_document_tmp[u].step_data_sid
                    jsonData_eval = eval(query_document_tmp[u].data_json)
                    arr_step_info = []
                    timestamp_info = []
                    step_time_1 = []
                    step_timeline = []
                    result = None
                    timing_1 = None
                    lis_details = []
                    list_string_timing = []
                    list_options_page = []

                    if 'step_num' in jsonData_eval:
                        step_status = ''
                        step_before = ''
                        my_step = ''
                        res_status_file = 'Y'
                        arr_step_totle = []
                        json_data_info = jsonData_eval
                        details_email_reject = []
                        details_email_incomplete = []
                        if 'step_detail' in json_data_info:
                            for s in range(len(json_data_info['step_detail'])):
                                json_info_step2 = {}
                                for su in range(len(json_data_info['step_detail'][s]['activity_code'])):
                                    oneMail = json_data_info['step_detail'][s]['one_email']
                                    step_2 = json_data_info['step_detail'][s]
                                    # if str(oneMail).replace(' ','').lower() == self.emailUser:
                                    if json_data_info['step_detail'][s]['activity_code'][su] == 'A03':
                                        print(timestamp_info)
                                        print(sid_email)
                                        if my_step == '':
                                            if json_data_info['step_detail'][s]['activity_status'][su] == 'Complete':
                                                step_status = 'Complete'
                                                timestemp = int(time.mktime(datetime.datetime.strptime(json_data_info['step_detail'][s]['activity_time'][su], "%Y-%m-%d %H:%M:%S").timetuple()))
                                                timestamp_info.append(timestemp)
                                                t1 = step_2['activity_time'][su]
                                                t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                                step_time_1.append(t2)
                                            elif json_data_info['step_detail'][s]['activity_status'][su] == 'Approve':
                                                step_status = 'Complete'
                                                timestemp = int(time.mktime(datetime.datetime.strptime(json_data_info['step_detail'][s]['activity_time'][su], "%Y-%m-%d %H:%M:%S").timetuple()))
                                                timestamp_info.append(timestemp)
                                                t1 = step_2['activity_time'][su]
                                                t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                                step_time_1.append(t2)
                                            elif json_data_info['step_detail'][s]['activity_status'][su] == 'Reject':
                                                step_status = 'Reject'
                                                timestemp = int(time.mktime(datetime.datetime.strptime(json_data_info['step_detail'][s]['activity_time'][su], "%Y-%m-%d %H:%M:%S").timetuple()))
                                                timestamp_info.append(timestemp)
                                                t1 = step_2['activity_time'][su]
                                                t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                                step_time_1.append(t2)
                                            else:
                                                try:
                                                    step_status  = 'Incomplete'
                                                    # t1 = step_2['activity_time'][su]
                                                    # t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                                    # step_time_1.append(t2)
                                                    details_email_incomplete.append({'email':json_data_info['step_detail'][s]['one_email'],'step_num':json_data_info['step_num']})
                                                except Exception as ex:
                                                    step_status = 'Incomplete'
                                        arr_step_info.append(step_status)
                                        arr_step_info.append(step_before)
                        print(arr_step_info)
                        if 'Reject' in arr_step_info:
                            res_status_file = 'R'
                            res_status_file_string = 'เอกสารปฏิเสธอนุมัติ'
                        elif 'Complete' in arr_step_info:
                            res_status_file = 'Y'
                            res_status_file_string = 'อนุมัติแล้ว'
                        elif 'Waitting' in arr_step_info:
                            res_status_file = 'W'
                            res_status_file_string = 'รออนุมัติ'
                        elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                            res_status_file = 'N'
                            res_status_file_string = 'กำลังดำเนินการ'
                        else:
                            res_status_file_string = 'อนุมัติแล้ว'
                        if res_status_file == 'W':
                            statusFile_count_wait = statusFile_count_wait + 1
                        elif res_status_file == 'Y':
                            statusFile_count_approve = statusFile_count_approve + 1
                        elif res_status_file == 'R':
                            statusFile_count_reject = statusFile_count_reject + 1
                        else:
                            statusFile_count_pendding = statusFile_count_pendding + 1
                        string_timing = ''
                        dateTime_String = query_document_tmp[u].send_time
                        start_send_time = dateTime_String.timestamp()
                        now = datetime.datetime.now()
                        timing = (now.timestamp()) - start_send_time
                        timing_1 = convert_hr_min_sec_v1(int(timing))
                        for yy in range(len(timing_1)):
                            if timing_1[yy] > 0:
                                if yy == 0:
                                    type_date = " วัน "
                                elif yy == 1:
                                    type_date = " ชั่วโมง "
                                elif yy == 2:
                                    type_date = " นาที "
                                elif yy == 3:
                                    type_date = " วินาที "
                                string_timing += str(timing_1[yy]) + type_date
                        # list_string_timing.append(string_timing)
                        # string_timing = ''
                        print ('list_steptime1',step_time_1)
                        if(len(step_time_1) != 0):
                            for i in range(len(step_time_1)):
                                if(i==0):
                                    print ('เริ่มต้น : ',start_send_time)
                                    result = step_time_1[i] - start_send_time
                                    # print ('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ',result)
                                    list_timeline = convert_hr_min_sec_v1(int(result))
                                    # print ('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ : ',list_timeline)
                                    for yy in range(len(list_timeline)):
                                        if list_timeline[yy] > 0:
                                            if yy == 0:
                                                type_date = " วัน "
                                            elif yy == 1:
                                                type_date = " ชั่วโมง "
                                            elif yy == 2:
                                                type_date = " นาที "
                                            elif yy == 3:
                                                type_date = " วินาที "
                                            string_list_timeline += str(list_timeline[yy]) + type_date
                                    print('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ (string)',string_list_timeline)
                                    step_timeline.append(string_list_timeline)
                                    string_list_timeline = ''
                                else:
                                    result = step_time_1[i] - step_time_1[i-1]
                                    # print ('ลำดับปัจจุบัน- ลำดับก่อนหน้า',result)
                                    list_timeline = convert_hr_min_sec_v1(int(result))
                                    for yy in range(len(list_timeline)):
                                        if list_timeline[yy] > 0:
                                            if yy == 0:
                                                type_date = " วัน "
                                            elif yy == 1:
                                                type_date = " ชั่วโมง "
                                            elif yy == 2:
                                                type_date = " นาที "
                                            elif yy == 3:
                                                type_date = " วินาที "
                                            string_list_timeline += str(list_timeline[yy]) + type_date
                                    print('เริ่มต้น - ลำดับก่อนหน้า (string)',string_list_timeline)
                                    step_timeline.append(string_list_timeline)
                            print ("สรุปเวลาการเซ็นแต่ละลำดับ :",step_timeline)
                            concat_steptimeline += 'ระยะเวลาดำเนินการ\n'
                            for j in range(len(step_timeline)):
                                if(j == (len(step_timeline))-1):
                                    concat_steptimeline += '-ลำดับที่ ' +str(j+1)+ ' : ' + str(step_timeline[j])
                                else:
                                    concat_steptimeline += '-ลำดับที่ ' +str(j+1)+ ' : ' + str(step_timeline[j]) + '\n'
                            print ('concat_steptimeline',concat_steptimeline)
                        elif(len(step_time_1) == 0):
                            concat_steptimeline += 'อยู่ระหว่างดำเนินการ'

                        # string_details_avg_time = ''
                        string_details_avg_time = 'ระยะเวลาทั้งหมดที่เอกสารถูกดำเนินการ\n'
                        if len(timestamp_info) != 0:
                            # end_time_document = timestamp_info[-1]
                            # result_start_and_end = end_time_document - start_send_time
                            end_time_document = timestamp_info[-1]
                            result_start_and_end = end_time_document - start_send_time
                            list_day_hr_min_sec = convert_hr_min_sec_v1(int(result_start_and_end))
                            for yy in range(len(list_day_hr_min_sec)):
                                if list_day_hr_min_sec[yy] > 0:
                                    if yy == 0:
                                        type_date = " วัน "
                                    elif yy == 1:
                                        type_date = " ชั่วโมง "
                                    elif yy == 2:
                                        type_date = " นาที "
                                    elif yy == 3:
                                        type_date = " วินาที "
                                    string_details_avg_time += str(list_day_hr_min_sec[yy]) + type_date
                        print(string_details_avg_time)
                        if res_status_file == 'N':
                            string_details_avg_time = ""
                        # th_dateTime_1 = convert_datetime_TH_1(int(dateTime_String.timestamp()))
                        th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                        ts = int(time.time())
                        date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                        year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                        datetime_display = int(dateTime_String.timestamp())
                        date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                        yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                        time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                        old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                        if date_time_today == date_time_db:
                            date_display_show = time_show_db
                        else:
                            if year_today == yar_db:
                                date_display_show = convert_datetime_TH_2_display(datetime_display)
                            else:
                                date_display_show = old_year
                        string_remark_description = ''
                        title_remark = ''
                        if res_status_file == 'R':
                            if len(details_email_reject) != 0:
                                for o in range(len(details_email_reject)):
                                    query_data = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(details_email_reject[o]['email'])).all()
                                    data_json_name = eval(query_data[0].citizen_data)['first_name_th'] + ' ' + eval(query_data[0].citizen_data)['last_name_th']
                                    # print(data_json_name)
                                    details_msg = {}
                                    details_msg['reject_by'] = details_email_reject[o]['email']
                                    details_msg['reject_in_step_num'] = details_email_reject[o]['step_num']
                                    details_msg['reject_in_datetime'] = details_email_reject[o]['datetime']
                                    title_remark = 'ยกเลิกโดย ลำดับที่ ' + details_email_reject[o]['step_num']
                                    datetime_display = convert_datetime_TH_2(int(details_email_reject[o]['datetime_string']))
                                    string_remark_description +=  '\n-' + data_json_name + '\nวันที่ ' + datetime_display
                                    lis_details.append(details_msg)
                        elif res_status_file == 'N':
                            if len(details_email_incomplete) != 0:
                                for oi in range(len(details_email_incomplete)):
                                    tmp_step_num_list_0 = details_email_incomplete[0]['step_num']
                                    tmp_step_num_list = details_email_incomplete[oi]['step_num']
                                    if tmp_step_num_list_0 == tmp_step_num_list:
                                        query_data = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(details_email_incomplete[oi]['email'])).all()
                                        try:
                                            data_json_name = eval(query_data[0].citizen_data)['first_name_th'] + ' ' + eval(query_data[0].citizen_data)['last_name_th']
                                        except Exception as e:
                                            data_json_name = details_email_incomplete[oi]['email']

                                        details_msg = {}
                                        details_msg['pending_by'] = details_email_incomplete[oi]['email']
                                        details_msg['pending_in_step_num'] = details_email_incomplete[oi]['step_num']
                                        title_remark = 'รอการอนุมัติ ลำดับที่ ' + details_email_incomplete[oi]['step_num']
                                        string_remark_description += '\n-' + data_json_name + ''
                                        lis_details.append(details_msg)
                    else:
                        step_status = ''
                        res_status_file = 'Y'
                        step_before = ''
                        step_list_before = []
                        step_list_ = []
                        step_list_next = []
                        arr_step_totle = []
                        step_me = ''
                        step_sum_status = []
                        sum_status_step_list = []
                        list_check_step = []
                        step_list_data = []
                        max_step = (len(jsonData_eval))
                        step_infomation = jsonData_eval
                        sum_status_step = []
                        details_email_reject = []
                        details_email_incomplete = []
                        lis_details = []
                        for i in range(len(step_infomation)):
                            list_check_step = []
                            json_step_info_2 = {}
                            step_list_data = []
                            step_ = step_infomation[i]
                            step_num = step_infomation[i]['step_num']
                            json_step_info_2['step_status'] = ''
                            for m in range(len(step_['step_detail'])):
                                oneMail = step_['step_detail'][m]['one_email']
                                # if str(oneMail).replace(' ','').lower() == self.emailUser:
                                #     step_me = step_infomation[i]['step_num']
                                #     step_me = int(step_me) - 1
                                step_2 = step_['step_detail'][m]
                                for k in range(len(step_2['activity_code'])):
                                    if step_2['activity_code'][k] == 'A03':
                                        # print()
                                        if step_2['activity_status'][k] == 'Complete':
                                            timestemp = int(time.mktime(datetime.datetime.strptime(step_2['activity_time'][k], "%Y-%m-%d %H:%M:%S").timetuple()))
                                            timestamp_info.append(timestemp)
                                            t1 = step_2['activity_time'][k]
                                            t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                            step_time_1.append(t2)
                                        elif step_2['activity_status'][k] == 'Approve':
                                            timestemp = int(time.mktime(datetime.datetime.strptime(step_2['activity_time'][k], "%Y-%m-%d %H:%M:%S").timetuple()))
                                            timestamp_info.append(timestemp)
                                            t1 = step_2['activity_time'][k]
                                            t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                            step_time_1.append(t2)
                                        elif step_2['activity_status'][k] == 'Reject':
                                            timestemp = int(time.mktime(datetime.datetime.strptime(step_2['activity_time'][k], "%Y-%m-%d %H:%M:%S").timetuple()))
                                            timestamp_info.append(timestemp)
                                            t1 = step_2['activity_time'][k]
                                            t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                            step_time_1.append(t2)
                                        json_step_info = {}
                                        json_step_info['activity_status'] = step_2['activity_status'][k]
                                        json_step_info['one_email'] = step_2['one_email']
                                        json_step_info['step_num'] = step_num
                                        list_check_step.append(json_step_info['activity_status'])
                                        step_list_data.append(json_step_info)
                                # print ('Round time', step_time_1)
                                json_step_info_2['step_info'] = step_list_data
                                if json_step_info_2['step_status'] == '':
                                    if 'Reject' in list_check_step:
                                        for kz in range(len(step_2['activity_code'])):
                                            if step_2['activity_code'][kz] == 'A03':
                                                details_email_reject.append({'email':step_2['one_email'],'step_num':step_num,'datetime':step_2['activity_time'][kz],'datetime_string':time.mktime(datetime.datetime.strptime(step_2['activity_time'][kz], "%Y-%m-%d %H:%M:%S").timetuple())})
                                        json_step_info_2['step_status'] = 'Reject'
                                    elif 'Complete' in list_check_step:
                                        json_step_info_2['step_status'] = 'Complete'
                                    elif 'Approve' in list_check_step:
                                        json_step_info_2['step_status'] = 'Complete'
                                    elif 'Incomplete' in list_check_step:
                                        # details_email_incomplete.append({'email':step_2['one_email'],'step_num':step_num})
                                        json_step_info_2['step_status'] = 'Incomplete'
                                    elif 'Pending' in list_check_step:
                                        # details_email_incomplete.append({'email':step_2['one_email'],'step_num':step_num})
                                        json_step_info_2['step_status'] = 'Incomplete'
                                    else:
                                        json_step_info_2['step_status'] = 'Complete'
                                if json_step_info_2['step_status'] == 'Incomplete':
                                    if 'Reject' in list_check_step:
                                        json_step_info_2['step_status'] = 'Reject'
                                    elif 'Complete' in list_check_step:
                                        json_step_info_2['step_status'] = 'Complete'
                                    elif 'Approve' in list_check_step:
                                        json_step_info_2['step_status'] = 'Complete'
                                    elif 'Incomplete' in list_check_step:
                                        details_email_incomplete.append({'email':step_2['one_email'],'step_num':step_num})
                                        json_step_info_2['step_status'] = 'Incomplete'
                                    elif 'Pending' in list_check_step:
                                        details_email_incomplete.append({'email':step_2['one_email'],'step_num':step_num})
                                        json_step_info_2['step_status'] = 'Incomplete'
                                    else:
                                        json_step_info_2['step_status'] = 'Complete'

                                sum_status_step_list.append(json_step_info_2['step_status'])
                            sum_status_step.append(json_step_info_2['step_status'])
                            arr_step_info.append(json_step_info_2['step_status'])
                        index_mystep = step_me
                        print(sid_email)
                        print(arr_step_info)
                        if 'Reject' in arr_step_info:
                            res_status_file = 'R'
                            res_status_file_string = 'เอกสารปฏิเสธอนุมัติ'
                        elif 'Incomplete_1' in arr_step_info or 'Pending_1' in arr_step_info:
                            res_status_file = 'W'
                            res_status_file_string = 'รออนุมัติ'
                        elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                            res_status_file = 'N'
                            res_status_file_string = 'กำลังดำเนินการ'
                        elif 'Wait__' in arr_step_info:
                            res_status_file = 'Z'
                            res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                        elif 'Waitting' in arr_step_info:
                            res_status_file = 'W'
                            res_status_file_string = 'รออนุมัติ'
                        else:
                            res_status_file_string = 'อนุมัติแล้ว'
                        if res_status_file == 'W':
                            statusFile_count_wait = statusFile_count_wait + 1
                        elif res_status_file == 'Y':
                            statusFile_count_approve = statusFile_count_approve + 1
                        elif res_status_file == 'R':
                            statusFile_count_reject = statusFile_count_reject + 1
                        else:
                            statusFile_count_pendding = statusFile_count_pendding + 1
                        string_timing = ''
                        dateTime_String = query_document_tmp[u].send_time
                        start_send_time = dateTime_String.timestamp()
                        now = datetime.datetime.now()
                        timing = (now.timestamp()) - start_send_time
                        timing_1 = convert_hr_min_sec_v1(int(timing))
                        for yy in range(len(timing_1)):
                            if timing_1[yy] > 0:
                                if yy == 0:
                                    type_date = " วัน "
                                elif yy == 1:
                                    type_date = " ชั่วโมง "
                                elif yy == 2:
                                    type_date = " นาที "
                                elif yy == 3:
                                    type_date = " วินาที "
                                string_timing += str(timing_1[yy]) + type_date
                        # list_string_timing.append(string_timing)
                        # string_timing = ''
                        print ('list_steptime1',step_time_1)
                        if(len(step_time_1) != 0):
                            string_list_timeline = ''
                            for i in range(len(step_time_1)):
                                if(i==0):
                                    print ('เริ่มต้น : ',start_send_time)
                                    result = step_time_1[i] - start_send_time
                                    # print ('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ',result)
                                    list_timeline = convert_hr_min_sec_v1(int(result))
                                    # print ('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ : ',list_timeline)
                                    for yy in range(len(list_timeline)):
                                        if list_timeline[yy] > 0:
                                            if yy == 0:
                                                type_date = " วัน "
                                            elif yy == 1:
                                                type_date = " ชั่วโมง "
                                            elif yy == 2:
                                                type_date = " นาที "
                                            elif yy == 3:
                                                type_date = " วินาที "
                                            string_list_timeline += str(list_timeline[yy]) + type_date
                                    print('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ (string)',string_list_timeline)
                                    step_timeline.append(string_list_timeline)
                                else:
                                    result = step_time_1[i] - step_time_1[i-1]
                                    # print ('ลำดับปัจจุบัน- ลำดับก่อนหน้า',result)
                                    list_timeline = convert_hr_min_sec_v1(int(result))
                                    for yy in range(len(list_timeline)):
                                        if list_timeline[yy] > 0:
                                            if yy == 0:
                                                type_date = " วัน "
                                            elif yy == 1:
                                                type_date = " ชั่วโมง "
                                            elif yy == 2:
                                                type_date = " นาที "
                                            elif yy == 3:
                                                type_date = " วินาที "
                                            string_list_timeline += str(list_timeline[yy]) + type_date
                                    print('เริ่มต้น - ลำดับก่อนหน้า (string)',string_list_timeline)
                                    step_timeline.append(string_list_timeline)
                                    string_list_timeline = ''
                            print ("สรุปเวลาการเซ็นแต่ละลำดับ :",step_timeline)
                            concat_steptimeline = ''
                            concat_steptimeline += 'ระยะเวลาดำเนินการ\n'
                            for j in range(len(step_timeline)):
                                if(j == (len(step_timeline))-1):
                                    concat_steptimeline += '-ลำดับที่ ' +str(j+1)+ ' : ' + str(step_timeline[j])
                                else:
                                    concat_steptimeline += '-ลำดับที่ ' +str(j+1)+ ' : ' + str(step_timeline[j]) + '\n'
                            print ('concat_steptimeline',concat_steptimeline)
                        elif(len(step_time_1) == 0):
                            concat_steptimeline += 'อยู่ระหว่างดำเนินการ'

                        # string_details_avg_time = ''
                        string_details_avg_time = 'ระยะเวลาทั้งหมดที่เอกสารถูกดำเนินการ\n'
                        if len(timestamp_info) != 0:
                            # end_time_document = timestamp_info[-1]
                            # result_start_and_end = end_time_document - start_send_time
                            end_time_document = timestamp_info[-1]
                            result_start_and_end = end_time_document - start_send_time
                            list_day_hr_min_sec = convert_hr_min_sec_v1(int(result_start_and_end))
                            print(end_time_document,start_send_time)
                            print(timestamp_info)
                            for yy in range(len(list_day_hr_min_sec)):
                                if list_day_hr_min_sec[yy] > 0:
                                    if yy == 0:
                                        type_date = " วัน "
                                    elif yy == 1:
                                        type_date = " ชั่วโมง "
                                    elif yy == 2:
                                        type_date = " นาที "
                                    elif yy == 3:
                                        type_date = " วินาที "
                                    string_details_avg_time += str(list_day_hr_min_sec[yy]) + type_date
                        print(string_details_avg_time)
                        if res_status_file == 'N':
                            string_details_avg_time = ""
                        # th_dateTime_1 = convert_datetime_TH_1(int(dateTime_String.timestamp()))
                        th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                        ts = int(time.time())
                        date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                        year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                        datetime_display = int(dateTime_String.timestamp())
                        date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                        yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                        time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                        old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                        if date_time_today == date_time_db:
                            date_display_show = time_show_db
                        else:
                            if year_today == yar_db:
                                date_display_show = convert_datetime_TH_2_display(datetime_display)
                            else:
                                date_display_show = old_year
                        string_remark_description = ''
                        title_remark = ''
                        if res_status_file == 'R':
                            if len(details_email_reject) != 0:
                                for o in range(len(details_email_reject)):
                                    query_data = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(details_email_reject[o]['email'])).all()
                                    try:
                                        data_json_name = eval(query_data[0].citizen_data)['first_name_th'] + ' ' + eval(query_data[0].citizen_data)['last_name_th']
                                    except Exception as e:
                                        data_json_name = details_email_incomplete[oi]['email']
                                    # print(data_json_name)
                                    details_msg = {}
                                    details_msg['reject_by'] = details_email_reject[o]['email']
                                    details_msg['reject_in_step_num'] = details_email_reject[o]['step_num']
                                    details_msg['reject_in_datetime'] = details_email_reject[o]['datetime']
                                    title_remark = 'ยกเลิกโดย ลำดับที่ ' + details_email_reject[o]['step_num']
                                    datetime_display = convert_datetime_TH_2(int(details_email_reject[o]['datetime_string']))
                                    string_remark_description +=  '\n-' + data_json_name + '\nวันที่ ' + datetime_display
                                    lis_details.append(details_msg)
                        elif res_status_file == 'N':
                            if len(details_email_incomplete) != 0:
                                for oi in range(len(details_email_incomplete)):
                                    tmp_step_num_list_0 = details_email_incomplete[0]['step_num']
                                    tmp_step_num_list = details_email_incomplete[oi]['step_num']
                                    if tmp_step_num_list_0 == tmp_step_num_list:
                                        query_data = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(details_email_incomplete[oi]['email'])).all()
                                        try:
                                            data_json_name = eval(query_data[0].citizen_data)['first_name_th'] + ' ' + eval(query_data[0].citizen_data)['last_name_th']
                                        except Exception as e:
                                            data_json_name = details_email_incomplete[oi]['email']

                                        details_msg = {}
                                        details_msg['pending_by'] = details_email_incomplete[oi]['email']
                                        details_msg['pending_in_step_num'] = details_email_incomplete[oi]['step_num']
                                        title_remark = 'รอการอนุมัติ ลำดับที่ ' + details_email_incomplete[oi]['step_num']
                                        string_remark_description += '\n-' + data_json_name + ''
                                        lis_details.append(details_msg)
                    tmp_json = {}
                    ts = int(time.time())
                    date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                    year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                    dateTime_timestamp = int((query_document_tmp[u].send_time).timestamp())
                    date_time_db = datetime.datetime.fromtimestamp(dateTime_timestamp).strftime('%Y-%m-%d')
                    yar_db = datetime.datetime.fromtimestamp(dateTime_timestamp).strftime('%Y')
                    time_show_db = datetime.datetime.fromtimestamp(dateTime_timestamp).strftime('%H:%M')
                    old_year = datetime.datetime.fromtimestamp(dateTime_timestamp).strftime('%d/%m/%Y')
                    if date_time_today == date_time_db:
                        date_display_show = time_show_db
                    else:
                        if year_today == yar_db:
                            date_display_show = convert_datetime_TH_2_display(dateTime_timestamp)
                        else:
                            date_display_show = old_year

                    if query_document_tmp[u].urgent_type != None:
                        documentUrgentType = query_document_tmp[u].urgent_type
                        if documentUrgentType == 'I':
                            documentUrgentString = 'ด่วนมาก'
                        elif documentUrgentType == 'U':
                            documentUrgentString = 'ด่วน'
                        elif documentUrgentType == 'M':
                            documentUrgentString = 'ปกติ'

                    if query_document_tmp[u].documentJson != None:
                        documentJson_result = eval(query_document_tmp[u].documentJson)
                        print(documentJson_result)
                        documentName = documentJson_result['document_name']
                        documentType = documentJson_result['document_type']
                    else:
                        documentName = None
                        documentType = None

                    tmp_json['send_time'] = query_document_tmp[u].send_time
                    tmp_json['sender_name'] = query_document_tmp[u].sender_name
                    tmp_json['sender_email'] = query_document_tmp[u].sender_email
                    if tmp_json['sender_name'] == 'null null':
                        tmp_json['sender_name'] = tmp_json['sender_email']
                    tmp_json['recipient_email'] = eval(query_document_tmp[u].recipient_email)
                    tmp_json['document_id'] = query_document_tmp[u].doc_id
                    tmp_json['tracking_id'] = query_document_tmp[u].tracking_id
                    tmp_json['file_name'] = query_document_tmp[u].file_name
                    eval_data_json = eval(query_document_tmp[u].data_json)
                    tmp_json['file_user_status_detail'] = []
                    print (tmp_json)
                    if 'step_num' in eval_data_json:
                        print ('CASE:IF')
                        status_step_sum = ''
                        sum_status_step_list = []
                        list_check_step = []
                        json_step_info_2 = {}
                        step_list_data = []

                        step_ = eval_data_json
                        step_num = eval_data_json['step_num']
                        tmp_json['step_info'] = eval_data_json         #[eval(result_Select_step.data_json)]
                        json_step_info_2['step_status'] = ''
                        for u1 in range(len(step_['step_detail'])):
                            step_2 = step_['step_detail'][u1]
                            for k in range(len(step_2['activity_code'])):
                                if step_2['activity_code'][k] == 'A03':
                                    json_step_info = {}
                                    json_step_info['activity_status'] = step_2['activity_status'][k]
                                    json_step_info['one_email'] = str(step_2['one_email']).replace(' ','')
                                    query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(step_2['one_email'])).all()
                                    if len(query_name_account) != 0:
                                        tmp_account_name = eval(query_name_account[0].citizen_data)
                                        try:
                                            tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                        except Exception as e:
                                            tmp_account_name=None
                                    else:
                                        tmp_account_name = None
                                    json_step_info['account_name'] = tmp_account_name
                                    json_step_info['step_num'] = step_num

                                    list_check_step.append(json_step_info['activity_status'])
                                    step_list_data.append(json_step_info)
                            json_step_info_2['step_info'] = step_list_data
                        if json_step_info_2['step_status'] == '':
                            if 'Reject' in list_check_step:
                                json_step_info_2['step_status'] = 'Reject'
                            elif 'Approve' in list_check_step:
                                json_step_info_2['step_status'] = 'Complete'
                            elif 'Complete' in list_check_step:
                                json_step_info_2['step_status'] = 'Complete'
                            elif 'Incomplete' in list_check_step:
                                json_step_info_2['step_status'] = 'Incomplete'
                            elif 'Pending' in list_check_step:
                                json_step_info_2['step_status'] = 'Incomplete'
                            else:
                                json_step_info_2['step_status'] = 'Complete'
                        sum_status_step_list.append(json_step_info_2['step_status'])
                        tmp_json['file_user_status_detail'].append(json_step_info_2)

                        if 'Reject' in sum_status_step_list:
                            status_step_sum = 'Reject'
                        elif 'Incomplete' in sum_status_step_list:
                            status_step_sum = 'Incomplete'
                        elif 'Pending' in sum_status_step_list:
                            status_step_sum = 'Incomplete'
                        else:
                            status_step_sum = 'Complete'
                        tmp_json['file_status_sum'] = status_step_sum
                    else:
                        print ('CASE:ELSE')
                        status_step_sum = ''
                        sum_status_step_list = []
                        alr_mail = []
                        tmp_json['step_info'] = eval_data_json                  #eval(result_Select_step.data_json)

                        for i in range(len(eval_data_json)):
                            list_check_step = []
                            json_step_info_2 = {}
                            step_list_data = []
                            step_ = eval_data_json[i]
                            step_num = eval_data_json[i]['step_num']
                            json_step_info_2['step_status'] = ''

                            for u2 in range(len(step_['step_detail'])):

                                step_2 = step_['step_detail'][u2]
                                for k in range(len(step_2['activity_code'])):
                                    if step_2['activity_code'][k] == 'A03':
                                        json_step_info = {}
                                        json_step_info['activity_status'] = step_2['activity_status'][k]
                                        json_step_info['one_email'] = str(step_2['one_email']).replace(' ','')
                                        query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(step_2['one_email'])).all()
                                        if len(query_name_account) != 0:
                                            try:
                                                tmp_account_name = eval(query_name_account[0].citizen_data)
                                                tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                            except Exception as e:
                                                tmp_account_name = None
                                                exc_type, exc_obj, exc_tb = sys.exc_info()
                                                fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                                                print(exc_type, fname, exc_tb.tb_lineno)

                                        else:
                                            tmp_account_name = None
                                        json_step_info['step_num'] = step_num
                                        json_step_info['account_name'] = tmp_account_name
                                        list_check_step.append(json_step_info['activity_status'])
                                        step_list_data.append(json_step_info)
                                json_step_info_2['step_info'] = step_list_data
                            if json_step_info_2['step_status'] == '':
                                if 'Reject' in list_check_step:
                                    json_step_info_2['step_status'] = 'Reject'
                                elif 'Approve' in list_check_step:
                                    json_step_info_2['step_status'] = 'Complete'
                                elif 'Complete' in list_check_step:
                                    json_step_info_2['step_status'] = 'Complete'
                                elif 'Incomplete' in list_check_step:
                                    json_step_info_2['step_status'] = 'Incomplete'
                                elif 'Pending' in list_check_step:
                                    json_step_info_2['step_status'] = 'Incomplete'
                                else:
                                    json_step_info_2['step_status'] = 'Complete'
                            sum_status_step_list.append(json_step_info_2['step_status'])
                            tmp_json['file_user_status_detail'].append(json_step_info_2)
                        if 'Reject' in sum_status_step_list:
                            status_step_sum = 'Reject'
                        elif 'Incomplete' in sum_status_step_list:
                            status_step_sum = 'Incomplete'
                        elif 'Pending' in sum_status_step_list:
                            status_step_sum = 'Incomplete'
                        elif 'Approve' in sum_status_step_list:
                            status_step_sum = 'Complete'
                        elif 'Complete' in sum_status_step_list:
                            status_step_sum = 'Complete'
                        else:
                            status_step_sum = 'Complete'
                        tmp_json['file_status_sum'] = status_step_sum

                    tmp_json['fid'] = query_document_tmp[u].fid
                    tmp_json['document_type'] = query_document_tmp[u].documentType
                    tmp_json['documentJson'] = eval(query_document_tmp[u].documentJson)
                    tmp_json['digit_sign'] = query_document_tmp[u].digit_sign
                    tmp_json['document_urgent'] = query_document_tmp[u].urgent_type

                    option_eval=eval(query_document_tmp[u].options_page)
                    # list_options_page.append(option_eval)
                    # tmp_json['options_page'] = list_options_page

                    tmp_json['stamp_all'] = query_document_tmp[u].sign_page_options
                    tmp_json['sidCode'] = query_document_tmp[u].step_data_sid
                    tmp_json['email_center'] = query_document_tmp[u].email_center
                    tmp_json['biz_info'] = eval(query_document_tmp[u].biz_info)

                    tmp_json['step_Name'] = (query_document_tmp[u].step_Name)
                    tmp_json['documentDetails'] = (query_document_tmp[u].documentDetails)
                    tmp_json['condition_temp'] = (query_document_tmp[u].condition_temp)
                    tmp_json['step_Code'] = (query_document_tmp[u].step_Code)
                    tmp_json['status'] = (query_document_tmp[u].status)

                    tmp_json['status_file_code'] = res_status_file
                    tmp_json['status_file_details'] = lis_details
                    tmp_json['status_file_string'] = res_status_file_string
                    tmp_json['string_details_avg_time'] = string_details_avg_time
                    tmp_json['timeline'] = concat_steptimeline
                    tmp_json['timing'] = string_timing
                    tmp_json['remark_description'] = title_remark + string_remark_description
                    tmp_json['time_String'] = str(query_document_tmp[u].send_time).split(' ')[1].split('+')[0]
                    if query_document_tmp[u].string_pdf != None:
                        tmp_json['status_original_pdf_file'] = True
                    else:
                        tmp_json['status_original_pdf_file'] = False

                    if query_document_tmp[u].string_sign != None:
                        tmp_json['status_sign_pdf_file'] = True
                    else:
                        tmp_json['status_sign_pdf_file'] = False


                    tmp_json['attempted_folder'] = query_document_tmp[u].attempted_folder
                    tmp_biz_info = (query_document_tmp[u].biz_info)
                    if tmp_biz_info == 'None':
                        tmp_biz_info = 'None'
                        list_biz = []
                        dict_biz= {}
                        dict_biz['id'] = None
                        dict_biz['id_card_num'] = None
                        dict_biz['first_name_eng'] = None
                        dict_biz['first_name_th'] = None
                        list_biz.append(dict_biz)
                        tmp_json['biz_detail'] = list_biz

                    else :
                        tmp_biz_info = eval(tmp_biz_info)
                        if 'id' in tmp_biz_info:
                            tmp_id_biz = tmp_biz_info['id']
                            tmp_id_card_num_biz = tmp_biz_info['id_card_num']
                            tmp_first_name_eng_biz = tmp_biz_info['first_name_eng']
                            tmp_first_name_th_biz = tmp_biz_info['first_name_th']
                        tmp_json['biz_detail'] = [{'id':tmp_id_biz,'id_card_num':tmp_id_card_num_biz,'first_name_eng':tmp_first_name_eng_biz,'first_name_th':tmp_first_name_th_biz}]

                    # print (u)
                    sum_Document = sum_Document+1

                    if ((u+1) == len(query_document_tmp)):
                        last_time = (tmp_json['send_time'])
                        dt_object = int(datetime.datetime.timestamp(last_time))


                    tmp_list_result.append(tmp_json)
                tmp_data['data'] = tmp_list_result
                tmp_list_result2.append(tmp_data)
                return {'result':'OK','messageText':tmp_list_result2}
            else:
                return {'result':'ER','messageText':'data not found'}
        except exc.SQLAlchemyError as ex:
            db.session.rollback()
            raise
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            db.session.rollback()
            raise
            return {'result':'ER','messageText':'cant select','messageER':str(e)}
        finally:
            db.session.close()

    def select_profile_For_eform_v1(self,email_User,username):
        self.email_User = email_User
        self.username = username
        result_json = {}
        try:
            result_select = paper_lessuserProfile.query.filter(paper_lessuserProfile.p_username==self.username,paper_lessuserProfile.p_emailthai==self.email_User).first()
            if result_select != None:
                result_json['sign_base64'] = result_select.p_sign
                return {'result':'OK','messageText': result_json}
            else:
                return {'result':'ER','messageText': 'data not found'}
        except Exception as ex:
            return {'result':'ER','messageText': str(ex)}

    def select_BusinessAdmin_v1(self):
        json_data = []
        list_taxid = []
        result_bizprofile = None
        data = []
        try:
            # tmpsql = ''
            return ''
            len_profile = paper_lessbizProfile.query.all()
            result_bizpaper = paper_lessbizPaperless.query.order_by(paper_lessbizPaperless.tax_id).all()
            for x in range(len(result_bizpaper)):
                list_taxid.append(result_bizpaper[x].tax_id)

            for i in range(len(list_taxid)):
                for j in range(len(len_profile)):
                    result_bizprofile = paper_lessbizProfile.query.filter(paper_lessbizProfile.bizTax == list_taxid[i]).all()
                tmp_json = {}
                if len(result_bizprofile) != 0:
                    data = eval(result_bizprofile[0].bizInfoJson)
                    tmp_json['id'] = data['id']
                    # tmp_json['infoJson'] = eval(result_bizprofile[0].bizInfoJson)
                    tmp_json['first_name_eng'] = data['first_name_eng']
                    tmp_json['first_name_th'] = data['first_name_th']
                    tmp_json['id_card_num'] = data['id_card_num']
                    tmp_json['id_card_type'] = data['id_card_type']
                    json_data.append(tmp_json)
            json_data = sorted(json_data, key=lambda k: k['first_name_th'], reverse=False)
            return {'result':'OK','messageText': json_data}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText': ex}

    def select_tb_bizpaperAndbizprofile(self):
        json_data = []
        list_taxid = []
        result_bizprofile = None
        data = []
        try:
            len_profile = paper_lessbizProfile.query.all()
            result_bizpaper = paper_lessbizPaperless.query.order_by(paper_lessbizPaperless.tax_id).all()
            for x in range(len(result_bizpaper)):
                list_taxid.append(result_bizpaper[x].tax_id)

            for i in range(len(list_taxid)):
                for j in range(len(len_profile)):
                    result_bizprofile = paper_lessbizProfile.query.filter(paper_lessbizProfile.bizTax == list_taxid[i]).all()
                tmp_json = {}
                if len(result_bizprofile) != 0:
                    data = eval(result_bizprofile[0].bizInfoJson)
                    tmp_json['id'] = data['id']
                    # tmp_json['infoJson'] = eval(result_bizprofile[0].bizInfoJson)
                    tmp_json['first_name_eng'] = data['first_name_eng']
                    tmp_json['first_name_th'] = data['first_name_th']
                    tmp_json['id_card_num'] = data['id_card_num']
                    tmp_json['id_card_type'] = data['id_card_type']
                    json_data.append(tmp_json)
            json_data = sorted(json_data, key=lambda k: k['first_name_th'], reverse=False)
            return {'result':'OK','messageText': json_data}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText': ex}

    def select_getone_transaction_servicelog(self,tmp_tid):
        self.tmp_tid = tmp_tid
        try:
            tmp_json = {}
            tmp_list = []
            result_transaction_serivcelog = tb_transaction_servicelog.query.filter(tb_transaction_servicelog.id==self.tmp_tid).first()
            if result_transaction_serivcelog != None:
                tmp_json['id'] = result_transaction_serivcelog.id
                tmp_json['service_type'] = result_transaction_serivcelog.service_type
                tmp_json['status'] = result_transaction_serivcelog.status
                tmp_json['sidcode'] = result_transaction_serivcelog.sidcode
                tmp_json['message_error'] = result_transaction_serivcelog.message_error
                tmp_json['datetime'] = result_transaction_serivcelog.datetime
                tmp_json['datetime_str'] = str(result_transaction_serivcelog.datetime).split('+')[0]
                tmp_json['datatime_display'] = convert_datetime_TH_2_display_sendTime((result_transaction_serivcelog.datetime).timestamp())
                tmp_json['timestamp'] = int((result_transaction_serivcelog.datetime).timestamp())
                tmp_list.append(tmp_json)
                return {'result':'OK','messageText':{'data_transactionlog':tmp_list}}
            else:
                return {'result':'ER','messageText':'Data not found'}
        except Exception as e:
            print(str(e))
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':str(e)}

    def select_getone_transactionlog(self,tmp_tid):
        self.tmp_tid = tmp_tid
        try:
            tmp_json = {}
            tmp_list = []
            result_transactionlog = tb_transactionlog.query.filter(tb_transactionlog.id==self.tmp_tid).first()
            if result_transactionlog == None:
                result_transactionlogrequest = tb_transactionlogrequest.query.filter(tb_transactionlogrequest.id==self.tmp_tid).first()
                if result_transactionlogrequest != None:
                    tmp_json['id'] = result_transactionlogrequest.id
                    tmp_json['message'] = result_transactionlogrequest.message
                    tmp_json['statuscode'] = result_transactionlogrequest.statuscode
                    tmp_json['datetime'] = result_transactionlogrequest.datetime
                    tmp_json['datetime_str'] = str(result_transactionlogrequest.datetime).split('+')[0]
                    tmp_json['datatime_display'] = convert_datetime_TH_2_display_sendTime((result_transactionlogrequest.datetime).timestamp())
                    tmp_json['timestamp'] = int((result_transactionlogrequest.datetime).timestamp())
                    tmp_json['request'] = result_transactionlogrequest.request
                    tmp_json['url_request'] = result_transactionlogrequest.url_request
                    tmp_json['methods'] = result_transactionlogrequest.methods
                    tmp_list.append(tmp_json)
                    return {'result':'OK','messageText':{'data_transaction_request':tmp_list}}
                else:
                    return {'result':'ER','messageText':'Data not found'}
            else:
                tmp_json['id'] = result_transactionlog.id
                tmp_json['message'] = result_transactionlog.message
                tmp_json['status'] = result_transactionlog.status
                tmp_json['request'] = result_transactionlog.request
                tmp_json['datetime'] = result_transactionlog.datetime
                tmp_list.append(tmp_json)
                return {'result':'OK','messageText':{'data_transactionlog':tmp_list}}
        except Exception as e:
            print(str(e))
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':str(e)}

    def select_table_service_log(self,datetime_start,datetime_end,limit,tmp_email_thai):
        self.limit = limit
        self.datetime_start = datetime_start
        self.datetime_end = datetime_end
        self.tmp_email_thai = tmp_email_thai
        json_data = []
        tmp_list_logrq = []
        tmp_list_logservice = []
        try:
            limit = self.limit
            if limit == '':
                limit = 100
            elif limit != '' or limit >= 1000:
                limit = self.limit
            else:
                return {'result':'ER','messageText':'limit incorrect'}

            now = datetime.datetime.now()
            tmp_timestamp = 0
            result_transaction_servicelog = None
            tmp_hash_one_access_token = []
            if (self.datetime_start) == '' and (self.datetime_end != ''):
                # datetime_end = datetime.datetime.fromtimestamp(self.datetime_end)
                # result_transactionlog = tb_transactionlog.query.order_by(desc(tb_transactionlog.datetime)).filter(tb_transactionlog.datetime <= (datetime_end)).limit(limit).all()
                return {'result':'ER','messageText':'parameter incorrect datetimeend only'}
            elif self.datetime_end == '' and self.datetime_start != '':
                datetime_start = datetime.datetime.fromtimestamp(self.datetime_start)
                result_transaction_servicelog = tb_transaction_servicelog.query.order_by(desc(tb_transaction_servicelog.datetime)).filter(tb_transaction_servicelog.datetime<datetime_start).limit(limit).all()
            elif ((self.datetime_start) != '' and (self.datetime_end) != ''):
                datetime_start = datetime.datetime.fromtimestamp(self.datetime_start)
                datetime_end = datetime.datetime.fromtimestamp(self.datetime_end)
                result_transaction_servicelog = tb_transaction_servicelog.query.order_by(desc(tb_transaction_servicelog.datetime)).filter(tb_transaction_servicelog.datetime <= datetime_end).filter(tb_transaction_servicelog.datetime >= datetime_start).limit(limit).all()
            elif self.tmp_email_thai != '':
                result_query_tokenreq = paper_lesstoken_required.query.filter(paper_lesstoken_required.email_thai==self.tmp_email_thai,paper_lesstoken_required.hash_one_access_token!=None).all()
                for k in range(len(result_query_tokenreq)):
                    tmp_hash_one_access_token.append(result_query_tokenreq[k].hash_one_access_token)
                tmp_query_servicelog = tb_transaction_servicelog.query.order_by(desc(tb_transaction_servicelog.datetime)).filter(tb_transaction_servicelog.hash_token.in_(tmp_hash_one_access_token)).limit(limit).all()
                for x in range(len(tmp_query_servicelog)):
                    tmp_json = {}
                    tmp_json['id'] = tmp_query_servicelog[x].id
                    # tmp_json['message'] = tmp_query_logrq[x].message
                    tmp_json['service_type'] = tmp_query_servicelog[x].service_type
                    # tmp_json['request'] = tmp_query_logrq[x].request
                    tmp_json['status'] = tmp_query_servicelog[x].status
                    tmp_json['datetime'] = (tmp_query_servicelog[x].datetime)
                    tmp_json['datetime_str'] = str(tmp_query_servicelog[x].datetime).split('+')[0]
                    tmp_json['datatime_display'] = convert_datetime_TH_2((tmp_query_servicelog[x].datetime).timestamp())
                    tmp_json['sidcode'] = tmp_query_servicelog[x].sidcode
                    tmp_json['timestamp'] = int((tmp_query_servicelog[x].datetime).timestamp())
                    tmp_json['message_error'] = tmp_query_servicelog[x].message_error
                    result_query_username = paper_lesstoken_required.query.filter(paper_lesstoken_required.hash_one_access_token==tmp_query_servicelog[x].hash_token).first()
                    if result_query_username != None:
                        tmp_json['email_thai'] = result_query_username.email_thai
                    else:
                        tmp_json['email_thai'] = None
                    if (x+1) == len(tmp_query_servicelog):
                        tmp_timestamp = int((tmp_query_servicelog[x].datetime).timestamp())
                    tmp_list_logrq.append(tmp_json)
            elif (self.datetime_start == '' and (self.datetime_end) == ''):
                result_transaction_servicelog = tb_transaction_servicelog.query.order_by(desc(tb_transaction_servicelog.datetime)).limit(limit).all()

            if result_transaction_servicelog != None:
                for x in range(len(result_transaction_servicelog)):
                    tmp_dict = {}
                    tmp_dict['id'] = result_transaction_servicelog[x].id
                    # tmp_dict['message'] = result_transactionlogrequest[x].message
                    tmp_dict['service_type'] = result_transaction_servicelog[x].service_type
                    # tmp_dict['request'] = result_transactionlogrequest[x].request
                    tmp_dict['status'] = result_transaction_servicelog[x].status
                    tmp_dict['datetime'] = (result_transaction_servicelog[x].datetime)
                    tmp_dict['datetime_str'] = str(result_transaction_servicelog[x].datetime).split('+')[0]
                    tmp_dict['datatime_display'] = convert_datetime_TH_2((result_transaction_servicelog[x].datetime).timestamp())
                    tmp_dict['sidcode'] = result_transaction_servicelog[x].sidcode
                    tmp_dict['message_error'] = result_transaction_servicelog[x].message_error
                    if (x+1) == len(result_transaction_servicelog):
                        tmp_timestamp = int((result_transaction_servicelog[x].datetime).timestamp())
                    result_query_username = paper_lesstoken_required.query.filter(paper_lesstoken_required.hash_one_access_token==result_transaction_servicelog[x].hash_token).first()
                    if result_query_username != None:
                        tmp_dict['email_thai'] = result_query_username.email_thai
                    else:
                        tmp_dict['email_thai'] = None
                    tmp_list_logrq.append(tmp_dict)

            return {'result':'OK','messageText':{'data_service_log':tmp_list_logrq,'timestamp':tmp_timestamp}}
        except Exception as e:
            print(str(e))
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':str(e)}

    def select_table_transactionlog(self,datetime_start,datetime_end,limit,tmp_email_thai):
        self.limit = limit
        self.datetime_start = datetime_start
        self.datetime_end = datetime_end
        self.tmp_email_thai = tmp_email_thai
        json_data = []
        tmp_list_logrq = []
        tmp_list_logservice = []
        try:
            limit = self.limit
            if limit == '':
                limit = 100
            elif limit != '' or limit >= 1000:
                limit = self.limit
            else:
                return {'result':'ER','messageText':'limit incorrect'}

            now = datetime.datetime.now()
            tmp_timestamp = 0
            result_transactionlog = None
            result_transactionlogrequest = None
            result_transaction_servicelog = None
            tmp_hash_one_access_token = []
            if self.datetime_start == '' and self.datetime_end != '' and self.tmp_email_thai == '':
                return {'result':'ER','messageText':'parameter incorrect datetimeend only'}
            elif self.datetime_start != '' and self.datetime_end == '' and self.tmp_email_thai == '':
                datetime_start = datetime.datetime.fromtimestamp(self.datetime_start)
                result_transactionlog = tb_transactionlog.query.order_by(desc(tb_transactionlog.datetime)).filter(tb_transactionlog.datetime<(datetime_start)).limit(limit).all()
                result_transactionlogrequest = tb_transactionlogrequest.query.order_by(desc(tb_transactionlogrequest.datetime)).filter(tb_transactionlogrequest.datetime<datetime_start).limit(limit).all()
                # result_transaction_servicelog = tb_transaction_servicelog.query.order_by(desc(tb_transaction_servicelog.datetime)).filter(tb_transaction_servicelog.datetime<datetime_start).limit(limit).all()
            elif self.datetime_start != '' and self.datetime_end != '' and self.tmp_email_thai == '':
                datetime_start = datetime.datetime.fromtimestamp(self.datetime_start)
                datetime_end = datetime.datetime.fromtimestamp(self.datetime_end)
                result_transactionlog = tb_transactionlog.query.order_by(desc(tb_transactionlog.datetime)).filter(tb_transactionlog.datetime <= datetime_end).filter(tb_transactionlog.datetime >= datetime_start).limit(limit).all()
                result_transactionlogrequest = tb_transactionlogrequest.query.order_by(desc(tb_transactionlogrequest.datetime)).filter(tb_transactionlogrequest.datetime <= datetime_end).filter(tb_transactionlogrequest.datetime >= datetime_start).limit(limit).all()
                # result_transaction_servicelog = tb_transaction_servicelog.query.order_by(desc(tb_transaction_servicelog.datetime)).filter(tb_transaction_servicelog.datetime <= datetime_end).filter(tb_transaction_servicelog.datetime >= datetime_start).limit(limit).all()
            elif self.tmp_email_thai != '':
                if self.datetime_start == '' and self.datetime_end != '':
                    return {'result':'ER','messageText':'parameter incorrect datetimeend only'}
                elif self.datetime_start != '' and self.datetime_end == '':
                    datetime_start = datetime.datetime.fromtimestamp(self.datetime_start)
                    result_query_tokenreq = paper_lesstoken_required.query.filter(paper_lesstoken_required.email_thai==self.tmp_email_thai,paper_lesstoken_required.hash_one_access_token!=None).all()
                    for k in range(len(result_query_tokenreq)):
                        tmp_hash_one_access_token.append(result_query_tokenreq[k].hash_one_access_token)
                    tmp_query = tb_transactionlog.query.order_by(desc(tb_transactionlog.datetime)).filter(tb_transactionlog.hash_token.in_(tmp_hash_one_access_token)).filter(tb_transactionlog.datetime<(datetime_start)).limit(limit).all()
                    for u in range(len(tmp_query)):
                        tmp_json = {}
                        tmp_json['id'] = tmp_query[u].id
                        # tmp_json['message'] = tmp_query[u].message
                        tmp_json['status'] = tmp_query[u].status
                        # tmp_json['request'] = tmp_query[u].request
                        tmp_json['datetime'] = tmp_query[u].datetime
                        tmp_json['datetime_str'] = str(tmp_query[u].datetime).split('+')[0]
                        tmp_json['datatime_display'] = convert_datetime_TH_2_display_sendTime((tmp_query[u].datetime).timestamp())
                        tmp_json['timestamp'] = int((tmp_query[u].datetime).timestamp())
                        result_query_username = paper_lesstoken_required.query.filter(paper_lesstoken_required.hash_one_access_token==tmp_query[u].hash_token).first()
                        if result_query_username != None:
                            tmp_json['email_thai'] = result_query_username.email_thai
                        else:
                            tmp_json['email_thai'] = None
                        tmp_json['url'] = tmp_query[u].url
                        if (u+1) == len(tmp_query):
                            tmp_timestamp = int((tmp_query[u].datetime).timestamp())
                        json_data.append(tmp_json)
                    tmp_query_logrq = tb_transactionlogrequest.query.order_by(desc(tb_transactionlogrequest.datetime)).filter(tb_transactionlogrequest.datetime<datetime_start).filter(tb_transactionlogrequest.hash_token.in_(tmp_hash_one_access_token)).limit(limit).all()
                    for x in range(len(tmp_query_logrq)):
                        tmp_json = {}
                        tmp_json['id'] = tmp_query_logrq[x].id
                        # tmp_json['message'] = tmp_query_logrq[x].message
                        tmp_json['status'] = tmp_query_logrq[x].statuscode
                        # tmp_json['request'] = tmp_query_logrq[x].request
                        tmp_json['datetime'] = tmp_query_logrq[x].datetime
                        tmp_json['datetime_str'] = str(tmp_query_logrq[x].datetime).split('+')[0]
                        tmp_json['datatime_display'] = convert_datetime_TH_2_display_sendTime((tmp_query_logrq[x].datetime).timestamp())
                        tmp_json['timestamp'] = int((tmp_query_logrq[x].datetime).timestamp())
                        result_query_username = paper_lesstoken_required.query.filter(paper_lesstoken_required.hash_one_access_token==tmp_query_logrq[x].hash_token).first()
                        if result_query_username != None:
                            tmp_json['email_thai'] = result_query_username.email_thai
                        else:
                            tmp_json['email_thai'] = None
                        tmp_json['url'] = tmp_query_logrq[x].url_request
                        tmp_json['methods'] = tmp_query_logrq[x].methods
                        if (x+1) == len(tmp_query_logrq):
                            tmp_timestamp = int((tmp_query_logrq[x].datetime).timestamp())
                        tmp_list_logrq.append(tmp_json)
                elif self.datetime_start != '' and self.datetime_end != '':
                    datetime_start = datetime.datetime.fromtimestamp(self.datetime_start)
                    datetime_end = datetime.datetime.fromtimestamp(self.datetime_end)
                    result_query_tokenreq = paper_lesstoken_required.query.filter(paper_lesstoken_required.email_thai==self.tmp_email_thai,paper_lesstoken_required.hash_one_access_token!=None).all()
                    for k in range(len(result_query_tokenreq)):
                        tmp_hash_one_access_token.append(result_query_tokenreq[k].hash_one_access_token)
                    tmp_query = tb_transactionlog.query.order_by(desc(tb_transactionlog.datetime)).filter(tb_transactionlog.hash_token.in_(tmp_hash_one_access_token)).filter(tb_transactionlog.datetime <= datetime_end).filter(tb_transactionlog.datetime >= datetime_start).limit(limit).all()
                    for u in range(len(tmp_query)):
                        tmp_json = {}
                        tmp_json['id'] = tmp_query[u].id
                        # tmp_json['message'] = tmp_query[u].message
                        tmp_json['status'] = tmp_query[u].status
                        # tmp_json['request'] = tmp_query[u].request
                        tmp_json['datetime'] = tmp_query[u].datetime
                        tmp_json['datetime_str'] = str(tmp_query[u].datetime).split('+')[0]
                        tmp_json['datatime_display'] = convert_datetime_TH_2_display_sendTime((tmp_query[u].datetime).timestamp())
                        tmp_json['timestamp'] = int((tmp_query[u].datetime).timestamp())
                        result_query_username = paper_lesstoken_required.query.filter(paper_lesstoken_required.hash_one_access_token==tmp_query[u].hash_token).first()
                        if result_query_username != None:
                            tmp_json['email_thai'] = result_query_username.email_thai
                        else:
                            tmp_json['email_thai'] = None
                        tmp_json['url'] = tmp_query[u].url
                        if (u+1) == len(tmp_query):
                            tmp_timestamp = int((tmp_query[u].datetime).timestamp())
                        json_data.append(tmp_json)
                    tmp_query_logrq = tb_transactionlogrequest.query.order_by(desc(tb_transactionlogrequest.datetime)).filter(tb_transactionlogrequest.datetime <= datetime_end).filter(tb_transactionlogrequest.datetime >= datetime_start).filter(tb_transactionlogrequest.hash_token.in_(tmp_hash_one_access_token)).limit(limit).all()
                    for x in range(len(tmp_query_logrq)):
                        tmp_json = {}
                        tmp_json['id'] = tmp_query_logrq[x].id
                        # tmp_json['message'] = tmp_query_logrq[x].message
                        tmp_json['status'] = tmp_query_logrq[x].statuscode
                        # tmp_json['request'] = tmp_query_logrq[x].request
                        tmp_json['datetime'] = tmp_query_logrq[x].datetime
                        tmp_json['datetime_str'] = str(tmp_query_logrq[x].datetime).split('+')[0]
                        tmp_json['datatime_display'] = convert_datetime_TH_2_display_sendTime((tmp_query_logrq[x].datetime).timestamp())
                        tmp_json['timestamp'] = int((tmp_query_logrq[x].datetime).timestamp())
                        result_query_username = paper_lesstoken_required.query.filter(paper_lesstoken_required.hash_one_access_token==tmp_query_logrq[x].hash_token).first()
                        if result_query_username != None:
                            tmp_json['email_thai'] = result_query_username.email_thai
                        else:
                            tmp_json['email_thai'] = None
                        tmp_json['url'] = tmp_query_logrq[x].url_request
                        tmp_json['methods'] = tmp_query_logrq[x].methods
                        if (x+1) == len(tmp_query):
                            tmp_timestamp = int((tmp_query[u].datetime).timestamp())
                        json_data.append(tmp_json)
                elif self.datetime_start == '' and self.datetime_end == '':
                    result_query_tokenreq = paper_lesstoken_required.query.filter(paper_lesstoken_required.email_thai==self.tmp_email_thai,paper_lesstoken_required.hash_one_access_token!=None).all()
                    for k in range(len(result_query_tokenreq)):
                        tmp_hash_one_access_token.append(result_query_tokenreq[k].hash_one_access_token)
                    tmp_query = tb_transactionlog.query.order_by(desc(tb_transactionlog.datetime)).filter(tb_transactionlog.hash_token.in_(tmp_hash_one_access_token)).limit(limit).all()
                    for u in range(len(tmp_query)):
                        tmp_json = {}
                        tmp_json['id'] = tmp_query[u].id
                        # tmp_json['message'] = tmp_query[u].message
                        tmp_json['status'] = tmp_query[u].status
                        # tmp_json['request'] = tmp_query[u].request
                        tmp_json['datetime'] = tmp_query[u].datetime
                        tmp_json['datetime_str'] = str(tmp_query[u].datetime).split('+')[0]
                        tmp_json['datatime_display'] = convert_datetime_TH_2_display_sendTime((tmp_query[u].datetime).timestamp())
                        tmp_json['timestamp'] = int((tmp_query[u].datetime).timestamp())
                        result_query_username = paper_lesstoken_required.query.filter(paper_lesstoken_required.hash_one_access_token==tmp_query[u].hash_token).first()
                        if result_query_username != None:
                            tmp_json['email_thai'] = result_query_username.email_thai
                        else:
                            tmp_json['email_thai'] = None
                        tmp_json['url'] = tmp_query[u].url
                        if (u+1) == len(tmp_query):
                            tmp_timestamp = int((tmp_query[u].datetime).timestamp())
                        json_data.append(tmp_json)
                    tmp_query_logrq = tb_transactionlogrequest.query.order_by(desc(tb_transactionlogrequest.datetime)).filter(tb_transactionlogrequest.hash_token.in_(tmp_hash_one_access_token)).limit(limit).all()
                    for x in range(len(tmp_query_logrq)):
                        tmp_json = {}
                        tmp_json['id'] = tmp_query_logrq[x].id
                        # tmp_json['message'] = tmp_query_logrq[x].message
                        tmp_json['status'] = tmp_query_logrq[x].statuscode
                        # tmp_json['request'] = tmp_query_logrq[x].request
                        tmp_json['datetime'] = tmp_query_logrq[x].datetime
                        tmp_json['datetime_str'] = str(tmp_query_logrq[x].datetime).split('+')[0]
                        tmp_json['datatime_display'] = convert_datetime_TH_2_display_sendTime((tmp_query_logrq[x].datetime).timestamp())
                        tmp_json['timestamp'] = int((tmp_query_logrq[x].datetime).timestamp())
                        result_query_username = paper_lesstoken_required.query.filter(paper_lesstoken_required.hash_one_access_token==tmp_query_logrq[x].hash_token).first()
                        if result_query_username != None:
                            tmp_json['email_thai'] = result_query_username.email_thai
                        else:
                            tmp_json['email_thai'] = None
                        tmp_json['url'] = tmp_query_logrq[x].url_request
                        tmp_json['methods'] = tmp_query_logrq[x].methods
                        if (x+1) == len(tmp_query_logrq):
                            tmp_timestamp = int((tmp_query_logrq[x].datetime).timestamp())
                        tmp_list_logrq.append(tmp_json)
            elif (self.datetime_start == '' and (self.datetime_end) == '') and self.tmp_email_thai == '':
                result_transactionlog = tb_transactionlog.query.order_by(desc(tb_transactionlog.datetime)).limit(limit).all()
                result_transactionlogrequest = tb_transactionlogrequest.query.order_by(desc(tb_transactionlogrequest.datetime)).limit(limit).all()
                # result_transaction_servicelog = tb_transaction_servicelog.query.order_by(desc(tb_transaction_servicelog.datetime)).limit(limit).all()

            if result_transactionlog != None:
                for x in range(len(result_transactionlog)):
                    tmp_dict = {}
                    tmp_dict['id'] = result_transactionlog[x].id
                    # tmp_dict['message'] = result_transactionlog[x].message
                    tmp_dict['status'] = result_transactionlog[x].status
                    # tmp_dict['request'] = result_transactionlog[x].request
                    tmp_dict['datetime'] = result_transactionlog[x].datetime
                    tmp_dict['datetime_str'] = str(result_transactionlog[x].datetime).split('+')[0]
                    tmp_dict['datatime_display'] = convert_datetime_TH_2_display_sendTime((result_transactionlog[x].datetime).timestamp())
                    tmp_dict['url'] = result_transactionlog[x].url
                    tmp_dict['timestamp'] = int((result_transactionlog[x].datetime).timestamp())
                    result_query_username = paper_lesstoken_required.query.filter(paper_lesstoken_required.hash_one_access_token==result_transactionlog[x].hash_token).first()
                    if result_query_username != None:
                        tmp_dict['email_thai'] = result_query_username.email_thai
                    else:
                        tmp_dict['email_thai'] = None
                    if (x+1) == len(result_transactionlog):
                        tmp_timestamp = int((result_transactionlog[x].datetime).timestamp())
                    json_data.append(tmp_dict)
            if result_transactionlogrequest != None:
                for x in range(len(result_transactionlogrequest)):
                    tmp_dict = {}
                    tmp_dict['id'] = result_transactionlogrequest[x].id
                    # tmp_dict['message'] = result_transactionlogrequest[x].message
                    tmp_dict['status'] = result_transactionlogrequest[x].statuscode
                    # tmp_dict['request'] = result_transactionlogrequest[x].request
                    tmp_dict['datetime'] = result_transactionlogrequest[x].datetime
                    tmp_dict['datetime_str'] = str(result_transactionlogrequest[x].datetime).split('+')[0]
                    tmp_dict['datatime_display'] = convert_datetime_TH_2_display_sendTime((result_transactionlogrequest[x].datetime).timestamp())
                    tmp_dict['url'] = result_transactionlogrequest[x].url_request
                    tmp_dict['methods'] = result_transactionlogrequest[x].methods
                    tmp_dict['timestamp'] = int((result_transactionlogrequest[x].datetime).timestamp())
                    result_query_username = paper_lesstoken_required.query.filter(paper_lesstoken_required.hash_one_access_token==result_transactionlogrequest[x].hash_token).first()
                    if result_query_username != None:
                        tmp_dict['email_thai'] = result_query_username.email_thai
                    else:
                        tmp_dict['email_thai'] = None
                    if (x+1) == len(result_transactionlogrequest):
                        tmp_timestamp = int((result_transactionlogrequest[x].datetime).timestamp())
                    tmp_list_logrq.append(tmp_dict)

            return {'result':'OK','messageText':{'data_transactionlog':json_data,'data_transaction_request':tmp_list_logrq,'timestamp':tmp_timestamp}}
        except Exception as e:
            print(str(e))
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':str(e)}

    def select_document_v1(self,date_start,date_end,document_id,sender_email,recipient_email,tax_id,documentType,limit,text):
        tmp_list_result = []
        tmp_list_result2 = []
        self.date_start = date_start
        self.date_end = date_end
        self.document_id = document_id
        self.sender_email = sender_email
        self.recipient_email = recipient_email
        self.tax_id = tax_id
        self.documentType = documentType
        self.limit = limit
        self.text = text
        limit_ch = self.limit
        tmp_list_sid_code = []
        count_document = 0
        count_rowDocument = 0
        count_rowDocument_StatusActive = 0
        count_rowDocument_StatusReject = 0
        count_rowDocument_StatusCancel = 0
        statusFile_count_approve = 0
        statusFile_count_pendding = 0
        statusFile_count_reject = 0
        statusFile_count_wait = 0
        step_time = []

        step_time_total = []
        t1 = None
        t2 = None

        sum_Document = 0
        Complete_Approve = 0
        Incomplete_Pendding = 0
        Reject = 0
        Wait = 0

        query_document_tmp = None
        query_document_tmp2 = None

        query_document_tmp_Active = 0
        query_document_tmp_Reject = 0
        query_document_tmp_count = 0

        try:

            if (limit_ch == ''):
                limit_ch = 1000
            elif (limit_ch != ''):
                limit_ch = self.limit
                if limit_ch > 1000:
                    limit_ch = 1000

            query_document_tmp_count = view_document.query.count()
            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').count()
            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').count()
           
            
            if self.tax_id == 'citizen' :
                if self.tax_id != '' and self.text != '' and self.document_id == '' and self.sender_email == '' and self.recipient_email == '' and self.documentType == '':
                    query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.options_page.contains(self.text)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).limit(limit_ch).all()
                    print('citizen tax_id,text')
                elif self.date_start != '' and self.date_end != '' : # date_start ไม่ว่าง , date_end ไม่ว่าง
                    if self.document_id =='':
                        if self.sender_email != '' and self.tax_id != '' and self.recipient_email != '' and self.documentType != '': # ใส่ทั้งหมด
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                            # query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()

                            query_document_tmp2 = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()
                            eval_biz_info = eval(query_document_tmp2[0].biz_info)
                            # print ('eval_biz_info: ',eval_biz_info['id_card_num'])
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).limit(limit_ch).all()
                            print('all put')

                        elif self.sender_email != '': # ใส่ sender_email

                            if self.sender_email != '' and self.tax_id != '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()

                                # query_document_tmp2 = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()
                                # eval_biz_info = eval(query_document_tmp2[0].biz_info)
                                # query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType.contains(self.documentType)).filter(eval_biz_info['id_card_num'] == self.tax_id).limit(limit_ch).all()

                                print('non recipient')

                            elif self.tax_id == '' and self.recipient_email != '' and self.documentType != '': # ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()
                                print('non tax')

                            elif self.documentType == '' and self.recipient_email != '' and self.tax_id != '': # ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).limit(limit_ch).all()
                                print('non documentType')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).limit(limit_ch).all()
                                print('only sender , documentType')

                            elif self.documentType == '' and self.recipient_email == '' and self.tax_id != '': # ไม่ใส่ recipient_email // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).limit(limit_ch).all()
                                print('only sender , tax_id')

                            elif self.tax_id == '' and self.documentType == '' and self.recipient_email == '': # ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).limit(limit_ch).all()
                                print('only sender , recipient_email')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType == '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).limit(limit_ch).all()
                                print('only sender')

                        elif self.recipient_email != '': # ใส่ recipient_email

                            if self.tax_id != '' and self.sender_email == '' and self.documentType == '': # ไม่ใส่ sender_email // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).limit(limit_ch).all()
                                print('non sender_email ,documentType')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType != '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).limit(limit_ch).all()
                                print('only recipient , documentType')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType == '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).limit(limit_ch).all()
                                print('only recipient')

                        elif self.tax_id == '' and self.recipient_email == '' and self.sender_email == '' and self.documentType != '': # ใส่ documentType
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()
                            print('only documenType')

                        elif self.tax_id != '' and self.recipient_email == ''and self.sender_email == ''and self.documentType == '': # ใส่ tax_id
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).limit(limit_ch).all()
                            print('tax_id')

                        elif self.tax_id != '' and self.recipient_email == ''and self.sender_email == ''and self.documentType != '': # ใส่ tax_id,documentType
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()
                            print('tax_id , documenType')

                        elif self.sender_email == '' and self.tax_id == '' and self.recipient_email == ''and self.documentType == '': #ไม่ใส่อะไรเลย
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).limit(limit_ch).all()
                            print('non put')

                    elif self.document_id != '':# กรอกช่อง id
                        date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                        date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                        co_str = len(self.document_id)
                        # print (co_str)
                        if co_str > 13 : # ใส่ doc_id
                            # print ('doc_id')
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.doc_id.contains(self.document_id)).all()
                        elif co_str <= 13 : # ใส่ tracking_id
                            # print ('tracking_id')
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.tracking_id.contains(self.document_id)).all()
                        print ('have id')
                elif self.date_start != '' and self.date_end == '' : # date_start ไม่ว่าง , date_end ว่าง
                    if self.document_id =='':
                        if self.sender_email != '' and self.tax_id != '' and self.recipient_email != ''and self.documentType != '': # ใส่ทั้งหมด
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()
                            print('all put2')

                        elif self.sender_email != '': # ใส่ sender_email

                            if self.tax_id != '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()
                                print('non recipient2')

                            elif self.tax_id == '' and self.recipient_email != '' and self.documentType != '': # ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()
                                print('non tax2')

                            elif self.documentType == '' and self.recipient_email != '' and self.tax_id != '': # ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).limit(limit_ch).all()
                                print('non documentType2')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).limit(limit_ch).all()
                                print('only sender , documentType2')

                            elif self.documentType == '' and self.recipient_email == '' and self.tax_id != '': # ไม่ใส่ recipient_email // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).limit(limit_ch).all()
                                print('only sender , tax_id 2')

                            elif self.tax_id == '' and self.documentType == '' and self.recipient_email != '': # ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).limit(limit_ch).all()
                                print('only sender , recipient_email2')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType == '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).limit(limit_ch).all()
                                print('only sender2')



                        elif self.recipient_email != '': # ใส่ recipient_email

                            if self.tax_id != '' and self.sender_email == '' and self.documentType == '': # ไม่ใส่ sender_email // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).limit(limit_ch).all()
                                print('non sender_email2')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType != '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).limit(limit_ch).all()
                                print('only recipient , documentType2')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType == '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).limit(limit_ch).all()
                                print('only recipient2')

                        elif self.tax_id == '' and self.recipient_email == ''and self.sender_email == ''and self.documentType != '': # ใส่ documentType
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()
                            print('only documenType2')

                        elif self.tax_id != '' and self.recipient_email == '' and self.sender_email == '' and self.documentType == '': # ใส่ tax_id
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).limit(limit_ch).all()
                            print('tax_id2')

                        elif self.tax_id != '' and self.recipient_email == ''and self.sender_email == ''and self.documentType != '': # ใส่ tax_id,documentType
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()
                            print('tax_id , documenType2')

                        elif self.sender_email == '' and self.tax_id == '' and self.recipient_email == '': #ไม่ใส่อะไรเลย
                            date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time>=date_start_tmp).filter(view_document.send_time<=date_end_tmp).limit(limit_ch).all()
                            print('non put2')

                    elif self.document_id != '':# กรอกช่อง id
                        date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                        co_str = len(self.document_id)
                        # print (co_str)
                        if co_str > 13 : # ใส่ doc_id
                            # print ('doc_id')
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time>=date_start_tmp).filter(view_document.doc_id.contains(self.document_id)).all()
                        elif co_str <= 13 : # ใส่ tracking_id
                            # print ('tracking_id')
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time>=date_start_tmp).filter(view_document.tracking_id.contains(self.document_id)).all()
                        print ('have id2')
                elif self.date_start == '' and self.date_end != '' : # date_start ว่าง , date_end ไม่ว่าง
                    query_document_tmp = []
                elif self.date_start == '' and self.date_end == '' : # date_start ว่าง , date_end ว่าง
                    if self.document_id != '':   # กรอกช่อง id
                        co_str = len(self.document_id)
                        # print (co_str)
                        if co_str > 13 :
                            # print ('doc_id')
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.doc_id.contains(self.document_id)).all()
                        elif co_str <= 13 :
                            # print ('tracking_id')
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.tracking_id.contains(self.document_id)).all()
                        print ('have id4')

                    if self.document_id =='': # ไม่กรอก id
                        if self.sender_email != '' and self.tax_id != '' and self.recipient_email != '' and self.documentType != '' : # ใส่ทั้งหมด

                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()
                            print('all put4')

                        elif self.sender_email != '': # ใส่ sender_email

                            if self.tax_id != '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()
                                print('non recipient4')

                            elif self.tax_id == '' and self.recipient_email != '' and self.documentType != '': # ไม่ใส่ tax_id
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()
                                print('non tax4')

                            elif self.documentType == '' and self.recipient_email != '' and self.tax_id != '': # ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).limit(limit_ch).all()
                                print('non documentType2')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).limit(limit_ch).all()
                                print('only sender4')

                            elif self.documentType == '' and self.recipient_email == '' and self.tax_id != '': # ไม่ใส่ recipient_email // ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).limit(limit_ch).all()
                                print('only sender , tax_id 3')

                            elif self.tax_id == '' and self.documentType == '' and self.recipient_email != '': # ไม่ใส่ tax_id // ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).limit(limit_ch).all()
                                print('only sender , recipient_email 3')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType == '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id // ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).limit(limit_ch).all()
                                print('only sender4')

                        elif self.recipient_email != '': # ใส่ recipient_email
                            if self.tax_id != '' and self.sender_email == '' and self.documentType == '': # ไม่ใส่ sender_email // ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).limit(limit_ch).all()
                                print('non sender_email 4')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType != '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).limit(limit_ch).all()
                                print('only recipient , documentType4')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType == '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id // ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.recipient_email.contains(self.recipient_email)).limit(limit_ch).all()
                                print('only recipient4')

                        elif self.tax_id == '' and self.recipient_email == ''and self.sender_email == ''and self.documentType != '': # ใส่ documentType

                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()
                            print('only documenType4')

                        elif self.tax_id != '' and self.recipient_email == ''and self.sender_email == ''and self.documentType == '': # ใส่ tax_id
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).limit(limit_ch).all()
                            print('tax_id4')

                        elif self.tax_id != '' and self.recipient_email == '' and self.sender_email == ''and self.documentType != '': # ใส่ tax_id,documentType

                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()
                            print('tax_id , documenType 4')


                        elif self.sender_email == '' and self.tax_id == '' and self.recipient_email == ''and self.documentType == '':#ไม่ใส่อะไรเลย
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).limit(limit_ch).all()
                            print ('No anything')
                
            else :
                if self.tax_id != '' and self.text != '' and self.document_id == '' and self.sender_email == '' and self.recipient_email == '' and self.documentType == '':
                    print('else tax_id,text')
                    query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.options_page.contains(self.text)).limit(limit_ch).all()
                elif self.date_start != '' and self.date_end != '' : # date_start ไม่ว่าง , date_end ไม่ว่าง
                    if self.document_id =='':
                        if self.sender_email != '' and self.tax_id != '' and self.recipient_email != '' and self.documentType != '': # ใส่ทั้งหมด
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                            # query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()

                            query_document_tmp2 = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()
                            eval_biz_info = eval(query_document_tmp2[0].biz_info)
                            # print ('eval_biz_info: ',eval_biz_info['id_card_num'])
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(eval_biz_info['id_card_num'] == self.tax_id).filter(view_document.options_page.contains(self.documentType)).limit(limit_ch).all()
                            print('all put')

                        elif self.sender_email != '': # ใส่ sender_email

                            if self.sender_email != '' and self.tax_id != '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()

                                # query_document_tmp2 = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()
                                # eval_biz_info = eval(query_document_tmp2[0].biz_info)
                                # query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType.contains(self.documentType)).filter(eval_biz_info['id_card_num'] == self.tax_id).limit(limit_ch).all()

                                print('non recipient')

                            elif self.tax_id == '' and self.recipient_email != '' and self.documentType != '': # ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()
                                print('non tax')

                            elif self.documentType == '' and self.recipient_email != '' and self.tax_id != '': # ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(view_document.biz_info.contains(self.tax_id)).limit(limit_ch).all()
                                print('non documentType')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).limit(limit_ch).all()
                                print('only sender , documentType')

                            elif self.documentType == '' and self.recipient_email == '' and self.tax_id != '': # ไม่ใส่ recipient_email // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).limit(limit_ch).all()
                                print('only sender , tax_id')

                            elif self.tax_id == '' and self.documentType == '' and self.recipient_email == '': # ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).limit(limit_ch).all()
                                print('only sender , recipient_email')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType == '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).limit(limit_ch).all()
                                print('only sender')

                        elif self.recipient_email != '': # ใส่ recipient_email

                            if self.tax_id != '' and self.sender_email == '' and self.documentType == '': # ไม่ใส่ sender_email // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).limit(limit_ch).all()
                                print('non sender_email ,documentType')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType != '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).limit(limit_ch).all()
                                print('only recipient , documentType')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType == '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).limit(limit_ch).all()
                                print('only recipient')

                        elif self.tax_id == '' and self.recipient_email == '' and self.sender_email == '' and self.documentType != '': # ใส่ documentType
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()
                            print('only documenType')

                        elif self.tax_id != '' and self.recipient_email == ''and self.sender_email == ''and self.documentType == '': # ใส่ tax_id
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.biz_info.contains(self.tax_id)).limit(limit_ch).all()
                            print('tax_id')

                        elif self.tax_id != '' and self.recipient_email == ''and self.sender_email == ''and self.documentType != '': # ใส่ tax_id,documentType
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()
                            print('tax_id , documenType')

                        elif self.sender_email == '' and self.tax_id == '' and self.recipient_email == ''and self.documentType == '': #ไม่ใส่อะไรเลย
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).limit(limit_ch).all()
                            print('non put')

                    elif self.document_id != '':# กรอกช่อง id
                        date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                        date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                        co_str = len(self.document_id)
                        # print (co_str)
                        if co_str > 13 : # ใส่ doc_id
                            # print ('doc_id')
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.doc_id.contains(self.document_id)).all()
                        elif co_str <= 13 : # ใส่ tracking_id
                            # print ('tracking_id')
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.tracking_id.contains(self.document_id)).all()
                        print ('have id')
                elif self.date_start != '' and self.date_end == '' : # date_start ไม่ว่าง , date_end ว่าง
                    if self.document_id =='':
                        if self.sender_email != '' and self.tax_id != '' and self.recipient_email != ''and self.documentType != '': # ใส่ทั้งหมด
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()
                            print('all put2')

                        elif self.sender_email != '': # ใส่ sender_email

                            if self.tax_id != '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()
                                print('non recipient2')

                            elif self.tax_id == '' and self.recipient_email != '' and self.documentType != '': # ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()
                                print('non tax2')

                            elif self.documentType == '' and self.recipient_email != '' and self.tax_id != '': # ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(view_document.biz_info.contains(self.tax_id)).limit(limit_ch).all()
                                print('non documentType2')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).limit(limit_ch).all()
                                print('only sender , documentType2')

                            elif self.documentType == '' and self.recipient_email == '' and self.tax_id != '': # ไม่ใส่ recipient_email // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).limit(limit_ch).all()
                                print('only sender , tax_id 2')

                            elif self.tax_id == '' and self.documentType == '' and self.recipient_email != '': # ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).limit(limit_ch).all()
                                print('only sender , recipient_email2')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType == '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).limit(limit_ch).all()
                                print('only sender2')



                        elif self.recipient_email != '': # ใส่ recipient_email

                            if self.tax_id != '' and self.sender_email == '' and self.documentType == '': # ไม่ใส่ sender_email // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).limit(limit_ch).all()
                                print('non sender_email2')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType != '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).limit(limit_ch).all()
                                print('only recipient , documentType2')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType == '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).limit(limit_ch).all()
                                print('only recipient2')

                        elif self.tax_id == '' and self.recipient_email == ''and self.sender_email == ''and self.documentType != '': # ใส่ documentType
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()
                            print('only documenType2')

                        elif self.tax_id != '' and self.recipient_email == '' and self.sender_email == '' and self.documentType == '': # ใส่ tax_id
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.biz_info.contains(self.tax_id)).limit(limit_ch).all()
                            print('tax_id2')

                        elif self.tax_id != '' and self.recipient_email == ''and self.sender_email == ''and self.documentType != '': # ใส่ tax_id,documentType
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()
                            print('tax_id , documenType2')

                        elif self.sender_email == '' and self.tax_id == '' and self.recipient_email == '': #ไม่ใส่อะไรเลย
                            date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time>=date_start_tmp).filter(view_document.send_time<=date_end_tmp).limit(limit_ch).all()
                            print('non put2')

                    elif self.document_id != '':# กรอกช่อง id
                        date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                        co_str = len(self.document_id)
                        # print (co_str)
                        if co_str > 13 : # ใส่ doc_id
                            # print ('doc_id')
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time>=date_start_tmp).filter(view_document.doc_id.contains(self.document_id)).all()
                        elif co_str <= 13 : # ใส่ tracking_id
                            # print ('tracking_id')
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time>=date_start_tmp).filter(view_document.tracking_id.contains(self.document_id)).all()
                        print ('have id2')
                elif self.date_start == '' and self.date_end != '' : # date_start ว่าง , date_end ไม่ว่าง
                    query_document_tmp = []
                elif self.date_start == '' and self.date_end == '' : # date_start ว่าง , date_end ว่าง
                    if self.document_id != '':   # กรอกช่อง id
                        co_str = len(self.document_id)
                        # print (co_str)
                        if co_str > 13 :
                            # print ('doc_id')
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.doc_id.contains(self.document_id)).all()
                        elif co_str <= 13 :
                            # print ('tracking_id')
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.tracking_id.contains(self.document_id)).all()
                        print ('have id4')

                    if self.document_id =='': # ไม่กรอก id
                        if self.sender_email != '' and self.tax_id != '' and self.recipient_email != '' and self.documentType != '' : # ใส่ทั้งหมด

                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()
                            print('all put4')

                        elif self.sender_email != '': # ใส่ sender_email

                            if self.tax_id != '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()
                                print('non recipient4')

                            elif self.tax_id == '' and self.recipient_email != '' and self.documentType != '': # ไม่ใส่ tax_id
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()
                                print('non tax4')

                            elif self.documentType == '' and self.recipient_email != '' and self.tax_id != '': # ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(view_document.biz_info.contains(self.tax_id)).limit(limit_ch).all()
                                print('non documentType2')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).limit(limit_ch).all()
                                print('only sender4')

                            elif self.documentType == '' and self.recipient_email == '' and self.tax_id != '': # ไม่ใส่ recipient_email // ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).limit(limit_ch).all()
                                print('only sender , tax_id 3')

                            elif self.tax_id == '' and self.documentType == '' and self.recipient_email != '': # ไม่ใส่ tax_id // ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).limit(limit_ch).all()
                                print('only sender , recipient_email 3')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType == '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id // ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).limit(limit_ch).all()
                                print('only sender4')

                        elif self.recipient_email != '': # ใส่ recipient_email
                            if self.tax_id != '' and self.sender_email == '' and self.documentType == '': # ไม่ใส่ sender_email // ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).limit(limit_ch).all()
                                print('non sender_email 4')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType != '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).limit(limit_ch).all()
                                print('only recipient , documentType4')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType == '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id // ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.recipient_email.contains(self.recipient_email)).limit(limit_ch).all()
                                print('only recipient4')

                        elif self.tax_id == '' and self.recipient_email == ''and self.sender_email == ''and self.documentType != '': # ใส่ documentType

                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()
                            print('only documenType4')

                        elif self.tax_id != '' and self.recipient_email == ''and self.sender_email == ''and self.documentType == '': # ใส่ tax_id
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.biz_info.contains(self.tax_id)).limit(limit_ch).all()
                            print('tax_id4')

                        elif self.tax_id != '' and self.recipient_email == '' and self.sender_email == ''and self.documentType != '': # ใส่ tax_id,documentType

                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()
                            print('tax_id , documenType 4')


                        elif self.sender_email == '' and self.tax_id == '' and self.recipient_email == ''and self.documentType == '':#ไม่ใส่อะไรเลย
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).limit(limit_ch).all()
                            print ('No anything')
            
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':str(e)}        
        try:
            if len(query_document_tmp) == 0 or query_document_tmp == None:
                return {'result':'ER','messageText':'data not found'}
            elif len(query_document_tmp) !=0 :
                tmp_data = {}
                documentJson_result = None
                string_list_timeline = ''
                concat_steptimeline = ''
                for u in range(len(query_document_tmp)):
                    sid_email = query_document_tmp[u].step_data_sid
                    jsonData_eval = eval(query_document_tmp[u].data_json)
                    arr_step_info = []
                    timestamp_info = []
                    step_time_1 = []
                    step_timeline = []
                    result = None
                    timing_1 = None
                    lis_details = []
                    list_string_timing = []
                    list_options_page = []

                    if 'step_num' in jsonData_eval:
                        step_status = ''
                        step_before = ''
                        my_step = ''
                        res_status_file = 'Y'
                        arr_step_totle = []
                        json_data_info = jsonData_eval
                        details_email_reject = []
                        details_email_incomplete = []
                        if 'step_detail' in json_data_info:
                            for s in range(len(json_data_info['step_detail'])):
                                json_info_step2 = {}
                                for su in range(len(json_data_info['step_detail'][s]['activity_code'])):
                                    oneMail = json_data_info['step_detail'][s]['one_email']
                                    step_2 = json_data_info['step_detail'][s]
                                    # if str(oneMail).replace(' ','').lower() == self.emailUser:
                                    if json_data_info['step_detail'][s]['activity_code'][su] == 'A03':
                                        print(timestamp_info)
                                        print(sid_email)
                                        if my_step == '':
                                            if json_data_info['step_detail'][s]['activity_status'][su] == 'Complete':
                                                step_status = 'Complete'
                                                timestemp = int(time.mktime(datetime.datetime.strptime(json_data_info['step_detail'][s]['activity_time'][su], "%Y-%m-%d %H:%M:%S").timetuple()))
                                                timestamp_info.append(timestemp)
                                                t1 = step_2['activity_time'][su]
                                                t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                                step_time_1.append(t2)
                                            elif json_data_info['step_detail'][s]['activity_status'][su] == 'Approve':
                                                step_status = 'Complete'
                                                timestemp = int(time.mktime(datetime.datetime.strptime(json_data_info['step_detail'][s]['activity_time'][su], "%Y-%m-%d %H:%M:%S").timetuple()))
                                                timestamp_info.append(timestemp)
                                                t1 = step_2['activity_time'][su]
                                                t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                                step_time_1.append(t2)
                                            elif json_data_info['step_detail'][s]['activity_status'][su] == 'Reject':
                                                step_status = 'Reject'
                                                timestemp = int(time.mktime(datetime.datetime.strptime(json_data_info['step_detail'][s]['activity_time'][su], "%Y-%m-%d %H:%M:%S").timetuple()))
                                                timestamp_info.append(timestemp)
                                                t1 = step_2['activity_time'][su]
                                                t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                                step_time_1.append(t2)
                                            else:
                                                try:
                                                    step_status  = 'Incomplete'
                                                    # t1 = step_2['activity_time'][su]
                                                    # t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                                    # step_time_1.append(t2)
                                                    details_email_incomplete.append({'email':json_data_info['step_detail'][s]['one_email'],'step_num':json_data_info['step_num']})
                                                except Exception as ex:
                                                    step_status = 'Incomplete'
                                        arr_step_info.append(step_status)
                                        arr_step_info.append(step_before)
                        print(arr_step_info)
                        if 'Reject' in arr_step_info:
                            res_status_file = 'R'
                            res_status_file_string = 'เอกสารปฏิเสธอนุมัติ'
                        elif 'Complete' in arr_step_info:
                            res_status_file = 'Y'
                            res_status_file_string = 'อนุมัติแล้ว'
                        elif 'Waitting' in arr_step_info:
                            res_status_file = 'W'
                            res_status_file_string = 'รออนุมัติ'
                        elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                            res_status_file = 'N'
                            res_status_file_string = 'กำลังดำเนินการ'
                        else:
                            res_status_file_string = 'อนุมัติแล้ว'
                        if res_status_file == 'W':
                            statusFile_count_wait = statusFile_count_wait + 1
                        elif res_status_file == 'Y':
                            statusFile_count_approve = statusFile_count_approve + 1
                        elif res_status_file == 'R':
                            statusFile_count_reject = statusFile_count_reject + 1
                        else:
                            statusFile_count_pendding = statusFile_count_pendding + 1
                        string_timing = ''
                        dateTime_String = query_document_tmp[u].send_time
                        start_send_time = dateTime_String.timestamp()
                        now = datetime.datetime.now()
                        timing = (now.timestamp()) - start_send_time
                        timing_1 = convert_hr_min_sec_v1(int(timing))
                        for yy in range(len(timing_1)):
                            if timing_1[yy] > 0:
                                if yy == 0:
                                    type_date = " วัน "
                                elif yy == 1:
                                    type_date = " ชั่วโมง "
                                elif yy == 2:
                                    type_date = " นาที "
                                elif yy == 3:
                                    type_date = " วินาที "
                                string_timing += str(timing_1[yy]) + type_date
                        # list_string_timing.append(string_timing)
                        # string_timing = ''
                        print ('list_steptime1',step_time_1)
                        if(len(step_time_1) != 0):
                            for i in range(len(step_time_1)):
                                if(i==0):
                                    print ('เริ่มต้น : ',start_send_time)
                                    result = step_time_1[i] - start_send_time
                                    # print ('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ',result)
                                    list_timeline = convert_hr_min_sec_v1(int(result))
                                    # print ('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ : ',list_timeline)
                                    for yy in range(len(list_timeline)):
                                        if list_timeline[yy] > 0:
                                            if yy == 0:
                                                type_date = " วัน "
                                            elif yy == 1:
                                                type_date = " ชั่วโมง "
                                            elif yy == 2:
                                                type_date = " นาที "
                                            elif yy == 3:
                                                type_date = " วินาที "
                                            string_list_timeline += str(list_timeline[yy]) + type_date
                                    print('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ (string)',string_list_timeline)
                                    step_timeline.append(string_list_timeline)
                                    string_list_timeline = ''
                                else:
                                    result = step_time_1[i] - step_time_1[i-1]
                                    # print ('ลำดับปัจจุบัน- ลำดับก่อนหน้า',result)
                                    list_timeline = convert_hr_min_sec_v1(int(result))
                                    for yy in range(len(list_timeline)):
                                        if list_timeline[yy] > 0:
                                            if yy == 0:
                                                type_date = " วัน "
                                            elif yy == 1:
                                                type_date = " ชั่วโมง "
                                            elif yy == 2:
                                                type_date = " นาที "
                                            elif yy == 3:
                                                type_date = " วินาที "
                                            string_list_timeline += str(list_timeline[yy]) + type_date
                                    print('เริ่มต้น - ลำดับก่อนหน้า (string)',string_list_timeline)
                                    step_timeline.append(string_list_timeline)
                            print ("สรุปเวลาการเซ็นแต่ละลำดับ :",step_timeline)
                            concat_steptimeline += 'ระยะเวลาดำเนินการ\n'
                            for j in range(len(step_timeline)):
                                if(j == (len(step_timeline))-1):
                                    concat_steptimeline += '-ลำดับที่ ' +str(j+1)+ ' : ' + str(step_timeline[j])
                                else:
                                    concat_steptimeline += '-ลำดับที่ ' +str(j+1)+ ' : ' + str(step_timeline[j]) + '\n'
                            print ('concat_steptimeline',concat_steptimeline)
                        elif(len(step_time_1) == 0):
                            concat_steptimeline += 'อยู่ระหว่างดำเนินการ'

                        # string_details_avg_time = ''
                        string_details_avg_time = 'ระยะเวลาทั้งหมดที่เอกสารถูกดำเนินการ\n'
                        if len(timestamp_info) != 0:
                            # end_time_document = timestamp_info[-1]
                            # result_start_and_end = end_time_document - start_send_time
                            end_time_document = timestamp_info[-1]
                            result_start_and_end = end_time_document - start_send_time
                            list_day_hr_min_sec = convert_hr_min_sec_v1(int(result_start_and_end))
                            for yy in range(len(list_day_hr_min_sec)):
                                if list_day_hr_min_sec[yy] > 0:
                                    if yy == 0:
                                        type_date = " วัน "
                                    elif yy == 1:
                                        type_date = " ชั่วโมง "
                                    elif yy == 2:
                                        type_date = " นาที "
                                    elif yy == 3:
                                        type_date = " วินาที "
                                    string_details_avg_time += str(list_day_hr_min_sec[yy]) + type_date
                        print(string_details_avg_time)
                        if res_status_file == 'N':
                            string_details_avg_time = ""
                        # th_dateTime_1 = convert_datetime_TH_1(int(dateTime_String.timestamp()))
                        th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                        ts = int(time.time())
                        date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                        year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                        datetime_display = int(dateTime_String.timestamp())
                        date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                        yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                        time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                        old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                        if date_time_today == date_time_db:
                            date_display_show = time_show_db
                        else:
                            if year_today == yar_db:
                                date_display_show = convert_datetime_TH_2_display(datetime_display)
                            else:
                                date_display_show = old_year
                        string_remark_description = ''
                        title_remark = ''
                        if res_status_file == 'R':
                            if len(details_email_reject) != 0:
                                for o in range(len(details_email_reject)):
                                    query_data = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(details_email_reject[o]['email'])).all()
                                    data_json_name = eval(query_data[0].citizen_data)['first_name_th'] + ' ' + eval(query_data[0].citizen_data)['last_name_th']
                                    # print(data_json_name)
                                    details_msg = {}
                                    details_msg['reject_by'] = details_email_reject[o]['email']
                                    details_msg['reject_in_step_num'] = (details_email_reject[o]['step_num'])
                                    details_msg['reject_in_datetime'] = details_email_reject[o]['datetime']
                                    title_remark = 'ยกเลิกโดย ลำดับที่ ' + str(details_email_reject[o]['step_num'])
                                    datetime_display = convert_datetime_TH_2(int(details_email_reject[o]['datetime_string']))
                                    string_remark_description +=  '\n-' + data_json_name + '\nวันที่ ' + datetime_display
                                    lis_details.append(details_msg)
                        elif res_status_file == 'N':
                            if len(details_email_incomplete) != 0:
                                for oi in range(len(details_email_incomplete)):
                                    tmp_step_num_list_0 = details_email_incomplete[0]['step_num']
                                    tmp_step_num_list = details_email_incomplete[oi]['step_num']
                                    if tmp_step_num_list_0 == tmp_step_num_list:
                                        query_data = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(details_email_incomplete[oi]['email'])).all()
                                        try:
                                            data_json_name = eval(query_data[0].citizen_data)['first_name_th'] + ' ' + eval(query_data[0].citizen_data)['last_name_th']
                                        except Exception as e:
                                            data_json_name = details_email_incomplete[oi]['email']

                                        details_msg = {}
                                        details_msg['pending_by'] = details_email_incomplete[oi]['email']
                                        details_msg['pending_in_step_num'] = (details_email_incomplete[oi]['step_num'])
                                        title_remark = 'รอการอนุมัติ ลำดับที่ ' + str(details_email_incomplete[oi]['step_num'])
                                        string_remark_description += '\n-' + data_json_name + ''
                                        lis_details.append(details_msg)
                    else:
                        step_status = ''
                        res_status_file = 'Y'
                        step_before = ''
                        step_list_before = []
                        step_list_ = []
                        step_list_next = []
                        arr_step_totle = []
                        step_me = ''
                        step_sum_status = []
                        sum_status_step_list = []
                        list_check_step = []
                        step_list_data = []
                        max_step = (len(jsonData_eval))
                        step_infomation = jsonData_eval
                        sum_status_step = []
                        details_email_reject = []
                        details_email_incomplete = []
                        lis_details = []
                        for i in range(len(step_infomation)):
                            list_check_step = []
                            json_step_info_2 = {}
                            step_list_data = []
                            step_ = step_infomation[i]
                            step_num = step_infomation[i]['step_num']
                            json_step_info_2['step_status'] = ''
                            for m in range(len(step_['step_detail'])):
                                oneMail = step_['step_detail'][m]['one_email']
                                # if str(oneMail).replace(' ','').lower() == self.emailUser:
                                #     step_me = step_infomation[i]['step_num']
                                #     step_me = int(step_me) - 1
                                step_2 = step_['step_detail'][m]
                                for k in range(len(step_2['activity_code'])):
                                    if step_2['activity_code'][k] == 'A03':
                                        # print()
                                        if step_2['activity_status'][k] == 'Complete':
                                            timestemp = int(time.mktime(datetime.datetime.strptime(step_2['activity_time'][k], "%Y-%m-%d %H:%M:%S").timetuple()))
                                            timestamp_info.append(timestemp)
                                            t1 = step_2['activity_time'][k]
                                            t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                            step_time_1.append(t2)
                                        elif step_2['activity_status'][k] == 'Approve':
                                            timestemp = int(time.mktime(datetime.datetime.strptime(step_2['activity_time'][k], "%Y-%m-%d %H:%M:%S").timetuple()))
                                            timestamp_info.append(timestemp)
                                            t1 = step_2['activity_time'][k]
                                            t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                            step_time_1.append(t2)
                                        elif step_2['activity_status'][k] == 'Reject':
                                            timestemp = int(time.mktime(datetime.datetime.strptime(step_2['activity_time'][k], "%Y-%m-%d %H:%M:%S").timetuple()))
                                            timestamp_info.append(timestemp)
                                            t1 = step_2['activity_time'][k]
                                            t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                            step_time_1.append(t2)
                                        json_step_info = {}
                                        json_step_info['activity_status'] = step_2['activity_status'][k]
                                        json_step_info['one_email'] = step_2['one_email']
                                        json_step_info['step_num'] = step_num
                                        list_check_step.append(json_step_info['activity_status'])
                                        step_list_data.append(json_step_info)
                                # print ('Round time', step_time_1)
                                json_step_info_2['step_info'] = step_list_data
                                if json_step_info_2['step_status'] == '':
                                    if 'Reject' in list_check_step:
                                        for kz in range(len(step_2['activity_code'])):
                                            if step_2['activity_code'][kz] == 'A03':
                                                details_email_reject.append({'email':step_2['one_email'],'step_num':step_num,'datetime':step_2['activity_time'][kz],'datetime_string':time.mktime(datetime.datetime.strptime(step_2['activity_time'][kz], "%Y-%m-%d %H:%M:%S").timetuple())})
                                        json_step_info_2['step_status'] = 'Reject'
                                    elif 'Complete' in list_check_step:
                                        json_step_info_2['step_status'] = 'Complete'
                                    elif 'Approve' in list_check_step:
                                        json_step_info_2['step_status'] = 'Complete'
                                    elif 'Incomplete' in list_check_step:
                                        # details_email_incomplete.append({'email':step_2['one_email'],'step_num':step_num})
                                        json_step_info_2['step_status'] = 'Incomplete'
                                    elif 'Pending' in list_check_step:
                                        # details_email_incomplete.append({'email':step_2['one_email'],'step_num':step_num})
                                        json_step_info_2['step_status'] = 'Incomplete'
                                    else:
                                        json_step_info_2['step_status'] = 'Complete'
                                if json_step_info_2['step_status'] == 'Incomplete':
                                    if 'Reject' in list_check_step:
                                        json_step_info_2['step_status'] = 'Reject'
                                    elif 'Complete' in list_check_step:
                                        json_step_info_2['step_status'] = 'Complete'
                                    elif 'Approve' in list_check_step:
                                        json_step_info_2['step_status'] = 'Complete'
                                    elif 'Incomplete' in list_check_step:
                                        details_email_incomplete.append({'email':step_2['one_email'],'step_num':step_num})
                                        json_step_info_2['step_status'] = 'Incomplete'
                                    elif 'Pending' in list_check_step:
                                        details_email_incomplete.append({'email':step_2['one_email'],'step_num':step_num})
                                        json_step_info_2['step_status'] = 'Incomplete'
                                    else:
                                        json_step_info_2['step_status'] = 'Complete'

                                sum_status_step_list.append(json_step_info_2['step_status'])
                            sum_status_step.append(json_step_info_2['step_status'])
                            arr_step_info.append(json_step_info_2['step_status'])
                        index_mystep = step_me
                        print(sid_email)
                        print(arr_step_info)
                        if 'Reject' in arr_step_info:
                            res_status_file = 'R'
                            res_status_file_string = 'เอกสารปฏิเสธอนุมัติ'
                        elif 'Incomplete_1' in arr_step_info or 'Pending_1' in arr_step_info:
                            res_status_file = 'W'
                            res_status_file_string = 'รออนุมัติ'
                        elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                            res_status_file = 'N'
                            res_status_file_string = 'กำลังดำเนินการ'
                        elif 'Wait__' in arr_step_info:
                            res_status_file = 'Z'
                            res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                        elif 'Waitting' in arr_step_info:
                            res_status_file = 'W'
                            res_status_file_string = 'รออนุมัติ'
                        else:
                            res_status_file_string = 'อนุมัติแล้ว'
                        if res_status_file == 'W':
                            statusFile_count_wait = statusFile_count_wait + 1
                        elif res_status_file == 'Y':
                            statusFile_count_approve = statusFile_count_approve + 1
                        elif res_status_file == 'R':
                            statusFile_count_reject = statusFile_count_reject + 1
                        else:
                            statusFile_count_pendding = statusFile_count_pendding + 1
                        string_timing = ''
                        dateTime_String = query_document_tmp[u].send_time
                        start_send_time = dateTime_String.timestamp()
                        now = datetime.datetime.now()
                        timing = (now.timestamp()) - start_send_time
                        timing_1 = convert_hr_min_sec_v1(int(timing))
                        for yy in range(len(timing_1)):
                            if timing_1[yy] > 0:
                                if yy == 0:
                                    type_date = " วัน "
                                elif yy == 1:
                                    type_date = " ชั่วโมง "
                                elif yy == 2:
                                    type_date = " นาที "
                                elif yy == 3:
                                    type_date = " วินาที "
                                string_timing += str(timing_1[yy]) + type_date
                        # list_string_timing.append(string_timing)
                        # string_timing = ''
                        print ('list_steptime1',step_time_1)
                        if(len(step_time_1) != 0):
                            string_list_timeline = ''
                            for i in range(len(step_time_1)):
                                if(i==0):
                                    print ('เริ่มต้น : ',start_send_time)
                                    result = step_time_1[i] - start_send_time
                                    # print ('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ',result)
                                    list_timeline = convert_hr_min_sec_v1(int(result))
                                    # print ('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ : ',list_timeline)
                                    for yy in range(len(list_timeline)):
                                        if list_timeline[yy] > 0:
                                            if yy == 0:
                                                type_date = " วัน "
                                            elif yy == 1:
                                                type_date = " ชั่วโมง "
                                            elif yy == 2:
                                                type_date = " นาที "
                                            elif yy == 3:
                                                type_date = " วินาที "
                                            string_list_timeline += str(list_timeline[yy]) + type_date
                                    print('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ (string)',string_list_timeline)
                                    step_timeline.append(string_list_timeline)
                                else:
                                    result = step_time_1[i] - step_time_1[i-1]
                                    # print ('ลำดับปัจจุบัน- ลำดับก่อนหน้า',result)
                                    list_timeline = convert_hr_min_sec_v1(int(result))
                                    for yy in range(len(list_timeline)):
                                        if list_timeline[yy] > 0:
                                            if yy == 0:
                                                type_date = " วัน "
                                            elif yy == 1:
                                                type_date = " ชั่วโมง "
                                            elif yy == 2:
                                                type_date = " นาที "
                                            elif yy == 3:
                                                type_date = " วินาที "
                                            string_list_timeline += str(list_timeline[yy]) + type_date
                                    print('เริ่มต้น - ลำดับก่อนหน้า (string)',string_list_timeline)
                                    step_timeline.append(string_list_timeline)
                                    string_list_timeline = ''
                            print ("สรุปเวลาการเซ็นแต่ละลำดับ :",step_timeline)
                            concat_steptimeline = ''
                            concat_steptimeline += 'ระยะเวลาดำเนินการ\n'
                            for j in range(len(step_timeline)):
                                if(j == (len(step_timeline))-1):
                                    concat_steptimeline += '-ลำดับที่ ' +str(j+1)+ ' : ' + str(step_timeline[j])
                                else:
                                    concat_steptimeline += '-ลำดับที่ ' +str(j+1)+ ' : ' + str(step_timeline[j]) + '\n'
                            print ('concat_steptimeline',concat_steptimeline)
                        elif(len(step_time_1) == 0):
                            concat_steptimeline += 'อยู่ระหว่างดำเนินการ'

                        # string_details_avg_time = ''
                        string_details_avg_time = 'ระยะเวลาทั้งหมดที่เอกสารถูกดำเนินการ\n'
                        if len(timestamp_info) != 0:
                            # end_time_document = timestamp_info[-1]
                            # result_start_and_end = end_time_document - start_send_time
                            end_time_document = timestamp_info[-1]
                            result_start_and_end = end_time_document - start_send_time
                            list_day_hr_min_sec = convert_hr_min_sec_v1(int(result_start_and_end))
                            print(end_time_document,start_send_time)
                            print(timestamp_info)
                            for yy in range(len(list_day_hr_min_sec)):
                                if list_day_hr_min_sec[yy] > 0:
                                    if yy == 0:
                                        type_date = " วัน "
                                    elif yy == 1:
                                        type_date = " ชั่วโมง "
                                    elif yy == 2:
                                        type_date = " นาที "
                                    elif yy == 3:
                                        type_date = " วินาที "
                                    string_details_avg_time += str(list_day_hr_min_sec[yy]) + type_date
                        print(string_details_avg_time)
                        if res_status_file == 'N':
                            string_details_avg_time = ""
                        # th_dateTime_1 = convert_datetime_TH_1(int(dateTime_String.timestamp()))
                        th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                        ts = int(time.time())
                        date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                        year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                        datetime_display = int(dateTime_String.timestamp())
                        date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                        yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                        time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                        old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                        if date_time_today == date_time_db:
                            date_display_show = time_show_db
                        else:
                            if year_today == yar_db:
                                date_display_show = convert_datetime_TH_2_display(datetime_display)
                            else:
                                date_display_show = old_year
                        string_remark_description = ''
                        title_remark = ''
                        if res_status_file == 'R':
                            if len(details_email_reject) != 0:
                                for o in range(len(details_email_reject)):
                                    query_data = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(details_email_reject[o]['email'])).all()
                                    try:
                                        data_json_name = eval(query_data[0].citizen_data)['first_name_th'] + ' ' + eval(query_data[0].citizen_data)['last_name_th']
                                    except Exception as e:
                                        data_json_name = details_email_incomplete[oi]['email']
                                    # print(data_json_name)
                                    details_msg = {}
                                    details_msg['reject_by'] = details_email_reject[o]['email']
                                    details_msg['reject_in_step_num'] = details_email_reject[o]['step_num']
                                    details_msg['reject_in_datetime'] = details_email_reject[o]['datetime']
                                    title_remark = 'ยกเลิกโดย ลำดับที่ ' + details_email_reject[o]['step_num']
                                    datetime_display = convert_datetime_TH_2(int(details_email_reject[o]['datetime_string']))
                                    string_remark_description +=  '\n-' + data_json_name + '\nวันที่ ' + datetime_display
                                    lis_details.append(details_msg)
                        elif res_status_file == 'N':
                            if len(details_email_incomplete) != 0:
                                for oi in range(len(details_email_incomplete)):
                                    tmp_step_num_list_0 = details_email_incomplete[0]['step_num']
                                    tmp_step_num_list = details_email_incomplete[oi]['step_num']
                                    if tmp_step_num_list_0 == tmp_step_num_list:
                                        query_data = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(details_email_incomplete[oi]['email'])).all()
                                        try:
                                            data_json_name = eval(query_data[0].citizen_data)['first_name_th'] + ' ' + eval(query_data[0].citizen_data)['last_name_th']
                                        except Exception as e:
                                            data_json_name = details_email_incomplete[oi]['email']

                                        details_msg = {}
                                        details_msg['pending_by'] = details_email_incomplete[oi]['email']
                                        details_msg['pending_in_step_num'] = details_email_incomplete[oi]['step_num']
                                        title_remark = 'รอการอนุมัติ ลำดับที่ ' + details_email_incomplete[oi]['step_num']
                                        string_remark_description += '\n-' + data_json_name + ''
                                        lis_details.append(details_msg)
                    tmp_json = {}
                    ts = int(time.time())
                    date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                    year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                    dateTime_timestamp = int((query_document_tmp[u].send_time).timestamp())
                    date_time_db = datetime.datetime.fromtimestamp(dateTime_timestamp).strftime('%Y-%m-%d')
                    yar_db = datetime.datetime.fromtimestamp(dateTime_timestamp).strftime('%Y')
                    time_show_db = datetime.datetime.fromtimestamp(dateTime_timestamp).strftime('%H:%M')
                    old_year = datetime.datetime.fromtimestamp(dateTime_timestamp).strftime('%d/%m/%Y')
                    if date_time_today == date_time_db:
                        date_display_show = time_show_db
                    else:
                        if year_today == yar_db:
                            date_display_show = convert_datetime_TH_2_display(dateTime_timestamp)
                        else:
                            date_display_show = old_year

                    if query_document_tmp[u].urgent_type != None:
                        documentUrgentType = query_document_tmp[u].urgent_type
                        if documentUrgentType == 'I':
                            documentUrgentString = 'ด่วนมาก'
                        elif documentUrgentType == 'U':
                            documentUrgentString = 'ด่วน'
                        elif documentUrgentType == 'M':
                            documentUrgentString = 'ปกติ'

                    if query_document_tmp[u].documentJson != None:
                        documentJson_result = eval(query_document_tmp[u].documentJson)
                        print(documentJson_result)
                        documentName = documentJson_result['document_name']
                        documentType = documentJson_result['document_type']
                    else:
                        documentName = None
                        documentType = None



                    tmp_json['send_time'] = query_document_tmp[u].send_time
                    tmp_json['dateTime'] = dateTime_timestamp
                    tmp_json['dateTime_String'] = str(query_document_tmp[u].send_time).split('+')[0]
                    tmp_json['dateTime_String_TH_1'] = convert_datetime_TH_2(dateTime_timestamp)
                    tmp_json['dateTime_display'] = date_display_show
                    tmp_json['date_String'] = str(query_document_tmp[u].send_time).split(' ')[0]
                    tmp_json['time_String'] = str(query_document_tmp[u].send_time).split(' ')[1].split('+')[0]

                    tmp_json['document_urgent_string'] = documentUrgentString
                    tmp_json['document_name'] = documentName
                    tmp_json['document_type'] = documentType
                    tmp_json['sender_name'] = query_document_tmp[u].sender_name
                    tmp_json['sender_email'] = query_document_tmp[u].sender_email
                    if tmp_json['sender_name'] == 'null null':
                        tmp_json['sender_name'] = tmp_json['sender_email']
                    tmp_json['recipient_email'] = eval(query_document_tmp[u].recipient_email)
                    tmp_json['document_id'] = query_document_tmp[u].doc_id
                    tmp_json['tracking_id'] = query_document_tmp[u].tracking_id
                    tmp_json['file_name'] = query_document_tmp[u].file_name
                    if query_document_tmp[u].string_pdf != None:
                        tmp_json['status_original_pdf_file'] = True
                    else:
                        tmp_json['status_original_pdf_file'] = False
                    if query_document_tmp[u].string_sign != None:
                        tmp_json['status_sign_pdf_file'] = True
                    else:
                        tmp_json['status_sign_pdf_file'] = False
                    # tmp_json['data_json'] = eval(query_document_tmp[u].data_json)
                    tmp_json['fid'] = query_document_tmp[u].fid
                    # tmp_json['document_type'] = query_document_tmp[u].documentType
                    # tmp_json['documentJson'] = query_document_tmp[u].documentJson
                    tmp_json['digit_sign'] = query_document_tmp[u].digit_sign
                    tmp_json['document_urgent'] = query_document_tmp[u].urgent_type
                    option_eval=eval(query_document_tmp[u].options_page)
                    list_options_page.append(option_eval)
                    tmp_json['options_page'] = list_options_page

                    tmp_json['stamp_all'] = query_document_tmp[u].sign_page_options
                    tmp_json['sidCode'] = query_document_tmp[u].step_data_sid
                    try:
                        tmp_json['email_center'] = eval(query_document_tmp[u].email_center)
                    except Exception as e:
                        tmp_json['email_center'] = query_document_tmp[u].email_center
                    # if เช็คค่า null ของ attempted_folder -v-
                    tmp_json['attempted_folder'] = query_document_tmp[u].attempted_folder
                    tmp_json['status_file_code'] = res_status_file
                    tmp_json['status_file_details'] = lis_details
                    tmp_json['status_file_string'] = res_status_file_string
                    tmp_json['string_details_avg_time'] = string_details_avg_time
                    tmp_json['timeline'] = concat_steptimeline
                    tmp_json['timing'] = string_timing
                    tmp_json['remark_description'] = title_remark + string_remark_description

                    tmp_json['step_Name'] = query_document_tmp[u].step_Name
                    tmp_json['documentDetails'] = query_document_tmp[u].documentDetails
                    tmp_json['condition_temp'] = query_document_tmp[u].condition_temp
                    tmp_json['step_Code'] = query_document_tmp[u].step_Code
                    tmp_json['status'] = query_document_tmp[u].status
                    # if tmp_json['status'] == 'ACTIVE':
                    #     count_Active += 1
                    # elif tmp_json['status'] == 'REJECT':
                    #    count_Reject += 1


                    tmp_biz_info = (query_document_tmp[u].biz_info)
                    if tmp_biz_info == 'None':
                        tmp_biz_info = 'None'
                        list_biz = []
                        dict_biz= {}
                        dict_biz['id'] = None
                        dict_biz['id_card_num'] = None
                        dict_biz['first_name_eng'] = None
                        dict_biz['first_name_th'] = None
                        list_biz.append(dict_biz)
                        tmp_json['biz_detail'] = list_biz

                    else :
                        tmp_biz_info = eval(tmp_biz_info)
                        if 'id' in tmp_biz_info:
                            tmp_id_biz = tmp_biz_info['id']
                            tmp_id_card_num_biz = tmp_biz_info['id_card_num']
                            tmp_first_name_eng_biz = tmp_biz_info['first_name_eng']
                            tmp_first_name_th_biz = tmp_biz_info['first_name_th']
                        tmp_json['biz_detail'] = [{'id':tmp_id_biz,'id_card_num':tmp_id_card_num_biz,'first_name_eng':tmp_first_name_eng_biz,'first_name_th':tmp_first_name_th_biz}]

                    # print (u)
                    sum_Document = sum_Document+1

                    if ((u+1) == len(query_document_tmp)):
                        last_time = (tmp_json['send_time'])
                        dt_object = int(datetime.datetime.timestamp(last_time))


                    tmp_list_result.append(tmp_json)
                tmp_data['data'] = tmp_list_result
                tmp_data['sum_Document'] = query_document_tmp_count

                # tmp_data['Document_Status_Details']
                Document_Status_Details  = [{
                    'Incomplete_Pendding':statusFile_count_pendding,
                    'Complete_Approve':statusFile_count_approve,
                    'Reject':statusFile_count_reject
                }]

                tmp_data['Document_Status'] = [{
                    'ACTIVE':query_document_tmp_Active,
                    'REJECT':query_document_tmp_Reject
                }]

                tmp_list_result2.append(tmp_data)
                return {'result':'OK','last_time':dt_object,'messageText':tmp_list_result2}
            else:
                return {'result':'ER','messageText':'data not found'}
        except exc.SQLAlchemyError as ex:
            db.session.rollback()
            raise
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            db.session.rollback()
            raise
            return {'result':'ER','messageText':'cant select','messageER':str(e)}
        finally:
            db.session.close()


    def select_pty_file_pdf_v1(self,sidCode):
        self.sidCode = sidCode
        json_data = {}
        try:
            result_document = paper_lessdocument.query.filter(paper_lessdocument.step_id==self.sidCode).first()
            print(result_document)
            if result_document != None:
                if result_document.options_page != None:
                    try:
                        json_data['options_page'] = eval(result_document.options_page)
                    except Exception as e:
                        json_data['options_page'] = None
                else:
                    json_data['options_page'] = None
            return {'result':'OK','msg':json_data}
        except Exception as e:
            return {'result':'ER','msg':str(e)}
        finally:
            db.session.close()

    def select_file_main_pdf_to_sftp_v1(self,sidCode):
        self.sidCode = sidCode

    def select_file_name_to_subject_v1(self):
        query_filename = paper_lesssender.query.filter().all()
        try:
            for n in range(len(query_filename)):
                result_docu = paper_lessdocument.query.filter(paper_lessdocument.step_id==query_filename[n].step_data_sid).first()
                if result_docu.options_page != None:
                    text_subject = {'subject_text': '<ไม่มีหัวเรื่อง>', 'body_text': query_filename[n].file_name}
                    result_docu.options_page = str(text_subject)
                    db.session.commit()
        except exc.SQLAlchemyError as ex:
            db.session.rollback()
            raise
        except Exception as e:
            db.session.rollback()
            raise
            return {'result':'ER','messageText':'cant update','messageER':str(e)}
        finally:
            db.session.close()


    def select_sid_code_status_v1(self,sidCode):
        self.sidCode = sidCode
        sid_list = []
        sid_list_email = []
        json_Data = {}
        list_arr = []
        list_json = []
        try:
            for i in paper_lesssender.query.filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.step_data_sid.contains(self.sidCode)).order_by(desc(paper_lesssender.send_time)).all():
                sid_list_email.append(i.step_data_sid)
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

        count_rowDocument = 0
        count_rowDocument_StatusActive = 0
        count_rowDocument_StatusReject = 0
        count_rowDocument_StatusCancel = 0
        statusFile_count_approve = 0
        statusFile_count_pendding = 0
        statusFile_count_reject = 0
        statusFile_count_wait = 0
        try:
            count_rowDocument_StatusActive = paper_lesssender.query.filter(paper_lesssender.step_data_sid.in_(sid_list_email),paper_lesssender.status=='ACTIVE').count()
            count_rowDocument_StatusReject = paper_lesssender.query.filter(paper_lesssender.step_data_sid.in_(sid_list_email),paper_lesssender.status=='REJECT').count()
            count_rowDocument_StatusCancel = paper_lesssender.query.filter(paper_lesssender.step_data_sid.in_(sid_list_email),paper_lesssender.status=='CANCEL').count()
            count_rowDocument = len(sid_list_email)
            # for i in range(len(sid_list_email)):
            #     count_rowDocument = count_rowDocument + 1
            #     count_rowDocument_StatusActive += paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_list_email[i],paper_lesssender.status=='ACTIVE').count()
            #     count_rowDocument_StatusReject += paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_list_email[i],paper_lesssender.status=='REJECT').count()
            #     count_rowDocument_StatusCancel += paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_list_email[i],paper_lesssender.status=='CANCEL').count()
            json_Data['sum_Document']  = count_rowDocument
            json_Data['DocumentInfo'] = {
                'Document_Active':count_rowDocument_StatusActive,
                'Document_Reject':count_rowDocument_StatusReject,
                'Document_Cancel':count_rowDocument_StatusCancel
            }
            query_email = paper_lessdatastep.query.filter(paper_lessdatastep.sid.in_(sid_list_email)).all()
            # print(query_email[0])
            # return ''
            # for n in range(len(sid_list_email)):
            for n in range(len(query_email)):
                result_DB = query_email[n]
                sid_email = result_DB.sid
                # result_DB = paper_lessdatastep.query.filter(paper_lessdatastep.sid==sid_list_email[n]).first()
                jsonData_eval = eval(result_DB.data_json)
                arr_step_info = []
                if 'step_num' in jsonData_eval:
                    step_status = ''
                    step_before = ''
                    res_status_file = 'Y'
                    arr_step_totle = []
                    json_data_info = jsonData_eval
                    if 'step_detail' in json_data_info:
                        for s in range(len(json_data_info['step_detail'])):
                            json_info_step2 = {}
                            for u in range(len(json_data_info['step_detail'][s]['activity_code'])):
                                oneMail = json_data_info['step_detail'][s]['one_email']
                                # if str(oneMail).replace(' ','').lower() == self.emailUser:
                                if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
                                    if step_before == '':
                                        try:
                                            if json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Complete':
                                                step_before = 'Complete'
                                            elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Approve':
                                                step_before = 'Approve'
                                            elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Reject':
                                                step_before = 'Reject'
                                        except Exception as e:
                                            step_before = ''
                                    if step_before != 'Reject':
                                        if json_data_info['step_detail'][s]['activity_status'][u] == 'Complete':
                                            step_status = 'Complete'
                                        elif json_data_info['step_detail'][s]['activity_status'][u] == 'Approve':
                                            step_status = 'Complete'
                                        elif json_data_info['step_detail'][s]['activity_status'][u] == 'Reject':
                                            step_status = 'Reject'
                                        else:
                                            try:
                                                step_status  = 'Incomplete'
                                            except Exception as ex:
                                                step_status = 'Incomplete'
                                    arr_step_info.append(step_status)
                                    arr_step_info.append(step_before)
                    # print(arr_step_info)
                    # print(sid_email)
                    if 'Reject' in arr_step_info:
                        res_status_file = 'R'
                        res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                    elif 'Complete' in arr_step_info:
                        res_status_file = 'Y'
                        res_status_file_string = 'อนุมัติแล้ว'
                    elif 'Waitting' in arr_step_info:
                        res_status_file = 'W'
                        res_status_file_string = 'รออนุมัติ'
                    elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                        res_status_file = 'W'
                        res_status_file_string = 'รออนุมัติ'
                    else:
                        res_status_file_string = 'อนุมัติแล้ว'
                    if res_status_file == 'W':
                        statusFile_count_wait = statusFile_count_wait + 1
                    elif res_status_file == 'Y':
                        statusFile_count_approve = statusFile_count_approve + 1
                    elif res_status_file == 'R':
                        statusFile_count_reject = statusFile_count_reject + 1
                    else:
                        statusFile_count_pendding = statusFile_count_pendding + 1
                    result_SenderDetails = paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_email).first()
                    if result_SenderDetails !=None:
                        file_name = result_SenderDetails.file_name
                        dateTime_String = result_SenderDetails.send_time
                        trackingCode = result_SenderDetails.tracking_id
                        sender_name = result_SenderDetails.sender_name
                        sender_email = result_SenderDetails.sender_email
                    result_DetailsDocument = paper_lessdocument.query.filter(paper_lessdocument.step_id==sid_email).first()
                    if result_DetailsDocument != None:
                        documentsign_page_options = result_DetailsDocument.sign_page_options
                        if result_DetailsDocument.options_page != None:
                            documentoptions_page = [eval(result_DetailsDocument.options_page)]
                        else:
                            documentoptions_page = []
                        if result_DetailsDocument.urgent_type != None:
                            documentUrgentType = result_DetailsDocument.urgent_type
                            if documentUrgentType == 'I':
                                documentUrgentString = 'ด่วนมาก'
                            elif documentUrgentType == 'U':
                                documentUrgentString = 'ด่วน'
                            elif documentUrgentType == 'M':
                                documentUrgentString = 'ปกติ'
                        if result_DetailsDocument.documentJson != None:
                            documentJson_result = eval(result_DetailsDocument.documentJson)
                            documentName = documentJson_result['document_name']
                            documentType = documentJson_result['document_type']
                        else:
                            documentName = None
                            documentType = None
                        document_Id = result_DetailsDocument.document_id
                    # th_dateTime_1 = convert_datetime_TH_1(int(dateTime_String.timestamp()))
                    th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                    ts = int(time.time())
                    date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                    year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                    datetime_display = int(dateTime_String.timestamp())
                    date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                    yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                    time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                    old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                    if date_time_today == date_time_db:
                        date_display_show = time_show_db
                    else:
                        if year_today == yar_db:
                            date_display_show = convert_datetime_TH_2_display(datetime_display)
                        else:
                            date_display_show = old_year
                    status = paper_lesssender.query.filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.step_data_sid==sid_email).first()
                    res_status_file = status.document_status
                    list_arr.append({
                        'sidCode':sid_email,
                        'document_name':documentName,
                        'document_type':documentType,
                        'document_urgent':documentUrgentType,
                        'document_urgent_string':documentUrgentString,
                        'dateTime_String':str(dateTime_String).split('+')[0],
                        'dateTime_String_TH_1':th_dateTime_2,
                        'dateTime_display':date_display_show,
                        'document_id':document_Id,
                        'stamp_all':documentsign_page_options,
                        'options_page_document':documentoptions_page,
                        # 'dateTime_String_TH_2':th_dateTime_2,
                        'date_String':str(dateTime_String).split(' ')[0],
                        'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                        'status_file_code':res_status_file,
                        'status_file_string':res_status_file_string,
                        'dateTime':int(dateTime_String.timestamp()),
                        'tracking_id':trackingCode,
                        'sender_name':sender_name,
                        'sender_email':sender_email,
                        'file_name':file_name
                    })
                else:
                    step_status = ''
                    res_status_file = 'Y'
                    step_before = ''
                    step_list_before = []
                    step_list_ = []
                    step_list_next = []
                    arr_step_totle = []
                    step_me = ''
                    step_sum_status = []
                    sum_status_step_list = []
                    list_check_step = []
                    step_list_data = []
                    max_step = (len(jsonData_eval))
                    step_infomation = jsonData_eval
                    sum_status_step = []
                    for i in range(len(step_infomation)):
                        list_check_step = []
                        json_step_info_2 = {}
                        step_list_data = []
                        step_ = step_infomation[i]
                        step_num = step_infomation[i]['step_num']

                        for u in range(len(step_['step_detail'])):
                            step_2 = step_['step_detail'][u]
                            for k in range(len(step_2['activity_code'])):
                                if step_2['activity_code'][k] == 'A03':
                                    json_step_info = {}
                                    json_step_info['activity_status'] = step_2['activity_status'][k]
                                    json_step_info['one_email'] = step_2['one_email']
                                    json_step_info['step_num'] = step_num
                                    list_check_step.append(json_step_info['activity_status'])
                                    step_list_data.append(json_step_info)
                        json_step_info_2['step_info'] = step_list_data
                        json_step_info_2['step_status'] = ''
                        if json_step_info_2['step_status'] == '':
                            if 'Reject' in list_check_step:
                                json_step_info_2['step_status'] = 'Reject'
                            elif 'Approve' in list_check_step:
                                json_step_info_2['step_status'] = 'Complete'
                            elif 'Complete' in list_check_step:
                                json_step_info_2['step_status'] = 'Complete'
                            elif 'Incomplete' in list_check_step:
                                json_step_info_2['step_status'] = 'Incomplete'
                            elif 'Pending' in list_check_step:
                                json_step_info_2['step_status'] = 'Incomplete'
                            else:
                                json_step_info_2['step_status'] = 'Complete'
                        sum_status_step_list.append(json_step_info_2['step_status'])
                        sum_status_step.append(json_step_info_2['step_status'])
                    # print(sum_status_step)
                    if 'Reject' in sum_status_step:
                        step_status = 'Reject'
                        step_me = ''
                    elif 'Incomplete' in sum_status_step or 'Pending' in sum_status_step:
                        step_status = 'Incomplete'
                        step_me = ''
                    else:
                        step_status = 'Complete'
                        step_me = ''
                    arr_step_info.append(step_status)


                    print(arr_step_info)
                    print(sid_email)

                    if 'Reject' in arr_step_info:
                        res_status_file = 'R'
                        res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                    elif arr_step_info.count('Wait__') == 2:
                        res_status_file = 'W'
                        res_status_file_string = 'รออนุมัติ'
                    elif 'Incomplete_1' in arr_step_info or 'Pending_1' in arr_step_info:
                        res_status_file = 'W'
                        res_status_file_string = 'รออนุมัติ'
                    elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                        res_status_file = 'N'
                        res_status_file_string = 'กำลังดำเนินการ'
                    elif 'Wait__' in arr_step_info:
                        res_status_file = 'Z'
                        res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                    elif 'Waitting' in arr_step_info:
                        res_status_file = 'W'
                        res_status_file_string = 'รออนุมัติ'
                    else:
                        res_status_file_string = 'อนุมัติแล้ว'
                    if res_status_file == 'W':
                        statusFile_count_wait = statusFile_count_wait + 1
                    elif res_status_file == 'Y':
                        statusFile_count_approve = statusFile_count_approve + 1
                    elif res_status_file == 'R':
                        statusFile_count_reject = statusFile_count_reject + 1
                    else:
                        statusFile_count_pendding = statusFile_count_pendding + 1
                    result_SenderDetails = paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_email).first()
                    if result_SenderDetails !=None:
                        file_name = result_SenderDetails.file_name
                        dateTime_String = result_SenderDetails.send_time
                        trackingCode = result_SenderDetails.tracking_id
                        sender_name = result_SenderDetails.sender_name
                        sender_email = result_SenderDetails.sender_email
                    result_DetailsDocument = paper_lessdocument.query.filter(paper_lessdocument.step_id==sid_email).first()
                    if result_DetailsDocument != None:
                        documentsign_page_options = result_DetailsDocument.sign_page_options
                        if result_DetailsDocument.options_page != None:
                            documentoptions_page = [eval(result_DetailsDocument.options_page)]
                        else:
                            documentoptions_page = []
                        if result_DetailsDocument.urgent_type != None:
                            documentUrgentType = result_DetailsDocument.urgent_type
                            if documentUrgentType == 'I':
                                documentUrgentString = 'ด่วนมาก'
                            elif documentUrgentType == 'U':
                                documentUrgentString = 'ด่วน'
                            elif documentUrgentType == 'M':
                                documentUrgentString = 'ปกติ'
                        if result_DetailsDocument.documentJson != None:
                            documentJson_result = eval(result_DetailsDocument.documentJson)
                            documentName = documentJson_result['document_name']
                            documentType = documentJson_result['document_type']
                        else:
                            documentName = None
                            documentType = None
                        document_Id = result_DetailsDocument.document_id
                    # th_dateTime_1 = convert_datetime_TH_1(int(dateTime_String.timestamp()))
                    th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                    ts = int(time.time())
                    date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                    year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                    datetime_display = int(dateTime_String.timestamp())
                    date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                    yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                    time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                    old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                    if date_time_today == date_time_db:
                        date_display_show = time_show_db
                    else:
                        if year_today == yar_db:
                            date_display_show = convert_datetime_TH_2_display(datetime_display)
                        else:
                            date_display_show = old_year
                    status = paper_lesssender.query.filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.step_data_sid==sid_email).first()
                    res_status_file = status.document_status
                    list_arr.append({
                        'sidCode':sid_email,
                        'document_name':documentName,
                        'document_type':documentType,
                        'document_urgent':documentUrgentType,
                        'document_urgent_string':documentUrgentString,
                        'dateTime_String':str(dateTime_String).split('+')[0],
                        'dateTime_String_TH_1':th_dateTime_2,
                        'dateTime_display':date_display_show,
                        'document_id':document_Id,
                        'stamp_all':documentsign_page_options,
                        'options_page_document':documentoptions_page,
                        # 'dateTime_String_TH_2':th_dateTime_2,
                        'date_String':str(dateTime_String).split(' ')[0],
                        'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                        'status_file_code':res_status_file,
                        'status_file_string':res_status_file_string,
                        'dateTime':int(dateTime_String.timestamp()),
                        'tracking_id':trackingCode,
                        'sender_name':sender_name,
                        'sender_email':sender_email,
                        'file_name':file_name
                    })

            json_Data['Document_Status_Details']  = {
                'Incomplete_Pendding':statusFile_count_pendding,
                'Complete_Approve':statusFile_count_approve,
                'Reject':statusFile_count_reject,
                'Wait':statusFile_count_wait
            }
            list_arr = sorted(list_arr, key=lambda k: k['dateTime'], reverse=True)
            json_Data['Document_Details'] = list_arr
            return {'result':'OK','messageText':json_Data,'status_Code':200,'messageER':None}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

    def select_get_recp_to_insert_v1(self):
        try:
            query_temp = paper_lessdatastep.query.filter().all()
            for u in range(len(query_temp)):
                step_Code_info = query_temp[u].sid
                step_Data_info = eval(query_temp[u].data_json)
                print()
                if 'step_num' in step_Data_info:
                    tmp_data = step_Data_info
                    tmp_step_detail = tmp_data['step_detail']
                    for y in range(len(tmp_step_detail)):
                        tmp_activity_code = tmp_step_detail[y]['activity_code']
                        for zy in range(len(tmp_activity_code)):
                            if tmp_activity_code[zy] == 'A03':
                                tmp_activity_status =  tmp_step_detail[y]['activity_status'][zy]
                                print(tmp_activity_status)
                else:
                    for i in range(len(step_Data_info)):
                        tmp_data = step_Data_info[i]
                        tmp_step_detail = tmp_data['step_detail']
                        for k in range(len(tmp_step_detail)):
                            tmp_activity_code = tmp_step_detail[k]['activity_code']
                            for zz in range(len(tmp_activity_code)):
                                if tmp_activity_code[zz] == 'A03':
                                    tmp_activity_status =  tmp_step_detail[k]['activity_status'][zz]
                                    print(tmp_activity_status)

        except Exception as e:
            pass

    def select_template_and_update_v1(self):
        try:
            # query_temp = paper_lessdatastep.query.filter(paper_lessdatastep.data_json.contains('chantra@one.th')).all()
            # list_result = []
            # for y in range(len(query_temp)):
            #     step_Code_info = query_temp[y].sid
            #     step_Data_info = eval(query_temp[y].data_json)
            #     if 'step_num' in step_Data_info[0]:
            #         for nn in range(len(step_Data_info)):
            #             if 'step_detail' in step_Data_info[nn]:
            #                 step_detail_info = step_Data_info[nn]['step_detail']
            #                 for uu in range(len(step_detail_info)):
            #                     email_thai_info = step_detail_info[uu]['one_email']
            #                     if email_thai_info == 'chantra@one.th':
            #                         step_detail_info[uu]['one_email'] = 'chantra.li@one.th'
            #                         result_select = paper_lessdatastep.query.filter(paper_lessdatastep.sid==step_Code_info).first()
            #                         result_select.data_json = str(step_Data_info)
            #                         db.session.commit()
            #     print(step_Data_info)
            query_temp = paper_lesssender.query.filter(paper_lesssender.recipient_email.contains('chantra@one.th')).all()
            for y in range(len(query_temp)):
                step_Code_info = query_temp[y].step_data_sid
                # list_result.append(step_Code_info)
                recipient_email_info = eval(query_temp[y].recipient_email)
                for z in range(len(recipient_email_info)):
                    if recipient_email_info[z] == 'chantra@one.th':
                        recipient_email_info[z] = 'chantra.li@one.th'
                result_select = paper_lesssender.query.filter(paper_lesssender.step_data_sid==step_Code_info).first()
                result_select.recipient_email = str(recipient_email_info)
                db.session.commit()
                print(recipient_email_info)

            # for u in range(len(query_temp)):
            #     step_Code_info = query_temp[u].step_Code
            #     step_Data_info = eval(query_temp[u].step_Data)
            #     if 'step_num' in step_Data_info[0]:
            #         for nn in range(len(step_Data_info)):
            #             if 'step_detail' in step_Data_info[nn]:
            #                 step_detail_info = step_Data_info[nn]['step_detail']
            #                 for uu in range(len(step_detail_info)):
            #                     email_thai_info = step_detail_info[uu]['one_email']
            #                     if email_thai_info == 'wanchai.vac@one.th':
            #                         step_detail_info[uu]['one_email'] = 'wanchai.vach@one.th'
            #                         result_select = paper_lessstep.query.filter(paper_lessstep.step_Code==step_Code_info).first()
            #                         # print(result_select)
            #                         result_select.step_Data = str(step_Data_info)
            #                         db.session.commit()
            #     print()
            #     print(step_Data_info)

        except Exception as e:
            print(str(e))
            return {'result':'ER'}

    def select_report_excel_download_v1(self,key_download):
        self.key_download = key_download
        try:
            query_path_excel = tb_transactionexcel.query.filter(tb_transactionexcel.key_download==self.key_download).first()
            if query_path_excel != None:
                return {'result':'OK','messageText':{'path_excel':query_path_excel.path_excel,'name_excel':query_path_excel.name_excel}}
            else:
                return {'result':'ER'}
        except Exception as e:
            return {'result':'ER'}

    def select_report_v1(self,email_list,document_type,start_datetime,end_datetime,tmp_tax_id):
        self.email_list = email_list
        self.document_type = document_type
        self.start_datetime = start_datetime
        self.end_datetime = end_datetime
        self.tmp_tax_id = tmp_tax_id
        tmp_list_sid_code = []
        count_document = 0
        count_rowDocument = 0
        count_rowDocument_StatusActive = 0
        count_rowDocument_StatusReject = 0
        count_rowDocument_StatusCancel = 0
        statusFile_count_approve = 0
        statusFile_count_pendding = 0
        statusFile_count_reject = 0
        statusFile_count_wait = 0
        statusFile_count_cancle = 0
        statusFile_count_delete = 0
        step_time = []
        step_time_total = []
        t1 = None
        t2 = None
        try:
            time_setting = 'start'
            if self.start_datetime != "" and self.end_datetime != "":
                date_start_tmp = datetime.datetime.fromtimestamp(self.start_datetime)
                date_end_tmp = datetime.datetime.fromtimestamp(self.end_datetime)
            elif self.start_datetime != "" and self.end_datetime == "":
                date_start_tmp = datetime.datetime.fromtimestamp(self.start_datetime)
                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
            else:
                time_setting = 'all'
        except Exception as e:
            time_setting = 'all'

        sid_list_email = []
        list_arr = []
        json_Data = {}
        try:
            txt_query_email = ''
            txt_query = ''
            if len(self.email_list) != 0:
                if self.email_list[0] != "":
                    for i in range(len(self.email_list)):
                        if i == 0:
                            txt_query_email = ''' recipient_email like '%'''+ self.email_list[i] +'''%' '''
                        else:
                            txt_query_email += ''' OR recipient_email like '%'''+ self.email_list[i] +'''%' '''
                    txt_query = "("+ txt_query_email +")"

            if time_setting == 'start':
                if txt_query != '':
                    txt_query += " AND send_time >= '"+ str(date_start_tmp) +"' AND send_time <= '"+ str(date_end_tmp) +"'"
                else:
                    txt_query += " send_time >= '"+ str(date_start_tmp) +"' AND send_time <= '"+ str(date_end_tmp) +"'"

            if len(str(self.document_type).replace(' ','')) != 0:
                doc_type = "'"+ self.document_type +"'"
                txt_query += ''' AND "documentType" = '''+ doc_type
            
            if str(self.tmp_tax_id).replace(' ','') != '':
                txt_query += " AND biz_info like '%"+ self.tmp_tax_id +"%' "
            sql = '''
                SELECT
                    doc_id,
                    data_json,
                    biz_info,
                    status,
                    update_time,
                    step_data_sid,
                    file_name,
                    send_time,
                    tracking_id,
                    sender_name,
                    sender_email,
                    sign_page_options,
                    options_page,
                    urgent_type,
                    "documentJson" 
                FROM
                    "view_document" 
                WHERE
                    status = 'ACTIVE' 
                    AND document_status = 'Y'
                    AND ("documentType" = 'CS' OR "documentType" = 'SCS' )
                    AND biz_info LIKE'%0107544000094%' 
                    AND send_time > '2020-07-30 00:00:00'
            '''
            with engine.connect() as connection:
                # result_select = connection.execute(text(sql))
                result_select = connection.execute(text('''SELECT doc_id,data_json,biz_info,status,update_time,step_data_sid,file_name,send_time,tracking_id,sender_name,sender_email,sign_page_options,options_page,urgent_type,"documentJson" FROM "view_document" WHERE '''+ txt_query))
                resultQuery = [dict(row) for row in result_select]
                connection.close()  
            if len(resultQuery) != 0:
                for n in range(len(resultQuery)):
                    result_biz_info = {}
                    result_DB = resultQuery[n]
                    status_doc = result_DB["status"]
                    update_time = result_DB['update_time']
                    sid_email = result_DB["step_data_sid"]
                    file_name = result_DB["file_name"]
                    dateTime_String = result_DB['send_time']
                    trackingCode = result_DB['tracking_id']
                    sender_name = result_DB['sender_name']
                    sender_email = result_DB['sender_email']
                    if sender_name == 'null':
                        sender_name = sender_email
                    if result_DB['sign_page_options'] != None:
                        documentsign_page_options = result_DB['sign_page_options']                        
                    if result_DB['options_page'] != None:
                        document_options_page = eval(result_DB['options_page'])
                    else:
                        document_options_page = {'subject_text':'','body_text':''}
                    if result_DB['urgent_type'] != None:
                        documentUrgentType = result_DB['urgent_type']
                        if documentUrgentType == 'I':
                            documentUrgentString = 'ด่วนมาก'
                        elif documentUrgentType == 'U':
                            documentUrgentString = 'ด่วน'
                        elif documentUrgentType == 'M':
                            documentUrgentString = 'ปกติ'
                    if result_DB['documentJson']!= None:
                        documentJson_result = eval(result_DB['documentJson'])
                        documentName = documentJson_result['document_name']
                        documentType = documentJson_result['document_type']
                    else:
                        documentName = None
                        documentType = None
                    document_Id = result_DB['doc_id']
                    jsonData_eval = eval(result_DB["data_json"])
                    try:
                        tmp_biz_info = eval(result_DB["biz_info"])
                        if str(self.tmp_tax_id).replace(' ','') != '':
                            if tmp_biz_info['id_card_num'] == self.tmp_tax_id:
                                result_biz_info = {
                                    'id':tmp_biz_info['id'],
                                    'id_card_num':tmp_biz_info['id_card_num'],
                                    'first_name_eng':tmp_biz_info['first_name_eng'],
                                    'first_name_th':tmp_biz_info['first_name_th']
                                }
                            else:
                                result_biz_info = {
                                    'id':tmp_biz_info['id'],
                                    'id_card_num':tmp_biz_info['id_card_num'],
                                    'first_name_eng':tmp_biz_info['first_name_eng'],
                                    'first_name_th':tmp_biz_info['first_name_th']
                                }
                        else:
                            result_biz_info = {
                                'id':tmp_biz_info['id'],
                                'id_card_num':tmp_biz_info['id_card_num'],
                                'first_name_eng':tmp_biz_info['first_name_eng'],
                                'first_name_th':tmp_biz_info['first_name_th']
                            }

                    except Exception as e:
                        if result_DB["biz_info"] != 'None':
                            result_biz_info = {
                                'id':None,
                                'id_card_num':None,
                                'first_name_eng':None,
                                'first_name_th':None
                            }
                        else:
                            result_biz_info = {
                                'id':None,
                                'id_card_num':None,
                                'first_name_eng':None,
                                'first_name_th':None
                            }
                    arr_step_info = []
                    timestamp_info = []
                    step_time_1 = []
                    step_timeline = []
                    result = None
                    timing_1 = None
                    list_string_timing = []
                    string_list_timeline = ''
                    concat_steptimeline = ''
                    if 'step_num' in jsonData_eval:
                        step_status = ''
                        step_before = ''
                        my_step = ''
                        res_status_file = 'Y'
                        arr_step_totle = []
                        json_data_info = jsonData_eval
                        step_ = json_data_info
                        details_email_reject = []
                        details_email_incomplete = []
                        if 'step_detail' in json_data_info:
                            for s in range(len(json_data_info['step_detail'])):
                                json_info_step2 = {}
                                step_2 = json_data_info['step_detail'][s]
                                for u in range(len(json_data_info['step_detail'][s]['activity_code'])):
                                    oneMail = json_data_info['step_detail'][s]['one_email']
                                    # if str(oneMail).replace(' ','').lower() == self.emailUser:
                                    if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
                                        print(timestamp_info)
                                        print(sid_email)
                                        if my_step == '':
                                            if json_data_info['step_detail'][s]['activity_status'][u] == 'Complete':
                                                step_status = 'Complete'
                                                timestemp = int(time.mktime(datetime.datetime.strptime(json_data_info['step_detail'][s]['activity_time'][u], "%Y-%m-%d %H:%M:%S").timetuple()))
                                                timestamp_info.append(timestemp)
                                                t1 = step_2['activity_time'][u]
                                                t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                                step_time_1.append(t2)
                                            elif json_data_info['step_detail'][s]['activity_status'][u] == 'Approve':
                                                step_status = 'Complete'
                                                timestemp = int(time.mktime(datetime.datetime.strptime(json_data_info['step_detail'][s]['activity_time'][u], "%Y-%m-%d %H:%M:%S").timetuple()))
                                                timestamp_info.append(timestemp)
                                                t1 = step_2['activity_time'][u]
                                                t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                                step_time_1.append(t2)
                                            elif json_data_info['step_detail'][s]['activity_status'][u] == 'Reject':
                                                step_status = 'Reject'
                                                timestemp = int(time.mktime(datetime.datetime.strptime(json_data_info['step_detail'][s]['activity_time'][u], "%Y-%m-%d %H:%M:%S").timetuple()))
                                                timestamp_info.append(timestemp)
                                                t1 = step_2['activity_time'][u]
                                                t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                                step_time_1.append(t2)
                                            else:
                                                try:
                                                    step_status  = 'Incomplete'
                                                    # t1 = step_2['activity_time'][u]
                                                    # t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                                    # step_time_1.append(t2)
                                                    details_email_incomplete.append({'email':json_data_info['step_detail'][s]['one_email'],'step_num':json_data_info['step_num']})
                                                except Exception as ex:
                                                    step_status = 'Incomplete'
                                        arr_step_info.append(step_status)
                                        arr_step_info.append(step_before)
                        # print(arr_step_info)
                        if status_doc == 'ACTIVE':
                            if 'Reject' in arr_step_info:
                                res_status_file = 'R'
                                res_status_file_string = 'เอกสารปฏิเสธอนุมัติ'
                                statusFile_count_reject = statusFile_count_reject + 1                            
                            elif 'Waitting' in arr_step_info:
                                res_status_file = 'W'
                                res_status_file_string = 'รออนุมัติ'
                                statusFile_count_wait = statusFile_count_wait + 1
                            elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                                res_status_file = 'N'
                                res_status_file_string = 'กำลังดำเนินการ'
                                statusFile_count_pendding = statusFile_count_pendding + 1
                            elif 'Complete' in arr_step_info:
                                res_status_file = 'Y'
                                res_status_file_string = 'อนุมัติแล้ว'
                                statusFile_count_approve = statusFile_count_approve + 1
                            else:
                                res_status_file_string = 'อนุมัติแล้ว'
                                statusFile_count_approve = statusFile_count_approve + 1
                        else:
                            if status_doc.upper() == 'REJECT':
                                res_status_file = 'C'
                                res_status_file_string = 'เอกสารถูกยกเลิก'
                                statusFile_count_cancle = statusFile_count_cancle + 1
                                update_time_str = update_time.strftime('%Y-%m-%d %H:%M:%S')
                                t2 = int(time.mktime(datetime.datetime.strptime(update_time_str, "%Y-%m-%d %H:%M:%S").timetuple()))
                            elif status_doc.upper() == 'DELETE':
                                res_status_file = 'D'
                                res_status_file_string = 'เอกสารถูกลบ'
                                statusFile_count_delete = statusFile_count_delete + 1
                                update_time_str = update_time.strftime('%Y-%m-%d %H:%M:%S')
                                t2 = int(time.mktime(datetime.datetime.strptime(update_time_str, "%Y-%m-%d %H:%M:%S").timetuple()))

                        start_send_time = dateTime_String.timestamp()
                        now = datetime.datetime.now()
                        if  res_status_file == 'W' or res_status_file == 'N' :
                            timing = (now.timestamp()) - start_send_time
                            # print ('w, n',timing)
                        elif res_status_file == 'R' or res_status_file == 'Y':
                            timing = t2 - start_send_time
                            # print ('R,Y',timing)
                        elif res_status_file == 'C' or res_status_file == 'D':
                            timing = t2 - start_send_time
                        else:
                            print('else')
                        timing_1 = convert_hr_min_sec_v1(int(timing))
                        string_timing = ''
                        for yy in range(len(timing_1)):
                            if timing_1[yy] > 0:
                                if yy == 0:
                                    type_date = " วัน "
                                elif yy == 1:
                                    type_date = " ชั่วโมง "
                                elif yy == 2:
                                    type_date = " นาที "
                                elif yy == 3:
                                    type_date = " วินาที "
                                string_timing += str(timing_1[yy]) + type_date
                        string_list_timeline = ''
                        concat_steptimeline = ''
                        if(len(step_time_1) !=0):
                            for i in range(len(step_time_1)):
                                if(i==0):
                                    # print ('เริ่มต้น : ',start_send_time)
                                    result = step_time_1[i] - start_send_time
                                    # print ('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ',result)
                                    list_timeline = convert_hr_min_sec_v1(int(result))
                                    # print ('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ : ',list_timeline)
                                    for yy in range(len(list_timeline)):
                                        if list_timeline[yy] > 0:
                                            if yy == 0:
                                                type_date = " วัน "
                                            elif yy == 1:
                                                type_date = " ชั่วโมง "
                                            elif yy == 2:
                                                type_date = " นาที "
                                            elif yy == 3:
                                                type_date = " วินาที "
                                            string_list_timeline += str(list_timeline[yy]) + type_date
                                    # print('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ (string)',string_list_timeline)
                                    step_timeline.append(string_list_timeline)
                                    string_list_timeline = ''
                                else:
                                    result = step_time_1[i] - step_time_1[i-1]
                                    # print ('ลำดับปัจจุบัน- ลำดับก่อนหน้า',result)
                                    list_timeline = convert_hr_min_sec_v1(int(result))
                                    for yy in range(len(list_timeline)):
                                        if list_timeline[yy] > 0:
                                            if yy == 0:
                                                type_date = " วัน "
                                            elif yy == 1:
                                                type_date = " ชั่วโมง "
                                            elif yy == 2:
                                                type_date = " นาที "
                                            elif yy == 3:
                                                type_date = " วินาที "
                                            string_list_timeline += str(list_timeline[yy]) + type_date
                                    # print('เริ่มต้น -  ลำดับก่อนหน้า (string)',string_list_timeline)
                                    step_timeline.append(string_list_timeline)
                                    string_list_timeline = ''
                            # print ("สรุปเวลาการเซ็นแต่ละลำดับ :",step_timeline)
                            for j in range(len(step_timeline)):
                                if(j == (len(step_timeline))-1):
                                    concat_steptimeline += '-ลำดับที่ ' +str(j+1)+ ' : ' + str(step_timeline[j])
                                else:
                                    concat_steptimeline += '-ลำดับที่ ' +str(j+1)+ ' : ' + str(step_timeline[j]) + '\n'
                            # print ('concat_steptimeline',concat_steptimeline)
                        elif(len(step_time_1) == 0):
                            if res_status_file == 'C':
                                concat_steptimeline = ''
                            elif res_status_file == 'D':
                                concat_steptimeline = ''
                            else:
                                concat_steptimeline = 'อยู่ระหว่างดำเนินการ'                        
                        string_details_avg_time = ''
                        if len(timestamp_info) != 0:
                            end_time_document = timestamp_info[-1]
                            result_start_and_end = end_time_document - start_send_time
                            list_day_hr_min_sec = convert_hr_min_sec_v1(int(result_start_and_end))
                            for yy in range(len(list_day_hr_min_sec)):

                                if list_day_hr_min_sec[yy] > 0:
                                    if yy == 0:
                                        type_date = " วัน "
                                    elif yy == 1:
                                        type_date = " ชั่วโมง "
                                    elif yy == 2:
                                        type_date = " นาที "
                                    elif yy == 3:
                                        type_date = " วินาที "
                                    string_details_avg_time += str(list_day_hr_min_sec[yy]) + type_date
                        print(string_details_avg_time)

                        if res_status_file == 'N':
                            string_details_avg_time = ""

                        th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                        ts = int(time.time())
                        date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                        year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                        datetime_display = int(dateTime_String.timestamp())
                        date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                        yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                        time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                        old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                        if date_time_today == date_time_db:
                            date_display_show = time_show_db
                        else:
                            if year_today == yar_db:
                                date_display_show = convert_datetime_TH_2_display(datetime_display)
                            else:
                                date_display_show = old_year
                        lis_details = []
                        string_remark_description = ''
                        title_remark = ''
                        if res_status_file == 'R':
                            if len(details_email_reject) != 0:
                                for o in range(len(details_email_reject)):
                                    query_data = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(details_email_reject[o]['email'])).all()
                                    try:
                                        data_json_name = eval(query_data[0].citizen_data)['first_name_th'] + ' ' + eval(query_data[0].citizen_data)['last_name_th']
                                    except Exception as e:
                                        data_json_name = details_email_incomplete[oi]['email']
                                    details_msg = {}
                                    details_msg['reject_by'] = details_email_reject[o]['email']
                                    details_msg['reject_in_step_num'] = details_email_reject[o]['step_num']
                                    details_msg['reject_in_datetime'] = details_email_reject[o]['datetime']
                                    title_remark = 'ปฏิเสธอนุมัติโดย ลำดับที่ ' + str(details_email_reject[o]['step_num'])
                                    datetime_display = convert_datetime_TH_2(int(details_email_reject[o]['datetime_string']))
                                    string_remark_description +=  '\n-' + data_json_name + '\nวันที่ ' + datetime_display
                                    lis_details.append(details_msg)
                        elif res_status_file == 'N':
                            if len(details_email_incomplete) != 0:
                                for oi in range(len(details_email_incomplete)):
                                    tmp_step_num_list_0 = details_email_incomplete[0]['step_num']
                                    tmp_step_num_list = details_email_incomplete[oi]['step_num']
                                    if tmp_step_num_list_0 == tmp_step_num_list:
                                        query_data = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(details_email_incomplete[oi]['email'])).all()
                                        try:
                                            data_json_name = eval(query_data[0].citizen_data)['first_name_th'] + ' ' + eval(query_data[0].citizen_data)['last_name_th']
                                        except Exception as e:
                                            data_json_name = details_email_incomplete[oi]['email']
                                        details_msg = {}
                                        details_msg['pending_by'] = details_email_incomplete[oi]['email']
                                        details_msg['pending_in_step_num'] = details_email_incomplete[oi]['step_num']
                                        title_remark = 'รอการอนุมัติ ลำดับที่ ' + str(details_email_incomplete[oi]['step_num'])
                                        string_remark_description += '\n-' + data_json_name + ''
                                        lis_details.append(details_msg)
                    
                    else:
                        step_status = ''
                        res_status_file = 'Y'
                        step_before = ''
                        step_list_before = []
                        step_list_ = []
                        step_list_next = []
                        arr_step_totle = []
                        step_me = ''
                        step_sum_status = []
                        sum_status_step_list = []
                        list_check_step = []
                        step_list_data = []
                        max_step = (len(jsonData_eval))
                        step_infomation = jsonData_eval
                        sum_status_step = []
                        details_email_reject = []
                        details_email_incomplete = []
                        for i in range(len(step_infomation)):
                            list_check_step = []
                            json_step_info_2 = {}
                            step_list_data = []
                            step_ = step_infomation[i]
                            step_num = step_infomation[i]['step_num']
                            json_step_info_2['step_status'] = ''
                            for u in range(len(step_['step_detail'])):
                                oneMail = step_['step_detail'][u]['one_email']
                                # if str(oneMail).replace(' ','').lower() == self.emailUser:
                                #     step_me = step_infomation[i]['step_num']
                                #     step_me = int(step_me) - 1
                                step_2 = step_['step_detail'][u]
                                for k in range(len(step_2['activity_code'])):
                                    if step_2['activity_code'][k] == 'A03':
                                        # print()
                                        if step_2['activity_status'][k] == 'Complete':
                                            timestemp = int(time.mktime(datetime.datetime.strptime(step_2['activity_time'][k], "%Y-%m-%d %H:%M:%S").timetuple()))
                                            timestamp_info.append(timestemp)
                                            t1 = step_2['activity_time'][k]
                                            t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                            step_time_1.append(t2)
                                        elif step_2['activity_status'][k] == 'Approve':
                                            timestemp = int(time.mktime(datetime.datetime.strptime(step_2['activity_time'][k], "%Y-%m-%d %H:%M:%S").timetuple()))
                                            timestamp_info.append(timestemp)
                                            t1 = step_2['activity_time'][k]
                                            t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                            step_time_1.append(t2)
                                        elif step_2['activity_status'][k] == 'Reject':
                                            timestemp = int(time.mktime(datetime.datetime.strptime(step_2['activity_time'][k], "%Y-%m-%d %H:%M:%S").timetuple()))
                                            timestamp_info.append(timestemp)
                                            t1 = step_2['activity_time'][k]
                                            t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                            step_time_1.append(t2)
                                        json_step_info = {}
                                        json_step_info['activity_status'] = step_2['activity_status'][k]
                                        json_step_info['one_email'] = step_2['one_email']
                                        json_step_info['step_num'] = step_num
                                        list_check_step.append(json_step_info['activity_status'])
                                        step_list_data.append(json_step_info)
                                # print ('Round time', step_time_1)
                                json_step_info_2['step_info'] = step_list_data
                                if json_step_info_2['step_status'] == '':
                                    if 'Reject' in list_check_step:
                                        for kz in range(len(step_2['activity_code'])):
                                            if step_2['activity_code'][kz] == 'A03':
                                                details_email_reject.append({'email':step_2['one_email'],'step_num':step_num,'datetime':step_2['activity_time'][kz],'datetime_string':time.mktime(datetime.datetime.strptime(step_2['activity_time'][kz], "%Y-%m-%d %H:%M:%S").timetuple())})
                                        json_step_info_2['step_status'] = 'Reject'
                                    elif 'Complete' in list_check_step:
                                        json_step_info_2['step_status'] = 'Complete'
                                    elif 'Approve' in list_check_step:
                                        json_step_info_2['step_status'] = 'Complete'
                                    elif 'Incomplete' in list_check_step:
                                        # details_email_incomplete.append({'email':step_2['one_email'],'step_num':step_num})
                                        json_step_info_2['step_status'] = 'Incomplete'
                                    elif 'Pending' in list_check_step:
                                        # details_email_incomplete.append({'email':step_2['one_email'],'step_num':step_num})
                                        json_step_info_2['step_status'] = 'Incomplete'
                                    else:
                                        json_step_info_2['step_status'] = 'Complete'
                                if json_step_info_2['step_status'] == 'Incomplete':
                                    if 'Reject' in list_check_step:
                                        json_step_info_2['step_status'] = 'Reject'
                                    elif 'Complete' in list_check_step:
                                        json_step_info_2['step_status'] = 'Complete'
                                    elif 'Approve' in list_check_step:
                                        json_step_info_2['step_status'] = 'Complete'
                                    elif 'Incomplete' in list_check_step:
                                        details_email_incomplete.append({'email':step_2['one_email'],'step_num':step_num})
                                        json_step_info_2['step_status'] = 'Incomplete'
                                    elif 'Pending' in list_check_step:
                                        details_email_incomplete.append({'email':step_2['one_email'],'step_num':step_num})
                                        json_step_info_2['step_status'] = 'Incomplete'
                                    else:
                                        json_step_info_2['step_status'] = 'Complete'

                                sum_status_step_list.append(json_step_info_2['step_status'])
                            sum_status_step.append(json_step_info_2['step_status'])
                            arr_step_info.append(json_step_info_2['step_status'])
                        index_mystep = step_me
                    
                        if status_doc == 'ACTIVE':
                            if 'Reject' in arr_step_info:
                                res_status_file = 'R'
                                res_status_file_string = 'เอกสารปฏิเสธอนุมัติ'
                                statusFile_count_reject = statusFile_count_reject + 1                            
                            elif 'Waitting' in arr_step_info:
                                res_status_file = 'W'
                                res_status_file_string = 'รออนุมัติ'
                                statusFile_count_wait = statusFile_count_wait + 1
                            elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                                res_status_file = 'N'
                                res_status_file_string = 'กำลังดำเนินการ'
                                statusFile_count_pendding = statusFile_count_pendding + 1
                            elif 'Complete' in arr_step_info:
                                res_status_file = 'Y'
                                res_status_file_string = 'อนุมัติแล้ว'
                                statusFile_count_approve = statusFile_count_approve + 1
                            else:
                                res_status_file_string = 'อนุมัติแล้ว'
                                statusFile_count_approve = statusFile_count_approve + 1
                        else:
                            if status_doc.upper() == 'REJECT':
                                res_status_file = 'C'
                                res_status_file_string = 'เอกสารถูกยกเลิก'
                                statusFile_count_cancle = statusFile_count_cancle + 1
                                update_time_str = update_time.strftime('%Y-%m-%d %H:%M:%S')
                                t2 = int(time.mktime(datetime.datetime.strptime(update_time_str, "%Y-%m-%d %H:%M:%S").timetuple()))
                            elif status_doc.upper() == 'DELETE':
                                res_status_file = 'D'
                                res_status_file_string = 'เอกสารถูกลบ'
                                statusFile_count_delete = statusFile_count_delete + 1
                                update_time_str = update_time.strftime('%Y-%m-%d %H:%M:%S')
                                t2 = int(time.mktime(datetime.datetime.strptime(update_time_str, "%Y-%m-%d %H:%M:%S").timetuple()))

                        start_send_time = dateTime_String.timestamp()
                        now = datetime.datetime.now()
                        if  res_status_file == 'W' or res_status_file == 'N' :
                            timing = (now.timestamp()) - start_send_time
                            # print ('w, n',timing)
                        elif res_status_file == 'R' or res_status_file == 'Y':
                            timing = t2 - start_send_time
                            # print ('R,Y',timing)
                        elif res_status_file == 'C' or res_status_file == 'D':
                            timing = t2 - start_send_time
                        else:
                            print('else')
                        timing_1 = convert_hr_min_sec_v1(int(timing))
                        string_timing = ''
                        
                        for yy in range(len(timing_1)):
                            if timing_1[yy] > 0:
                                if yy == 0:
                                    type_date = " วัน "
                                elif yy == 1:
                                    type_date = " ชั่วโมง "
                                elif yy == 2:
                                    type_date = " นาที "
                                elif yy == 3:
                                    type_date = " วินาที "
                                string_timing += str(timing_1[yy]) + type_date
                        
                        string_list_timeline = ''
                        concat_steptimeline = ''
                        if(len(step_time_1) != 0):
                            for i in range(len(step_time_1)):
                                if(i==0):
                                    # print ('เริ่มต้น : ',start_send_time)
                                    result = step_time_1[i] - start_send_time
                                    # print ('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ',result)
                                    list_timeline = convert_hr_min_sec_v1(int(result))
                                    # print ('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ : ',list_timeline)
                                    for yy in range(len(list_timeline)):
                                        if list_timeline[yy] > 0:
                                            if yy == 0:
                                                type_date = " วัน "
                                            elif yy == 1:
                                                type_date = " ชั่วโมง "
                                            elif yy == 2:
                                                type_date = " นาที "
                                            elif yy == 3:
                                                type_date = " วินาที "
                                            string_list_timeline += str(list_timeline[yy]) + type_date
                                    # print('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ (string)',string_list_timeline)
                                    step_timeline.append(string_list_timeline)
                                    string_list_timeline = ''
                                else:
                                    result = step_time_1[i] - step_time_1[i-1]
                                    # print ('ลำดับปัจจุบัน- ลำดับก่อนหน้า',result)
                                    list_timeline = convert_hr_min_sec_v1(int(result))
                                    for yy in range(len(list_timeline)):
                                        if list_timeline[yy] > 0:
                                            if yy == 0:
                                                type_date = " วัน "
                                            elif yy == 1:
                                                type_date = " ชั่วโมง "
                                            elif yy == 2:
                                                type_date = " นาที "
                                            elif yy == 3:
                                                type_date = " วินาที "
                                            string_list_timeline += str(list_timeline[yy]) + type_date
                                    # print('เริ่มต้น - ลำดับก่อนหน้า (string)',string_list_timeline)
                                    step_timeline.append(string_list_timeline)
                                    string_list_timeline = ''
                            # print ("สรุปเวลาการเซ็นแต่ละลำดับ :",step_timeline)
                            for j in range(len(step_timeline)):
                                if(j == (len(step_timeline))-1):
                                    concat_steptimeline += '-ลำดับที่ ' +str(j+1)+ ' : ' + str(step_timeline[j])
                                else:
                                    concat_steptimeline += '-ลำดับที่ ' +str(j+1)+ ' : ' + str(step_timeline[j]) + '\n'
                            # print ('concat_steptimeline',concat_steptimeline)
                        elif(len(step_time_1) == 0):
                            if res_status_file == 'C':
                                concat_steptimeline = ''
                            elif res_status_file == 'D':
                                concat_steptimeline = ''
                            else:
                                concat_steptimeline = 'อยู่ระหว่างดำเนินการ'

                        # string_details_avg_time = ''
                        string_details_avg_time = ''
                        if len(timestamp_info) != 0:
                            # end_time_document = timestamp_info[-1]
                            # result_start_and_end = end_time_document - start_send_time
                            end_time_document = timestamp_info[-1]
                            result_start_and_end = end_time_document - start_send_time
                            list_day_hr_min_sec = convert_hr_min_sec_v1(int(result_start_and_end))
                            # print(end_time_document,start_send_time)
                            # print(timestamp_info)
                            for yy in range(len(list_day_hr_min_sec)):
                                if list_day_hr_min_sec[yy] > 0:
                                    if yy == 0:
                                        type_date = " วัน "
                                    elif yy == 1:
                                        type_date = " ชั่วโมง "
                                    elif yy == 2:
                                        type_date = " นาที "
                                    elif yy == 3:
                                        type_date = " วินาที "
                                    string_details_avg_time += str(list_day_hr_min_sec[yy]) + type_date
                        print(string_details_avg_time)
                        if res_status_file == 'N':
                            string_details_avg_time = ""

                        th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                        ts = int(time.time())
                        date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                        year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                        datetime_display = int(dateTime_String.timestamp())
                        date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                        yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                        time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                        old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                        if date_time_today == date_time_db:
                            date_display_show = time_show_db
                        else:
                            if year_today == yar_db:
                                date_display_show = convert_datetime_TH_2_display(datetime_display)
                            else:
                                date_display_show = old_year
                        lis_details = []
                        string_remark_description = ''
                        title_remark = ''
                        if res_status_file == 'R':
                            if len(details_email_reject) != 0:
                                for o in range(len(details_email_reject)):
                                    query_data = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(details_email_reject[o]['email'])).all()
                                    if len(query_data) != 0:
                                        if eval(query_data[0].citizen_data)['first_name_th'] != None:
                                            data_json_name = str(eval(query_data[0].citizen_data)['first_name_th'] + ' ' + eval(query_data[0].citizen_data)['last_name_th'])
                                        else:
                                            data_json_name = details_email_reject[o]['email']
                                    else:
                                        data_json_name = details_email_reject[o]['email']
                                    # print(data_json_name)
                                    details_msg = {}
                                    details_msg['reject_by'] = details_email_reject[o]['email']
                                    details_msg['reject_in_step_num'] = details_email_reject[o]['step_num']
                                    details_msg['reject_in_datetime'] = details_email_reject[o]['datetime']
                                    title_remark = 'ปฏิเสธอนุมัติโดย ลำดับที่ ' + str(details_email_reject[o]['step_num'])
                                    datetime_display = convert_datetime_TH_2(int(details_email_reject[o]['datetime_string']))
                                    string_remark_description +=  '\n-' + data_json_name + '\nวันที่ ' + datetime_display
                                    lis_details.append(details_msg)
                        elif res_status_file == 'N':
                            if len(details_email_incomplete) != 0:
                                for oi in range(len(details_email_incomplete)):
                                    tmp_step_num_list_0 = details_email_incomplete[0]['step_num']
                                    tmp_step_num_list = details_email_incomplete[oi]['step_num']
                                    if tmp_step_num_list_0 == tmp_step_num_list:
                                        query_data = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(details_email_incomplete[oi]['email'])).all()
                                        try:
                                            data_json_name = eval(query_data[0].citizen_data)['first_name_th'] + ' ' + eval(query_data[0].citizen_data)['last_name_th']
                                        except Exception as e:
                                            data_json_name = details_email_incomplete[oi]['email']

                                        details_msg = {}
                                        details_msg['pending_by'] = details_email_incomplete[oi]['email']
                                        details_msg['pending_in_step_num'] = details_email_incomplete[oi]['step_num']
                                        title_remark = 'รอการอนุมัติ ลำดับที่ ' + str(details_email_incomplete[oi]['step_num'])
                                        string_remark_description += '\n-' + data_json_name + ''
                                        lis_details.append(details_msg)
                    
                    update_time_timestamp = int((update_time).timestamp())
                    updatetime_date_th = convert_datetime_TH_2(update_time_timestamp)
                    updatetim_time = str(update_time).split(' ')[1].split('+')[0]
                    if res_status_file == 'C':
                        title_remark = 'เอกสารถูกยกเลิกวันที่\n'
                        string_remark_description = updatetime_date_th +' '+ updatetim_time
                    elif res_status_file == 'D':
                        title_remark = 'เอกสารถูกลบวันที่\n'
                        string_remark_description = updatetime_date_th +' '+ updatetim_time
                    elif res_status_file == 'R' and title_remark == '':
                        title_remark = 'ปฏิเสธอนุมัติโดย ลำดับที่ 1\n-'+ sender_name +'\n'
                        string_remark_description = updatetime_date_th +' '+ updatetim_time                    
                    list_arr.append({
                        'sidCode':sid_email,
                        'biz_detail':result_biz_info,
                        'document_name':documentName,
                        'document_type':documentType,
                        'document_urgent':documentUrgentType,
                        'document_urgent_string':documentUrgentString,
                        'dateTime_String':str(dateTime_String).split('+')[0],
                        'dateTime_String_TH_1':th_dateTime_2,
                        'dateTime_display':date_display_show,
                        'document_id':document_Id,
                        'stamp_all':documentsign_page_options,
                        'string_details_avg_time':string_details_avg_time,
                        # 'dateTime_String_TH_2':th_dateTime_2,
                        'date_String':str(dateTime_String).split(' ')[0],
                        'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                        'status_file_code':res_status_file,
                        'status_file_details':lis_details,
                        'status_file_string':res_status_file_string,
                        'dateTime':int(dateTime_String.timestamp()),
                        'tracking_id':trackingCode,
                        'sender_name':sender_name,
                        'sender_email':sender_email,
                        'file_name':file_name,
                        'remark_description': title_remark + string_remark_description,
                        'timeline': concat_steptimeline,
                        'timing': string_timing,
                        'data_options':document_options_page
                    })
                
            list_arr = sorted(list_arr, key=lambda k: k['dateTime'], reverse=True)
            json_Data['Document_Details'] = list_arr
            if len(list_arr)==0 :
                return {'result':'ER','messageText':None,'status_Code':200,'messageER':'data not found'}
            return {'result':'OK','messageText':json_Data,'status_Code':200,'messageER':None}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':None,'status_Code':200,'messageER':str(e)}


    def select_get_document_lower_v1(self,email_list,document_type,start_datetime,end_datetime):
        self.email_list = email_list
        self.document_type = document_type
        self.start_datetime = start_datetime
        self.end_datetime = end_datetime
        tmp_list_sid_code = []
        count_document = 0
        count_rowDocument = 0
        count_rowDocument_StatusActive = 0
        count_rowDocument_StatusReject = 0
        count_rowDocument_StatusCancel = 0
        statusFile_count_approve = 0
        statusFile_count_pendding = 0
        statusFile_count_reject = 0
        statusFile_count_wait = 0
        try:
            time_setting = 'start'
            date_start_tmp = datetime.datetime.fromtimestamp(self.start_datetime)
            date_end_tmp = datetime.datetime.fromtimestamp(self.end_datetime)
        except Exception as e:
            time_setting = 'all'

        sid_list_email = []
        list_arr = []
        json_Data = {}
        try:

            for i in range(len(self.email_list)):
                if len(str(self.document_type).replace(' ','')) != 0:
                    if time_setting == 'start':
                        query_list = paper_lesssender.query.join(paper_lessdocument, paper_lesssender.step_data_sid==paper_lessdocument.step_id).filter(paper_lessdocument.documentType==self.document_type).filter(paper_lesssender.recipient_email.contains(self.email_list[i]),paper_lesssender.send_time>=date_start_tmp,paper_lesssender.send_time<=date_end_tmp).all()
                    else:
                        query_list = paper_lesssender.query.join(paper_lessdocument, paper_lesssender.step_data_sid==paper_lessdocument.step_id).filter(paper_lessdocument.documentType==self.document_type).filter(paper_lesssender.recipient_email.contains(self.email_list[i])).all()
                else:
                    if time_setting == 'start':
                        query_list = paper_lesssender.query.join(paper_lessdocument, paper_lesssender.step_data_sid==paper_lessdocument.step_id).filter().filter(paper_lesssender.recipient_email.contains(self.email_list[i]),paper_lesssender.send_time>=date_start_tmp,paper_lesssender.send_time<=date_end_tmp).all()
                    else:
                        query_list = paper_lesssender.query.join(paper_lessdocument, paper_lesssender.step_data_sid==paper_lessdocument.step_id).filter().filter(paper_lesssender.recipient_email.contains(self.email_list[i])).all()
                # query_list = paper_lesssender.query.filter(paper_lesssender.send_time>=date_start_tmp,paper_lesssender.send_time<=date_end_tmp).all()
                if len(query_list) != 0:
                    for u in range(len(query_list)):
                        sid_code = query_list[u].step_data_sid
                        if sid_code not in tmp_list_sid_code:
                            tmp_list_sid_code.append(sid_code)
                            count_document = count_document + 1
                            sid_list_email.append(sid_code)
            try:
                list_sid_for_api = []
                count_rowDocument_StatusActive = paper_lesssender.query.filter(paper_lesssender.step_data_sid.in_(sid_list_email),paper_lesssender.status=='ACTIVE').count()
                count_rowDocument_StatusReject = paper_lesssender.query.filter(paper_lesssender.step_data_sid.in_(sid_list_email),paper_lesssender.status=='REJECT').count()
                count_rowDocument_StatusCancel = paper_lesssender.query.filter(paper_lesssender.step_data_sid.in_(sid_list_email),paper_lesssender.status=='CANCEL').count()
                count_rowDocument = len(sid_list_email)
                json_Data['sum_Document']  = count_rowDocument
                json_Data['DocumentInfo'] = {
                    'Document_Active':count_rowDocument_StatusActive,
                    'Document_Reject':count_rowDocument_StatusReject,
                    'Document_Cancel':count_rowDocument_StatusCancel
                }
                query_email = paper_lessdatastep.query.filter(paper_lessdatastep.sid.in_(sid_list_email)).all()
                # print(query_email[0])
                # return ''
                # for n in range(len(sid_list_email)):
                for n in range(len(query_email)):
                    result_DB = query_email[n]
                    sid_email = result_DB.sid
                    # result_DB = paper_lessdatastep.query.filter(paper_lessdatastep.sid==sid_list_email[n]).first()
                    jsonData_eval = eval(result_DB.data_json)
                    arr_step_info = []
                    if 'step_num' in jsonData_eval:
                        step_status = ''
                        step_before = ''
                        res_status_file = 'Y'
                        arr_step_totle = []
                        json_data_info = jsonData_eval
                        details_email_reject = []
                        details_email_incomplete = []
                        if 'step_detail' in json_data_info:
                            for s in range(len(json_data_info['step_detail'])):
                                json_info_step2 = {}
                                for u in range(len(json_data_info['step_detail'][s]['activity_code'])):
                                    oneMail = json_data_info['step_detail'][s]['one_email']
                                    # if str(oneMail).replace(' ','').lower() == self.emailUser:
                                    if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
                                        if step_before == '':
                                            try:
                                                if json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Complete':
                                                    step_before = 'Complete'
                                                elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Approve':
                                                    step_before = 'Approve'
                                                elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Reject':
                                                    step_before = 'Reject'
                                                    # for kz in range(len(step_2['activity_code'])):
                                                    #     if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
                                                    details_email_reject.append({'email':json_data_info['step_detail'][s]['one_email'],'step_num':json_data_info['step_num'],'datetime':json_data_info['step_detail'][s]['activity_time'][u]})
                                            except Exception as e:
                                                step_before = ''
                                        if step_before != 'Reject':
                                            if json_data_info['step_detail'][s]['activity_status'][u] == 'Complete':
                                                step_status = 'Complete'
                                            elif json_data_info['step_detail'][s]['activity_status'][u] == 'Approve':
                                                step_status = 'Complete'
                                            elif json_data_info['step_detail'][s]['activity_status'][u] == 'Reject':
                                                step_status = 'Reject'
                                            else:
                                                try:
                                                    step_status  = 'Incomplete'
                                                    details_email_incomplete.append({'email':json_data_info['step_detail'][s]['one_email'],'step_num':json_data_info['step_num']})
                                                except Exception as ex:
                                                    step_status = 'Incomplete'
                                        arr_step_info.append(step_status)
                                        arr_step_info.append(step_before)
                        # print(arr_step_info,sid_list_email[n])
                        if 'Waitting' in arr_step_info:
                            res_status_file = 'W'
                            res_status_file_string = 'รออนุมัติ'
                        elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                            res_status_file = 'N'
                            res_status_file_string = 'กำลังดำเนินการ'
                        elif 'Reject' in arr_step_info:
                            res_status_file = 'R'
                            res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                        else:
                            res_status_file_string = 'อนุมัติแล้ว'
                        if res_status_file == 'W':
                            statusFile_count_wait = statusFile_count_wait + 1
                        elif res_status_file == 'Y':
                            statusFile_count_approve = statusFile_count_approve + 1
                        elif res_status_file == 'R':
                            statusFile_count_reject = statusFile_count_reject + 1
                        else:
                            statusFile_count_pendding = statusFile_count_pendding + 1
                        result_SenderDetails = paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_email).first()
                        if result_SenderDetails !=None:
                            file_name = result_SenderDetails.file_name
                            dateTime_String = result_SenderDetails.send_time
                            trackingCode = result_SenderDetails.tracking_id
                            sender_name = result_SenderDetails.sender_name
                            sender_email = result_SenderDetails.sender_email
                        result_DetailsDocument = paper_lessdocument.query.filter(paper_lessdocument.step_id==sid_email).first()
                        if result_DetailsDocument != None:
                            documentsign_page_options = result_DetailsDocument.sign_page_options
                            if result_DetailsDocument.urgent_type != None:
                                documentUrgentType = result_DetailsDocument.urgent_type
                                if documentUrgentType == 'I':
                                    documentUrgentString = 'ด่วนมาก'
                                elif documentUrgentType == 'U':
                                    documentUrgentString = 'ด่วน'
                                elif documentUrgentType == 'M':
                                    documentUrgentString = 'ปกติ'
                            if result_DetailsDocument.documentJson != None:
                                documentJson_result = eval(result_DetailsDocument.documentJson)
                                documentName = documentJson_result['document_name']
                                documentType = documentJson_result['document_type']
                            else:
                                documentName = None
                                documentType = None
                            document_Id = result_DetailsDocument.document_id
                        # th_dateTime_1 = convert_datetime_TH_1(int(dateTime_String.timestamp()))
                        th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                        ts = int(time.time())
                        date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                        year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                        datetime_display = int(dateTime_String.timestamp())
                        date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                        yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                        time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                        old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                        if date_time_today == date_time_db:
                            date_display_show = time_show_db
                        else:
                            if year_today == yar_db:
                                date_display_show = convert_datetime_TH_2_display(datetime_display)
                            else:
                                date_display_show = old_year
                        lis_details = []
                        if res_status_file == 'R':
                            if len(details_email_reject) != 0:
                                for o in range(len(details_email_reject)):
                                    details_msg = {}
                                    details_msg['reject_by'] = details_email_reject[o]['email']
                                    details_msg['reject_in_step_num'] = details_email_reject[o]['step_num']
                                    details_msg['reject_in_datetime'] = details_email_reject[o]['datetime']
                                    lis_details.append(details_msg)
                        elif res_status_file == 'N':
                            if len(details_email_incomplete) != 0:
                                for oi in range(len(details_email_incomplete)):
                                    tmp_step_num_list_0 = details_email_incomplete[0]['step_num']
                                    tmp_step_num_list = details_email_incomplete[oi]['step_num']
                                    if tmp_step_num_list_0 == tmp_step_num_list:
                                        details_msg = {}
                                        details_msg['pending_by'] = details_email_incomplete[oi]['email']
                                        details_msg['pending_in_step_num'] = details_email_incomplete[oi]['step_num']
                                        lis_details.append(details_msg)
                        list_arr.append({
                            'sidCode':sid_email,
                            'document_name':documentName,
                            'document_type':documentType,
                            'document_urgent':documentUrgentType,
                            'document_urgent_string':documentUrgentString,
                            'dateTime_String':str(dateTime_String).split('+')[0],
                            'dateTime_String_TH_1':th_dateTime_2,
                            'dateTime_display':date_display_show,
                            'document_id':document_Id,
                            'stamp_all':documentsign_page_options,
                            # 'dateTime_String_TH_2':th_dateTime_2,
                            'date_String':str(dateTime_String).split(' ')[0],
                            'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                            'status_file_code':res_status_file,
                            'status_file_details':lis_details,
                            'status_file_string':res_status_file_string,
                            'dateTime':int(dateTime_String.timestamp()),
                            'tracking_id':trackingCode,
                            'sender_name':sender_name,
                            'sender_email':sender_email,
                            'file_name':file_name
                        })
                    else:
                        step_status = ''
                        res_status_file = 'Y'
                        step_before = ''
                        step_list_before = []
                        step_list_ = []
                        step_list_next = []
                        arr_step_totle = []
                        step_me = ''
                        step_sum_status = []
                        sum_status_step_list = []
                        list_check_step = []
                        step_list_data = []
                        max_step = (len(jsonData_eval))
                        step_infomation = jsonData_eval
                        sum_status_step = []
                        details_email_reject = []
                        details_email_incomplete = []
                        for i in range(len(step_infomation)):
                            list_check_step = []
                            json_step_info_2 = {}
                            step_list_data = []
                            step_ = step_infomation[i]
                            step_num = step_infomation[i]['step_num']
                            json_step_info_2['step_status'] = ''
                            for u in range(len(step_['step_detail'])):
                                oneMail = step_['step_detail'][u]['one_email']
                                # if str(oneMail).replace(' ','').lower() == self.emailUser:
                                #     step_me = step_infomation[i]['step_num']
                                #     step_me = int(step_me) - 1
                                step_2 = step_['step_detail'][u]
                                for k in range(len(step_2['activity_code'])):
                                    if step_2['activity_code'][k] == 'A03':
                                        # print()
                                        json_step_info = {}
                                        json_step_info['activity_status'] = step_2['activity_status'][k]
                                        json_step_info['one_email'] = step_2['one_email']
                                        json_step_info['step_num'] = step_num
                                        list_check_step.append(json_step_info['activity_status'])
                                        step_list_data.append(json_step_info)

                                json_step_info_2['step_info'] = step_list_data
                                if json_step_info_2['step_status'] == '':
                                    if 'Reject' in list_check_step:
                                        for kz in range(len(step_2['activity_code'])):
                                            if step_2['activity_code'][kz] == 'A03':
                                                details_email_reject.append({'email':step_2['one_email'],'step_num':step_num,'datetime':step_2['activity_time'][kz]})
                                        json_step_info_2['step_status'] = 'Reject'
                                    elif 'Incomplete' in list_check_step:
                                        # details_email_incomplete.append(step_2['one_email'])
                                        json_step_info_2['step_status'] = 'Incomplete'
                                    elif 'Pending' in list_check_step:
                                        json_step_info_2['step_status'] = 'Incomplete'
                                    else:
                                        json_step_info_2['step_status'] = 'Complete'
                                if json_step_info_2['step_status'] == 'Incomplete':
                                    if 'Reject' in list_check_step:
                                        json_step_info_2['step_status'] = 'Reject'
                                    elif 'Incomplete' in list_check_step:
                                        details_email_incomplete.append({'email':step_2['one_email'],'step_num':step_num})
                                        json_step_info_2['step_status'] = 'Incomplete'
                                    elif 'Pending' in list_check_step:
                                        json_step_info_2['step_status'] = 'Incomplete'
                                    else:
                                        json_step_info_2['step_status'] = 'Complete'

                                sum_status_step_list.append(json_step_info_2['step_status'])

                            sum_status_step.append(json_step_info_2['step_status'])
                            arr_step_info.append(json_step_info_2['step_status'])

                        index_mystep = step_me

                        if 'Reject' in arr_step_info:
                            res_status_file = 'R'
                            res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                        elif 'Incomplete_1' in arr_step_info or 'Pending_1' in arr_step_info:
                            res_status_file = 'W'
                            res_status_file_string = 'รออนุมัติ'
                        elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                            res_status_file = 'N'
                            res_status_file_string = 'กำลังดำเนินการ'
                        elif 'Wait__' in arr_step_info:
                            res_status_file = 'Z'
                            res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                        elif 'Waitting' in arr_step_info:
                            res_status_file = 'W'
                            res_status_file_string = 'รออนุมัติ'
                        else:
                            res_status_file_string = 'อนุมัติแล้ว'
                        if res_status_file == 'W':
                            statusFile_count_wait = statusFile_count_wait + 1
                        elif res_status_file == 'Y':
                            statusFile_count_approve = statusFile_count_approve + 1
                        elif res_status_file == 'R':
                            statusFile_count_reject = statusFile_count_reject + 1
                        else:
                            statusFile_count_pendding = statusFile_count_pendding + 1
                        result_SenderDetails = paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_email).first()
                        if result_SenderDetails !=None:
                            file_name = result_SenderDetails.file_name
                            dateTime_String = result_SenderDetails.send_time
                            trackingCode = result_SenderDetails.tracking_id
                            sender_name = result_SenderDetails.sender_name
                            sender_email = result_SenderDetails.sender_email
                        result_DetailsDocument = paper_lessdocument.query.filter(paper_lessdocument.step_id==sid_email).first()
                        if result_DetailsDocument != None:
                            documentsign_page_options = result_DetailsDocument.sign_page_options
                            if result_DetailsDocument.urgent_type != None:
                                documentUrgentType = result_DetailsDocument.urgent_type
                                if documentUrgentType == 'I':
                                    documentUrgentString = 'ด่วนมาก'
                                elif documentUrgentType == 'U':
                                    documentUrgentString = 'ด่วน'
                                elif documentUrgentType == 'M':
                                    documentUrgentString = 'ปกติ'
                            if result_DetailsDocument.documentJson != None:
                                documentJson_result = eval(result_DetailsDocument.documentJson)
                                documentName = documentJson_result['document_name']
                                documentType = documentJson_result['document_type']
                            else:
                                documentName = None
                                documentType = None
                            document_Id = result_DetailsDocument.document_id
                        # th_dateTime_1 = convert_datetime_TH_1(int(dateTime_String.timestamp()))
                        th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                        ts = int(time.time())
                        date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                        year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                        datetime_display = int(dateTime_String.timestamp())
                        date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                        yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                        time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                        old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                        if date_time_today == date_time_db:
                            date_display_show = time_show_db
                        else:
                            if year_today == yar_db:
                                date_display_show = convert_datetime_TH_2_display(datetime_display)
                            else:
                                date_display_show = old_year
                        lis_details = []
                        if res_status_file == 'R':
                            if len(details_email_reject) != 0:
                                for o in range(len(details_email_reject)):
                                    details_msg = {}
                                    details_msg['reject_by'] = details_email_reject[o]['email']
                                    details_msg['reject_in_step_num'] = details_email_reject[o]['step_num']
                                    details_msg['reject_in_datetime'] = details_email_reject[o]['datetime']
                                    lis_details.append(details_msg)
                        elif res_status_file == 'N':
                            if len(details_email_incomplete) != 0:
                                for oi in range(len(details_email_incomplete)):
                                    tmp_step_num_list_0 = details_email_incomplete[0]['step_num']
                                    tmp_step_num_list = details_email_incomplete[oi]['step_num']
                                    if tmp_step_num_list_0 == tmp_step_num_list:
                                        details_msg = {}
                                        details_msg['pending_by'] = details_email_incomplete[oi]['email']
                                        details_msg['pending_in_step_num'] = details_email_incomplete[oi]['step_num']
                                        lis_details.append(details_msg)
                        list_arr.append({
                            'sidCode':sid_email,
                            'document_name':documentName,
                            'document_type':documentType,
                            'document_urgent':documentUrgentType,
                            'document_urgent_string':documentUrgentString,
                            'dateTime_String':str(dateTime_String).split('+')[0],
                            'dateTime_String_TH_1':th_dateTime_2,
                            'dateTime_display':date_display_show,
                            'document_id':document_Id,
                            'stamp_all':documentsign_page_options,
                            # 'dateTime_String_TH_2':th_dateTime_2,
                            'date_String':str(dateTime_String).split(' ')[0],
                            'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                            'status_file_code':res_status_file,
                            'status_file_details':lis_details,
                            'status_file_string':res_status_file_string,
                            'dateTime':int(dateTime_String.timestamp()),
                            'tracking_id':trackingCode,
                            'sender_name':sender_name,
                            'sender_email':sender_email,
                            'file_name':file_name
                        })
                    list_sid_for_api.append(sid_email)
                json_Data['Document_Status_Details']  = {
                    'Incomplete_Pendding':statusFile_count_pendding,
                    'Complete_Approve':statusFile_count_approve,
                    'Reject':statusFile_count_reject,
                    'Wait':statusFile_count_wait
                }
                list_arr = sorted(list_arr, key=lambda k: k['dateTime'], reverse=True)
                json_Data['Document_Details'] = list_arr
                json_Data['sid_document'] = list_sid_for_api
                return {'result':'OK','messageText':json_Data,'status_Code':200,'messageER':None}
            except Exception as ex:
                exc_type, exc_obj, exc_tb = sys.exc_info()
                fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                print(exc_type, fname, exc_tb.tb_lineno)
                return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}
        except Exception as e:
            print(e)

    def select_status_for_eform_v2(self,arr_paperless_code,emailUser):
        self.arr_paperless_code = arr_paperless_code
        self.emailUser  = emailUser
        sid_list = []
        sid_list_email = []
        json_Data = {}
        list_arr = []
        list_json = []
        try:
            count_rowDocument = 0
            count_rowDocument_StatusActive = 0
            count_rowDocument_StatusReject = 0
            count_rowDocument_StatusCancel = 0
            statusFile_count_approve = 0
            statusFile_count_pendding = 0
            statusFile_count_reject = 0
            statusFile_count_wait = 0
            query_list = db.session.query(
                paper_lesstrack,
                paper_lessdatastep.data_json,
                paper_lessdocument,
                paper_lesssender)\
                .join(paper_lesssender,paper_lesssender.step_data_sid==paper_lesstrack.step_data_sid)\
                .join(paper_lessdatastep,paper_lessdatastep.sid==paper_lesstrack.step_data_sid)\
                .join(paper_lessdocument,paper_lessdocument.step_id==paper_lesstrack.step_data_sid)\
                .filter(paper_lesstrack.hash_sid_code.in_(self.arr_paperless_code))\
                .all()
            
            for u in query_list:
                tmp_json = u._asdict()
                # print(tmp_json)
                tmp_paper_lesssender = (tmp_json['paper_lesssender']).__dict__
                tmp_paper_lesstrack = (tmp_json['paper_lesstrack']).__dict__
                if tmp_json['paper_lessdocument'] != None:
                    tmp_paper_lessdocument = (tmp_json['paper_lessdocument']).__dict__
                if tmp_paper_lessdocument['attempted_folder'] != None:
                    attempted_folder = tmp_paper_lessdocument['attempted_folder']
                    status_attempted_folder = True
                else:
                    attempted_folder = None
                    status_attempted_folder = False
                documentsign_page_options = tmp_paper_lessdocument['sign_page_options']
                if tmp_paper_lessdocument['urgent_type'] != None:
                    documentUrgentType = tmp_paper_lessdocument['urgent_type']
                    if documentUrgentType == 'I':
                        documentUrgentString = 'ด่วนมาก'
                    elif documentUrgentType == 'U':
                        documentUrgentString = 'ด่วน'
                    elif documentUrgentType == 'M':
                        documentUrgentString = 'ปกติ'
                if tmp_paper_lessdocument['documentJson'] != None:
                    documentJson_result = eval(tmp_paper_lessdocument['documentJson'])
                    documentName = documentJson_result['document_name']
                    documentType = documentJson_result['document_type']
                else:
                    documentName = None
                    documentType = None
                document_Id = tmp_paper_lessdocument['document_id']
                file_name = tmp_paper_lesssender['file_name']
                dateTime_String = tmp_paper_lesssender['send_time']
                trackingCode = tmp_paper_lesssender['tracking_id']
                sender_name = tmp_paper_lesssender['sender_name']
                sender_email = tmp_paper_lesssender['sender_email']
                th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                ts = int(time.time())
                date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                datetime_display = int(dateTime_String.timestamp())
                date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                if date_time_today == date_time_db:
                    date_display_show = time_show_db
                else:
                    if year_today == yar_db:
                        date_display_show = convert_datetime_TH_2_display(datetime_display)
                    else:
                        date_display_show = old_year
                jsonData_eval = eval(tmp_json['data_json'])
                arr_step_info = []
                tmpDatajson = []
                if 'step_num' in jsonData_eval:
                    tmpDatajson.append(jsonData_eval)
                    jsonData_eval = tmpDatajson
                if 'step_num' in jsonData_eval:
                    step_status = ''
                    step_before = ''
                    res_status_file = 'Y'
                    arr_step_totle = []
                    json_data_info = jsonData_eval
                    if 'step_detail' in json_data_info:
                        for s in range(len(json_data_info['step_detail'])):
                            json_info_step2 = {}
                            for u in range(len(json_data_info['step_detail'][s]['activity_code'])):
                                oneMail = json_data_info['step_detail'][s]['one_email']
                                if str(oneMail).replace(' ','').lower() == self.emailUser:
                                    if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
                                        if step_before == '':
                                            try:
                                                if json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Complete':
                                                    step_before = 'Complete'
                                                elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Approve':
                                                    step_before = 'Complete'
                                                elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Reject':
                                                    step_before = 'Reject'
                                            except Exception as e:
                                                step_before = ''
                                        if step_before != 'Reject':
                                            if json_data_info['step_detail'][s]['activity_status'][u] == 'Complete':
                                                step_status = 'Complete'
                                            elif json_data_info['step_detail'][s]['activity_status'][u] == 'Approve':
                                                step_status = 'Complete'
                                            elif json_data_info['step_detail'][s]['activity_status'][u] == 'Reject':
                                                step_status = 'Reject'
                                            else:
                                                try:
                                                    step_status  = 'Incomplete'
                                                except Exception as ex:
                                                    step_status = 'Incomplete'
                                        arr_step_info.append(step_status)
                                        arr_step_info.append(step_before)
                                else:
                                    if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
                                        if step_before == '':
                                            try:
                                                if json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Complete':
                                                    step_before = 'Complete'
                                                elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Approve':
                                                    step_before = 'Complete'
                                                elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Reject':
                                                    step_before = 'Reject'
                                            except Exception as e:
                                                step_before = ''
                                        if step_before != 'Reject':
                                            if json_data_info['step_detail'][s]['activity_status'][u] == 'Complete':
                                                step_status = 'Complete'
                                            elif json_data_info['step_detail'][s]['activity_status'][u] == 'Approve':
                                                step_status = 'Complete'
                                            elif json_data_info['step_detail'][s]['activity_status'][u] == 'Reject':
                                                step_status = 'Reject'
                                            else:
                                                try:
                                                    step_status  = 'Incomplete__'
                                                except Exception as ex:
                                                    step_status = 'Incomplete__'
                                        arr_step_info.append(step_status)
                                        arr_step_info.append(step_before)
                    # print(arr_step_info)
                    # print(sid_email)
                    if 'Waitting' in arr_step_info:
                        res_status_file = 'W'
                        res_status_file_string = 'รออนุมัติ'
                    elif 'Incomplete__' in arr_step_info:
                        res_status_file = 'N'
                        res_status_file_string = 'กำลังดำเนินการ'
                    elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                        res_status_file = 'W'
                        res_status_file_string = 'รออนุมัติ'
                    elif 'Reject' in arr_step_info:
                        res_status_file = 'R'
                        res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                    else:
                        res_status_file_string = 'อนุมัติแล้ว'
                    if res_status_file == 'W':
                        statusFile_count_wait = statusFile_count_wait + 1
                    elif res_status_file == 'Y':
                        statusFile_count_approve = statusFile_count_approve + 1
                    elif res_status_file == 'R':
                        statusFile_count_reject = statusFile_count_reject + 1
                    else:
                        statusFile_count_pendding = statusFile_count_pendding + 1
                else:
                    step_status = ''
                    res_status_file = 'Y'
                    step_before = ''
                    step_list_before = []
                    step_list_ = []
                    step_list_next = []
                    arr_step_totle = []
                    step_me = ''
                    step_sum_status = []
                    sum_status_step_list = []
                    list_check_step = []
                    step_list_data = []
                    max_step = (len(jsonData_eval))
                    step_infomation = jsonData_eval
                    sum_status_step = []
                    tmp_status_sum = []
                    arr_email_list = []
                    email_step_sum = []
                    email_one_sum = []
                    for i in range(len(step_infomation)):
                        list_check_step = []
                        json_step_info_2 = {}
                        step_list_data = []
                        step_status = []
                        step_email = []
                        step_ = step_infomation[i]
                        step_num = step_infomation[i]['step_num']
                        json_step_info_2['step_status'] = ''
                        tmp_step_detail = step_['step_detail']
                        for u in range(len(tmp_step_detail)):
                            tmp_arr_step_detail = tmp_step_detail[u]
                            tmp_status = tmp_arr_step_detail['activity_status']
                            tmp_code = tmp_arr_step_detail['activity_code']
                            tmp_email = tmp_arr_step_detail['one_email']
                            for s in range(len(tmp_code)):
                                if tmp_code[s] == 'A03':
                                    step_status.append(tmp_status[s])
                                    step_email.append(tmp_email)
                                    email_one_sum.append(tmp_email)
                        email_step_sum.append(step_email)
                        if 'Reject' in step_status:
                            tmp_status_sum.append('Reject')
                        elif 'Approve' in step_status:
                            tmp_status_sum.append('Complete')
                        elif 'Complete' in step_status:
                            tmp_status_sum.append('Complete')
                        elif 'Incomplete' in step_status:
                            tmp_status_sum.append('Incomplete')
                        elif 'Pending' in step_status:
                            tmp_status_sum.append('Incomplete')
                        else:
                            tmp_status_sum.append('Complete')
                    if self.emailUser in email_one_sum:
                        for zzi in range(len(step_infomation)):
                            list_check_step = []
                            json_step_info_2 = {}
                            step_list_data = []
                            step_status = []
                            step_ = step_infomation[zzi]
                            step_num = step_infomation[zzi]['step_num']
                            json_step_info_2['step_status'] = ''
                            tmp_step_detail = step_['step_detail']
                            for zi in range(len(tmp_step_detail)):
                                tmp_arr_step_detail_2 = tmp_step_detail[zi]
                                oneMail = tmp_arr_step_detail_2['one_email']
                                tmp_step_me = int(step_num) - 1
                                step_num_int2 = int(step_num)
                                if 'Reject' in tmp_status_sum:
                                    arr_step_info.append('Reject')
                                elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Incomplete':
                                    if self.emailUser not in arr_email_list:
                                        index_step_me = tmp_step_me
                                        if index_step_me != 0:
                                            while index_step_me > 0:
                                                if len(arr_step_info) == 0:
                                                    index_step_me = index_step_me - 1
                                                    if tmp_status_sum[index_step_me] == 'Incomplete':
                                                        arr_step_info.append('Incomplete')
                                                    else:
                                                        arr_step_info.append('Wait')
                                                    arr_email_list.append(self.emailUser)
                                                else:
                                                    index_step_me = index_step_me - 1
                                                    continue
                                        else:
                                            arr_step_info.append('Wait')
                                elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Complete':
                                    # print('Complete')
                                    if self.emailUser not in arr_email_list:
                                        for nz in range(step_num_int2,len(tmp_status_sum),1):
                                            if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                arr_step_info.append('Incomplete')
                                            elif self.emailUser not in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                arr_step_info.append('Progress')
                                        arr_email_list.append(self.emailUser)
                    else:
                        for zzi in range(len(step_infomation)):
                            list_check_step = []
                            json_step_info_2 = {}
                            step_list_data = []
                            step_status = []
                            step_ = step_infomation[zzi]
                            step_num = step_infomation[zzi]['step_num']
                            json_step_info_2['step_status'] = ''
                            tmp_step_detail = step_['step_detail']
                            for zi in range(len(tmp_step_detail)):
                                tmp_arr_step_detail_2 = tmp_step_detail[zi]
                                oneMail = tmp_arr_step_detail_2['one_email']
                                tmp_step_me = int(step_num) - 1
                                step_num_int2 = int(step_num)
                                if 'Reject' in tmp_status_sum:
                                    arr_step_info.append('Reject')
                                elif 'Incomplete' in tmp_status_sum:
                                    arr_step_info.append('Progress')

                    if 'Reject' in arr_step_info:
                        res_status_file = 'R'
                        res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                    elif 'Wait' in arr_step_info:
                        res_status_file = 'W'
                        res_status_file_string = 'รออนุมัติ'
                    elif 'Incomplete' in arr_step_info:
                        res_status_file = 'Z'
                        res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                    elif 'Progress' in arr_step_info:
                        res_status_file = 'N'
                        res_status_file_string = 'กำลังดำเนินการ'                    
                    elif arr_step_info.count('Incomplete') >= 2:
                        res_status_file = 'Z'
                        res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                    elif 'Wait__' in arr_step_info:
                        res_status_file = 'Z'
                        res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                    elif 'Incomplete_1' in arr_step_info or 'Pending_1' in arr_step_info:
                        res_status_file = 'W'
                        res_status_file_string = 'รออนุมัติ'
                    elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                        res_status_file = 'N'
                        res_status_file_string = 'กำลังดำเนินการ'

                    elif 'Waitting' in arr_step_info:
                        res_status_file = 'W'
                        res_status_file_string = 'รออนุมัติ'
                    else:
                        res_status_file_string = 'อนุมัติแล้ว'
                    if res_status_file == 'W':
                        statusFile_count_wait = statusFile_count_wait + 1
                    elif res_status_file == 'Y':
                        statusFile_count_approve = statusFile_count_approve + 1
                    elif res_status_file == 'R':
                        statusFile_count_reject = statusFile_count_reject + 1
                    else:
                        statusFile_count_pendding = statusFile_count_pendding + 1
                list_arr.append({
                    'paperless_Code':tmp_paper_lesstrack['hash_sid_code'],                    
                    'document_type':documentType,
                    'document_urgent':documentUrgentType,
                    'document_urgent_string':documentUrgentString,
                    'dateTime_String':str(dateTime_String).split('+')[0],
                    'dateTime_String_TH_1':th_dateTime_2,
                    'dateTime_display':date_display_show,
                    'document_id':document_Id,
                    'stamp_all':documentsign_page_options,
                    'status_attempted':status_attempted_folder,
                    'code_attempted':attempted_folder,
                    'date_String':str(dateTime_String).split(' ')[0],
                    'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                    'status_file_code':res_status_file,
                    'status_file_string':res_status_file_string,
                    'dateTime':int(dateTime_String.timestamp()),
                    'tracking_id':trackingCode,
                    'sender_name':sender_name,
                    'sender_email':sender_email,
                    'file_name':file_name
                })
            count_rowDocument_StatusActive = db.session.query(
                paper_lesstrack,
                paper_lesssender,
                paper_lessdatastep,
                paper_lessdocument)\
                .join(paper_lesssender,paper_lesssender.step_data_sid==paper_lesstrack.step_data_sid)\
                .join(paper_lessdatastep,paper_lessdatastep.sid==paper_lesstrack.step_data_sid)\
                .join(paper_lessdocument,paper_lessdocument.step_id==paper_lesstrack.step_data_sid)\
                .filter(paper_lesstrack.hash_sid_code.in_(self.arr_paperless_code),paper_lesssender.status=='ACTIVE')\
                .count()
            count_rowDocument_StatusReject = db.session.query(
                paper_lesstrack,
                paper_lesssender,
                paper_lessdatastep,
                paper_lessdocument)\
                .join(paper_lesssender,paper_lesssender.step_data_sid==paper_lesstrack.step_data_sid)\
                .join(paper_lessdatastep,paper_lessdatastep.sid==paper_lesstrack.step_data_sid)\
                .join(paper_lessdocument,paper_lessdocument.step_id==paper_lesstrack.step_data_sid)\
                .filter(paper_lesstrack.hash_sid_code.in_(self.arr_paperless_code),paper_lesssender.status=='REJECT')\
                .count()
            count_rowDocument_StatusCancel = db.session.query(
                paper_lesstrack,
                paper_lesssender,
                paper_lessdatastep,
                paper_lessdocument)\
                .join(paper_lesssender,paper_lesssender.step_data_sid==paper_lesstrack.step_data_sid)\
                .join(paper_lessdatastep,paper_lessdatastep.sid==paper_lesstrack.step_data_sid)\
                .join(paper_lessdocument,paper_lessdocument.step_id==paper_lesstrack.step_data_sid)\
                .filter(paper_lesstrack.hash_sid_code.in_(self.arr_paperless_code),paper_lesssender.status=='CANCEL')\
                .count()
            count_rowDocument = len(list_arr)
            json_Data['sum_Document']  = count_rowDocument
            json_Data['DocumentInfo'] = {
                'Document_Active':count_rowDocument_StatusActive,
                'Document_Reject':count_rowDocument_StatusReject,
                'Document_Cancel':count_rowDocument_StatusCancel
            }
            json_Data['Document_Status_Details']  = {
                'Incomplete_Pendding':statusFile_count_pendding,
                'Complete_Approve':statusFile_count_approve,
                'Reject':statusFile_count_reject,
                'Wait':statusFile_count_wait
            }
            list_arr = sorted(list_arr, key=lambda k: k['dateTime'], reverse=True)
            json_Data['Document_Details'] = list_arr
            return {'result':'OK','messageText':json_Data,'status_Code':200,'messageER':None}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(e)}



    def select_status_for_eform_v1(self,arr_paperless_code,emailUser):
        self.arr_paperless_code = arr_paperless_code
        self.emailUser  = emailUser
        sid_list = []
        sid_list_email = []
        json_Data = {}
        list_arr = []
        list_json = []
        try:
            query_list = paper_lesstrack.query.filter(paper_lesstrack.hash_sid_code.in_(self.arr_paperless_code)).all()
            for u in range(len(query_list)):
                sidCode = query_list[u].step_data_sid
                sid_list_email.append(sidCode)
            count_rowDocument = 0
            count_rowDocument_StatusActive = 0
            count_rowDocument_StatusReject = 0
            count_rowDocument_StatusCancel = 0
            statusFile_count_approve = 0
            statusFile_count_pendding = 0
            statusFile_count_reject = 0
            statusFile_count_wait = 0
            try:
                for i in range(len(sid_list_email)):
                    count_rowDocument = count_rowDocument + 1
                    count_rowDocument_StatusActive += paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_list_email[i],paper_lesssender.status=='ACTIVE').count()
                    count_rowDocument_StatusReject += paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_list_email[i],paper_lesssender.status=='REJECT').count()
                    count_rowDocument_StatusCancel += paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_list_email[i],paper_lesssender.status=='CANCEL').count()
                json_Data['sum_Document']  = count_rowDocument
                json_Data['DocumentInfo'] = {
                    'Document_Active':count_rowDocument_StatusActive,
                    'Document_Reject':count_rowDocument_StatusReject,
                    'Document_Cancel':count_rowDocument_StatusCancel
                }
                for n in range(len(sid_list_email)):
                    result_DB = paper_lessdatastep.query.filter(paper_lessdatastep.sid==sid_list_email[n]).first()
                    jsonData_eval = eval(result_DB.data_json)
                    arr_step_info = []
                    if 'step_num' in jsonData_eval:
                        step_status = ''
                        step_before = ''
                        res_status_file = 'Y'
                        arr_step_totle = []
                        json_data_info = jsonData_eval
                        if 'step_detail' in json_data_info:
                            for s in range(len(json_data_info['step_detail'])):
                                json_info_step2 = {}
                                for u in range(len(json_data_info['step_detail'][s]['activity_code'])):

                                    oneMail = json_data_info['step_detail'][s]['one_email']
                                    # print(str(oneMail).replace(' ','').lower(),str(self.emailUser).replace(' ','').lower())
                                    if str(oneMail).replace(' ','').lower() == str(self.emailUser).replace(' ','').lower():
                                        print(json_data_info['step_detail'][s]['activity_status'][u])
                                        if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
                                            if step_before == '':
                                                try:
                                                    if json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Reject':
                                                        step_before = 'Reject'
                                                    elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Complete':
                                                        step_before = 'Complete'
                                                    elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Approve':
                                                        step_before = 'Approve'
                                                except Exception as e:
                                                    step_before = ''
                                            if step_before != 'Reject':
                                                if json_data_info['step_detail'][s]['activity_status'][u] == 'Reject':
                                                    step_status = 'Reject'
                                                elif json_data_info['step_detail'][s]['activity_status'][u] == 'Complete':
                                                    step_status = 'Complete'
                                                elif json_data_info['step_detail'][s]['activity_status'][u] == 'Approve':
                                                    step_status = 'Complete'
                                                else:
                                                    try:
                                                        step_status  = 'Waitting'
                                                    except Exception as ex:
                                                        step_status = 'Waitting'

                                            arr_step_info.append(step_status)
                                            arr_step_info.append(step_before)
                                    else:
                                        if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
                                            if step_before == '':
                                                try:
                                                    if json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Reject':
                                                        step_before = 'Reject'
                                                    elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Complete':
                                                        step_before = 'Complete'
                                                    elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Approve':
                                                        step_before = 'Approve'
                                                except Exception as e:
                                                    step_before = ''
                                            if step_before != 'Reject':

                                                if json_data_info['step_detail'][s]['activity_status'][u] == 'Reject':
                                                    step_status = 'Reject'
                                                elif json_data_info['step_detail'][s]['activity_status'][u] == 'Complete':
                                                    step_status = 'Complete'
                                                elif json_data_info['step_detail'][s]['activity_status'][u] == 'Approve':
                                                    step_status = 'Complete'
                                                else:
                                                    try:
                                                        step_status  = 'Incomplete'
                                                    except Exception as ex:
                                                        step_status = 'Incomplete'
                                            arr_step_info.append(step_status)
                                            arr_step_info.append(step_before)
                        print(arr_step_info)
                        if 'Waitting' in arr_step_info:
                            res_status_file = 'W'
                            res_status_file_string = 'รออนุมัติ'
                        elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                            res_status_file = 'N'
                            res_status_file_string = 'กำลังดำเนินการ'
                        elif 'Reject' in arr_step_info:
                            res_status_file = 'R'
                            res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                        else:
                            res_status_file_string = 'อนุมัติแล้ว'
                        if res_status_file == 'W':
                            statusFile_count_wait = statusFile_count_wait + 1
                        elif res_status_file == 'Y':
                            statusFile_count_approve = statusFile_count_approve + 1
                        elif res_status_file == 'R':
                            statusFile_count_reject = statusFile_count_reject + 1
                        else:
                            statusFile_count_pendding = statusFile_count_pendding + 1
                        result_SenderDetails = paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_list_email[n]).first()
                        if result_SenderDetails !=None:
                            file_name = result_SenderDetails.file_name
                            dateTime_String = result_SenderDetails.send_time
                            trackingCode = result_SenderDetails.tracking_id
                            sender_name = result_SenderDetails.sender_name
                            sender_email = result_SenderDetails.sender_email
                        result_DetailsDocument = paper_lessdocument.query.filter(paper_lessdocument.step_id==sid_list_email[n]).first()
                        if result_DetailsDocument != None:
                            if result_DetailsDocument.attempted_folder != None:
                                attempted_folder = result_DetailsDocument.attempted_folder
                                status_attempted_folder = True
                            else:
                                attempted_folder =None
                                status_attempted_folder = False
                            documentsign_page_options = result_DetailsDocument.sign_page_options
                            if result_DetailsDocument.urgent_type != None:
                                documentUrgentType = result_DetailsDocument.urgent_type
                                if documentUrgentType == 'I':
                                    documentUrgentString = 'ด่วนมาก'
                                elif documentUrgentType == 'U':
                                    documentUrgentString = 'ด่วน'
                                elif documentUrgentType == 'M':
                                    documentUrgentString = 'ปกติ'
                            if result_DetailsDocument.documentJson != None:
                                documentJson_result = eval(result_DetailsDocument.documentJson)
                                documentName = documentJson_result['document_name']
                                documentType = documentJson_result['document_type']
                            else:
                                documentName = None
                                documentType = None
                            document_Id = result_DetailsDocument.document_id
                        # th_dateTime_1 = convert_datetime_TH_1(int(dateTime_String.timestamp()))
                        th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                        ts = int(time.time())
                        date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                        year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                        datetime_display = int(dateTime_String.timestamp())
                        date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                        yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                        time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                        old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                        if date_time_today == date_time_db:
                            date_display_show = time_show_db
                        else:
                            if year_today == yar_db:
                                date_display_show = convert_datetime_TH_2_display(datetime_display)
                            else:
                                date_display_show = old_year
                        sid_code_sha512 = hashlib.sha512(str(sid_list_email[n]).encode('utf-8')).hexdigest()
                        list_arr.append({
                            'paperless_Code':sid_code_sha512,
                            'document_name':documentName,
                            'document_type':documentType,
                            'document_urgent':documentUrgentType,
                            'document_urgent_string':documentUrgentString,
                            'dateTime_String':str(dateTime_String).split('+')[0],
                            'dateTime_String_TH_1':th_dateTime_2,
                            'dateTime_display':date_display_show,
                            'document_id':document_Id,
                            'stamp_all':documentsign_page_options,
                            'status_attempted':status_attempted_folder,
                            'code_attempted':attempted_folder,
                            # 'dateTime_String_TH_2':th_dateTime_2,
                            'date_String':str(dateTime_String).split(' ')[0],
                            'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                            'status_file_code':res_status_file,
                            'status_file_string':res_status_file_string,
                            'dateTime':int(dateTime_String.timestamp()),
                            'tracking_id':trackingCode,
                            'sender_name':sender_name,
                            'sender_email':sender_email,
                            'file_name':file_name
                        })
                    else:
                        step_status = ''
                        res_status_file = 'Y'
                        step_before = ''
                        step_list_before = []
                        step_list_ = []
                        step_list_next = []
                        arr_step_totle = []
                        step_me = ''
                        step_sum_status = []
                        sum_status_step_list = []
                        list_check_step = []
                        step_list_data = []
                        max_step = (len(jsonData_eval))
                        step_infomation = jsonData_eval
                        sum_status_step = []
                        for i in range(len(step_infomation)):
                            list_check_step = []
                            json_step_info_2 = {}
                            step_list_data = []
                            step_ = step_infomation[i]
                            step_num = step_infomation[i]['step_num']
                            json_step_info_2['step_status'] = ''
                            for u in range(len(step_['step_detail'])):
                                oneMail = step_['step_detail'][u]['one_email']
                                if str(oneMail).replace(' ','').lower() == self.emailUser:
                                    step_me = step_infomation[i]['step_num']
                                    step_me = int(step_me) - 1
                                step_2 = step_['step_detail'][u]
                                for k in range(len(step_2['activity_code'])):
                                    if step_2['activity_code'][k] == 'A03':
                                        json_step_info = {}
                                        json_step_info['activity_status'] = step_2['activity_status'][k]
                                        json_step_info['one_email'] = step_2['one_email']
                                        json_step_info['step_num'] = step_num
                                        list_check_step.append(json_step_info['activity_status'])
                                        step_list_data.append(json_step_info)
                                json_step_info_2['step_info'] = step_list_data
                                if json_step_info_2['step_status'] == '':
                                    if 'Reject' in list_check_step:
                                        json_step_info_2['step_status'] = 'Reject'
                                    elif 'Incomplete' in list_check_step:
                                        json_step_info_2['step_status'] = 'Incomplete'
                                    elif 'Pending' in list_check_step:
                                        json_step_info_2['step_status'] = 'Incomplete'
                                    else:
                                        json_step_info_2['step_status'] = 'Complete'
                                sum_status_step_list.append(json_step_info_2['step_status'])
                            sum_status_step.append(json_step_info_2['step_status'])
                        # my_status_step = sum_status_step[step_me]
                        index_mystep = step_me
                        for l in range(len(jsonData_eval)):
                            json_data_info = jsonData_eval[l]
                            step_sum_status = []
                            step_list_next = []
                            if 'step_detail' in json_data_info:

                                for s in range(len(json_data_info['step_detail'])):

                                    json_info_step2 = {}
                                    for u in range(len(json_data_info['step_detail'][s]['activity_code'])):
                                        oneMail = json_data_info['step_detail'][s]['one_email']

                                        if str(oneMail).replace(' ','').lower() == self.emailUser:
                                            print(oneMail)
                                            if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':

                                                if step_before == '':
                                                    try:
                                                        if l == 0:
                                                            list_checknextstep = []
                                                            for uy in range(len(sum_status_step)):
                                                                if sum_status_step[index_mystep]:
                                                                    step_me = sum_status_step[index_mystep]
                                                                    index_mystep = index_mystep

                                                                if step_me == 'Reject':
                                                                    step_status = 'Reject'
                                                                    step_me = ''
                                                                elif step_me == 'Incomplete' or step_me == 'Pending':
                                                                    step_status = 'Incomplete_1'
                                                                    step_me = ''
                                                                elif step_me == 'Complete' or step_me == 'Approve':
                                                                    try:
                                                                        for uu in range(index_mystep,len(sum_status_step),1):
                                                                            list_checknextstep.append(sum_status_step[uu])
                                                                        # print(list_checknextstep,'list_checknextstep')
                                                                        if 'Reject' in list_checknextstep:
                                                                            step_status = 'Reject'
                                                                            step_me = ''
                                                                        elif 'Incomplete' in list_checknextstep or 'Pending' in list_checknextstep:
                                                                            step_status = 'Incomplete'
                                                                            step_me = ''
                                                                        else:
                                                                            step_status = 'Complete'
                                                                            step_me = ''
                                                                    except Exception as e:
                                                                        step_status = 'Incomplete'
                                                                        step_me = ''
                                                            print(step_status)
                                                            # arr_step_info.append(step_me)
                                                            # arr_step_info.append(step_before)
                                                            arr_step_info.append(step_status)
                                                            print(step_status)
                                                        else:
                                                            list_checknextstep = []
                                                            step_status = ''
                                                            print(step_status)
                                                            for uy in range(len(sum_status_step)):
                                                                if sum_status_step[index_mystep]:
                                                                    step_me = sum_status_step[index_mystep]
                                                                    index_mystep = index_mystep
                                                                print(step_me)
                                                                if step_me == 'Reject':
                                                                    step_status = 'Reject'
                                                                    step_me = ''
                                                                elif step_me == 'Complete' and step_me == 'Approve':
                                                                    try:

                                                                        list_checknextstep = []
                                                                        for uu in range(index_mystep,len(sum_status_step),1):
                                                                            list_checknextstep.append(sum_status_step[uu])
                                                                        # print(list_checknextstep,'list_checknextstep')
                                                                        if 'Reject' in list_checknextstep:
                                                                            step_status = 'Reject'
                                                                            step_me = ''
                                                                        elif 'Incomplete' in list_checknextstep or 'Pending' in list_checknextstep:
                                                                            step_status = 'Incomplete'
                                                                            step_me = ''
                                                                        else:
                                                                            step_status = 'Complete'
                                                                            step_me = ''
                                                                    except Exception as e:
                                                                        step_status = 'Incomplete'
                                                                        step_me = ''
                                                                elif step_me == 'Incomplete' or step_me == 'Pending':

                                                                    list_checknextstep = []
                                                                    nn = index_mystep
                                                                    try:
                                                                        while(nn > 0):
                                                                            nn = nn - 1
                                                                            list_checknextstep.append(sum_status_step[nn])
                                                                        # for uu in range(index_mystep,0):
                                                                        #     print(sum_status_step[uu])

                                                                        # print(list_checknextstep,'list_checknextstep')
                                                                        if 'Reject' in list_checknextstep:
                                                                            step_status = 'Reject'
                                                                            step_me = ''
                                                                        elif 'Incomplete' in list_checknextstep or 'Pending' in list_checknextstep:
                                                                            step_status = 'Wait__'
                                                                            step_me = ''
                                                                        elif 'Complete' in list_checknextstep or 'Approve' in list_checknextstep:
                                                                            step_status = 'Incomplete_1'
                                                                            step_me = ''

                                                                        # else:
                                                                        #     step_status = 'Complete'
                                                                        #     step_me = ''
                                                                    except Exception as e:
                                                                        step_status = 'Incomplete'
                                                                        step_me = ''
                                                                print(step_status)
                                                                arr_step_info.append(step_status)
                                                    except Exception as e:
                                                        step_before = ''
                                                        print(str(e))
                                        else:
                                            if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
                                                # print(sum_status_step)
                                                if step_before == '':
                                                    try:
                                                        if l == 0:
                                                            list_checknextstep = []
                                                            for uy in range(len(sum_status_step)):
                                                                step_me = sum_status_step[uy]
                                                                index_mystep = index_mystep
                                                                if step_me == 'Reject':
                                                                    step_status = 'Reject'
                                                                    step_me = ''
                                                                elif step_me == 'Incomplete' or step_me == 'Pending':
                                                                    step_status = 'Incomplete_1'
                                                                    step_me = ''
                                                                elif step_me == 'Complete' or step_me == 'Approve':
                                                                    step_status = 'Complete'
                                                                    step_me = ''
                                                                    # try:
                                                                    #     for uu in range(index_mystep,len(sum_status_step),1):
                                                                    #         list_checknextstep.append(sum_status_step[uu])
                                                                    #     # print(list_checknextstep,'list_checknextstep')
                                                                    #     if 'Reject' in list_checknextstep:
                                                                    #         step_status = 'Reject'
                                                                    #         step_me = ''
                                                                    #     elif 'Complete' in list_checknextstep or 'Approve' in list_checknextstep:
                                                                    #         step_status = 'Complete'
                                                                    #         step_me = ''
                                                                    #     elif 'Incomplete' in list_checknextstep or 'Pending' in list_checknextstep:
                                                                    #         step_status = 'Incomplete'
                                                                    #         step_me = ''

                                                                    # except Exception as e:
                                                                    #     step_status = 'Incomplete'
                                                                    #     step_me = ''
                                                            print(step_status)
                                                            # arr_step_info.append(step_me)
                                                            # arr_step_info.append(step_before)
                                                            arr_step_info.append(step_status)
                                                            print(step_status)
                                                        else:
                                                            list_checknextstep = []
                                                            step_status = ''
                                                            # print(step_status)
                                                            for uy in range(len(sum_status_step)):
                                                                step_me = sum_status_step[uy]
                                                                index_mystep = index_mystep
                                                                # print(step_me)
                                                                if step_me == 'Reject':
                                                                    step_status = 'Reject'
                                                                    step_me = ''
                                                                elif step_me == 'Complete' and step_me == 'Approve':
                                                                    try:

                                                                        list_checknextstep = []
                                                                        for uu in range(index_mystep,len(sum_status_step),1):
                                                                            list_checknextstep.append(sum_status_step[uu])
                                                                        # print(list_checknextstep,'list_checknextstep')
                                                                        if 'Reject' in list_checknextstep:
                                                                            step_status = 'Reject'
                                                                            step_me = ''
                                                                        elif 'Incomplete' in list_checknextstep or 'Pending' in list_checknextstep:
                                                                            step_status = 'Incomplete'
                                                                            step_me = ''
                                                                        else:
                                                                            step_status = 'Complete'
                                                                            step_me = ''
                                                                    except Exception as e:
                                                                        step_status = 'Incomplete'
                                                                        step_me = ''
                                                                elif step_me == 'Incomplete' or step_me == 'Pending':

                                                                    list_checknextstep = []
                                                                    nn = index_mystep
                                                                    try:
                                                                        while(nn > 0):
                                                                            nn = nn - 1
                                                                            list_checknextstep.append(sum_status_step[nn])
                                                                        # for uu in range(index_mystep,0):
                                                                        #     print(sum_status_step[uu])

                                                                        # print(list_checknextstep,'list_checknextstep')
                                                                        if 'Reject' in list_checknextstep:
                                                                            step_status = 'Reject'
                                                                            step_me = ''
                                                                        elif 'Incomplete' in list_checknextstep or 'Pending' in list_checknextstep:
                                                                            step_status = 'Wait__'
                                                                            step_me = ''
                                                                        elif 'Complete' in list_checknextstep or 'Approve' in list_checknextstep:
                                                                            step_status = 'Incomplete_1'
                                                                            step_me = ''

                                                                        # else:
                                                                        #     step_status = 'Complete'
                                                                        #     step_me = ''
                                                                    except Exception as e:
                                                                        step_status = 'Incomplete'
                                                                        step_me = ''
                                                                # print(step_status)
                                                                arr_step_info.append(step_status)
                                                    except Exception as e:
                                                        exc_type, exc_obj, exc_tb = sys.exc_info()
                                                        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                                                        print(exc_type, fname, exc_tb.tb_lineno)
                                                        step_before = ''
                                                        arr_step_info.append(step_before)
                                                        print(str(e))

                        # print(arr_step_info)
                        # print(sid_list_email[n])

                        if 'Reject' in arr_step_info:
                            res_status_file = 'R'
                            res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                        elif 'Incomplete_1' in arr_step_info or 'Pending_1' in arr_step_info:
                            res_status_file = 'W'
                            res_status_file_string = 'รออนุมัติ'
                        elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                            res_status_file = 'N'
                            res_status_file_string = 'กำลังดำเนินการ'
                        elif 'Wait__' in arr_step_info:
                            res_status_file = 'Z'
                            res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                        elif 'Waitting' in arr_step_info:
                            res_status_file = 'W'
                            res_status_file_string = 'รออนุมัติ'
                        else:
                            res_status_file_string = 'อนุมัติแล้ว'
                        if res_status_file == 'W':
                            statusFile_count_wait = statusFile_count_wait + 1
                        elif res_status_file == 'Y':
                            statusFile_count_approve = statusFile_count_approve + 1
                        elif res_status_file == 'R':
                            statusFile_count_reject = statusFile_count_reject + 1
                        else:
                            statusFile_count_pendding = statusFile_count_pendding + 1
                        result_SenderDetails = paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_list_email[n]).first()
                        if result_SenderDetails !=None:
                            file_name = result_SenderDetails.file_name
                            dateTime_String = result_SenderDetails.send_time
                            trackingCode = result_SenderDetails.tracking_id
                            sender_name = result_SenderDetails.sender_name
                            sender_email = result_SenderDetails.sender_email
                        result_DetailsDocument = paper_lessdocument.query.filter(paper_lessdocument.step_id==sid_list_email[n]).first()
                        if result_DetailsDocument != None:
                            if result_DetailsDocument.attempted_folder != None:
                                attempted_folder = result_DetailsDocument.attempted_folder
                                status_attempted_folder = True
                            else:
                                attempted_folder = None
                                status_attempted_folder = False
                            documentsign_page_options = result_DetailsDocument.sign_page_options
                            if result_DetailsDocument.urgent_type != None:
                                documentUrgentType = result_DetailsDocument.urgent_type
                                if documentUrgentType == 'I':
                                    documentUrgentString = 'ด่วนมาก'
                                elif documentUrgentType == 'U':
                                    documentUrgentString = 'ด่วน'
                                elif documentUrgentType == 'M':
                                    documentUrgentString = 'ปกติ'
                            if result_DetailsDocument.documentJson != None:
                                documentJson_result = eval(result_DetailsDocument.documentJson)
                                documentName = documentJson_result['document_name']
                                documentType = documentJson_result['document_type']
                            else:
                                documentName = None
                                documentType = None
                            document_Id = result_DetailsDocument.document_id
                        # th_dateTime_1 = convert_datetime_TH_1(int(dateTime_String.timestamp()))
                        th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                        ts = int(time.time())
                        date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                        year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                        datetime_display = int(dateTime_String.timestamp())
                        date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                        yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                        time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                        old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                        if date_time_today == date_time_db:
                            date_display_show = time_show_db
                        else:
                            if year_today == yar_db:
                                date_display_show = convert_datetime_TH_2_display(datetime_display)
                            else:
                                date_display_show = old_year
                        sid_code_sha512 = hashlib.sha512(str(sid_list_email[n]).encode('utf-8')).hexdigest()
                        list_arr.append({
                            'paperless_Code':sid_code_sha512,
                            'document_name':documentName,
                            'document_type':documentType,
                            'document_urgent':documentUrgentType,
                            'document_urgent_string':documentUrgentString,
                            'dateTime_String':str(dateTime_String).split('+')[0],
                            'dateTime_String_TH_1':th_dateTime_2,
                            'dateTime_display':date_display_show,
                            'document_id':document_Id,
                            'stamp_all':documentsign_page_options,
                            'status_attempted':status_attempted_folder,
                            'code_attempted':attempted_folder,
                            # 'dateTime_String_TH_2':th_dateTime_2,
                            'date_String':str(dateTime_String).split(' ')[0],
                            'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                            'status_file_code':res_status_file,
                            'status_file_string':res_status_file_string,
                            'dateTime':int(dateTime_String.timestamp()),
                            'tracking_id':trackingCode,
                            'sender_name':sender_name,
                            'sender_email':sender_email,
                            'file_name':file_name
                        })
                json_Data['Document_Status_Details']  = {
                    'Incomplete_Pendding':statusFile_count_pendding,
                    'Complete_Approve':statusFile_count_approve,
                    'Reject':statusFile_count_reject,
                    'Wait':statusFile_count_wait
                }
                list_arr = sorted(list_arr, key=lambda k: k['dateTime'], reverse=True)
                json_Data['Document_Details'] = list_arr
                return {'result':'OK','messageText':json_Data,'status_Code':200,'messageER':None}
            except Exception as ex:
                exc_type, exc_obj, exc_tb = sys.exc_info()
                fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                print(exc_type, fname, exc_tb.tb_lineno)
                return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}
        except Exception as e:
            print(str(e))

    def select_for_admin_data_user_v2(self,tax_id):
        self.tax_id = tax_id
        try:
            json_result = {}
            list_user_tmp = []
            tmp_list_biz_info = []
            tmp_list_username = []
            count_tmp_user = 0
            count_tmp_user_status_active = 0
            count_tmp_user_status_inactive = 0
            account_id = None
            last_used = None
            tmp_status_online = None
            tmp_emailone = None
            tmp_account_id = None
            tmp_last_login = None
            name_surname = None
            tq = db.session.query(\
                paper_lessbizLogin,\
                )\
                .all()
            # print(tq)
            # return ''
            for n in range(len(tq)):
                account_id = None
                last_used = None
                tmp_status_online = None
                tmp_emailone = None
                tmp_account_id = None
                tmp_last_login = None
                name_surname = None
                tmpjson = tq[n].__dict__
                del tmpjson['_sa_instance_state']
                tmp_username = tmpjson['username']
                tmp_biz_info = eval(tmpjson['biz_information'])
                query_temp = db.session.query(\
                    paper_lesstoken_required,
                    paper_lesslogin
                    )\
                    .join(paper_lesslogin,paper_lesslogin.username==paper_lesstoken_required.username)\
                    .filter(paper_lesstoken_required.username==tmp_username,paper_lesstoken_required.updatetime!=None)\
                    .order_by(desc(paper_lesstoken_required.updatetime))\
                    .limit(1)\
                    .first()
                
                # print(query_temp01)
                if query_temp != None:
                    tmpjson_account = query_temp._asdict()
                    tmp_tokenreq = tmpjson_account['paper_lesstoken_required']
                    tmp_login = tmpjson_account['paper_lesslogin']
                    if tmp_tokenreq != None:
                        tmp_json_tokenreq = tmp_tokenreq.__dict__
                        del tmp_json_tokenreq['_sa_instance_state']
                        tmp_emailone = tmp_json_tokenreq['email_thai']
                        tmp_status_online = tmp_json_tokenreq['status_online']
                        last_used = str(tmp_json_tokenreq['updatetime']).split('+')[0]
                    if tmp_login != None:
                        tmp_json_login = tmp_login.__dict__
                        del tmp_json_login['_sa_instance_state']
                        tmp_last_login = str(tmp_json_login['access_time']).split('+')[0]
                        tmp_account_id = tmp_json_login['account_id']
                        try:
                            name_surname = eval(tmp_json_login['citizen_data'])['first_name_th'] + ' ' + eval(tmp_json_login['citizen_data'])['last_name_th']
                        except Exception as e:
                            name_surname = None
                        # tmp_list_biz_info.append(tmp_json_tokenreq)
                # query_temp = paper_lesstoken_required.query.filter(paper_lesstoken_required.username==tmp_username,paper_lesstoken_required.updatetime!=None).order_by(desc(paper_lesstoken_required.updatetime)).first()
                # if query_temp01 != None:
                    # print(query_temp01)
                    
                    # tmp_list_biz_info[c]['last_used'] = last_used
                    # tmp_list_biz_info[c]['last_status'] = last_status
            # return ''
                # tmp_biz_information = tmpjson['biz_information']
                # tmp_account_id = tmpjson['account_id']
                if tmp_biz_info != None:
                    tmp_arr = []
                    if type(tmp_biz_info) is not list:
                        tmp_arr.append(tmp_biz_info)
                        tmp_biz_info = tmp_arr
                    if len(tmp_biz_info) != 0:
                        for yu in range(len(tmp_biz_info)):
                            tmp_bizgetbiz = tmp_biz_info[yu]
                    # if 'getbiz' in tmp_bizgetbiz:
                    #     print(tmp_biz_info[yu]['getbiz'])
                    
                info = {
                    'biz_info':tmp_biz_info,
                    'username':tmp_username,
                    'email_one':tmp_emailone,
                    'last_login':tmp_last_login,
                    'last_used':last_used,
                    'last_status':tmp_status_online,
                    'account_id':tmp_account_id,
                    'name_surname':name_surname
                }
                tmp_list_biz_info.append(info)
            return {'result':'OK','messageText':tmp_list_biz_info}
            data_result = {
                "user_detail":list_user_tmp,
                "user_count":count_tmp_user,
                "user_count_status_active":count_tmp_user_status_active,
                "user_count_status_inactive":count_tmp_user_status_inactive
            }
            return {'result':'OK','messageText':data_result}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageER':str(e)}

    def select_for_admin_data_user(self,tax_id):
        self.tax_id = tax_id
        try:
            json_result = {}
            list_user_tmp = []
            tmp_list_biz_info = []
            tmp_list_username = []
            count_tmp_user = 0
            count_tmp_user_status_active = 0
            count_tmp_user_status_inactive = 0
            account_id = None
            for i  in paper_lessbizLogin.query.filter().all():
                last_used = None
                status_online = 'INACTIVE'
                username_tmp = i.username
                biz_info = eval(i.biz_information)
                last_login = str(i.update_time).split('+')[0]
                account_id = i.account_id
                tmp_list_biz_info.append({'biz_info':biz_info,'username':username_tmp,'last_login':last_login,'last_used':last_used,'last_status':status_online,'account_id':account_id})
            # print ('acc_id',tmp_list_biz_info)
            for c in range(len(tmp_list_biz_info)):
                result_use_user = paper_lesstoken_required.query.filter(paper_lesstoken_required.username==username_tmp).order_by(desc(paper_lesstoken_required.updatetime)).first()
                if result_use_user != None:
                    if result_use_user.updatetime != None:
                        last_used = str(result_use_user.updatetime).split('+')[0]
                        last_status = result_use_user.status_online
                        tmp_list_biz_info[c]['last_used'] = last_used
                        tmp_list_biz_info[c]['last_status'] = last_status
            for u in range(len(tmp_list_biz_info)):
                tmp_list_taxId = []
                tmp_list_user = []
                tmp_biz_info = tmp_list_biz_info[u]['biz_info']
                username = tmp_list_biz_info[u]['username']
                acc_id = tmp_list_biz_info[u]['account_id']
                result_name_surname = paper_lesslogin.query.filter(paper_lesslogin.username==username).first()
                if result_name_surname != None:
                    if result_name_surname.citizen_data != None:
                        try:
                            name_surname = eval(result_name_surname.citizen_data)['first_name_th'] + ' ' + eval(result_name_surname.citizen_data)['last_name_th']
                        except Exception as e:
                            name_surname = None
                tmp_last_login = tmp_list_biz_info[u]['last_login']
                tmp_last_used = tmp_list_biz_info[u]['last_used']
                tmp_last_status = tmp_list_biz_info[u]['last_status']
                if len(str(self.tax_id).replace(' ','')) != 0:
                    # print(tmp_biz_info)
                    if len(tmp_biz_info) != 0:
                        for z in range(len(tmp_biz_info)):
                            getbiz_info = tmp_biz_info[z]['getbiz'][0]
                            getrole_info = tmp_biz_info[z]['getrole'][0]
                            role_level = getrole_info['role_level']
                            try:
                                role_name = getrole_info['role_name']
                            except Exception as e:
                                role_name = getrole_info['name']
                            id_card_num_info = getbiz_info['id_card_num']
                            if len(str(self.tax_id).replace(' ','')) != 0:
                                if id_card_num_info not in tmp_list_taxId:
                                    if id_card_num_info == self.tax_id:
                                        tmp_list_taxId.append(id_card_num_info)
                                        list_user_tmp.append({'name_surname':name_surname,'username':username,'biz_tax_id':tmp_list_taxId,'biz_role_detail':[{'role_name':role_name,'role_level':role_level}],'last_login':tmp_last_login,'last_used':tmp_last_used,'last_status':tmp_last_status,'user_id':acc_id})
                                        count_tmp_user += 1
                                        if tmp_last_status == 'ACTIVE':
                                            count_tmp_user_status_active += 1
                                        else:
                                            count_tmp_user_status_inactive += 1
                else:
                    if len(tmp_biz_info) != 0:
                        for z in range(len(tmp_biz_info)):
                            getbiz_info = tmp_biz_info[z]['getbiz'][0]
                            getrole_info = tmp_biz_info[z]['getrole'][0]
                            role_level = getrole_info['role_level']
                            try:
                                role_name = getrole_info['role_name']
                            except Exception as e:
                                role_name = getrole_info['name']
                            id_card_num_info = getbiz_info['id_card_num']
                            if id_card_num_info not in tmp_list_taxId:
                                tmp_list_user.append(username)
                                tmp_list_taxId.append(id_card_num_info)
                                if username not in tmp_list_username:
                                    tmp_list_username.append(username)
                                    list_user_tmp.append({'name_surname':name_surname,'username':username,'biz_tax_id':tmp_list_taxId,'biz_role_detail':[{'role_name':role_name,'role_level':role_level}],'last_login':tmp_last_login,'last_used':tmp_last_used,'last_status':tmp_last_status,'user_id':acc_id})
                                    count_tmp_user += 1
                                    if tmp_last_status == 'ACTIVE':
                                        count_tmp_user_status_active += 1
                                    else:
                                        count_tmp_user_status_inactive += 1
                                else:
                                    for zz in range(len(list_user_tmp)):
                                        check_username = list_user_tmp[zz]['username']
                                        tmp_role_detail = list_user_tmp[zz]['biz_role_detail']
                                        if username == check_username:
                                            tmp_role_detail.append({'role_name':role_name,'role_level':role_level})
                    else:
                        list_user_tmp.append({'name_surname':name_surname,'username':username,'biz_tax_id':[],'biz_role_detail':[{'role_name':None,'role_level':None}],'last_login':tmp_last_login,'last_used':tmp_last_used,'last_status':tmp_last_status,'user_id':acc_id})
                        count_tmp_user += 1
                        if tmp_last_status == 'ACTIVE':
                            count_tmp_user_status_active += 1
                        else:
                            count_tmp_user_status_inactive += 1

            data_result = {
                "user_detail":list_user_tmp,
                "user_count":count_tmp_user,
                "user_count_status_active":count_tmp_user_status_active,
                "user_count_status_inactive":count_tmp_user_status_inactive
            }
            return {'result':'OK','messageText':data_result,'status_Code':200,'messageER':None}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageER':str(e)}


    def select_file_sign_last_to_email(self,sid):
        self.sid = sid
        try:
            sql = ''' 
                SELECT
                    tb_send_detail.ID AS "id",
                    tb_send_detail.file_name AS "file_name",
                    tb_send_detail.file_id AS "file_id",
                    tb_pdf_storage.string_sign AS "string_sign",
                    tb_pdf_storage.string_pdf AS "string_pdf" 
                FROM
                    tb_send_detail
                    INNER JOIN tb_pdf_storage ON tb_send_detail.file_id = tb_pdf_storage.fid 
                WHERE
                    tb_send_detail.step_data_sid = :sidcode
            '''
            connection = slave.connect()
            result = connection.execute(text(sql),sidcode=self.sid)
            connection.close()
            resultQuery = [dict(row) for row in result]
            if len(resultQuery) != 0:
                data = resultQuery[0]
                if data['string_sign'] != None:
                    return {'result':'OK','messageText':data['string_sign'],'file_name':data['file_name']}
                else:
                    return {'result':'OK','messageText':data['string_pdf'],'file_name':data['file_name']}
            else:
                return {'result':'ER'}



            # json_result = {}
            # result_fid = paper_lesssender.query.filter(paper_lesssender.step_data_sid==self.sid)
            # print(result_fid)
            # return ''
            # if result_fid != None:
            #     result_base64 = paper_lesspdf.query.filter(paper_lesspdf.fid==result_fid.file_id).first()
            #     if result_base64 != None:
            #         if result_base64.string_sign != None:
            #             return {'result':'OK','messageText':result_base64.string_sign,'file_name':result_fid.file_name}
            #         else:
            #             return {'result':'OK','messageText':result_base64.string_pdf,'file_name':result_fid.file_name}
            #     else:
            #         return {'result':'ER'}
            # else:
            #     return {'result':'ER'}
        except Exception as e:
            return {'result':'ER','messageER':str(e)}

    def select_to_report_sum(self,date_from,date_to,document_type):
        try:
            self.date_from = date_from
            self.date_to = date_to
            self.document_type = document_type

            count_index = 1
            tmp_select_list = []
            tmp_count = 1
            list_arr = []
            for result_select in paper_lessdocument.query.filter(paper_lessdocument.documentType==self.document_type).all():

                json_result = {}
                json_result['sid'] = result_select.step_id
                json_result['document_id'] = result_select.document_id
                json_result['count_index'] = count_index
                list_arr.append(json_result)
                if tmp_count == 40:
                    tmp_select_list.append(list_arr)
                    tmp_count = 0
                    list_arr = []
                else:
                    tmp_select_list.append(list_arr)
                count_index = count_index + 1
                tmp_count = tmp_count + 1

            return {'result':'OK','messageText':tmp_select_list}
                # print(result_select)
        except Exception as e:
            pass
    def select_hash_sid_512(self):
        try:
            for i in paper_lesstrack.query.filter().all():
                i.hash_sid_code = hashlib.sha512(str(i.step_data_sid).encode('utf-8')).hexdigest()
                db.session.commit()
            return {'result':'OK'}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER'}

    def select_to_recp_table(self):
        try:
            for i in paper_lessdatastep.query.filter().all():
                datajson_info = eval(i.data_json)
                sid_text = i.sid
                if 'step_num' in datajson_info:
                    arr_email = []
                    list_res = []
                    for u in range(len(datajson_info['step_detail'])):
                        one_email = datajson_info['step_detail'][u]['one_email']
                        arr_email.append(one_email)
                    select_result = paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_text).first()
                    if select_result != None:
                        if select_result.recipient_email == None:
                            select_result.recipient_email = str(arr_email)
                    # db.session.add(insert_result)
                    # db.session.flush()
                    db.session.commit()
                    list_res.append({'email_list':arr_email,'sid':sid_text})
                else:
                    arr_email = []
                    list_res = []
                    for y in range(len(datajson_info)):
                        for u in range(len(datajson_info[y]['step_detail'])):
                            one_email = datajson_info[y]['step_detail'][u]['one_email']
                            arr_email.append(one_email)
                    select_result = paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_text).first()
                    if select_result != None:
                        if select_result.recipient_email == None:
                            select_result.recipient_email = str(arr_email)
                    db.session.commit()
                    list_res.append({'email_list':arr_email,'sid':sid_text})
            return {'result':'OK'}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER'}

    def select_checkBizPaperless(self,tax_id):
        self.tax_id = tax_id
        try:
            resultselect_ = paper_lessbizPaperless.query.filter(paper_lessbizPaperless.tax_id==self.tax_id).first()
            if resultselect_ != None:
                return {'result':'OK','messageText':[{"theme_color":resultselect_.theme_color,'path_logo':resultselect_.path_logo}]}
            else:
                return {'result':'ER','messageText':None}
        except Exception as e:
            return {'result':'ER','messageText':None,'messageER':'notfound data' + str(e)}

    def select_checkBizPaperless_v2(self,tax_id):
        self.tax_id = tax_id
        try:
            with engine.connect() as connection:
                result = connection.execute(text('SELECT "tb_bizPaperless"."tax_id","tb_bizPaperless"."theme_color" \
                ,"tb_bizPaperless".path_logo,"tb_bizPaperless"."status","tb_bizPaperless"."transactionMax","tb_bizPaperless"."storageMax","tb_bizPaperless"."transactionNow","tb_bizPaperless"."storageNow"\
                FROM "tb_bizPaperless" WHERE "tb_bizPaperless"."tax_id"=:val'),val=self.tax_id)
                connection.close()
            tmp_query = [dict(row) for row in result]
            # print('tmp_query01',tmp_query)
            if tmp_query != None:
                return {'result':'OK','messageText':tmp_query[0]}
            else:
                return {'result':'ER','messageText':None}
        except Exception as e:
            print(str(e))
            return {'result':'ER','messageText':None,'messageER':'notfound data' + str(e)}
            
    def select_pdfstring_to_fileid(self,fileid):
        self.fileid = fileid
        try:
            resultselect_ = paper_lesspdf.query.filter(paper_lesspdf.fid==self.fileid).first()
            if resultselect_ != None:
                if resultselect_.string_sign != None:
                    return {'result':'OK','messageText':{'pdf_string':resultselect_.string_sign}}
                else:
                    return {'result':'OK','messageText':{'pdf_string':resultselect_.string_pdf}}
            else:
                return {'result':'OK','messageText':{'pdf_string':None}}
        except Exception as e:
            return {'result':'ER','messageText':None,'messageER':'notfound data' + str(e)}

    def select_get_action_and_status(self,action_name):
        self.action_name = action_name

        try:
            resultselect_ = paper_lessaction_status.query.filter(paper_lessaction_status.name_action==self.action_name).first()
            if resultselect_ != None:
                return {'result':'OK','messageText':{'status':resultselect_.status}}
            else:
                return {'result':'OK','messageText':{'status':False}}
        except Exception as e:
            return {'result':'ER','messageText':None,'messageER':'notfound data' + str(e)}


    def select_attm_file_v1_for_chat_api_to_robot(self,sidcode):
        self.sidcode = sidcode
        folder_name = None
        try:
            resultselect_foldername = paper_lessdocument.query.filter(paper_lessdocument.step_id==self.sidcode).first()
            result_sender_file = paper_lesssender.query.filter(paper_lesssender.step_data_sid==self.sidcode).first()
            if resultselect_foldername != None:
                folder_name = resultselect_foldername.attempted_folder
                resultselect_file_att = paper_lesstransactionfile.query.filter(paper_lesstransactionfile.folder_name==folder_name).first()
                if resultselect_file_att != None:
                    json_data_eval = eval(resultselect_file_att.json_data)
                    if result_sender_file != None:
                        return {'result':'OK','messageText':{
                        'json_data':json_data_eval,
                        'pathfolder':resultselect_file_att.pathfolder,
                        'sender_username':result_sender_file.send_user,
                        'document_Id':resultselect_foldername.document_id,
                        'document_Type':str(resultselect_foldername.documentType).lower(),
                        'folder_name':folder_name
                        },'status_Code':200,'messageER':None}
                else:
                    return {'result':'ER','messageText':{
                        'json_data':None,
                        'pathfolder':None,
                        'sender_username':result_sender_file.send_user,
                        'document_Id':resultselect_foldername.document_id,
                        'document_Type':str(resultselect_foldername.documentType).lower(),
                        'folder_name':folder_name
                        },'status_Code':200,'messageER':None}
        except Exception as e:
            return {'result':'ER','messageText':[],'messageER':'notfound data' + str(e)}

    def select_recipient_chat_v3_one(self,emailUser,sidcode):
        self.sidcode = sidcode
        self.emailUser = emailUser
        arr_tmp = []
        try:
            tmp_profile = db.session.query(
                paper_lessuserProfile
                )\
                .filter(paper_lessuserProfile.p_emailthai == self.emailUser)\
                .first()
            tmp_sign = ''
            if tmp_profile != None:
                tmp_sign = tmp_profile.p_sign
                if tmp_sign == '':
                    tmp_sign = ''
                # print(tmp_profile)
            tmp_query = db.session.query(
                    paper_lessdatastep,
                    paper_lesssender,
                    paper_lessdocument,
                    paper_lesspdf,
                    # paper_lessstep
                )\
                .join(paper_lesssender,paper_lesssender.step_data_sid==paper_lessdatastep.sid)\
                .join(paper_lessdocument,paper_lessdocument.step_id==paper_lessdatastep.sid)\
                .join(paper_lesspdf,paper_lesspdf.fid==paper_lessdocument.fileid)\
                .filter(paper_lessdatastep.sid==self.sidcode)\
                .all()
            arr_step_info = []
            list_step_email = []
            sign_detail = []
            sign_data = []
            tmp_status_file_code = 'Y'
            tmp_status_file_string = ''
            list_sign_info = []
            require_sign_info = []
            sign_detail_require = []
            tmp_tempname = ''
            tmp_condition = ''
            for n in range(len(tmp_query)):
                for u in range(len(tmp_query[n])):
                    if u == 1:
                        tmpjson_sender = tmp_query[n][u].__dict__
                        tmp_datetime = tmpjson_sender['send_time']
                        tmp_step_code = tmpjson_sender['step_code']                        
                        if str(tmp_step_code).replace(' ','') != '':
                            result_template = paper_lessstep.query.filter(paper_lessstep.step_Code==tmp_step_code,paper_lessstep.status=='ACTIVE').first()
                            if result_template != None:
                                tmp_tempname = str(result_template.step_Name)
                                tmp_condition = str(result_template.condition_temp)
                        document_timestamp = int(tmp_datetime.timestamp())
                        tmp_datetime_display = convert_datetime_TH_2_display_sendTime(document_timestamp)
                        try:
                            tmp_email_center = eval(tmpjson_sender['email_center'])
                        except Exception as e:
                            tmp_email_center = tmpjson_sender['email_center']
                    if u == 0:
                        tmpjson = tmp_query[n][u].__dict__
                        del tmpjson['_sa_instance_state']
                        step_infomation = eval(tmpjson['data_json'])
                        tmp_file_user_status_detail = []
                        tmp_sign_detail_list = []
                        tmp_list_step_infomation = []
                        # print(step_infomation)
                        if 'step_num' in step_infomation:
                            tmp_step_info = [eval(tmpjson['data_json'])]
                        else:
                            tmp_step_info = eval(tmpjson['data_json'])
                        if 'step_num' in step_infomation:
                            tmp_list_step_infomation.append(step_infomation)
                            step_infomation = tmp_list_step_infomation
                        # if 'step_num' in step_infomation:                            
                        #     status_step_sum = ''
                        #     sum_status_step_list = []
                        #     list_check_step = []
                        #     json_step_info_2 = {}
                        #     step_list_data = []
                        #     step_ = step_infomation
                        #     step_num = step_infomation['step_num']
                        #     time_success = None
                        #     step_time_1 = []
                        #     sendtime = tmpjson['upload_time']
                        #     # json_data_res['step_info'] = [eval(result_Select_step.data_json)]
                        #     json_step_info_2['step_status'] = ''
                        #     if 'signpad' in step_:
                        #         tmp_sign_pad = step_['signpad']
                        #     else:
                        #         tmp_sign_pad = None
                        #     for u in range(len(step_['step_detail'])):
                        #         step_2 = step_['step_detail'][u]
                        #         for k in range(len(step_2['activity_code'])):
                        #             if step_2['activity_code'][k] == 'A03':
                        #                 json_step_info = {}
                        #                 json_step_info['activity_status'] = step_2['activity_status'][k]
                        #                 json_step_info['one_email'] = str(step_2['one_email']).replace(' ','')
                        #                 query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(step_2['one_email'])).all()
                        #                 #process หา timeline
                        #                 if (step_2['activity_status'][k] == 'Complete' or step_2['activity_status'][k] =='Reject' or step_2['activity_status'][k] == 'Approve'):
                        #                     t1 = str(step_2['activity_time'][k])
                        #                     time_success = change_to_Timestamp(t1)
                        #                     step_time_1.append(time_success)
                        #                 #สิ้นสุดการหา timeline
                        #                 if len(query_name_account) != 0:
                        #                     tmp_account_name = eval(query_name_account[0].citizen_data)
                        #                     try:
                        #                         tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                        #                     except Exception as e:
                        #                         tmp_account_name= step_2['one_email']
                        #                 else:
                        #                     tmp_account_name = step_2['one_email']
                        #                 json_step_info['account_name'] = tmp_account_name
                        #                 json_step_info['step_num'] = step_num

                        #                 list_check_step.append(json_step_info['activity_status'])
                        #                 step_list_data.append(json_step_info)
                        #         timeline_ = getTimeline(sendtime,step_time_1)
                        #         tmp_timeline = timeline_
                        #         list_timeline = getlistTimeline(sendtime,step_time_1)
                        #         tmp_timeline_list = list_timeline
                        #         json_step_info_2['step_info'] = step_list_data
                        #     if json_step_info_2['step_status'] == '':
                        #         if 'Reject' in list_check_step:
                        #             json_step_info_2['step_status'] = 'Reject'
                        #             # sendtime = json_data_res['send_time']
                        #             timing_ = timing(time_success,sendtime)
                        #             tmp_timing = timing_
                        #         elif 'Approve' in list_check_step:
                        #             json_step_info_2['step_status'] = 'Complete'
                        #             # sendtime = json_data_res['send_time']
                        #             timing_ = timing(time_success,sendtime)
                        #             tmp_timing = timing_
                        #         elif 'Complete' in list_check_step:
                        #             json_step_info_2['step_status'] = 'Complete'
                        #             # sendtime = json_data_res['send_time']
                        #             timing_ = timing(time_success,sendtime)
                        #             tmp_timing = timing_
                        #         elif 'Incomplete' in list_check_step:
                        #             json_step_info_2['step_status'] = 'Incomplete'
                        #             now = datetime.datetime.now()
                        #             # sendtime = json_data_res['send_time']
                        #             timing_ = timing(datetime.datetime.timestamp(now),sendtime)
                        #             tmp_timing = timing_
                        #         elif 'Pending' in list_check_step:
                        #             json_step_info_2['step_status'] = 'Incomplete'
                        #             now = datetime.datetime.now()
                        #             # sendtime = json_data_res['send_time']
                        #             timing_ = timing(datetime.datetime.timestamp(now),sendtime)
                        #             tmp_timing = timing_
                        #         else:
                        #             json_step_info_2['step_status'] = 'Complete'
                        #             # sendtime = json_data_res['send_time']
                        #             timing_ = timing(time_success,sendtime)
                        #             tmp_timing = timing_

                        #     sum_status_step_list.append(json_step_info_2['step_status'])
                        #     tmp_file_user_status_detail.append(json_step_info_2)
                        #     if 'Reject' in sum_status_step_list:
                        #         status_step_sum = 'Reject'
                        #         for u in range(len(step_['step_detail'])):
                        #             step_2 = step_['step_detail'][u]
                        #             for k in range(len(step_2['activity_code'])):
                        #                 if self.emailUser == str(step_2['one_email']).replace(' ',''):
                        #                     tmp_file_user_status = 'Reject'
                        #                 # json_data_res['file_user_status'] = step_2['activity_status'][k]
                        #     elif 'Incomplete' in sum_status_step_list:
                        #         status_step_sum = 'Incomplete'
                        #         for u in range(len(step_['step_detail'])):
                        #             step_2 = step_['step_detail'][u]
                        #             if self.emailUser == str(step_2['one_email']).replace(' ',''):
                        #                 for k in range(len(step_2['activity_code'])):
                        #                     if step_2['activity_code'][k] == 'A03':
                        #                         tmp_file_user_status = step_2['activity_status'][k]
                        #     elif 'Pending' in sum_status_step_list:
                        #         status_step_sum = 'Incomplete'
                        #         for u in range(len(step_['step_detail'])):
                        #             step_2 = step_['step_detail'][u]
                        #             if self.emailUser == str(step_2['one_email']).replace(' ',''):
                        #                 for k in range(len(step_2['activity_code'])):
                        #                     if step_2['activity_code'][k] == 'A03':
                        #                         tmp_file_user_status = step_2['activity_status'][k]
                        #     else:
                        #         status_step_sum = 'Complete'
                        #         for u in range(len(step_['step_detail'])):
                        #             step_2 = step_['step_detail'][u]
                        #             if self.emailUser == str(step_2['one_email']).replace(' ',''):
                        #                 for k in range(len(step_2['activity_code'])):
                        #                     if step_2['activity_code'][k] == 'A03':
                        #                         tmp_file_user_status = step_2['activity_status'][k]
                        #     tmp_file_status_sum = status_step_sum
                        #     step_before = ''
                        #     tmp_list_1w = []
                            
                        #     for i in range(len(step_infomation)):
                        #         sign_json_info = {}
                        #         tmp_sign_list_info = []
                        #         step_ = step_infomation[i]
                        #         step_num = step_infomation[i]['step_num']
                        #         json_step_info_2['step_status'] = ''
                        #         for u in range(len(step_['step_detail'])):
                        #             step_2 = step_['step_detail'][u]
                        #             for k in range(len(step_2['activity_data'])): 
                        #                 if 'status' in step_2['activity_data'][k]:
                        #                     sign_json_info = step_2['activity_data'][k]
                        #                     tmp_sign_list_info.append(sign_json_info)
                        #                     sign_json_info = {
                        #                         'data':tmp_sign_list_info,
                        #                         'step_num':step_num
                        #                     }
                        #         tmp_sign_detail_list.append(sign_json_info)
                        #     list_sign_info.append({'data':tmp_list_1w,'step_num':tmp_step_num})
                        #     for s in range(len(step_['step_detail'])):
                        #         json_info_step2 = {}
                        #         for u in range(len(step_['step_detail'][s]['activity_code'])):
                        #             oneMail = str(step_['step_detail'][s]['one_email']).replace(' ','').lower()
                        #             if str(oneMail).replace(' ','').lower() == self.emailUser:
                        #                 if step_['step_detail'][s]['activity_code'][u] == 'A03':
                        #                     if step_before == '':
                        #                         try:
                        #                             if step_['step_detail'][s - 1]['activity_status'][u] == 'Complete':
                        #                                 step_before = 'Complete'
                        #                             elif step_['step_detail'][s - 1]['activity_status'][u] == 'Approve':
                        #                                 step_before = 'Complete'
                        #                             elif step_['step_detail'][s - 1]['activity_status'][u] == 'Reject':
                        #                                 step_before = 'Reject'
                        #                         except Exception as e:
                        #                             step_before = ''
                        #                     if step_before != 'Reject':
                        #                         if step_['step_detail'][s]['activity_status'][u] == 'Complete':
                        #                             step_status = 'Complete'
                        #                         elif step_['step_detail'][s]['activity_status'][u] == 'Approve':
                        #                             step_status = 'Complete'
                        #                         elif step_['step_detail'][s]['activity_status'][u] == 'Reject':
                        #                             step_status = 'Reject'
                        #                         else:
                        #                             try:
                        #                                 step_status  = 'Incomplete'
                        #                             except Exception as ex:
                        #                                 step_status = 'Incomplete'
                        #                     arr_step_info.append(step_status)
                        #                     arr_step_info.append(step_before)
                        #     if 'Reject' in arr_step_info:
                        #         res_status_file = 'R'
                        #         res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                        #     elif 'Complete' in arr_step_info:
                        #         res_status_file = 'Y'
                        #         res_status_file_string = 'อนุมัติแล้ว'
                        #     elif 'Waitting' in arr_step_info:
                        #         res_status_file = 'W'
                        #         res_status_file_string = 'รออนุมัติ'
                        #     elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                        #         res_status_file = 'W'
                        #         res_status_file_string = 'รออนุมัติ'
                        #     else:
                        #         res_status_file_string = 'อนุมัติแล้ว'
                        #     tmp_status_file_code = res_status_file
                        #     tmp_status_file_string = res_status_file_string
                        # else:
                        step_status = ''
                        res_status_file = 'Y'
                        step_before = ''
                        step_list_before = []
                        step_list_ = []
                        step_list_next = []
                        arr_step_totle = []
                        step_me = ''
                        step_sum_status = []
                        sum_status_step_list = []
                        list_check_step = []
                        step_list_data = []
                        max_step = (len(step_infomation))
                        sum_status_step = []
                        tmp_status_sum = []
                        arr_email_list = []
                        email_step_sum = []
                        email_one_sum = []
                        time_success = None
                        step_time_1 = []
                        sendtime = tmpjson['upload_time']
                        list_my_email = []
                        tmp_list_sign_id = []
                        for i in range(len(step_infomation)):
                            list_check_step = []
                            json_step_info_2 = {}
                            step_list_data = []
                            step_status = []
                            step_email = []
                            tmp_step_num = ''
                            step_ = step_infomation[i]
                            step_num = step_infomation[i]['step_num']
                            json_step_info_2['step_status'] = ''
                            tmp_step_detail = step_['step_detail']
                            for u in range(len(tmp_step_detail)):
                                tmp_arr_step_detail = tmp_step_detail[u]
                                tmp_status = tmp_arr_step_detail['activity_status']
                                tmp_code = tmp_arr_step_detail['activity_code']
                                tmp_activity_data = tmp_arr_step_detail['activity_data']
                                for js in range(len(tmp_activity_data)):
                                    if 'id' in tmp_activity_data[js]:
                                        tmp_list_sign_id.append(tmp_activity_data[js]['id'])
                                tmp_email = str(tmp_arr_step_detail['one_email']).replace(' ','').lower()
                                # print(tmp_email)
                                if tmp_email == self.emailUser:                                    
                                    tmp_step_num = u
                                    for hg in range(len(tmp_code)):
                                        if tmp_code[hg] == 'A03':
                                            sign_detail_require = []
                                            tmp_activity_data = tmp_arr_step_detail['activity_data'][hg]
                                            if 'status' in tmp_activity_data:
                                                if tmp_activity_data['status'] == 'incomplete' or tmp_activity_data['status'] == 'incomplate':
                                                    sign_detail_require.append(tmp_activity_data)
                                                    list_my_email.append(u)
                                    if 'step_sign' in  step_infomation[i]:
                                        if  step_infomation[i]['step_sign']['status'] == True:
                                            tmp_data_ssign = step_infomation[i]['step_sign']['data']
                                            for zy in range(len(tmp_data_ssign)):
                                                if 'step_index' in tmp_data_ssign[zy]: 
                                                    if len(tmp_data_ssign[zy]['step_index']) != 0:
                                                        # print(tmp_step_num , tmp_data_ssign[zy]['step_index'])
                                                        if tmp_step_num in tmp_data_ssign[zy]['step_index']:
                                                            if  tmp_data_ssign[zy]['status'] == 'incomplete':
                                                                sign_detail_require.append(tmp_data_ssign[zy])
                                                    else:
                                                        if 'id' in tmp_data_ssign[zy]:
                                                            if tmp_data_ssign[zy]['id'] not in tmp_list_sign_id:
                                                                if  tmp_data_ssign[zy]['status'] == 'incomplete':
                                                                    sign_detail_require.append(tmp_data_ssign[zy])
                                                        else:
                                                            sign_detail_require.append(tmp_data_ssign[zy])
                                    # print(sign_detail_require , step_num)
                                    info_step = {
                                        'data':sign_detail_require,
                                        'step_num':step_num
                                    }
                                    require_sign_info.append(info_step)
                                for s in range(len(tmp_code)):
                                    if tmp_code[s] == 'A03':
                                        step_status.append(tmp_status[s])
                                        step_email.append(tmp_email)
                                        email_one_sum.append(tmp_email)
                                        #process หา timeline
                                        if (tmp_arr_step_detail['activity_status'][s] == 'Complete' or tmp_arr_step_detail['activity_status'][s] =='Reject' or tmp_arr_step_detail['activity_status'][s] == 'Approve'):
                                            t1 = str(tmp_arr_step_detail['activity_time'][s])
                                            # print ('else activity_time',t1)
                                            time_success = change_to_Timestamp(t1)
                                            step_time_1.append(time_success)
                                        #สิ้นสุดการหา timeline
                                timeline_ = getTimeline(sendtime,step_time_1)
                                tmp_timeline = timeline_  
                                list_timeline = getlistTimeline(sendtime,step_time_1)
                                tmp_timeline_list = list_timeline
                            email_step_sum.append(step_email)
                            if 'Reject' in step_status:
                                tmp_status_sum.append('Reject')
                            elif 'Approve' in step_status:
                                tmp_status_sum.append('Complete')
                            elif 'Complete' in step_status:
                                tmp_status_sum.append('Complete')
                            elif 'Incomplete' in step_status:
                                tmp_status_sum.append('Incomplete')
                            elif 'Pending' in step_status:
                                tmp_status_sum.append('Incomplete')
                            else:
                                tmp_status_sum.append('Complete')
                        tmp_sign_pad = None
                        if self.emailUser in email_one_sum:
                            for zzi in range(len(step_infomation)):
                                list_check_step = []
                                json_step_info_2 = {}
                                step_list_data = []
                                step_status = []
                                step_ = step_infomation[zzi]
                                step_num = step_infomation[zzi]['step_num']
                                json_step_info_2['step_status'] = ''
                                tmp_step_detail = step_['step_detail']
                                
                                for zi in range(len(tmp_step_detail)):
                                    tmp_arr_step_detail_2 = tmp_step_detail[zi]
                                    oneMail = str(tmp_arr_step_detail_2['one_email']).replace(' ','').lower()
                                    
                                    tmp_step_me = int(step_num) - 1
                                    step_num_int2 = int(step_num)
                                    if 'Reject' in tmp_status_sum:
                                        arr_step_info.append('Reject')
                                    elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Incomplete':
                                        if self.emailUser not in arr_email_list:
                                            index_step_me = tmp_step_me
                                            if index_step_me != 0:
                                                while index_step_me > 0:
                                                    if len(arr_step_info) == 0:
                                                        index_step_me = index_step_me - 1
                                                        if tmp_status_sum[index_step_me] == 'Incomplete':
                                                            arr_step_info.append('Incomplete')
                                                        else:
                                                            if oneMail == self.emailUser:
                                                                if 'signpad' in step_:
                                                                    tmp_sign_pad = step_['signpad']
                                                                else:
                                                                    tmp_sign_pad = None
                                                            arr_step_info.append('Wait')
                                                        arr_email_list.append(self.emailUser)
                                                    else:
                                                        index_step_me = index_step_me - 1
                                                        continue
                                            else:
                                                if oneMail == self.emailUser:
                                                    if 'signpad' in step_:
                                                        tmp_sign_pad = step_['signpad']
                                                    else:
                                                        tmp_sign_pad = None
                                                arr_step_info.append('Wait')
                                        if oneMail == self.emailUser:
                                            if 'signpad' in step_:
                                                tmp_sign_pad = step_['signpad']
                                            else:
                                                tmp_sign_pad = None
                                    elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Complete':
                                        if self.emailUser not in arr_email_list:
                                            for nz in range(step_num_int2,len(tmp_status_sum),1):
                                                if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                    arr_step_info.append('Incomplete')
                                                elif self.emailUser not in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                    arr_step_info.append('Progress')
                                            arr_email_list.append(self.emailUser)
                                        if oneMail == self.emailUser:
                                            if 'signpad' in step_:
                                                tmp_sign_pad = step_['signpad']
                                            else:
                                                tmp_sign_pad = None
                            if 'Reject' in arr_step_info:
                                res_status_file = 'R'
                                res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                            elif 'Wait' in arr_step_info:
                                res_status_file = 'W'
                                res_status_file_string = 'รออนุมัติ'
                            elif 'Incomplete' in arr_step_info:
                                res_status_file = 'Z'
                                res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                            elif 'Progress' in arr_step_info:
                                res_status_file = 'N'
                                res_status_file_string = 'กำลังดำเนินการ'                    
                            elif arr_step_info.count('Incomplete') >= 2:
                                res_status_file = 'Z'
                                res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                            else:
                                res_status_file = 'Y'
                                res_status_file_string = 'อนุมัติแล้ว'
                            tmp_status_file_code = res_status_file
                            tmp_status_file_string = res_status_file_string
                            status_step_sum = ''
                            sum_status_step_list = []
                            alr_mail = []
                            # json_data_res['step_info'] = eval(result_Select_step.data_json)
                            for i in range(len(step_infomation)):
                                sign_json_info = {}
                                tmp_sign_list_info = []
                                step_ = step_infomation[i]
                                step_num = step_infomation[i]['step_num']
                                json_step_info_2['step_status'] = ''
                                if 'step_sign' in step_:
                                    tmp_stepsign = step_['step_sign']
                                    tmp_status_stepsign = tmp_stepsign['status']
                                    if tmp_status_stepsign == True:
                                        tmp_data_stepsign = tmp_stepsign['data']
                                        for y in range(len(tmp_data_stepsign)):
                                            step_signning = tmp_data_stepsign[y]
                                            if 'id' in step_signning:
                                                if step_signning['id'] not in tmp_list_sign_id:
                                                    tmp_sign_list_info.append(step_signning)
                                            else:
                                                tmp_sign_list_info.append(step_signning)
                                for u in range(len(step_['step_detail'])):
                                    step_2 = step_['step_detail'][u]
                                    for k in range(len(step_2['activity_data'])): 
                                        if 'status' in step_2['activity_data'][k]:
                                            sign_json_info = step_2['activity_data'][k]
                                            tmp_sign_list_info.append(sign_json_info)
                                sign_json_info = {
                                    'data':tmp_sign_list_info,
                                    'step_num':step_num
                                }
                                tmp_sign_detail_list.append(sign_json_info)
                            for i in range(len(step_infomation)):
                                list_check_step = []
                                json_step_info_2 = {}
                                step_list_data = []
                                step_ = step_infomation[i]
                                step_num = step_infomation[i]['step_num']
                                json_step_info_2['step_status'] = ''
                                for u in range(len(step_['step_detail'])):
                                    step_2 = step_['step_detail'][u]
                                    for k in range(len(step_2['activity_code'])):
                                        if step_2['activity_code'][k] == 'A03':
                                            tmp_one_email = str(step_2['one_email']).replace(' ','').lower()
                                            if self.emailUser == tmp_one_email:
                                                if self.emailUser not in alr_mail:

                                                    # print(alr_mail ,step_2['activity_status'][k])
                                                    if step_2['activity_status'][k] == 'Complete':
                                                        # alr_mail.append(step_2['one_email'])
                                                        tmp_file_user_status = step_2['activity_status'][k]
                                                    elif step_2['activity_status'][k] == 'Approve':
                                                        # alr_mail.append(step_2['one_email'])
                                                        tmp_file_user_status = step_2['activity_status'][k]
                                                    else:
                                                        alr_mail.append(step_2['one_email'])
                                                        tmp_file_user_status = step_2['activity_status'][k]

                                            # print(alr_mail)
                                            json_step_info = {}
                                            json_step_info['activity_status'] = step_2['activity_status'][k]
                                            json_step_info['one_email'] = tmp_one_email
                                            json_step_info['rf_step'] = None
                                            json_step_info['ref_step_num'] = None
                                            if 'rf_step' in step_:
                                                if step_['rf_step'] != None:
                                                    json_step_info['rf_step'] = step_['rf_step']
                                                    json_step_info['ref_step_num'] = str(step_['rf_step']).split('-')[1]

                                            tmp_account_name = tmp_one_email
                                            if json_step_info['one_email'] != '':
                                                query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(tmp_one_email)).all()
                                                if len(query_name_account) != 0:
                                                    try:
                                                        tmp_account_name = eval(query_name_account[0].citizen_data)
                                                        tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                                    except Exception as e:
                                                        tmp_account_name = tmp_one_email
                                                        exc_type, exc_obj, exc_tb = sys.exc_info()
                                                        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                                                        print(exc_type, fname, exc_tb.tb_lineno)
                                            json_step_info['step_num'] = step_num
                                            json_step_info['account_name'] = tmp_account_name
                                            list_check_step.append(json_step_info['activity_status'])
                                            step_list_data.append(json_step_info)
                                    json_step_info_2['step_info'] = step_list_data
                                
                                # print(len(list_check_step))
                                
                                if json_step_info_2['step_status'] == '':
                                    if 'Reject' in list_check_step:
                                        json_step_info_2['step_status'] = 'Reject'
                                    elif 'Approve' in list_check_step:
                                        json_step_info_2['step_status'] = 'Complete'
                                    elif 'Complete' in list_check_step:
                                        json_step_info_2['step_status'] = 'Complete'
                                    elif 'Incomplete' in list_check_step:
                                        json_step_info_2['step_status'] = 'Incomplete'
                                    elif 'Pending' in list_check_step:
                                        json_step_info_2['step_status'] = 'Incomplete'
                                    else:
                                        json_step_info_2['step_status'] = 'Complete'
                                # print(list_check_step)
                                if 'step_sign' in step_:
                                    tmp_step_sign = step_['step_sign']
                                    len_step_status = len(tmp_step_sign['data'])
                                    # print(len_step_status)
                                    if tmp_step_sign['status'] == True:
                                        if 'Incomplete' in list_check_step and list_check_step.count('Incomplete') == len_step_status:
                                            json_step_info_2['step_status'] = 'Incomplete'
                                        elif 'Complete' in list_check_step and list_check_step.count('Complete') == len_step_status:
                                            json_step_info_2['step_status'] = 'Complete'
                                        else:
                                            json_step_info_2['step_status'] = 'Incomplete'
                                        # for yt in range(len(list_check_step)):
                                        #     tmp_status_step_one = list_check_step[yt]
                                            
                                        #     print(tmp_status_step_one)
                                sum_status_step_list.append(json_step_info_2['step_status'])
                                tmp_file_user_status_detail.append(json_step_info_2)
                            if 'Reject' in sum_status_step_list:
                                status_step_sum = 'Reject'
                                # sendtime = json_data_res['send_time']
                                timing_ = timing(time_success,sendtime)
                                tmp_timing = timing_
                            elif 'Incomplete' in sum_status_step_list:
                                status_step_sum = 'Incomplete'
                                now = datetime.datetime.now()
                                # sendtime = json_data_res['send_time']
                                timing_ = timing(datetime.datetime.timestamp(now),sendtime)
                                tmp_timing = timing_
                            elif 'Pending' in sum_status_step_list:
                                status_step_sum = 'Incomplete'
                                now = datetime.datetime.now()
                                # sendtime = json_data_res['send_time']
                                timing_ = timing(datetime.datetime.timestamp(now),sendtime)
                                tmp_timing = timing_
                            elif 'Approve' in sum_status_step_list:
                                status_step_sum = 'Complete'
                                # sendtime = json_data_res['send_time']
                                timing_ = timing(time_success,sendtime)
                                tmp_timing = timing_
                            elif 'Complete' in sum_status_step_list:
                                status_step_sum = 'Complete'
                                # sendtime = json_data_res['send_time']
                                timing_ = timing(time_success,sendtime)
                                tmp_timing = timing_
                            else:
                                status_step_sum = 'Complete'
                                # sendtime = json_data_res['send_time']
                                timing_ = timing(time_success,sendtime)
                                tmp_timing = timing_
                            tmp_file_status_sum = status_step_sum
                        tmp_sign_detail = sign_detail
                        
                        tmp_view_details = eval(tmpjson['view_details'])
                        if tmpjson['qrCode_position'] != None or str(tmpjson['qrCode_position']).replace(' ','') != '':
                            tmp_qrCode_position = eval(tmpjson['qrCode_position'])
                            tmp_qrCode_status = True
                        else:
                            tmp_qrCode_position = tmpjson['qrCode_position']
                            tmp_qrCode_status = False                    
                    if u == 2:
                        tmpjson_document = tmp_query[n][u].__dict__
                        if tmpjson_document['options_page'] == None:
                            tmp_option_page = []
                        else:                                
                            tmp_option_page = eval(tmpjson_document['options_page'])
                            tmp_options_page_document = [tmp_option_page]
                            if 'ca_require' in tmp_option_page:
                                tmp_ca_require = tmp_option_page['ca_require']
                                if type(tmp_ca_require) is bool:
                                    tmp_digit_sign = bool(tmp_ca_require)
                                else:
                                    tmp_digit_sign = ""
                            else:
                                tmp_digit_sign = bool(tmpjson_document['digit_sign'])
                        tmp_documentJson = eval(tmpjson_document['documentJson'])
                        tmp_strdocument = str(tmpjson_document['documentJson'])
                    if u == 3:
                        tmpjson_pdf = tmp_query[n][u].__dict__
                        if tmpjson_pdf['string_sign'] != None:
                            tmp_file_status = 'Complete'
                        else:
                            tmp_file_status = 'Incomplete'
                        stringPdf = tmpjson_pdf['string_pdf']
                        with io.BytesIO(base64.b64decode(stringPdf)) as open_pdf_file:
                            read_pdf = PdfFileReader(open_pdf_file)
                            num_pages = read_pdf.getNumPages()

                    
                    # if u == 4:
                    #     tmpjson_template = tmp_query[n][u].__dict__
                    #     tmp_tempname = str(tmpjson_template['step_Name'])
                    #     tmp_condition = str(tmpjson_template['condition_temp'])
                info = {
                    'attempted_folder':tmpjson_document['attempted_folder'],
                    'max_page':num_pages,
                    'sign_string':tmp_sign,
                    'condition_template':tmp_condition,
                    'digit_sign':tmp_digit_sign,
                    'document_Id':tmpjson_sender['doc_id'],
                    'document_details':tmp_documentJson,
                    'document_details_string':tmp_strdocument,
                    'document_time':document_timestamp,
                    'email_center':tmp_email_center,
                    'file_id':int(tmpjson_document['fileid']),
                    'file_name':tmpjson_sender['file_name'],
                    'file_status':tmp_file_status,
                    'file_status_sum':tmp_file_status_sum,
                    'file_user_status':tmp_file_user_status,
                    'file_user_status_detail':tmp_file_user_status_detail,
                    'options_page_document':tmp_options_page_document,
                    'qrCode_position':tmp_qrCode_position,
                    'qrCode_status':tmp_qrCode_status,
                    'send_time':tmp_datetime,
                    'send_time_display':tmp_datetime_display,
                    'send_time_string':str(tmp_datetime).split('+')[0],
                    'sender_email':tmpjson_sender['sender_email'],
                    'sender_name':tmpjson_sender['sender_name'],
                    'sender_position':tmpjson_sender['sender_position'],
                    'sign_detail':tmp_sign_detail,
                    'signpad':tmp_sign_pad,
                    'stamp_all':tmpjson_document['sign_page_options'],
                    'status':tmpjson_sender['status'],
                    'status_file_code':tmp_status_file_code,
                    'status_file_string':tmp_status_file_string,
                    'step_code':tmpjson_sender['step_code'],
                    'step_data_sid':tmpjson_sender['step_data_sid'],
                    'step_info':tmp_step_info,
                    'template_name':tmp_tempname,
                    'template_webhook':tmpjson_sender['template_webhook'],
                    'timeline':tmp_timeline,
                    'timeline_list':tmp_timeline_list,
                    'timing':tmp_timing,
                    'tracking_id':tmpjson_sender['tracking_id'],
                    'urgent_code':tmpjson_document['urgent_type'],
                    'view_details':tmp_view_details,
                    'sign_info':tmp_sign_detail_list,
                    'sign_require':require_sign_info,
                    'url_sign':''
                }
                arr_tmp.append(info)
            return {'result':'OK','messageText':arr_tmp}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':None,'messageER':str(e)}


    def select_recipient_one_v3_last(self,emailUser,sidcode):
        self.sidcode = sidcode
        self.emailUser = emailUser
        arr_tmp = []
        try:
            tmp_query = db.session.query(
                    paper_lessdatastep,
                    paper_lesssender,
                    paper_lessdocument,
                    paper_lesspdf,
                    # paper_lessstep
                )\
                .join(paper_lesssender,paper_lesssender.step_data_sid==paper_lessdatastep.sid)\
                .join(paper_lessdocument,paper_lessdocument.step_id==paper_lessdatastep.sid)\
                .join(paper_lesspdf,paper_lesspdf.fid==paper_lessdocument.fileid)\
                .filter(paper_lessdatastep.sid==self.sidcode)\
                .all()
            arr_step_info = []
            list_step_email = []
            sign_detail = []
            sign_data = []
            tmp_status_file_code = 'Y'
            tmp_status_file_string = ''
            list_sign_info = []
            require_sign_info = []
            sign_detail_require = []
            tmp_tempname = ''
            tmp_condition = ''
            tmp_file_status_sum = ''
            tmp_file_user_status = ''
            tmp_timing = ''
            result_url = get_url_image_pdf_v1(self.sidcode)
            if result_url['result'] == 'OK':
                tmpmessageText = result_url['messageText']
                tmp_url_image = tmpmessageText
                # print(tmp_url_image)
            else:
                tmp_url_image = []
            for n in range(len(tmp_query)):
                for u in range(len(tmp_query[n])):
                    if u == 1:
                        tmpjson_sender = tmp_query[n][u].__dict__
                        tmp_datetime = tmpjson_sender['send_time']
                        tmp_step_code = tmpjson_sender['step_code']     
                        # print(tmp_query[n][u])           
                        if str(tmp_step_code).replace(' ','') != '':
                            result_template = paper_lessstep.query.filter(paper_lessstep.step_Code==tmp_step_code,paper_lessstep.status=='ACTIVE').first()
                            if result_template != None:
                                tmp_tempname = str(result_template.step_Name)
                                tmp_condition = str(result_template.condition_temp)
                        document_timestamp = int(tmp_datetime.timestamp())
                        tmp_datetime_display = convert_datetime_TH_2_display_sendTime(document_timestamp)
                        try:
                            tmp_email_center = eval(tmpjson_sender['email_center'])
                        except Exception as e:
                            tmp_email_center = tmpjson_sender['email_center']
                    if u == 0:
                        tmpjson = tmp_query[n][u].__dict__
                        # del tmpjson['_sa_instance_state']
                        step_infomation = eval(tmpjson['data_json'])
                        tmp_file_user_status_detail = []
                        tmp_sign_detail_list = []
                        tmp_list_step_infomation = []
                        # print(step_infomation)
                        if 'step_num' in step_infomation:
                            tmp_step_info = [eval(tmpjson['data_json'])]
                        else:
                            tmp_step_info = eval(tmpjson['data_json'])
                        if 'step_num' in step_infomation:
                            tmp_list_step_infomation.append(step_infomation)
                            step_infomation = tmp_list_step_infomation
                        step_status = ''
                        res_status_file = 'Y'
                        step_before = ''
                        step_list_before = []
                        step_list_ = []
                        step_list_next = []
                        arr_step_totle = []
                        step_me = ''
                        step_sum_status = []
                        sum_status_step_list = []
                        list_check_step = []
                        step_list_data = []
                        max_step = (len(step_infomation))
                        sum_status_step = []
                        tmp_status_sum = []
                        arr_email_list = []
                        email_step_sum = []
                        email_one_sum = []
                        time_success = None
                        step_time_1 = []
                        sendtime = tmpjson['upload_time']
                        list_my_email = []
                        tmp_list_sign_id = []
                        sign_info_id = []
                        
                        for i in range(len(step_infomation)):
                            list_check_step = []
                            json_step_info_2 = {}
                            step_list_data = []
                            step_status = []
                            step_email = []
                            tmp_step_num = ''
                            step_ = step_infomation[i]
                            step_num = step_infomation[i]['step_num']
                            json_step_info_2['step_status'] = ''
                            tmp_step_detail = step_['step_detail']
                            for u in range(len(tmp_step_detail)):
                                tmp_arr_step_detail = tmp_step_detail[u]
                                tmp_status = tmp_arr_step_detail['activity_status']
                                tmp_code = tmp_arr_step_detail['activity_code']
                                tmp_activity_data = tmp_arr_step_detail['activity_data']
                                for js in range(len(tmp_activity_data)):
                                    if 'id' in tmp_activity_data[js]:
                                        tmp_list_sign_id.append(tmp_activity_data[js]['id'])
                                tmp_email = str(tmp_arr_step_detail['one_email']).replace(' ','').lower()
                                # print(tmp_email)
                                if tmp_email == self.emailUser:                                    
                                    tmp_step_num = u
                                    for hg in range(len(tmp_code)):
                                        if tmp_code[hg] == 'A03':
                                            sign_detail_require = []
                                            tmp_activity_data = tmp_arr_step_detail['activity_data'][hg]
                                            if 'status' in tmp_activity_data:
                                                if tmp_activity_data['status'] == 'incomplete':
                                                    sign_detail_require.append(tmp_activity_data)
                                                    list_my_email.append(u)
                                    if 'step_sign' in  step_infomation[i]:
                                        if  step_infomation[i]['step_sign']['status'] == True:
                                            tmp_data_ssign = step_infomation[i]['step_sign']['data']
                                            for zy in range(len(tmp_data_ssign)):
                                                if 'step_index' in tmp_data_ssign[zy]: 
                                                    if len(tmp_data_ssign[zy]['step_index']) != 0:
                                                        # print(tmp_step_num , tmp_data_ssign[zy]['step_index'])
                                                        if tmp_step_num in tmp_data_ssign[zy]['step_index']:
                                                            if  tmp_data_ssign[zy]['status'] == 'incomplete':
                                                                sign_detail_require.append(tmp_data_ssign[zy])
                                                    else:
                                                        if 'id' in tmp_data_ssign[zy]:
                                                            if tmp_data_ssign[zy]['id'] not in tmp_list_sign_id:
                                                                if  tmp_data_ssign[zy]['status'] == 'incomplete':
                                                                    sign_detail_require.append(tmp_data_ssign[zy])
                                                        else:
                                                            sign_detail_require.append(tmp_data_ssign[zy])
                                    # print(sign_detail_require , step_num)
                                    info_step = {
                                        'data':sign_detail_require,
                                        'step_num':step_num
                                    }
                                    require_sign_info.append(info_step)
                                for s in range(len(tmp_code)):
                                    if tmp_code[s] == 'A03':
                                        step_status.append(tmp_status[s])
                                        step_email.append(tmp_email)
                                        email_one_sum.append(tmp_email)
                                        #process หา timeline
                                        if (tmp_arr_step_detail['activity_status'][s] == 'Complete' or tmp_arr_step_detail['activity_status'][s] =='Reject' or tmp_arr_step_detail['activity_status'][s] == 'Approve'):
                                            t1 = str(tmp_arr_step_detail['activity_time'][s])
                                            # print ('else activity_time',t1)
                                            time_success = change_to_Timestamp(t1)
                                            step_time_1.append(time_success)
                                        #สิ้นสุดการหา timeline
                                timeline_ = getTimeline(sendtime,step_time_1)
                                tmp_timeline = timeline_  
                                list_timeline = getlistTimeline(sendtime,step_time_1)
                                tmp_timeline_list = list_timeline
                            email_step_sum.append(step_email)
                            if 'Reject' in step_status:
                                tmp_status_sum.append('Reject')
                            elif 'Approve' in step_status:
                                tmp_status_sum.append('Complete')
                            elif 'Complete' in step_status:
                                tmp_status_sum.append('Complete')
                            elif 'Incomplete' in step_status:
                                tmp_status_sum.append('Incomplete')
                            elif 'Pending' in step_status:
                                tmp_status_sum.append('Incomplete')
                            else:
                                tmp_status_sum.append('Complete')
                        tmp_sign_pad = None
                        if self.emailUser in email_one_sum:
                            for zzi in range(len(step_infomation)):
                                list_check_step = []
                                json_step_info_2 = {}
                                step_list_data = []
                                step_status = []
                                step_ = step_infomation[zzi]
                                step_num = step_infomation[zzi]['step_num']
                                json_step_info_2['step_status'] = ''
                                tmp_step_detail = step_['step_detail']
                                
                                for zi in range(len(tmp_step_detail)):
                                    tmp_arr_step_detail_2 = tmp_step_detail[zi]
                                    oneMail = str(tmp_arr_step_detail_2['one_email']).replace(' ','').lower()
                                    
                                    tmp_step_me = int(step_num) - 1
                                    step_num_int2 = int(step_num)
                                    if 'Reject' in tmp_status_sum:
                                        arr_step_info.append('Reject')
                                    elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Incomplete':
                                        if self.emailUser not in arr_email_list:
                                            index_step_me = tmp_step_me
                                            if index_step_me != 0:
                                                while index_step_me > 0:
                                                    if len(arr_step_info) == 0:
                                                        index_step_me = index_step_me - 1
                                                        if tmp_status_sum[index_step_me] == 'Incomplete':
                                                            arr_step_info.append('Incomplete')
                                                        else:
                                                            if oneMail == self.emailUser:
                                                                if 'signpad' in step_:
                                                                    tmp_sign_pad = step_['signpad']
                                                                else:
                                                                    tmp_sign_pad = None
                                                            arr_step_info.append('Wait')
                                                        arr_email_list.append(self.emailUser)
                                                    else:
                                                        index_step_me = index_step_me - 1
                                                        continue
                                            else:
                                                if oneMail == self.emailUser:
                                                    if 'signpad' in step_:
                                                        tmp_sign_pad = step_['signpad']
                                                    else:
                                                        tmp_sign_pad = None
                                                arr_step_info.append('Wait')
                                    elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Complete':
                                        if self.emailUser not in arr_email_list:
                                            for nz in range(step_num_int2,len(tmp_status_sum),1):
                                                if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                    arr_step_info.append('Incomplete')
                                                elif self.emailUser not in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                    arr_step_info.append('Progress')
                                            arr_email_list.append(self.emailUser)
                            if 'Reject' in arr_step_info:
                                res_status_file = 'R'
                                res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                            elif 'Wait' in arr_step_info:
                                res_status_file = 'W'
                                res_status_file_string = 'รออนุมัติ'
                            elif 'Incomplete' in arr_step_info:
                                res_status_file = 'Z'
                                res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                            elif 'Progress' in arr_step_info:
                                res_status_file = 'N'
                                res_status_file_string = 'กำลังดำเนินการ'                    
                            elif arr_step_info.count('Incomplete') >= 2:
                                res_status_file = 'Z'
                                res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                            else:
                                res_status_file = 'Y'
                                res_status_file_string = 'อนุมัติแล้ว'
                            tmp_status_file_code = res_status_file
                            tmp_status_file_string = res_status_file_string
                            status_step_sum = ''
                            sum_status_step_list = []
                            alr_mail = []
                            # json_data_res['step_info'] = eval(result_Select_step.data_json)
                            for i in range(len(step_infomation)):
                                sign_json_info = {}
                                tmp_sign_list_info = []
                                step_ = step_infomation[i]
                                step_num = step_infomation[i]['step_num']
                                json_step_info_2['step_status'] = ''
                                if 'step_sign' in step_:
                                    tmp_stepsign = step_['step_sign']
                                    tmp_status_stepsign = tmp_stepsign['status']
                                    if tmp_status_stepsign == True:
                                        tmp_data_stepsign = tmp_stepsign['data']
                                        for y in range(len(tmp_data_stepsign)):
                                            step_signning = tmp_data_stepsign[y]
                                            if 'id' in step_signning:
                                                if step_signning['id'] not in tmp_list_sign_id:
                                                    tmp_sign_list_info.append(step_signning)
                                                else:
                                                    tmp_sign_list_info.append(step_signning)
                                            else:
                                                tmp_sign_list_info.append(step_signning)

                                for u in range(len(step_['step_detail'])):
                                    step_2 = step_['step_detail'][u]
                                    for k in range(len(step_2['activity_data'])): 
                                        if 'status' in step_2['activity_data'][k]:                                            
                                            sign_json_info = step_2['activity_data'][k]
                                            if 'sign_llx' in step_2['activity_data'][k]:
                                                if 'id' in step_2['activity_data'][k]:
                                                    if step_2['activity_data'][k]['id'] not in tmp_list_sign_id:
                                                        tmp_sign_list_info.append(sign_json_info)
                                                else:
                                                    tmp_sign_list_info.append(sign_json_info)
                                # print(tmp_sign_list_info)
                                sign_json_info = {
                                    'data':tmp_sign_list_info,
                                    'step_num':step_num
                                }
                                # print(sign_json_info)
                                tmp_sign_detail_list.append(sign_json_info)
                            for i in range(len(step_infomation)):
                                list_step = []
                                list_check_step = []
                                json_step_info_2 = {}
                                step_list_data = []
                                step_ = step_infomation[i]
                                step_num = step_infomation[i]['step_num']
                                json_step_info_2['step_status'] = ''
                                for u in range(len(step_['step_detail'])):
                                    # print('step_',step_)
                                    step_2 = step_['step_detail'][u]
                                    for k in range(len(step_2['activity_code'])):
                                        if step_2['activity_code'][k] == 'A03':
                                            tmp_one_email = str(step_2['one_email']).replace(' ','').lower()
                                            list_step.append(step_2['activity_status'][k])
                                            # print('list_step',list_step)
                                            # print('step',step_2['activity_status'][k])
                                            if 'Complete' in list_step or 'Approve' in list_step:
                                                pass
                                            else:
                                                if self.emailUser == tmp_one_email:
                                                    if self.emailUser not in alr_mail:
                                                        # print('step_2',step_2)
                                                        # arr_get[n]['data_json']['step_detail'][o]['activity_status'][s]
                                                        # print(alr_mail ,step_2['activity_status'][k])
                                                        if step_2['activity_status'][k] == 'Complete':
                                                            # alr_mail.append(step_2['one_email'])
                                                            tmp_file_user_status = step_2['activity_status'][k]
                                                        elif step_2['activity_status'][k] == 'Approve':
                                                            # alr_mail.append(step_2['one_email'])
                                                            tmp_file_user_status = step_2['activity_status'][k]
                                                        else:
                                                            alr_mail.append(step_2['one_email'])
                                                            tmp_file_user_status = step_2['activity_status'][k]
                                            # print(alr_mail)
                                            json_step_info = {}
                                            json_step_info['activity_status'] = step_2['activity_status'][k]
                                            json_step_info['one_email'] = tmp_one_email
                                            json_step_info['rf_step'] = None
                                            json_step_info['ref_step_num'] = None
                                            if 'rf_step' in step_:
                                                if step_['rf_step'] != None:
                                                    json_step_info['rf_step'] = step_['rf_step']
                                                    json_step_info['ref_step_num'] = str(step_['rf_step']).split('-')[1]

                                            tmp_account_name = tmp_one_email
                                            if json_step_info['one_email'] != '':
                                                query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(tmp_one_email)).all()
                                                if len(query_name_account) != 0:
                                                    try:
                                                        tmp_account_name = eval(query_name_account[0].citizen_data)
                                                        tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                                    except Exception as e:
                                                        tmp_account_name = tmp_one_email
                                                        exc_type, exc_obj, exc_tb = sys.exc_info()
                                                        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                                                        print(exc_type, fname, exc_tb.tb_lineno)
                                            json_step_info['step_num'] = step_num
                                            json_step_info['account_name'] = tmp_account_name
                                            list_check_step.append(json_step_info['activity_status'])
                                            step_list_data.append(json_step_info)
                                        json_step_info_2['step_info'] = step_list_data
                                if json_step_info_2['step_status'] == '':
                                    if 'Reject' in list_check_step:
                                        json_step_info_2['step_status'] = 'Reject'
                                    elif 'Approve' in list_check_step:
                                        json_step_info_2['step_status'] = 'Complete'
                                    elif 'Complete' in list_check_step:
                                        json_step_info_2['step_status'] = 'Complete'
                                    elif 'Incomplete' in list_check_step:
                                        json_step_info_2['step_status'] = 'Incomplete'
                                    elif 'Pending' in list_check_step:
                                        json_step_info_2['step_status'] = 'Incomplete'
                                    else:
                                        json_step_info_2['step_status'] = 'Complete'
                                # print(list_check_step)
                                if 'step_sign' in step_:
                                    tmp_step_sign = step_['step_sign']
                                    len_step_status = len(tmp_step_sign['data'])
                                    # print(len_step_status)
                                    if tmp_step_sign['status'] == True:
                                        if 'Incomplete' in list_check_step and list_check_step.count('Incomplete') == len_step_status:
                                            json_step_info_2['step_status'] = 'Incomplete'
                                        elif 'Complete' in list_check_step and list_check_step.count('Complete') == len_step_status:
                                            json_step_info_2['step_status'] = 'Complete'
                                        else:
                                            json_step_info_2['step_status'] = 'Incomplete'
                                        # for yt in range(len(list_check_step)):
                                        #     tmp_status_step_one = list_check_step[yt]
                                            
                                        #     print(tmp_status_step_one)
                                sum_status_step_list.append(json_step_info_2['step_status'])
                                tmp_file_user_status_detail.append(json_step_info_2)
                            if 'Reject' in sum_status_step_list:
                                status_step_sum = 'Reject'
                                # sendtime = json_data_res['send_time']
                                timing_ = timing(time_success,sendtime)
                                tmp_timing = timing_
                            elif 'Incomplete' in sum_status_step_list:
                                status_step_sum = 'Incomplete'
                                now = datetime.datetime.now()
                                # sendtime = json_data_res['send_time']
                                timing_ = timing(datetime.datetime.timestamp(now),sendtime)
                                tmp_timing = timing_
                            elif 'Pending' in sum_status_step_list:
                                status_step_sum = 'Incomplete'
                                now = datetime.datetime.now()
                                # sendtime = json_data_res['send_time']
                                timing_ = timing(datetime.datetime.timestamp(now),sendtime)
                                tmp_timing = timing_
                            elif 'Approve' in sum_status_step_list:
                                status_step_sum = 'Complete'
                                # sendtime = json_data_res['send_time']
                                timing_ = timing(time_success,sendtime)
                                tmp_timing = timing_
                            elif 'Complete' in sum_status_step_list:
                                status_step_sum = 'Complete'
                                # sendtime = json_data_res['send_time']
                                timing_ = timing(time_success,sendtime)
                                tmp_timing = timing_
                            else:
                                status_step_sum = 'Complete'
                                # sendtime = json_data_res['send_time']
                                timing_ = timing(time_success,sendtime)
                                tmp_timing = timing_
                            tmp_file_status_sum = status_step_sum
                        else:
                            print('k else')
                            for zzi in range(len(step_infomation)):
                                list_check_step = []
                                json_step_info_2 = {}
                                step_list_data = []
                                step_status = []
                                step_ = step_infomation[zzi]
                                step_num = step_infomation[zzi]['step_num']
                                json_step_info_2['step_status'] = ''
                                tmp_step_detail = step_['step_detail']
                                
                                for zi in range(len(tmp_step_detail)):
                                    tmp_arr_step_detail_2 = tmp_step_detail[zi]
                                    oneMail = str(tmp_arr_step_detail_2['one_email']).replace(' ','').lower()
                                    
                                    tmp_step_me = int(step_num) - 1
                                    step_num_int2 = int(step_num)
                                    if 'Reject' in tmp_status_sum:
                                        arr_step_info.append('Reject')
                                    elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Incomplete':
                                        if self.emailUser not in arr_email_list:
                                            index_step_me = tmp_step_me
                                            if index_step_me != 0:
                                                while index_step_me > 0:
                                                    if len(arr_step_info) == 0:
                                                        index_step_me = index_step_me - 1
                                                        if tmp_status_sum[index_step_me] == 'Incomplete':
                                                            arr_step_info.append('Incomplete')
                                                        else:
                                                            if oneMail == self.emailUser:
                                                                if 'signpad' in step_:
                                                                    tmp_sign_pad = step_['signpad']
                                                                else:
                                                                    tmp_sign_pad = None
                                                            arr_step_info.append('Wait')
                                                        arr_email_list.append(self.emailUser)
                                                    else:
                                                        index_step_me = index_step_me - 1
                                                        continue
                                            else:
                                                if oneMail == self.emailUser:
                                                    if 'signpad' in step_:
                                                        tmp_sign_pad = step_['signpad']
                                                    else:
                                                        tmp_sign_pad = None
                                                arr_step_info.append('Wait')
                                    elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Complete':
                                        if self.emailUser not in arr_email_list:
                                            for nz in range(step_num_int2,len(tmp_status_sum),1):
                                                if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                    arr_step_info.append('Incomplete')
                                                elif self.emailUser not in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                    arr_step_info.append('Progress')
                                            arr_email_list.append(self.emailUser)
                            if 'Reject' in arr_step_info:
                                res_status_file = 'R'
                                res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                            elif 'Wait' in arr_step_info:
                                res_status_file = 'W'
                                res_status_file_string = 'รออนุมัติ'
                            elif 'Incomplete' in arr_step_info:
                                res_status_file = 'Z'
                                res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                            elif 'Progress' in arr_step_info:
                                res_status_file = 'N'
                                res_status_file_string = 'กำลังดำเนินการ'                    
                            elif arr_step_info.count('Incomplete') >= 2:
                                res_status_file = 'Z'
                                res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                            else:
                                res_status_file = 'Y'
                                res_status_file_string = 'อนุมัติแล้ว'
                            tmp_status_file_code = res_status_file
                            tmp_status_file_string = res_status_file_string
                            status_step_sum = ''
                            sum_status_step_list = []
                            alr_mail = []
                            # json_data_res['step_info'] = eval(result_Select_step.data_json)
                            for i in range(len(step_infomation)):
                                sign_json_info = {}
                                tmp_sign_list_info = []
                                step_ = step_infomation[i]
                                step_num = step_infomation[i]['step_num']
                                json_step_info_2['step_status'] = ''
                                if 'step_sign' in step_:
                                    tmp_stepsign = step_['step_sign']
                                    tmp_status_stepsign = tmp_stepsign['status']
                                    if tmp_status_stepsign == True:
                                        tmp_data_stepsign = tmp_stepsign['data']
                                        for y in range(len(tmp_data_stepsign)):
                                            step_signning = tmp_data_stepsign[y]
                                            if 'id' in step_signning:
                                                if step_signning['id'] not in tmp_list_sign_id:
                                                    tmp_sign_list_info.append(step_signning)
                                                else:
                                                    tmp_sign_list_info.append(step_signning)
                                            else:
                                                tmp_sign_list_info.append(step_signning)

                                for u in range(len(step_['step_detail'])):
                                    step_2 = step_['step_detail'][u]
                                    for k in range(len(step_2['activity_data'])): 
                                        if 'status' in step_2['activity_data'][k]:                                            
                                            sign_json_info = step_2['activity_data'][k]
                                            if 'sign_llx' in step_2['activity_data'][k]:
                                                if 'id' in step_2['activity_data'][k]:
                                                    if step_2['activity_data'][k]['id'] not in tmp_list_sign_id:
                                                        tmp_sign_list_info.append(sign_json_info)
                                                else:
                                                    tmp_sign_list_info.append(sign_json_info)
                                # print(tmp_sign_list_info)
                                sign_json_info = {
                                    'data':tmp_sign_list_info,
                                    'step_num':step_num
                                }
                                # print(sign_json_info)
                                tmp_sign_detail_list.append(sign_json_info)
                            for i in range(len(step_infomation)):
                                list_check_step = []
                                json_step_info_2 = {}
                                step_list_data = []
                                step_ = step_infomation[i]
                                step_num = step_infomation[i]['step_num']
                                json_step_info_2['step_status'] = ''
                                for u in range(len(step_['step_detail'])):
                                    step_2 = step_['step_detail'][u]
                                    for k in range(len(step_2['activity_code'])):
                                        if step_2['activity_code'][k] == 'A03':
                                            tmp_one_email = str(step_2['one_email']).replace(' ','').lower()
                                            if self.emailUser == tmp_one_email:
                                                if self.emailUser not in alr_mail:
                                                    # print(alr_mail ,step_2['activity_status'][k])
                                                    # print('k',step_2['activity_code'][k])
                                                    # print('kk',k)
                                                    if step_2['activity_status'][k] == 'Complete':
                                                        # alr_mail.append(step_2['one_email'])
                                                        tmp_file_user_status = step_2['activity_status'][k]
                                                    elif step_2['activity_status'][k] == 'Approve':
                                                        # alr_mail.append(step_2['one_email'])
                                                        tmp_file_user_status = step_2['activity_status'][k]
                                                    else:
                                                        alr_mail.append(step_2['one_email'])
                                                        tmp_file_user_status = step_2['activity_status'][k]

                                            # print(alr_mail)
                                            json_step_info = {}
                                            json_step_info['activity_status'] = step_2['activity_status'][k]
                                            json_step_info['one_email'] = tmp_one_email
                                            json_step_info['rf_step'] = None
                                            json_step_info['ref_step_num'] = None
                                            if 'rf_step' in step_:
                                                if step_['rf_step'] != None:
                                                    json_step_info['rf_step'] = step_['rf_step']
                                                    json_step_info['ref_step_num'] = str(step_['rf_step']).split('-')[1]

                                            tmp_account_name = tmp_one_email
                                            if json_step_info['one_email'] != '':
                                                query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(tmp_one_email)).all()
                                                if len(query_name_account) != 0:
                                                    try:
                                                        tmp_account_name = eval(query_name_account[0].citizen_data)
                                                        tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                                    except Exception as e:
                                                        tmp_account_name = tmp_one_email
                                                        exc_type, exc_obj, exc_tb = sys.exc_info()
                                                        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                                                        print(exc_type, fname, exc_tb.tb_lineno)
                                            json_step_info['step_num'] = step_num
                                            json_step_info['account_name'] = tmp_account_name
                                            list_check_step.append(json_step_info['activity_status'])
                                            step_list_data.append(json_step_info)
                                    json_step_info_2['step_info'] = step_list_data
                                
                                
                                # print(json_step_info_2)
                                if json_step_info_2['step_status'] == '':
                                    if 'Reject' in list_check_step:
                                        json_step_info_2['step_status'] = 'Reject'
                                    elif 'Approve' in list_check_step:
                                        json_step_info_2['step_status'] = 'Complete'
                                    elif 'Complete' in list_check_step:
                                        json_step_info_2['step_status'] = 'Complete'
                                    elif 'Incomplete' in list_check_step:
                                        json_step_info_2['step_status'] = 'Incomplete'
                                    elif 'Pending' in list_check_step:
                                        json_step_info_2['step_status'] = 'Incomplete'
                                    else:
                                        json_step_info_2['step_status'] = 'Complete'
                                # print(list_check_step)
                                if 'step_sign' in step_:
                                    tmp_step_sign = step_['step_sign']
                                    len_step_status = len(tmp_step_sign['data'])
                                    # print(len_step_status)
                                    if tmp_step_sign['status'] == True:
                                        if 'Incomplete' in list_check_step and list_check_step.count('Incomplete') == len_step_status:
                                            json_step_info_2['step_status'] = 'Incomplete'
                                        elif 'Complete' in list_check_step and list_check_step.count('Complete') == len_step_status:
                                            json_step_info_2['step_status'] = 'Complete'
                                        else:
                                            json_step_info_2['step_status'] = 'Incomplete'
                                        # for yt in range(len(list_check_step)):
                                        #     tmp_status_step_one = list_check_step[yt]
                                            
                                        #     print(tmp_status_step_one)
                                sum_status_step_list.append(json_step_info_2['step_status'])
                                tmp_file_user_status_detail.append(json_step_info_2)
                            if 'Reject' in sum_status_step_list:
                                status_step_sum = 'Reject'
                                # sendtime = json_data_res['send_time']
                                timing_ = timing(time_success,sendtime)
                                tmp_timing = timing_
                            elif 'Incomplete' in sum_status_step_list:
                                status_step_sum = 'Incomplete'
                                now = datetime.datetime.now()
                                # sendtime = json_data_res['send_time']
                                timing_ = timing(datetime.datetime.timestamp(now),sendtime)
                                tmp_timing = timing_
                            elif 'Pending' in sum_status_step_list:
                                status_step_sum = 'Incomplete'
                                now = datetime.datetime.now()
                                # sendtime = json_data_res['send_time']
                                timing_ = timing(datetime.datetime.timestamp(now),sendtime)
                                tmp_timing = timing_
                            elif 'Approve' in sum_status_step_list:
                                status_step_sum = 'Complete'
                                # sendtime = json_data_res['send_time']
                                timing_ = timing(time_success,sendtime)
                                tmp_timing = timing_
                            elif 'Complete' in sum_status_step_list:
                                status_step_sum = 'Complete'
                                # sendtime = json_data_res['send_time']
                                timing_ = timing(time_success,sendtime)
                                tmp_timing = timing_
                            else:
                                status_step_sum = 'Complete'
                                # sendtime = json_data_res['send_time']
                                timing_ = timing(time_success,sendtime)
                                tmp_timing = timing_
                            tmp_file_status_sum = status_step_sum
                        tmp_sign_detail = sign_detail
                        
                        tmp_view_details = eval(tmpjson['view_details'])
                        if tmpjson['qrCode_position'] != None or str(tmpjson['qrCode_position']).replace(' ','') != '':
                            tmp_qrCode_position = eval(tmpjson['qrCode_position'])
                            tmp_qrCode_status = True
                        else:
                            tmp_qrCode_position = tmpjson['qrCode_position']
                            tmp_qrCode_status = False                    
                    if u == 2:
                        tmpjson_document = tmp_query[n][u].__dict__
                        tmpstep_group = None
                        tmpstatus_group = False
                        if tmpjson_document['options_page'] == None:
                            tmp_option_page = []
                        else:                                
                            tmp_option_page = eval(tmpjson_document['options_page'])
                            tmp_options_page_document = [tmp_option_page]
                            print(tmp_option_page)
                            if 'ca_require' in tmp_option_page:
                                tmp_ca_require = tmp_option_page['ca_require']
                                if type(tmp_ca_require) is bool:
                                    tmp_digit_sign = bool(tmp_ca_require)
                                else:
                                    tmp_digit_sign = ""
                            else:
                                tmp_digit_sign = bool(tmpjson_document['digit_sign'])
                            if 'group_detail' in tmp_option_page:
                                tmp_group_details = tmp_option_page['group_detail']
                                print(tmp_group_details)
                                if 'group_status' in tmp_group_details:
                                    if tmp_group_details['group_status'] == True:
                                        tmpstatus_group = True
                                        tmpstep_group = tmp_group_details['step_num']
                            
                        tmp_documentJson = eval(tmpjson_document['documentJson'])
                        tmp_strdocument = str(tmpjson_document['documentJson'])
                    if u == 3:
                        tmpjson_pdf = tmp_query[n][u].__dict__
                        if tmpjson_pdf['string_sign'] != None:
                            tmppdf = tmpjson_pdf['string_sign']
                            tmp_file_status = 'Complete'
                        else:
                            tmppdf = tmpjson_pdf['string_pdf']
                            tmp_file_status = 'Incomplete'
                    
                    # if u == 4:
                    #     tmpjson_template = tmp_query[n][u].__dict__
                    #     tmp_tempname = str(tmpjson_template['step_Name'])
                    #     tmp_condition = str(tmpjson_template['condition_temp'])
                # print((list_check_step))
                # print(status_step_sum)
                
                info = {
                    'url_image':tmp_url_image,
                    'pdfData':tmppdf,
                    'attempted_folder':tmpjson_document['attempted_folder'],
                    'condition_template':tmp_condition,
                    'digit_sign':tmp_digit_sign,
                    'document_Id':tmpjson_sender['doc_id'],
                    'document_details':tmp_documentJson,
                    'document_details_string':tmp_strdocument,
                    'document_time':document_timestamp,
                    'email_center':tmp_email_center,
                    'file_id':int(tmpjson_document['fileid']),
                    'file_name':tmpjson_sender['file_name'],
                    'file_status':tmp_file_status,
                    'file_status_sum':tmp_file_status_sum,
                    'file_user_status':tmp_file_user_status,
                    'file_user_status_detail':tmp_file_user_status_detail,
                    'options_page_document':tmp_options_page_document,
                    'qrCode_position':tmp_qrCode_position,
                    'qrCode_status':tmp_qrCode_status,
                    'send_time':tmp_datetime,
                    'send_time_display':tmp_datetime_display,
                    'send_time_string':str(tmp_datetime).split('+')[0],
                    'sender_email':tmpjson_sender['sender_email'],
                    'sender_name':tmpjson_sender['sender_name'],
                    'sender_position':tmpjson_sender['sender_position'],
                    'sign_detail':tmp_sign_detail,
                    'signpad':tmp_sign_pad,
                    'stamp_all':tmpjson_document['sign_page_options'],
                    'status':tmpjson_sender['status'],
                    'status_file_code':tmp_status_file_code,
                    'status_file_string':tmp_status_file_string,
                    'step_code':tmpjson_sender['step_code'],
                    'step_data_sid':tmpjson_sender['step_data_sid'],
                    'step_info':tmp_step_info,
                    'template_name':tmp_tempname,
                    'template_webhook':tmpjson_sender['template_webhook'],
                    'timeline':tmp_timeline,
                    'timeline_list':tmp_timeline_list,
                    'timing':tmp_timing,
                    'tracking_id':tmpjson_sender['tracking_id'],
                    'urgent_code':tmpjson_document['urgent_type'],
                    'view_details':tmp_view_details,
                    'sign_info':tmp_sign_detail_list,
                    'sign_require':require_sign_info,
                    'group_status':tmpstatus_group,
                    'group_stepnum':tmpstep_group
                }
                arr_tmp.append(info)
            return {'result':'OK','messageText':arr_tmp}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':None,'messageER':str(e)}
        finally:
            db.session.close()

    def select_recpin_db_v3(self,emailUser,sidCode):
            self.sidCode = sidCode
            self.emailUser = emailUser
            json_data_res = {}
            list_data_res = []
            try:
                result_Select_step = paper_lessdatastep.query.filter(paper_lessdatastep.sid==self.sidCode).first()
                result_Select_sender = paper_lesssender.query.filter(paper_lesssender.step_data_sid==self.sidCode).first()
                result_Select_document = paper_lessdocument.query.filter(paper_lessdocument.step_id==self.sidCode).first()
                if result_Select_document.fileid != None:
                    result_Select_pdf = paper_lesspdf.query.filter(paper_lesspdf.fid==result_Select_document.fileid).first()
                if result_Select_sender != None:
                    json_data_res['template_name'] = None
                    json_data_res['condition_template'] = None
                    if result_Select_sender.step_code != None:
                        result_template = paper_lessstep.query.filter(paper_lessstep.step_Code==result_Select_sender.step_code,paper_lessstep.status=='ACTIVE').first()
                        if result_template != None:
                            json_data_res['template_name'] = str(result_template.step_Name)
                            json_data_res['condition_template'] = str(result_template.condition_temp)
                    json_data_res['tracking_id'] = result_Select_sender.tracking_id
                    json_data_res['sender_email'] = result_Select_sender.sender_email
                    json_data_res['sender_name'] = result_Select_sender.sender_name
                    json_data_res['send_time'] = result_Select_sender.send_time
                    json_data_res['sender_position'] = result_Select_sender.sender_position
                    date_time_stamp_ = result_Select_sender.send_time.timestamp()
                    date_time_stamp_ = int(date_time_stamp_)
                    json_data_res['send_time_display'] = convert_datetime_TH_2_display_sendTime(date_time_stamp_)
                    json_data_res['send_time_string'] = str(result_Select_sender.send_time).split('+')[0]
                    json_data_res['step_code'] = result_Select_sender.step_code
                    json_data_res['step_data_sid'] = result_Select_sender.step_data_sid
                    json_data_res['document_Id'] = result_Select_sender.doc_id
                    json_data_res['file_name'] = result_Select_sender.file_name
                    json_data_res['template_webhook'] = result_Select_sender.template_webhook
                    try:
                        json_data_res['email_center'] = eval(result_Select_sender.email_center)
                    except Exception as e:
                        json_data_res['email_center'] = result_Select_sender.email_center
                    json_data_res['status'] = result_Select_sender.status
                if result_Select_document != None:
                    if result_Select_document.options_page != None:
                        tmp_option_page = eval(result_Select_document.options_page)
                        json_data_res['options_page_document'] = [tmp_option_page]
                        if 'ca_require' in tmp_option_page:
                            tmp_ca_require = tmp_option_page['ca_require']
                            if type(tmp_ca_require) is bool:
                                json_data_res['digit_sign'] = bool(tmp_ca_require)
                            else:
                                json_data_res['digit_sign'] = ""
                        else:
                            json_data_res['digit_sign'] = bool(result_Select_document.digit_sign)
                    else:
                        json_data_res['options_page_document'] = []
                    json_data_res['stamp_all'] = result_Select_document.sign_page_options
                    json_data_res['document_time'] = int(result_Select_document.timest)
                    json_data_res['document_details'] = eval(result_Select_document.documentJson)
                    json_data_res['document_details_string'] = str(result_Select_document.documentJson)
                    json_data_res['file_id'] = int(result_Select_document.fileid)
                    json_data_res['urgent_code'] = result_Select_document.urgent_type
                    
                    json_data_res['attempted_folder'] = result_Select_document.attempted_folder
                if result_Select_step != None:
                    json_data_res['view_details'] = eval(result_Select_step.view_details)
                    json_data_res['qrCode_position'] = eval(result_Select_step.qrCode_position)
                    if result_Select_step.qrCode_position != None or str(result_Select_step.qrCode_position).replace(' ','') != '':
                        json_data_res['qrCode_status'] = True
                    else:
                        json_data_res['qrCode_status'] = False
                if result_Select_pdf != None:
                    if result_Select_pdf.string_sign != None:
                        json_data_res['file_status'] = 'Complete'
                    else:
                        json_data_res['file_status'] = 'Incomplete'
                step_infomation = eval(result_Select_step.data_json)
                json_data_res['file_user_status_detail'] = []
                arr_step_info = []
                list_step_email = []
                sign_detail = []
                sign_data = []
                if 'step_num' in step_infomation:
                    status_step_sum = ''
                    sum_status_step_list = []
                    list_check_step = []
                    json_step_info_2 = {}
                    step_list_data = []
                    step_ = step_infomation
                    step_num = step_infomation['step_num']
                    time_success = None
                    step_time_1 = []
                    sendtime = json_data_res['send_time']
                    json_data_res['step_info'] = [eval(result_Select_step.data_json)]
                    json_step_info_2['step_status'] = ''
                    if 'signpad' in step_:
                        json_data_res['signpad'] = step_['signpad']
                    else:
                        json_data_res['signpad'] = None
                    for u in range(len(step_['step_detail'])):
                        step_2 = step_['step_detail'][u]
                        for k in range(len(step_2['activity_code'])):
                            if step_2['activity_code'][k] == 'A03':
                                json_step_info = {}
                                json_step_info['activity_status'] = step_2['activity_status'][k]
                                json_step_info['one_email'] = str(step_2['one_email']).replace(' ','')
                                query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(step_2['one_email'])).all()
                                #process หา timeline
                                if (step_2['activity_status'][k] == 'Complete' or step_2['activity_status'][k] =='Reject' or step_2['activity_status'][k] == 'Approve'):
                                    t1 = str(step_2['activity_time'][k])
                                    time_success = change_to_Timestamp(t1)
                                    step_time_1.append(time_success)
                                #สิ้นสุดการหา timeline
                                if len(query_name_account) != 0:
                                    tmp_account_name = eval(query_name_account[0].citizen_data)
                                    try:
                                        tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                    except Exception as e:
                                        tmp_account_name= step_2['one_email']
                                else:
                                    tmp_account_name = step_2['one_email']
                                json_step_info['account_name'] = tmp_account_name
                                json_step_info['step_num'] = step_num

                                list_check_step.append(json_step_info['activity_status'])
                                step_list_data.append(json_step_info)
                        timeline_ = getTimeline(sendtime,step_time_1)
                        json_data_res['timeline'] = timeline_
                        list_timeline = getlistTimeline(sendtime,step_time_1)
                        json_data_res['timeline_list'] = list_timeline
                        json_step_info_2['step_info'] = step_list_data
                    if json_step_info_2['step_status'] == '':
                        if 'Reject' in list_check_step:
                            json_step_info_2['step_status'] = 'Reject'
                            sendtime = json_data_res['send_time']
                            timing_ = timing(time_success,sendtime)
                            json_data_res['timing'] = timing_
                        elif 'Approve' in list_check_step:
                            json_step_info_2['step_status'] = 'Complete'
                            sendtime = json_data_res['send_time']
                            timing_ = timing(time_success,sendtime)
                            json_data_res['timing'] = timing_
                        elif 'Complete' in list_check_step:
                            json_step_info_2['step_status'] = 'Complete'
                            sendtime = json_data_res['send_time']
                            timing_ = timing(time_success,sendtime)
                            json_data_res['timing'] = timing_
                        elif 'Incomplete' in list_check_step:
                            json_step_info_2['step_status'] = 'Incomplete'
                            now = datetime.datetime.now()
                            sendtime = json_data_res['send_time']
                            timing_ = timing(datetime.datetime.timestamp(now),sendtime)
                            json_data_res['timing'] = timing_
                        elif 'Pending' in list_check_step:
                            json_step_info_2['step_status'] = 'Incomplete'
                            now = datetime.datetime.now()
                            sendtime = json_data_res['send_time']
                            timing_ = timing(datetime.datetime.timestamp(now),sendtime)
                            json_data_res['timing'] = timing_
                        else:
                            json_step_info_2['step_status'] = 'Complete'
                            sendtime = json_data_res['send_time']
                            timing_ = timing(time_success,sendtime)
                            json_data_res['timing'] = timing_

                    sum_status_step_list.append(json_step_info_2['step_status'])
                    json_data_res['file_user_status_detail'].append(json_step_info_2)
                    if 'Reject' in sum_status_step_list:
                        status_step_sum = 'Reject'
                        for u in range(len(step_['step_detail'])):
                            step_2 = step_['step_detail'][u]
                            for k in range(len(step_2['activity_code'])):
                                if self.emailUser == str(step_2['one_email']).replace(' ',''):
                                    json_data_res['file_user_status'] = 'Reject'
                                # json_data_res['file_user_status'] = step_2['activity_status'][k]
                    elif 'Incomplete' in sum_status_step_list:
                        status_step_sum = 'Incomplete'
                        for u in range(len(step_['step_detail'])):
                            step_2 = step_['step_detail'][u]
                            if self.emailUser == str(step_2['one_email']).replace(' ',''):
                                for k in range(len(step_2['activity_code'])):
                                    if step_2['activity_code'][k] == 'A03':
                                        json_data_res['file_user_status'] = step_2['activity_status'][k]
                    elif 'Pending' in sum_status_step_list:
                        status_step_sum = 'Incomplete'
                        for u in range(len(step_['step_detail'])):
                            step_2 = step_['step_detail'][u]
                            if self.emailUser == str(step_2['one_email']).replace(' ',''):
                                for k in range(len(step_2['activity_code'])):
                                    if step_2['activity_code'][k] == 'A03':
                                        json_data_res['file_user_status'] = step_2['activity_status'][k]
                    else:
                        status_step_sum = 'Complete'
                        for u in range(len(step_['step_detail'])):
                            step_2 = step_['step_detail'][u]
                            if self.emailUser == str(step_2['one_email']).replace(' ',''):
                                for k in range(len(step_2['activity_code'])):
                                    if step_2['activity_code'][k] == 'A03':
                                        json_data_res['file_user_status'] = step_2['activity_status'][k]
                    json_data_res['file_status_sum'] = status_step_sum
                else:
                    step_status = ''
                    res_status_file = 'Y'
                    step_before = ''
                    step_list_before = []
                    step_list_ = []
                    step_list_next = []
                    arr_step_totle = []
                    step_me = ''
                    step_sum_status = []
                    sum_status_step_list = []
                    list_check_step = []
                    step_list_data = []
                    max_step = (len(step_infomation))
                    sum_status_step = []
                    tmp_status_sum = []
                    arr_email_list = []
                    email_step_sum = []
                    email_one_sum = []
                    time_success = None
                    step_time_1 = []
                    sendtime = json_data_res['send_time']
                    for i in range(len(step_infomation)):
                        list_check_step = []
                        json_step_info_2 = {}
                        step_list_data = []
                        step_status = []
                        step_email = []
                        step_ = step_infomation[i]
                        step_num = step_infomation[i]['step_num']
                        json_step_info_2['step_status'] = ''
                        tmp_step_detail = step_['step_detail']
                        for u in range(len(tmp_step_detail)):
                            tmp_arr_step_detail = tmp_step_detail[u]
                            tmp_status = tmp_arr_step_detail['activity_status']
                            tmp_code = tmp_arr_step_detail['activity_code']
                            tmp_email = str(tmp_arr_step_detail['one_email']).replace(' ','').lower()
                            for s in range(len(tmp_code)):
                                if tmp_code[s] == 'A03':
                                    step_status.append(tmp_status[s])
                                    step_email.append(tmp_email)
                                    email_one_sum.append(tmp_email)
                                    #process หา timeline
                                    if (tmp_arr_step_detail['activity_status'][s] == 'Complete' or tmp_arr_step_detail['activity_status'][s] =='Reject' or tmp_arr_step_detail['activity_status'][s] == 'Approve'):
                                        t1 = str(tmp_arr_step_detail['activity_time'][s])
                                        print ('else activity_time',t1)
                                        time_success = change_to_Timestamp(t1)
                                        step_time_1.append(time_success)
                                    #สิ้นสุดการหา timeline
                            timeline_ = getTimeline(sendtime,step_time_1)
                            json_data_res['timeline'] = timeline_  
                            list_timeline = getlistTimeline(sendtime,step_time_1)
                            json_data_res['timeline_list'] = list_timeline
                        email_step_sum.append(step_email)
                        if 'Reject' in step_status:
                            tmp_status_sum.append('Reject')
                        elif 'Approve' in step_status:
                            tmp_status_sum.append('Complete')
                        elif 'Complete' in step_status:
                            tmp_status_sum.append('Complete')
                        elif 'Incomplete' in step_status:
                            tmp_status_sum.append('Incomplete')
                        elif 'Pending' in step_status:
                            tmp_status_sum.append('Incomplete')
                        else:
                            tmp_status_sum.append('Complete')
                    json_data_res['signpad'] = None
                    if self.emailUser in email_one_sum:
                        for zzi in range(len(step_infomation)):
                            list_check_step = []
                            json_step_info_2 = {}
                            step_list_data = []
                            step_status = []
                            step_ = step_infomation[zzi]
                            step_num = step_infomation[zzi]['step_num']
                            json_step_info_2['step_status'] = ''
                            tmp_step_detail = step_['step_detail']
                            
                            for zi in range(len(tmp_step_detail)):
                                tmp_arr_step_detail_2 = tmp_step_detail[zi]
                                oneMail = str(tmp_arr_step_detail_2['one_email']).replace(' ','').lower()
                                
                                tmp_step_me = int(step_num) - 1
                                step_num_int2 = int(step_num)
                                if 'Reject' in tmp_status_sum:
                                    arr_step_info.append('Reject')
                                elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Incomplete':
                                    if self.emailUser not in arr_email_list:
                                        index_step_me = tmp_step_me
                                        if index_step_me != 0:
                                            while index_step_me > 0:
                                                if len(arr_step_info) == 0:
                                                    index_step_me = index_step_me - 1
                                                    if tmp_status_sum[index_step_me] == 'Incomplete':
                                                        arr_step_info.append('Incomplete')
                                                    else:
                                                        if oneMail == self.emailUser:
                                                            if 'signpad' in step_:
                                                                json_data_res['signpad'] = step_['signpad']
                                                            else:
                                                                json_data_res['signpad'] = None
                                                        arr_step_info.append('Wait')
                                                    arr_email_list.append(self.emailUser)
                                                else:
                                                    index_step_me = index_step_me - 1
                                                    continue
                                        else:
                                            if oneMail == self.emailUser:
                                                if 'signpad' in step_:
                                                    json_data_res['signpad'] = step_['signpad']
                                                else:
                                                    json_data_res['signpad'] = None
                                            arr_step_info.append('Wait')
                                elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Complete':
                                    if self.emailUser not in arr_email_list:
                                        for nz in range(step_num_int2,len(tmp_status_sum),1):
                                            if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                arr_step_info.append('Incomplete')
                                            elif self.emailUser not in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                arr_step_info.append('Progress')
                                        arr_email_list.append(self.emailUser)
                    if 'Reject' in arr_step_info:
                        res_status_file = 'R'
                        res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                    elif 'Wait' in arr_step_info:
                        res_status_file = 'W'
                        res_status_file_string = 'รออนุมัติ'
                    elif 'Incomplete' in arr_step_info:
                        res_status_file = 'Z'
                        res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                    elif 'Progress' in arr_step_info:
                        res_status_file = 'N'
                        res_status_file_string = 'กำลังดำเนินการ'                    
                    elif arr_step_info.count('Incomplete') >= 2:
                        res_status_file = 'Z'
                        res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                    else:
                        res_status_file = 'Y'
                        res_status_file_string = 'อนุมัติแล้ว'
                    json_data_res['status_file_code'] = res_status_file
                    json_data_res['status_file_string'] = res_status_file_string
                    status_step_sum = ''
                    sum_status_step_list = []
                    alr_mail = []
                    json_data_res['step_info'] = eval(result_Select_step.data_json)
                    for i in range(len(step_infomation)):
                        list_check_step = []
                        json_step_info_2 = {}
                        step_list_data = []
                        step_ = step_infomation[i]
                        step_num = step_infomation[i]['step_num']
                        json_step_info_2['step_status'] = ''
                        for u in range(len(step_['step_detail'])):
                            step_2 = step_['step_detail'][u]
                            for k in range(len(step_2['activity_code'])):
                                if step_2['activity_code'][k] == 'A03':
                                    tmp_one_email = str(step_2['one_email']).replace(' ','').lower()
                                    if self.emailUser == tmp_one_email:
                                        if self.emailUser not in alr_mail:

                                            # print(alr_mail ,step_2['activity_status'][k])
                                            if step_2['activity_status'][k] == 'Complete':
                                                # alr_mail.append(step_2['one_email'])
                                                json_data_res['file_user_status'] = step_2['activity_status'][k]
                                            elif step_2['activity_status'][k] == 'Approve':
                                                # alr_mail.append(step_2['one_email'])
                                                json_data_res['file_user_status'] = step_2['activity_status'][k]
                                            else:
                                                alr_mail.append(step_2['one_email'])
                                                json_data_res['file_user_status'] = step_2['activity_status'][k]

                                    print(alr_mail)
                                    json_step_info = {}
                                    json_step_info['activity_status'] = step_2['activity_status'][k]
                                    json_step_info['one_email'] = tmp_one_email
                                    json_step_info['rf_step'] = None
                                    json_step_info['ref_step_num'] = None
                                    if 'rf_step' in step_:
                                        if step_['rf_step'] != None:
                                            json_step_info['rf_step'] = step_['rf_step']
                                            json_step_info['ref_step_num'] = str(step_['rf_step']).split('-')[1]

                                    tmp_account_name = tmp_one_email
                                    if json_step_info['one_email'] != '':
                                        query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(tmp_one_email)).all()
                                        if len(query_name_account) != 0:
                                            try:
                                                tmp_account_name = eval(query_name_account[0].citizen_data)
                                                tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                            except Exception as e:
                                                tmp_account_name = tmp_one_email
                                                exc_type, exc_obj, exc_tb = sys.exc_info()
                                                fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                                                print(exc_type, fname, exc_tb.tb_lineno)
                                    json_step_info['step_num'] = step_num
                                    json_step_info['account_name'] = tmp_account_name
                                    list_check_step.append(json_step_info['activity_status'])
                                    step_list_data.append(json_step_info)
                            json_step_info_2['step_info'] = step_list_data
                        if json_step_info_2['step_status'] == '':
                            if 'Reject' in list_check_step:
                                json_step_info_2['step_status'] = 'Reject'
                            elif 'Approve' in list_check_step:
                                json_step_info_2['step_status'] = 'Complete'
                            elif 'Complete' in list_check_step:
                                json_step_info_2['step_status'] = 'Complete'
                            elif 'Incomplete' in list_check_step:
                                json_step_info_2['step_status'] = 'Incomplete'
                            elif 'Pending' in list_check_step:
                                json_step_info_2['step_status'] = 'Incomplete'
                            else:
                                json_step_info_2['step_status'] = 'Complete'
                        sum_status_step_list.append(json_step_info_2['step_status'])
                        json_data_res['file_user_status_detail'].append(json_step_info_2)
                    if 'Reject' in sum_status_step_list:
                        status_step_sum = 'Reject'
                        sendtime = json_data_res['send_time']
                        timing_ = timing(time_success,sendtime)
                        json_data_res['timing'] = timing_
                    elif 'Incomplete' in sum_status_step_list:
                        status_step_sum = 'Incomplete'
                        now = datetime.datetime.now()
                        sendtime = json_data_res['send_time']
                        timing_ = timing(datetime.datetime.timestamp(now),sendtime)
                        json_data_res['timing'] = timing_
                    elif 'Pending' in sum_status_step_list:
                        status_step_sum = 'Incomplete'
                        now = datetime.datetime.now()
                        sendtime = json_data_res['send_time']
                        timing_ = timing(datetime.datetime.timestamp(now),sendtime)
                        json_data_res['timing'] = timing_
                    elif 'Approve' in sum_status_step_list:
                        status_step_sum = 'Complete'
                        sendtime = json_data_res['send_time']
                        timing_ = timing(time_success,sendtime)
                        json_data_res['timing'] = timing_
                    elif 'Complete' in sum_status_step_list:
                        status_step_sum = 'Complete'
                        sendtime = json_data_res['send_time']
                        timing_ = timing(time_success,sendtime)
                        json_data_res['timing'] = timing_
                    else:
                        status_step_sum = 'Complete'
                        sendtime = json_data_res['send_time']
                        timing_ = timing(time_success,sendtime)
                        json_data_res['timing'] = timing_
                    json_data_res['file_status_sum'] = status_step_sum
                json_data_res['sign_detail'] = sign_detail
                list_data_res.append(json_data_res)
                if len(list_data_res) != 0:
                    return {'result':'OK','messageText':list_data_res,'messageER':None}
                else:
                    return {'result':'ER','messageText':[],'messageER':'not found sidcode'}
            except Exception as ex:
                exc_type, exc_obj, exc_tb = sys.exc_info()
                fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                print(exc_type, fname, exc_tb.tb_lineno)
                return {'result':'ER','messageText':[],'messageER':'notfound data' + str(ex)}


    def select_recpin_db_v1(self,emailUser,sidCode):
        self.sidCode = sidCode
        self.emailUser = emailUser
        json_data_res = {}
        list_data_res = []
        try:
            result_Select_step = paper_lessdatastep.query.filter(paper_lessdatastep.sid==self.sidCode).first()
            result_Select_sender = paper_lesssender.query.filter(paper_lesssender.step_data_sid==self.sidCode).first()
            result_Select_document = paper_lessdocument.query.filter(paper_lessdocument.step_id==self.sidCode).first()
            if result_Select_document.fileid != None:
                result_Select_pdf = paper_lesspdf.query.filter(paper_lesspdf.fid==result_Select_document.fileid).first()
            if result_Select_sender != None:
                json_data_res['template_name'] = None
                json_data_res['condition_template'] = None
                if result_Select_sender.step_code != None:
                    result_template = paper_lessstep.query.filter(paper_lessstep.step_Code==result_Select_sender.step_code,paper_lessstep.status=='ACTIVE').first()
                    if result_template != None:
                        json_data_res['template_name'] = str(result_template.step_Name)
                        json_data_res['condition_template'] = str(result_template.condition_temp)
                json_data_res['tracking_id'] = result_Select_sender.tracking_id
                json_data_res['sender_email'] = result_Select_sender.sender_email
                json_data_res['sender_name'] = result_Select_sender.sender_name
                json_data_res['send_time'] = result_Select_sender.send_time
                json_data_res['sender_position'] = result_Select_sender.sender_position
                date_time_stamp_ = result_Select_sender.send_time.timestamp()
                date_time_stamp_ = int(date_time_stamp_)
                json_data_res['send_time_display'] = convert_datetime_TH_2_display_sendTime(date_time_stamp_)
                json_data_res['send_time_string'] = str(result_Select_sender.send_time).split('+')[0]
                json_data_res['step_code'] = result_Select_sender.step_code
                json_data_res['step_data_sid'] = result_Select_sender.step_data_sid
                json_data_res['document_Id'] = result_Select_sender.doc_id
                json_data_res['file_name'] = result_Select_sender.file_name
                json_data_res['template_webhook'] = result_Select_sender.template_webhook
                try:
                    json_data_res['email_center'] = eval(result_Select_sender.email_center)
                except Exception as e:
                    json_data_res['email_center'] = result_Select_sender.email_center
                json_data_res['status'] = result_Select_sender.status
            if result_Select_document != None:
                if result_Select_document.options_page != None:
                    tmp_option_page = eval(result_Select_document.options_page)
                    json_data_res['options_page_document'] = [tmp_option_page]
                    if 'ca_require' in tmp_option_page:
                        tmp_ca_require = tmp_option_page['ca_require']
                        if type(tmp_ca_require) is bool:
                            json_data_res['digit_sign'] = bool(tmp_ca_require)
                        else:
                            json_data_res['digit_sign'] = ""
                    else:
                        json_data_res['digit_sign'] = bool(result_Select_document.digit_sign)
                else:
                    json_data_res['options_page_document'] = []
                json_data_res['stamp_all'] = result_Select_document.sign_page_options
                json_data_res['document_time'] = int(result_Select_document.timest)
                json_data_res['document_details'] = eval(result_Select_document.documentJson)
                json_data_res['document_details_string'] = str(result_Select_document.documentJson)
                json_data_res['file_id'] = int(result_Select_document.fileid)
                json_data_res['urgent_code'] = result_Select_document.urgent_type
                
                json_data_res['attempted_folder'] = result_Select_document.attempted_folder
            if result_Select_step != None:
                json_data_res['view_details'] = eval(result_Select_step.view_details)
                json_data_res['qrCode_position'] = eval(result_Select_step.qrCode_position)
                if result_Select_step.qrCode_position != None or str(result_Select_step.qrCode_position).replace(' ','') != '':
                    json_data_res['qrCode_status'] = True
                else:
                    json_data_res['qrCode_status'] = False
            if result_Select_pdf != None:
                if result_Select_pdf.string_sign != None:
                    json_data_res['file_status'] = 'Complete'
                else:
                    json_data_res['file_status'] = 'Incomplete'
            step_infomation = eval(result_Select_step.data_json)
            json_data_res['file_user_status_detail'] = []
            arr_step_info = []
            if 'step_num' in step_infomation:
                status_step_sum = ''
                sum_status_step_list = []
                list_check_step = []
                json_step_info_2 = {}
                step_list_data = []
                step_ = step_infomation
                step_num = step_infomation['step_num']
                json_data_res['step_info'] = [eval(result_Select_step.data_json)]
                json_step_info_2['step_status'] = ''
                if 'signpad' in step_:
                    json_data_res['signpad'] = step_['signpad']
                else:
                    json_data_res['signpad'] = None
                for u in range(len(step_['step_detail'])):
                    step_2 = step_['step_detail'][u]
                    for k in range(len(step_2['activity_code'])):
                        if step_2['activity_code'][k] == 'A03':
                            json_step_info = {}
                            json_step_info['activity_status'] = step_2['activity_status'][k]
                            json_step_info['one_email'] = str(step_2['one_email']).replace(' ','')
                            query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(step_2['one_email'])).all()
                            if len(query_name_account) != 0:
                                tmp_account_name = eval(query_name_account[0].citizen_data)
                                try:
                                    tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                except Exception as e:
                                    tmp_account_name= step_2['one_email']
                            else:
                                tmp_account_name = step_2['one_email']
                            json_step_info['account_name'] = tmp_account_name
                            json_step_info['step_num'] = step_num

                            list_check_step.append(json_step_info['activity_status'])
                            step_list_data.append(json_step_info)
                    json_step_info_2['step_info'] = step_list_data
                if json_step_info_2['step_status'] == '':
                    if 'Reject' in list_check_step:
                        json_step_info_2['step_status'] = 'Reject'
                    elif 'Approve' in list_check_step:
                        json_step_info_2['step_status'] = 'Complete'
                    elif 'Complete' in list_check_step:
                        json_step_info_2['step_status'] = 'Complete'
                    elif 'Incomplete' in list_check_step:
                        json_step_info_2['step_status'] = 'Incomplete'
                    elif 'Pending' in list_check_step:
                        json_step_info_2['step_status'] = 'Incomplete'
                    else:
                        json_step_info_2['step_status'] = 'Complete'
                sum_status_step_list.append(json_step_info_2['step_status'])
                json_data_res['file_user_status_detail'].append(json_step_info_2)
                if 'Reject' in sum_status_step_list:
                    status_step_sum = 'Reject'
                    for u in range(len(step_['step_detail'])):
                        step_2 = step_['step_detail'][u]
                        for k in range(len(step_2['activity_code'])):
                            if self.emailUser == str(step_2['one_email']).replace(' ',''):
                                json_data_res['file_user_status'] = 'Reject'
                            # json_data_res['file_user_status'] = step_2['activity_status'][k]
                elif 'Incomplete' in sum_status_step_list:
                    status_step_sum = 'Incomplete'
                    for u in range(len(step_['step_detail'])):
                        step_2 = step_['step_detail'][u]
                        if self.emailUser == str(step_2['one_email']).replace(' ',''):
                            for k in range(len(step_2['activity_code'])):
                                if step_2['activity_code'][k] == 'A03':
                                    json_data_res['file_user_status'] = step_2['activity_status'][k]
                elif 'Pending' in sum_status_step_list:
                    status_step_sum = 'Incomplete'
                    for u in range(len(step_['step_detail'])):
                        step_2 = step_['step_detail'][u]
                        if self.emailUser == str(step_2['one_email']).replace(' ',''):
                            for k in range(len(step_2['activity_code'])):
                                if step_2['activity_code'][k] == 'A03':
                                    json_data_res['file_user_status'] = step_2['activity_status'][k]
                else:
                    status_step_sum = 'Complete'
                    for u in range(len(step_['step_detail'])):
                        step_2 = step_['step_detail'][u]
                        if self.emailUser == str(step_2['one_email']).replace(' ',''):
                            for k in range(len(step_2['activity_code'])):
                                if step_2['activity_code'][k] == 'A03':
                                    json_data_res['file_user_status'] = step_2['activity_status'][k]
                json_data_res['file_status_sum'] = status_step_sum
            else:
                step_status = ''
                res_status_file = 'Y'
                step_before = ''
                step_list_before = []
                step_list_ = []
                step_list_next = []
                arr_step_totle = []
                step_me = ''
                step_sum_status = []
                sum_status_step_list = []
                list_check_step = []
                step_list_data = []
                max_step = (len(step_infomation))
                sum_status_step = []
                tmp_status_sum = []
                arr_email_list = []
                email_step_sum = []
                email_one_sum = []
                for i in range(len(step_infomation)):
                    list_check_step = []
                    json_step_info_2 = {}
                    step_list_data = []
                    step_status = []
                    step_email = []
                    step_ = step_infomation[i]
                    step_num = step_infomation[i]['step_num']
                    json_step_info_2['step_status'] = ''
                    tmp_step_detail = step_['step_detail']
                    for u in range(len(tmp_step_detail)):
                        tmp_arr_step_detail = tmp_step_detail[u]
                        tmp_status = tmp_arr_step_detail['activity_status']
                        tmp_code = tmp_arr_step_detail['activity_code']
                        tmp_email = str(tmp_arr_step_detail['one_email']).replace(' ','').lower()
                        for s in range(len(tmp_code)):
                            if tmp_code[s] == 'A03':
                                step_status.append(tmp_status[s])
                                step_email.append(tmp_email)
                                email_one_sum.append(tmp_email)
                    email_step_sum.append(step_email)
                    if 'Reject' in step_status:
                        tmp_status_sum.append('Reject')
                    elif 'Approve' in step_status:
                        tmp_status_sum.append('Complete')
                    elif 'Complete' in step_status:
                        tmp_status_sum.append('Complete')
                    elif 'Incomplete' in step_status:
                        tmp_status_sum.append('Incomplete')
                    elif 'Pending' in step_status:
                        tmp_status_sum.append('Incomplete')
                    else:
                        tmp_status_sum.append('Complete')
                json_data_res['signpad'] = None
                if self.emailUser in email_one_sum:
                    for zzi in range(len(step_infomation)):
                        list_check_step = []
                        json_step_info_2 = {}
                        step_list_data = []
                        step_status = []
                        step_ = step_infomation[zzi]
                        step_num = step_infomation[zzi]['step_num']
                        json_step_info_2['step_status'] = ''
                        tmp_step_detail = step_['step_detail']
                        
                        for zi in range(len(tmp_step_detail)):
                            tmp_arr_step_detail_2 = tmp_step_detail[zi]
                            oneMail = str(tmp_arr_step_detail_2['one_email']).replace(' ','').lower()
                            
                            tmp_step_me = int(step_num) - 1
                            step_num_int2 = int(step_num)
                            if 'Reject' in tmp_status_sum:
                                arr_step_info.append('Reject')
                            elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Incomplete':
                                if self.emailUser not in arr_email_list:
                                    index_step_me = tmp_step_me
                                    if index_step_me != 0:
                                        while index_step_me > 0:
                                            if len(arr_step_info) == 0:
                                                index_step_me = index_step_me - 1
                                                if tmp_status_sum[index_step_me] == 'Incomplete':
                                                    arr_step_info.append('Incomplete')
                                                else:
                                                    if oneMail == self.emailUser:
                                                        if 'signpad' in step_:
                                                            json_data_res['signpad'] = step_['signpad']
                                                        else:
                                                            json_data_res['signpad'] = None
                                                    arr_step_info.append('Wait')
                                                arr_email_list.append(self.emailUser)
                                            else:
                                                index_step_me = index_step_me - 1
                                                continue
                                    else:
                                        if oneMail == self.emailUser:
                                            if 'signpad' in step_:
                                                json_data_res['signpad'] = step_['signpad']
                                            else:
                                                json_data_res['signpad'] = None
                                        arr_step_info.append('Wait')
                            elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Complete':
                                # print('Complete')
                                if self.emailUser not in arr_email_list:
                                    for nz in range(step_num_int2,len(tmp_status_sum),1):
                                        if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                            arr_step_info.append('Incomplete')
                                        elif self.emailUser not in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                            arr_step_info.append('Progress')
                                    arr_email_list.append(self.emailUser)
                if 'Reject' in arr_step_info:
                    res_status_file = 'R'
                    res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                elif 'Wait' in arr_step_info:
                    res_status_file = 'W'
                    res_status_file_string = 'รออนุมัติ'
                elif 'Incomplete' in arr_step_info:
                    res_status_file = 'Z'
                    res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                elif 'Progress' in arr_step_info:
                    res_status_file = 'N'
                    res_status_file_string = 'กำลังดำเนินการ'                    
                elif arr_step_info.count('Incomplete') >= 2:
                    res_status_file = 'Z'
                    res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                else:
                    res_status_file = 'Y'
                    res_status_file_string = 'อนุมัติแล้ว'
                json_data_res['status_file_code'] = res_status_file
                json_data_res['status_file_string'] = res_status_file_string
                status_step_sum = ''
                sum_status_step_list = []
                alr_mail = []
                json_data_res['step_info'] = eval(result_Select_step.data_json)
                for i in range(len(step_infomation)):
                    list_check_step = []
                    json_step_info_2 = {}
                    step_list_data = []
                    step_ = step_infomation[i]
                    step_num = step_infomation[i]['step_num']
                    json_step_info_2['step_status'] = ''
                    for u in range(len(step_['step_detail'])):
                        step_2 = step_['step_detail'][u]
                        for k in range(len(step_2['activity_code'])):
                            if step_2['activity_code'][k] == 'A03':
                                tmp_one_email = str(step_2['one_email']).replace(' ','').lower()
                                if self.emailUser == tmp_one_email:
                                    if self.emailUser not in alr_mail:

                                        # print(alr_mail ,step_2['activity_status'][k])
                                        if step_2['activity_status'][k] == 'Complete':
                                            # alr_mail.append(step_2['one_email'])
                                            json_data_res['file_user_status'] = step_2['activity_status'][k]
                                        elif step_2['activity_status'][k] == 'Approve':
                                            # alr_mail.append(step_2['one_email'])
                                            json_data_res['file_user_status'] = step_2['activity_status'][k]
                                        else:
                                            alr_mail.append(step_2['one_email'])
                                            json_data_res['file_user_status'] = step_2['activity_status'][k]

                                print(alr_mail)
                                json_step_info = {}
                                json_step_info['activity_status'] = step_2['activity_status'][k]
                                json_step_info['one_email'] = tmp_one_email
                                json_step_info['rf_step'] = None
                                json_step_info['ref_step_num'] = None
                                if 'rf_step' in step_:
                                    if step_['rf_step'] != None:
                                        json_step_info['rf_step'] = step_['rf_step']
                                        json_step_info['ref_step_num'] = str(step_['rf_step']).split('-')[1]

                                tmp_account_name = ''
                                if json_step_info['one_email'] != '':
                                    query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(tmp_one_email)).all()
                                    if len(query_name_account) != 0:
                                        try:
                                            tmp_account_name = eval(query_name_account[0].citizen_data)
                                            tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                        except Exception as e:
                                            tmp_account_name = tmp_one_email
                                            exc_type, exc_obj, exc_tb = sys.exc_info()
                                            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                                            print(exc_type, fname, exc_tb.tb_lineno)
                                json_step_info['step_num'] = step_num
                                json_step_info['account_name'] = tmp_account_name
                                list_check_step.append(json_step_info['activity_status'])
                                step_list_data.append(json_step_info)
                        json_step_info_2['step_info'] = step_list_data
                    if json_step_info_2['step_status'] == '':
                        if 'Reject' in list_check_step:
                            json_step_info_2['step_status'] = 'Reject'
                        elif 'Approve' in list_check_step:
                            json_step_info_2['step_status'] = 'Complete'
                        elif 'Complete' in list_check_step:
                            json_step_info_2['step_status'] = 'Complete'
                        elif 'Incomplete' in list_check_step:
                            json_step_info_2['step_status'] = 'Incomplete'
                        elif 'Pending' in list_check_step:
                            json_step_info_2['step_status'] = 'Incomplete'
                        else:
                            json_step_info_2['step_status'] = 'Complete'
                    sum_status_step_list.append(json_step_info_2['step_status'])
                    json_data_res['file_user_status_detail'].append(json_step_info_2)
                if 'Reject' in sum_status_step_list:
                    status_step_sum = 'Reject'
                elif 'Incomplete' in sum_status_step_list:
                    status_step_sum = 'Incomplete'
                elif 'Pending' in sum_status_step_list:
                    status_step_sum = 'Incomplete'
                elif 'Approve' in sum_status_step_list:
                    status_step_sum = 'Complete'
                elif 'Complete' in sum_status_step_list:
                    status_step_sum = 'Complete'
                else:
                    status_step_sum = 'Complete'
                json_data_res['file_status_sum'] = status_step_sum

            list_data_res.append(json_data_res)
            if len(list_data_res) != 0:
                return {'result':'OK','messageText':list_data_res,'messageER':None}
            else:
                return {'result':'ER','messageText':[],'messageER':'not found sidcode'}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':[],'messageER':'notfound data' + str(ex)}

    def select_sender_one_v3_last(self,userName,sidCode,emailUser):
        self.sidCode = sidCode
        self.userName = userName
        self.emailUser = emailUser
        json_data_res = {}
        list_data_res = []
        try:
            result_Select_step = paper_lessdatastep.query.filter(paper_lessdatastep.sid==self.sidCode).first()
            result_Select_sender = paper_lesssender.query.filter(paper_lesssender.step_data_sid==self.sidCode).first()
            result_Select_document = paper_lessdocument.query.filter(paper_lessdocument.step_id==self.sidCode).first()
            result_Select_pdf = paper_lesspdf.query.filter(paper_lesspdf.fid==result_Select_document.fileid).first()
            if result_Select_sender != None:
                json_data_res['template_name'] = None
                json_data_res['condition_template'] = None
                if result_Select_sender.step_code != None:
                    result_template = paper_lessstep.query.filter(paper_lessstep.step_Code==result_Select_sender.step_code,paper_lessstep.status=='ACTIVE').first()
                    if result_template != None:
                        json_data_res['template_name'] = str(result_template.step_Name)
                        json_data_res['condition_template'] = str(result_template.condition_temp)
                json_data_res['tracking_id'] = result_Select_sender.tracking_id
                json_data_res['sender_email'] = result_Select_sender.sender_email
                json_data_res['sender_name'] = result_Select_sender.sender_name
                json_data_res['send_time'] = result_Select_sender.send_time
                date_time_stamp_ = result_Select_sender.send_time.timestamp()
                date_time_stamp_ = int(date_time_stamp_)
                json_data_res['send_time_display'] = convert_datetime_TH_2_display_sendTime(date_time_stamp_)
                json_data_res['sender_position'] = result_Select_sender.sender_position
                json_data_res['send_time_string'] = str(result_Select_sender.send_time).split('+')[0]
                json_data_res['step_code'] = result_Select_sender.step_code
                json_data_res['step_data_sid'] = result_Select_sender.step_data_sid
                json_data_res['document_Id'] = result_Select_sender.doc_id
                json_data_res['template_webhook'] = result_Select_sender.template_webhook
                json_data_res['email_center'] = result_Select_sender.email_center
                json_data_res['file_name'] = result_Select_sender.file_name
                json_data_res['status'] = result_Select_sender.status
            if result_Select_document != None:
                if result_Select_document.options_page != None:
                    json_data_res['options_page_document'] = [eval(result_Select_document.options_page)]
                    tmp_option_page = eval(result_Select_document.options_page)
                    if 'ca_req' in tmp_option_page:
                        pass
                    
                else:
                    json_data_res['options_page_document'] = []
                json_data_res['document_time'] = int(result_Select_document.timest)
                json_data_res['document_details'] = eval(result_Select_document.documentJson)
                json_data_res['document_details_string'] = str(result_Select_document.documentJson)
                json_data_res['file_id'] = int(result_Select_document.fileid)
                json_data_res['urgent_code'] = result_Select_document.urgent_type
                json_data_res['attempted_folder'] = result_Select_document.attempted_folder
            if result_Select_step != None:
                step_infomation = eval(result_Select_step.data_json)
                if 'step_num' in step_infomation:
                    json_data_res['step_info'] = [eval(result_Select_step.data_json)]
                else:
                    json_data_res['step_info'] = eval(result_Select_step.data_json)
                # json_data_res['step_info_01'] = eval(result_Select_step.data_json)
                json_data_res['view_details'] = eval(result_Select_step.view_details)
                json_data_res['qrCode_position'] = eval(result_Select_step.qrCode_position)
                if result_Select_step.qrCode_position != None or str(result_Select_step.qrCode_position).replace(' ','') != '':
                    json_data_res['qrCode_status'] = True
                else:
                    json_data_res['qrCode_status'] = False
            if result_Select_pdf != None:
                if result_Select_pdf.string_sign != None:
                    json_data_res['file_status'] = 'Complete'
                else:
                    json_data_res['file_status'] = 'InComplete'

            json_data_res['file_user_status_detail'] = []
            arr_step_info = []
            if 'step_num' in step_infomation:
                status_step_sum = ''
                sum_status_step_list = []
                list_check_step = []
                json_step_info_2 = {}
                step_list_data = []
                step_ = step_infomation
                time_success = None
                step_time_1 = []
                sendtime = json_data_res['send_time']
                step_num = step_infomation['step_num']
                json_step_info_2['step_status'] = ''
                for u in range(len(step_['step_detail'])):
                    print(step_['step_detail'][u])
                    step_2 = step_['step_detail'][u]
                    for k in range(len(step_2['activity_code'])):
                        if step_2['activity_code'][k] == 'A03':
                            json_step_info = {}
                            json_step_info['activity_status'] = step_2['activity_status'][k]
                            json_step_info['one_email'] = step_2['one_email']
                            query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(step_2['one_email'])).all()
                            #process หา timeline
                            if (step_2['activity_status'][k] == 'Complete' or step_2['activity_status'][k] =='Reject' or step_2['activity_status'][k] == 'Approve'):
                                t1 = str(step_2['activity_time'][k])
                                print ('if activity_time',t1)
                                time_success = change_to_Timestamp(t1)
                                step_time_1.append(time_success)
                            #สิ้นสุดการหา timeline
                            if len(query_name_account) != 0:
                                tmp_account_name = eval(query_name_account[0].citizen_data)
                                try:
                                    tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                except Exception as e:
                                    tmp_account_name=step_2['one_email']
                            else:
                                tmp_account_name = step_2['one_email']
                            json_step_info['account_name'] = tmp_account_name
                            json_step_info['step_num'] = step_num
                            list_check_step.append(json_step_info['activity_status'])
                            step_list_data.append(json_step_info)
                    json_step_info_2['step_info'] = step_list_data
                    if json_step_info_2['step_status'] == '':
                        if 'Reject' in list_check_step:
                            json_step_info_2['step_status'] = 'Reject'
                        elif 'Complete' in list_check_step:
                            json_step_info_2['step_status'] = 'Complete'
                        elif 'Approve' in list_check_step:
                            json_step_info_2['step_status'] = 'Complete'
                        elif 'Incomplete' in list_check_step:
                            json_step_info_2['step_status'] = 'Incomplete'
                        elif 'Pending' in list_check_step:
                            json_step_info_2['step_status'] = 'Incomplete'
                        else:
                            json_step_info_2['step_status'] = 'Complete'
                    
                    sum_status_step_list.append(json_step_info_2['step_status'])
                    timeline_ = getTimeline(sendtime,step_time_1)
                    list_timeline = getlistTimeline(sendtime,step_time_1)
                    json_data_res['timeline'] = timeline_
                    json_data_res['timeline_list'] = list_timeline
                json_data_res['file_user_status_detail'].append(json_step_info_2)
                if 'Reject' in sum_status_step_list:
                    status_step_sum = 'Reject'
                    sendtime = json_data_res['send_time']
                    timing_ = timing(time_success,sendtime)
                    json_data_res['timing'] = timing_
                elif 'Incomplete' in sum_status_step_list:
                    status_step_sum = 'Incomplete'
                    now = datetime.datetime.now()
                    sendtime = json_data_res['send_time']
                    timing_ = timing(datetime.datetime.timestamp(now),sendtime)
                    json_data_res['timing'] = timing_
                elif 'Pending' in sum_status_step_list:
                    status_step_sum = 'Incomplete'
                    now = datetime.datetime.now()
                    sendtime = json_data_res['send_time']
                    timing_ = timing(datetime.datetime.timestamp(now),sendtime)
                    json_data_res['timing'] = timing_
                elif 'Complete' in sum_status_step_list:
                    status_step_sum = 'Complete'
                    sendtime = json_data_res['send_time']
                    timing_ = timing(time_success,sendtime)
                    json_data_res['timing'] = timing_
                elif 'Approve' in sum_status_step_list:
                    status_step_sum = 'Complete'
                    sendtime = json_data_res['send_time']
                    timing_ = timing(time_success,sendtime)
                    json_data_res['timing'] = timing_
                else:
                    status_step_sum = 'Complete'
                    sendtime = json_data_res['send_time']
                    timing_ = timing(time_success,sendtime)
                    json_data_res['timing'] = timing_
                json_data_res['file_status_sum'] = status_step_sum
            else:
                step_status = ''
                res_status_file = 'Y'
                res_status_file_string = 'อนุมัติแล้ว'
                step_before = ''
                step_list_before = []
                step_list_ = []
                step_list_next = []
                arr_step_totle = []
                step_me = ''
                step_sum_status = []
                sum_status_step_list = []
                list_check_step = []
                step_list_data = []
                max_step = (len(step_infomation))
                step_infomation = step_infomation
                sum_status_step = []
                tmp_status_sum = []
                arr_email_list = []
                email_step_sum = []
                email_one_sum = []
                time_success = None
                step_time_1 = []
                sendtime = json_data_res['send_time']
                for i in range(len(step_infomation)):
                    list_check_step = []
                    json_step_info_2 = {}
                    step_list_data = []
                    step_status = []
                    step_email = []
                    step_ = step_infomation[i]
                    step_num = step_infomation[i]['step_num']
                    json_step_info_2['step_status'] = ''
                    tmp_step_detail = step_['step_detail']
                    for u in range(len(tmp_step_detail)):
                        tmp_arr_step_detail = tmp_step_detail[u]
                        tmp_status = tmp_arr_step_detail['activity_status']
                        tmp_code = tmp_arr_step_detail['activity_code']
                        tmp_email = tmp_arr_step_detail['one_email']
                        for s in range(len(tmp_code)):
                            if tmp_code[s] == 'A03':
                                step_status.append(tmp_status[s])
                                step_email.append(tmp_email)
                                email_one_sum.append(tmp_email)
                                #process หา timeline
                                if (tmp_arr_step_detail['activity_status'][s] == 'Complete' or tmp_arr_step_detail['activity_status'][s] =='Reject' or tmp_arr_step_detail['activity_status'][s] == 'Approve'):
                                    t1 = str(tmp_arr_step_detail['activity_time'][s])
                                    print ('else activity_time',t1)
                                    time_success = change_to_Timestamp(t1)
                                    step_time_1.append(time_success)
                                #สิ้นสุดการหา timeline
                        timeline_ = getTimeline(sendtime,step_time_1)
                        list_timeline = getlistTimeline(sendtime,step_time_1)
                        print(list_timeline)
                        json_data_res['timeline'] = timeline_
                        json_data_res['timeline_list'] = list_timeline
                    email_step_sum.append(step_email)
                    if 'Reject' in step_status:
                        tmp_status_sum.append('Reject')
                    elif 'Approve' in step_status:
                        tmp_status_sum.append('Complete')
                    elif 'Complete' in step_status:
                        tmp_status_sum.append('Complete')
                    elif 'Incomplete' in step_status:
                        tmp_status_sum.append('Incomplete')
                    elif 'Pending' in step_status:
                        tmp_status_sum.append('Incomplete')
                    else:
                        tmp_status_sum.append('Complete')
                if self.emailUser in email_one_sum:
                    for zzi in range(len(step_infomation)):
                        list_check_step = []
                        json_step_info_2 = {}
                        step_list_data = []
                        step_status = []
                        step_ = step_infomation[zzi]
                        step_num = step_infomation[zzi]['step_num']
                        json_step_info_2['step_status'] = ''
                        tmp_step_detail = step_['step_detail']
                        for zi in range(len(tmp_step_detail)):
                            tmp_arr_step_detail_2 = tmp_step_detail[zi]
                            oneMail = tmp_arr_step_detail_2['one_email']
                            tmp_step_me = int(step_num) - 1
                            step_num_int2 = int(step_num)
                            if 'Reject' in tmp_status_sum:
                                arr_step_info.append('Reject')
                            elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Incomplete':
                                if self.emailUser not in arr_email_list:
                                    index_step_me = tmp_step_me
                                    if index_step_me != 0:
                                        while index_step_me > 0:
                                            if len(arr_step_info) == 0:
                                                index_step_me = index_step_me - 1
                                                if tmp_status_sum[index_step_me] == 'Incomplete':
                                                    arr_step_info.append('Incomplete')
                                                else:
                                                    arr_step_info.append('Wait')
                                                arr_email_list.append(self.emailUser)
                                            else:
                                                index_step_me = index_step_me - 1
                                                continue
                                    else:
                                        arr_step_info.append('Wait')
                            elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Complete':
                                # print('Complete')
                                if self.emailUser not in arr_email_list:
                                    for nz in range(step_num_int2,len(tmp_status_sum),1):
                                        if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                            arr_step_info.append('Incomplete')
                                        elif self.emailUser not in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                            arr_step_info.append('Progress')
                                    arr_email_list.append(self.emailUser)
                else:
                    for zzi in range(len(step_infomation)):
                        list_check_step = []
                        json_step_info_2 = {}
                        step_list_data = []
                        step_status = []
                        step_ = step_infomation[zzi]
                        step_num = step_infomation[zzi]['step_num']
                        json_step_info_2['step_status'] = ''
                        tmp_step_detail = step_['step_detail']
                        for zi in range(len(tmp_step_detail)):
                            tmp_arr_step_detail_2 = tmp_step_detail[zi]
                            oneMail = tmp_arr_step_detail_2['one_email']
                            tmp_step_me = int(step_num) - 1
                            step_num_int2 = int(step_num)
                            if 'Reject' in tmp_status_sum:
                                arr_step_info.append('Reject')
                            elif 'Incomplete' in tmp_status_sum:
                                arr_step_info.append('Progress')
                        # print(tmp_status_sum)


                if 'Reject' in arr_step_info:
                    res_status_file = 'R'
                    res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                elif 'Wait' in arr_step_info:
                    res_status_file = 'W'
                    res_status_file_string = 'รออนุมัติ'
                elif 'Incomplete' in arr_step_info:
                    res_status_file = 'Z'
                    res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                elif 'Progress' in arr_step_info:
                    res_status_file = 'N'
                    res_status_file_string = 'กำลังดำเนินการ'                    
                elif arr_step_info.count('Incomplete') >= 2:
                    res_status_file = 'Z'
                    res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                else:
                    res_status_file = 'Y'
                    res_status_file_string = 'อนุมัติแล้ว'
                json_data_res['status_file_code'] = res_status_file
                json_data_res['status_file_string'] = res_status_file_string
                status_step_sum = ''
                sum_status_step_list = []
                for i in range(len(step_infomation)):
                    list_check_step = []
                    json_step_info_2 = {}
                    step_list_data = []
                    step_ = step_infomation[i]
                    step_num = step_infomation[i]['step_num']
                    json_step_info_2['step_status'] = ''
                    for u in range(len(step_['step_detail'])):
                        step_2 = step_['step_detail'][u]
                        for k in range(len(step_2['activity_code'])):
                            if step_2['activity_code'][k] == 'A03':
                                json_step_info = {}
                                json_step_info['activity_status'] = step_2['activity_status'][k]
                                json_step_info['one_email'] = step_2['one_email']
                                query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(step_2['one_email'])).all()
                                if len(query_name_account) != 0:
                                    tmp_account_name = eval(query_name_account[0].citizen_data)
                                    try:
                                        tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                    except Exception as e:
                                        tmp_account_name = step_2['one_email']
                                else:
                                    tmp_account_name = step_2['one_email']
                                json_step_info['account_name'] = tmp_account_name
                                json_step_info['step_num'] = step_num
                                list_check_step.append(json_step_info['activity_status'])
                                step_list_data.append(json_step_info)
                        json_step_info_2['step_info'] = step_list_data
                    if json_step_info_2['step_status'] == '':
                        if 'Reject' in list_check_step:
                            json_step_info_2['step_status'] = 'Reject'
                        elif 'Complete' in list_check_step:
                            json_step_info_2['step_status'] = 'Complete'
                        elif 'Approve' in list_check_step:
                            json_step_info_2['step_status'] = 'Complete'
                        elif 'Incomplete' in list_check_step:
                            json_step_info_2['step_status'] = 'Incomplete'
                        elif 'Pending' in list_check_step:
                            json_step_info_2['step_status'] = 'Incomplete'
                        else:
                            json_step_info_2['step_status'] = 'Complete'
                    sum_status_step_list.append(json_step_info_2['step_status'])
                    json_data_res['file_user_status_detail'].append(json_step_info_2)
                if 'Reject' in sum_status_step_list:
                    status_step_sum = 'Reject'
                    sendtime = json_data_res['send_time']
                    timing_ = timing(time_success,sendtime)
                    json_data_res['timing'] = timing_
                elif 'Incomplete' in sum_status_step_list:
                    status_step_sum = 'Incomplete'
                    now = datetime.datetime.now()
                    sendtime = json_data_res['send_time']
                    timing_ = timing(datetime.datetime.timestamp(now),sendtime)
                    json_data_res['timing'] = timing_
                elif 'Pending' in sum_status_step_list:
                    status_step_sum = 'Incomplete'
                    now = datetime.datetime.now()
                    sendtime = json_data_res['send_time']
                    timing_ = timing(datetime.datetime.timestamp(now),sendtime)
                    json_data_res['timing'] = timing_
                elif 'Complete' in sum_status_step_list:
                    status_step_sum = 'Complete'
                    sendtime = json_data_res['send_time']
                    timing_ = timing(time_success,sendtime)
                    json_data_res['timing'] = timing_
                elif 'Approve' in sum_status_step_list:
                    status_step_sum = 'Complete'
                    sendtime = json_data_res['send_time']
                    timing_ = timing(time_success,sendtime)
                    json_data_res['timing'] = timing_
                else:
                    status_step_sum = 'Complete'
                    sendtime = json_data_res['send_time']
                    timing_ = timing(time_success,sendtime)
                    json_data_res['timing'] = timing_
                json_data_res['file_status_sum'] = status_step_sum

            list_data_res.append(json_data_res)
            if len(list_data_res) != 0:
                return {'result':'OK','messageText':list_data_res,'messageER':None}
            else:
                return {'result':'ER','messageText':[],'messageER':'not found sidcode'}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':[],'messageER':'notfound data' + str(ex)}


    # def select_sender_db_v3(self,userName,sidCode,emailUser):
    #     self.sidCode = sidCode
    #     self.userName = userName
    #     self.emailUser = emailUser
    #     json_data_res = {}
    #     list_data_res = []
    #     try:
    #         result_Select_step = paper_lessdatastep.query.filter(paper_lessdatastep.sid==self.sidCode).first()
    #         result_Select_sender = paper_lesssender.query.filter(paper_lesssender.step_data_sid==self.sidCode).first()
    #         result_Select_document = paper_lessdocument.query.filter(paper_lessdocument.step_id==self.sidCode).first()
    #         # result_Select_pdf = paper_lesspdf.query.filter(paper_lesspdf.fid==result_Select_document.fileid).first()
    #         if result_Select_sender != None:
    #             json_data_res['template_name'] = None
    #             json_data_res['condition_template'] = None
    #             if result_Select_sender.step_code != None:
    #                 result_template = paper_lessstep.query.filter(paper_lessstep.step_Code==result_Select_sender.step_code,paper_lessstep.status=='ACTIVE').first()
    #                 if result_template != None:
    #                     json_data_res['template_name'] = str(result_template.step_Name)
    #                     json_data_res['condition_template'] = str(result_template.condition_temp)
    #             json_data_res['tracking_id'] = result_Select_sender.tracking_id
    #             json_data_res['sender_email'] = result_Select_sender.sender_email
    #             json_data_res['sender_name'] = result_Select_sender.sender_name
    #             json_data_res['send_time'] = result_Select_sender.send_time
    #             date_time_stamp_ = result_Select_sender.send_time.timestamp()
    #             date_time_stamp_ = int(date_time_stamp_)
    #             json_data_res['send_time_display'] = convert_datetime_TH_2_display_sendTime(date_time_stamp_)
    #             json_data_res['sender_position'] = result_Select_sender.sender_position
    #             json_data_res['send_time_string'] = str(result_Select_sender.send_time).split('+')[0]
    #             json_data_res['step_code'] = result_Select_sender.step_code
    #             json_data_res['step_data_sid'] = result_Select_sender.step_data_sid
    #             json_data_res['document_Id'] = result_Select_sender.doc_id
    #             json_data_res['template_webhook'] = result_Select_sender.template_webhook
    #             json_data_res['email_center'] = result_Select_sender.email_center
    #             json_data_res['file_name'] = result_Select_sender.file_name
    #             json_data_res['status'] = result_Select_sender.status
    #             result_url = get_url_image_pdf_v1(self.sidCode)
    #             if result_url['result'] == 'OK':
    #                 tmpmessageText = result_url['messageText']
    #                 tmp_url_image = tmpmessageText
    #                 # print(tmp_url_image)
    #             else:
    #                 tmp_url_image = []
    #             json_data_res['url_image'] = tmp_url_image
    #         if result_Select_document != None:
    #             if result_Select_document.options_page != None:
    #                 json_data_res['options_page_document'] = [eval(result_Select_document.options_page)]
    #                 tmp_option_page = eval(result_Select_document.options_page)
    #                 if 'ca_req' in tmp_option_page:
    #                     pass
                    
    #             else:
    #                 json_data_res['options_page_document'] = []
    #             json_data_res['document_time'] = int(result_Select_document.timest)
    #             json_data_res['document_details'] = eval(result_Select_document.documentJson)
    #             json_data_res['document_details_string'] = str(result_Select_document.documentJson)
    #             json_data_res['file_id'] = int(result_Select_document.fileid)
    #             json_data_res['urgent_code'] = result_Select_document.urgent_type
    #             json_data_res['attempted_folder'] = result_Select_document.attempted_folder
    #         if result_Select_step != None:
    #             step_infomation = eval(result_Select_step.data_json)
    #             if 'step_num' in step_infomation:
    #                 json_data_res['step_info'] = [eval(result_Select_step.data_json)]
    #             else:
    #                 json_data_res['step_info'] = eval(result_Select_step.data_json)
    #             # json_data_res['step_info_01'] = eval(result_Select_step.data_json)
    #             json_data_res['view_details'] = eval(result_Select_step.view_details)
    #             json_data_res['qrCode_position'] = eval(result_Select_step.qrCode_position)
    #             if result_Select_step.qrCode_position != None or str(result_Select_step.qrCode_position).replace(' ','') != '':
    #                 json_data_res['qrCode_status'] = True
    #             else:
    #                 json_data_res['qrCode_status'] = False
    #         # if result_Select_pdf != None:
    #         #     if result_Select_pdf.string_sign != None:
    #         #         json_data_res['file_status'] = 'Complete'
    #         #     else:
    #         #         json_data_res['file_status'] = 'Incomplete'

    #         json_data_res['file_user_status_detail'] = []
    #         arr_step_info = []
    #         if 'step_num' in step_infomation:
    #             status_step_sum = ''
    #             sum_status_step_list = []
    #             list_check_step = []
    #             json_step_info_2 = {}
    #             step_list_data = []
    #             step_ = step_infomation
    #             time_success = None
    #             step_time_1 = []
    #             sendtime = json_data_res['send_time']
    #             step_num = step_infomation['step_num']
    #             json_step_info_2['step_status'] = ''
    #             for u in range(len(step_['step_detail'])):
    #                 print(step_['step_detail'][u])
    #                 step_2 = step_['step_detail'][u]
    #                 for k in range(len(step_2['activity_code'])):
    #                     if step_2['activity_code'][k] == 'A03':
    #                         json_step_info = {}
    #                         tmp_one_email = step_2['one_email']
    #                         json_step_info['activity_status'] = step_2['activity_status'][k]
    #                         json_step_info['rf_step'] = None
    #                         json_step_info['ref_step_num'] = None
    #                         json_step_info['one_email'] = step_2['one_email']
    #                         tmp_account_name = tmp_one_email
    #                         tmp_account_name_eng = tmp_one_email
    #                         if json_step_info['one_email'] != '':
    #                             result_name_eng = find_name_surename_by_username(tmp_one_email)
    #                             tmp_account_name_eng = result_name_eng
    #                             query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(tmp_one_email)).all()
    #                             if len(query_name_account) != 0:
    #                                 try:
    #                                     tmp_account_name = eval(query_name_account[0].citizen_data)
    #                                     tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
    #                                 except Exception as e:
    #                                     tmp_account_name = tmp_one_email
    #                                     exc_type, exc_obj, exc_tb = sys.exc_info()
    #                                     fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
    #                                     print(exc_type, fname, exc_tb.tb_lineno)
    #                         #process หา timeline
    #                         if (step_2['activity_status'][k] == 'Complete' or step_2['activity_status'][k] =='Reject' or step_2['activity_status'][k] == 'Approve'):
    #                             t1 = str(step_2['activity_time'][k])
    #                             print ('if activity_time',t1)
    #                             time_success = change_to_Timestamp(t1)
    #                             step_time_1.append(time_success)
    #                         #สิ้นสุดการหา timeline
    #                         # if len(query_name_account) != 0:
    #                         #     tmp_account_name = eval(query_name_account[0].citizen_data)
    #                         #     try:
    #                         #         tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
    #                         #     except Exception as e:
    #                         #         tmp_account_name=step_2['one_email']
    #                         # else:
    #                         #     tmp_account_name = step_2['one_email']
    #                         json_step_info['account_name'] = tmp_account_name
    #                         json_step_info['step_num'] = step_num
    #                         list_check_step.append(json_step_info['activity_status'])
    #                         step_list_data.append(json_step_info)
    #                 json_step_info_2['step_info'] = step_list_data
    #                 if json_step_info_2['step_status'] == '':
    #                     if 'Reject' in list_check_step:
    #                         json_step_info_2['step_status'] = 'Reject'
    #                     elif 'Complete' in list_check_step:
    #                         json_step_info_2['step_status'] = 'Complete'
    #                     elif 'Approve' in list_check_step:
    #                         json_step_info_2['step_status'] = 'Complete'
    #                     elif 'Incomplete' in list_check_step:
    #                         json_step_info_2['step_status'] = 'Incomplete'
    #                     elif 'Pending' in list_check_step:
    #                         json_step_info_2['step_status'] = 'Incomplete'
    #                     else:
    #                         json_step_info_2['step_status'] = 'Complete'
                    
    #                 sum_status_step_list.append(json_step_info_2['step_status'])
    #                 timeline_ = getTimeline(sendtime,step_time_1)
    #                 list_timeline = getlistTimeline(sendtime,step_time_1)
    #                 json_data_res['timeline'] = timeline_
    #                 json_data_res['timeline_list'] = list_timeline
    #             json_data_res['file_user_status_detail'].append(json_step_info_2)
    #             if 'Reject' in sum_status_step_list:
    #                 status_step_sum = 'Reject'
    #                 sendtime = json_data_res['send_time']
    #                 timing_ = timing(time_success,sendtime)
    #                 json_data_res['timing'] = timing_
    #             elif 'Incomplete' in sum_status_step_list:
    #                 status_step_sum = 'Incomplete'
    #                 now = datetime.datetime.now()
    #                 sendtime = json_data_res['send_time']
    #                 timing_ = timing(datetime.datetime.timestamp(now),sendtime)
    #                 json_data_res['timing'] = timing_
    #             elif 'Pending' in sum_status_step_list:
    #                 status_step_sum = 'Incomplete'
    #                 now = datetime.datetime.now()
    #                 sendtime = json_data_res['send_time']
    #                 timing_ = timing(datetime.datetime.timestamp(now),sendtime)
    #                 json_data_res['timing'] = timing_
    #             elif 'Complete' in sum_status_step_list:
    #                 status_step_sum = 'Complete'
    #                 sendtime = json_data_res['send_time']
    #                 timing_ = timing(time_success,sendtime)
    #                 json_data_res['timing'] = timing_
    #             elif 'Approve' in sum_status_step_list:
    #                 status_step_sum = 'Complete'
    #                 sendtime = json_data_res['send_time']
    #                 timing_ = timing(time_success,sendtime)
    #                 json_data_res['timing'] = timing_
    #             else:
    #                 status_step_sum = 'Complete'
    #                 sendtime = json_data_res['send_time']
    #                 timing_ = timing(time_success,sendtime)
    #                 json_data_res['timing'] = timing_
    #             json_data_res['file_status_sum'] = status_step_sum
    #         else:
    #             step_status = ''
    #             res_status_file = 'Y'
    #             res_status_file_string = 'อนุมัติแล้ว'
    #             step_before = ''
    #             step_list_before = []
    #             step_list_ = []
    #             step_list_next = []
    #             arr_step_totle = []
    #             step_me = ''
    #             step_sum_status = []
    #             sum_status_step_list = []
    #             list_check_step = []
    #             step_list_data = []
    #             max_step = (len(step_infomation))
    #             step_infomation = step_infomation
    #             sum_status_step = []
    #             tmp_status_sum = []
    #             arr_email_list = []
    #             email_step_sum = []
    #             email_one_sum = []
    #             time_success = None
    #             step_time_1 = []
    #             sendtime = json_data_res['send_time']
    #             for i in range(len(step_infomation)):
    #                 list_check_step = []
    #                 json_step_info_2 = {}
    #                 step_list_data = []
    #                 step_status = []
    #                 step_email = []
    #                 step_ = step_infomation[i]
    #                 step_num = step_infomation[i]['step_num']
    #                 json_step_info_2['step_status'] = ''
    #                 tmp_step_detail = step_['step_detail']
    #                 for u in range(len(tmp_step_detail)):
    #                     tmp_arr_step_detail = tmp_step_detail[u]
    #                     tmp_status = tmp_arr_step_detail['activity_status']
    #                     tmp_code = tmp_arr_step_detail['activity_code']
    #                     tmp_email = tmp_arr_step_detail['one_email']
    #                     for s in range(len(tmp_code)):
    #                         if tmp_code[s] == 'A03':
    #                             step_status.append(tmp_status[s])
    #                             step_email.append(tmp_email)
    #                             email_one_sum.append(tmp_email)
    #                             #process หา timeline
    #                             if (tmp_arr_step_detail['activity_status'][s] == 'Complete' or tmp_arr_step_detail['activity_status'][s] =='Reject' or tmp_arr_step_detail['activity_status'][s] == 'Approve'):
    #                                 t1 = str(tmp_arr_step_detail['activity_time'][s])
    #                                 print ('else activity_time',t1)
    #                                 time_success = change_to_Timestamp(t1)
    #                                 step_time_1.append(time_success)
    #                             #สิ้นสุดการหา timeline
    #                     timeline_ = getTimeline(sendtime,step_time_1)
    #                     list_timeline = getlistTimeline(sendtime,step_time_1)
    #                     print(list_timeline)
    #                     json_data_res['timeline'] = timeline_
    #                     json_data_res['timeline_list'] = list_timeline
    #                 email_step_sum.append(step_email)
    #                 if 'Reject' in step_status:
    #                     tmp_status_sum.append('Reject')
    #                 elif 'Approve' in step_status:
    #                     tmp_status_sum.append('Complete')
    #                 elif 'Complete' in step_status:
    #                     tmp_status_sum.append('Complete')
    #                 elif 'Incomplete' in step_status:
    #                     tmp_status_sum.append('Incomplete')
    #                 elif 'Pending' in step_status:
    #                     tmp_status_sum.append('Incomplete')
    #                 else:
    #                     tmp_status_sum.append('Complete')
    #             if self.emailUser in email_one_sum:
    #                 for zzi in range(len(step_infomation)):
    #                     list_check_step = []
    #                     json_step_info_2 = {}
    #                     step_list_data = []
    #                     step_status = []
    #                     step_ = step_infomation[zzi]
    #                     step_num = step_infomation[zzi]['step_num']
    #                     json_step_info_2['step_status'] = ''
    #                     tmp_step_detail = step_['step_detail']
    #                     for zi in range(len(tmp_step_detail)):
    #                         tmp_arr_step_detail_2 = tmp_step_detail[zi]
    #                         oneMail = tmp_arr_step_detail_2['one_email']
    #                         tmp_step_me = int(step_num) - 1
    #                         step_num_int2 = int(step_num)
    #                         if 'Reject' in tmp_status_sum:
    #                             arr_step_info.append('Reject')
    #                         elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Incomplete':
    #                             if self.emailUser not in arr_email_list:
    #                                 index_step_me = tmp_step_me
    #                                 if index_step_me != 0:
    #                                     while index_step_me > 0:
    #                                         if len(arr_step_info) == 0:
    #                                             index_step_me = index_step_me - 1
    #                                             if tmp_status_sum[index_step_me] == 'Incomplete':
    #                                                 arr_step_info.append('Incomplete')
    #                                             else:
    #                                                 arr_step_info.append('Wait')
    #                                             arr_email_list.append(self.emailUser)
    #                                         else:
    #                                             index_step_me = index_step_me - 1
    #                                             continue
    #                                 else:
    #                                     arr_step_info.append('Wait')
    #                         elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Complete':
    #                             # print('Complete')
    #                             if self.emailUser not in arr_email_list:
    #                                 for nz in range(step_num_int2,len(tmp_status_sum),1):
    #                                     if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
    #                                         arr_step_info.append('Incomplete')
    #                                     elif self.emailUser not in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
    #                                         arr_step_info.append('Progress')
    #                                 arr_email_list.append(self.emailUser)
    #             else:
    #                 for zzi in range(len(step_infomation)):
    #                     list_check_step = []
    #                     json_step_info_2 = {}
    #                     step_list_data = []
    #                     step_status = []
    #                     step_ = step_infomation[zzi]
    #                     step_num = step_infomation[zzi]['step_num']
    #                     json_step_info_2['step_status'] = ''
    #                     tmp_step_detail = step_['step_detail']
    #                     for zi in range(len(tmp_step_detail)):
    #                         tmp_arr_step_detail_2 = tmp_step_detail[zi]
    #                         oneMail = tmp_arr_step_detail_2['one_email']
    #                         tmp_step_me = int(step_num) - 1
    #                         step_num_int2 = int(step_num)
    #                         if 'Reject' in tmp_status_sum:
    #                             arr_step_info.append('Reject')
    #                         elif 'Incomplete' in tmp_status_sum:
    #                             arr_step_info.append('Progress')
    #                     # print(tmp_status_sum)


    #             if 'Reject' in arr_step_info:
    #                 res_status_file = 'R'
    #                 res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
    #             elif 'Wait' in arr_step_info:
    #                 res_status_file = 'W'
    #                 res_status_file_string = 'รออนุมัติ'
    #             elif 'Incomplete' in arr_step_info:
    #                 res_status_file = 'Z'
    #                 res_status_file_string = 'อยู่ในช่วงดำเนินการ'
    #             elif 'Progress' in arr_step_info:
    #                 res_status_file = 'N'
    #                 res_status_file_string = 'กำลังดำเนินการ'                    
    #             elif arr_step_info.count('Incomplete') >= 2:
    #                 res_status_file = 'Z'
    #                 res_status_file_string = 'อยู่ในช่วงดำเนินการ'
    #             else:
    #                 res_status_file = 'Y'
    #                 res_status_file_string = 'อนุมัติแล้ว'
    #             json_data_res['status_file_code'] = res_status_file
    #             json_data_res['status_file_string'] = res_status_file_string
    #             status_step_sum = ''
    #             sum_status_step_list = []
    #             for i in range(len(step_infomation)):
    #                 list_check_step = []
    #                 json_step_info_2 = {}
    #                 step_list_data = []
    #                 step_ = step_infomation[i]
    #                 step_num = step_infomation[i]['step_num']
    #                 json_step_info_2['step_status'] = ''
    #                 for u in range(len(step_['step_detail'])):
    #                     step_2 = step_['step_detail'][u]
    #                     for k in range(len(step_2['activity_code'])):
    #                         if step_2['activity_code'][k] == 'A03':
    #                             json_step_info = {}
    #                             tmp_one_email = step_2['one_email']
    #                             json_step_info['activity_status'] = step_2['activity_status'][k]
    #                             json_step_info['rf_step'] = None
    #                             json_step_info['ref_step_num'] = None
    #                             json_step_info['one_email'] = step_2['one_email']
    #                             tmp_account_name = tmp_one_email
    #                             tmp_account_name_eng = tmp_one_email
    #                             if json_step_info['one_email'] != '':
    #                                 result_name_eng = find_name_surename_by_username(tmp_one_email)
    #                                 tmp_account_name_eng = result_name_eng
    #                                 query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(tmp_one_email)).all()
    #                                 if len(query_name_account) != 0:
    #                                     try:
    #                                         tmp_account_name = eval(query_name_account[0].citizen_data)
    #                                         tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
    #                                     except Exception as e:
    #                                         tmp_account_name = tmp_one_email
    #                                         exc_type, exc_obj, exc_tb = sys.exc_info()
    #                                         fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
    #                                         print(exc_type, fname, exc_tb.tb_lineno)
    #                             # json_step_info['activity_status'] = step_2['activity_status'][k]
    #                             # json_step_info['one_email'] = step_2['one_email']
    #                             # query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(step_2['one_email'])).all()
    #                             # if len(query_name_account) != 0:
    #                             #     tmp_account_name = eval(query_name_account[0].citizen_data)
    #                             #     try:
    #                             #         tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
    #                             #     except Exception as e:
    #                             #         tmp_account_name = step_2['one_email']
    #                             # else:
    #                             #     tmp_account_name = step_2['one_email']
    #                             json_step_info['account_name'] = tmp_account_name
    #                             json_step_info['account_name_eng'] = tmp_account_name_eng
    #                             json_step_info['step_num'] = step_num
    #                             list_check_step.append(json_step_info['activity_status'])
    #                             step_list_data.append(json_step_info)
    #                     json_step_info_2['step_info'] = step_list_data
    #                 if json_step_info_2['step_status'] == '':
    #                     if 'Reject' in list_check_step:
    #                         json_step_info_2['step_status'] = 'Reject'
    #                     elif 'Complete' in list_check_step:
    #                         json_step_info_2['step_status'] = 'Complete'
    #                     elif 'Approve' in list_check_step:
    #                         json_step_info_2['step_status'] = 'Complete'
    #                     elif 'Incomplete' in list_check_step:
    #                         json_step_info_2['step_status'] = 'Incomplete'
    #                     elif 'Pending' in list_check_step:
    #                         json_step_info_2['step_status'] = 'Incomplete'
    #                     else:
    #                         json_step_info_2['step_status'] = 'Complete'
    #                 sum_status_step_list.append(json_step_info_2['step_status'])
    #                 json_data_res['file_user_status_detail'].append(json_step_info_2)
    #             if 'Reject' in sum_status_step_list:
    #                 status_step_sum = 'Reject'
    #                 sendtime = json_data_res['send_time']
    #                 timing_ = timing(time_success,sendtime)
    #                 json_data_res['timing'] = timing_
    #             elif 'Incomplete' in sum_status_step_list:
    #                 status_step_sum = 'Incomplete'
    #                 now = datetime.datetime.now()
    #                 sendtime = json_data_res['send_time']
    #                 timing_ = timing(datetime.datetime.timestamp(now),sendtime)
    #                 json_data_res['timing'] = timing_
    #             elif 'Pending' in sum_status_step_list:
    #                 status_step_sum = 'Incomplete'
    #                 now = datetime.datetime.now()
    #                 sendtime = json_data_res['send_time']
    #                 timing_ = timing(datetime.datetime.timestamp(now),sendtime)
    #                 json_data_res['timing'] = timing_
    #             elif 'Complete' in sum_status_step_list:
    #                 status_step_sum = 'Complete'
    #                 sendtime = json_data_res['send_time']
    #                 timing_ = timing(time_success,sendtime)
    #                 json_data_res['timing'] = timing_
    #             elif 'Approve' in sum_status_step_list:
    #                 status_step_sum = 'Complete'
    #                 sendtime = json_data_res['send_time']
    #                 timing_ = timing(time_success,sendtime)
    #                 json_data_res['timing'] = timing_
    #             else:
    #                 status_step_sum = 'Complete'
    #                 sendtime = json_data_res['send_time']
    #                 timing_ = timing(time_success,sendtime)
    #                 json_data_res['timing'] = timing_
    #             json_data_res['file_status_sum'] = status_step_sum

    #         list_data_res.append(json_data_res)
    #         if len(list_data_res) != 0:
    #             return {'result':'OK','messageText':list_data_res,'messageER':None}
    #         else:
    #             return {'result':'ER','messageText':[],'messageER':'not found sidcode'}
    #     except Exception as ex:
    #         exc_type, exc_obj, exc_tb = sys.exc_info()
    #         fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
    #         print(exc_type, fname, exc_tb.tb_lineno)
    #         return {'result':'ER','messageText':[],'messageER':'notfound data' + str(ex)}


    def select_sender_db_v1(self,userName,sidCode,emailUser):
        self.sidCode = sidCode
        self.userName = userName
        self.emailUser = emailUser
        json_data_res = {}
        list_data_res = []
        try:
            result_Select_step = paper_lessdatastep.query.filter(paper_lessdatastep.sid==self.sidCode).first()
            print(result_Select_step)
            result_Select_sender = paper_lesssender.query.filter(paper_lesssender.step_data_sid==self.sidCode).first()
            result_Select_document = paper_lessdocument.query.filter(paper_lessdocument.step_id==self.sidCode).first()
            result_Select_pdf = paper_lesspdf.query.filter(paper_lesspdf.fid==result_Select_document.fileid).first()
            if result_Select_sender != None:
                json_data_res['template_name'] = None
                json_data_res['condition_template'] = None
                if result_Select_sender.step_code != None:
                    result_template = paper_lessstep.query.filter(paper_lessstep.step_Code==result_Select_sender.step_code,paper_lessstep.status=='ACTIVE').first()
                    if result_template != None:
                        json_data_res['template_name'] = str(result_template.step_Name)
                        json_data_res['condition_template'] = str(result_template.condition_temp)
                json_data_res['tracking_id'] = result_Select_sender.tracking_id
                json_data_res['sender_email'] = result_Select_sender.sender_email
                json_data_res['sender_name'] = result_Select_sender.sender_name
                json_data_res['send_time'] = result_Select_sender.send_time
                date_time_stamp_ = result_Select_sender.send_time.timestamp()
                date_time_stamp_ = int(date_time_stamp_)
                json_data_res['send_time_display'] = convert_datetime_TH_2_display_sendTime(date_time_stamp_)
                json_data_res['sender_position'] = result_Select_sender.sender_position
                json_data_res['send_time_string'] = str(result_Select_sender.send_time).split('+')[0]
                json_data_res['step_code'] = result_Select_sender.step_code
                json_data_res['step_data_sid'] = result_Select_sender.step_data_sid
                json_data_res['document_Id'] = result_Select_sender.doc_id
                json_data_res['template_webhook'] = result_Select_sender.template_webhook
                json_data_res['email_center'] = result_Select_sender.email_center
                json_data_res['file_name'] = result_Select_sender.file_name
                json_data_res['status'] = result_Select_sender.status
            if result_Select_document != None:
                if result_Select_document.options_page != None:
                    json_data_res['options_page_document'] = [eval(result_Select_document.options_page)]
                    tmp_option_page = eval(result_Select_document.options_page)
                    if 'ca_req' in tmp_option_page:
                        pass
                    
                else:
                    json_data_res['options_page_document'] = []
                json_data_res['document_time'] = int(result_Select_document.timest)
                json_data_res['document_details'] = eval(result_Select_document.documentJson)
                json_data_res['document_details_string'] = str(result_Select_document.documentJson)
                json_data_res['file_id'] = int(result_Select_document.fileid)
                json_data_res['urgent_code'] = result_Select_document.urgent_type
                json_data_res['attempted_folder'] = result_Select_document.attempted_folder
            if result_Select_step != None:
                step_infomation = eval(result_Select_step.data_json)
                if 'step_num' in step_infomation:
                    json_data_res['step_info'] = [eval(result_Select_step.data_json)]
                else:
                    json_data_res['step_info'] = eval(result_Select_step.data_json)
                # json_data_res['step_info_01'] = eval(result_Select_step.data_json)
                json_data_res['view_details'] = eval(result_Select_step.view_details)
                json_data_res['qrCode_position'] = eval(result_Select_step.qrCode_position)
                if result_Select_step.qrCode_position != None or str(result_Select_step.qrCode_position).replace(' ','') != '':
                    json_data_res['qrCode_status'] = True
                else:
                    json_data_res['qrCode_status'] = False
            if result_Select_pdf != None:
                if result_Select_pdf.string_sign != None:
                    json_data_res['file_status'] = 'Complete'
                else:
                    json_data_res['file_status'] = 'InComplete'

            json_data_res['file_user_status_detail'] = []
            arr_step_info = []
            if 'step_num' in step_infomation:
                status_step_sum = ''
                sum_status_step_list = []
                list_check_step = []
                json_step_info_2 = {}
                step_list_data = []
                step_ = step_infomation
                step_num = step_infomation['step_num']
                json_step_info_2['step_status'] = ''
                for u in range(len(step_['step_detail'])):
                    print(step_['step_detail'][u])
                    step_2 = step_['step_detail'][u]
                    for k in range(len(step_2['activity_code'])):
                        if step_2['activity_code'][k] == 'A03':
                            json_step_info = {}
                            json_step_info['activity_status'] = step_2['activity_status'][k]
                            json_step_info['one_email'] = step_2['one_email']
                            query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(step_2['one_email'])).all()
                            if len(query_name_account) != 0:
                                tmp_account_name = eval(query_name_account[0].citizen_data)
                                try:
                                    tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                except Exception as e:
                                    tmp_account_name=step_2['one_email']
                            else:
                                tmp_account_name = step_2['one_email']
                            json_step_info['account_name'] = tmp_account_name
                            json_step_info['step_num'] = step_num
                            list_check_step.append(json_step_info['activity_status'])
                            step_list_data.append(json_step_info)
                    json_step_info_2['step_info'] = step_list_data
                    if json_step_info_2['step_status'] == '':
                        if 'Reject' in list_check_step:
                            json_step_info_2['step_status'] = 'Reject'
                        elif 'Complete' in list_check_step:
                            json_step_info_2['step_status'] = 'Complete'
                        elif 'Approve' in list_check_step:
                            json_step_info_2['step_status'] = 'Complete'
                        elif 'Incomplete' in list_check_step:
                            json_step_info_2['step_status'] = 'Incomplete'
                        elif 'Pending' in list_check_step:
                            json_step_info_2['step_status'] = 'Incomplete'
                        else:
                            json_step_info_2['step_status'] = 'Complete'
                    sum_status_step_list.append(json_step_info_2['step_status'])
                json_data_res['file_user_status_detail'].append(json_step_info_2)
                if 'Reject' in sum_status_step_list:
                    status_step_sum = 'Reject'
                elif 'Incomplete' in sum_status_step_list:
                    status_step_sum = 'Incomplete'
                elif 'Pending' in sum_status_step_list:
                    status_step_sum = 'Incomplete'
                elif 'Complete' in sum_status_step_list:
                    status_step_sum = 'Complete'
                elif 'Approve' in sum_status_step_list:
                    status_step_sum = 'Complete'
                else:
                    status_step_sum = 'Complete'
                json_data_res['file_status_sum'] = status_step_sum
            else:
                step_status = ''
                res_status_file = 'Y'
                res_status_file_string = 'อนุมัติแล้ว'
                step_before = ''
                step_list_before = []
                step_list_ = []
                step_list_next = []
                arr_step_totle = []
                step_me = ''
                step_sum_status = []
                sum_status_step_list = []
                list_check_step = []
                step_list_data = []
                max_step = (len(step_infomation))
                step_infomation = step_infomation
                sum_status_step = []
                tmp_status_sum = []
                arr_email_list = []
                email_step_sum = []
                email_one_sum = []
                for i in range(len(step_infomation)):
                    list_check_step = []
                    json_step_info_2 = {}
                    step_list_data = []
                    step_status = []
                    step_email = []
                    step_ = step_infomation[i]
                    step_num = step_infomation[i]['step_num']
                    json_step_info_2['step_status'] = ''
                    tmp_step_detail = step_['step_detail']
                    for u in range(len(tmp_step_detail)):
                        tmp_arr_step_detail = tmp_step_detail[u]
                        tmp_status = tmp_arr_step_detail['activity_status']
                        tmp_code = tmp_arr_step_detail['activity_code']
                        tmp_email = tmp_arr_step_detail['one_email']
                        for s in range(len(tmp_code)):
                            if tmp_code[s] == 'A03':
                                step_status.append(tmp_status[s])
                                step_email.append(tmp_email)
                                email_one_sum.append(tmp_email)
                    email_step_sum.append(step_email)
                    if 'Reject' in step_status:
                        tmp_status_sum.append('Reject')
                    elif 'Approve' in step_status:
                        tmp_status_sum.append('Complete')
                    elif 'Complete' in step_status:
                        tmp_status_sum.append('Complete')
                    elif 'Incomplete' in step_status:
                        tmp_status_sum.append('Incomplete')
                    elif 'Pending' in step_status:
                        tmp_status_sum.append('Incomplete')
                    else:
                        tmp_status_sum.append('Complete')
                if self.emailUser in email_one_sum:
                    for zzi in range(len(step_infomation)):
                        list_check_step = []
                        json_step_info_2 = {}
                        step_list_data = []
                        step_status = []
                        step_ = step_infomation[zzi]
                        step_num = step_infomation[zzi]['step_num']
                        json_step_info_2['step_status'] = ''
                        tmp_step_detail = step_['step_detail']
                        for zi in range(len(tmp_step_detail)):
                            tmp_arr_step_detail_2 = tmp_step_detail[zi]
                            oneMail = tmp_arr_step_detail_2['one_email']
                            tmp_step_me = int(step_num) - 1
                            step_num_int2 = int(step_num)
                            if 'Reject' in tmp_status_sum:
                                arr_step_info.append('Reject')
                            elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Incomplete':
                                if self.emailUser not in arr_email_list:
                                    index_step_me = tmp_step_me
                                    if index_step_me != 0:
                                        while index_step_me > 0:
                                            if len(arr_step_info) == 0:
                                                index_step_me = index_step_me - 1
                                                if tmp_status_sum[index_step_me] == 'Incomplete':
                                                    arr_step_info.append('Incomplete')
                                                else:
                                                    arr_step_info.append('Wait')
                                                arr_email_list.append(self.emailUser)
                                            else:
                                                index_step_me = index_step_me - 1
                                                continue
                                    else:
                                        arr_step_info.append('Wait')
                            elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Complete':
                                # print('Complete')
                                if self.emailUser not in arr_email_list:
                                    for nz in range(step_num_int2,len(tmp_status_sum),1):
                                        if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                            arr_step_info.append('Incomplete')
                                        elif self.emailUser not in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                            arr_step_info.append('Progress')
                                    arr_email_list.append(self.emailUser)
                else:
                    for zzi in range(len(step_infomation)):
                        list_check_step = []
                        json_step_info_2 = {}
                        step_list_data = []
                        step_status = []
                        step_ = step_infomation[zzi]
                        step_num = step_infomation[zzi]['step_num']
                        json_step_info_2['step_status'] = ''
                        tmp_step_detail = step_['step_detail']
                        for zi in range(len(tmp_step_detail)):
                            tmp_arr_step_detail_2 = tmp_step_detail[zi]
                            oneMail = tmp_arr_step_detail_2['one_email']
                            tmp_step_me = int(step_num) - 1
                            step_num_int2 = int(step_num)
                            if 'Reject' in tmp_status_sum:
                                arr_step_info.append('Reject')
                            elif 'Incomplete' in tmp_status_sum:
                                arr_step_info.append('Progress')
                        # print(tmp_status_sum)


                if 'Reject' in arr_step_info:
                    res_status_file = 'R'
                    res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                elif 'Wait' in arr_step_info:
                    res_status_file = 'W'
                    res_status_file_string = 'รออนุมัติ'
                elif 'Incomplete' in arr_step_info:
                    res_status_file = 'Z'
                    res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                elif 'Progress' in arr_step_info:
                    res_status_file = 'N'
                    res_status_file_string = 'กำลังดำเนินการ'                    
                elif arr_step_info.count('Incomplete') >= 2:
                    res_status_file = 'Z'
                    res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                else:
                    res_status_file = 'Y'
                    res_status_file_string = 'อนุมัติแล้ว'
                json_data_res['status_file_code'] = res_status_file
                json_data_res['status_file_string'] = res_status_file_string
                status_step_sum = ''
                sum_status_step_list = []
                for i in range(len(step_infomation)):
                    list_check_step = []
                    json_step_info_2 = {}
                    step_list_data = []
                    step_ = step_infomation[i]
                    step_num = step_infomation[i]['step_num']
                    json_step_info_2['step_status'] = ''
                    for u in range(len(step_['step_detail'])):
                        step_2 = step_['step_detail'][u]
                        for k in range(len(step_2['activity_code'])):
                            if step_2['activity_code'][k] == 'A03':
                                json_step_info = {}
                                json_step_info['activity_status'] = step_2['activity_status'][k]
                                json_step_info['one_email'] = step_2['one_email']
                                query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(step_2['one_email'])).all()
                                if len(query_name_account) != 0:
                                    tmp_account_name = eval(query_name_account[0].citizen_data)
                                    try:
                                        tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                    except Exception as e:
                                        tmp_account_name = step_2['one_email']
                                else:
                                    tmp_account_name = step_2['one_email']
                                json_step_info['account_name'] = tmp_account_name
                                json_step_info['step_num'] = step_num
                                list_check_step.append(json_step_info['activity_status'])
                                step_list_data.append(json_step_info)
                        json_step_info_2['step_info'] = step_list_data
                    if json_step_info_2['step_status'] == '':
                        if 'Reject' in list_check_step:
                            json_step_info_2['step_status'] = 'Reject'
                        elif 'Complete' in list_check_step:
                            json_step_info_2['step_status'] = 'Complete'
                        elif 'Approve' in list_check_step:
                            json_step_info_2['step_status'] = 'Complete'
                        elif 'Incomplete' in list_check_step:
                            json_step_info_2['step_status'] = 'Incomplete'
                        elif 'Pending' in list_check_step:
                            json_step_info_2['step_status'] = 'Incomplete'
                        else:
                            json_step_info_2['step_status'] = 'Complete'
                    sum_status_step_list.append(json_step_info_2['step_status'])
                    json_data_res['file_user_status_detail'].append(json_step_info_2)
                if 'Reject' in sum_status_step_list:
                    status_step_sum = 'Reject'
                elif 'Incomplete' in sum_status_step_list:
                    status_step_sum = 'Incomplete'
                elif 'Pending' in sum_status_step_list:
                    status_step_sum = 'Incomplete'
                elif 'Complete' in sum_status_step_list:
                    status_step_sum = 'Complete'
                elif 'Approve' in sum_status_step_list:
                    status_step_sum = 'Complete'
                else:
                    status_step_sum = 'Complete'
                json_data_res['file_status_sum'] = status_step_sum

            list_data_res.append(json_data_res)
            if len(list_data_res) != 0:
                return {'result':'OK','messageText':list_data_res,'messageER':None}
            else:
                return {'result':'ER','messageText':[],'messageER':'not found sidcode'}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':[],'messageER':'notfound data' + str(ex)}

    def select_chatEmailuer(self,sidCode):
        self.sidCode = sidCode
        jsonlist = []
        for i in paper_lesstransactionChat.query.filter(paper_lesstransactionChat.sidCode==self.sidCode).all():
            if i.statusId == 'Y':
                resultDocument = paper_lessdocument.query.filter(paper_lessdocument.step_id==i.sidCode).first()
                json_data = {}
                json_data['sidCode'] = i.sidCode
                json_data['index_order'] = i.OrderResult
                json_data['emailUser'] = i.email_User
                json_data['statusId'] = i.statusId
                if resultDocument != None:
                    if resultDocument.documentJson != None:
                        document_Json = eval(resultDocument.documentJson)
                        json_data['document_name'] = document_Json['document_name']
                        json_data['document_type'] = document_Json['document_type']
                        json_data['document_remark'] = document_Json['document_remark']
                    else:
                        json_data['document_name'] = None
                        json_data['document_type'] = None
                        json_data['document_remark'] = None
                else:
                    json_data['document_name'] = None
                    json_data['document_type'] = None
                    json_data['document_remark'] = None
                resultSender = paper_lesssender.query.filter(paper_lesssender.step_data_sid==i.sidCode).first()
                if resultSender != None:
                    json_data['sender_name'] = resultSender.sender_name
                jsonlist.append(json_data)
        return jsonlist


    def select_pdfstring_sidCode(self,sidCode):
        self.sidCode = sidCode
        sql = '''
            SELECT
                tb_pdf_storage.string_pdf 
            FROM
                tb_send_detail
                INNER JOIN tb_pdf_storage ON tb_pdf_storage.fid = tb_send_detail.file_id 
            WHERE
                tb_send_detail.step_data_sid = :tmpsid 
        '''
        connection = slave.connect()
        result = connection.execute(text(sql),tmpsid=self.sidCode)
        resultQuery = [dict(row) for row in result]
        if len(resultQuery) > 0:
            return {'result':'OK','messageText':{'PDF_Base64':resultQuery[0]['string_pdf']},'status_Code':200,'messageER':None}
        else:
            return {'result':'ER','messageText':None,'status_Code':200,'messageER':'data not found'}
        # result =  paper_lesssender.query.filter(paper_lesssender.step_data_sid==self.sidCode)
        # print(result)
        # if result != None:
        #     file_id_new = (result.file_id)
        #     result_PDF_base64 = paper_lesspdf.query.filter(paper_lesspdf.fid==file_id_new).first()
        #     if result_PDF_base64 != None:
        #         if result_PDF_base64.string_pdf != None:
        #             return {'result':'OK','messageText':{'PDF_Base64':result_PDF_base64.string_pdf},'status_Code':200,'messageER':None}
        #         else:
        #             return {'result':'ER','messageText':None,'status_Code':200,'messageER':'data not found'}
        # else:
        #     return {'result':'ER','messageText':None,'status_Code':200,'messageER':'data not found'}

    def select_public_pdfview_v2(self,sidCode_hash):
        self.sidCode_hash = sidCode_hash
        try:
            query_pdf = db.session.query(\
                    paper_lesstrack,
                    paper_lesspdf,
                    paper_lesssender,
                    paper_lessdocument
                )\
                .join(paper_lessdocument,paper_lessdocument.step_id==paper_lesstrack.step_data_sid)\
                .join(paper_lesssender,paper_lesssender.step_data_sid==paper_lesstrack.step_data_sid)\
                .join(paper_lesspdf,paper_lesspdf.fid==paper_lesssender.file_id)\
                .filter(paper_lesstrack.hash_sid_code==self.sidCode_hash)\
                .all()
            # print(query_pdf)
            for n in range(len(query_pdf)):
                for u in range(len(query_pdf[n])):
                    tmpjson = query_pdf[n][u].__dict__
                    if u == 1:
                        del tmpjson['_sa_instance_state']
                        tmp_string_sign = tmpjson['string_sign']
                        if tmp_string_sign != None:
                            tmp_pdf_display = tmp_string_sign
                        else:
                            tmp_pdf_display = tmpjson['string_pdf']
                    if u == 3:
                        del tmpjson['_sa_instance_state']
                        tmp_sidcode = tmpjson['step_id']
                        tmp_attemp_folder =  tmpjson['attempted_folder']
            info = {
                'PDF_Base64':tmp_pdf_display,
                'sid_code':tmp_sidcode,
                'attempted_folder':tmp_attemp_folder
            }
            return {'result':'OK','messageText':info,'status_Code':200,'messageER':None}
        except Exception as ex:
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

    def select_public_pdfview_v1(self,sidCode_hash):
        self.sidCode_hash = sidCode_hash
        try:
            for i in paper_lesssender.query.all():
                sha512encode = hashlib.sha512(str(i.step_data_sid).encode('utf-8')).hexdigest()
                if sha512encode == self.sidCode_hash:
                    sid_code = i.step_data_sid
                    file_id_new = (i.file_id)
            result_PDF_base64 = paper_lesspdf.query.filter(paper_lesspdf.fid==file_id_new).first()
            if result_PDF_base64 != None:
                if result_PDF_base64.string_sign != None:
                    return {'result':'OK','messageText':{'PDF_Base64':result_PDF_base64.string_sign,'sid_code':sid_code},'status_Code':200,'messageER':None}
                else:
                    return {'result':'OK','messageText':{'PDF_Base64':result_PDF_base64.string_pdf,'sid_code':sid_code},'status_Code':200,'messageER':None}
        except Exception as ex:
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

    def select_transactionfile(self,folder_name):
        self.folder_name = folder_name
        try:
            result_folder = paper_lesstransactionfile.query.filter(paper_lesstransactionfile.folder_name==self.folder_name).first()
            if result_folder != None:
                json_data_eval = eval(result_folder.json_data)
                return {'result':'OK','messageText':{'json_data':json_data_eval,'pathfolder':result_folder.pathfolder},'status_Code':200,'messageER':None}
            else:
                return {'result':'ER','messageText':'not found','status_Code':200,'messageER':None}
        except Exception as ex:
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

    def select_forChat_v1(self,sidCode):
        self.sidCode = sidCode
        try:
            result_Document = paper_lessdocument.query.filter(paper_lessdocument.step_id==self.sidCode).first()
            if result_Document != None:
                if result_Document.documentJson != None:
                    document_Json = str(result_Document.documentJson)
                    document_Json = eval(document_Json)
                    document_Name = document_Json['document_name']
                    document_Type = document_Json['document_type']
                    document_Remark = document_Json['document_remark']
                else:
                    document_Name = ''
                    document_Type = ''
                    document_Remark = ''
            else:
                document_Name = ''
                document_Type = ''
                document_Remark = ''
            result_Sender = paper_lesssender.query.filter(paper_lesssender.step_data_sid==self.sidCode).first()
            if result_Sender != None:
                sender_Username = result_Sender.send_user
                result_Sender = paper_lesslogin.query.filter(paper_lesslogin.username==sender_Username).first()
                if result_Sender != None:
                    if result_Sender.citizen_data != None:
                        data_citizen = eval(result_Sender.citizen_data)
                        name_surname_user = data_citizen['account_title_th'] + "" + data_citizen['first_name_th'] + " " + data_citizen['last_name_th']
                    else:
                        name_surname_user = ''
                else:
                    name_surname_user = ''
            else:
                name_surname_user = ''
            return {'result':'OK','messageText':{'documentName':document_Name,'documentType':document_Type,'documentRemark':document_Remark,'name_sender':name_surname_user},'status_Code':200,'messageER':None}
        except Exception as ex:
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

    def select_forChat_v2(self,sidCode):
        self.sidCode = sidCode
        data_json_result = {}
        name_surname_user = ''
        document_Name = ''
        document_Type = ''
        document_Remark = ''
        json_docuemtn_details = {}
        try:
            tax_id = ''
            result_Document = paper_lessdocument.query.filter(paper_lessdocument.step_id==self.sidCode).first()
            result_step_data = paper_lessdatastep.query.filter(paper_lessdatastep.sid==self.sidCode).first()
            result_Sender = paper_lesssender.query.filter(paper_lesssender.step_data_sid==self.sidCode).first()
            if result_step_data != None:
                if result_step_data.biz_info != None and result_step_data.biz_info != 'None':
                    biz_data = eval(result_step_data.biz_info)
                    tax_id = biz_data['id_card_num']
                    print(tax_id)
                else:
                    tax_id = ''
            if result_Document != None:
                if result_Document.documentJson != None:
                    docuemnt_id = result_Document.document_id
                    document_Json = str(result_Document.documentJson)
                    document_Json = eval(document_Json)
                    documentType_data = result_Document.documentType
                    document_Name = document_Json['document_name']
                    document_Type = document_Json['document_type']
                    document_Remark = document_Json['document_remark']
                    if tax_id != '':
                        result_step_data = paper_lessdocument_detail.query.filter(paper_lessdocument_detail.documentType==documentType_data,paper_lessdocument_detail.biz_info!=None,paper_lessdocument_detail.biz_info!='',paper_lessdocument_detail.biz_info.contains(tax_id)).first()
                        try:
                            json_docuemtn_details['chat_bot_details'] = eval(result_step_data.chat_bot)
                            print(result_step_data)
                        except Exception as ex:
                            json_docuemtn_details['chat_bot_details'] = None
                    else:
                        result_step_data = paper_lessdocument_detail.query.filter(paper_lessdocument_detail.documentType==documentType_data,paper_lessdocument_detail.biz_info==None,paper_lessdocument_detail.biz_info=='').first()
                        # print(result_step_data)
                        # print('test2')
            if result_Sender != None:
                sender_Username = result_Sender.send_user
                result_Sender = paper_lesslogin.query.filter(paper_lesslogin.username==sender_Username).first()
                if result_Sender != None:
                    if result_Sender.citizen_data != None:
                        data_citizen = eval(result_Sender.citizen_data)
                        name_surname_user = data_citizen['first_name_th'] + " " + data_citizen['last_name_th']
            data_json_result['documentName'] = document_Name
            data_json_result['documentType'] = document_Type
            data_json_result['documentRemark'] = document_Remark
            data_json_result['documentName'] = document_Name
            data_json_result['name_sender']  = name_surname_user
            data_json_result['documentType_Details'] = [json_docuemtn_details]
            data_json_result['document_Id'] = docuemnt_id
            return {'result':'OK','messageText':data_json_result,'status_Code':200,'messageER':None}

        except Exception as ex:
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}


    def select_username(self,trackingId,username_Id):
        self.trackingId = trackingId
        self.username_Id = username_Id
        try:
            result_sidCode = paper_lesssender.query.filter(paper_lesssender.tracking_id==self.trackingId).first()
            sidCode = result_sidCode.step_data_sid
            info_download = paper_lesstransactionLoadQr.query.filter(paper_lesstransactionLoadQr.sidCode==sidCode).first()
            jsonInformation_data = eval(info_download.jsonInformation)
            for i in range(len(jsonInformation_data)):
                if self.username_Id == jsonInformation_data[i]['userName']:
                    return True
                else:
                    return False
        except Exception as ex:
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

    def select_dashboard_recipient(self,emailUser):
        self.emailUser = emailUser
        sid_list = []
        sid_list_email = []
        json_Data = {}
        list_arr = []
        try:
            for i in paper_lesssender.query.filter(paper_lesssender.status=='ACTIVE').order_by(desc(paper_lesssender.send_time)).all():
                sid_list.append(i.step_data_sid)
            for n in range(len(sid_list)):
                result_DB = paper_lessdatastep.query.filter(paper_lessdatastep.sid==sid_list[n]).first()
                jsonData_eval = eval(result_DB.data_json)
                if 'step_num' in jsonData_eval:
                    for y in range(len(jsonData_eval['step_detail'])):
                        if 'one_email' in jsonData_eval['step_detail'][y]:
                            if jsonData_eval['step_detail'][y]['one_email'] == self.emailUser:
                                sid_list_email.append(sid_list[n])
                else:
                    for l in range(len(jsonData_eval)):
                        json_data_info = jsonData_eval[l]
                        if 'step_detail' in json_data_info:
                            for y in range(len(json_data_info['step_detail'])):
                                if 'one_email' in json_data_info['step_detail'][y]:
                                    if json_data_info['step_detail'][y]['one_email'] == self.emailUser:
                                        if sid_list[n] not in sid_list_email:
                                            sid_list_email.append(sid_list[n])
            print(sid_list_email)
        except Exception as ex:
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

        count_rowDocument = 0
        count_rowDocument_StatusActive = 0
        count_rowDocument_StatusReject = 0
        count_rowDocument_StatusCancel = 0
        statusFile_count_approve = 0
        statusFile_count_pendding = 0
        statusFile_count_z = 0
        statusFile_count_reject = 0
        statusFile_count_wait = 0
        try:
            for i in range(len(sid_list_email)):
                count_rowDocument = count_rowDocument + 1
                count_rowDocument_StatusActive += paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_list_email[i],paper_lesssender.status=='ACTIVE').count()
                count_rowDocument_StatusReject += paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_list_email[i],paper_lesssender.status=='REJECT').count()
                count_rowDocument_StatusCancel += paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_list_email[i],paper_lesssender.status=='CANCEL').count()
            json_Data['sum_Document']  = count_rowDocument
            json_Data['DocumentInfo'] = {
                'Document_Active':count_rowDocument_StatusActive,
                'Document_Reject':count_rowDocument_StatusReject,
                'Document_Cancel':count_rowDocument_StatusCancel
            }
            for n in range(len(sid_list_email)):
                result_DB = paper_lessdatastep.query.filter(paper_lessdatastep.sid==sid_list_email[n]).first()
                jsonData_eval = eval(result_DB.data_json)
                arr_step_info = []
                if 'step_num' in jsonData_eval:
                    step_status = ''
                    step_before = ''
                    res_status_file = 'Y'
                    arr_step_totle = []
                    json_data_info = jsonData_eval
                    if 'step_detail' in json_data_info:
                        for s in range(len(json_data_info['step_detail'])):
                            json_info_step2 = {}
                            for u in range(len(json_data_info['step_detail'][s]['activity_code'])):
                                oneMail = json_data_info['step_detail'][s]['one_email']
                                if str(oneMail).replace(' ','').lower() == self.emailUser:
                                    if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
                                        if step_before == '':
                                            try:
                                                if json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Complete':
                                                    step_before = 'Complete'
                                                elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Approve':
                                                    step_before = 'Approve'
                                                elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Reject':
                                                    step_before = 'Reject'
                                            except Exception as e:
                                                step_before = ''
                                        if step_before != 'Reject':
                                            if json_data_info['step_detail'][s]['activity_status'][u] == 'Complete':
                                                step_status = 'Complete'
                                            elif json_data_info['step_detail'][s]['activity_status'][u] == 'Approve':
                                                step_status = 'Complete'
                                            elif json_data_info['step_detail'][s]['activity_status'][u] == 'Reject':
                                                step_status = 'Reject'
                                            else:
                                                try:
                                                    step_status  = 'Incomplete'
                                                except Exception as ex:
                                                    step_status = 'Incomplete'
                                        arr_step_info.append(step_status)
                                        arr_step_info.append(step_before)
                    # print(arr_step_info,sid_list_email[n])
                    if 'Waitting' in arr_step_info:
                        res_status_file = 'W'
                        res_status_file_string = 'รออนุมัติ'
                    elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                        res_status_file = 'W'
                        res_status_file_string = 'รออนุมัติ'
                    elif 'Reject' in arr_step_info:
                        res_status_file = 'R'
                        res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                    else:
                        res_status_file_string = 'อนุมัติแล้ว'
                    if res_status_file == 'W':
                        statusFile_count_wait = statusFile_count_wait + 1
                    elif res_status_file == 'Y':
                        statusFile_count_approve = statusFile_count_approve + 1
                    elif res_status_file == 'R':
                        statusFile_count_reject = statusFile_count_reject + 1
                    elif res_status_file == 'Z':
                        statusFile_count_z = statusFile_count_z + 1
                    else:
                        statusFile_count_pendding = statusFile_count_pendding + 1
                    result_SenderDetails = paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_list_email[n]).first()
                    if result_SenderDetails !=None:
                        file_name = result_SenderDetails.file_name
                        dateTime_String = result_SenderDetails.send_time
                        trackingCode = result_SenderDetails.tracking_id
                        sender_name = result_SenderDetails.sender_name
                        sender_email = result_SenderDetails.sender_email
                    result_DetailsDocument = paper_lessdocument.query.filter(paper_lessdocument.step_id==sid_list_email[n]).first()
                    if result_DetailsDocument != None:
                        documentsign_page_options = result_DetailsDocument.sign_page_options
                        if result_DetailsDocument.options_page != None:
                            documentoptions_page = [eval(result_DetailsDocument.options_page)]
                        else:
                            documentoptions_page = []
                        if result_DetailsDocument.urgent_type != None:
                            documentUrgentType = result_DetailsDocument.urgent_type
                            if documentUrgentType == 'I':
                                documentUrgentString = 'ด่วนมาก'
                            elif documentUrgentType == 'U':
                                documentUrgentString = 'ด่วน'
                            elif documentUrgentType == 'M':
                                documentUrgentString = 'ปกติ'
                        if result_DetailsDocument.documentJson != None:
                            documentJson_result = eval(result_DetailsDocument.documentJson)
                            documentName = documentJson_result['document_name']
                            documentType = documentJson_result['document_type']
                        else:
                            documentName = None
                            documentType = None
                        document_Id = result_DetailsDocument.document_id
                    # th_dateTime_1 = convert_datetime_TH_1(int(dateTime_String.timestamp()))
                    th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                    list_arr.append({
                        'sidCode':sid_list_email[n],
                        'document_name':documentName,
                        'document_type':documentType,
                        'document_urgent':documentUrgentType,
                        'document_urgent_string':documentUrgentString,
                        'dateTime_String':str(dateTime_String).split('+')[0],
                        'dateTime_String_TH_1':th_dateTime_2,
                        'document_id':document_Id,
                        'stamp_all':documentsign_page_options,
                        # 'dateTime_String_TH_2':th_dateTime_2,
                        'date_String':str(dateTime_String).split(' ')[0],
                        'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                        'status_file_code':res_status_file,
                        'status_file_string':res_status_file_string,
                        'dateTime':int(dateTime_String.timestamp()),
                        'tracking_id':trackingCode,
                        'sender_name':sender_name,
                        'sender_email':sender_email,
                        'file_name':file_name,
                        'options_page_document':documentoptions_page
                    })
                else:
                    step_status = ''
                    res_status_file = 'Y'
                    step_before = ''
                    step_list_before = []
                    step_list_ = []
                    step_list_next = []
                    arr_step_totle = []
                    step_me = ''
                    step_sum_status = []
                    sum_status_step_list = []
                    list_check_step = []
                    step_list_data = []
                    max_step = (len(jsonData_eval))
                    step_infomation = jsonData_eval
                    sum_status_step = []
                    for i in range(len(step_infomation)):
                        list_check_step = []
                        json_step_info_2 = {}
                        step_list_data = []
                        step_ = step_infomation[i]
                        step_num = step_infomation[i]['step_num']
                        json_step_info_2['step_status'] = ''
                        for u in range(len(step_['step_detail'])):
                            oneMail = step_['step_detail'][u]['one_email']
                            if str(oneMail).replace(' ','').lower() == self.emailUser:
                                step_me = step_infomation[i]['step_num']
                                step_me = int(step_me) - 1
                            step_2 = step_['step_detail'][u]
                            for k in range(len(step_2['activity_code'])):
                                if step_2['activity_code'][k] == 'A03':
                                    json_step_info = {}
                                    json_step_info['activity_status'] = step_2['activity_status'][k]
                                    json_step_info['one_email'] = step_2['one_email']
                                    json_step_info['step_num'] = step_num
                                    list_check_step.append(json_step_info['activity_status'])
                                    step_list_data.append(json_step_info)
                            json_step_info_2['step_info'] = step_list_data
                            if json_step_info_2['step_status'] == '':
                                if 'Reject' in list_check_step:
                                    json_step_info_2['step_status'] = 'Reject'
                                elif 'Incomplete' in list_check_step:
                                    json_step_info_2['step_status'] = 'Incomplete'
                                elif 'Pending' in list_check_step:
                                    json_step_info_2['step_status'] = 'Incomplete'
                                else:
                                    json_step_info_2['step_status'] = 'Complete'
                            sum_status_step_list.append(json_step_info_2['step_status'])
                        sum_status_step.append(json_step_info_2['step_status'])
                    my_status_step = sum_status_step[step_me]
                    index_mystep = step_me
                    for l in range(len(jsonData_eval)):
                        json_data_info = jsonData_eval[l]
                        step_sum_status = []
                        step_list_next = []
                        if 'step_detail' in json_data_info:
                            for s in range(len(json_data_info['step_detail'])):
                                json_info_step2 = {}
                                for u in range(len(json_data_info['step_detail'][s]['activity_code'])):
                                    oneMail = json_data_info['step_detail'][s]['one_email']
                                    if str(oneMail).replace(' ','').lower() == self.emailUser:
                                        if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
                                            if step_before == '':
                                                try:
                                                    if l == 0:
                                                        list_checknextstep = []
                                                        for uy in range(len(sum_status_step)):
                                                            if sum_status_step[index_mystep]:
                                                                step_me = sum_status_step[index_mystep]
                                                                index_mystep = index_mystep
                                                            if step_me == 'Reject':
                                                                step_status = 'Reject'
                                                                step_me = ''
                                                            elif step_me == 'Incomplete' or step_me == 'Pending':
                                                                step_status = 'Incomplete_1'
                                                                step_me = ''
                                                            elif step_me == 'Complete' or step_me == 'Approve':
                                                                try:
                                                                    for uu in range(index_mystep,len(sum_status_step),1):
                                                                        list_checknextstep.append(sum_status_step[uu])
                                                                    # print(list_checknextstep,'list_checknextstep')
                                                                    if 'Reject' in list_checknextstep:
                                                                        step_status = 'Reject'
                                                                        step_me = ''
                                                                    elif 'Incomplete' in list_checknextstep or 'Pending' in list_checknextstep:
                                                                        step_status = 'Incomplete'
                                                                        step_me = ''
                                                                    else:
                                                                        step_status = 'Complete'
                                                                        step_me = ''
                                                                except Exception as e:
                                                                    step_status = 'Incomplete'
                                                                    step_me = ''

                                                        # arr_step_info.append(step_me)
                                                        # arr_step_info.append(step_before)
                                                        arr_step_info.append(step_status)
                                                    else:
                                                        list_checknextstep = []
                                                        step_status = ''
                                                        print('-------------------------------------------')
                                                        for uy in range(len(sum_status_step)):
                                                            if sum_status_step[index_mystep]:
                                                                step_me = sum_status_step[index_mystep]
                                                                index_mystep = index_mystep
                                                            # print(index_mystep)
                                                            if step_me == 'Reject':
                                                                step_status = 'Reject'
                                                                step_me = ''
                                                            elif step_me == 'Complete' and step_me == 'Approve':
                                                                try:
                                                                    list_checknextstep = []
                                                                    for uu in range(index_mystep,len(sum_status_step),1):
                                                                        list_checknextstep.append(sum_status_step[uu])
                                                                    # print(list_checknextstep,'list_checknextstep')
                                                                    if 'Reject' in list_checknextstep:
                                                                        step_status = 'Wait__'
                                                                        step_me = ''
                                                                    elif 'Incomplete' in list_checknextstep or 'Pending' in list_checknextstep:
                                                                        step_status = 'Incomplete'
                                                                        step_me = ''
                                                                    else:
                                                                        step_status = 'Complete'
                                                                        step_me = ''
                                                                except Exception as e:
                                                                    step_status = 'Incomplete'
                                                                    step_me = ''
                                                            elif step_me == 'Incomplete' or step_me == 'Pending':
                                                                list_checknextstep = []
                                                                nn = index_mystep
                                                                try:
                                                                    while(nn > 0):
                                                                        nn = nn - 1
                                                                        list_checknextstep.append(sum_status_step[nn])
                                                                    # for uu in range(index_mystep,0):
                                                                    #     print(sum_status_step[uu])

                                                                    # print(list_checknextstep,'list_checknextstep')
                                                                    if 'Reject' in list_checknextstep:
                                                                        step_status = 'Wait__'
                                                                        step_me = ''
                                                                    elif 'Incomplete' in list_checknextstep or 'Pending' in list_checknextstep:
                                                                        step_status = 'Wait__'
                                                                        step_me = ''
                                                                    elif 'Complete' in list_checknextstep or 'Approve' in list_checknextstep:
                                                                        step_status = 'Incomplete_1'
                                                                        step_me = ''

                                                                    # else:
                                                                    #     step_status = 'Complete'
                                                                    #     step_me = ''
                                                                except Exception as e:
                                                                    step_status = 'Incomplete'
                                                                    step_me = ''

                                                        arr_step_info.append(step_status)
                                                except Exception as e:
                                                    step_before = ''
                                                    print(str(e))


                    # print(arr_step_info , sid_list_email[n])

                    if 'Reject' in arr_step_info:
                        res_status_file = 'R'
                        res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                    elif 'Incomplete_1' in arr_step_info or 'Pending_1' in arr_step_info:
                        res_status_file = 'W'
                        res_status_file_string = 'รออนุมัติ'
                    elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                        res_status_file = 'N'
                        res_status_file_string = 'กำลังดำเนินการ'
                    elif 'Wait__' in arr_step_info:
                        res_status_file = 'Z'
                        res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                    elif 'Waitting' in arr_step_info:
                        res_status_file = 'W'
                        res_status_file_string = 'รออนุมัติ'
                    else:
                        res_status_file_string = 'อนุมัติแล้ว'
                    if res_status_file == 'W':
                        statusFile_count_wait = statusFile_count_wait + 1
                    elif res_status_file == 'Y':
                        statusFile_count_approve = statusFile_count_approve + 1
                    elif res_status_file == 'R':
                        statusFile_count_reject = statusFile_count_reject + 1
                    elif res_status_file == 'Z':
                        statusFile_count_z = statusFile_count_z + 1
                    else:
                        statusFile_count_pendding = statusFile_count_pendding + 1
                    result_SenderDetails = paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_list_email[n]).first()
                    if result_SenderDetails !=None:
                        file_name = result_SenderDetails.file_name
                        dateTime_String = result_SenderDetails.send_time
                        trackingCode = result_SenderDetails.tracking_id
                        sender_name = result_SenderDetails.sender_name
                        sender_email = result_SenderDetails.sender_email
                    result_DetailsDocument = paper_lessdocument.query.filter(paper_lessdocument.step_id==sid_list_email[n]).first()
                    if result_DetailsDocument != None:
                        if result_DetailsDocument.options_page != None:
                            documentoptions_page = [eval(result_DetailsDocument.options_page)]
                        else:
                            documentoptions_page = []
                        documentsign_page_options = result_DetailsDocument.sign_page_options
                        if result_DetailsDocument.urgent_type != None:
                            documentUrgentType = result_DetailsDocument.urgent_type
                            if documentUrgentType == 'I':
                                documentUrgentString = 'ด่วนมาก'
                            elif documentUrgentType == 'U':
                                documentUrgentString = 'ด่วน'
                            elif documentUrgentType == 'M':
                                documentUrgentString = 'ปกติ'
                        if result_DetailsDocument.documentJson != None:
                            documentJson_result = eval(result_DetailsDocument.documentJson)
                            documentName = documentJson_result['document_name']
                            documentType = documentJson_result['document_type']
                        else:
                            documentName = None
                            documentType = None
                        document_Id = result_DetailsDocument.document_id
                    # th_dateTime_1 = convert_datetime_TH_1(int(dateTime_String.timestamp()))
                    th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                    list_arr.append({
                        'sidCode':sid_list_email[n],
                        'document_name':documentName,
                        'document_type':documentType,
                        'document_urgent':documentUrgentType,
                        'document_urgent_string':documentUrgentString,
                        'dateTime_String':str(dateTime_String).split('+')[0],
                        'dateTime_String_TH_1':th_dateTime_2,
                        'document_id':document_Id,
                        'stamp_all':documentsign_page_options,
                        # 'dateTime_String_TH_2':th_dateTime_2,
                        'date_String':str(dateTime_String).split(' ')[0],
                        'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                        'status_file_code':res_status_file,
                        'status_file_string':res_status_file_string,
                        'dateTime':int(dateTime_String.timestamp()),
                        'tracking_id':trackingCode,
                        'sender_name':sender_name,
                        'sender_email':sender_email,
                        'file_name':file_name,
                        'options_page_document':documentoptions_page
                    })
            json_Data['Document_Status_Details']  = {
                'Incomplete_Pendding':statusFile_count_pendding,
                'Complete_Approve':statusFile_count_approve,
                'Z_status':statusFile_count_z,
                'Reject':statusFile_count_reject,
                'Wait':statusFile_count_wait
            }
            json_Data['Document_Details'] = list_arr
            return {'result':'OK','messageText':json_Data,'status_Code':200,'messageER':None}
        except Exception as ex:
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

    def select_dashboard_recipient_v2(self,emailUser):
        self.emailUser = emailUser
        sid_list = []
        sid_list_email = []
        json_Data = {}
        list_arr = []
        list_json = []
        try:
            for i in paper_lesssender.query.filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.contains(self.emailUser)).order_by(desc(paper_lesssender.send_time)).all():
                sid_list_email.append(i.step_data_sid)
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

        count_rowDocument = 0
        count_rowDocument_StatusActive = 0
        count_rowDocument_StatusReject = 0
        count_rowDocument_StatusCancel = 0
        statusFile_count_approve = 0
        statusFile_count_pendding = 0
        statusFile_count_reject = 0
        statusFile_count_wait = 0
        try:
            count_rowDocument_StatusActive = paper_lesssender.query.filter(paper_lesssender.step_data_sid.in_(sid_list_email),paper_lesssender.status=='ACTIVE').count()
            count_rowDocument_StatusReject = paper_lesssender.query.filter(paper_lesssender.step_data_sid.in_(sid_list_email),paper_lesssender.status=='REJECT').count()
            count_rowDocument_StatusCancel = paper_lesssender.query.filter(paper_lesssender.step_data_sid.in_(sid_list_email),paper_lesssender.status=='CANCEL').count()
            count_rowDocument = len(sid_list_email)
            # for i in range(len(sid_list_email)):
            #     count_rowDocument = count_rowDocument + 1
            #     count_rowDocument_StatusActive += paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_list_email[i],paper_lesssender.status=='ACTIVE').count()
            #     count_rowDocument_StatusReject += paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_list_email[i],paper_lesssender.status=='REJECT').count()
            #     count_rowDocument_StatusCancel += paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_list_email[i],paper_lesssender.status=='CANCEL').count()
            json_Data['sum_Document']  = count_rowDocument
            json_Data['DocumentInfo'] = {
                'Document_Active':count_rowDocument_StatusActive,
                'Document_Reject':count_rowDocument_StatusReject,
                'Document_Cancel':count_rowDocument_StatusCancel
            }
            query_email = paper_lessdatastep.query.filter(paper_lessdatastep.sid.in_(sid_list_email)).all()
            # print(query_email[0])
            # return ''
            # for n in range(len(sid_list_email)):
            for n in range(len(query_email)):
                result_DB = query_email[n]
                sid_email = result_DB.sid
                # result_DB = paper_lessdatastep.query.filter(paper_lessdatastep.sid==sid_list_email[n]).first()
                jsonData_eval = eval(result_DB.data_json)
                arr_step_info = []
                if 'step_num' in jsonData_eval:
                    step_status = ''
                    step_before = ''
                    res_status_file = 'Y'
                    arr_step_totle = []
                    json_data_info = jsonData_eval
                    if 'step_detail' in json_data_info:
                        for s in range(len(json_data_info['step_detail'])):
                            json_info_step2 = {}
                            for u in range(len(json_data_info['step_detail'][s]['activity_code'])):
                                oneMail = json_data_info['step_detail'][s]['one_email']
                                if str(oneMail).replace(' ','').lower() == self.emailUser:
                                    if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
                                        if step_before == '':
                                            try:
                                                if json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Complete':
                                                    step_before = 'Complete'
                                                elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Approve':
                                                    step_before = 'Approve'
                                                elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Reject':
                                                    step_before = 'Reject'
                                            except Exception as e:
                                                step_before = ''
                                        if step_before != 'Reject':
                                            if json_data_info['step_detail'][s]['activity_status'][u] == 'Complete':
                                                step_status = 'Complete'
                                            elif json_data_info['step_detail'][s]['activity_status'][u] == 'Approve':
                                                step_status = 'Complete'
                                            elif json_data_info['step_detail'][s]['activity_status'][u] == 'Reject':
                                                step_status = 'Reject'
                                            else:
                                                try:
                                                    step_status  = 'Incomplete'
                                                except Exception as ex:
                                                    step_status = 'Incomplete'
                                        arr_step_info.append(step_status)
                                        arr_step_info.append(step_before)
                    # print(arr_step_info)
                    # print(sid_email)
                    if 'Reject' in arr_step_info:
                        res_status_file = 'R'
                        res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                    elif 'Complete' in arr_step_info:
                        res_status_file = 'Y'
                        res_status_file_string = 'อนุมัติแล้ว'
                    elif 'Waitting' in arr_step_info:
                        res_status_file = 'W'
                        res_status_file_string = 'รออนุมัติ'
                    elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                        res_status_file = 'W'
                        res_status_file_string = 'รออนุมัติ'
                    else:
                        res_status_file_string = 'อนุมัติแล้ว'
                    if res_status_file == 'W':
                        statusFile_count_wait = statusFile_count_wait + 1
                    elif res_status_file == 'Y':
                        statusFile_count_approve = statusFile_count_approve + 1
                    elif res_status_file == 'R':
                        statusFile_count_reject = statusFile_count_reject + 1
                    else:
                        statusFile_count_pendding = statusFile_count_pendding + 1
                    result_SenderDetails = paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_email).first()
                    if result_SenderDetails !=None:
                        file_name = result_SenderDetails.file_name
                        dateTime_String = result_SenderDetails.send_time
                        trackingCode = result_SenderDetails.tracking_id
                        sender_name = result_SenderDetails.sender_name
                        sender_email = result_SenderDetails.sender_email
                    result_DetailsDocument = paper_lessdocument.query.filter(paper_lessdocument.step_id==sid_email).first()
                    if result_DetailsDocument != None:
                        documentsign_page_options = result_DetailsDocument.sign_page_options
                        if result_DetailsDocument.options_page != None:
                            documentoptions_page = [eval(result_DetailsDocument.options_page)]
                        else:
                            documentoptions_page = []
                        if result_DetailsDocument.urgent_type != None:
                            documentUrgentType = result_DetailsDocument.urgent_type
                            if documentUrgentType == 'I':
                                documentUrgentString = 'ด่วนมาก'
                            elif documentUrgentType == 'U':
                                documentUrgentString = 'ด่วน'
                            elif documentUrgentType == 'M':
                                documentUrgentString = 'ปกติ'
                        if result_DetailsDocument.documentJson != None:
                            documentJson_result = eval(result_DetailsDocument.documentJson)
                            documentName = documentJson_result['document_name']
                            documentType = documentJson_result['document_type']
                        else:
                            documentName = None
                            documentType = None
                        document_Id = result_DetailsDocument.document_id
                    # th_dateTime_1 = convert_datetime_TH_1(int(dateTime_String.timestamp()))
                    th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                    ts = int(time.time())
                    date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                    year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                    datetime_display = int(dateTime_String.timestamp())
                    date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                    yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                    time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                    old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                    if date_time_today == date_time_db:
                        date_display_show = time_show_db
                    else:
                        if year_today == yar_db:
                            date_display_show = convert_datetime_TH_2_display(datetime_display)
                        else:
                            date_display_show = old_year
                    list_arr.append({
                        'sidCode':sid_email,
                        'document_name':documentName,
                        'document_type':documentType,
                        'document_urgent':documentUrgentType,
                        'document_urgent_string':documentUrgentString,
                        'dateTime_String':str(dateTime_String).split('+')[0],
                        'dateTime_String_TH_1':th_dateTime_2,
                        'dateTime_display':date_display_show,
                        'document_id':document_Id,
                        'stamp_all':documentsign_page_options,
                        'options_page_document':documentoptions_page,
                        # 'dateTime_String_TH_2':th_dateTime_2,
                        'date_String':str(dateTime_String).split(' ')[0],
                        'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                        'status_file_code':res_status_file,
                        'status_file_string':res_status_file_string,
                        'dateTime':int(dateTime_String.timestamp()),
                        'tracking_id':trackingCode,
                        'sender_name':sender_name,
                        'sender_email':sender_email,
                        'file_name':file_name
                    })
                else:
                    step_status = ''
                    res_status_file = 'Y'
                    step_before = ''
                    step_list_before = []
                    step_list_ = []
                    step_list_next = []
                    arr_step_totle = []
                    step_me = ''
                    step_sum_status = []
                    sum_status_step_list = []
                    list_check_step = []
                    step_list_data = []
                    max_step = (len(jsonData_eval))
                    step_infomation = jsonData_eval
                    sum_status_step = []
                    for i in range(len(step_infomation)):
                        list_check_step = []
                        json_step_info_2 = {}
                        step_list_data = []
                        step_ = step_infomation[i]
                        step_num = step_infomation[i]['step_num']
                        json_step_info_2['step_status'] = ''
                        for u in range(len(step_['step_detail'])):
                            oneMail = step_['step_detail'][u]['one_email']
                            if str(oneMail).replace(' ','').lower() == self.emailUser:
                                step_me = step_infomation[i]['step_num']
                                step_me = int(step_me) - 1
                            step_2 = step_['step_detail'][u]
                            for k in range(len(step_2['activity_code'])):
                                if step_2['activity_code'][k] == 'A03':
                                    json_step_info = {}
                                    json_step_info['activity_status'] = step_2['activity_status'][k]
                                    json_step_info['one_email'] = step_2['one_email']
                                    json_step_info['step_num'] = step_num
                                    list_check_step.append(json_step_info['activity_status'])
                                    step_list_data.append(json_step_info)

                            json_step_info_2['step_info'] = step_list_data
                            if json_step_info_2['step_status'] == '':
                                if 'Reject' in list_check_step:
                                    json_step_info_2['step_status'] = 'Reject'
                                # elif 'Complete' in list_check_step:
                                #     json_step_info_2['step_status'] = 'Complete'
                                elif 'Incomplete' in list_check_step:
                                    json_step_info_2['step_status'] = 'Incomplete'
                                elif 'Pending' in list_check_step:
                                    json_step_info_2['step_status'] = 'Incomplete'
                                else:
                                    json_step_info_2['step_status'] = 'Complete'
                            sum_status_step_list.append(json_step_info_2['step_status'])
                        sum_status_step.append(json_step_info_2['step_status'])
                        print(list_check_step)
                    # my_status_step = sum_status_step[step_me]
                    index_mystep = step_me
                    for l in range(len(jsonData_eval)):
                        json_data_info = jsonData_eval[l]
                        step_sum_status = []
                        step_list_next = []
                        if 'step_detail' in json_data_info:
                            for s in range(len(json_data_info['step_detail'])):
                                json_info_step2 = {}
                                for u in range(len(json_data_info['step_detail'][s]['activity_code'])):
                                    oneMail = json_data_info['step_detail'][s]['one_email']
                                    if str(oneMail).replace(' ','').lower() == self.emailUser:
                                        if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
                                            if step_before == '':
                                                try:
                                                    if l == 0:
                                                        list_checknextstep = []
                                                        print(sum_status_step)
                                                        for uy in range(len(sum_status_step)):
                                                            if sum_status_step[index_mystep]:
                                                                step_me = sum_status_step[index_mystep]
                                                                index_mystep = index_mystep
                                                            if step_me == 'Reject':
                                                                step_status = 'Reject'
                                                                step_me = ''
                                                            elif step_me == 'Incomplete' or step_me == 'Pending':
                                                                step_status = 'Incomplete_1'
                                                                step_me = ''
                                                            elif step_me == 'Complete' or step_me == 'Approve':
                                                                try:
                                                                    for uu in range(index_mystep,len(sum_status_step),1):
                                                                        list_checknextstep.append(sum_status_step[uu])
                                                                    # print(list_checknextstep,'list_checknextstep')
                                                                    if 'Reject' in list_checknextstep:
                                                                        step_status = 'Reject'
                                                                        step_me = ''
                                                                    elif 'Incomplete' in list_checknextstep or 'Pending' in list_checknextstep:
                                                                        step_status = 'Incomplete'
                                                                        step_me = ''
                                                                    else:
                                                                        step_status = 'Complete'
                                                                        step_me = ''
                                                                except Exception as e:
                                                                    step_status = 'Incomplete'
                                                                    step_me = ''

                                                        # arr_step_info.append(step_me)
                                                        # arr_step_info.append(step_before)
                                                        arr_step_info.append(step_status)

                                                    else:
                                                        list_checknextstep = []
                                                        step_status = ''
                                                        print('-------------------------------------------')
                                                        for uy in range(len(sum_status_step)):
                                                            if sum_status_step[index_mystep]:
                                                                step_me = sum_status_step[index_mystep]
                                                                index_mystep = index_mystep
                                                            # print(step_me)
                                                            if step_me == 'Reject':
                                                                step_status = 'Reject'
                                                                step_me = ''
                                                            elif step_me == 'Complete' or step_me == 'Approve':
                                                                print('waddwad')
                                                                try:
                                                                    list_checknextstep = []
                                                                    for uu in range(index_mystep,len(sum_status_step),1):
                                                                        list_checknextstep.append(sum_status_step[uu])
                                                                    # print(list_checknextstep,'list_checknextstep')
                                                                    if 'Reject' in list_checknextstep:
                                                                        step_status = 'Wait__'
                                                                        step_me = ''
                                                                    elif 'Incomplete' in list_checknextstep or 'Pending' in list_checknextstep:
                                                                        step_status = 'Incomplete'
                                                                        step_me = ''
                                                                    else:
                                                                        step_status = 'Complete'
                                                                        step_me = ''
                                                                except Exception as e:
                                                                    step_status = 'Incomplete'
                                                                    step_me = ''

                                                            elif step_me == 'Incomplete' or step_me == 'Pending':
                                                                list_checknextstep = []
                                                                nn = index_mystep
                                                                try:
                                                                    while(nn > 0):
                                                                        nn = nn - 1
                                                                        list_checknextstep.append(sum_status_step[nn])
                                                                    # for uu in range(index_mystep,0):
                                                                    #     print(sum_status_step[uu])

                                                                    # print(list_checknextstep,'list_checknextstep')
                                                                    if 'Reject' in list_checknextstep:
                                                                        step_status = 'Reject'
                                                                        step_me = ''
                                                                    elif 'Incomplete' in list_checknextstep or 'Pending' in list_checknextstep:
                                                                        step_status = 'Wait__'
                                                                        step_me = ''
                                                                    elif 'Complete' in list_checknextstep or 'Approve' in list_checknextstep:
                                                                        step_status = 'Incomplete_1'
                                                                        step_me = ''

                                                                    # else:
                                                                    #     step_status = 'Complete'
                                                                    #     step_me = ''
                                                                except Exception as e:
                                                                    step_status = 'Incomplete'
                                                                    step_me = ''
                                                                # print(step_status)
                                                        arr_step_info.append(step_status)
                                                except Exception as e:
                                                    step_before = ''
                                                    print(str(e))


                    print(arr_step_info)
                    print(sid_email)

                    if 'Reject' in arr_step_info:
                        res_status_file = 'R'
                        res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                    elif 'Incomplete_1' in arr_step_info or 'Pending_1' in arr_step_info:
                        res_status_file = 'W'
                        res_status_file_string = 'รออนุมัติ'
                    elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                        res_status_file = 'N'
                        res_status_file_string = 'กำลังดำเนินการ'
                    elif 'Wait__' in arr_step_info:
                        res_status_file = 'Z'
                        res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                    elif 'Waitting' in arr_step_info:
                        res_status_file = 'W'
                        res_status_file_string = 'รออนุมัติ'
                    else:
                        res_status_file_string = 'อนุมัติแล้ว'
                    if res_status_file == 'W':
                        statusFile_count_wait = statusFile_count_wait + 1
                    elif res_status_file == 'Y':
                        statusFile_count_approve = statusFile_count_approve + 1
                    elif res_status_file == 'R':
                        statusFile_count_reject = statusFile_count_reject + 1
                    else:
                        statusFile_count_pendding = statusFile_count_pendding + 1
                    result_SenderDetails = paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_email).first()
                    if result_SenderDetails !=None:
                        file_name = result_SenderDetails.file_name
                        dateTime_String = result_SenderDetails.send_time
                        trackingCode = result_SenderDetails.tracking_id
                        sender_name = result_SenderDetails.sender_name
                        sender_email = result_SenderDetails.sender_email
                    result_DetailsDocument = paper_lessdocument.query.filter(paper_lessdocument.step_id==sid_email).first()
                    if result_DetailsDocument != None:
                        documentsign_page_options = result_DetailsDocument.sign_page_options
                        if result_DetailsDocument.options_page != None:
                            documentoptions_page = [eval(result_DetailsDocument.options_page)]
                        else:
                            documentoptions_page = []
                        if result_DetailsDocument.urgent_type != None:
                            documentUrgentType = result_DetailsDocument.urgent_type
                            if documentUrgentType == 'I':
                                documentUrgentString = 'ด่วนมาก'
                            elif documentUrgentType == 'U':
                                documentUrgentString = 'ด่วน'
                            elif documentUrgentType == 'M':
                                documentUrgentString = 'ปกติ'
                        if result_DetailsDocument.documentJson != None:
                            documentJson_result = eval(result_DetailsDocument.documentJson)
                            documentName = documentJson_result['document_name']
                            documentType = documentJson_result['document_type']
                        else:
                            documentName = None
                            documentType = None
                        document_Id = result_DetailsDocument.document_id
                    # th_dateTime_1 = convert_datetime_TH_1(int(dateTime_String.timestamp()))
                    th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                    ts = int(time.time())
                    date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                    year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                    datetime_display = int(dateTime_String.timestamp())
                    date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                    yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                    time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                    old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                    if date_time_today == date_time_db:
                        date_display_show = time_show_db
                    else:
                        if year_today == yar_db:
                            date_display_show = convert_datetime_TH_2_display(datetime_display)
                        else:
                            date_display_show = old_year
                    list_arr.append({
                        'sidCode':sid_email,
                        'document_name':documentName,
                        'document_type':documentType,
                        'document_urgent':documentUrgentType,
                        'document_urgent_string':documentUrgentString,
                        'dateTime_String':str(dateTime_String).split('+')[0],
                        'dateTime_String_TH_1':th_dateTime_2,
                        'dateTime_display':date_display_show,
                        'document_id':document_Id,
                        'stamp_all':documentsign_page_options,
                        'options_page_document':documentoptions_page,
                        # 'dateTime_String_TH_2':th_dateTime_2,
                        'date_String':str(dateTime_String).split(' ')[0],
                        'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                        'status_file_code':res_status_file,
                        'status_file_string':res_status_file_string,
                        'dateTime':int(dateTime_String.timestamp()),
                        'tracking_id':trackingCode,
                        'sender_name':sender_name,
                        'sender_email':sender_email,
                        'file_name':file_name
                    })

            json_Data['Document_Status_Details']  = {
                'Incomplete_Pendding':statusFile_count_pendding,
                'Complete_Approve':statusFile_count_approve,
                'Reject':statusFile_count_reject,
                'Wait':statusFile_count_wait
            }
            list_arr = sorted(list_arr, key=lambda k: k['dateTime'], reverse=True)
            json_Data['Document_Details'] = list_arr
            return {'result':'OK','messageText':json_Data,'status_Code':200,'messageER':None}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}


    def select_dashboard_sender(self,username):
        self.username = username
        try:
            sid_list = []
            json_Data = {}
            list_arr = []

            count_rowDocument = paper_lesssender.query.filter(paper_lesssender.send_user==self.username).count()
            count_rowDocument_StatusActive = paper_lesssender.query.filter(paper_lesssender.send_user==self.username,paper_lesssender.status=='ACTIVE').count()
            count_rowDocument_StatusReject = paper_lesssender.query.filter(paper_lesssender.send_user==self.username,paper_lesssender.status=='REJECT').count()
            count_rowDocument_StatusCancel = paper_lesssender.query.filter(paper_lesssender.send_user==self.username,paper_lesssender.status=='CANCEL').count()
            json_Data['sum_Document']  = count_rowDocument
            json_Data['DocumentInfo'] = {
                'Document_Active':count_rowDocument_StatusActive,
                'Document_Reject':count_rowDocument_StatusReject,
                'Document_Cancel':count_rowDocument_StatusCancel
            }
            statusFile_count_approve = 0
            statusFile_count_pendding = 0
            statusFile_count_reject = 0
            for i in paper_lesssender.query.filter(paper_lesssender.send_user==self.username,paper_lesssender.status=='ACTIVE').order_by(desc(paper_lesssender.send_time)).all():
                sid_list.append(i.step_data_sid)
            result_DB_tmp = paper_lessdatastep.query.filter(paper_lessdatastep.sid.in_(sid_list)).all()
            for n in range(len(result_DB_tmp)):
                result_DB = result_DB_tmp[n]
            # for n in range(len(sid_list)):
                # result_DB = paper_lessdatastep.query.filter(paper_lessdatastep.sid.in_(sid_list)).all()
                jsonData_eval = eval(result_DB.data_json)
                arr_step_info = []
                if 'step_num' in jsonData_eval:
                    step_status = ''
                    res_status_file = 'Y'
                    step_before = ''
                    arr_step_totle = []
                    json_data_info = jsonData_eval
                    if 'step_detail' in json_data_info:
                        for s in range(len(json_data_info['step_detail'])):
                            json_info_step2 = {}
                            for u in range(len(json_data_info['step_detail'][s]['activity_code'])):
                                if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
                                    if step_before == '':
                                        try:
                                            if json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Complete':
                                                step_before = 'Complete'
                                            elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Approve':
                                                step_before = 'Approve'
                                            elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Reject':
                                                step_before = 'Reject'
                                        except Exception as e:
                                            step_before = ''
                                    if step_before == '':
                                        if json_data_info['step_detail'][s]['activity_status'][u] == 'Complete':
                                            step_status = 'Complete'
                                        elif json_data_info['step_detail'][s]['activity_status'][u] == 'Approve':
                                            step_status = 'Complete'
                                        elif json_data_info['step_detail'][s]['activity_status'][u] == 'Reject':
                                            step_status = 'Reject'
                                        else:
                                            try:
                                                step_status  = 'Incomplete'
                                            except Exception as ex:
                                                step_status = 'Incomplete'
                                    arr_step_info.append(step_status)
                                    arr_step_info.append(step_before)
                    print(arr_step_info)
                    if 'Waitting' in arr_step_info:
                        res_status_file = 'W'
                        res_status_file_string = 'รออนุมัติ'
                    elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                        res_status_file = 'N'
                        res_status_file_string = 'กำลังดำเนินการ'
                    elif 'Reject' in arr_step_info:
                        res_status_file = 'R'
                        res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                    else:
                        res_status_file_string = 'อนุมัติแล้ว'
                    if res_status_file == 'Y':
                        statusFile_count_approve = statusFile_count_approve + 1
                    elif res_status_file == 'R':
                        statusFile_count_reject = statusFile_count_reject + 1
                    else:
                        statusFile_count_pendding = statusFile_count_pendding + 1
                    result_SenderDetails = paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_list[n]).first()
                    if result_SenderDetails !=None:
                        file_name = result_SenderDetails.file_name
                        dateTime_String = result_SenderDetails.send_time
                        trackingCode = result_SenderDetails.tracking_id
                        sender_name = result_SenderDetails.sender_name
                        sender_email = result_SenderDetails.sender_email
                    result_DetailsDocument = paper_lessdocument.query.filter(paper_lessdocument.step_id==sid_list[n]).first()
                    if result_DetailsDocument != None:
                        if result_DetailsDocument.options_page != None:
                            documentoptions_page = [eval(result_DetailsDocument.options_page)]
                        else:
                            documentoptions_page = []
                        if result_DetailsDocument.documentJson != None:
                            documentJson_result = eval(result_DetailsDocument.documentJson)
                            documentName = documentJson_result['document_name']
                            documentType = documentJson_result['document_type']
                        else:
                            documentName = None
                            documentType = None
                        document_Id = result_DetailsDocument.document_id
                    # th_dateTime_1 = convert_datetime_TH_1(int(dateTime_String.timestamp()))
                    th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                    ts = int(time.time())
                    date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                    year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                    datetime_display = int(dateTime_String.timestamp())
                    date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                    yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                    time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                    old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                    if date_time_today == date_time_db:
                        date_display_show = time_show_db
                    else:
                        if year_today == yar_db:
                            date_display_show = convert_datetime_TH_2_display(datetime_display)
                        else:
                            date_display_show = old_year
                    list_arr.append({
                        'sidCode':sid_list[n],
                        'document_name':documentName,
                        'document_type':documentType,
                        'dateTime_String':str(dateTime_String).split('+')[0],
                        'dateTime_String_TH_1':th_dateTime_2,
                        'dateTime_display':date_display_show,
                        'document_id':document_Id,
                        'date_String':str(dateTime_String).split(' ')[0],
                        'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                        'status_file_code':res_status_file,
                        'status_file_string':res_status_file_string,
                        'dateTime':int(dateTime_String.timestamp()),
                        'tracking_id':trackingCode,
                        'sender_name':sender_name,
                        'sender_email':sender_email,
                        'file_name':file_name,
                        'options_page_document':documentoptions_page
                    })
                else:
                    step_status = ''
                    res_status_file = 'Y'
                    step_before = ''
                    step_list_before = []
                    step_list_ = []
                    step_list_next = []
                    arr_step_totle = []
                    step_me = ''
                    step_sum_status = []
                    sum_status_step_list = []
                    list_check_step = []
                    step_list_data = []
                    max_step = (len(jsonData_eval))
                    step_infomation = jsonData_eval
                    sum_status_step = []
                    for i in range(len(step_infomation)):
                        list_check_step = []
                        json_step_info_2 = {}
                        step_list_data = []
                        step_ = step_infomation[i]
                        step_num = step_infomation[i]['step_num']
                        json_step_info_2['step_status'] = ''
                        for u in range(len(step_['step_detail'])):
                            step_2 = step_['step_detail'][u]
                            for k in range(len(step_2['activity_code'])):
                                if step_2['activity_code'][k] == 'A03':
                                    json_step_info = {}
                                    json_step_info['activity_status'] = step_2['activity_status'][k]
                                    json_step_info['one_email'] = step_2['one_email']
                                    json_step_info['step_num'] = step_num
                                    list_check_step.append(json_step_info['activity_status'])
                                    step_list_data.append(json_step_info)
                            json_step_info_2['step_info'] = step_list_data
                            if json_step_info_2['step_status'] == '':
                                if 'Reject' in list_check_step:
                                    json_step_info_2['step_status'] = 'Reject'
                                elif 'Incomplete' in list_check_step:
                                    json_step_info_2['step_status'] = 'Incomplete'
                                elif 'Pending' in list_check_step:
                                    json_step_info_2['step_status'] = 'Incomplete'
                                else:
                                    json_step_info_2['step_status'] = 'Complete'
                            sum_status_step_list.append(json_step_info_2['step_status'])
                        sum_status_step.append(json_step_info_2['step_status'])
                        if 'Reject' in sum_status_step:
                            step_status = 'Reject'
                            step_me = ''
                        elif 'Incomplete' in sum_status_step or 'Pending' in sum_status_step:
                            step_status = 'Incomplete'
                            step_me = ''
                        else:
                            step_status = 'Complete'
                            step_me = ''

                        arr_step_info.append(step_status)

                    if 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                        res_status_file = 'N'
                        res_status_file_string = 'กำลังดำเนินการ'
                    elif 'Reject' in arr_step_info:
                        res_status_file = 'R'
                        res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                    else:
                        res_status_file_string = 'อนุมัติแล้ว'
                    if res_status_file == 'Y':
                        statusFile_count_approve = statusFile_count_approve + 1
                    elif res_status_file == 'R':
                        statusFile_count_reject = statusFile_count_reject + 1
                    else:
                        statusFile_count_pendding = statusFile_count_pendding + 1
                    result_SenderDetails = paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_list[n]).first()
                    if result_SenderDetails !=None:
                        file_name = result_SenderDetails.file_name
                        dateTime_String = result_SenderDetails.send_time
                        trackingCode = result_SenderDetails.tracking_id
                        sender_name = result_SenderDetails.sender_name
                        sender_email = result_SenderDetails.sender_email
                    result_DetailsDocument = paper_lessdocument.query.filter(paper_lessdocument.step_id==sid_list[n]).first()
                    if result_DetailsDocument != None:
                        if result_DetailsDocument.options_page != None:
                            documentoptions_page = [eval(result_DetailsDocument.options_page)]
                        else:
                            documentoptions_page = []
                        if result_DetailsDocument.documentJson != None:
                            documentJson_result = eval(result_DetailsDocument.documentJson)
                            documentName = documentJson_result['document_name']
                            documentType = documentJson_result['document_type']
                        else:
                            documentName = None
                            documentType = None
                        document_Id = result_DetailsDocument.document_id
                    # th_dateTime_1 = convert_datetime_TH_1(int(dateTime_String.timestamp()))
                    th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                    ts = int(time.time())
                    date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                    year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                    datetime_display = int(dateTime_String.timestamp())
                    date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                    yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                    time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                    old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                    if date_time_today == date_time_db:
                        date_display_show = time_show_db
                    else:
                        if year_today == yar_db:
                            date_display_show = convert_datetime_TH_2_display(datetime_display)
                        else:
                            date_display_show = old_year
                    list_arr.append({
                        'sidCode':sid_list[n],
                        'document_name':documentName,
                        'document_type':documentType,
                        'dateTime_String':str(dateTime_String).split('+')[0],
                        'dateTime_String_TH_1':th_dateTime_2,
                        'dateTime_display':date_display_show,
                        'document_id':document_Id,
                        'date_String':str(dateTime_String).split(' ')[0],
                        'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                        'status_file_code':res_status_file,
                        'status_file_string':res_status_file_string,
                        'dateTime':int(dateTime_String.timestamp()),
                        'tracking_id':trackingCode,
                        'sender_name':sender_name,
                        'sender_email':sender_email,
                        'file_name':file_name,
                        'options_page_document':documentoptions_page
                    })
            json_Data['Document_Status_Details']  = {
                'Incomplete_Pendding':statusFile_count_pendding,
                'Complete_Approve':statusFile_count_approve,
                'Reject':statusFile_count_reject
            }
            # list_arr = sorted(list_arr, key=lambda k: k['dateTime'], reverse=True)
            json_Data['Document_Details'] = list_arr

            return {'result':'OK','messageText':json_Data,'status_Code':200,'messageER':None}
        except Exception as ex:
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

    # def select_dashboard_sender_v4(self,username,emailUser):
    #     self.username = username
    #     self.emailUser = emailUser
    #     try:
    #         sid_list = []
    #         json_Data = {}
    #         list_arr = []
    #         count_rowDocument = 0
    #         count_rowDocument_StatusActive = 0
    #         count_rowDocument_StatusReject = 0
    #         count_rowDocument_StatusCancel = 0
    #         statusFile_count_approve = 0
    #         statusFile_count_pendding = 0
    #         statusFile_count_reject = 0
    #         statusFile_count_wait = 0
    #         count_rowDocument = paper_lesssender.query.filter(paper_lesssender.send_user==self.username).count()
    #         count_rowDocument_StatusActive = paper_lesssender.query.filter(paper_lesssender.send_user==self.username,paper_lesssender.status=='ACTIVE').count()
    #         count_rowDocument_StatusReject = paper_lesssender.query.filter(paper_lesssender.send_user==self.username,paper_lesssender.status=='REJECT').count()
    #         count_rowDocument_StatusCancel = paper_lesssender.query.filter(paper_lesssender.send_user==self.username,paper_lesssender.status=='CANCEL').count()
    #         json_Data['sum_Document']  = count_rowDocument
    #         json_Data['DocumentInfo'] = {
    #             'Document_Active':count_rowDocument_StatusActive,
    #             'Document_Reject':count_rowDocument_StatusReject,
    #             'Document_Cancel':count_rowDocument_StatusCancel
    #         }

    #         for i in paper_lesssender.query.filter(paper_lesssender.send_user==self.username,paper_lesssender.status=='ACTIVE').order_by(desc(paper_lesssender.send_time)).all():
    #             sid_list.append(i.step_data_sid)
    #         query_email = paper_lessdatastep.query.filter(paper_lessdatastep.sid.in_(sid_list)).all()
    #         for n in range(len(query_email)):
    #             result_DB = query_email[n]
    #             sid_email = result_DB.sid
    #             # result_DB = paper_lessdatastep.query.filter(paper_lessdatastep.sid==sid_list_email[n]).first()
    #             jsonData_eval = eval(result_DB.data_json)
    #             arr_step_info = []
    #             if 'step_num' in jsonData_eval:
    #                 step_status = ''
    #                 step_before = ''
    #                 res_status_file = 'Y'
    #                 arr_step_totle = []
    #                 json_data_info = jsonData_eval
    #                 if 'step_detail' in json_data_info:
    #                     for s in range(len(json_data_info['step_detail'])):
    #                         json_info_step2 = {}
    #                         for u in range(len(json_data_info['step_detail'][s]['activity_code'])):
    #                             oneMail = json_data_info['step_detail'][s]['one_email']
    #                             if str(oneMail).replace(' ','').lower() == self.emailUser:
    #                                 if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
    #                                     if step_before == '':
    #                                         try:
    #                                             if json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Complete':
    #                                                 step_before = 'Complete'
    #                                             elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Approve':
    #                                                 step_before = 'Complete'
    #                                             elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Reject':
    #                                                 step_before = 'Reject'
    #                                         except Exception as e:
    #                                             step_before = ''
    #                                     if step_before != 'Reject':
    #                                         if json_data_info['step_detail'][s]['activity_status'][u] == 'Complete':
    #                                             step_status = 'Complete'
    #                                         elif json_data_info['step_detail'][s]['activity_status'][u] == 'Approve':
    #                                             step_status = 'Complete'
    #                                         elif json_data_info['step_detail'][s]['activity_status'][u] == 'Reject':
    #                                             step_status = 'Reject'
    #                                         else:
    #                                             try:
    #                                                 step_status  = 'Incomplete'
    #                                             except Exception as ex:
    #                                                 step_status = 'Incomplete'
    #                                     arr_step_info.append(step_status)
    #                                     arr_step_info.append(step_before)
    #                             else:
    #                                 if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
    #                                     if step_before == '':
    #                                         try:
    #                                             if json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Complete':
    #                                                 step_before = 'Complete'
    #                                             elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Approve':
    #                                                 step_before = 'Complete'
    #                                             elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Reject':
    #                                                 step_before = 'Reject'
    #                                         except Exception as e:
    #                                             step_before = ''
    #                                     if step_before != 'Reject':
    #                                         if json_data_info['step_detail'][s]['activity_status'][u] == 'Complete':
    #                                             step_status = 'Complete'
    #                                         elif json_data_info['step_detail'][s]['activity_status'][u] == 'Approve':
    #                                             step_status = 'Complete'
    #                                         elif json_data_info['step_detail'][s]['activity_status'][u] == 'Reject':
    #                                             step_status = 'Reject'
    #                                         else:
    #                                             try:
    #                                                 step_status  = 'Incomplete__'
    #                                             except Exception as ex:
    #                                                 step_status = 'Incomplete__'
    #                                     arr_step_info.append(step_status)
    #                                     arr_step_info.append(step_before)
    #                 # print(arr_step_info)
    #                 # print(sid_email)
    #                 if 'Waitting' in arr_step_info:
    #                     res_status_file = 'W'
    #                     res_status_file_string = 'รออนุมัติ'
    #                 elif 'Incomplete__' in arr_step_info:
    #                     res_status_file = 'N'
    #                     res_status_file_string = 'กำลังดำเนินการ'
    #                 elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
    #                     res_status_file = 'W'
    #                     res_status_file_string = 'รออนุมัติ'
    #                 elif 'Reject' in arr_step_info:
    #                     res_status_file = 'R'
    #                     res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
    #                 else:
    #                     res_status_file_string = 'อนุมัติแล้ว'
    #                 if res_status_file == 'W':
    #                     statusFile_count_wait = statusFile_count_wait + 1
    #                 elif res_status_file == 'Y':
    #                     statusFile_count_approve = statusFile_count_approve + 1
    #                 elif res_status_file == 'R':
    #                     statusFile_count_reject = statusFile_count_reject + 1
    #                 else:
    #                     statusFile_count_pendding = statusFile_count_pendding + 1
    #                 result_SenderDetails = paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_email).first()
    #                 if result_SenderDetails !=None:
    #                     file_name = result_SenderDetails.file_name
    #                     dateTime_String = result_SenderDetails.send_time
    #                     trackingCode = result_SenderDetails.tracking_id
    #                     sender_name = result_SenderDetails.sender_name
    #                     sender_email = result_SenderDetails.sender_email
    #                 result_DetailsDocument = paper_lessdocument.query.filter(paper_lessdocument.step_id==sid_email).first()
    #                 if result_DetailsDocument != None:
    #                     documentsign_page_options = result_DetailsDocument.sign_page_options
    #                     if result_DetailsDocument.options_page != None:
    #                         documentoptions_page = [eval(result_DetailsDocument.options_page)]
    #                     else:
    #                         documentoptions_page = []
    #                     if result_DetailsDocument.urgent_type != None:
    #                         documentUrgentType = result_DetailsDocument.urgent_type
    #                         if documentUrgentType == 'I':
    #                             documentUrgentString = 'ด่วนมาก'
    #                         elif documentUrgentType == 'U':
    #                             documentUrgentString = 'ด่วน'
    #                         elif documentUrgentType == 'M':
    #                             documentUrgentString = 'ปกติ'
    #                     if result_DetailsDocument.documentJson != None:
    #                         documentJson_result = eval(result_DetailsDocument.documentJson)
    #                         documentName = documentJson_result['document_name']
    #                         documentType = documentJson_result['document_type']
    #                     else:
    #                         documentName = None
    #                         documentType = None
    #                     document_Id = result_DetailsDocument.document_id
    #                 # th_dateTime_1 = convert_datetime_TH_1(int(dateTime_String.timestamp()))
    #                 th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
    #                 ts = int(time.time())
    #                 date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
    #                 year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
    #                 datetime_display = int(dateTime_String.timestamp())
    #                 date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
    #                 yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
    #                 time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
    #                 old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
    #                 if date_time_today == date_time_db:
    #                     date_display_show = time_show_db
    #                 else:
    #                     if year_today == yar_db:
    #                         date_display_show = convert_datetime_TH_2_display(datetime_display)
    #                     else:
    #                         date_display_show = old_year
    #                 list_arr.append({
    #                     'sidCode':sid_email,
    #                     'document_name':documentName,
    #                     'document_type':documentType,
    #                     'document_urgent':documentUrgentType,
    #                     'document_urgent_string':documentUrgentString,
    #                     'dateTime_String':str(dateTime_String).split('+')[0],
    #                     'dateTime_String_TH_1':th_dateTime_2,
    #                     'dateTime_display':date_display_show,
    #                     'document_id':document_Id,
    #                     'stamp_all':documentsign_page_options,
    #                     'options_page_document':documentoptions_page,
    #                     # 'dateTime_String_TH_2':th_dateTime_2,
    #                     'date_String':str(dateTime_String).split(' ')[0],
    #                     'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
    #                     'status_file_code':res_status_file,
    #                     'status_file_string':res_status_file_string,
    #                     'dateTime':int(dateTime_String.timestamp()),
    #                     'tracking_id':trackingCode,
    #                     'sender_name':sender_name,
    #                     'sender_email':sender_email,
    #                     'file_name':file_name
    #                 })
    #             else:
    #                 step_status = ''
    #                 res_status_file = 'Y'
    #                 step_before = ''
    #                 step_list_before = []
    #                 step_list_ = []
    #                 step_list_next = []
    #                 arr_step_totle = []
    #                 step_me = ''
    #                 step_sum_status = []
    #                 sum_status_step_list = []
    #                 list_check_step = []
    #                 step_list_data = []
    #                 max_step = (len(jsonData_eval))
    #                 step_infomation = jsonData_eval
    #                 sum_status_step = []
    #                 for i in range(len(step_infomation)):
    #                     list_check_step = []
    #                     json_step_info_2 = {}
    #                     step_list_data = []
    #                     step_ = step_infomation[i]
    #                     step_num = step_infomation[i]['step_num']
    #                     json_step_info_2['step_status'] = ''
    #                     for u in range(len(step_['step_detail'])):
    #                         oneMail = step_['step_detail'][u]['one_email']
    #                         if str(oneMail).replace(' ','').lower() == self.emailUser:
    #                             step_me = step_infomation[i]['step_num']
    #                             step_me = int(step_me) - 1
    #                         step_2 = step_['step_detail'][u]
    #                         for k in range(len(step_2['activity_code'])):
    #                             if step_2['activity_code'][k] == 'A03':
    #                                 json_step_info = {}
    #                                 json_step_info['activity_status'] = step_2['activity_status'][k]
    #                                 json_step_info['one_email'] = step_2['one_email']
    #                                 json_step_info['step_num'] = step_num
    #                                 list_check_step.append(json_step_info['activity_status'])
    #                                 step_list_data.append(json_step_info)
    #                     json_step_info_2['step_info'] = step_list_data
    #                     if json_step_info_2['step_status'] == '':
    #                         if 'Reject' in list_check_step:
    #                             json_step_info_2['step_status'] = 'Reject'
    #                         elif 'Approve' in list_check_step:
    #                             json_step_info_2['step_status'] = 'Complete'
    #                         elif 'Complete' in list_check_step:
    #                             json_step_info_2['step_status'] = 'Complete'
    #                         elif 'Incomplete' in list_check_step:
    #                             json_step_info_2['step_status'] = 'Incomplete'
    #                         elif 'Pending' in list_check_step:
    #                             json_step_info_2['step_status'] = 'Incomplete'
    #                         else:
    #                             json_step_info_2['step_status'] = 'Complete'
    #                     sum_status_step_list.append(json_step_info_2['step_status'])
    #                     sum_status_step.append(json_step_info_2['step_status'])
    #                 print(sum_status_step)
    #                 index_mystep = step_me
    #                 for l in range(len(jsonData_eval)):
    #                     json_data_info = jsonData_eval[l]
    #                     step_sum_status = []
    #                     step_list_next = []
    #                     if 'step_detail' in json_data_info:
    #                         for s in range(len(json_data_info['step_detail'])):
    #                             json_info_step2 = {}
    #                             for u in range(len(json_data_info['step_detail'][s]['activity_code'])):
    #                                 oneMail = json_data_info['step_detail'][s]['one_email']
    #                                 if str(oneMail).replace(' ','').lower() == self.emailUser:
    #                                     if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
    #                                         if step_before == '':
    #                                             try:
    #                                                 if l == 0:
    #                                                     list_checknextstep = []
    #                                                     for uy in range(len(sum_status_step)):
    #                                                         if sum_status_step[index_mystep]:
    #                                                             step_me = sum_status_step[index_mystep]
    #                                                             index_mystep = index_mystep

    #                                                         if step_me == 'Reject':
    #                                                             step_status = 'Reject'
    #                                                             step_me = ''
    #                                                         elif step_me == 'Incomplete' or step_me == 'Pending':
    #                                                             step_status = 'Incomplete_1'
    #                                                             step_me = ''
    #                                                         elif step_me == 'Complete' or step_me == 'Approve':
    #                                                             try:
    #                                                                 for uu in range(index_mystep,len(sum_status_step),1):
    #                                                                     list_checknextstep.append(sum_status_step[uu])
    #                                                                 # print(list_checknextstep,'list_checknextstep')
    #                                                                 if 'Reject' in list_checknextstep:
    #                                                                     step_status = 'Reject'
    #                                                                     step_me = ''
    #                                                                 elif 'Incomplete' in list_checknextstep or 'Pending' in list_checknextstep:
    #                                                                     step_status = 'Incomplete'
    #                                                                     step_me = ''
    #                                                                 else:
    #                                                                     step_status = 'Complete'
    #                                                                     step_me = ''
    #                                                             except Exception as e:
    #                                                                 step_status = 'Incomplete'
    #                                                                 step_me = ''

    #                                                     # arr_step_info.append(step_me)
    #                                                     # arr_step_info.append(step_before)
    #                                                     arr_step_info.append(step_status)
    #                                                 else:
    #                                                     list_checknextstep = []
    #                                                     step_status = ''
    #                                                     # print('-------------------------------------------')
    #                                                     for uy in range(len(sum_status_step)):
    #                                                         if sum_status_step[index_mystep]:
    #                                                             step_me = sum_status_step[index_mystep]
    #                                                             index_mystep = index_mystep
    #                                                         # print(index_mystep)
    #                                                         if step_me == 'Reject':
    #                                                             step_status = 'Reject'
    #                                                             step_me = ''
    #                                                         elif step_me == 'Complete' and step_me == 'Approve':
    #                                                             try:
    #                                                                 list_checknextstep = []
    #                                                                 for uu in range(index_mystep,len(sum_status_step),1):
    #                                                                     list_checknextstep.append(sum_status_step[uu])
    #                                                                 # print(list_checknextstep,'list_checknextstep')
    #                                                                 if 'Reject' in list_checknextstep:
    #                                                                     step_status = 'Wait__'
    #                                                                     step_me = ''
    #                                                                 elif 'Incomplete' in list_checknextstep or 'Pending' in list_checknextstep:
    #                                                                     step_status = 'Incomplete'
    #                                                                     step_me = ''
    #                                                                 else:
    #                                                                     step_status = 'Complete'
    #                                                                     step_me = ''
    #                                                             except Exception as e:
    #                                                                 step_status = 'Incomplete'
    #                                                                 step_me = ''
    #                                                         elif step_me == 'Incomplete' or step_me == 'Pending':
    #                                                             list_checknextstep = []
    #                                                             nn = index_mystep
    #                                                             try:
    #                                                                 while(nn > 0):
    #                                                                     nn = nn - 1
    #                                                                     list_checknextstep.append(sum_status_step[nn])
    #                                                                 # for uu in range(index_mystep,0):
    #                                                                 #     print(sum_status_step[uu])

    #                                                                 # print(list_checknextstep,'list_checknextstep')
    #                                                                 if 'Reject' in list_checknextstep:
    #                                                                     step_status = 'Reject'
    #                                                                     step_me = ''
    #                                                                 elif 'Incomplete' in list_checknextstep or 'Pending' in list_checknextstep:
    #                                                                     step_status = 'Wait__'
    #                                                                     step_me = ''
    #                                                                 elif 'Complete' in list_checknextstep or 'Approve' in list_checknextstep:
    #                                                                     step_status = 'Incomplete_1'
    #                                                                     step_me = ''

    #                                                                 # else:
    #                                                                 #     step_status = 'Complete'
    #                                                                 #     step_me = ''
    #                                                             except Exception as e:
    #                                                                 step_status = 'Incomplete'
    #                                                                 step_me = ''

    #                                                     arr_step_info.append(step_status)
    #                                             except Exception as e:
    #                                                 step_before = ''
    #                                                 print(str(e))
    #                                 else:

    #                                     if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
    #                                             # print(sum_status_step)
    #                                             if step_before == '':
    #                                                 try:
    #                                                     if l == 0:
    #                                                         list_checknextstep = []
    #                                                         for uy in range(len(sum_status_step)):
    #                                                             step_me = sum_status_step[uy]
    #                                                             index_mystep = index_mystep
    #                                                             print(step_me)
    #                                                             if step_me == 'Reject':
    #                                                                 step_status = 'Reject'
    #                                                                 step_me = ''
    #                                                             elif step_me == 'Incomplete' or step_me == 'Pending':
    #                                                                 step_status = 'Incomplete_1'
    #                                                                 step_me = ''
    #                                                             elif step_me == 'Complete' or step_me == 'Approve':
    #                                                                 step_status = 'Complete'
    #                                                                 step_me = ''
    #                                                         # print(step_status)
    #                                                         arr_step_info.append(step_status)
    #                                                         # print(step_status)
    #                                                     else:
    #                                                         list_checknextstep = []
    #                                                         step_status = ''
    #                                                         # print(step_status)
    #                                                         for uy in range(len(sum_status_step)):
    #                                                             step_me = sum_status_step[uy]
    #                                                             index_mystep = index_mystep
    #                                                             print(step_me)
    #                                                             if step_me == 'Reject':
    #                                                                 step_status = 'Reject'
    #                                                                 step_me = ''
    #                                                             elif step_me == 'Complete' and step_me == 'Approve':
    #                                                                 try:

    #                                                                     list_checknextstep = []
    #                                                                     for uu in range(index_mystep,len(sum_status_step),1):
    #                                                                         list_checknextstep.append(sum_status_step[uu])
    #                                                                     # print(list_checknextstep,'list_checknextstep')
    #                                                                     if 'Reject' in list_checknextstep:
    #                                                                         step_status = 'Reject'
    #                                                                         step_me = ''
    #                                                                     elif 'Incomplete' in list_checknextstep or 'Pending' in list_checknextstep:
    #                                                                         step_status = 'Incomplete'
    #                                                                         step_me = ''
    #                                                                     else:
    #                                                                         step_status = 'Complete'
    #                                                                         step_me = ''
    #                                                                 except Exception as e:
    #                                                                     step_status = 'Incomplete'
    #                                                                     step_me = ''
    #                                                             elif step_me == 'Incomplete' or step_me == 'Pending':

    #                                                                 list_checknextstep = []
    #                                                                 nn = index_mystep
    #                                                                 try:
    #                                                                     while(nn > 0):
    #                                                                         nn = nn - 1
    #                                                                         list_checknextstep.append(sum_status_step[nn])
    #                                                                     # for uu in range(index_mystep,0):
    #                                                                     #     print(sum_status_step[uu])

    #                                                                     # print(list_checknextstep,'list_checknextstep')
    #                                                                     if 'Reject' in list_checknextstep:
    #                                                                         step_status = 'Reject'
    #                                                                         step_me = ''
    #                                                                     elif 'Incomplete' in list_checknextstep or 'Pending' in list_checknextstep:
    #                                                                         step_status = 'Wait__'
    #                                                                         step_me = ''
    #                                                                     elif 'Complete' in list_checknextstep or 'Approve' in list_checknextstep:
    #                                                                         step_status = 'Incomplete_1'
    #                                                                         step_me = ''

    #                                                                     # else:
    #                                                                     #     step_status = 'Complete'
    #                                                                     #     step_me = ''
    #                                                                 except Exception as e:
    #                                                                     step_status = 'Incomplete'
    #                                                                     step_me = ''
    #                                                             # print(step_status)
    #                                                             arr_step_info.append(step_status)
    #                                                 except Exception as e:
    #                                                     exc_type, exc_obj, exc_tb = sys.exc_info()
    #                                                     fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
    #                                                     print(exc_type, fname, exc_tb.tb_lineno)
    #                                                     step_before = ''
    #                                                     arr_step_info.append(step_before)
    #                                                     # print(str(e))
    #                 print(arr_step_info)
    #                 print( sid_email)

    #                 if 'Reject' in arr_step_info:
    #                     res_status_file = 'R'
    #                     res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
    #                 elif 'Wait__' in arr_step_info:
    #                     res_status_file = 'Z'
    #                     res_status_file_string = 'อยู่ในช่วงดำเนินการ'
    #                 elif 'Incomplete_1' in arr_step_info or 'Pending_1' in arr_step_info:
    #                     res_status_file = 'W'
    #                     res_status_file_string = 'รออนุมัติ'
    #                 elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
    #                     res_status_file = 'N'
    #                     res_status_file_string = 'กำลังดำเนินการ'

    #                 elif 'Waitting' in arr_step_info:
    #                     res_status_file = 'W'
    #                     res_status_file_string = 'รออนุมัติ'
    #                 else:
    #                     res_status_file_string = 'อนุมัติแล้ว'
    #                 if res_status_file == 'W':
    #                     statusFile_count_wait = statusFile_count_wait + 1
    #                 elif res_status_file == 'Y':
    #                     statusFile_count_approve = statusFile_count_approve + 1
    #                 elif res_status_file == 'R':
    #                     statusFile_count_reject = statusFile_count_reject + 1
    #                 else:
    #                     statusFile_count_pendding = statusFile_count_pendding + 1
    #                 result_SenderDetails = paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_email).first()
    #                 if result_SenderDetails !=None:
    #                     file_name = result_SenderDetails.file_name
    #                     dateTime_String = result_SenderDetails.send_time
    #                     trackingCode = result_SenderDetails.tracking_id
    #                     sender_name = result_SenderDetails.sender_name
    #                     sender_email = result_SenderDetails.sender_email
    #                 result_DetailsDocument = paper_lessdocument.query.filter(paper_lessdocument.step_id==sid_email).first()
    #                 if result_DetailsDocument != None:
    #                     documentsign_page_options = result_DetailsDocument.sign_page_options
    #                     if result_DetailsDocument.options_page != None:
    #                         documentoptions_page = [eval(result_DetailsDocument.options_page)]
    #                     else:
    #                         documentoptions_page = []
    #                     if result_DetailsDocument.urgent_type != None:
    #                         documentUrgentType = result_DetailsDocument.urgent_type
    #                         if documentUrgentType == 'I':
    #                             documentUrgentString = 'ด่วนมาก'
    #                         elif documentUrgentType == 'U':
    #                             documentUrgentString = 'ด่วน'
    #                         elif documentUrgentType == 'M':
    #                             documentUrgentString = 'ปกติ'
    #                     if result_DetailsDocument.documentJson != None:
    #                         documentJson_result = eval(result_DetailsDocument.documentJson)
    #                         documentName = documentJson_result['document_name']
    #                         documentType = documentJson_result['document_type']
    #                     else:
    #                         documentName = None
    #                         documentType = None
    #                     document_Id = result_DetailsDocument.document_id
    #                 # th_dateTime_1 = convert_datetime_TH_1(int(dateTime_String.timestamp()))
    #                 th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
    #                 ts = int(time.time())
    #                 date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
    #                 year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
    #                 datetime_display = int(dateTime_String.timestamp())
    #                 date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
    #                 yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
    #                 time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
    #                 old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
    #                 if date_time_today == date_time_db:
    #                     date_display_show = time_show_db
    #                 else:
    #                     if year_today == yar_db:
    #                         date_display_show = convert_datetime_TH_2_display(datetime_display)
    #                     else:
    #                         date_display_show = old_year
    #                 list_arr.append({
    #                     'sidCode':sid_email,
    #                     'document_name':documentName,
    #                     'document_type':documentType,
    #                     'document_urgent':documentUrgentType,
    #                     'document_urgent_string':documentUrgentString,
    #                     'dateTime_String':str(dateTime_String).split('+')[0],
    #                     'dateTime_String_TH_1':th_dateTime_2,
    #                     'dateTime_display':date_display_show,
    #                     'document_id':document_Id,
    #                     'stamp_all':documentsign_page_options,
    #                     'options_page_document':documentoptions_page,
    #                     # 'dateTime_String_TH_2':th_dateTime_2,
    #                     'date_String':str(dateTime_String).split(' ')[0],
    #                     'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
    #                     'status_file_code':res_status_file,
    #                     'status_file_string':res_status_file_string,
    #                     'dateTime':int(dateTime_String.timestamp()),
    #                     'tracking_id':trackingCode,
    #                     'sender_name':sender_name,
    #                     'sender_email':sender_email,
    #                     'file_name':file_name
    #                 })


    #         json_Data['Document_Status_Details']  = {
    #             'Incomplete_Pendding':statusFile_count_pendding,
    #             'Complete_Approve':statusFile_count_approve,
    #             'Reject':statusFile_count_reject,
    #             'Wait':statusFile_count_wait
    #         }
    #         list_arr = sorted(list_arr, key=lambda k: k['dateTime'], reverse=True)
    #         json_Data['Document_Details'] = list_arr

    #         return {'result':'OK','messageText':json_Data,'status_Code':200,'messageER':None}
    #     except Exception as ex:
    #         return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

    # def select_dashboard_recipient_v4(self,emailUser):
    #     self.emailUser = emailUser
    #     sid_list = []
    #     sid_list_email = []
    #     json_Data = {}
    #     list_arr = []
    #     list_json = []
    #     try:
    #         for i in paper_lesssender.query.filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.contains(self.emailUser)).order_by(desc(paper_lesssender.send_time)).all():
    #             sid_list_email.append(i.step_data_sid)
    #     except Exception as ex:
    #         exc_type, exc_obj, exc_tb = sys.exc_info()
    #         fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
    #         print(exc_type, fname, exc_tb.tb_lineno)
    #         return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

    #     count_rowDocument = 0
    #     count_rowDocument_StatusActive = 0
    #     count_rowDocument_StatusReject = 0
    #     count_rowDocument_StatusCancel = 0
    #     statusFile_count_approve = 0
    #     statusFile_count_pendding = 0
    #     statusFile_count_reject = 0
    #     statusFile_count_wait = 0
    #     try:
    #         count_rowDocument_StatusActive = paper_lesssender.query.filter(paper_lesssender.step_data_sid.in_(sid_list_email),paper_lesssender.status=='ACTIVE').count()
    #         count_rowDocument_StatusReject = paper_lesssender.query.filter(paper_lesssender.step_data_sid.in_(sid_list_email),paper_lesssender.status=='REJECT').count()
    #         count_rowDocument_StatusCancel = paper_lesssender.query.filter(paper_lesssender.step_data_sid.in_(sid_list_email),paper_lesssender.status=='CANCEL').count()
    #         count_rowDocument = len(sid_list_email)
    #         # for i in range(len(sid_list_email)):
    #         #     count_rowDocument = count_rowDocument + 1
    #         #     count_rowDocument_StatusActive += paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_list_email[i],paper_lesssender.status=='ACTIVE').count()
    #         #     count_rowDocument_StatusReject += paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_list_email[i],paper_lesssender.status=='REJECT').count()
    #         #     count_rowDocument_StatusCancel += paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_list_email[i],paper_lesssender.status=='CANCEL').count()
    #         json_Data['sum_Document']  = count_rowDocument
    #         json_Data['DocumentInfo'] = {
    #             'Document_Active':count_rowDocument_StatusActive,
    #             'Document_Reject':count_rowDocument_StatusReject,
    #             'Document_Cancel':count_rowDocument_StatusCancel
    #         }
    #         query_email = paper_lessdatastep.query.filter(paper_lessdatastep.sid.in_(sid_list_email)).all()
    #         # print(query_email[0])
    #         # return ''
    #         # for n in range(len(sid_list_email)):
    #         for n in range(len(query_email)):
    #             result_DB = query_email[n]
    #             sid_email = result_DB.sid
    #             # result_DB = paper_lessdatastep.query.filter(paper_lessdatastep.sid==sid_list_email[n]).first()
    #             jsonData_eval = eval(result_DB.data_json)
    #             arr_step_info = []
    #             if 'step_num' in jsonData_eval:
    #                 step_status = ''
    #                 step_before = ''
    #                 res_status_file = 'Y'
    #                 arr_step_totle = []
    #                 json_data_info = jsonData_eval
    #                 if 'step_detail' in json_data_info:
    #                     for s in range(len(json_data_info['step_detail'])):
    #                         json_info_step2 = {}
    #                         for u in range(len(json_data_info['step_detail'][s]['activity_code'])):
    #                             oneMail = json_data_info['step_detail'][s]['one_email']
    #                             if str(oneMail).replace(' ','').lower() == self.emailUser:
    #                                 if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
    #                                     if step_before == '':
    #                                         try:
    #                                             if json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Complete':
    #                                                 step_before = 'Complete'
    #                                             elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Approve':
    #                                                 step_before = 'Complete'
    #                                             elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Reject':
    #                                                 step_before = 'Reject'
    #                                         except Exception as e:
    #                                             step_before = ''
    #                                     if step_before != 'Reject':
    #                                         if json_data_info['step_detail'][s]['activity_status'][u] == 'Complete':
    #                                             step_status = 'Complete'
    #                                         elif json_data_info['step_detail'][s]['activity_status'][u] == 'Approve':
    #                                             step_status = 'Complete'
    #                                         elif json_data_info['step_detail'][s]['activity_status'][u] == 'Reject':
    #                                             step_status = 'Reject'
    #                                         else:
    #                                             try:
    #                                                 step_status  = 'Incomplete'
    #                                             except Exception as ex:
    #                                                 step_status = 'Incomplete'
    #                                     arr_step_info.append(step_status)
    #                                     arr_step_info.append(step_before)
    #                 # print(arr_step_info)
    #                 # print(sid_email)
    #                 if 'Reject' in arr_step_info:
    #                     res_status_file = 'R'
    #                     res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
    #                 elif 'Complete' in arr_step_info:
    #                     res_status_file = 'Y'
    #                     res_status_file_string = 'อนุมัติแล้ว'
    #                 elif 'Waitting' in arr_step_info:
    #                     res_status_file = 'W'
    #                     res_status_file_string = 'รออนุมัติ'
    #                 elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
    #                     res_status_file = 'W'
    #                     res_status_file_string = 'รออนุมัติ'
    #                 else:
    #                     res_status_file_string = 'อนุมัติแล้ว'
    #                 if res_status_file == 'W':
    #                     statusFile_count_wait = statusFile_count_wait + 1
    #                 elif res_status_file == 'Y':
    #                     statusFile_count_approve = statusFile_count_approve + 1
    #                 elif res_status_file == 'R':
    #                     statusFile_count_reject = statusFile_count_reject + 1
    #                 else:
    #                     statusFile_count_pendding = statusFile_count_pendding + 1
    #                 result_SenderDetails = paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_email).first()
    #                 if result_SenderDetails !=None:
    #                     file_name = result_SenderDetails.file_name
    #                     dateTime_String = result_SenderDetails.send_time
    #                     trackingCode = result_SenderDetails.tracking_id
    #                     sender_name = result_SenderDetails.sender_name
    #                     sender_email = result_SenderDetails.sender_email
    #                 result_DetailsDocument = paper_lessdocument.query.filter(paper_lessdocument.step_id==sid_email).first()
    #                 if result_DetailsDocument != None:
    #                     documentsign_page_options = result_DetailsDocument.sign_page_options
    #                     if result_DetailsDocument.options_page != None:
    #                         documentoptions_page = [eval(result_DetailsDocument.options_page)]
    #                     else:
    #                         documentoptions_page = []
    #                     if result_DetailsDocument.urgent_type != None:
    #                         documentUrgentType = result_DetailsDocument.urgent_type
    #                         if documentUrgentType == 'I':
    #                             documentUrgentString = 'ด่วนมาก'
    #                         elif documentUrgentType == 'U':
    #                             documentUrgentString = 'ด่วน'
    #                         elif documentUrgentType == 'M':
    #                             documentUrgentString = 'ปกติ'
    #                     if result_DetailsDocument.documentJson != None:
    #                         documentJson_result = eval(result_DetailsDocument.documentJson)
    #                         documentName = documentJson_result['document_name']
    #                         documentType = documentJson_result['document_type']
    #                     else:
    #                         documentName = None
    #                         documentType = None
    #                     document_Id = result_DetailsDocument.document_id
    #                 # th_dateTime_1 = convert_datetime_TH_1(int(dateTime_String.timestamp()))
    #                 th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
    #                 ts = int(time.time())
    #                 date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
    #                 year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
    #                 datetime_display = int(dateTime_String.timestamp())
    #                 date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
    #                 yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
    #                 time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
    #                 old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
    #                 if date_time_today == date_time_db:
    #                     date_display_show = time_show_db
    #                 else:
    #                     if year_today == yar_db:
    #                         date_display_show = convert_datetime_TH_2_display(datetime_display)
    #                     else:
    #                         date_display_show = old_year
    #                 list_arr.append({
    #                     'sidCode':sid_email,
    #                     'document_name':documentName,
    #                     'document_type':documentType,
    #                     'document_urgent':documentUrgentType,
    #                     'document_urgent_string':documentUrgentString,
    #                     'dateTime_String':str(dateTime_String).split('+')[0],
    #                     'dateTime_String_TH_1':th_dateTime_2,
    #                     'dateTime_display':date_display_show,
    #                     'document_id':document_Id,
    #                     'stamp_all':documentsign_page_options,
    #                     'options_page_document':documentoptions_page,
    #                     # 'dateTime_String_TH_2':th_dateTime_2,
    #                     'date_String':str(dateTime_String).split(' ')[0],
    #                     'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
    #                     'status_file_code':res_status_file,
    #                     'status_file_string':res_status_file_string,
    #                     'dateTime':int(dateTime_String.timestamp()),
    #                     'tracking_id':trackingCode,
    #                     'sender_name':sender_name,
    #                     'sender_email':sender_email,
    #                     'file_name':file_name
    #                 })
    #             else:
    #                 step_status = ''
    #                 res_status_file = 'Y'
    #                 step_before = ''
    #                 step_list_before = []
    #                 step_list_ = []
    #                 step_list_next = []
    #                 arr_step_totle = []
    #                 step_me = ''
    #                 step_sum_status = []
    #                 sum_status_step_list = []
    #                 list_check_step = []
    #                 step_list_data = []
    #                 max_step = (len(jsonData_eval))
    #                 step_infomation = jsonData_eval
    #                 sum_status_step = []
    #                 for i in range(len(step_infomation)):
    #                     list_check_step = []
    #                     json_step_info_2 = {}
    #                     step_list_data = []
    #                     step_ = step_infomation[i]
    #                     step_num = step_infomation[i]['step_num']
    #                     json_step_info_2['step_status'] = ''
    #                     for u in range(len(step_['step_detail'])):
    #                         oneMail = step_['step_detail'][u]['one_email']
    #                         if str(oneMail).replace(' ','').lower() == self.emailUser:
    #                             step_me = step_infomation[i]['step_num']
    #                             step_me = int(step_me) - 1
    #                         step_2 = step_['step_detail'][u]
    #                         for k in range(len(step_2['activity_code'])):
    #                             if step_2['activity_code'][k] == 'A03':
    #                                 json_step_info = {}
    #                                 json_step_info['activity_status'] = step_2['activity_status'][k]
    #                                 json_step_info['one_email'] = step_2['one_email']
    #                                 json_step_info['step_num'] = step_num
    #                                 list_check_step.append(json_step_info['activity_status'])
    #                                 step_list_data.append(json_step_info)

    #                     json_step_info_2['step_info'] = step_list_data
    #                     if json_step_info_2['step_status'] == '':
    #                         if 'Reject' in list_check_step:
    #                             json_step_info_2['step_status'] = 'Reject'
    #                         elif 'Incomplete' in list_check_step:
    #                             json_step_info_2['step_status'] = 'Incomplete'
    #                         elif 'Pending' in list_check_step:
    #                             json_step_info_2['step_status'] = 'Incomplete'
    #                         elif 'Approve' in list_check_step:
    #                             json_step_info_2['step_status'] = 'Complete'
    #                         elif 'Complete' in list_check_step:
    #                             json_step_info_2['step_status'] = 'Complete'
    #                         else:
    #                             json_step_info_2['step_status'] = 'Complete'
    #                     sum_status_step_list.append(json_step_info_2['step_status'])
    #                     sum_status_step.append(json_step_info_2['step_status'])
    #                     print(sid_email)
    #                     print(list_check_step)
    #                 # return ''
    #                 # my_status_step = sum_status_step[step_me]
    #                 index_mystep = step_me
    #                 # print(index_mystep)
    #                 for l in range(len(jsonData_eval)):
    #                     json_data_info = jsonData_eval[l]
    #                     step_sum_status = []
    #                     step_list_next = []
    #                     if 'step_detail' in json_data_info:
    #                         for s in range(len(json_data_info['step_detail'])):
    #                             json_info_step2 = {}
    #                             for u in range(len(json_data_info['step_detail'][s]['activity_code'])):
    #                                 oneMail = json_data_info['step_detail'][s]['one_email']
    #                                 # print(sum_status_step)
    #                                 if str(oneMail).replace(' ','').lower() == self.emailUser:
    #                                     if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
    #                                         if step_before == '':
    #                                             try:
    #                                                 if l == 0:
    #                                                     list_checknextstep = []
    #                                                     for uy in range(len(sum_status_step)):
    #                                                         if sum_status_step[index_mystep]:
    #                                                             step_me = sum_status_step[index_mystep]
    #                                                             index_mystep = index_mystep
    #                                                         # print(step_me)
    #                                                         if step_me == 'Reject':
    #                                                             step_status = 'Reject'
    #                                                             step_me = ''
    #                                                         elif step_me == 'Incomplete' or step_me == 'Pending':
    #                                                             step_status = 'Incomplete_1'
    #                                                             step_me = ''
    #                                                         elif step_me == 'Complete' or step_me == 'Approve':
    #                                                             try:
    #                                                                 for uu in range(index_mystep,len(sum_status_step),1):
    #                                                                     list_checknextstep.append(sum_status_step[uu])
    #                                                                 # print(list_checknextstep,'list_checknextstep')
    #                                                                 if 'Reject' in list_checknextstep:
    #                                                                     step_status = 'Reject'
    #                                                                     step_me = ''
    #                                                                 elif 'Incomplete' in list_checknextstep or 'Pending' in list_checknextstep:
    #                                                                     step_status = 'Incomplete'
    #                                                                     step_me = ''
    #                                                                 else:
    #                                                                     step_status = 'Complete'
    #                                                                     step_me = ''
    #                                                             except Exception as e:
    #                                                                 step_status = 'Incomplete'
    #                                                                 step_me = ''

    #                                                     # arr_step_info.append(step_me)
    #                                                     # arr_step_info.append(step_before)
    #                                                     arr_step_info.append(step_status)

    #                                                 else:
    #                                                     list_checknextstep = []
    #                                                     step_status = ''
    #                                                     # print('-------------------------------------------')
    #                                                     for uy in range(len(sum_status_step)):
    #                                                         if sum_status_step[index_mystep]:
    #                                                             step_me = sum_status_step[index_mystep]
    #                                                             index_mystep = index_mystep
    #                                                         # print(step_me)
    #                                                         if step_me == 'Reject':
    #                                                             step_status = 'Reject'
    #                                                             step_me = ''
    #                                                         elif step_me == 'Complete' or step_me == 'Approve':
    #                                                             # print('waddwad')
    #                                                             try:
    #                                                                 list_checknextstep = []
    #                                                                 for uu in range(index_mystep,len(sum_status_step),1):
    #                                                                     list_checknextstep.append(sum_status_step[uu])
    #                                                                 # print(list_checknextstep,'list_checknextstep')
    #                                                                 if 'Reject' in list_checknextstep:
    #                                                                     step_status = 'Wait__'
    #                                                                     step_me = ''
    #                                                                 elif 'Incomplete' in list_checknextstep or 'Pending' in list_checknextstep:
    #                                                                     step_status = 'Incomplete'
    #                                                                     step_me = ''
    #                                                                 else:
    #                                                                     step_status = 'Complete'
    #                                                                     step_me = ''
    #                                                             except Exception as e:
    #                                                                 step_status = 'Incomplete'
    #                                                                 step_me = ''

    #                                                         elif step_me == 'Incomplete' or step_me == 'Pending':
    #                                                             list_checknextstep = []
    #                                                             nn = index_mystep
    #                                                             try:
    #                                                                 while(nn > 0):
    #                                                                     nn = nn - 1
    #                                                                     list_checknextstep.append(sum_status_step[nn])

    #                                                                 # print(list_checknextstep)
    #                                                                 # for uu in range(index_mystep,0):
    #                                                                 #     print(sum_status_step[uu])

    #                                                                 # print(list_checknextstep,'list_checknextstep')
    #                                                                 if 'Reject' in list_checknextstep:
    #                                                                     step_status = 'Reject'
    #                                                                     step_me = ''
    #                                                                 elif 'Incomplete' in list_checknextstep or 'Pending' in list_checknextstep:
    #                                                                     step_status = 'Wait__'
    #                                                                     step_me = ''
    #                                                                 elif 'Complete' in list_checknextstep or 'Approve' in list_checknextstep:
    #                                                                     step_status = 'Incomplete_1'
    #                                                                     step_me = ''




    #                                                                 # else:
    #                                                                 #     step_status = 'Complete'
    #                                                                 #     step_me = ''
    #                                                             except Exception as e:
    #                                                                 step_status = 'Incomplete'
    #                                                                 step_me = ''
    #                                                             # print(step_status)
    #                                                     arr_step_info.append(step_status)
    #                                             except Exception as e:
    #                                                 step_before = ''
    #                                                 print(str(e))


    #                 # print(arr_step_info)
    #                 # print(sid_email)

    #                 if 'Reject' in arr_step_info:
    #                     res_status_file = 'R'
    #                     res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
    #                 elif arr_step_info.count('Wait__') == 2:
    #                     res_status_file = 'W'
    #                     res_status_file_string = 'รออนุมัติ'
    #                 elif 'Wait__' in arr_step_info:
    #                     res_status_file = 'Z'
    #                     res_status_file_string = 'อยู่ในช่วงดำเนินการ'
    #                 elif 'Incomplete_1' in arr_step_info or 'Pending_1' in arr_step_info:
    #                     res_status_file = 'W'
    #                     res_status_file_string = 'รออนุมัติ'
    #                 elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
    #                     res_status_file = 'N'
    #                     res_status_file_string = 'กำลังดำเนินการ'
    #                 elif 'Wait__' in arr_step_info:
    #                     res_status_file = 'Z'
    #                     res_status_file_string = 'อยู่ในช่วงดำเนินการ'
    #                 elif 'Waitting' in arr_step_info:
    #                     res_status_file = 'W'
    #                     res_status_file_string = 'รออนุมัติ'
    #                 else:
    #                     res_status_file_string = 'อนุมัติแล้ว'
    #                 if res_status_file == 'W':
    #                     statusFile_count_wait = statusFile_count_wait + 1
    #                 elif res_status_file == 'Y':
    #                     statusFile_count_approve = statusFile_count_approve + 1
    #                 elif res_status_file == 'R':
    #                     statusFile_count_reject = statusFile_count_reject + 1
    #                 else:
    #                     statusFile_count_pendding = statusFile_count_pendding + 1
    #                 result_SenderDetails = paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_email).first()
    #                 if result_SenderDetails !=None:
    #                     file_name = result_SenderDetails.file_name
    #                     dateTime_String = result_SenderDetails.send_time
    #                     trackingCode = result_SenderDetails.tracking_id
    #                     sender_name = result_SenderDetails.sender_name
    #                     sender_email = result_SenderDetails.sender_email
    #                 result_DetailsDocument = paper_lessdocument.query.filter(paper_lessdocument.step_id==sid_email).first()
    #                 if result_DetailsDocument != None:
    #                     documentsign_page_options = result_DetailsDocument.sign_page_options
    #                     if result_DetailsDocument.options_page != None:
    #                         documentoptions_page = [eval(result_DetailsDocument.options_page)]
    #                     else:
    #                         documentoptions_page = []
    #                     if result_DetailsDocument.urgent_type != None:
    #                         documentUrgentType = result_DetailsDocument.urgent_type
    #                         if documentUrgentType == 'I':
    #                             documentUrgentString = 'ด่วนมาก'
    #                         elif documentUrgentType == 'U':
    #                             documentUrgentString = 'ด่วน'
    #                         elif documentUrgentType == 'M':
    #                             documentUrgentString = 'ปกติ'
    #                     if result_DetailsDocument.documentJson != None:
    #                         documentJson_result = eval(result_DetailsDocument.documentJson)
    #                         documentName = documentJson_result['document_name']
    #                         documentType = documentJson_result['document_type']
    #                     else:
    #                         documentName = None
    #                         documentType = None
    #                     document_Id = result_DetailsDocument.document_id
    #                 # th_dateTime_1 = convert_datetime_TH_1(int(dateTime_String.timestamp()))
    #                 th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
    #                 ts = int(time.time())
    #                 date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
    #                 year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
    #                 datetime_display = int(dateTime_String.timestamp())
    #                 date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
    #                 yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
    #                 time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
    #                 old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
    #                 if date_time_today == date_time_db:
    #                     date_display_show = time_show_db
    #                 else:
    #                     if year_today == yar_db:
    #                         date_display_show = convert_datetime_TH_2_display(datetime_display)
    #                     else:
    #                         date_display_show = old_year
    #                 list_arr.append({
    #                     'sidCode':sid_email,
    #                     'document_name':documentName,
    #                     'document_type':documentType,
    #                     'document_urgent':documentUrgentType,
    #                     'document_urgent_string':documentUrgentString,
    #                     'dateTime_String':str(dateTime_String).split('+')[0],
    #                     'dateTime_String_TH_1':th_dateTime_2,
    #                     'dateTime_display':date_display_show,
    #                     'document_id':document_Id,
    #                     'stamp_all':documentsign_page_options,
    #                     'options_page_document':documentoptions_page,
    #                     # 'dateTime_String_TH_2':th_dateTime_2,
    #                     'date_String':str(dateTime_String).split(' ')[0],
    #                     'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
    #                     'status_file_code':res_status_file,
    #                     'status_file_string':res_status_file_string,
    #                     'dateTime':int(dateTime_String.timestamp()),
    #                     'tracking_id':trackingCode,
    #                     'sender_name':sender_name,
    #                     'sender_email':sender_email,
    #                     'file_name':file_name
    #                 })

    #         json_Data['Document_Status_Details']  = {
    #             'Incomplete_Pendding':statusFile_count_pendding,
    #             'Complete_Approve':statusFile_count_approve,
    #             'Reject':statusFile_count_reject,
    #             'Wait':statusFile_count_wait
    #         }
    #         list_arr = sorted(list_arr, key=lambda k: k['dateTime'], reverse=True)
    #         json_Data['Document_Details'] = list_arr
    #         return {'result':'OK','messageText':json_Data,'status_Code':200,'messageER':None}
    #     except Exception as ex:
    #         exc_type, exc_obj, exc_tb = sys.exc_info()
    #         fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
    #         print(exc_type, fname, exc_tb.tb_lineno)
    #         return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

    def select_dashboard_recipient_v4(self,emailUser):
        self.emailUser = emailUser
        sid_list = []
        sid_list_email = []
        json_Data = {}
        list_arr = []
        list_json = []
        try:
            for i in paper_lesssender.query.filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.contains(self.emailUser)).order_by(desc(paper_lesssender.send_time)).all():
                sid_list_email.append(i.step_data_sid)
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}
        
        count_rowDocument = 0
        count_rowDocument_StatusActive = 0
        count_rowDocument_StatusReject = 0
        count_rowDocument_StatusCancel = 0
        statusFile_count_approve = 0
        statusFile_count_pendding = 0
        statusFile_count_reject = 0
        statusFile_count_wait = 0
        try:
            count_rowDocument_StatusActive = paper_lesssender.query.filter(paper_lesssender.step_data_sid.in_(sid_list_email),paper_lesssender.status=='ACTIVE').count()
            count_rowDocument_StatusReject = paper_lesssender.query.filter(paper_lesssender.step_data_sid.in_(sid_list_email),paper_lesssender.status=='REJECT').count()
            count_rowDocument_StatusCancel = paper_lesssender.query.filter(paper_lesssender.step_data_sid.in_(sid_list_email),paper_lesssender.status=='CANCEL').count()
            count_rowDocument = len(sid_list_email)
            json_Data['sum_Document']  = count_rowDocument
            json_Data['DocumentInfo'] = {
                'Document_Active':count_rowDocument_StatusActive,
                'Document_Reject':count_rowDocument_StatusReject,
                'Document_Cancel':count_rowDocument_StatusCancel
            }
            query_email = paper_lessdatastep.query.filter(paper_lessdatastep.sid.in_(sid_list_email)).all()
            # return {'result':'OK','messageText':'test'}
            for n in range(len(query_email)):
                result_DB = query_email[n]
                sid_email = result_DB.sid
                # result_DB = paper_lessdatastep.query.filter(paper_lessdatastep.sid==sid_list_email[n]).first()
                jsonData_eval = eval(result_DB.data_json)
                arr_step_info = []
                if 'step_num' in jsonData_eval:
                    step_status = ''
                    step_before = ''
                    res_status_file = 'Y'
                    arr_step_totle = []
                    json_data_info = jsonData_eval
                    if 'step_detail' in json_data_info:
                        for s in range(len(json_data_info['step_detail'])):
                            json_info_step2 = {}
                            for u in range(len(json_data_info['step_detail'][s]['activity_code'])):
                                oneMail = json_data_info['step_detail'][s]['one_email']
                                if str(oneMail).replace(' ','').lower() == self.emailUser:
                                    if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
                                        if step_before == '':
                                            try:
                                                if json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Complete':
                                                    step_before = 'Complete'
                                                elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Approve':
                                                    step_before = 'Complete'
                                                elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Reject':
                                                    step_before = 'Reject'
                                            except Exception as e:
                                                step_before = ''
                                        if step_before != 'Reject':
                                            if json_data_info['step_detail'][s]['activity_status'][u] == 'Complete':
                                                step_status = 'Complete'
                                            elif json_data_info['step_detail'][s]['activity_status'][u] == 'Approve':
                                                step_status = 'Complete'
                                            elif json_data_info['step_detail'][s]['activity_status'][u] == 'Reject':
                                                step_status = 'Reject'
                                            else:
                                                try:
                                                    step_status  = 'Incomplete'
                                                except Exception as ex:
                                                    step_status = 'Incomplete'
                                        arr_step_info.append(step_status)
                                        arr_step_info.append(step_before)
                    # print(arr_step_info)
                    # print(sid_email)
                    if 'Reject' in arr_step_info:
                        res_status_file = 'R'
                        res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                    elif 'Complete' in arr_step_info:
                        res_status_file = 'Y'
                        res_status_file_string = 'อนุมัติแล้ว'
                    elif 'Waitting' in arr_step_info:
                        res_status_file = 'W'
                        res_status_file_string = 'รออนุมัติ'
                    elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                        res_status_file = 'W'
                        res_status_file_string = 'รออนุมัติ'
                    else:
                        res_status_file_string = 'อนุมัติแล้ว'
                    if res_status_file == 'W':
                        statusFile_count_wait = statusFile_count_wait + 1
                    elif res_status_file == 'Y':
                        statusFile_count_approve = statusFile_count_approve + 1
                    elif res_status_file == 'R':
                        statusFile_count_reject = statusFile_count_reject + 1
                    else:
                        statusFile_count_pendding = statusFile_count_pendding + 1
                    result_SenderDetails = paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_email).first()
                    if result_SenderDetails !=None:
                        file_name = result_SenderDetails.file_name
                        dateTime_String = result_SenderDetails.send_time
                        trackingCode = result_SenderDetails.tracking_id
                        sender_name = result_SenderDetails.sender_name
                        sender_email = result_SenderDetails.sender_email
                    result_DetailsDocument = paper_lessdocument.query.filter(paper_lessdocument.step_id==sid_email).first()
                    if result_DetailsDocument != None:
                        documentsign_page_options = result_DetailsDocument.sign_page_options
                        if result_DetailsDocument.options_page != None:
                            documentoptions_page = [eval(result_DetailsDocument.options_page)]
                        else:
                            documentoptions_page = []
                        if result_DetailsDocument.urgent_type != None:
                            documentUrgentType = result_DetailsDocument.urgent_type
                            if documentUrgentType == 'I':
                                documentUrgentString = 'ด่วนมาก'
                            elif documentUrgentType == 'U':
                                documentUrgentString = 'ด่วน'
                            elif documentUrgentType == 'M':
                                documentUrgentString = 'ปกติ'
                        if result_DetailsDocument.documentJson != None:
                            documentJson_result = eval(result_DetailsDocument.documentJson)
                            documentName = documentJson_result['document_name']
                            documentType = documentJson_result['document_type']
                        else:
                            documentName = None
                            documentType = None
                        document_Id = result_DetailsDocument.document_id
                    # th_dateTime_1 = convert_datetime_TH_1(int(dateTime_String.timestamp()))
                    th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                    ts = int(time.time())
                    date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                    year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                    datetime_display = int(dateTime_String.timestamp())
                    date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                    yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                    time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                    old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                    if date_time_today == date_time_db:
                        date_display_show = time_show_db
                    else:
                        if year_today == yar_db:
                            date_display_show = convert_datetime_TH_2_display(datetime_display)
                        else:
                            date_display_show = old_year
                    list_arr.append({
                        'sidCode':sid_email,
                        'document_name':documentName,
                        'document_type':documentType,
                        'document_urgent':documentUrgentType,
                        'document_urgent_string':documentUrgentString,
                        'dateTime_String':str(dateTime_String).split('+')[0],
                        'dateTime_String_TH_1':th_dateTime_2,
                        'dateTime_display':date_display_show,
                        'document_id':document_Id,
                        'stamp_all':documentsign_page_options,
                        'options_page_document':documentoptions_page,
                        # 'dateTime_String_TH_2':th_dateTime_2,
                        'date_String':str(dateTime_String).split(' ')[0],
                        'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                        'status_file_code':res_status_file,
                        'status_file_string':res_status_file_string,
                        'dateTime':int(dateTime_String.timestamp()),
                        'tracking_id':trackingCode,
                        'sender_name':sender_name,
                        'sender_email':sender_email,
                        'file_name':file_name
                    })
                else:
                    step_status = ''
                    res_status_file = 'Y'
                    step_before = ''
                    step_list_before = []
                    step_list_ = []
                    step_list_next = []
                    arr_step_totle = []
                    step_me = ''
                    step_sum_status = []
                    sum_status_step_list = []
                    list_check_step = []
                    step_list_data = []
                    max_step = (len(jsonData_eval))
                    step_infomation = jsonData_eval
                    sum_status_step = []
                    tmp_status_sum = []
                    arr_email_list = []
                    email_step_sum = []
                    for i in range(len(step_infomation)):
                        list_check_step = []
                        json_step_info_2 = {}
                        step_list_data = []
                        step_status = []
                        step_email = []
                        step_ = step_infomation[i]
                        step_num = step_infomation[i]['step_num']
                        json_step_info_2['step_status'] = ''
                        tmp_step_detail = step_['step_detail']
                        for u in range(len(tmp_step_detail)):
                            tmp_arr_step_detail = tmp_step_detail[u]
                            tmp_status = tmp_arr_step_detail['activity_status']
                            tmp_code = tmp_arr_step_detail['activity_code']
                            tmp_email = tmp_arr_step_detail['one_email']
                            for s in range(len(tmp_code)):
                                if tmp_code[s] == 'A03':
                                    step_status.append(tmp_status[s])
                                    step_email.append(tmp_email)
                        email_step_sum.append(step_email)
                        if 'Reject' in step_status:
                            tmp_status_sum.append('Reject')
                        elif 'Approve' in step_status:
                            tmp_status_sum.append('Complete')
                        elif 'Complete' in step_status:
                            tmp_status_sum.append('Complete')
                        elif 'Incomplete' in step_status:
                            tmp_status_sum.append('Incomplete')
                        elif 'Pending' in step_status:
                            tmp_status_sum.append('Incomplete')
                        else:
                            tmp_status_sum.append('Complete')

                    for zzi in range(len(step_infomation)):
                        list_check_step = []
                        json_step_info_2 = {}
                        step_list_data = []
                        step_status = []
                        step_ = step_infomation[zzi]
                        step_num = step_infomation[zzi]['step_num']
                        json_step_info_2['step_status'] = ''
                        tmp_step_detail = step_['step_detail']
                        for zi in range(len(tmp_step_detail)):
                            tmp_arr_step_detail_2 = tmp_step_detail[zi]
                            oneMail = tmp_arr_step_detail_2['one_email']
                            tmp_step_me = int(step_num) - 1
                            step_num_int2 = int(step_num)
                            if 'Reject' in tmp_status_sum:
                                arr_step_info.append('Reject')
                            elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Incomplete':
                                if self.emailUser not in arr_email_list:
                                    index_step_me = tmp_step_me
                                    if index_step_me != 0:
                                        while index_step_me > 0:
                                            if len(arr_step_info) == 0:
                                                index_step_me = index_step_me - 1
                                                if tmp_status_sum[index_step_me] == 'Incomplete':
                                                    arr_step_info.append('Incomplete')
                                                else:
                                                    arr_step_info.append('Wait')
                                                arr_email_list.append(self.emailUser)
                                            else:
                                                index_step_me = index_step_me - 1
                                                continue
                                    else:
                                        arr_step_info.append('Wait')
                            elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Complete':
                                # print('Complete')
                                if self.emailUser not in arr_email_list:
                                    for nz in range(step_num_int2,len(tmp_status_sum),1):
                                        print(self.emailUser,email_step_sum[nz])
                                        if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                            arr_step_info.append('Wait')
                                        elif self.emailUser not in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                            arr_step_info.append('Progress')
                                    arr_email_list.append(self.emailUser)
                    print(arr_step_info)
                    print(sid_email)

                    if 'Reject' in arr_step_info:
                        res_status_file = 'R'
                        res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                    elif 'Progress' in arr_step_info and 'Wait' in arr_step_info:
                        res_status_file = 'Z'
                        res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                    elif 'Wait' in arr_step_info:
                        res_status_file = 'W'
                        res_status_file_string = 'รออนุมัติ'
                    elif 'Incomplete' in arr_step_info:
                        res_status_file = 'Z'
                        res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                    elif 'Progress' in arr_step_info:
                        res_status_file = 'N'
                        res_status_file_string = 'กำลังดำเนินการ'                    
                    elif arr_step_info.count('Incomplete') >= 2:
                        res_status_file = 'Z'
                        res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                    elif 'Incomplete' in arr_step_info and 'Complete' in arr_step_info:
                        res_status_file = 'N'
                        res_status_file_string = 'กำลังดำเนินการ'
                    elif 'Complete' in arr_step_info and arr_step_info.count('Incomplete') >= 1:
                        res_status_file = 'Z'
                        res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                    elif 'Incomplete' in arr_step_info or 'Incomplete_1' in arr_step_info:
                        res_status_file = 'W'
                        res_status_file_string = 'รออนุมัติ'


                    elif arr_step_info.count('Wait__') == 2:
                        res_status_file = 'W'
                        res_status_file_string = 'รออนุมัติ'
                    elif 'Wait__' in arr_step_info:
                        res_status_file = 'Z'
                        res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                    elif 'Incomplete_1' in arr_step_info or 'Pending_1' in arr_step_info:
                        res_status_file = 'W'
                        res_status_file_string = 'รออนุมัติ'
                    elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                        res_status_file = 'N'
                        res_status_file_string = 'กำลังดำเนินการ'
                    elif 'Wait__' in arr_step_info:
                        res_status_file = 'Z'
                        res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                    elif 'Waitting' in arr_step_info:
                        res_status_file = 'W'
                        res_status_file_string = 'รออนุมัติ'
                    else:
                        res_status_file_string = 'อนุมัติแล้ว'
                    if res_status_file == 'W':
                        statusFile_count_wait = statusFile_count_wait + 1
                    elif res_status_file == 'Y':
                        statusFile_count_approve = statusFile_count_approve + 1
                    elif res_status_file == 'R':
                        statusFile_count_reject = statusFile_count_reject + 1
                    else:
                        statusFile_count_pendding = statusFile_count_pendding + 1
                    result_SenderDetails = paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_email).first()
                    if result_SenderDetails !=None:
                        file_name = result_SenderDetails.file_name
                        dateTime_String = result_SenderDetails.send_time
                        trackingCode = result_SenderDetails.tracking_id
                        sender_name = result_SenderDetails.sender_name
                        sender_email = result_SenderDetails.sender_email
                    result_DetailsDocument = paper_lessdocument.query.filter(paper_lessdocument.step_id==sid_email).first()
                    if result_DetailsDocument != None:
                        documentsign_page_options = result_DetailsDocument.sign_page_options
                        if result_DetailsDocument.options_page != None:
                            documentoptions_page = [eval(result_DetailsDocument.options_page)]
                        else:
                            documentoptions_page = []
                        if result_DetailsDocument.urgent_type != None:
                            documentUrgentType = result_DetailsDocument.urgent_type
                            if documentUrgentType == 'I':
                                documentUrgentString = 'ด่วนมาก'
                            elif documentUrgentType == 'U':
                                documentUrgentString = 'ด่วน'
                            elif documentUrgentType == 'M':
                                documentUrgentString = 'ปกติ'
                        if result_DetailsDocument.documentJson != None:
                            documentJson_result = eval(result_DetailsDocument.documentJson)
                            documentName = documentJson_result['document_name']
                            documentType = documentJson_result['document_type']
                        else:
                            documentName = None
                            documentType = None
                        document_Id = result_DetailsDocument.document_id
                    # th_dateTime_1 = convert_datetime_TH_1(int(dateTime_String.timestamp()))
                    th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                    ts = int(time.time())
                    date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                    year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                    datetime_display = int(dateTime_String.timestamp())
                    date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                    yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                    time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                    old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                    if date_time_today == date_time_db:
                        date_display_show = time_show_db
                    else:
                        if year_today == yar_db:
                            date_display_show = convert_datetime_TH_2_display(datetime_display)
                        else:
                            date_display_show = old_year
                    list_arr.append({
                        'sidCode':sid_email,
                        'document_name':documentName,
                        'document_type':documentType,
                        'document_urgent':documentUrgentType,
                        'document_urgent_string':documentUrgentString,
                        'dateTime_String':str(dateTime_String).split('+')[0],
                        'dateTime_String_TH_1':th_dateTime_2,
                        'dateTime_display':date_display_show,
                        'document_id':document_Id,
                        'stamp_all':documentsign_page_options,
                        'options_page_document':documentoptions_page,
                        # 'dateTime_String_TH_2':th_dateTime_2,
                        'date_String':str(dateTime_String).split(' ')[0],
                        'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                        'status_file_code':res_status_file,
                        'status_file_string':res_status_file_string,
                        'dateTime':int(dateTime_String.timestamp()),
                        'tracking_id':trackingCode,
                        'sender_name':sender_name,
                        'sender_email':sender_email,
                        'file_name':file_name
                    })

            json_Data['Document_Status_Details']  = {
                'Incomplete_Pendding':statusFile_count_pendding,
                'Complete_Approve':statusFile_count_approve,
                'Reject':statusFile_count_reject,
                'Wait':statusFile_count_wait
            }
            list_arr = sorted(list_arr, key=lambda k: k['dateTime'], reverse=True)
            json_Data['Document_Details'] = list_arr
            return {'result':'OK','messageText':json_Data,'status_Code':200,'messageER':None}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

    

    def select_dashboard_recipient_v3(self,emailUser):
        self.emailUser = emailUser
        sid_list = []
        sid_list_email = []
        json_Data = {}
        list_arr = []
        list_json = []
        try:
            tmp_list = []             
            count_rowDocument = 0
            count_rowDocument_StatusActive = 0
            count_rowDocument_StatusReject = 0
            count_rowDocument_StatusCancel = 0
            statusFile_count_approve = 0
            statusFile_count_pendding = 0
            statusFile_count_reject = 0
            statusFile_count_wait = 0
            list_temp_query = []
            tmp_sid_code_list = []
            arr_gruop = []
            arr_group_sid = []
            tmp_arr_sid = []
            tmp_group_id = None
            str_time = (time.time())
            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.contains(self.emailUser))\
                .order_by(desc(paper_lesssender.send_time))\
                .all()      
            # print(query_temp)
            end_time = (time.time())
            print(end_time -str_time )
            count_rowDocument_StatusActive = db.session.query(paper_lesssender, paper_lessdocument,paper_lessdatastep)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.contains(self.emailUser))\
                .order_by(desc(paper_lesssender.send_time))\
                .count()
            count_rowDocument_StatusReject = db.session.query(paper_lesssender, paper_lessdocument,paper_lessdatastep)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='REJECT').filter(paper_lesssender.recipient_email.contains(self.emailUser))\
                .order_by(desc(paper_lesssender.send_time))\
                .count()
            count_rowDocument_StatusCancel = db.session.query(paper_lesssender, paper_lessdocument,paper_lessdatastep)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='CANCEL').filter(paper_lesssender.recipient_email.contains(self.emailUser))\
                .order_by(desc(paper_lesssender.send_time))\
                .count()
            for u in range(len(query_temp)):
                for z in range(len(query_temp[u])):
                    if z == 0:
                        tmp_dict_json = query_temp[u][z].__dict__
                        # if '_sa_instance_state' in tmp_dict_json:
                        #     del tmp_dict_json['_sa_instance_state']
                        tmp_sicode = tmp_dict_json['step_data_sid']
                        tmp_sid_code_list.append(tmp_sicode)
                        tmp_send_time = tmp_dict_json['send_time']
                        tmp_document_id = tmp_dict_json['doc_id']
                        tmp_tracking_id = tmp_dict_json['tracking_id']
                        tmp_sender_name = tmp_dict_json['sender_name']
                        tmp_sender_email = tmp_dict_json['sender_email']
                        tmp_file_name = tmp_dict_json['file_name']
                        tmp_groupid = tmp_dict_json['group_id']
                        status_groupid = False
                        if tmp_groupid != None:
                            tmp_groupid = eval(tmp_groupid)
                            if len(tmp_groupid) != 0:
                                status_groupid = True
                            
                    if z == 1:
                        tmp_dict_json = query_temp[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            del tmp_dict_json['_sa_instance_state']
                        tmp_sign_page_options = tmp_dict_json['sign_page_options']
                        tmp_document_type = tmp_dict_json['documentType']
                        tmp_options_page = []
                        if tmp_dict_json['options_page'] != None:
                            if tmp_dict_json['options_page'] != '':
                            # print(tmp_dict_json['options_page'],tmp_document_id)
                                tmp_options_page = [eval(tmp_dict_json['options_page'])]
                        else:
                            tmp_options_page = []
                        if len(tmp_options_page) != 0:
                            # print(tmp_options_page[0]['group_detail'])
                            if 'group_detail' in tmp_options_page[0]:
                                if 'group_status' in tmp_options_page[0]['group_detail']:
                                    tmpgroupdetails = tmp_options_page[0]['group_detail']
                                    if tmpgroupdetails['group_status'] == True:
                                        tmpstepnum = tmpgroupdetails['step_num']
                                        # print(tmpstepnum)
                        if tmp_dict_json['documentJson'] != None:
                            documentJson_result = eval(tmp_dict_json['documentJson'])
                            documentName = documentJson_result['document_name']
                            documentType = documentJson_result['document_type']
                        else:
                            documentName = None
                            documentType = None
                        if tmp_dict_json['urgent_type'] != None:
                            documentUrgentType = tmp_dict_json['urgent_type']
                            if documentUrgentType == 'I':
                                documentUrgentString = 'ด่วนมาก'
                            elif documentUrgentType == 'U':
                                documentUrgentString = 'ด่วน'
                            elif documentUrgentType == 'M':
                                documentUrgentString = 'ปกติ'
                    if z == 2:
                        tmp_dict_json = query_temp[u][z].__dict__
                        tmp_biz_info = None 
                        if '_sa_instance_state' in tmp_dict_json:
                            del tmp_dict_json['_sa_instance_state']
                        step_now2 = 0
                        step_now = None
                        jsonData_eval = eval(tmp_dict_json['data_json'])
                        arr_step_info = []
                        if tmp_dict_json['biz_info'] != None or tmp_dict_json['biz_info'] != '':
                            if tmp_dict_json['biz_info'] != 'None':
                                tmp_biz_info = None
                                eval_biz_info = eval(tmp_dict_json['biz_info'])
                                if 'dept_name' in eval_biz_info:            
                                    tmp_biz_info = {
                                        'tax_id':eval_biz_info['id_card_num'],
                                        'role_name' : eval_biz_info['role_name'],
                                        'dept_name' : eval_biz_info['dept_name'],
                                        'role_level' : eval_biz_info['role_level']               
                                    }                                
                                elif 'dept_name' not in eval_biz_info:
                                    tmp_biz_info = {
                                        'tax_id':eval_biz_info['id_card_num'],
                                        'role_name' : eval_biz_info['role_name'],
                                        'dept_name' : [],
                                        'role_level' : eval_biz_info['role_level']               
                                    }
                        tmp_group_stepnum = []
                        tmpemail = False
                        tmp_status_group = False
                        if status_groupid == True:
                            if len(tmp_options_page) != 0:
                                if 'group_detail' in tmp_options_page[0]:
                                    tmp_group_detail = tmp_options_page[0]['group_detail']
                                    if 'step_num' in tmp_group_detail:
                                        tmp_status_group = True
                                        tmp_group_stepnum = tmp_group_detail['step_num']
                        tmp_list_step_infomation = []
                        if 'step_num' in jsonData_eval:
                            tmp_step_info = [eval(tmp_dict_json['data_json'])]
                        else:
                            tmp_step_info = eval(tmp_dict_json['data_json'])
                        if 'step_num' in jsonData_eval:
                            tmp_list_step_infomation.append(jsonData_eval)
                            jsonData_eval = tmp_list_step_infomation

                        if 'step_num' in jsonData_eval:
                            step_status = ''
                            step_before = ''
                            res_status_file = 'Y'
                            arr_step_totle = []
                            json_data_info = jsonData_eval
                            if 'step_detail' in json_data_info:
                                for s in range(len(json_data_info['step_detail'])):
                                    json_info_step2 = {}
                                    for u in range(len(json_data_info['step_detail'][s]['activity_code'])):
                                        oneMail = str(json_data_info['step_detail'][s]['one_email']).replace(' ','').lower()
                                        if str(oneMail).replace(' ','').lower() == self.emailUser:
                                            if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
                                                if step_before == '':
                                                    try:
                                                        if json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Complete':
                                                            step_before = 'Complete'
                                                        elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Approve':
                                                            step_before = 'Complete'
                                                        elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Reject':
                                                            step_before = 'Reject'
                                                    except Exception as e:
                                                        step_before = ''
                                                if step_before != 'Reject':
                                                    if json_data_info['step_detail'][s]['activity_status'][u] == 'Complete':
                                                        step_status = 'Complete'
                                                    elif json_data_info['step_detail'][s]['activity_status'][u] == 'Approve':
                                                        step_status = 'Complete'
                                                    elif json_data_info['step_detail'][s]['activity_status'][u] == 'Reject':
                                                        step_status = 'Reject'
                                                    else:
                                                        try:
                                                            step_status  = 'Incomplete'
                                                        except Exception as ex:
                                                            step_status = 'Incomplete'
                                                arr_step_info.append(step_status)
                                                arr_step_info.append(step_before)
                            if 'Reject' in arr_step_info:
                                res_status_file = 'R'
                                res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                            elif 'Complete' in arr_step_info:
                                res_status_file = 'Y'
                                res_status_file_string = 'อนุมัติแล้ว'
                            elif 'Waitting' in arr_step_info:
                                res_status_file = 'W'
                                res_status_file_string = 'รอคุณอนุมัติ'
                            elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                                res_status_file = 'W'
                                res_status_file_string = 'รอคุณอนุมัติ'
                            else:
                                res_status_file_string = 'อนุมัติแล้ว'
                            if res_status_file == 'W':
                                statusFile_count_wait = statusFile_count_wait + 1
                            elif res_status_file == 'Y':
                                statusFile_count_approve = statusFile_count_approve + 1
                            elif res_status_file == 'R':
                                statusFile_count_reject = statusFile_count_reject + 1
                            else:
                                statusFile_count_pendding = statusFile_count_pendding + 1
                        else:
                            tmp_sum_email = []
                            step_status = ''
                            res_status_file = 'Y'
                            res_status_file_string = ''
                            step_before = ''
                            step_list_before = []
                            step_list_ = []
                            step_list_next = []
                            arr_step_totle = []
                            step_me = ''
                            step_sum_status = []
                            sum_status_step_list = []
                            list_check_step = []
                            step_list_data = []
                            max_step = (len(jsonData_eval))
                            step_infomation = jsonData_eval
                            sum_status_step = []
                            tmp_status_sum = []
                            tmp_acvt_code_sum = []
                            arr_email_list = []
                            email_step_sum = []
                            arr_04_sid = []
                            for i in range(len(step_infomation)):
                                list_check_step = []
                                json_step_info_2 = {}
                                step_list_data = []
                                step_status = []
                                step_email = []
                                tmp_acvt_code = []
                                tmp_keep_status = []
                                tmp_acvt_status = []
                                step_ = step_infomation[i]
                                step_num = step_infomation[i]['step_num']
                                json_step_info_2['step_status'] = ''
                                tmp_step_detail = step_['step_detail']
                                for u in range(len(tmp_step_detail)):
                                    tmp_arr_step_detail = tmp_step_detail[u]
                                    tmp_status = tmp_arr_step_detail['activity_status']
                                    tmp_code = tmp_arr_step_detail['activity_code']
                                    tmp_email = tmp_arr_step_detail['one_email']
                                    for s in range(len(tmp_code)):
                                        if tmp_code[s] == 'A03':
                                            tmp_acvt_code.append(tmp_code[s])
                                            step_status.append(tmp_status[s])
                                            tmp_acvt_status.append(tmp_status[s])
                                            step_email.append(tmp_email)
                                            tmp_sum_email.append(tmp_email)
                                        # if tmp_code[s] == 'A04':
                                        #     tmp_acvt_code.append(tmp_code[s])
                                        #     tmp_acvt_status.append(tmp_status[s])
                                        #     arr_04_sid.append(tmp_sicode)
                                        #     step_email.append(tmp_email)
                                        #     tmp_sum_email.append(tmp_email)
                                email_step_sum.append(step_email)
                                # print(step_status)
                                # if tmp_sicode not in arr_04_sid:
                                if 'step_sign' in step_:
                                    tmp_step_sign = step_['step_sign']
                                    if tmp_step_sign['status'] == True:
                                        len_step_status = len(tmp_step_sign['data'])
                                        
                                        # tmp_status_sum = []
                                        # if 'Incomplete' in step_status and step_status.count('Incomplete') == len_step_status:
                                        #     tmp_status_sum.append('Incomplete_1')
                                        if 'Complete' in step_status and step_status.count('Complete') == len_step_status:
                                            tmp_status_sum.append('Complete')
                                        else:
                                            for tyy in range(len(tmp_step_detail)):
                                                tmp_arr_step_detail = tmp_step_detail[tyy]
                                                tmp_status = tmp_arr_step_detail['activity_status']
                                                tmp_code = tmp_arr_step_detail['activity_code']
                                                tmp_email = tmp_arr_step_detail['one_email']
                                                for zui in range(len(tmp_code)):
                                                    if tmp_code[zui] == 'A03':
                                                        if tmp_email == self.emailUser and tmp_status[zui] == 'Incomplete':
                                                            tmp_status_sum.append('Incomplete')
                                                            tmp_keep_status.append('Incomplete')
                                                        elif tmp_email == self.emailUser and tmp_status[zui] == 'Complete':
                                                            tmp_status_sum.append('Incomplete_1')
                                                            tmp_keep_status.append('Incomplete')                                            
                                            if 'Incomplete' not in tmp_keep_status:
                                                tmp_status_sum.append('Incomplete_1')
                                                tmp_keep_status.append('Incomplete')  
                                    else:
                                        if 'Reject' in step_status:
                                            tmp_status_sum.append('Reject')
                                        elif 'Approve' in step_status:
                                            tmp_status_sum.append('Complete')
                                        elif 'Complete' in step_status:
                                            tmp_status_sum.append('Complete')
                                        elif 'Incomplete' in step_status:
                                            tmp_status_sum.append('Incomplete')
                                        elif 'Pending' in step_status:
                                            tmp_status_sum.append('Incomplete')
                                        else:
                                            tmp_status_sum.append('Complete')
                                else:
                                    if 'Reject' in step_status:
                                        tmp_status_sum.append('Reject')
                                    elif 'Approve' in step_status:
                                        tmp_status_sum.append('Complete')
                                    elif 'Complete' in step_status:
                                        tmp_status_sum.append('Complete')
                                    elif 'Incomplete' in step_status:
                                        tmp_status_sum.append('Incomplete')
                                    elif 'Pending' in step_status:
                                        tmp_status_sum.append('Incomplete')
                                    else:
                                        tmp_status_sum.append('Complete')
                                # else:
                                #     if 'A03' in tmp_acvt_code:
                                #         if 'Reject' in step_status:
                                #             tmp_status_sum.append('Reject')
                                #         elif 'Approve' in step_status:
                                #             tmp_status_sum.append('Complete')
                                #         elif 'Complete' in step_status:
                                #             tmp_status_sum.append('Complete')
                                #         elif 'Incomplete' in step_status:
                                #             if 'Complete_input' in tmp_status_sum:
                                #                 tmp_status_sum.append('Incomplete_sign')
                                #             else:
                                #                 tmp_status_sum.append('Incomplete')
                                #         elif 'Pending' in step_status:
                                #             tmp_status_sum.append('Incomplete')
                                #         else:
                                #             tmp_status_sum.append('Complete')
                                #         tmp_acvt_code_sum.append('A03')
                                #     elif 'A04' in tmp_acvt_code:
                                #         if 'Complete' in tmp_acvt_status:
                                #             tmp_status_sum.append('Complete_input')
                                #         elif 'Incomplete' in tmp_acvt_status:
                                #             tmp_status_sum.append('Incomplete_input')
                                #         tmp_acvt_code_sum.append('A04')

                                        # print(tmp_acvt_code)
                                        # print(step_status)
                                        # print(tmp_sicode)
                                        # print(tmp_acvt_status)
                            # print(tmp_status_sum , tmp_sicode)
                            # return ''
                            if len(tmp_status_sum) != 0:
                                count_email = tmp_sum_email.count(self.emailUser)
                                for zzi in range(len(step_infomation)):
                                    list_check_step = []
                                    json_step_info_2 = {}
                                    step_list_data = []
                                    step_status = []
                                    step_ = step_infomation[zzi]
                                    step_num = step_infomation[zzi]['step_num']
                                    json_step_info_2['step_status'] = ''
                                    tmp_step_detail = step_['step_detail']
                                    
                                    for zi in range(len(tmp_step_detail)):
                                        tmp_arr_step_detail_2 = tmp_step_detail[zi]
                                        oneMail = str(tmp_arr_step_detail_2['one_email']).replace(' ','').lower()            
                                        tmp_step_me = int(step_num) - 1
                                        step_num_int2 = int(step_num)
                                        # if len(arr_step_info) != 0:
                                        #     break
                                        # if tmp_sicode == 'd3aa8f08-f1d9-4e14-a2be-2c5a094a47aa':
                                        #     print(step_num_int2)
                                        #     print(len(tmp_status_sum) , tmp_step_me)
                                        #     print(tmp_status_sum)
                                        #     print(oneMail, oneMail == self.emailUser , tmp_status_sum[tmp_step_me] == 'Incomplete',arr_step_info , tmp_status_sum[tmp_step_me])
                                        #     print(tmp_status_sum[tmp_step_me])
                                        stop = False
                                        for ii in range(len(tmp_status_sum)):
                                            if stop == False :
                                                list_status = Counter(tmp_status_sum)
                                                if 'Complete' in list_status and len(list_status) == 1 :
                                                    step_now2 = len(tmp_status_sum)
                                                    stop = True
                                                elif tmp_status_sum[ii] == 'Incomplete' or tmp_status_sum[ii] == 'Reject' or tmp_status_sum[ii] == 'Approve':
                                                    step_now2 = ii+1
                                                    stop = True
                                        if 'Reject' in tmp_status_sum:
                                            step_now = step_num_int2
                                            arr_step_info.append('Reject')
                                        elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Incomplete_input':
                                            step_now = step_num_int2
                                            arr_step_info.append('Wait_input')
                                        elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Incomplete_1':
                                            step_now = step_num_int2
                                            arr_step_info.append('Incomplete')
                                        elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Incomplete':                                        
                                            if self.emailUser not in arr_email_list:
                                                index_step_me = tmp_step_me
                                                if index_step_me != 0:
                                                    while index_step_me > 0:
                                                        if len(arr_step_info) == 0:
                                                            index_step_me = index_step_me - 1
                                                            if tmp_status_sum[index_step_me] == 'Incomplete_1':
                                                                step_now = step_num_int2
                                                                arr_step_info.append('Incomplete')
                                                            elif tmp_status_sum[index_step_me] == 'Incomplete':
                                                                step_now = step_num_int2
                                                                arr_step_info.append('Incomplete')
                                                            else:
                                                                step_now = step_num_int2
                                                                arr_step_info.append('Wait')
                                                            arr_email_list.append(self.emailUser)
                                                        else:
                                                            index_step_me = index_step_me - 1
                                                            continue
                                                else:
                                                    step_now = step_num_int2
                                                    arr_step_info.append('Wait')                                            
                                        elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Complete':                                    
                                            if self.emailUser not in arr_email_list:
                                                if count_email == 1:
                                                    for nz in range(step_num_int2,len(tmp_status_sum),1):
                                                        if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                            step_now = step_num_int2
                                                            arr_step_info.append('Wait')
                                                        elif self.emailUser not in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                            step_now = step_num_int2
                                                            arr_step_info.append('Progress')
                                                    arr_email_list.append(self.emailUser)
                                                else:                                                
                                                    for nz in range(step_num_int2,len(tmp_status_sum),1):
                                                        if self.emailUser not in arr_email_list:
                                                            if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Complete':
                                                                pass                                                    
                                                            if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                                step_now = step_num_int2
                                                                arr_step_info.append('Wait')
                                                                arr_email_list.append(self.emailUser)
                                                            if self.emailUser not in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                                step_now = step_num_int2
                                                                arr_step_info.append('Progress')
                                                                arr_email_list.append(self.emailUser)
                                                            
                                        
                                        if step_now == None:                                  
                                            step_now = step_num_int2
                                if 'Reject' in arr_step_info:
                                    res_status_file = 'R'
                                    res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                                elif 'Wait_input' in arr_step_info:
                                    res_status_file = 'WI'
                                    res_status_file_string = 'รอคุณกรอกข้อมูล'
                                elif 'Progress' in arr_step_info and 'Wait' in arr_step_info:
                                    res_status_file = 'Z'
                                    res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                                elif 'Wait' in arr_step_info:
                                    res_status_file = 'W'
                                    res_status_file_string = 'รอคุณอนุมัติ'
                                elif 'Incomplete' in arr_step_info:
                                    res_status_file = 'Z'
                                    res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                                elif 'Progress' in arr_step_info:
                                    res_status_file = 'N'
                                    res_status_file_string = 'กำลังดำเนินการ'                    
                                elif arr_step_info.count('Incomplete') >= 2:
                                    res_status_file = 'Z'
                                    res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                                elif 'Incomplete' in arr_step_info and 'Complete' in arr_step_info:
                                    res_status_file = 'N'
                                    res_status_file_string = 'กำลังดำเนินการ'
                                else:
                                    res_status_file_string = 'อนุมัติแล้ว'
                                
                    
                        # if query_temp[u][z] != None:
                        #     tmp_dict_json = query_temp[u][z].__dict__
                        #     if '_sa_instance_state' in tmp_dict_json:
                        #         del tmp_dict_json['_sa_instance_state']
                        #     print(tmp_dict_json)
                        #     tmp_data_group = tmp_dict_json['data_group']
                        #     tmp_date_time_group = tmp_dict_json['updatetime']
                    
                    # tmp_sid_code_group = []
                    # if z == 2:
                    #     tmp_dict_json = query_temp[u][z].__dict__
                    #     if '_sa_instance_state' in tmp_dict_json:
                    #         del tmp_dict_json['_sa_instance_state']
                    #     tmp_group_id = tmp_dict_json['group_id']
                        
                    
                    # if len(tmp_sid_code_group) != 0:
                    #     for z in range(len(tmp_sid_code_group)):
                    #         if tmp_sicode == tmp_sid_code_group[z]:
                    #             print(tmp_sicode)
                    list_temp_query.append(tmp_dict_json)
                    dateTime_String = tmp_send_time
                    th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                    ts = int(time.time())
                    date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                    year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                    datetime_display = int(dateTime_String.timestamp())
                    date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                    yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                    time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                    old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                    if date_time_today == date_time_db:
                        date_display_show = time_show_db
                    else:
                        if year_today == yar_db:
                            date_display_show = convert_datetime_TH_2_display(datetime_display)
                        else:
                            date_display_show = old_year
                count_rowDocument = len(tmp_sid_code_list)
                json_Data['sum_Document']  = count_rowDocument
                json_Data['DocumentInfo'] = {
                    'Document_Active':count_rowDocument_StatusActive,
                    'Document_Reject':count_rowDocument_StatusReject,
                    'Document_Cancel':count_rowDocument_StatusCancel
                }
                int_step_now2 = step_now2 - 1
                tmp_req_email = []
                
                if tmp_status_group == True:
                    for ui in range(len(tmpstepnum)):
                        intstepnum = tmpstepnum[ui] - 1
                        print(intstepnum)
                        print(email_step_sum)
                        print(tmp_sicode)
                        # print(email_step_sum[intstepnum])
                        for zy in range(len(email_step_sum[intstepnum])):
                            tmp_req_email.append(email_step_sum[intstepnum][zy])
                    if self.emailUser in tmp_req_email:
                        if res_status_file == 'Y':
                            list_arr.append({
                                'group_email':tmp_req_email,
                                'group_id':None,
                                'group_status':tmp_status_group,
                                'sidCode':tmp_sicode,
                                'document_name':documentName,
                                'document_type':tmp_document_type,
                                'document_urgent':documentUrgentType,
                                'document_urgent_string':documentUrgentString,
                                'dateTime_String':str(dateTime_String).split('+')[0],
                                'dateTime_String_TH_1':th_dateTime_2,
                                'dateTime_display':date_display_show,
                                'document_id':tmp_document_id,
                                'stamp_all':tmp_sign_page_options,
                                'options_page_document':tmp_options_page,
                                'max_step':max_step,
                                'step_now':step_now2,
                                # 'dateTime_String_TH_2':th_dateTime_2,
                                'date_String':str(dateTime_String).split(' ')[0],
                                'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                                'status_file_code':res_status_file,
                                'status_file_string':res_status_file_string,
                                'dateTime':int(dateTime_String.timestamp()),
                                'tracking_id':tmp_tracking_id,
                                'sender_name':tmp_sender_name,
                                'sender_email':tmp_sender_email,
                                'file_name':tmp_file_name,
                                'document_business':tmp_biz_info
                            })
                    else:
                        list_arr.append({
                            'group_email':tmp_req_email,
                            'group_id':None,
                            'group_status':tmp_status_group,
                            'sidCode':tmp_sicode,
                            'document_name':documentName,
                            'document_type':tmp_document_type,
                            'document_urgent':documentUrgentType,
                            'document_urgent_string':documentUrgentString,
                            'dateTime_String':str(dateTime_String).split('+')[0],
                            'dateTime_String_TH_1':th_dateTime_2,
                            'dateTime_display':date_display_show,
                            'document_id':tmp_document_id,
                            'stamp_all':tmp_sign_page_options,
                            'options_page_document':tmp_options_page,
                            'max_step':max_step,
                            'step_now':step_now2,
                            # 'dateTime_String_TH_2':th_dateTime_2,
                            'date_String':str(dateTime_String).split(' ')[0],
                            'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                            'status_file_code':res_status_file,
                            'status_file_string':res_status_file_string,
                            'dateTime':int(dateTime_String.timestamp()),
                            'tracking_id':tmp_tracking_id,
                            'sender_name':tmp_sender_name,
                            'sender_email':tmp_sender_email,
                            'file_name':tmp_file_name,
                            'document_business':tmp_biz_info
                        })
                    # tmp_req_email = email_step_sum[int_step_now2]
                else:
                    list_arr.append({
                        'group_email':tmp_req_email,
                        'group_id':None,
                        'group_status':tmp_status_group,
                        'sidCode':tmp_sicode,
                        'document_name':documentName,
                        'document_type':tmp_document_type,
                        'document_urgent':documentUrgentType,
                        'document_urgent_string':documentUrgentString,
                        'dateTime_String':str(dateTime_String).split('+')[0],
                        'dateTime_String_TH_1':th_dateTime_2,
                        'dateTime_display':date_display_show,
                        'document_id':tmp_document_id,
                        'stamp_all':tmp_sign_page_options,
                        'options_page_document':tmp_options_page,
                        'max_step':max_step,
                        'step_now':step_now2,
                        # 'dateTime_String_TH_2':th_dateTime_2,
                        'date_String':str(dateTime_String).split(' ')[0],
                        'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                        'status_file_code':res_status_file,
                        'status_file_string':res_status_file_string,
                        'dateTime':int(dateTime_String.timestamp()),
                        'tracking_id':tmp_tracking_id,
                        'sender_name':tmp_sender_name,
                        'sender_email':tmp_sender_email,
                        'file_name':tmp_file_name,
                        'document_business':tmp_biz_info
                    })
            for xx in range(len(list_arr)):
                if list_arr[xx]['status_file_code'] == 'W':
                    statusFile_count_wait = statusFile_count_wait + 1
                elif list_arr[xx]['status_file_code'] == 'Y':
                    statusFile_count_approve = statusFile_count_approve + 1
                elif list_arr[xx]['status_file_code'] == 'R':
                    statusFile_count_reject = statusFile_count_reject + 1
                else:
                    statusFile_count_pendding = statusFile_count_pendding + 1 
                # print(list_arr[xx]['status_file_code'])
            json_Data['Document_Status_Details']  = {
                'Incomplete_Pendding':statusFile_count_pendding,
                'Complete_Approve':statusFile_count_approve,
                'Reject':statusFile_count_reject,
                'Wait':statusFile_count_wait
            }
            list_arr = sorted(list_arr, key=lambda k: k['dateTime'], reverse=True)
            json_Data['Document_Details'] = list_arr
            return {'result':'OK','messageText':json_Data,'status_Code':200,'messageER':None}
            
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}
            
    def select_dashboard_sender_v4(self,username,emailUser):
        self.username = username
        self.emailUser = emailUser
        try:
            sid_list = []
            json_Data = {}
            list_arr = []
            count_rowDocument = 0
            count_rowDocument_StatusActive = 0
            count_rowDocument_StatusReject = 0
            count_rowDocument_StatusCancel = 0
            statusFile_count_approve = 0
            statusFile_count_pendding = 0
            statusFile_count_reject = 0
            statusFile_count_wait = 0
            count_rowDocument = paper_lesssender.query.filter(paper_lesssender.send_user==self.username).count()
            count_rowDocument_StatusActive = paper_lesssender.query.filter(paper_lesssender.send_user==self.username,paper_lesssender.status=='ACTIVE').count()
            count_rowDocument_StatusReject = paper_lesssender.query.filter(paper_lesssender.send_user==self.username,paper_lesssender.status=='REJECT').count()
            count_rowDocument_StatusCancel = paper_lesssender.query.filter(paper_lesssender.send_user==self.username,paper_lesssender.status=='CANCEL').count()
            json_Data['sum_Document']  = count_rowDocument
            json_Data['DocumentInfo'] = {
                'Document_Active':count_rowDocument_StatusActive,
                'Document_Reject':count_rowDocument_StatusReject,
                'Document_Cancel':count_rowDocument_StatusCancel
            }

            for i in paper_lesssender.query.filter(paper_lesssender.send_user==self.username,paper_lesssender.status=='ACTIVE').order_by(desc(paper_lesssender.send_time)).all():
                sid_list.append(i.step_data_sid)
            query_email = paper_lessdatastep.query.filter(paper_lessdatastep.sid.in_(sid_list)).all()
            for n in range(len(query_email)):
                result_DB = query_email[n]
                sid_email = result_DB.sid
                # result_DB = paper_lessdatastep.query.filter(paper_lessdatastep.sid==sid_list_email[n]).first()
                jsonData_eval = eval(result_DB.data_json)
                arr_step_info = []
                if 'step_num' in jsonData_eval:
                    step_status = ''
                    step_before = ''
                    res_status_file = 'Y'
                    arr_step_totle = []
                    json_data_info = jsonData_eval
                    if 'step_detail' in json_data_info:
                        for s in range(len(json_data_info['step_detail'])):
                            json_info_step2 = {}
                            for u in range(len(json_data_info['step_detail'][s]['activity_code'])):
                                oneMail = json_data_info['step_detail'][s]['one_email']
                                if str(oneMail).replace(' ','').lower() == self.emailUser:
                                    if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
                                        if step_before == '':
                                            try:
                                                if json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Complete':
                                                    step_before = 'Complete'
                                                elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Approve':
                                                    step_before = 'Complete'
                                                elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Reject':
                                                    step_before = 'Reject'
                                            except Exception as e:
                                                step_before = ''
                                        if step_before != 'Reject':
                                            if json_data_info['step_detail'][s]['activity_status'][u] == 'Complete':
                                                step_status = 'Complete'
                                            elif json_data_info['step_detail'][s]['activity_status'][u] == 'Approve':
                                                step_status = 'Complete'
                                            elif json_data_info['step_detail'][s]['activity_status'][u] == 'Reject':
                                                step_status = 'Reject'
                                            else:
                                                try:
                                                    step_status  = 'Incomplete'
                                                except Exception as ex:
                                                    step_status = 'Incomplete'
                                        arr_step_info.append(step_status)
                                        arr_step_info.append(step_before)
                                else:
                                    if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
                                        if step_before == '':
                                            try:
                                                if json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Complete':
                                                    step_before = 'Complete'
                                                elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Approve':
                                                    step_before = 'Complete'
                                                elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Reject':
                                                    step_before = 'Reject'
                                            except Exception as e:
                                                step_before = ''
                                        if step_before != 'Reject':
                                            if json_data_info['step_detail'][s]['activity_status'][u] == 'Complete':
                                                step_status = 'Complete'
                                            elif json_data_info['step_detail'][s]['activity_status'][u] == 'Approve':
                                                step_status = 'Complete'
                                            elif json_data_info['step_detail'][s]['activity_status'][u] == 'Reject':
                                                step_status = 'Reject'
                                            else:
                                                try:
                                                    step_status  = 'Incomplete__'
                                                except Exception as ex:
                                                    step_status = 'Incomplete__'
                                        arr_step_info.append(step_status)
                                        arr_step_info.append(step_before)
                    # print(arr_step_info)
                    # print(sid_email)
                    if 'Waitting' in arr_step_info:
                        res_status_file = 'W'
                        res_status_file_string = 'รออนุมัติ'
                    elif 'Incomplete__' in arr_step_info:
                        res_status_file = 'N'
                        res_status_file_string = 'กำลังดำเนินการ'
                    elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                        res_status_file = 'W'
                        res_status_file_string = 'รออนุมัติ'
                    elif 'Reject' in arr_step_info:
                        res_status_file = 'R'
                        res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                    else:
                        res_status_file_string = 'อนุมัติแล้ว'
                    if res_status_file == 'W':
                        statusFile_count_wait = statusFile_count_wait + 1
                    elif res_status_file == 'Y':
                        statusFile_count_approve = statusFile_count_approve + 1
                    elif res_status_file == 'R':
                        statusFile_count_reject = statusFile_count_reject + 1
                    else:
                        statusFile_count_pendding = statusFile_count_pendding + 1
                    result_SenderDetails = paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_email).first()
                    if result_SenderDetails !=None:
                        file_name = result_SenderDetails.file_name
                        dateTime_String = result_SenderDetails.send_time
                        trackingCode = result_SenderDetails.tracking_id
                        sender_name = result_SenderDetails.sender_name
                        sender_email = result_SenderDetails.sender_email
                    result_DetailsDocument = paper_lessdocument.query.filter(paper_lessdocument.step_id==sid_email).first()
                    if result_DetailsDocument != None:
                        documentsign_page_options = result_DetailsDocument.sign_page_options
                        if result_DetailsDocument.options_page != None:
                            documentoptions_page = [eval(result_DetailsDocument.options_page)]
                        else:
                            documentoptions_page = []
                        if result_DetailsDocument.urgent_type != None:
                            documentUrgentType = result_DetailsDocument.urgent_type
                            if documentUrgentType == 'I':
                                documentUrgentString = 'ด่วนมาก'
                            elif documentUrgentType == 'U':
                                documentUrgentString = 'ด่วน'
                            elif documentUrgentType == 'M':
                                documentUrgentString = 'ปกติ'
                        if result_DetailsDocument.documentJson != None:
                            documentJson_result = eval(result_DetailsDocument.documentJson)
                            documentName = documentJson_result['document_name']
                            documentType = documentJson_result['document_type']
                        else:
                            documentName = None
                            documentType = None
                        document_Id = result_DetailsDocument.document_id
                    # th_dateTime_1 = convert_datetime_TH_1(int(dateTime_String.timestamp()))
                    th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                    ts = int(time.time())
                    date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                    year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                    datetime_display = int(dateTime_String.timestamp())
                    date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                    yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                    time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                    old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                    if date_time_today == date_time_db:
                        date_display_show = time_show_db
                    else:
                        if year_today == yar_db:
                            date_display_show = convert_datetime_TH_2_display(datetime_display)
                        else:
                            date_display_show = old_year
                    list_arr.append({
                        'sidCode':sid_email,
                        'document_name':documentName,
                        'document_type':documentType,
                        'document_urgent':documentUrgentType,
                        'document_urgent_string':documentUrgentString,
                        'dateTime_String':str(dateTime_String).split('+')[0],
                        'dateTime_String_TH_1':th_dateTime_2,
                        'dateTime_display':date_display_show,
                        'document_id':document_Id,
                        'stamp_all':documentsign_page_options,
                        'options_page_document':documentoptions_page,
                        # 'dateTime_String_TH_2':th_dateTime_2,
                        'date_String':str(dateTime_String).split(' ')[0],
                        'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                        'status_file_code':res_status_file,
                        'status_file_string':res_status_file_string,
                        'dateTime':int(dateTime_String.timestamp()),
                        'tracking_id':trackingCode,
                        'sender_name':sender_name,
                        'sender_email':sender_email,
                        'file_name':file_name
                    })
                else:
                    step_status = ''
                    res_status_file = 'Y'
                    step_before = ''
                    step_list_before = []
                    step_list_ = []
                    step_list_next = []
                    arr_step_totle = []
                    step_me = ''
                    step_sum_status = []
                    sum_status_step_list = []
                    list_check_step = []
                    step_list_data = []
                    max_step = (len(jsonData_eval))
                    step_infomation = jsonData_eval
                    sum_status_step = []
                    tmp_status_sum = []
                    arr_email_list = []
                    email_step_sum = []
                    email_one_sum = []
                    for i in range(len(step_infomation)):
                        list_check_step = []
                        json_step_info_2 = {}
                        step_list_data = []
                        step_status = []
                        step_email = []
                        step_ = step_infomation[i]
                        step_num = step_infomation[i]['step_num']
                        json_step_info_2['step_status'] = ''
                        tmp_step_detail = step_['step_detail']
                        for u in range(len(tmp_step_detail)):
                            tmp_arr_step_detail = tmp_step_detail[u]
                            tmp_status = tmp_arr_step_detail['activity_status']
                            tmp_code = tmp_arr_step_detail['activity_code']
                            tmp_email = tmp_arr_step_detail['one_email']
                            for s in range(len(tmp_code)):
                                if tmp_code[s] == 'A03':
                                    step_status.append(tmp_status[s])
                                    step_email.append(tmp_email)
                                    email_one_sum.append(tmp_email)
                        email_step_sum.append(step_email)
                        if 'Reject' in step_status:
                            tmp_status_sum.append('Reject')
                        elif 'Approve' in step_status:
                            tmp_status_sum.append('Complete')
                        elif 'Complete' in step_status:
                            tmp_status_sum.append('Complete')
                        elif 'Incomplete' in step_status:
                            tmp_status_sum.append('Incomplete')
                        elif 'Pending' in step_status:
                            tmp_status_sum.append('Incomplete')
                        else:
                            tmp_status_sum.append('Complete')
                    if self.emailUser in email_one_sum:
                        for zzi in range(len(step_infomation)):
                            list_check_step = []
                            json_step_info_2 = {}
                            step_list_data = []
                            step_status = []
                            step_ = step_infomation[zzi]
                            step_num = step_infomation[zzi]['step_num']
                            json_step_info_2['step_status'] = ''
                            tmp_step_detail = step_['step_detail']
                            for zi in range(len(tmp_step_detail)):
                                tmp_arr_step_detail_2 = tmp_step_detail[zi]
                                oneMail = tmp_arr_step_detail_2['one_email']
                                tmp_step_me = int(step_num) - 1
                                step_num_int2 = int(step_num)
                                if 'Reject' in tmp_status_sum:
                                    arr_step_info.append('Reject')
                                elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Incomplete':
                                    if self.emailUser not in arr_email_list:
                                        index_step_me = tmp_step_me
                                        if index_step_me != 0:
                                            while index_step_me > 0:
                                                if len(arr_step_info) == 0:
                                                    index_step_me = index_step_me - 1
                                                    if tmp_status_sum[index_step_me] == 'Incomplete':
                                                        arr_step_info.append('Incomplete')
                                                    else:
                                                        arr_step_info.append('Wait')
                                                    arr_email_list.append(self.emailUser)
                                                else:
                                                    index_step_me = index_step_me - 1
                                                    continue
                                        else:
                                            arr_step_info.append('Wait')
                                elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Complete':
                                    # print('Complete')
                                    if self.emailUser not in arr_email_list:
                                        for nz in range(step_num_int2,len(tmp_status_sum),1):
                                            if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                arr_step_info.append('Incomplete')
                                            elif self.emailUser not in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                arr_step_info.append('Progress')
                                        arr_email_list.append(self.emailUser)
                    else:
                        for zzi in range(len(step_infomation)):
                            list_check_step = []
                            json_step_info_2 = {}
                            step_list_data = []
                            step_status = []
                            step_ = step_infomation[zzi]
                            step_num = step_infomation[zzi]['step_num']
                            json_step_info_2['step_status'] = ''
                            tmp_step_detail = step_['step_detail']
                            for zi in range(len(tmp_step_detail)):
                                tmp_arr_step_detail_2 = tmp_step_detail[zi]
                                oneMail = tmp_arr_step_detail_2['one_email']
                                tmp_step_me = int(step_num) - 1
                                step_num_int2 = int(step_num)
                                if 'Reject' in tmp_status_sum:
                                    arr_step_info.append('Reject')
                                elif 'Incomplete' in tmp_status_sum:
                                    arr_step_info.append('Progress')
                        # print(tmp_status_sum)


                    if 'Reject' in arr_step_info:
                        res_status_file = 'R'
                        res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                    elif 'Wait' in arr_step_info:
                        res_status_file = 'W'
                        res_status_file_string = 'รออนุมัติ'
                    elif 'Incomplete' in arr_step_info:
                        res_status_file = 'Z'
                        res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                    elif 'Progress' in arr_step_info:
                        res_status_file = 'N'
                        res_status_file_string = 'กำลังดำเนินการ'                    
                    elif arr_step_info.count('Incomplete') >= 2:
                        res_status_file = 'Z'
                        res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                    elif 'Wait__' in arr_step_info:
                        res_status_file = 'Z'
                        res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                    elif 'Incomplete_1' in arr_step_info or 'Pending_1' in arr_step_info:
                        res_status_file = 'W'
                        res_status_file_string = 'รออนุมัติ'
                    elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                        res_status_file = 'N'
                        res_status_file_string = 'กำลังดำเนินการ'

                    elif 'Waitting' in arr_step_info:
                        res_status_file = 'W'
                        res_status_file_string = 'รออนุมัติ'
                    else:
                        res_status_file_string = 'อนุมัติแล้ว'
                    if res_status_file == 'W':
                        statusFile_count_wait = statusFile_count_wait + 1
                    elif res_status_file == 'Y':
                        statusFile_count_approve = statusFile_count_approve + 1
                    elif res_status_file == 'R':
                        statusFile_count_reject = statusFile_count_reject + 1
                    else:
                        statusFile_count_pendding = statusFile_count_pendding + 1
                    result_SenderDetails = paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_email).first()
                    if result_SenderDetails !=None:
                        file_name = result_SenderDetails.file_name
                        dateTime_String = result_SenderDetails.send_time
                        trackingCode = result_SenderDetails.tracking_id
                        sender_name = result_SenderDetails.sender_name
                        sender_email = result_SenderDetails.sender_email
                    result_DetailsDocument = paper_lessdocument.query.filter(paper_lessdocument.step_id==sid_email).first()
                    if result_DetailsDocument != None:
                        documentsign_page_options = result_DetailsDocument.sign_page_options
                        if result_DetailsDocument.options_page != None:
                            documentoptions_page = [eval(result_DetailsDocument.options_page)]
                        else:
                            documentoptions_page = []
                        if result_DetailsDocument.urgent_type != None:
                            documentUrgentType = result_DetailsDocument.urgent_type
                            if documentUrgentType == 'I':
                                documentUrgentString = 'ด่วนมาก'
                            elif documentUrgentType == 'U':
                                documentUrgentString = 'ด่วน'
                            elif documentUrgentType == 'M':
                                documentUrgentString = 'ปกติ'
                        if result_DetailsDocument.documentJson != None:
                            documentJson_result = eval(result_DetailsDocument.documentJson)
                            documentName = documentJson_result['document_name']
                            documentType = documentJson_result['document_type']
                        else:
                            documentName = None
                            documentType = None
                        document_Id = result_DetailsDocument.document_id
                    # th_dateTime_1 = convert_datetime_TH_1(int(dateTime_String.timestamp()))
                    th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                    ts = int(time.time())
                    date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                    year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                    datetime_display = int(dateTime_String.timestamp())
                    date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                    yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                    time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                    old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                    if date_time_today == date_time_db:
                        date_display_show = time_show_db
                    else:
                        if year_today == yar_db:
                            date_display_show = convert_datetime_TH_2_display(datetime_display)
                        else:
                            date_display_show = old_year
                    list_arr.append({
                        'sidCode':sid_email,
                        'document_name':documentName,
                        'document_type':documentType,
                        'document_urgent':documentUrgentType,
                        'document_urgent_string':documentUrgentString,
                        'dateTime_String':str(dateTime_String).split('+')[0],
                        'dateTime_String_TH_1':th_dateTime_2,
                        'dateTime_display':date_display_show,
                        'document_id':document_Id,
                        'stamp_all':documentsign_page_options,
                        'options_page_document':documentoptions_page,
                        # 'dateTime_String_TH_2':th_dateTime_2,
                        'date_String':str(dateTime_String).split(' ')[0],
                        'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                        'status_file_code':res_status_file,
                        'status_file_string':res_status_file_string,
                        'dateTime':int(dateTime_String.timestamp()),
                        'tracking_id':trackingCode,
                        'sender_name':sender_name,
                        'sender_email':sender_email,
                        'file_name':file_name
                    })


            json_Data['Document_Status_Details']  = {
                'Incomplete_Pendding':statusFile_count_pendding,
                'Complete_Approve':statusFile_count_approve,
                'Reject':statusFile_count_reject,
                'Wait':statusFile_count_wait
            }
            list_arr = sorted(list_arr, key=lambda k: k['dateTime'], reverse=True)
            json_Data['Document_Details'] = list_arr

            return {'result':'OK','messageText':json_Data,'status_Code':200,'messageER':None}
        except Exception as ex:
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

    def select_dashboard_sender_v3(self,username,emailUser):
        self.username = username
        self.emailUser = emailUser
        sid_list = []
        sid_list_email = []
        json_Data = {}
        list_arr = []
        list_json = []
        try:
            tmp_list = []
             
            count_rowDocument = 0
            count_rowDocument_StatusActive = 0
            count_rowDocument_StatusReject = 0
            count_rowDocument_StatusCancel = 0
            statusFile_count_approve = 0
            statusFile_count_pendding = 0
            statusFile_count_reject = 0
            statusFile_count_wait = 0
            list_temp_query = []
            tmp_sid_code_list = []
            query_temp = db.session.query(paper_lesssender, paper_lessdocument,paper_lessdatastep)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                .order_by(desc(paper_lesssender.send_time))\
                .all()            
           
            count_rowDocument_StatusActive = db.session.query(paper_lesssender, paper_lessdocument,paper_lessdatastep)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                .order_by(desc(paper_lesssender.send_time))\
                .count()
            count_rowDocument_StatusReject = db.session.query(paper_lesssender, paper_lessdocument,paper_lessdatastep)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='REJECT').filter(paper_lesssender.send_user==self.username)\
                .order_by(desc(paper_lesssender.send_time))\
                .count()
            count_rowDocument_StatusCancel = db.session.query(paper_lesssender, paper_lessdocument,paper_lessdatastep)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='CANCEL').filter(paper_lesssender.send_user==self.username)\
                .order_by(desc(paper_lesssender.send_time))\
                .count()
            for u in range(len(query_temp)):
                for z in range(len(query_temp[u])):
                    if z == 0:
                        tmp_dict_json = query_temp[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            del tmp_dict_json['_sa_instance_state']
                        tmp_sicode = tmp_dict_json['step_data_sid']
                        tmp_sid_code_list.append(tmp_sicode)
                        tmp_send_time = tmp_dict_json['send_time']
                        tmp_document_id = tmp_dict_json['doc_id']
                        tmp_tracking_id = tmp_dict_json['tracking_id']
                        tmp_sender_name = tmp_dict_json['sender_name']
                        tmp_sender_email = tmp_dict_json['sender_email']
                        tmp_file_name = tmp_dict_json['file_name']
                    if z == 1:
                        tmp_dict_json = query_temp[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            del tmp_dict_json['_sa_instance_state']
                        tmp_sign_page_options = tmp_dict_json['sign_page_options']
                        tmp_document_type = tmp_dict_json['documentType']
                        # print(tmp_dict_json['options_page'])
                        if tmp_dict_json['options_page'] != None:
                            tmp_options_page = [eval(tmp_dict_json['options_page'])]
                        else:
                            tmp_options_page = []
                        if tmp_dict_json['documentJson'] != None:
                            documentJson_result = eval(tmp_dict_json['documentJson'])
                            documentName = documentJson_result['document_name']
                            documentType = documentJson_result['document_type']
                        else:
                            documentName = None
                            documentType = None
                        if tmp_dict_json['urgent_type'] != None:
                            documentUrgentType = tmp_dict_json['urgent_type']
                            if documentUrgentType == 'I':
                                documentUrgentString = 'ด่วนมาก'
                            elif documentUrgentType == 'U':
                                documentUrgentString = 'ด่วน'
                            elif documentUrgentType == 'M':
                                documentUrgentString = 'ปกติ'
                        
                    if z == 2:
                        tmp_dict_json = query_temp[u][z].__dict__
                        tmp_biz_info = None 
                        tmp_role_name = None
                        tmp_dept_name = None
                        tmp_role_level = None
                        if '_sa_instance_state' in tmp_dict_json:
                            del tmp_dict_json['_sa_instance_state']
                        step_now = None
                        step_now2 = 0
                        jsonData_eval = eval(tmp_dict_json['data_json'])
                        arr_step_info = []
                        if tmp_dict_json['biz_info'] != None or tmp_dict_json['biz_info'] != '':
                            if tmp_dict_json['biz_info'] != 'None':
                                tmp_biz_info = {}
                                eval_biz_info = eval(tmp_dict_json['biz_info'])
                                if 'role_name' in eval_biz_info:
                                    tmp_role_name = eval_biz_info['role_name']
                                if 'dept_name' in eval_biz_info:
                                    tmp_dept_name = eval_biz_info['dept_name']
                                if 'role_level' in eval_biz_info:
                                    tmp_role_level = eval_biz_info['role_level']
                                if 'dept_name' in eval_biz_info:            
                                    tmp_biz_info = {
                                        'tax_id':eval_biz_info['id_card_num'],
                                        'role_name' : tmp_role_name,
                                        'dept_name' : tmp_dept_name,
                                        'role_level' : tmp_role_level              
                                    }                                
                                elif 'dept_name' not in eval_biz_info:
                                    tmp_biz_info = {
                                        'tax_id':eval_biz_info['id_card_num'],
                                        'role_name' : tmp_role_name,
                                        'dept_name' : [],
                                        'role_level' : tmp_role_level            
                                    }   
                        tmp_list_step_infomation = []
                        if 'step_num' in jsonData_eval:
                            tmp_step_info = [eval(tmp_dict_json['data_json'])]
                        else:
                            tmp_step_info = eval(tmp_dict_json['data_json'])
                        if 'step_num' in jsonData_eval:
                            tmp_list_step_infomation.append(jsonData_eval)
                            jsonData_eval = tmp_list_step_infomation                            
                        if 'step_num' in jsonData_eval:
                            step_status = ''
                            step_before = ''
                            res_status_file = 'Y'
                            arr_step_totle = []
                            json_data_info = jsonData_eval
                            if 'step_detail' in json_data_info:
                                for s in range(len(json_data_info['step_detail'])):
                                    json_info_step2 = {}
                                    for u in range(len(json_data_info['step_detail'][s]['activity_code'])):
                                        oneMail = json_data_info['step_detail'][s]['one_email']
                                        if str(oneMail).replace(' ','').lower() == self.emailUser:
                                            if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
                                                if step_before == '':
                                                    try:
                                                        if json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Complete':
                                                            step_before = 'Complete'
                                                        elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Approve':
                                                            step_before = 'Complete'
                                                        elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Reject':
                                                            step_before = 'Reject'
                                                    except Exception as e:
                                                        step_before = ''
                                                if step_before != 'Reject':
                                                    if json_data_info['step_detail'][s]['activity_status'][u] == 'Complete':
                                                        step_status = 'Complete'
                                                    elif json_data_info['step_detail'][s]['activity_status'][u] == 'Approve':
                                                        step_status = 'Complete'
                                                    elif json_data_info['step_detail'][s]['activity_status'][u] == 'Reject':
                                                        step_status = 'Reject'
                                                    else:
                                                        try:
                                                            step_status  = 'Incomplete'
                                                        except Exception as ex:
                                                            step_status = 'Incomplete'
                                                arr_step_info.append(step_status)
                                                arr_step_info.append(step_before)
                            if 'Reject' in arr_step_info:
                                res_status_file = 'R'
                                res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                            elif 'Complete' in arr_step_info:
                                res_status_file = 'Y'
                                res_status_file_string = 'อนุมัติแล้ว'
                            elif 'Waitting' in arr_step_info:
                                res_status_file = 'W'
                                res_status_file_string = 'รออนุมัติ'
                            elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                                res_status_file = 'W'
                                res_status_file_string = 'รออนุมัติ'
                            else:
                                res_status_file_string = 'อนุมัติแล้ว'
                            if res_status_file == 'W':
                                statusFile_count_wait = statusFile_count_wait + 1
                            elif res_status_file == 'Y':
                                statusFile_count_approve = statusFile_count_approve + 1
                            elif res_status_file == 'R':
                                statusFile_count_reject = statusFile_count_reject + 1
                            else:
                                statusFile_count_pendding = statusFile_count_pendding + 1
                        else:
                            step_status = ''
                            res_status_file = 'Y'
                            step_before = ''
                            step_list_before = []
                            step_list_ = []
                            step_list_next = []
                            arr_step_totle = []
                            step_me = ''
                            step_sum_status = []
                            sum_status_step_list = []
                            list_check_step = []
                            step_list_data = []
                            max_step = (len(jsonData_eval))
                            step_infomation = jsonData_eval
                            sum_status_step = []
                            tmp_status_sum = []
                            arr_email_list = []
                            email_step_sum = []
                            email_one_sum = []
                            for i in range(len(step_infomation)):
                                list_check_step = []
                                json_step_info_2 = {}
                                step_list_data = []
                                step_status = []
                                step_email = []
                                step_ = step_infomation[i]
                                step_num = step_infomation[i]['step_num']
                                json_step_info_2['step_status'] = ''
                                tmp_step_detail = step_['step_detail']
                                for u in range(len(tmp_step_detail)):
                                    tmp_arr_step_detail = tmp_step_detail[u]
                                    tmp_status = tmp_arr_step_detail['activity_status']
                                    tmp_code = tmp_arr_step_detail['activity_code']
                                    tmp_email = tmp_arr_step_detail['one_email']
                                    for s in range(len(tmp_code)):
                                        if tmp_code[s] == 'A03':
                                            if tmp_sicode == '6f0d4875-ecf7-4a28-b60a-3c1e9b34eb67':
                                                print(tmp_status[s])
                                            step_status.append(tmp_status[s])
                                            step_email.append(tmp_email)
                                            email_one_sum.append(tmp_email)
                                email_step_sum.append(step_email)
                               
                                if 'Reject' in step_status:
                                    tmp_status_sum.append('Reject')
                                elif 'Approve' in step_status:
                                    tmp_status_sum.append('Complete')
                                elif 'Complete' in step_status:
                                    tmp_status_sum.append('Complete')
                                elif 'Incomplete' in step_status:
                                    tmp_status_sum.append('Incomplete')
                                elif 'Pending' in step_status:
                                    tmp_status_sum.append('Incomplete')
                                else:
                                    tmp_status_sum.append('Complete')

                            if self.emailUser in email_one_sum:
                                for zzi in range(len(step_infomation)):
                                    list_check_step = []
                                    json_step_info_2 = {}
                                    step_list_data = []
                                    step_status = []
                                    step_ = step_infomation[zzi]
                                    step_num = step_infomation[zzi]['step_num']
                                    json_step_info_2['step_status'] = ''
                                    tmp_step_detail = step_['step_detail']
                                    for zi in range(len(tmp_step_detail)):
                                        tmp_arr_step_detail_2 = tmp_step_detail[zi]
                                        oneMail = tmp_arr_step_detail_2['one_email']
                                        tmp_step_me = int(step_num) - 1
                                        step_num_int2 = int(step_num)
                                        stop = False
                                        # print(tmp_status_sum)
                                        
                                        for ii in range(len(tmp_status_sum)):
                                            if stop == False :
                                                list_status = Counter(tmp_status_sum)
                                                if 'Complete' in list_status and len(list_status) == 1 :
                                                    step_now2 = len(tmp_status_sum)
                                                    stop = True
                                                elif tmp_status_sum[ii] == 'Incomplete' or tmp_status_sum[ii] == 'Reject' or tmp_status_sum[ii] == 'Approve':
                                                    step_now2 = ii+1
                                                    stop = True
                                                    if tmp_sicode == '6f0d4875-ecf7-4a28-b60a-3c1e9b34eb67':
                                                        print(step_now2)
                                        if 'Reject' in tmp_status_sum:
                                            step_now = step_num_int2
                                            arr_step_info.append('Reject')
                                        elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Incomplete':
                                            if self.emailUser not in arr_email_list:
                                                index_step_me = tmp_step_me
                                                if index_step_me != 0:
                                                    while index_step_me > 0:
                                                        if len(arr_step_info) == 0:
                                                            index_step_me = index_step_me - 1
                                                            if tmp_status_sum[index_step_me] == 'Incomplete':
                                                                step_now = step_num_int2
                                                                arr_step_info.append('Incomplete')
                                                            else:
                                                                step_now = step_num_int2
                                                                arr_step_info.append('Wait')
                                                            arr_email_list.append(self.emailUser)
                                                        else:
                                                            index_step_me = index_step_me - 1
                                                            continue
                                                else:
                                                    step_now = step_num_int2
                                                    arr_step_info.append('Wait')
                                        elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Complete':
                                            # print('Complete')
                                            if self.emailUser not in arr_email_list:
                                                for nz in range(step_num_int2,len(tmp_status_sum),1):
                                                    if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                        step_now = step_num_int2+ 1
                                                        arr_step_info.append('Incomplete')
                                                    elif self.emailUser not in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                        step_now = step_num_int2 + 1
                                                        arr_step_info.append('Progress')
                                                arr_email_list.append(self.emailUser)
                                        if step_now == None:
                                            step_now = step_num_int2
                            else:

                                for zzi in range(len(step_infomation)):
                                    list_check_step = []
                                    json_step_info_2 = {}
                                    step_list_data = []
                                    step_status = []
                                    step_ = step_infomation[zzi]
                                    step_num = step_infomation[zzi]['step_num']
                                    json_step_info_2['step_status'] = ''
                                    tmp_step_detail = step_['step_detail']
                                    for zi in range(len(tmp_step_detail)):
                                        tmp_arr_step_detail_2 = tmp_step_detail[zi]
                                        oneMail = tmp_arr_step_detail_2['one_email']
                                        tmp_step_me = int(step_num) - 1
                                        step_num_int2 = int(step_num)
                                        stop = False
                                        for ii in range(len(tmp_status_sum)):
                                            if stop == False :
                                                list_status = Counter(tmp_status_sum)
                                                if 'Complete' in list_status and len(list_status) == 1 :
                                                    step_now2 = len(tmp_status_sum)
                                                    stop = True
                                                elif tmp_status_sum[ii] == 'Incomplete' or tmp_status_sum[ii] == 'Reject' or tmp_status_sum[ii] == 'Approve':
                                                    step_now2 = ii+1
                                                    stop = True
                                        if 'Reject' in tmp_status_sum:
                                            step_now = step_num_int2
                                            arr_step_info.append('Reject')
                                        elif 'Incomplete' in tmp_status_sum:
                                            step_now = step_num_int2
                                            arr_step_info.append('Progress')
                                        if step_now == None:
                                            step_now = step_num_int2
                            if tmp_sicode == 'fa92b593-f299-4aa9-91e8-ddc5878e725f':
                                print(arr_step_info)
                            if 'Reject' in arr_step_info:
                                res_status_file = 'R'
                                res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                            elif 'Progress' in arr_step_info and 'Wait' in arr_step_info:
                                res_status_file = 'Z'
                                res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                            elif 'Wait' in arr_step_info:
                                res_status_file = 'W'
                                res_status_file_string = 'รออนุมัติ'
                            elif 'Incomplete' in arr_step_info:
                                res_status_file = 'Z'
                                res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                            elif 'Progress' in arr_step_info:
                                res_status_file = 'N'
                                res_status_file_string = 'กำลังดำเนินการ'                    
                            elif arr_step_info.count('Incomplete') >= 2:
                                res_status_file = 'Z'
                                res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                            elif 'Incomplete' in arr_step_info and 'Complete' in arr_step_info:
                                res_status_file = 'N'
                                res_status_file_string = 'กำลังดำเนินการ'
                            else:
                                res_status_file_string = 'อนุมัติแล้ว'
                            if res_status_file == 'W':
                                statusFile_count_wait = statusFile_count_wait + 1
                            elif res_status_file == 'Y':
                                statusFile_count_approve = statusFile_count_approve + 1
                            elif res_status_file == 'R':
                                statusFile_count_reject = statusFile_count_reject + 1
                            else:
                                statusFile_count_pendding = statusFile_count_pendding + 1
                        
                    list_temp_query.append(tmp_dict_json)
                    dateTime_String = tmp_send_time
                    th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                    ts = int(time.time())
                    date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                    year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                    datetime_display = int(dateTime_String.timestamp())
                    date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                    yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                    time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                    old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                    if date_time_today == date_time_db:
                        date_display_show = time_show_db
                    else:
                        if year_today == yar_db:
                            date_display_show = convert_datetime_TH_2_display(datetime_display)
                        else:
                            date_display_show = old_year
                count_rowDocument = len(tmp_sid_code_list)
                json_Data['sum_Document']  = count_rowDocument
                json_Data['DocumentInfo'] = {
                    'Document_Active':count_rowDocument_StatusActive,
                    'Document_Reject':count_rowDocument_StatusReject,
                    'Document_Cancel':count_rowDocument_StatusCancel
                }  
                list_arr.append({
                    'max_step':max_step,
                    'step_now':step_now2,
                    'sidCode':tmp_sicode,
                    'document_name':documentName,
                    'document_type':tmp_document_type,
                    'document_urgent':documentUrgentType,
                    'document_urgent_string':documentUrgentString,
                    'dateTime_String':str(dateTime_String).split('+')[0],
                    'dateTime_String_TH_1':th_dateTime_2,
                    'dateTime_display':date_display_show,
                    'document_id':tmp_document_id,
                    'stamp_all':tmp_sign_page_options,
                    'options_page_document':tmp_options_page,
                    # 'dateTime_String_TH_2':th_dateTime_2,
                    'date_String':str(dateTime_String).split(' ')[0],
                    'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                    'status_file_code':res_status_file,
                    'status_file_string':res_status_file_string,
                    'dateTime':int(dateTime_String.timestamp()),
                    'tracking_id':tmp_tracking_id,
                    'sender_name':tmp_sender_name,
                    'sender_email':tmp_sender_email,
                    'file_name':tmp_file_name,
                    'document_business':tmp_biz_info
                })
            json_Data['Document_Status_Details']  = {
                'Incomplete_Pendding':statusFile_count_pendding,
                'Complete_Approve':statusFile_count_approve,
                'Reject':statusFile_count_reject,
                'Wait':statusFile_count_wait
            }
            list_arr = sorted(list_arr, key=lambda k: k['dateTime'], reverse=True)
            json_Data['Document_Details'] = list_arr
            return {'result':'OK','messageText':json_Data,'status_Code':200,'messageER':None}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

    def select_dashboard_sender_v4(self,username,emailUser,tmptimeapprove=None):
        self.username = username
        self.emailUser = emailUser
        self.tmptimeapprove = tmptimeapprove
        if self.tmptimeapprove != None:
            self.tmptimeapprove = tmptimeapprove
        sid_list = []
        sid_list_email = []
        json_Data = {}
        list_arr = []
        list_json = []
        try:
            tmp_list = []
             
            count_rowDocument = 0
            count_rowDocument_StatusActive = 0
            count_rowDocument_StatusReject = 0
            count_rowDocument_StatusCancel = 0
            statusFile_count_approve = 0
            statusFile_count_pendding = 0
            statusFile_count_reject = 0
            statusFile_count_wait = 0
            list_temp_query = []
            tmp_sid_code_list = []
            if self.tmptimeapprove == True:
                query_temp = db.session.query(paper_lesssender, paper_lessdocument,paper_lessdatastep,paper_lessdatastep.update_time)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                    .order_by(desc(paper_lessdatastep.update_time))\
                    .all()
            
                count_rowDocument_StatusActive = db.session.query(paper_lesssender, paper_lessdocument,paper_lessdatastep,paper_lessdatastep.update_time)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                    .order_by(desc(paper_lessdatastep.update_time))\
                    .count()
                count_rowDocument_StatusReject = db.session.query(paper_lesssender, paper_lessdocument,paper_lessdatastep,paper_lessdatastep.update_time)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(paper_lesssender.status=='REJECT').filter(paper_lesssender.send_user==self.username)\
                    .order_by(desc(paper_lessdatastep.update_time))\
                    .count()
                count_rowDocument_StatusCancel = db.session.query(paper_lesssender, paper_lessdocument,paper_lessdatastep,paper_lessdatastep.update_time)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(paper_lesssender.status=='CANCEL').filter(paper_lesssender.send_user==self.username)\
                    .order_by(desc(paper_lessdatastep.update_time))\
                    .count()
            else:
                query_temp = db.session.query(paper_lesssender, paper_lessdocument,paper_lessdatastep,paper_lessdatastep.update_time)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                    .order_by(desc(paper_lesssender.send_time))\
                    .all()            
            
                count_rowDocument_StatusActive = db.session.query(paper_lesssender, paper_lessdocument,paper_lessdatastep,paper_lessdatastep.update_time)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                    .order_by(desc(paper_lesssender.send_time))\
                    .count()
                count_rowDocument_StatusReject = db.session.query(paper_lesssender, paper_lessdocument,paper_lessdatastep,paper_lessdatastep.update_time)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(paper_lesssender.status=='REJECT').filter(paper_lesssender.send_user==self.username)\
                    .order_by(desc(paper_lesssender.send_time))\
                    .count()
                count_rowDocument_StatusCancel = db.session.query(paper_lesssender, paper_lessdocument,paper_lessdatastep,paper_lessdatastep.update_time)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(paper_lesssender.status=='CANCEL').filter(paper_lesssender.send_user==self.username)\
                    .order_by(desc(paper_lesssender.send_time))\
                    .count()
            for ui in range(len(query_temp)):
                for z in range(len(query_temp[ui])):
                    if z == 0:
                        tmp_dict_json = query_temp[ui][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            del tmp_dict_json['_sa_instance_state']
                        tmp_sicode = tmp_dict_json['step_data_sid']
                        tmp_sid_code_list.append(tmp_sicode)
                        tmp_send_time = tmp_dict_json['send_time']
                        tmp_document_id = tmp_dict_json['doc_id']
                        tmp_tracking_id = tmp_dict_json['tracking_id']
                        tmp_sender_name = tmp_dict_json['sender_name']
                        tmp_sender_email = tmp_dict_json['sender_email']
                        tmp_file_name = tmp_dict_json['file_name']
                    if z == 1:
                        tmp_dict_json = query_temp[ui][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            del tmp_dict_json['_sa_instance_state']
                        tmp_sign_page_options = tmp_dict_json['sign_page_options']
                        tmp_document_type = tmp_dict_json['documentType']
                        # print(tmp_dict_json['options_page'])
                        if tmp_dict_json['options_page'] != None:
                            tmp_options_page = [eval(tmp_dict_json['options_page'])]
                        else:
                            tmp_options_page = []
                        if tmp_dict_json['documentJson'] != None:
                            documentJson_result = eval(tmp_dict_json['documentJson'])
                            documentName = documentJson_result['document_name']
                            documentType = documentJson_result['document_type']
                        else:
                            documentName = None
                            documentType = None
                        if tmp_dict_json['urgent_type'] != None:
                            documentUrgentType = tmp_dict_json['urgent_type']
                            if documentUrgentType == 'I':
                                documentUrgentString = 'ด่วนมาก'
                            elif documentUrgentType == 'U':
                                documentUrgentString = 'ด่วน'
                            elif documentUrgentType == 'M':
                                documentUrgentString = 'ปกติ'
                        
                    if z == 2:
                        tmp_dict_json = query_temp[ui][z].__dict__
                        tmp_biz_info = None 
                        tmp_role_name = None
                        tmp_dept_name = None
                        tmp_role_level = None
                        if '_sa_instance_state' in tmp_dict_json:
                            del tmp_dict_json['_sa_instance_state']
                        step_now = None
                        step_now2 = 0
                        jsonData_eval = eval(tmp_dict_json['data_json'])
                        arr_step_info = []
                        if tmp_dict_json['biz_info'] != None or tmp_dict_json['biz_info'] != '':
                            if tmp_dict_json['biz_info'] != 'None':
                                tmp_biz_info = {}
                                eval_biz_info = eval(tmp_dict_json['biz_info'])
                                if 'role_name' in eval_biz_info:
                                    tmp_role_name = eval_biz_info['role_name']
                                if 'dept_name' in eval_biz_info:
                                    tmp_dept_name = eval_biz_info['dept_name']
                                if 'role_level' in eval_biz_info:
                                    tmp_role_level = eval_biz_info['role_level']
                                if 'dept_name' in eval_biz_info:            
                                    tmp_biz_info = {
                                        'tax_id':eval_biz_info['id_card_num'],
                                        'role_name' : tmp_role_name,
                                        'dept_name' : tmp_dept_name,
                                        'role_level' : tmp_role_level              
                                    }                                
                                elif 'dept_name' not in eval_biz_info:
                                    tmp_biz_info = {
                                        'tax_id':eval_biz_info['id_card_num'],
                                        'role_name' : tmp_role_name,
                                        'dept_name' : [],
                                        'role_level' : tmp_role_level            
                                    }   
                        tmp_list_step_infomation = []
                        if 'step_num' in jsonData_eval:
                            tmp_step_info = [eval(tmp_dict_json['data_json'])]
                        else:
                            tmp_step_info = eval(tmp_dict_json['data_json'])
                        if 'step_num' in jsonData_eval:
                            tmp_list_step_infomation.append(jsonData_eval)
                            jsonData_eval = tmp_list_step_infomation                            
                        if 'step_num' in jsonData_eval:
                            step_status = ''
                            step_before = ''
                            res_status_file = 'Y'
                            arr_step_totle = []
                            json_data_info = jsonData_eval
                            if 'step_detail' in json_data_info:
                                for s in range(len(json_data_info['step_detail'])):
                                    json_info_step2 = {}
                                    for u in range(len(json_data_info['step_detail'][s]['activity_code'])):
                                        oneMail = json_data_info['step_detail'][s]['one_email']
                                        if str(oneMail).replace(' ','').lower() == self.emailUser:
                                            if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
                                                if step_before == '':
                                                    try:
                                                        if json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Complete':
                                                            step_before = 'Complete'
                                                        elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Approve':
                                                            step_before = 'Complete'
                                                        elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Reject':
                                                            step_before = 'Reject'
                                                    except Exception as e:
                                                        step_before = ''
                                                if step_before != 'Reject':
                                                    if json_data_info['step_detail'][s]['activity_status'][u] == 'Complete':
                                                        step_status = 'Complete'
                                                    elif json_data_info['step_detail'][s]['activity_status'][u] == 'Approve':
                                                        step_status = 'Complete'
                                                    elif json_data_info['step_detail'][s]['activity_status'][u] == 'Reject':
                                                        step_status = 'Reject'
                                                    else:
                                                        try:
                                                            step_status  = 'Incomplete'
                                                        except Exception as ex:
                                                            step_status = 'Incomplete'
                                                arr_step_info.append(step_status)
                                                arr_step_info.append(step_before)
                            if 'Reject' in arr_step_info:
                                res_status_file = 'R'
                                res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                            elif 'Complete' in arr_step_info:
                                res_status_file = 'Y'
                                res_status_file_string = 'อนุมัติแล้ว'
                            elif 'Waitting' in arr_step_info:
                                res_status_file = 'W'
                                res_status_file_string = 'รออนุมัติ'
                            elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                                res_status_file = 'W'
                                res_status_file_string = 'รออนุมัติ'
                            else:
                                res_status_file_string = 'อนุมัติแล้ว'
                            if res_status_file == 'W':
                                statusFile_count_wait = statusFile_count_wait + 1
                            elif res_status_file == 'Y':
                                statusFile_count_approve = statusFile_count_approve + 1
                            elif res_status_file == 'R':
                                statusFile_count_reject = statusFile_count_reject + 1
                            else:
                                statusFile_count_pendding = statusFile_count_pendding + 1
                        else:
                            step_status = ''
                            res_status_file = 'Y'
                            step_before = ''
                            step_list_before = []
                            step_list_ = []
                            step_list_next = []
                            arr_step_totle = []
                            step_me = ''
                            step_sum_status = []
                            sum_status_step_list = []
                            list_check_step = []
                            step_list_data = []
                            max_step = (len(jsonData_eval))
                            step_infomation = jsonData_eval
                            sum_status_step = []
                            tmp_status_sum = []
                            arr_email_list = []
                            email_step_sum = []
                            email_one_sum = []
                            for i in range(len(step_infomation)):
                                list_check_step = []
                                json_step_info_2 = {}
                                step_list_data = []
                                step_status = []
                                step_email = []
                                step_ = step_infomation[i]
                                step_num = step_infomation[i]['step_num']
                                json_step_info_2['step_status'] = ''
                                tmp_step_detail = step_['step_detail']
                                for u in range(len(tmp_step_detail)):
                                    tmp_arr_step_detail = tmp_step_detail[u]
                                    tmp_status = tmp_arr_step_detail['activity_status']
                                    tmp_code = tmp_arr_step_detail['activity_code']
                                    tmp_email = tmp_arr_step_detail['one_email']
                                    for s in range(len(tmp_code)):
                                        if tmp_code[s] == 'A03':
                                            if tmp_sicode == '6f0d4875-ecf7-4a28-b60a-3c1e9b34eb67':
                                                print(tmp_status[s])
                                            step_status.append(tmp_status[s])
                                            step_email.append(tmp_email)
                                            email_one_sum.append(tmp_email)
                                email_step_sum.append(step_email)
                               
                                if 'Reject' in step_status:
                                    tmp_status_sum.append('Reject')
                                elif 'Approve' in step_status:
                                    tmp_status_sum.append('Complete')
                                elif 'Complete' in step_status:
                                    tmp_status_sum.append('Complete')
                                elif 'Incomplete' in step_status:
                                    tmp_status_sum.append('Incomplete')
                                elif 'Pending' in step_status:
                                    tmp_status_sum.append('Incomplete')
                                else:
                                    tmp_status_sum.append('Complete')

                            if self.emailUser in email_one_sum:
                                for zzi in range(len(step_infomation)):
                                    list_check_step = []
                                    json_step_info_2 = {}
                                    step_list_data = []
                                    step_status = []
                                    step_ = step_infomation[zzi]
                                    step_num = step_infomation[zzi]['step_num']
                                    json_step_info_2['step_status'] = ''
                                    tmp_step_detail = step_['step_detail']
                                    for zi in range(len(tmp_step_detail)):
                                        tmp_arr_step_detail_2 = tmp_step_detail[zi]
                                        oneMail = tmp_arr_step_detail_2['one_email']
                                        tmp_step_me = int(step_num) - 1
                                        step_num_int2 = int(step_num)
                                        stop = False
                                        # print(tmp_status_sum)
                                        
                                        for ii in range(len(tmp_status_sum)):
                                            if stop == False :
                                                list_status = Counter(tmp_status_sum)
                                                if 'Complete' in list_status and len(list_status) == 1 :
                                                    step_now2 = len(tmp_status_sum)
                                                    stop = True
                                                elif tmp_status_sum[ii] == 'Incomplete' or tmp_status_sum[ii] == 'Reject' or tmp_status_sum[ii] == 'Approve':
                                                    step_now2 = ii+1
                                                    stop = True
                                                    if tmp_sicode == '6f0d4875-ecf7-4a28-b60a-3c1e9b34eb67':
                                                        print(step_now2)
                                        if 'Reject' in tmp_status_sum:
                                            step_now = step_num_int2
                                            arr_step_info.append('Reject')
                                        elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Incomplete':
                                            if self.emailUser not in arr_email_list:
                                                index_step_me = tmp_step_me
                                                if index_step_me != 0:
                                                    while index_step_me > 0:
                                                        if len(arr_step_info) == 0:
                                                            index_step_me = index_step_me - 1
                                                            if tmp_status_sum[index_step_me] == 'Incomplete':
                                                                step_now = step_num_int2
                                                                arr_step_info.append('Incomplete')
                                                            else:
                                                                step_now = step_num_int2
                                                                arr_step_info.append('Wait')
                                                            arr_email_list.append(self.emailUser)
                                                        else:
                                                            index_step_me = index_step_me - 1
                                                            continue
                                                else:
                                                    step_now = step_num_int2
                                                    arr_step_info.append('Wait')
                                        elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Complete':
                                            # print('Complete')
                                            if self.emailUser not in arr_email_list:
                                                for nz in range(step_num_int2,len(tmp_status_sum),1):
                                                    if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                        step_now = step_num_int2+ 1
                                                        arr_step_info.append('Incomplete')
                                                    elif self.emailUser not in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                                        step_now = step_num_int2 + 1
                                                        arr_step_info.append('Progress')
                                                arr_email_list.append(self.emailUser)
                                        if step_now == None:
                                            step_now = step_num_int2
                            else:

                                for zzi in range(len(step_infomation)):
                                    list_check_step = []
                                    json_step_info_2 = {}
                                    step_list_data = []
                                    step_status = []
                                    step_ = step_infomation[zzi]
                                    step_num = step_infomation[zzi]['step_num']
                                    json_step_info_2['step_status'] = ''
                                    tmp_step_detail = step_['step_detail']
                                    for zi in range(len(tmp_step_detail)):
                                        tmp_arr_step_detail_2 = tmp_step_detail[zi]
                                        oneMail = tmp_arr_step_detail_2['one_email']
                                        tmp_step_me = int(step_num) - 1
                                        step_num_int2 = int(step_num)
                                        stop = False
                                        for ii in range(len(tmp_status_sum)):
                                            if stop == False :
                                                list_status = Counter(tmp_status_sum)
                                                if 'Complete' in list_status and len(list_status) == 1 :
                                                    step_now2 = len(tmp_status_sum)
                                                    stop = True
                                                elif tmp_status_sum[ii] == 'Incomplete' or tmp_status_sum[ii] == 'Reject' or tmp_status_sum[ii] == 'Approve':
                                                    step_now2 = ii+1
                                                    stop = True
                                        if 'Reject' in tmp_status_sum:
                                            step_now = step_num_int2
                                            arr_step_info.append('Reject')
                                        elif 'Incomplete' in tmp_status_sum:
                                            step_now = step_num_int2
                                            arr_step_info.append('Progress')
                                        if step_now == None:
                                            step_now = step_num_int2
                            if tmp_sicode == 'fa92b593-f299-4aa9-91e8-ddc5878e725f':
                                print(arr_step_info)
                            if 'Reject' in arr_step_info:
                                res_status_file = 'R'
                                res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                            elif 'Progress' in arr_step_info and 'Wait' in arr_step_info:
                                res_status_file = 'Z'
                                res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                            elif 'Wait' in arr_step_info:
                                res_status_file = 'W'
                                res_status_file_string = 'รออนุมัติ'
                            elif 'Incomplete' in arr_step_info:
                                res_status_file = 'Z'
                                res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                            elif 'Progress' in arr_step_info:
                                res_status_file = 'N'
                                res_status_file_string = 'กำลังดำเนินการ'                    
                            elif arr_step_info.count('Incomplete') >= 2:
                                res_status_file = 'Z'
                                res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                            elif 'Incomplete' in arr_step_info and 'Complete' in arr_step_info:
                                res_status_file = 'N'
                                res_status_file_string = 'กำลังดำเนินการ'
                            else:
                                res_status_file_string = 'อนุมัติแล้ว'
                            if res_status_file == 'W':
                                statusFile_count_wait = statusFile_count_wait + 1
                            elif res_status_file == 'Y':
                                statusFile_count_approve = statusFile_count_approve + 1
                            elif res_status_file == 'R':
                                statusFile_count_reject = statusFile_count_reject + 1
                            else:
                                statusFile_count_pendding = statusFile_count_pendding + 1

                    if z == 3:
                        tmptime_update = (query_temp[ui][z])
                        tmptime_update_timestamp = int(tmptime_update.timestamp())
                        tmptime_update_string = str(tmptime_update).split('+')[0]
                        th_dateTime_2_last = convert_datetime_TH_2(int(tmptime_update.timestamp()))
                        # print(th_dateTime_2_last,tmptime_update)
                        ts = int(time.time())
                        date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                        year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                        datetime_display_update = int(tmptime_update.timestamp())
                        date_time_db = datetime.datetime.fromtimestamp(datetime_display_update).strftime('%Y-%m-%d')
                        yar_db = datetime.datetime.fromtimestamp(datetime_display_update).strftime('%Y')
                        time_show_db = datetime.datetime.fromtimestamp(datetime_display_update).strftime('%H:%M')
                        old_year = datetime.datetime.fromtimestamp(datetime_display_update).strftime('%d/%m/%Y')
                        if date_time_today == date_time_db:
                            date_last_display_show = time_show_db
                        else:
                            if year_today == yar_db:
                                date_last_display_show = convert_datetime_TH_2_display(datetime_display_update)
                            else:
                                date_last_display_show = old_year

                    list_temp_query.append(tmp_dict_json)
                    dateTime_String = tmp_send_time
                    th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                    ts = int(time.time())
                    date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                    year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                    datetime_display = int(dateTime_String.timestamp())
                    date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                    yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                    time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                    old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                    if date_time_today == date_time_db:
                        date_display_show = time_show_db
                    else:
                        if year_today == yar_db:
                            date_display_show = convert_datetime_TH_2_display(datetime_display)
                        else:
                            date_display_show = old_year
                count_rowDocument = len(tmp_sid_code_list)
                json_Data['sum_Document']  = count_rowDocument
                json_Data['DocumentInfo'] = {
                    'Document_Active':count_rowDocument_StatusActive,
                    'Document_Reject':count_rowDocument_StatusReject,
                    'Document_Cancel':count_rowDocument_StatusCancel
                }  
                list_arr.append({
                    'max_step':max_step,
                    'step_now':step_now2,
                    'sidCode':tmp_sicode,
                    'document_name':documentName,
                    'document_type':tmp_document_type,
                    'document_urgent':documentUrgentType,
                    'document_urgent_string':documentUrgentString,
                    'dateTime_String':str(dateTime_String).split('+')[0],
                    'dateTime_String_TH_1':th_dateTime_2,
                    'dateTime_display':date_display_show,
                    'document_id':tmp_document_id,
                    'stamp_all':tmp_sign_page_options,
                    'options_page_document':tmp_options_page,
                    # 'dateTime_String_TH_2':th_dateTime_2,
                    'date_String':str(dateTime_String).split(' ')[0],
                    'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                    'status_file_code':res_status_file,
                    'status_file_string':res_status_file_string,
                    'dateTime':int(dateTime_String.timestamp()),
                    'tracking_id':tmp_tracking_id,
                    'sender_name':tmp_sender_name,
                    'sender_email':tmp_sender_email,
                    'file_name':tmp_file_name,
                    'document_business':tmp_biz_info,
                    'update_last':tmptime_update,
                    'update_last_String_TH_1':th_dateTime_2_last,
                    'update_last_display':date_last_display_show,
                    'update_last_String':tmptime_update_string,
                    'update_last_TimeStamp':tmptime_update_timestamp,
                })
            json_Data['Document_Status_Details']  = {
                'Incomplete_Pendding':statusFile_count_pendding,
                'Complete_Approve':statusFile_count_approve,
                'Reject':statusFile_count_reject,
                'Wait':statusFile_count_wait
            }
            list_arr = sorted(list_arr, key=lambda k: k['dateTime'], reverse=True)
            if self.tmptimeapprove == True:
                list_arr = sorted(list_arr, key=lambda k: k['update_last_TimeStamp'], reverse=True)
            json_Data['Document_Details'] = list_arr
            return {'result':'OK','messageText':json_Data,'status_Code':200,'messageER':None}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

    
    def select_dashboard_sender_v2(self,username,emailUser):
        self.username = username
        self.emailUser = emailUser
        try:
            sid_list = []
            json_Data = {}
            list_arr = []
            count_rowDocument = 0
            count_rowDocument_StatusActive = 0
            count_rowDocument_StatusReject = 0
            count_rowDocument_StatusCancel = 0
            statusFile_count_approve = 0
            statusFile_count_pendding = 0
            statusFile_count_reject = 0
            statusFile_count_wait = 0
            count_rowDocument = paper_lesssender.query.filter(paper_lesssender.send_user==self.username).count()
            count_rowDocument_StatusActive = paper_lesssender.query.filter(paper_lesssender.send_user==self.username,paper_lesssender.status=='ACTIVE').count()
            count_rowDocument_StatusReject = paper_lesssender.query.filter(paper_lesssender.send_user==self.username,paper_lesssender.status=='REJECT').count()
            count_rowDocument_StatusCancel = paper_lesssender.query.filter(paper_lesssender.send_user==self.username,paper_lesssender.status=='CANCEL').count()
            json_Data['sum_Document']  = count_rowDocument
            json_Data['DocumentInfo'] = {
                'Document_Active':count_rowDocument_StatusActive,
                'Document_Reject':count_rowDocument_StatusReject,
                'Document_Cancel':count_rowDocument_StatusCancel
            }

            for i in paper_lesssender.query.filter(paper_lesssender.send_user==self.username,paper_lesssender.status=='ACTIVE').order_by(desc(paper_lesssender.send_time)).all():
                sid_list.append(i.step_data_sid)
            query_email = paper_lessdatastep.query.filter(paper_lessdatastep.sid.in_(sid_list)).all()
            for n in range(len(query_email)):
                result_DB = query_email[n]
                sid_email = result_DB.sid
                # result_DB = paper_lessdatastep.query.filter(paper_lessdatastep.sid==sid_list_email[n]).first()
                jsonData_eval = eval(result_DB.data_json)
                arr_step_info = []
                if 'step_num' in jsonData_eval:
                    step_status = ''
                    step_before = ''
                    res_status_file = 'Y'
                    arr_step_totle = []
                    json_data_info = jsonData_eval
                    if 'step_detail' in json_data_info:
                        for s in range(len(json_data_info['step_detail'])):
                            json_info_step2 = {}
                            for u in range(len(json_data_info['step_detail'][s]['activity_code'])):
                                oneMail = json_data_info['step_detail'][s]['one_email']
                                if str(oneMail).replace(' ','').lower() == self.emailUser:
                                    if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
                                        if step_before == '':
                                            try:
                                                if json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Complete':
                                                    step_before = 'Complete'
                                                elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Approve':
                                                    step_before = 'Approve'
                                                elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Reject':
                                                    step_before = 'Reject'
                                            except Exception as e:
                                                step_before = ''
                                        if step_before != 'Reject':
                                            if json_data_info['step_detail'][s]['activity_status'][u] == 'Complete':
                                                step_status = 'Complete'
                                            elif json_data_info['step_detail'][s]['activity_status'][u] == 'Approve':
                                                step_status = 'Complete'
                                            elif json_data_info['step_detail'][s]['activity_status'][u] == 'Reject':
                                                step_status = 'Reject'
                                            else:
                                                try:
                                                    step_status  = 'Incomplete'
                                                except Exception as ex:
                                                    step_status = 'Incomplete'
                                        arr_step_info.append(step_status)
                                        arr_step_info.append(step_before)
                    # print(arr_step_info,sid_list_email[n])
                    if 'Waitting' in arr_step_info:
                        res_status_file = 'W'
                        res_status_file_string = 'รออนุมัติ'
                    elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                        res_status_file = 'W'
                        res_status_file_string = 'รออนุมัติ'
                    elif 'Reject' in arr_step_info:
                        res_status_file = 'R'
                        res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                    else:
                        res_status_file_string = 'อนุมัติแล้ว'
                    if res_status_file == 'W':
                        statusFile_count_wait = statusFile_count_wait + 1
                    elif res_status_file == 'Y':
                        statusFile_count_approve = statusFile_count_approve + 1
                    elif res_status_file == 'R':
                        statusFile_count_reject = statusFile_count_reject + 1
                    else:
                        statusFile_count_pendding = statusFile_count_pendding + 1
                    result_SenderDetails = paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_email).first()
                    if result_SenderDetails !=None:
                        file_name = result_SenderDetails.file_name
                        dateTime_String = result_SenderDetails.send_time
                        trackingCode = result_SenderDetails.tracking_id
                        sender_name = result_SenderDetails.sender_name
                        sender_email = result_SenderDetails.sender_email
                    result_DetailsDocument = paper_lessdocument.query.filter(paper_lessdocument.step_id==sid_email).first()
                    if result_DetailsDocument != None:
                        documentsign_page_options = result_DetailsDocument.sign_page_options
                        if result_DetailsDocument.options_page != None:
                            documentoptions_page = [eval(result_DetailsDocument.options_page)]
                        else:
                            documentoptions_page = []
                        if result_DetailsDocument.urgent_type != None:
                            documentUrgentType = result_DetailsDocument.urgent_type
                            if documentUrgentType == 'I':
                                documentUrgentString = 'ด่วนมาก'
                            elif documentUrgentType == 'U':
                                documentUrgentString = 'ด่วน'
                            elif documentUrgentType == 'M':
                                documentUrgentString = 'ปกติ'
                        if result_DetailsDocument.documentJson != None:
                            documentJson_result = eval(result_DetailsDocument.documentJson)
                            documentName = documentJson_result['document_name']
                            documentType = documentJson_result['document_type']
                        else:
                            documentName = None
                            documentType = None
                        document_Id = result_DetailsDocument.document_id
                    # th_dateTime_1 = convert_datetime_TH_1(int(dateTime_String.timestamp()))
                    th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                    ts = int(time.time())
                    date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                    year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                    datetime_display = int(dateTime_String.timestamp())
                    date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                    yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                    time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                    old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                    if date_time_today == date_time_db:
                        date_display_show = time_show_db
                    else:
                        if year_today == yar_db:
                            date_display_show = convert_datetime_TH_2_display(datetime_display)
                        else:
                            date_display_show = old_year
                    list_arr.append({
                        'sidCode':sid_email,
                        'document_name':documentName,
                        'document_type':documentType,
                        'document_urgent':documentUrgentType,
                        'document_urgent_string':documentUrgentString,
                        'dateTime_String':str(dateTime_String).split('+')[0],
                        'dateTime_String_TH_1':th_dateTime_2,
                        'dateTime_display':date_display_show,
                        'document_id':document_Id,
                        'stamp_all':documentsign_page_options,
                        'options_page_document':documentoptions_page,
                        # 'dateTime_String_TH_2':th_dateTime_2,
                        'date_String':str(dateTime_String).split(' ')[0],
                        'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                        'status_file_code':res_status_file,
                        'status_file_string':res_status_file_string,
                        'dateTime':int(dateTime_String.timestamp()),
                        'tracking_id':trackingCode,
                        'sender_name':sender_name,
                        'sender_email':sender_email,
                        'file_name':file_name
                    })
                else:
                    step_status = ''
                    res_status_file = 'Y'
                    step_before = ''
                    step_list_before = []
                    step_list_ = []
                    step_list_next = []
                    arr_step_totle = []
                    step_me = ''
                    step_sum_status = []
                    sum_status_step_list = []
                    list_check_step = []
                    step_list_data = []
                    max_step = (len(jsonData_eval))
                    step_infomation = jsonData_eval
                    sum_status_step = []
                    for i in range(len(step_infomation)):
                        list_check_step = []
                        json_step_info_2 = {}
                        step_list_data = []
                        step_ = step_infomation[i]
                        step_num = step_infomation[i]['step_num']
                        json_step_info_2['step_status'] = ''
                        for u in range(len(step_['step_detail'])):
                            oneMail = step_['step_detail'][u]['one_email']
                            if str(oneMail).replace(' ','').lower() == self.emailUser:
                                step_me = step_infomation[i]['step_num']
                                step_me = int(step_me) - 1
                            step_2 = step_['step_detail'][u]
                            for k in range(len(step_2['activity_code'])):
                                if step_2['activity_code'][k] == 'A03':
                                    json_step_info = {}
                                    json_step_info['activity_status'] = step_2['activity_status'][k]
                                    json_step_info['one_email'] = step_2['one_email']
                                    json_step_info['step_num'] = step_num
                                    list_check_step.append(json_step_info['activity_status'])
                                    step_list_data.append(json_step_info)
                            json_step_info_2['step_info'] = step_list_data
                            if json_step_info_2['step_status'] == '':
                                if 'Reject' in list_check_step:
                                    json_step_info_2['step_status'] = 'Reject'
                                elif 'Incomplete' in list_check_step:
                                    json_step_info_2['step_status'] = 'Incomplete'
                                elif 'Pending' in list_check_step:
                                    json_step_info_2['step_status'] = 'Incomplete'
                                else:
                                    json_step_info_2['step_status'] = 'Complete'
                            sum_status_step_list.append(json_step_info_2['step_status'])
                        sum_status_step.append(json_step_info_2['step_status'])

                    index_mystep = step_me
                    for l in range(len(jsonData_eval)):
                        json_data_info = jsonData_eval[l]
                        step_sum_status = []
                        step_list_next = []
                        if 'step_detail' in json_data_info:
                            for s in range(len(json_data_info['step_detail'])):
                                json_info_step2 = {}
                                for u in range(len(json_data_info['step_detail'][s]['activity_code'])):
                                    oneMail = json_data_info['step_detail'][s]['one_email']
                                    if str(oneMail).replace(' ','').lower() == self.emailUser:
                                        if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
                                            if step_before == '':
                                                try:
                                                    if l == 0:
                                                        list_checknextstep = []
                                                        for uy in range(len(sum_status_step)):
                                                            if sum_status_step[index_mystep]:
                                                                step_me = sum_status_step[index_mystep]
                                                                index_mystep = index_mystep
                                                            if step_me == 'Reject':
                                                                step_status = 'Reject'
                                                                step_me = ''
                                                            elif step_me == 'Incomplete' or step_me == 'Pending':
                                                                step_status = 'Incomplete_1'
                                                                step_me = ''
                                                            elif step_me == 'Complete' or step_me == 'Approve':
                                                                try:
                                                                    for uu in range(index_mystep,len(sum_status_step),1):
                                                                        list_checknextstep.append(sum_status_step[uu])
                                                                    # print(list_checknextstep,'list_checknextstep')
                                                                    if 'Reject' in list_checknextstep:
                                                                        step_status = 'Reject'
                                                                        step_me = ''
                                                                    elif 'Incomplete' in list_checknextstep or 'Pending' in list_checknextstep:
                                                                        step_status = 'Incomplete'
                                                                        step_me = ''
                                                                    else:
                                                                        step_status = 'Complete'
                                                                        step_me = ''
                                                                except Exception as e:
                                                                    step_status = 'Incomplete'
                                                                    step_me = ''

                                                        # arr_step_info.append(step_me)
                                                        # arr_step_info.append(step_before)
                                                        arr_step_info.append(step_status)
                                                    else:
                                                        list_checknextstep = []
                                                        step_status = ''
                                                        # print('-------------------------------------------')
                                                        for uy in range(len(sum_status_step)):
                                                            if sum_status_step[index_mystep]:
                                                                step_me = sum_status_step[index_mystep]
                                                                index_mystep = index_mystep
                                                            # print(index_mystep)
                                                            if step_me == 'Reject':
                                                                step_status = 'Reject'
                                                                step_me = ''
                                                            elif step_me == 'Complete' and step_me == 'Approve':
                                                                try:
                                                                    list_checknextstep = []
                                                                    for uu in range(index_mystep,len(sum_status_step),1):
                                                                        list_checknextstep.append(sum_status_step[uu])
                                                                    # print(list_checknextstep,'list_checknextstep')
                                                                    if 'Reject' in list_checknextstep:
                                                                        step_status = 'Wait__'
                                                                        step_me = ''
                                                                    elif 'Incomplete' in list_checknextstep or 'Pending' in list_checknextstep:
                                                                        step_status = 'Incomplete'
                                                                        step_me = ''
                                                                    else:
                                                                        step_status = 'Complete'
                                                                        step_me = ''
                                                                except Exception as e:
                                                                    step_status = 'Incomplete'
                                                                    step_me = ''
                                                            elif step_me == 'Incomplete' or step_me == 'Pending':
                                                                list_checknextstep = []
                                                                nn = index_mystep
                                                                try:
                                                                    while(nn > 0):
                                                                        nn = nn - 1
                                                                        list_checknextstep.append(sum_status_step[nn])
                                                                    # for uu in range(index_mystep,0):
                                                                    #     print(sum_status_step[uu])

                                                                    # print(list_checknextstep,'list_checknextstep')
                                                                    if 'Reject' in list_checknextstep:
                                                                        step_status = 'Reject'
                                                                        step_me = ''
                                                                    elif 'Incomplete' in list_checknextstep or 'Pending' in list_checknextstep:
                                                                        step_status = 'Wait__'
                                                                        step_me = ''
                                                                    elif 'Complete' in list_checknextstep or 'Approve' in list_checknextstep:
                                                                        step_status = 'Incomplete_1'
                                                                        step_me = ''

                                                                    # else:
                                                                    #     step_status = 'Complete'
                                                                    #     step_me = ''
                                                                except Exception as e:
                                                                    step_status = 'Incomplete'
                                                                    step_me = ''

                                                        arr_step_info.append(step_status)
                                                except Exception as e:
                                                    step_before = ''
                                                    print(str(e))
                                    else:
                                        if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
                                                # print(sum_status_step)
                                                if step_before == '':
                                                    try:
                                                        if l == 0:
                                                            list_checknextstep = []
                                                            for uy in range(len(sum_status_step)):
                                                                step_me = sum_status_step[uy]
                                                                index_mystep = index_mystep
                                                                if step_me == 'Reject':
                                                                    step_status = 'Reject'
                                                                    step_me = ''
                                                                elif step_me == 'Incomplete' or step_me == 'Pending':
                                                                    step_status = 'Incomplete_1'
                                                                    step_me = ''
                                                                elif step_me == 'Complete' or step_me == 'Approve':
                                                                    step_status = 'Complete'
                                                                    step_me = ''
                                                                    # try:
                                                                    #     for uu in range(index_mystep,len(sum_status_step),1):
                                                                    #         list_checknextstep.append(sum_status_step[uu])
                                                                    #     # print(list_checknextstep,'list_checknextstep')
                                                                    #     if 'Reject' in list_checknextstep:
                                                                    #         step_status = 'Reject'
                                                                    #         step_me = ''
                                                                    #     elif 'Complete' in list_checknextstep or 'Approve' in list_checknextstep:
                                                                    #         step_status = 'Complete'
                                                                    #         step_me = ''
                                                                    #     elif 'Incomplete' in list_checknextstep or 'Pending' in list_checknextstep:
                                                                    #         step_status = 'Incomplete'
                                                                    #         step_me = ''

                                                                    # except Exception as e:
                                                                    #     step_status = 'Incomplete'
                                                                    #     step_me = ''
                                                            print(step_status)
                                                            # arr_step_info.append(step_me)
                                                            # arr_step_info.append(step_before)
                                                            arr_step_info.append(step_status)
                                                            print(step_status)
                                                        else:
                                                            list_checknextstep = []
                                                            step_status = ''
                                                            # print(step_status)
                                                            for uy in range(len(sum_status_step)):
                                                                step_me = sum_status_step[uy]
                                                                index_mystep = index_mystep
                                                                # print(step_me)
                                                                if step_me == 'Reject':
                                                                    step_status = 'Reject'
                                                                    step_me = ''
                                                                elif step_me == 'Complete' and step_me == 'Approve':
                                                                    try:

                                                                        list_checknextstep = []
                                                                        for uu in range(index_mystep,len(sum_status_step),1):
                                                                            list_checknextstep.append(sum_status_step[uu])
                                                                        # print(list_checknextstep,'list_checknextstep')
                                                                        if 'Reject' in list_checknextstep:
                                                                            step_status = 'Reject'
                                                                            step_me = ''
                                                                        elif 'Incomplete' in list_checknextstep or 'Pending' in list_checknextstep:
                                                                            step_status = 'Incomplete'
                                                                            step_me = ''
                                                                        else:
                                                                            step_status = 'Complete'
                                                                            step_me = ''
                                                                    except Exception as e:
                                                                        step_status = 'Incomplete'
                                                                        step_me = ''
                                                                elif step_me == 'Incomplete' or step_me == 'Pending':

                                                                    list_checknextstep = []
                                                                    nn = index_mystep
                                                                    try:
                                                                        while(nn > 0):
                                                                            nn = nn - 1
                                                                            list_checknextstep.append(sum_status_step[nn])
                                                                        # for uu in range(index_mystep,0):
                                                                        #     print(sum_status_step[uu])

                                                                        # print(list_checknextstep,'list_checknextstep')
                                                                        if 'Reject' in list_checknextstep:
                                                                            step_status = 'Reject'
                                                                            step_me = ''
                                                                        elif 'Incomplete' in list_checknextstep or 'Pending' in list_checknextstep:
                                                                            step_status = 'Wait__'
                                                                            step_me = ''
                                                                        elif 'Complete' in list_checknextstep or 'Approve' in list_checknextstep:
                                                                            step_status = 'Incomplete_1'
                                                                            step_me = ''

                                                                        # else:
                                                                        #     step_status = 'Complete'
                                                                        #     step_me = ''
                                                                    except Exception as e:
                                                                        step_status = 'Incomplete'
                                                                        step_me = ''
                                                                print(step_status)
                                                                arr_step_info.append(step_status)
                                                    except Exception as e:
                                                        exc_type, exc_obj, exc_tb = sys.exc_info()
                                                        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                                                        print(exc_type, fname, exc_tb.tb_lineno)
                                                        step_before = ''
                                                        arr_step_info.append(step_before)
                                                        print(str(e))

                    # print(arr_step_info , sid_list_email[n])

                    if 'Reject' in arr_step_info:
                        res_status_file = 'R'
                        res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                    elif 'Incomplete_1' in arr_step_info or 'Pending_1' in arr_step_info:
                        res_status_file = 'W'
                        res_status_file_string = 'รออนุมัติ'
                    elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                        res_status_file = 'N'
                        res_status_file_string = 'กำลังดำเนินการ'
                    elif 'Wait__' in arr_step_info:
                        res_status_file = 'Z'
                        res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                    elif 'Waitting' in arr_step_info:
                        res_status_file = 'W'
                        res_status_file_string = 'รออนุมัติ'
                    else:
                        res_status_file_string = 'อนุมัติแล้ว'
                    if res_status_file == 'W':
                        statusFile_count_wait = statusFile_count_wait + 1
                    elif res_status_file == 'Y':
                        statusFile_count_approve = statusFile_count_approve + 1
                    elif res_status_file == 'R':
                        statusFile_count_reject = statusFile_count_reject + 1
                    else:
                        statusFile_count_pendding = statusFile_count_pendding + 1
                    result_SenderDetails = paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_email).first()
                    if result_SenderDetails !=None:
                        file_name = result_SenderDetails.file_name
                        dateTime_String = result_SenderDetails.send_time
                        trackingCode = result_SenderDetails.tracking_id
                        sender_name = result_SenderDetails.sender_name
                        sender_email = result_SenderDetails.sender_email
                    result_DetailsDocument = paper_lessdocument.query.filter(paper_lessdocument.step_id==sid_email).first()
                    if result_DetailsDocument != None:
                        documentsign_page_options = result_DetailsDocument.sign_page_options
                        if result_DetailsDocument.options_page != None:
                            documentoptions_page = [eval(result_DetailsDocument.options_page)]
                        else:
                            documentoptions_page = []
                        if result_DetailsDocument.urgent_type != None:
                            documentUrgentType = result_DetailsDocument.urgent_type
                            if documentUrgentType == 'I':
                                documentUrgentString = 'ด่วนมาก'
                            elif documentUrgentType == 'U':
                                documentUrgentString = 'ด่วน'
                            elif documentUrgentType == 'M':
                                documentUrgentString = 'ปกติ'
                        if result_DetailsDocument.documentJson != None:
                            documentJson_result = eval(result_DetailsDocument.documentJson)
                            documentName = documentJson_result['document_name']
                            documentType = documentJson_result['document_type']
                        else:
                            documentName = None
                            documentType = None
                        document_Id = result_DetailsDocument.document_id
                    # th_dateTime_1 = convert_datetime_TH_1(int(dateTime_String.timestamp()))
                    th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                    ts = int(time.time())
                    date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                    year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                    datetime_display = int(dateTime_String.timestamp())
                    date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                    yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                    time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                    old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                    if date_time_today == date_time_db:
                        date_display_show = time_show_db
                    else:
                        if year_today == yar_db:
                            date_display_show = convert_datetime_TH_2_display(datetime_display)
                        else:
                            date_display_show = old_year
                    list_arr.append({
                        'sidCode':sid_email,
                        'document_name':documentName,
                        'document_type':documentType,
                        'document_urgent':documentUrgentType,
                        'document_urgent_string':documentUrgentString,
                        'dateTime_String':str(dateTime_String).split('+')[0],
                        'dateTime_String_TH_1':th_dateTime_2,
                        'dateTime_display':date_display_show,
                        'document_id':document_Id,
                        'stamp_all':documentsign_page_options,
                        'options_page_document':documentoptions_page,
                        # 'dateTime_String_TH_2':th_dateTime_2,
                        'date_String':str(dateTime_String).split(' ')[0],
                        'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                        'status_file_code':res_status_file,
                        'status_file_string':res_status_file_string,
                        'dateTime':int(dateTime_String.timestamp()),
                        'tracking_id':trackingCode,
                        'sender_name':sender_name,
                        'sender_email':sender_email,
                        'file_name':file_name
                    })

            # for n in range(len(result_DB_tmp)):
            #     result_DB = result_DB_tmp[n]
            #     jsonData_eval = eval(result_DB.data_json)
            #     arr_step_info = []
            #     if 'step_num' in jsonData_eval:
            #         step_status = ''
            #         res_status_file = 'Y'
            #         step_before = ''
            #         arr_step_totle = []
            #         json_data_info = jsonData_eval
            #         if 'step_detail' in json_data_info:
            #             for s in range(len(json_data_info['step_detail'])):
            #                 json_info_step2 = {}
            #                 for u in range(len(json_data_info['step_detail'][s]['activity_code'])):
            #                     if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
            #                         if step_before == '':
            #                             try:
            #                                 if json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Complete':
            #                                     step_before = 'Complete'
            #                                 elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Approve':
            #                                     step_before = 'Approve'
            #                                 elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Reject':
            #                                     step_before = 'Reject'
            #                             except Exception as e:
            #                                 step_before = ''
            #                         if step_before == '':
            #                             if json_data_info['step_detail'][s]['activity_status'][u] == 'Complete':
            #                                 step_status = 'Complete'
            #                             elif json_data_info['step_detail'][s]['activity_status'][u] == 'Approve':
            #                                 step_status = 'Complete'
            #                             elif json_data_info['step_detail'][s]['activity_status'][u] == 'Reject':
            #                                 step_status = 'Reject'
            #                             else:
            #                                 try:
            #                                     step_status  = 'Incomplete'
            #                                 except Exception as ex:
            #                                     step_status = 'Incomplete'
            #                         arr_step_info.append(step_status)
            #                         arr_step_info.append(step_before)
            #         print(arr_step_info)
            #         if 'Waitting' in arr_step_info:
            #             res_status_file = 'W'
            #             res_status_file_string = 'รออนุมัติ'
            #         elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
            #             res_status_file = 'N'
            #             res_status_file_string = 'กำลังดำเนินการ'
            #         elif 'Reject' in arr_step_info:
            #             res_status_file = 'R'
            #             res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
            #         else:
            #             res_status_file_string = 'อนุมัติแล้ว'
            #         if res_status_file == 'Y':
            #             statusFile_count_approve = statusFile_count_approve + 1
            #         elif res_status_file == 'R':
            #             statusFile_count_reject = statusFile_count_reject + 1
            #         else:
            #             statusFile_count_pendding = statusFile_count_pendding + 1
            #         result_SenderDetails = paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_list[n]).first()
            #         if result_SenderDetails !=None:
            #             file_name = result_SenderDetails.file_name
            #             dateTime_String = result_SenderDetails.send_time
            #             trackingCode = result_SenderDetails.tracking_id
            #             sender_name = result_SenderDetails.sender_name
            #             sender_email = result_SenderDetails.sender_email
            #         result_DetailsDocument = paper_lessdocument.query.filter(paper_lessdocument.step_id==sid_list[n]).first()
            #         if result_DetailsDocument != None:
            #             if result_DetailsDocument.options_page != None:
            #                 documentoptions_page = [eval(result_DetailsDocument.options_page)]
            #             else:
            #                 documentoptions_page = []
            #             if result_DetailsDocument.documentJson != None:
            #                 documentJson_result = eval(result_DetailsDocument.documentJson)
            #                 documentName = documentJson_result['document_name']
            #                 documentType = documentJson_result['document_type']
            #             else:
            #                 documentName = None
            #                 documentType = None
            #             document_Id = result_DetailsDocument.document_id
            #         # th_dateTime_1 = convert_datetime_TH_1(int(dateTime_String.timestamp()))
            #         th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
            #         ts = int(time.time())
            #         date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
            #         year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
            #         datetime_display = int(dateTime_String.timestamp())
            #         date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
            #         yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
            #         time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
            #         old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
            #         if date_time_today == date_time_db:
            #             date_display_show = time_show_db
            #         else:
            #             if year_today == yar_db:
            #                 date_display_show = convert_datetime_TH_2_display(datetime_display)
            #             else:
            #                 date_display_show = old_year
            #         list_arr.append({
            #             'sidCode':sid_list[n],
            #             'document_name':documentName,
            #             'document_type':documentType,
            #             'dateTime_String':str(dateTime_String).split('+')[0],
            #             'dateTime_String_TH_1':th_dateTime_2,
            #             'dateTime_display':date_display_show,
            #             'document_id':document_Id,
            #             'date_String':str(dateTime_String).split(' ')[0],
            #             'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
            #             'status_file_code':res_status_file,
            #             'status_file_string':res_status_file_string,
            #             'dateTime':int(dateTime_String.timestamp()),
            #             'tracking_id':trackingCode,
            #             'sender_name':sender_name,
            #             'sender_email':sender_email,
            #             'file_name':file_name,
            #             'options_page_document':documentoptions_page
            #         })
            #     else:
            #         step_status = ''
            #         res_status_file = 'Y'
            #         step_before = ''
            #         step_list_before = []
            #         step_list_ = []
            #         step_list_next = []
            #         arr_step_totle = []
            #         step_me = ''
            #         step_sum_status = []
            #         sum_status_step_list = []
            #         list_check_step = []
            #         step_list_data = []
            #         max_step = (len(jsonData_eval))
            #         step_infomation = jsonData_eval
            #         sum_status_step = []
            #         for i in range(len(step_infomation)):
            #             list_check_step = []
            #             json_step_info_2 = {}
            #             step_list_data = []
            #             step_ = step_infomation[i]
            #             step_num = step_infomation[i]['step_num']
            #             json_step_info_2['step_status'] = ''
            #             for u in range(len(step_['step_detail'])):
            #                 step_2 = step_['step_detail'][u]
            #                 for k in range(len(step_2['activity_code'])):
            #                     if step_2['activity_code'][k] == 'A03':
            #                         json_step_info = {}
            #                         json_step_info['activity_status'] = step_2['activity_status'][k]
            #                         json_step_info['one_email'] = step_2['one_email']
            #                         json_step_info['step_num'] = step_num
            #                         list_check_step.append(json_step_info['activity_status'])
            #                         step_list_data.append(json_step_info)
            #                 json_step_info_2['step_info'] = step_list_data
            #                 if json_step_info_2['step_status'] == '':
            #                     if 'Reject' in list_check_step:
            #                         json_step_info_2['step_status'] = 'Reject'
            #                     elif 'Incomplete' in list_check_step:
            #                         json_step_info_2['step_status'] = 'Incomplete'
            #                     elif 'Pending' in list_check_step:
            #                         json_step_info_2['step_status'] = 'Incomplete'
            #                     else:
            #                         json_step_info_2['step_status'] = 'Complete'
            #                 sum_status_step_list.append(json_step_info_2['step_status'])
            #             sum_status_step.append(json_step_info_2['step_status'])
            #             if 'Reject' in sum_status_step:
            #                 step_status = 'Reject'
            #                 step_me = ''
            #             elif 'Incomplete' in sum_status_step or 'Pending' in sum_status_step:
            #                 step_status = 'Incomplete'
            #                 step_me = ''
            #             else:
            #                 step_status = 'Complete'
            #                 step_me = ''

            #             arr_step_info.append(step_status)

            #         if 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
            #             res_status_file = 'N'
            #             res_status_file_string = 'กำลังดำเนินการ'
            #         elif 'Reject' in arr_step_info:
            #             res_status_file = 'R'
            #             res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
            #         else:
            #             res_status_file_string = 'อนุมัติแล้ว'
            #         if res_status_file == 'Y':
            #             statusFile_count_approve = statusFile_count_approve + 1
            #         elif res_status_file == 'R':
            #             statusFile_count_reject = statusFile_count_reject + 1
            #         else:
            #             statusFile_count_pendding = statusFile_count_pendding + 1
            #         result_SenderDetails = paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_list[n]).first()
            #         if result_SenderDetails !=None:
            #             file_name = result_SenderDetails.file_name
            #             dateTime_String = result_SenderDetails.send_time
            #             trackingCode = result_SenderDetails.tracking_id
            #             sender_name = result_SenderDetails.sender_name
            #             sender_email = result_SenderDetails.sender_email
            #         result_DetailsDocument = paper_lessdocument.query.filter(paper_lessdocument.step_id==sid_list[n]).first()
            #         if result_DetailsDocument != None:
            #             if result_DetailsDocument.options_page != None:
            #                 documentoptions_page = [eval(result_DetailsDocument.options_page)]
            #             else:
            #                 documentoptions_page = []
            #             if result_DetailsDocument.documentJson != None:
            #                 documentJson_result = eval(result_DetailsDocument.documentJson)
            #                 documentName = documentJson_result['document_name']
            #                 documentType = documentJson_result['document_type']
            #             else:
            #                 documentName = None
            #                 documentType = None
            #             document_Id = result_DetailsDocument.document_id
            #         # th_dateTime_1 = convert_datetime_TH_1(int(dateTime_String.timestamp()))
            #         th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
            #         ts = int(time.time())
            #         date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
            #         year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
            #         datetime_display = int(dateTime_String.timestamp())
            #         date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
            #         yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
            #         time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
            #         old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
            #         if date_time_today == date_time_db:
            #             date_display_show = time_show_db
            #         else:
            #             if year_today == yar_db:
            #                 date_display_show = convert_datetime_TH_2_display(datetime_display)
            #             else:
            #                 date_display_show = old_year
            #         list_arr.append({
            #             'sidCode':sid_list[n],
            #             'document_name':documentName,
            #             'document_type':documentType,
            #             'dateTime_String':str(dateTime_String).split('+')[0],
            #             'dateTime_String_TH_1':th_dateTime_2,
            #             'dateTime_display':date_display_show,
            #             'document_id':document_Id,
            #             'date_String':str(dateTime_String).split(' ')[0],
            #             'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
            #             'status_file_code':res_status_file,
            #             'status_file_string':res_status_file_string,
            #             'dateTime':int(dateTime_String.timestamp()),
            #             'tracking_id':trackingCode,
            #             'sender_name':sender_name,
            #             'sender_email':sender_email,
            #             'file_name':file_name,
            #             'options_page_document':documentoptions_page
            #         })

            json_Data['Document_Status_Details']  = {
                'Incomplete_Pendding':statusFile_count_pendding,
                'Complete_Approve':statusFile_count_approve,
                'Reject':statusFile_count_reject,
                'Wait':statusFile_count_wait
            }
            list_arr = sorted(list_arr, key=lambda k: k['dateTime'], reverse=True)
            json_Data['Document_Details'] = list_arr
            return {'result':'OK','messageText':json_Data,'status_Code':200,'messageER':None}
        except Exception as ex:
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}


    def select_documentTemplateDetailsAndDocumentType_v1(self,username,documentType):
        self.username = username
        self.documentType = documentType
        arr_data = []
        try:
            resultSelect = paper_lessdocument_detail.query.filter(paper_lessdocument_detail.documentUser==self.username,paper_lessdocument_detail.documentStatus=='ACTIVE',paper_lessdocument_detail.documentType==self.documentType,paper_lessdocument_detail.service_permission=='paperless').first()
            if resultSelect != None:
                null = None
                jsondata = {}
                jsondata['documentJson'] = eval(resultSelect.documentJson)
                jsondata['documentUser'] = resultSelect.documentUser
                jsondata['documentUpdate'] = resultSelect.documentUpdate
                jsondata['documentUpdate_string'] = str(resultSelect.documentUpdate)
                jsondata['email'] = resultSelect.email
                jsondata['documentType'] = resultSelect.documentType
                jsondata['documentCode'] = resultSelect.documentCode
                jsondata['status'] = resultSelect.documentStatus
                arr_data.append(jsondata)
                return {'result':'OK','messageText':arr_data}
            else:
                return {'result':'ER','messageText':'not found'}
        except Exception as ex:
            print(str(ex))
            return {'result':'ER','messageText':None,'messageER':str(ex)}
        finally:
            db.session.close()

    #new
    def select_documentTemplateDetails_v5_tax(self,taxid):
        self.taxid = taxid
        arr_data = []
        search_tax = "%{}%".format(self.taxid)
        try:
            # query_tmp = paper_lessdocument_detail.query.filter(paper_lessdocument_detail.biz_info.contains(self.taxid),paper_lessdocument_detail.documentStatus=='ACTIVE').all()
            with slave.connect() as connection:
                result_ref = connection.execute(text('SELECT "documentJson", "documentUser","documentUpdate","documentStatus","email","documentType","documentCode","biz_info","service_permission","other_service_permission","chat_bot" \
                    FROM "tb_document_detail" WHERE "tb_document_detail"."documentStatus"=:status AND "tb_document_detail"."biz_info" LIKE :taxid'),status='ACTIVE',taxid=search_tax)
                connection.close()
            tmp_query = [dict(row) for row in result_ref]
            print(len(tmp_query))
            for u in range(len(tmp_query)):
                tmp_json = tmp_query[u]
                # del tmp_json['_sa_instance_state']
                try:
                    tmp_business_json = eval(tmp_json['biz_info'])
                except Exception as e:
                    tmp_business_json = None
                if tmp_json['other_service_permission'] != None:
                    tmp_service_other = eval(tmp_json['other_service_permission'])
                else:
                    tmp_service_other = None
                if tmp_json['chat_bot'] != None:
                    tmp_chatbot = eval(tmp_json['chat_bot'])
                else:
                    tmp_chatbot = None
                jsondata = {
                    'documentJson':eval(tmp_json['documentJson']),
                    'documentUser':tmp_json['documentUser'],
                    'documentUpdate':tmp_json['documentUpdate'],
                    'documentUpdate_string':str(tmp_json['documentUpdate']),
                    'email':tmp_json['email'],
                    'documentType':tmp_json['documentType'],
                    'documentCode':tmp_json['documentCode'],
                    'status':tmp_json['documentStatus'],
                    'business_json':tmp_business_json,
                    'business_string':str(tmp_json['biz_info']),
                    'create_service':str(tmp_json['service_permission']),
                    'service_other':(tmp_service_other),
                    'chat_bot':tmp_chatbot
                }
                arr_data.append(jsondata)
            if len(arr_data) != 0:
                # print (arr_data)
                return {'result':'OK','messageText':arr_data}
            else:
                return {'result':'ER','messageText':'ไม่พบข้อมูล'}
        except Exception as ex:
            print(str(ex))
            return {'result':'ER','messageText':'can"t update','messageER':str(ex)}
        finally:
            db.session.close()            
    #old
    # def select_documentTemplateDetails_v5_tax(self,taxid):
    #     self.taxid = taxid
    #     arr_data = []
    #     query_tmp = paper_lessdocument_detail.query.filter(paper_lessdocument_detail.biz_info.contains(self.taxid),paper_lessdocument_detail.documentStatus=='ACTIVE').all()
    #     for u in range(len(query_tmp)):
    #         tmp_json = query_tmp[u].__dict__
    #         del tmp_json['_sa_instance_state']
    #         try:
    #             tmp_business_json = eval(tmp_json['biz_info'])
    #         except Exception as e:
    #             tmp_business_json = None
    #         if tmp_json['other_service_permission'] != None:
    #             tmp_service_other = eval(tmp_json['other_service_permission'])
    #         else:
    #             tmp_service_other = None
    #         if tmp_json['chat_bot'] != None:
    #             tmp_chatbot = eval(tmp_json['chat_bot'])
    #         else:
    #             tmp_chatbot = None
    #         jsondata = {
    #             'documentJson':eval(tmp_json['documentJson']),
    #             'documentUser':tmp_json['documentUser'],
    #             'documentUpdate':tmp_json['documentUpdate'],
    #             'documentUpdate_string':str(tmp_json['documentUpdate']),
    #             'email':tmp_json['email'],
    #             'documentType':tmp_json['documentType'],
    #             'documentCode':tmp_json['documentCode'],
    #             'status':tmp_json['documentStatus'],
    #             'business_json':tmp_business_json,
    #             'business_string':str(tmp_json['biz_info']),
    #             'create_service':str(tmp_json['service_permission']),
    #             'service_other':(tmp_service_other),
    #             'chat_bot':tmp_chatbot
    #         }
    #         arr_data.append(jsondata)
    #     if len(arr_data) != 0:
    #         return {'result':'OK','messageText':arr_data}
    #     else:
    #         return {'result':'ER','messageText':'ไม่พบข้อมูล'}

    def select_documentTemplateDetails_v2_tax(self,taxid):
        self.taxid = taxid
        arr_data = []
        for i in paper_lessdocument_detail.query.filter(paper_lessdocument_detail.documentStatus=='ACTIVE',paper_lessdocument_detail.service_permission=='paperless').all():
            if i.biz_info != None:
                if str(i.biz_info).replace(' ','') != '':
                    busz_info = eval(i.biz_info)
                    id_bus = busz_info['id_card_num']
                    if id_bus == self.taxid:
                        jsondata = {}
                        jsondata['documentJson'] = eval(i.documentJson)
                        jsondata['documentUser'] = i.documentUser
                        jsondata['documentUpdate'] = i.documentUpdate
                        jsondata['documentUpdate_string'] = str(i.documentUpdate)
                        jsondata['email'] = i.email
                        jsondata['documentType'] = i.documentType
                        jsondata['documentCode'] = i.documentCode
                        jsondata['status'] = i.documentStatus
                        null = None
                        try:
                            jsondata['business_json'] = eval(i.biz_info)
                        except Exception as e:
                            jsondata['business_json'] = None
                        jsondata['business_string'] = (i.biz_info)
                        arr_data.append(jsondata)
        if len(arr_data) != 0:
            return {'result':'OK','messageText':arr_data}
        else:
            return {'result':'ER','messageText':'ไม่พบข้อมูล'}

    def select_documentTemplateDetails_v1(self,username):
        self.username = username
        arr_data = []
        for i in paper_lessdocument_detail.query.filter(paper_lessdocument_detail.documentUser==self.username,paper_lessdocument_detail.documentStatus=='ACTIVE',paper_lessdocument_detail.service_permission=='paperless').filter(or_(paper_lessdocument_detail.biz_info=='',paper_lessdocument_detail.biz_info==None)).all():
            jsondata = {}
            jsondata['documentJson'] = eval(i.documentJson)
            jsondata['documentUser'] = i.documentUser
            jsondata['documentUpdate'] = i.documentUpdate
            jsondata['documentUpdate_string'] = str(i.documentUpdate)
            jsondata['email'] = i.email
            jsondata['documentType'] = i.documentType
            jsondata['documentCode'] = i.documentCode
            jsondata['status'] = i.documentStatus
            if i.biz_info != None:
                if str(i.biz_info).replace(' ','') != '':
                    jsondata['business_json'] = eval(i.biz_info)
                    jsondata['business_string'] = (i.biz_info)
                else:
                    jsondata['business_json'] = None
                    jsondata['business_string'] = None
            else:
                jsondata['business_json'] = None
                jsondata['business_string'] = None
            arr_data.append(jsondata)
        return {'result':'OK','messageText':arr_data}

    def select_documentTemplateDetails_v5(self,username):
        self.username = username
        arr_data = []
        try:
            query_tmp = paper_lessdocument_detail.query.filter(paper_lessdocument_detail.documentUser==self.username,paper_lessdocument_detail.biz_info=='',paper_lessdocument_detail.documentStatus=='ACTIVE').all()
            for u in range(len(query_tmp)):
                tmp_json = query_tmp[u].__dict__
                del tmp_json['_sa_instance_state']
                try:
                    tmp_business_json = eval(tmp_json['biz_info'])
                except Exception as e:
                    tmp_business_json = None
                if tmp_json['other_service_permission'] != None:
                    tmp_service_other = eval(tmp_json['other_service_permission'])
                else:
                    tmp_service_other = None
                if tmp_json['chat_bot'] != None:
                    tmp_chatbot = eval(tmp_json['chat_bot'])
                else:
                    tmp_chatbot = None
                jsondata = {
                    'documentJson':eval(tmp_json['documentJson']),
                    'documentUser':tmp_json['documentUser'],
                    'documentUpdate':tmp_json['documentUpdate'],
                    'documentUpdate_string':str(tmp_json['documentUpdate']),
                    'email':tmp_json['email'],
                    'documentType':tmp_json['documentType'],
                    'documentCode':tmp_json['documentCode'],
                    'status':tmp_json['documentStatus'],
                    'business_json':tmp_business_json,
                    'business_string':str(tmp_json['biz_info']),
                    'create_service':str(tmp_json['service_permission']),
                    'service_other':(tmp_service_other),
                    'chat_bot':tmp_chatbot
                }
                arr_data.append(jsondata)
            if len(arr_data) != 0:
                return {'result':'OK','messageText':arr_data}
            else:
                return {'result':'ER','messageText':'ไม่พบข้อมูล'}
        except Exception as ex:
            print(str(ex))
            return {'result':'ER','messageText':'can"t update','messageER':str(ex)}
        finally:
            db.session.close()

    def select_documentTemplateDetails_list_service_v1_tax(self,taxid,service):
        self.taxid = taxid
        self.service = service
        arr_data = []
        for i in paper_lessdocument_detail.query.filter(paper_lessdocument_detail.documentStatus=='ACTIVE',paper_lessdocument_detail.service_permission==self.service).all():
            if i.biz_info != None:
                if str(i.biz_info).replace(' ','') != '':
                    busz_info = eval(i.biz_info)
                    id_bus = busz_info['id_card_num']
                    if id_bus == self.taxid:
                        jsondata = {}
                        jsondata['documentJson'] = eval(i.documentJson)
                        jsondata['documentUser'] = i.documentUser
                        jsondata['documentUpdate'] = i.documentUpdate
                        jsondata['documentUpdate_string'] = str(i.documentUpdate)
                        jsondata['email'] = i.email
                        jsondata['documentType'] = i.documentType
                        jsondata['documentCode'] = i.documentCode
                        jsondata['status'] = i.documentStatus
                        jsondata['business_json'] = eval(i.biz_info)
                        jsondata['business_string'] = (i.biz_info)
                        arr_data.append(jsondata)
        if len(arr_data) != 0:
            return {'result':'OK','messageText':arr_data}
        else:
            return {'result':'ER','messageText':'ไม่พบข้อมูล'}

    def select_documentTemplateDetails_list_service_v1(self,username,service):
        self.username = username
        self.service = service
        arr_data = []
        try:
            for i in paper_lessdocument_detail.query.filter(paper_lessdocument_detail.documentUser==self.username,paper_lessdocument_detail.documentStatus=='ACTIVE',paper_lessdocument_detail.service_permission==self.service).all():
                jsondata = {}
                jsondata['documentJson'] = eval(i.documentJson)
                jsondata['documentUser'] = i.documentUser
                jsondata['documentUpdate'] = i.documentUpdate
                jsondata['documentUpdate_string'] = str(i.documentUpdate)
                jsondata['email'] = i.email
                jsondata['documentType'] = i.documentType
                jsondata['documentCode'] = i.documentCode
                jsondata['status'] = i.documentStatus
                if i.biz_info != None:
                    if str(i.biz_info).replace(' ','') != '':
                        jsondata['business_json'] = eval(i.biz_info)
                        jsondata['business_string'] = (i.biz_info)
                    else:
                        jsondata['business_json'] = None
                        jsondata['business_string'] = None
                else:
                    jsondata['business_json'] = None
                    jsondata['business_string'] = None
                arr_data.append(jsondata)
            return {'result':'OK','messageText':arr_data}
        except Exception as ex:
            print(str(ex))
            return {'result':'ER','messageText':None,'messageER':str(ex)}
        finally:
            db.session.close()

    def select_documentTemplateDetails_v1_status(self,username):
        self.username = username
        arr_data = []
        try:
            for i in paper_lessdocument_detail.query.filter(paper_lessdocument_detail.documentUser==self.username,paper_lessdocument_detail.documentStatus=='REJECT').all():
                jsondata = {}
                jsondata['documentJson'] = eval(i.documentJson)
                jsondata['documentUser'] = i.documentUser
                jsondata['documentUpdate'] = i.documentUpdate
                jsondata['documentUpdate_string'] = str(i.documentUpdate)
                jsondata['email'] = i.email
                jsondata['documentType'] = i.documentType
                jsondata['documentCode'] = i.documentCode
                jsondata['status'] = i.documentStatus
                arr_data.append(jsondata)
            return {'result':'OK','messageText':arr_data}
        except Exception as ex:
            print(str(ex))
            return {'result':'ER','messageText':None,'messageER':str(ex)}
        finally:
            db.session.close()

    def select_forqrCodeSign_public_v1(self,sidCode):
        self.sidCode = sidCode
        json_Data = {}
        result_Select = paper_lessdatastep.query.filter(paper_lessdatastep.sid==self.sidCode).first()
        try:
            json_Data['data_json'] = eval(result_Select.data_json)
        except Exception as ex:
            return {'result':'ER','messageText':'not found dataJson'}
        json_Data['sign_Position'] = result_Select.qrCode_position
        sign_Position = json_Data['sign_Position']
        if 'step_num' in json_Data['data_json']:
            for i in range(len(json_Data['data_json']['step_detail'])):
                emailUser = json_Data['data_json']['step_detail'][i]['one_email']
                return {'result':'OK','emailUser':emailUser,'sign_Position':sign_Position}
                print(json_Data['data_json']['step_detail'][i])

    def select_forqrpdfView_v1(self,trackingId):
        self.trackingId = trackingId
        result_Select = paper_lesstrack.query.filter(paper_lesstrack.tracking==self.trackingId).first()
        if result_Select != None:
            file_id = result_Select.file_id
            if file_id != None:
                resultbase64Pdf = paper_lesspdf.query.filter(paper_lesspdf.fid==file_id).first()
                if resultbase64Pdf != None:
                    if resultbase64Pdf.string_sign != None:
                        return {'result':'OK','messageText':(resultbase64Pdf.string_sign),'sidCode':result_Select.step_data_sid}
                    else:
                        return {'result':'OK','messageText':(resultbase64Pdf.string_pdf),'sidCode':result_Select.step_data_sid}
                else:
                    return {'result':'ER','messageText':'not found'}
            else:
                return {'result':'ER','messageText':'not found'}
        else:
            return {'result':'ER','messageText':'not found'}

    def select_forqrCodeBase64(self,sidCode):
        self.sidCode = sidCode
        result_Select = paper_lessdatastep.query.filter(paper_lessdatastep.sid==self.sidCode).first()
        if result_Select != None:
            if result_Select.qrCode_position != None:
                if result_Select.qrCode_position != '':
                    resultTracking = paper_lesstrack.query.filter(paper_lesstrack.step_data_sid==self.sidCode).first()
                    if resultTracking != None:
                        FileId = resultTracking.file_id
                        trackingId = resultTracking.tracking
                        qrCode_position = eval(result_Select.qrCode_position)
                        if FileId != None:
                            resultbase64Pdf = paper_lesspdf.query.filter(paper_lesspdf.fid==FileId).first()
                            if resultbase64Pdf != None:
                                if resultbase64Pdf.string_sign != None:
                                    return {'result':'OK','messageText':{'qrCode_position':qrCode_position,'fild_id':FileId,'TrackingId':trackingId,'base64PDF':resultbase64Pdf.string_sign}}
                                else:
                                    return {'result':'OK','messageText':{'qrCode_position':qrCode_position,'fild_id':FileId,'TrackingId':trackingId,'base64PDF':resultbase64Pdf.string_pdf}}
                            else:
                                return {'result':'ER','messageText':'not found'}
                    else:
                        return {'result':'ER','messageText':'not found trackingnumber'}
                else:
                    return {'result':'ER','messageText':'not found qrcode position'}
            else:
                return {'result':'ER','messageText':'not found qrcode position'}
        else:
            return {'result':'ER','messageText':'not found data'}

    def select_statusView_v1(self,username,emailUser):
        self.username = username
        self.emailUser = emailUser

        list_SidCode = []
        list_status = []
        dataJson = {}
        list_result_sender = []
        result_json = {}
        result_sidCodeRecp = []
        arr_recp_list = []
        list_result_recep = []
        for k in paper_lesssender.query.filter(paper_lesssender.send_user==self.username,paper_lesssender.status=='ACTIVE').order_by((paper_lesssender.send_time).desc()).all():
            list_SidCode.append(k.step_data_sid)
        for i in list_SidCode:
            resultViewDetails = paper_lessdatastep.query.filter(paper_lessdatastep.sid==i).first()
            viewarr = eval(resultViewDetails.view_details)
            if self.emailUser in viewarr:
                dataJson = {}
                dataJson['sidCode'] =i
                dataJson['status_view'] = True
                list_result_sender.append(dataJson)
            else:
                dataJson = {}
                dataJson['sidCode'] = i
                dataJson['status_view'] = False
                list_result_sender.append(dataJson)
        try:
            for y in paper_lessdatastep.query.filter().order_by((paper_lessdatastep.update_time).desc()).all():
                json_recp = {}
                json_recp['dataJson'] = eval(y.data_json)
                json_recp['sidCode'] = y.sid
                arr_recp_list.append(json_recp)

            for o in range(len(arr_recp_list)):
                sidCode = arr_recp_list[o]['sidCode']
                datajsonEval = eval(str(arr_recp_list[o]['dataJson']))
                if 'step_num' in datajsonEval:
                    if 'step_detail' in datajsonEval:
                        for yy in range(len(datajsonEval['step_detail'])):
                            if 'one_email' in datajsonEval['step_detail'][yy]:
                                if self.emailUser == datajsonEval['step_detail'][yy]['one_email']:
                                    result_sidCodeRecp.append(sidCode)
                else:
                    for ii in range(len(datajsonEval)):
                        if 'step_detail' in datajsonEval[ii]:
                            for yy in range(len(datajsonEval[ii]['step_detail'])):
                                if 'one_email' in datajsonEval[ii]['step_detail'][yy]:
                                    print(datajsonEval[ii]['step_detail'][yy]['one_email'])
                                    if self.emailUser == datajsonEval[ii]['step_detail'][yy]['one_email']:
                                        result_sidCodeRecp.append(sidCode)
            for i in result_sidCodeRecp:
                resultViewDetails = paper_lessdatastep.query.filter(paper_lessdatastep.sid==i).first()
                viewarr = eval(resultViewDetails.view_details)
                if self.emailUser in viewarr:
                    dataJson = {}
                    dataJson['sidCode'] =i
                    dataJson['status_view'] = True
                    list_result_recep.append(dataJson)
                else:
                    dataJson = {}
                    dataJson['sidCode'] = i
                    dataJson['status_view'] = False
                    list_result_recep.append(dataJson)
            print(result_sidCodeRecp)
        except Exception as ex:
            print(ex)
            return {'result':'ER','messageText':str(ex)}

        result_json['senderInfo'] = list_result_sender
        result_json['recipientInfo'] = list_result_recep
        return {'result':'OK','messageText':result_json}
        return result_json

    def select_pdfdownload_v1(self,sidCode,key):
        self.sidCode = sidCode
        self.key = key
        resultSelectLoad = paper_lesstransactionLoad.query.filter(paper_lesstransactionLoad.sidCode==self.sidCode,paper_lesstransactionLoad.key_gen==self.key).first()
        if resultSelectLoad != None:
            resultSelect = paper_lessdocument.query.filter(paper_lessdocument.step_id==self.sidCode).first()
            resultPdf = paper_lesspdf.query.filter(paper_lesspdf.fid==resultSelect.fileid).first()
            if resultPdf != None:
                if resultPdf.string_sign != None:
                    return  {'result': 'OK', 'messageText': (resultPdf.string_sign)}
                else:
                    return  {'result': 'OK', 'messageText': (resultPdf.string_pdf)}
            return {'result': 'ER', 'messageText': 'not found data'}
        else:
            return {'result': 'ER', 'messageText': 'not found data'}

    def select_pdfdownloadqr_v1(self,sidCode,key):
        self.sidCode = sidCode
        self.key = key
        resultSelectLoad = paper_lesstransactionLoadQr.query.filter(paper_lesstransactionLoadQr.sidCode==self.sidCode,paper_lesstransactionLoadQr.key_gen==self.key).first()
        if resultSelectLoad != None:
            resultSelect = paper_lessdocument.query.filter(paper_lessdocument.step_id==self.sidCode).first()
            resultPdf = paper_lesspdf.query.filter(paper_lesspdf.fid==resultSelect.fileid).first()
            if resultPdf != None:
                if resultPdf.string_sign != None:
                    return  {'result': 'OK', 'messageText': (resultPdf.string_sign)}
                else:
                    return  {'result': 'OK', 'messageText': (resultPdf.string_pdf)}
            return {'result': 'ER', 'messageText': 'not found data'}
        else:
            return {'result': 'ER', 'messageText': 'not found data'}

    def select_pdfFordownload_v1(self,sidCode):
        self.sidCode = sidCode
        resultSelect = paper_lessdocument.query.filter(paper_lessdocument.step_id==self.sidCode).first()
        resultPdf = paper_lesspdf.query.filter(paper_lesspdf.fid==resultSelect.fileid).first()
        if resultPdf != None:
            if resultPdf.string_sign != None:
                return (resultPdf.string_sign)
            else:
                return (resultPdf.string_pdf)
        return {'result': 'ER', 'messageText': 'not found data'}


    def select_downloadLog_v1(self,sidCode):
        self.sidCode = sidCode
        resultSelect = paper_lesstransactionLoad.query.filter(paper_lesstransactionLoad.sidCode==self.sidCode).first()
        try:
            json_data = eval(resultSelect.jsonInformation)
        except Exception as ex:
            return {'result': 'ER', 'messageText': 'not found data'}
        if resultSelect != None:
            return {'result':'OK','messageText':{'json_information':json_data,'count_download':resultSelect.count_download,'keygen':resultSelect.key_gen}}
        else:
            return {'result':'ER','messageText':None}

    def select_downloadLogQrCode_v1(self,sidCode):
        self.sidCode = sidCode
        resultSelect = paper_lesstransactionLoadQr.query.filter(paper_lesstransactionLoadQr.sidCode==self.sidCode).first()
        try:
            json_data = eval(resultSelect.jsonInformation)
        except Exception as ex:
            return {'result': 'ER', 'messageText': 'not found data'}
        if resultSelect != None:
            return {'result':'OK','messageText':{'json_information':json_data,'count_download':resultSelect.count_download,'keygen':resultSelect.key_gen}}
        else:
            return {'result':'ER','messageText':None}

    def select_token_required_v1(self,tokenOne):
        self.tokenOne = tokenOne
        sha512encode = hashlib.sha512(str(self.tokenOne).encode('utf-8')).hexdigest()
        # print(sha512encode)
        sql = '''select * FROM tb_token_required where hash_one_access_token = :tmphash_one_access_token order by updatetime desc limit 1 '''
        with engine.connect() as connection:
            result_select = connection.execute(text(sql),tmphash_one_access_token=sha512encode)
            connection.close()
        # print(result_select)
        tmp_query = [dict(row) for row in result_select]
        # print(tmp_query)
        if len(tmp_query) != 0:
            time_update = tmp_query[0]['updatetime'].timestamp()
            time_expire = tmp_query[0]['expire_datetime'].timestamp()
            access_Paperless = tmp_query[0]['access_token_system']
        # selectResult = paper_lesstoken_required.query.filter(paper_lesstoken_required.hash_one_access_token==sha512encode).first()
        # if selectResult != None:
        #     time_update = (selectResult.updatetime).timestamp()
        #     time_expire = (selectResult.expire_datetime).timestamp()
        #     access_Paperless = selectResult.access_token_system
            return {'result':'ER','messageText':{'time_expire':int(time_expire),'time_update':int(time_update),'access':access_Paperless}}
        else:
            return {'result':'OK'}



    def select_biz_getRole_v1(self,taxId):
        self.taxId = taxId
        list_Role = []
        result_getRole = paper_lessbizProfile.query.filter(paper_lessbizProfile.bizTax==self.taxId).first()
        if result_getRole != None:
            if result_getRole.bizRole != None:
                if str(result_getRole.bizRole).replace(' ','') != None:
                    try:
                        Json_Role = eval(result_getRole.bizRole)
                    except Exception as ex:
                        return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล biz role ให้เป็น Json ได้'}
                    for i in range(len(Json_Role)):
                        list_Role.append({'role_name':Json_Role[i]['name'],'role_level':Json_Role[i]['role_level']})
                    if len(list_Role) != 0:
                        return {'result': 'OK', 'messageText': list_Role}
                    else:
                        return {'result': 'ER', 'messageText': 'not found data'}
                else:
                    return {'result': 'ER', 'messageText': 'not found data'}
            else:
                return {'result': 'OK', 'messageText': 'not found data'}
        else:
            return {'result': 'OK', 'messageText': 'not found data'}


    def select_biz_tamplate_v1(self,username,taxid):
        self.username = username
        self.taxid = taxid
        arr_list_result = []
        try:
            for k in paper_lessstep.query.filter().all():
                json_result = {}
                if k.template_biz != None:
                    if str(k.template_biz).replace(' ','') != '':
                        template_Json_biz = eval(k.template_biz)
                        if 'id_card_num' in template_Json_biz:
                            if template_Json_biz['id_card_num'] == self.taxid:
                                json_result['step_Code'] = k.step_Code
                                json_result['dateTime'] = k.DateTime
                                json_result['dateTime_string'] = str(k.DateTime).split('+')[0]
                                json_result['data_step'] = json.dumps(k.step_Data)
                                json_result['data_step'] = json.loads(json_result['data_step'])
                                # json_result['template_String'] = k.template_images
                                json_result['step_Upload'] = json.dumps(k.step_Upload)
                                json_result['step_Upload'] = json.loads(json_result['step_Upload'])
                                try:
                                    data_step = eval(json_result['data_step'])
                                except Exception as ex:
                                    return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล Step ให้เป็น Json ได้'}
                                try:
                                    step_Upload = eval(json_result['step_Upload'])
                                except Exception as ex:
                                    return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล step_Upload ให้เป็น Json ได้'}
                                json_result['username'] = k.username
                                json_result['step_Max'] = k.step_Max
                                json_result['step_Name'] = k.step_Name
                                json_result['step_Description'] = k.step_Description
                                json_result['email'] = k.email
                                json_result['qrCode_position'] = k.qrCode_position
                                if json_result['step_Max'] == 1:
                                    json_result['data_step'] = [data_step]
                                else:
                                    json_result['data_step'] = data_step
                                json_result['step_Upload'] = step_Upload
                                json_result['template_Type'] = 'business'
                                arr_list_result.append(json_result)
            if len(arr_list_result) != 0:
                return {'result':'OK','messageER':None,'messageText':arr_list_result}
            else:
                return {'result':'ER','messageER':'not found data','messageText':None}
        except Exception as ex:
            return {'result':'ER','messageER':'not found'}


    def select_DataLoginOffline(self,username,hashPassword,ipaddress):
        self.username = str(username).lower()
        self.hashPassword = hashPassword
        self.ipaddress = ipaddress
        result_LoginOffline = paper_lesslogin.query.filter_by(username=self.username,hash_data=self.hashPassword).first()
        if result_LoginOffline != None:
            result_check = check_Ref_Token(str(result_LoginOffline.access_token))
        else:
            return jsonify({'result':'Fail','responseCode':500,'data':None,'errorMessage':'Login Fail!','messageER':None})
        if result_check['result'] == 'OK':
            result_refToken = select().generate_tokenPaperless(result_check['messageText']['username'],result_check['messageText']['email'])
            one_accesstoken = result_LoginOffline.one_access_token
            paperless_access_token = result_refToken
            one_result_data = eval(result_LoginOffline.citizen_data)
            getBuz = eval(result_LoginOffline.biz_information)
            biz_info = []
            dep_id_list = []
            dept_name_list = []
            position_list = []
            if 'biz_detail' in getBuz:
                for i in range(len(getBuz['biz_detail'])):
                    jsonData = {
                        'id':getBuz['biz_detail'][i]['getbiz'][0]['id'],
                        'first_name_th':getBuz['biz_detail'][i]['getbiz'][0]['first_name_th'],
                        'first_name_eng':getBuz['biz_detail'][i]['getbiz'][0]['first_name_eng'],
                        'id_card_type':getBuz['biz_detail'][i]['getbiz'][0]['id_card_type'],
                        'id_card_num':getBuz['biz_detail'][i]['getbiz'][0]['id_card_num']
                    }
                    biz_info.append(jsonData)
            else:
                biz_info = []
            return {'result':'OK','one_access_token':one_accesstoken,'paperless_access_token':paperless_access_token,'one_result_data':one_result_data,'one_biz_detail':biz_info,'username':result_check['messageText']['username']}
        else:
            result_refToken = select().generate_tokenPaperless(self.username,self.emailUser)
            result_LoginOffline.access_token = result_refToken
            result_LoginOffline.ipaddress = self.ipaddress
            one_accesstoken = result_LoginOffline.one_access_token
            paperless_access_token = result_refToken
            one_result_data = eval(result_LoginOffline.citizen_data)
            getBuz = eval(result_LoginOffline.biz_information)
            biz_info = []
            if 'biz_detail' in getBuz:
                for i in range(len(getBuz['biz_detail'])):
                    jsonData = {
                        'id':getBuz['biz_detail'][i]['getbiz'][0]['id'],
                        'first_name_th':getBuz['biz_detail'][i]['getbiz'][0]['first_name_th'],
                        'first_name_eng':getBuz['biz_detail'][i]['getbiz'][0]['first_name_eng'],
                        'id_card_type':getBuz['biz_detail'][i]['getbiz'][0]['id_card_type'],
                        'id_card_num':getBuz['biz_detail'][i]['getbiz'][0]['id_card_num']
                    }
                    biz_info.append(jsonData)
            else:
                biz_info = []
            return {'result':'OK','one_access_token':one_accesstoken,'paperless_access_token':paperless_access_token,'one_result_data':one_result_data,'one_biz_detail':biz_info,'username':self.username}

    def select_BizProfile(self,bizTax):
        self.bizTax = bizTax
        sql = """ 
                select * FROM "tb_bizProfile" where "bizTax" = :tmpbiztax
            """
        with slave.connect() as connection:
            result = connection.execute(text(sql),tmpbiztax=self.bizTax)
            connection.close()
        query_result = [dict(row) for row in result]  
        if len(query_result) != 0:   
        # result_Tax = paper_lessbizProfile.query.filter_by(bizTax=self.bizTax).first()
        # if result_Tax != None:
            return {'result':'OK','messageText':None}
        else:
            return {'result':'ER','messageER':'not found BizProfile'}

    def select_EmailUserprofile(self,email_thai):
        statusEmail = False
        self.email_thai = email_thai
        try:
            sql = '''
                SELECT
                    "tb_userProfile"."p_emailUser" AS "p_emailUser",
                    "tb_userProfile".p_options AS "p_options"
                FROM
                    "tb_userProfile" 
                WHERE
                    "tb_userProfile".p_emailthai = :tmpp_emailthai 
            '''
            connection = slave.connect()
            result = connection.execute(text(sql),tmpp_emailthai=self.email_thai)
            resultQuery = [dict(row) for row in result]
            if len(resultQuery) > 0:
                if resultQuery[0]['p_options'] != None:
                    optionsProfile = eval(resultQuery[0]['p_options'])
                    if 'notification_status' in optionsProfile:
                        if 'notificationEmail' in optionsProfile['notification_status']:
                            if 'status' in  optionsProfile['notification_status']['notificationEmail']:
                                tmpstatusemail = optionsProfile['notification_status']['notificationEmail']['status']
                                if tmpstatusemail == True:
                                    statusEmail = True
                if resultQuery[0]['p_emailUser'] != None:
                    if str(resultQuery[0]['p_emailUser']).replace(' ','') != "":
                        return {'result':'OK','messageText':{'emailUser':resultQuery[0]['p_emailUser'],'statusEmail':statusEmail}}
                    else:
                        return {'result':'ER','messageER':'not found emailUser','messageText':{'statusEmail':statusEmail}}
                else:
                    return {'result':'ER','messageER':'not found emailUser','messageText':{'statusEmail':statusEmail}}
            else:
                return {'result':'ER','messageER':'not found UserProfile','messageText':{'statusEmail':statusEmail}}
        except Exception as e:
            return {'result':'ER','messageER':'not found UserProfile','messageText':{'statusEmail':False}}
        finally:
           connection.close() 
        

    def select_MailTostep(self,sid):
        self.sid = sid
        arr_json_to = []
        try:
            for i in paper_lesstransactionMail.query.filter_by(sidCode=self.sid).all():
                json_to = {}
                json_to['transactionCode'] = i.transactionCode
                json_to['email_User'] = i.email_User
                json_to['statusSign'] = i.statusSign
                json_to['stepNum'] = i.stepNum
                json_to['datetime'] = i.timeStamp
                json_to['datetime_string'] = str(i.timeStamp).split('+')[0]
                json_to['statusId'] = i.statusId
                json_to['sidCode'] = i.sidCode
                json_to['propertyMail'] = i.propertyMail
                json_to['urlSign'] = i.urlSign
                arr_json_to.append(json_to)
            return (arr_json_to)
        except Exception as ex:
            print(ex)


    def select_documentId_Mail(self,sidCode):
        self.sidCode = sidCode
        result_documentId = paper_lessdocument.query.filter_by(step_id=self.sidCode).first()
        if result_documentId != None:
            if result_documentId.document_id != None:
                result_TrackingId = paper_lesstrack.query.filter_by(step_data_sid=self.sidCode).first()
                resultSender = paper_lesssender.query.filter_by(step_data_sid=self.sidCode).first()
                return {'result': 'OK', 'messageText': {'file_id':result_documentId.fileid,'document_id':result_documentId.document_id,'tracking_id':result_TrackingId.tracking,'file_Name':resultSender.file_name,'document_type':result_documentId.documentType},'messageER':None}
            else:
                return {'result': 'ER', 'messageText': None,'messageER':'ไม่พบข้อมูล DocumentId'}
        else:
            return {'result': 'ER', 'messageText': None,'messageER':'ไม่พบข้อมูล Document'}

    def select_signString(self,username,userId):
        self.username = username
        self.userId = userId
        result_SignString = paper_lessuserProfile.query.filter_by(p_username=self.username,p_userid=self.userId).first()
        if result_SignString != None:
            if result_SignString.p_sign != None:
                return {'result': 'OK', 'messageText': {'signString':result_SignString.p_sign},'messageER':None}
            else:
                return {'result': 'ER', 'messageText': None,'messageER':'ไม่พบข้อมูล Sign'}
        else:
            return {'result': 'ER', 'messageText': None,'messageER':'ไม่พบข้อมูล UserProfile'}

    def select_biz_Sender_V1(self,taxId,senderUser):
        self.taxId = taxId
        self.senderUser   = senderUser
        list_Json = []
        arr_get = []
        try:
            for item in paper_lessdatastep.query.filter_by().order_by((paper_lessdatastep.update_time).desc()).all():
                if item.biz_info != None:
                    if str(item.biz_info).replace(' ','') != "":
                        if str(item.biz_info).replace(' ','') != 'None':
                            list_Json.append({'sid':item.sid,'biz_info':eval(item.biz_info),'datastep':eval(item.data_json)})
                else:
                    return {'result':'ER','messageText': 'ไม่พบข้อมูลนิติบุคคล ' + self.taxId ,'status_Code':200}
            for i in range(len(list_Json)):
                if self.taxId == list_Json[i]['biz_info']['id_card_num']:
                    if 'step_num' in list_Json[i]['datastep']:
                        # stepmax = 1
                        sidCode = list_Json[i]['sid']
                        for y in paper_lesssender.query.filter_by(step_data_sid=sidCode,send_user=self.senderUser).all():
                            json_sky = {}
                            json_sky['send_time'] = y.send_time
                            json_sky['send_time_string'] = str(y.send_time).split('+')[0]
                            json_sky['status'] = y.status
                            json_sky['sender_name'] = y.sender_name
                            json_sky['sender_email'] = y.sender_email
                            json_sky['sender_position'] = y.sender_position
                            json_sky['result'] = 'OK'
                            json_sky['file_name'] = y.file_name
                            json_sky['tracking_id'] = y.tracking_id
                            json_sky['step_code'] = y.step_code
                            result_stepMax = paper_lessstep.query.filter_by(username=self.senderUser,step_Code=json_sky['step_code']).first()
                            json_sky['step_Max'] = int(result_stepMax.step_Max)
                            json_sky['step_data_sid'] = y.step_data_sid
                            result_stepdata = paper_lessdatastep.query.filter_by(sid=y.step_data_sid).first()
                            if result_stepdata != None:
                                if result_stepdata.view_details != None:
                                    json_sky['view_details'] = eval(result_stepdata.view_details)
                                else:
                                    json_sky['view_details'] = None
                            else:
                                json_sky['view_details'] = None
                            json_sky['url_sign'] = None
                            result_resource = []
                            for i in paper_lesstransactionChain.query.filter_by(f_sid=y.step_data_sid).order_by((paper_lesstransactionChain.f_id).desc()).all():
                                json_data_result = {}
                                json_data_result['Account'] = eval(i.f_userAccount)['username']
                                if json_data_result['Account'] == self.senderUser:
                                    json_data_result = {}
                                    json_data_result['order'] = i.f_row
                                    json_data_result['result'] = 'OK'
                                    json_data_result['file_id'] = i.f_file_id
                                    json_data_result['transactionId'] = i.f_transactionId
                                    json_data_result['datetime'] = i.f_timestamp
                                    json_data_result['datetime_string'] = str(i.f_timestamp).split('+')[0]
                                    json_data_result['user_id'] = eval(i.f_metadate)['metadata']['user_id']
                                else:
                                    json_data_result = {}
                                    json_data_result['result'] = 'ER'
                                result_resource.append(json_data_result)
                            json_sky['resource_OneChain'] = result_resource
                            for j in paper_lessdocument.query.filter_by(step_id=y.step_data_sid).all():
                                json_sky['document_Id'] = j.document_id
                            for n in paper_lesspdf.query.filter_by(fid=y.file_id).all():
                                if n.hash_sign != None or n.hash_sign == "":
                                    json_sky['file_status'] = 'Complete'
                                else:
                                    json_sky['file_status'] = 'Incomplete'

                            for i in paper_lessdatastep.query.filter_by(sid=json_sky['step_data_sid']).order_by((paper_lessdatastep.id).desc()).all():
                                arr_step = []
                                json_step_data = json.dumps(i.data_json)
                                json_step_data = json.loads(json_step_data)
                                json_step_data = eval(json_step_data)
                                if json_sky['step_Max'] > 1:
                                    arr_step_info = []
                                    for o in range(len(json_step_data)):
                                        arr_step.append(json_step_data[o])
                                    for nn in range(len(arr_step)):
                                        arr_step_totle = []
                                        json_info_step2 = {}
                                        if 'step_detail' in json_step_data[nn]:
                                            for s in range(len(json_step_data[nn]['step_detail'])):
                                                for y in range(len(json_step_data[nn]['step_detail'][s]['activity_code'])):

                                                    if json_step_data[nn]['step_detail'][s]['activity_code'][y] == 'A03':
                                                        json_info_step = {}
                                                        json_info_step['step_num'] = arr_step[nn]['step_num']
                                                        json_info_step['one_email'] = json_step_data[nn]['step_detail'][s]['one_email']
                                                        json_info_step['activity_status'] = json_step_data[nn]['step_detail'][s]['activity_status'][y]
                                                        arr_step_totle.append(json_info_step)
                                                        if arr_step[nn]['step_detail'][s]['activity_status'][y] == 'Complete':
                                                            json_info_step2['step_status'] = 'Complete'
                                                        else:
                                                            try:
                                                                json_info_step2['step_status']
                                                            except Exception as ex:
                                                                json_info_step2['step_status'] = 'Incomplete'
                                                json_info_step2['step_info'] = arr_step_totle
                                                arr_step_info.append(json_info_step2)
                                    json_sky['file_user_status_detail'] = arr_step_info
                                    json_sky['step_info'] = arr_step
                                else:
                                    json_info_step2 = {}
                                    arr_step_info = []
                                    arr_step_totle = []
                                    if 'step_detail' in json_step_data:
                                            for s in range(len(json_step_data['step_detail'])):
                                                for y in range(len(json_step_data['step_detail'][s]['activity_code'])):
                                                    if json_step_data['step_detail'][s]['activity_code'][y] == 'A03':
                                                        json_info_step = {}
                                                        json_info_step['step_num'] = json_step_data['step_num']
                                                        json_info_step['one_email'] = json_step_data['step_detail'][s]['one_email']
                                                        json_info_step['activity_status'] = json_step_data['step_detail'][s]['activity_status'][y]
                                                        arr_step_totle.append(json_info_step)
                                                        if json_step_data['step_detail'][s]['activity_status'][y] == 'Complete':
                                                            json_info_step2['step_status'] = 'Complete'
                                                        else:
                                                            try:
                                                                json_info_step2['step_status']
                                                            except Exception as ex:
                                                                json_info_step2['step_status'] = 'Incomplete'
                                            json_info_step2['step_info'] = arr_step_totle
                                            arr_step_info.append(json_info_step2)
                                    json_sky['file_user_status_detail'] = arr_step_info
                                    json_sky['step_info'] = [json_step_data]
                        arr_get.append(json_sky)
                    else:
                        # stepmax > 1
                        for y in range(len(list_Json[i]['datastep'])):
                            # print(list_Json[i]['datastep'][y])
                            sidCode = list_Json[i]['sid']
                            for y in paper_lesssender.query.filter_by(step_data_sid=sidCode,send_user=self.senderUser).all():
                                json_sky = {}
                                json_sky['send_time'] = y.send_time
                                json_sky['send_time_string'] = str(y.send_time).split('+')[0]
                                json_sky['status'] = y.status
                                json_sky['sender_name'] = y.sender_name
                                json_sky['sender_email'] = y.sender_email
                                json_sky['sender_position'] = y.sender_position
                                json_sky['result'] = 'OK'
                                json_sky['file_name'] = y.file_name
                                json_sky['tracking_id'] = y.tracking_id
                                json_sky['step_code'] = y.step_code
                                result_stepMax = paper_lessstep.query.filter_by(username=self.senderUser,step_Code=json_sky['step_code']).first()
                                json_sky['step_Max'] = int(result_stepMax.step_Max)
                                json_sky['step_data_sid'] = y.step_data_sid
                                result_stepdata = paper_lessdatastep.query.filter_by(sid=y.step_data_sid).first()
                                if result_stepdata != None:
                                    if result_stepdata.view_details != None:
                                        json_sky['view_details'] = eval(result_stepdata.view_details)
                                    else:
                                        json_sky['view_details'] = None
                                else:
                                    json_sky['view_details'] = None
                                json_sky['url_sign'] = None
                        result_resource = []
                        for i in paper_lesstransactionChain.query.filter_by(f_sid=sidCode).order_by((paper_lesstransactionChain.f_row).desc()).all():
                            json_data_result = {}
                            json_data_result['Account'] = eval(i.f_userAccount)['username']
                            if json_data_result['Account'] == self.senderUser:
                                json_data_result = {}
                                json_data_result['order'] = i.f_row
                                json_data_result['result'] = 'OK'
                                json_data_result['file_id'] = i.f_file_id
                                json_data_result['transactionId'] = i.f_transactionId
                                json_data_result['datetime'] = i.f_timestamp
                                json_data_result['datetime_string'] = str(i.f_timestamp).split('+')[0]
                                json_data_result['user_id'] = eval(i.f_metadate)['metadata']['user_id']
                            else:
                                json_data_result = {}
                                json_data_result['result'] = 'ER'
                            result_resource.append(json_data_result)
                        json_sky['resource_OneChain'] = result_resource

                        for j in paper_lessdocument.query.filter_by(step_id=sidCode).all():
                            json_sky['document_Id'] = j.document_id
                        for n in paper_lesspdf.query.filter_by(fid=y.file_id).all():
                            if n.hash_sign != None or n.hash_sign == "":
                                json_sky['file_status'] = 'Complete'
                            else:
                                json_sky['file_status'] = 'Incomplete'

                        for i in paper_lessdatastep.query.filter_by(sid=json_sky['step_data_sid']).all():
                            arr_step = []
                            json_step_data = json.dumps(i.data_json)
                            json_step_data = json.loads(json_step_data)
                            json_step_data = eval(json_step_data)
                            if json_sky['step_Max'] > 1:
                                arr_step_info = []
                                for o in range(len(json_step_data)):
                                    arr_step.append(json_step_data[o])
                                for nn in range(len(arr_step)):
                                    arr_step_totle = []
                                    json_info_step2 = {}
                                    if 'step_detail' in json_step_data[nn]:
                                        for s in range(len(json_step_data[nn]['step_detail'])):
                                            for y in range(len(json_step_data[nn]['step_detail'][s]['activity_code'])):

                                                if json_step_data[nn]['step_detail'][s]['activity_code'][y] == 'A03':
                                                    json_info_step = {}
                                                    json_info_step['step_num'] = arr_step[nn]['step_num']
                                                    json_info_step['one_email'] = json_step_data[nn]['step_detail'][s]['one_email']
                                                    json_info_step['activity_status'] = json_step_data[nn]['step_detail'][s]['activity_status'][y]
                                                    arr_step_totle.append(json_info_step)
                                                    if arr_step[nn]['step_detail'][s]['activity_status'][y] == 'Complete':
                                                        json_info_step2['step_status'] = 'Complete'
                                                    else:
                                                        try:
                                                            json_info_step2['step_status']
                                                        except Exception as ex:
                                                            json_info_step2['step_status'] = 'Incomplete'
                                        json_info_step2['step_info'] = arr_step_totle
                                        arr_step_info.append(json_info_step2)
                                json_sky['file_user_status_detail'] = arr_step_info
                                json_sky['step_info'] = arr_step
                            else:
                                json_info_step2 = {}
                                arr_step_info = []
                                arr_step_totle = []
                                if 'step_detail' in json_step_data:
                                        for s in range(len(json_step_data['step_detail'])):
                                            for y in range(len(json_step_data['step_detail'][s]['activity_code'])):
                                                if json_step_data['step_detail'][s]['activity_code'][y] == 'A03':
                                                    json_info_step = {}
                                                    json_info_step['step_num'] = json_step_data['step_num']
                                                    json_info_step['one_email'] = json_step_data['step_detail'][s]['one_email']
                                                    json_info_step['activity_status'] = json_step_data['step_detail'][s]['activity_status'][y]
                                                    arr_step_totle.append(json_info_step)
                                                    if json_step_data['step_detail'][s]['activity_status'][y] == 'Complete':
                                                        json_info_step2['step_status'] = 'Complete'
                                                    else:
                                                        try:
                                                            json_info_step2['step_status']
                                                        except Exception as ex:
                                                            json_info_step2['step_status'] = 'Incomplete'
                                        json_info_step2['step_info'] = arr_step_totle
                                        arr_step_info.append(json_info_step2)
                                json_sky['file_user_status_detail'] = arr_step_info
                                json_sky['step_info'] = [json_step_data]
                            arr_get.append(json_sky)


            if len(arr_get) != 0:
                return {'result': 'OK', 'messageText': arr_get,'status_Code':200}
            else:
                return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล ' + self.senderUser,'status_Code':200}
        except Exception as ex:
            return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล ' + self.senderUser,'status_Code':200,'messageER':str(ex)}

    def select_biz_recipient_v1(self,taxId,emailUser):
        self.taxId = taxId
        self.emailUser = emailUser
        list_Json = []
        try:
            for item in paper_lessdatastep.query.filter_by().order_by((paper_lessdatastep.update_time).desc()).all():
                if item.biz_info != None:
                    if str(item.biz_info).replace(' ','') != "":
                        if str(item.biz_info).replace(' ','') != 'None':
                            Json_bizinfo = eval(item.biz_info)
                            if self.taxId == Json_bizinfo['id_card_num']:
                                list_Json.append({'sid':item.sid,'biz_info':eval(item.biz_info),'datastep':eval(item.data_json)})
                        else:
                            return {'result':'ER','messageText': 'ไม่พบข้อมูลนิติบุคคล ' + self.taxId ,'status_Code':200}
                else:
                    return {'result':'ER','messageText': 'ไม่พบข้อมูลนิติบุคคล ' + self.taxId ,'status_Code':200}
            arr_get_sid = []
            for i in range(len(list_Json)):
                if 'step_num' in list_Json[i]['datastep']:
                    if 'step_detail' in list_Json[i]['datastep']:
                        for y in range(len(list_Json[i]['datastep']['step_detail'])):
                            for s in range(len(list_Json[i]['datastep']['step_detail'][y]['activity_code'])):
                                try:
                                    activity_code = list_Json[i]['datastep']['step_detail'][y]['activity_code'][s]
                                except Exception as ex:
                                    activity_code = ''
                                if activity_code == "A03":
                                    if self.emailUser == list_Json[i]['datastep']['step_detail'][y]['one_email']:
                                        json_sky = {}
                                        try:
                                            json_sky['file_user_status'] = list_Json[i]['datastep']['step_detail'][y]['activity_status'][s]
                                            # json_sky['file_user_status'] = ''
                                        except Exception as ex:
                                            json_sky['file_user_status'] = 'Not Found'
                                            # return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
                                        sidCode = list_Json[i]['sid']
                                        print(sidCode)
                                        try:
                                            for u in paper_lesssender.query.filter_by(step_data_sid=sidCode).order_by((paper_lesssender.id).desc()).all():

                                                json_sky['send_time'] = u.send_time
                                                json_sky['send_time_string'] = str(u.send_time).split('+')[0]
                                                json_sky['status'] = u.status
                                                json_sky['sender_name'] = u.sender_name
                                                json_sky['sender_email'] = u.sender_email
                                                json_sky['sender_position'] = u.sender_position
                                                json_sky['file_id'] = u.file_id
                                                json_sky['result'] = 'OK'
                                                json_sky['file_name'] = u.file_name
                                                json_sky['tracking_id'] = u.tracking_id
                                                json_sky['step_code'] = u.step_code
                                                json_sky['step_data_sid'] = u.step_data_sid
                                                json_sky['url_sign'] = None
                                                result_stepdata = paper_lessdatastep.query.filter_by(sid=sidCode).first()
                                                if result_stepdata != None:
                                                    if result_stepdata.view_details != None:
                                                        json_sky['view_details'] = eval(result_stepdata.view_details)
                                                    else:
                                                        json_sky['view_details'] = None
                                                else:
                                                    json_sky['view_details'] = None
                                                result_resource = []
                                                for i in paper_lesstransactionChain.query.filter_by(f_sid=u.step_data_sid).order_by((paper_lesstransactionChain.f_row).desc()).all():
                                                    json_data_result = {}
                                                    json_data_result['Account'] = eval(i.f_userAccount)['email_thai']
                                                    if self.emailUser in json_data_result['Account']:
                                                        json_data_result = {}
                                                        json_data_result['order'] = i.f_row
                                                        json_data_result['result'] = 'OK'
                                                        json_data_result['file_id'] = i.f_file_id
                                                        json_data_result['transactionId'] = i.f_transactionId
                                                        json_data_result['datetime'] = i.f_timestamp
                                                        json_data_result['datetime_string'] = str(i.f_timestamp).split('+')[0]
                                                        json_data_result['user_id'] = eval(i.f_metadate)['metadata']['user_id']
                                                        json_data_result['userAccount'] = str(i.f_userAccount)
                                                    else:
                                                        json_data_result = {}
                                                        json_data_result['result'] = 'ER'
                                                    result_resource.append(json_data_result)
                                                json_sky['resource_OneChain'] = result_resource
                                                for j in paper_lessdocument.query.filter_by(step_id=sidCode).all():
                                                    json_sky['document_Id'] = j.document_id
                                                for y in paper_lesspdf.query.filter_by(fid=u.file_id).all():
                                                    if y.hash_sign != None or y.hash_sign == "":
                                                        json_sky['file_status'] = 'Complete'
                                                    else:
                                                        json_sky['file_status'] = 'Incomplete'

                                                arr_step = []
                                                for i in paper_lessdatastep.query.filter_by(sid=json_sky['step_data_sid']).order_by((paper_lessdatastep.id).desc()).all():

                                                    arr_step_info = []
                                                    try:
                                                        json_step_data = json.dumps(i.data_json)
                                                        json_step_data = json.loads(json_step_data)
                                                    except Exception as ex:
                                                        print(ex)
                                                        return {'result': 'ER', 'messageText': 'Json ER!'}
                                                    try:
                                                        json_step_data = eval(json_step_data)
                                                    except Exception as ex:
                                                        return {'result': 'ER', 'messageText': 'Json ER!'}
                                                    arr_step.append(json_step_data)
                                                    for nn in range(len(arr_step)):
                                                        print(arr_step[nn])
                                                        arr_step_totle = []
                                                        json_info_step2 = {}
                                                        if 'step_detail' in arr_step[nn]:
                                                            for s in range(len(arr_step[nn]['step_detail'])):
                                                                for y in range(len(arr_step[nn]['step_detail'][s]['activity_code'])):
                                                                    if arr_step[nn]['step_detail'][s]['activity_code'][y] == 'A03':
                                                                        json_info_step = {}
                                                                        json_info_step['step_num'] = arr_step[nn]['step_num']
                                                                        json_info_step['one_email'] = arr_step[nn]['step_detail'][s]['one_email']
                                                                        json_info_step['activity_status'] = arr_step[nn]['step_detail'][s]['activity_status'][y]

                                                                        arr_step_totle.append(json_info_step)
                                                                        # json_info_step['info'] = arr_step_totle
                                                                        # print(json_step_data[nn]['step_detail'][s]['activity_status'])

                                                                        if arr_step[nn]['step_detail'][s]['activity_status'][y] == 'Complete':
                                                                            json_info_step2['step_status'] = 'Complete'
                                                                        else:
                                                                            try:
                                                                                json_info_step2['step_status']
                                                                            except Exception as ex:
                                                                                json_info_step2['step_status'] = 'Incomplete'

                                                            json_info_step2['step_info'] = arr_step_totle
                                                            arr_step_info.append(json_info_step2)

                                                            json_sky['file_user_status_detail'] = arr_step_info
                                                    try:

                                                        json_sky['step_info'] = arr_step
                                                    except Exception as ex:
                                                        print(ex)

                                                arr_get_sid.append(json_sky)
                                        except Exception as ex:
                                            print(ex)
                                            return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
                else:
                    for l in range(len(list_Json[i]['datastep'])):
                        sidCode = list_Json[i]['sid']
                        if 'step_detail' in list_Json[i]['datastep'][l]:
                            for o in range(len(list_Json[i]['datastep'][l]['step_detail'])):
                                if 'one_email' in list_Json[i]['datastep'][l]['step_detail'][o]:
                                    arrjson_data = {}
                                    arr_data_json = []
                                    for s in range(len(list_Json[i]['datastep'][l]['step_detail'][o]['activity_code'])):
                                        try:
                                            activity_code = list_Json[i]['datastep'][l]['step_detail'][o]['activity_code'][s]
                                        except Exception as ex:
                                            print(ex)
                                            activity_code = ''
                                        if activity_code == "A03":
                                            if self.emailUser == list_Json[i]['datastep'][l]['step_detail'][o]['one_email']:

                                                try:
                                                    for u in paper_lesssender.query.filter_by(step_data_sid=sidCode).order_by((paper_lesssender.id).desc()).all():

                                                        json_sky = {}
                                                        try:
                                                            json_sky['file_user_status'] = list_Json[i]['datastep'][l]['step_detail'][o]['activity_status'][s]
                                                        except Exception as ex:
                                                            return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
                                                        json_sky['send_time'] = u.send_time
                                                        json_sky['send_time_string'] = str(u.send_time).split('+')[0]
                                                        json_sky['status'] = u.status
                                                        json_sky['sender_name'] = u.sender_name
                                                        json_sky['sender_email'] = u.sender_email
                                                        json_sky['sender_position'] = u.sender_position
                                                        json_sky['file_id'] = u.file_id
                                                        json_sky['result'] = 'OK'
                                                        json_sky['file_name'] = u.file_name
                                                        json_sky['tracking_id'] = u.tracking_id
                                                        json_sky['step_code'] = u.step_code
                                                        json_sky['step_data_sid'] = u.step_data_sid
                                                        json_sky['url_sign'] = None
                                                        result_stepdata = paper_lessdatastep.query.filter_by(sid=sidCode).first()
                                                        if result_stepdata != None:
                                                            if result_stepdata.view_details != None:
                                                                json_sky['view_details'] = eval(result_stepdata.view_details)
                                                            else:
                                                                json_sky['view_details'] = None
                                                        else:
                                                            json_sky['view_details'] = None
                                                        result_resource = []
                                                        for i in paper_lesstransactionChain.query.filter_by(f_sid=sidCode).order_by((paper_lesstransactionChain.f_id).desc()).all():
                                                            json_data_result = {}
                                                            json_data_result['Account'] = eval(i.f_userAccount)['email_thai']
                                                            if self.emailUser in json_data_result['Account']:
                                                                json_data_result = {}
                                                                json_data_result['order'] = i.f_row
                                                                json_data_result['result'] = 'OK'
                                                                json_data_result['file_id'] = i.f_file_id
                                                                json_data_result['transactionId'] = i.f_transactionId
                                                                json_data_result['datetime'] = i.f_timestamp
                                                                json_data_result['datetime_string'] = str(i.f_timestamp).split('+')[0]
                                                                json_data_result['user_id'] = eval(i.f_metadate)['metadata']['user_id']
                                                                json_data_result['userAccount'] = str(i.f_userAccount)
                                                            else:
                                                                json_data_result = {}
                                                                json_data_result['result'] = 'ER'
                                                            result_resource.append(json_data_result)
                                                        json_sky['resource_OneChain'] = result_resource
                                                        for j in paper_lessdocument.query.filter_by(step_id=sidCode).all():
                                                            json_sky['document_Id'] = j.document_id
                                                        for y in paper_lesspdf.query.filter_by(fid=u.file_id).all():
                                                            if y.hash_sign != None or y.hash_sign == "":
                                                                json_sky['file_status'] = 'Complete'
                                                            else:
                                                                json_sky['file_status'] = 'Incomplete'

                                                        arr_step = []
                                                        for i in paper_lessdatastep.query.filter_by(sid=json_sky['step_data_sid']).order_by((paper_lessdatastep.id).desc()).all():
                                                            arr_step_info = []
                                                            try:
                                                                json_step_data = json.dumps(i.data_json)
                                                                json_step_data = json.loads(json_step_data)
                                                            except Exception as ex:
                                                                print(ex)
                                                                return {'result': 'ER', 'messageText': 'Json ER!'}
                                                            try:
                                                                json_step_data = eval(json_step_data)
                                                            except Exception as ex:
                                                                return {'result': 'ER', 'messageText': 'Json ER!'}
                                                            for o in range(len(json_step_data)):
                                                                arr_step.append(json_step_data[o])
                                                            for nn in range(len(arr_step)):

                                                                arr_step_totle = []
                                                                json_info_step2 = {}
                                                                if 'step_detail' in json_step_data[nn]:
                                                                    for s in range(len(json_step_data[nn]['step_detail'])):
                                                                        for y in range(len(json_step_data[nn]['step_detail'][s]['activity_code'])):
                                                                            if json_step_data[nn]['step_detail'][s]['activity_code'][y] == 'A03':
                                                                                json_info_step = {}
                                                                                json_info_step['step_num'] = json_step_data[nn]['step_num']
                                                                                json_info_step['one_email'] = json_step_data[nn]['step_detail'][s]['one_email']
                                                                                json_info_step['activity_status'] = json_step_data[nn]['step_detail'][s]['activity_status'][y]

                                                                                arr_step_totle.append(json_info_step)
                                                                                # json_info_step['info'] = arr_step_totle
                                                                                # print(json_step_data[nn]['step_detail'][s]['activity_status'])

                                                                                if arr_step[nn]['step_detail'][s]['activity_status'][y] == 'Complete':
                                                                                    json_info_step2['step_status'] = 'Complete'
                                                                                else:
                                                                                    try:
                                                                                        json_info_step2['step_status']
                                                                                    except Exception as ex:
                                                                                        json_info_step2['step_status'] = 'Incomplete'

                                                                    json_info_step2['step_info'] = arr_step_totle
                                                                    arr_step_info.append(json_info_step2)

                                                                    json_sky['file_user_status_detail'] = arr_step_info
                                                            try:

                                                                json_sky['step_info'] = arr_step
                                                            except Exception as ex:
                                                                print(ex)

                                                        arr_get_sid.append(json_sky)
                                                except Exception as ex:
                                                    print(ex)
                                                    return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
            if len(arr_get_sid) != 0:
                return {'result': 'OK', 'messageText': arr_get_sid,'status_Code':200}
            else:
                return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล ' + self.emailUser + ' ในเลขประจำตัวผู้เสียภาษี ' +self.taxId}
        except Exception as ex:
            print(str(ex))
            return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล ' + self.emailUser,'status_Code':200,'messageER':str(ex)}

    def select_biz_v1(self,taxId,roldId):
        self.taxId = taxId
        self.roldId = int(roldId)
        list_Json = []
        arr_get = []
        try:
            for item in paper_lessdatastep.query.filter_by().order_by((paper_lessdatastep.update_time).desc()).all():
                if item.biz_info != None:
                    if str(item.biz_info).replace(' ','') != "":
                        if str(item.biz_info).replace(' ','') != 'None':
                            biz_data_Json = eval(item.biz_info)
                            if 'id_card_num' in biz_data_Json:
                                if biz_data_Json['id_card_num'] == self.taxId:
                                    if 'role_level' in biz_data_Json:
                                        roleIdBiz = int(biz_data_Json['role_level'])
                                        if self.roldId <= roleIdBiz:
                                            list_Json.append({'sid':item.sid,'biz_info':biz_data_Json,'datastep':eval(item.data_json)})
                                    else:
                                        return {'result':'ER','messageText': 'ไม่พบข้อมูลนิติบุคคล ' + self.taxId ,'status_Code':200}
                            else:
                                return {'result':'ER','messageText': 'ไม่พบข้อมูลนิติบุคคล ' + self.taxId ,'status_Code':200}
            for i in range(len(list_Json)):
                if self.taxId == list_Json[i]['biz_info']['id_card_num']:
                    if 'step_num' in list_Json[i]['datastep']:
                        # stepmax = 1
                        sidCode = list_Json[i]['sid']
                        for y in paper_lesssender.query.filter_by(step_data_sid=sidCode).all():
                            json_sky = {}
                            json_sky['send_time'] = y.send_time
                            json_sky['send_time_string'] = str(y.send_time).split('+')[0]
                            json_sky['status'] = y.status
                            json_sky['sender_name'] = y.sender_name
                            json_sky['sender_email'] = y.sender_email
                            json_sky['sender_position'] = y.sender_position
                            json_sky['result'] = 'OK'
                            json_sky['file_name'] = y.file_name
                            json_sky['tracking_id'] = y.tracking_id
                            json_sky['step_code'] = y.step_code
                            result_stepMax = paper_lessstep.query.filter_by(step_Code=json_sky['step_code']).first()
                            json_sky['step_Max'] = int(result_stepMax.step_Max)
                            json_sky['step_data_sid'] = y.step_data_sid
                            result_stepdata = paper_lessdatastep.query.filter_by(sid=y.step_data_sid).first()
                            if result_stepdata != None:
                                if result_stepdata.view_details != None:
                                    json_sky['view_details'] = eval(result_stepdata.view_details)
                                else:
                                    json_sky['view_details'] = None
                            else:
                                json_sky['view_details'] = None
                            json_sky['url_sign'] = None
                            result_resource = []
                            for i in paper_lesstransactionChain.query.filter_by(f_sid=y.step_data_sid).order_by((paper_lesstransactionChain.f_id).desc()).all():
                                json_data_result = {}
                                json_data_result['order'] = i.f_row
                                json_data_result['result'] = 'OK'
                                json_data_result['file_id'] = i.f_file_id
                                json_data_result['transactionId'] = i.f_transactionId
                                json_data_result['datetime'] = i.f_timestamp
                                json_data_result['datetime_string'] = str(i.f_timestamp).split('+')[0]
                                json_data_result['user_id'] = eval(i.f_metadate)['metadata']['user_id']
                                result_resource.append(json_data_result)
                            json_sky['resource_OneChain'] = result_resource
                            for j in paper_lessdocument.query.filter_by(step_id=y.step_data_sid).all():
                                json_sky['document_Id'] = j.document_id
                            for n in paper_lesspdf.query.filter_by(fid=y.file_id).all():
                                if n.hash_sign != None or n.hash_sign == "":
                                    json_sky['file_status'] = 'Complete'
                                else:
                                    json_sky['file_status'] = 'Incomplete'

                            for i in paper_lessdatastep.query.filter_by(sid=json_sky['step_data_sid']).order_by((paper_lessdatastep.id).desc()).all():
                                arr_step = []
                                json_step_data = json.dumps(i.data_json)
                                json_step_data = json.loads(json_step_data)
                                json_step_data = eval(json_step_data)
                                if json_sky['step_Max'] > 1:
                                    result_email_list = []
                                    arr_step_info = []
                                    for o in range(len(json_step_data)):
                                        arr_step.append(json_step_data[o])
                                    for nn in range(len(arr_step)):
                                        arr_step_totle = []
                                        json_info_step2 = {}
                                        if 'step_detail' in json_step_data[nn]:
                                            for s in range(len(json_step_data[nn]['step_detail'])):
                                                for y in range(len(json_step_data[nn]['step_detail'][s]['activity_code'])):

                                                    if json_step_data[nn]['step_detail'][s]['activity_code'][y] == 'A03':
                                                        json_info_step = {}
                                                        json_info_step['step_num'] = arr_step[nn]['step_num']
                                                        json_info_step['one_email'] = json_step_data[nn]['step_detail'][s]['one_email']
                                                        result_email_list.append(json_info_step['one_email'])
                                                        json_info_step['activity_status'] = json_step_data[nn]['step_detail'][s]['activity_status'][y]
                                                        arr_step_totle.append(json_info_step)
                                                        if arr_step[nn]['step_detail'][s]['activity_status'][y] == 'Complete':
                                                            json_info_step2['step_status'] = 'Complete'
                                                        else:
                                                            try:
                                                                json_info_step2['step_status']
                                                            except Exception as ex:
                                                                json_info_step2['step_status'] = 'Incomplete'
                                                json_info_step2['step_info'] = arr_step_totle
                                                arr_step_info.append(json_info_step2)
                                    json_sky['file_user_status_detail'] = arr_step_info
                                    json_sky['step_info'] = arr_step
                                    json_sky['recipient_Email'] = result_email_list
                                else:
                                    result_email_list = []
                                    json_info_step2 = {}
                                    arr_step_info = []
                                    arr_step_totle = []
                                    if 'step_detail' in json_step_data:
                                            for s in range(len(json_step_data['step_detail'])):
                                                for y in range(len(json_step_data['step_detail'][s]['activity_code'])):
                                                    if json_step_data['step_detail'][s]['activity_code'][y] == 'A03':
                                                        json_info_step = {}
                                                        json_info_step['step_num'] = json_step_data['step_num']
                                                        json_info_step['one_email'] = json_step_data['step_detail'][s]['one_email']
                                                        result_email_list.append(json_info_step['one_email'])
                                                        json_info_step['activity_status'] = json_step_data['step_detail'][s]['activity_status'][y]
                                                        arr_step_totle.append(json_info_step)
                                                        if json_step_data['step_detail'][s]['activity_status'][y] == 'Complete':
                                                            json_info_step2['step_status'] = 'Complete'
                                                        else:
                                                            try:
                                                                json_info_step2['step_status']
                                                            except Exception as ex:
                                                                json_info_step2['step_status'] = 'Incomplete'
                                            json_info_step2['step_info'] = arr_step_totle
                                            arr_step_info.append(json_info_step2)
                                    json_sky['file_user_status_detail'] = arr_step_info
                                    json_sky['step_info'] = [json_step_data]
                                    json_sky['recipient_Email'] = result_email_list

                    else:
                        # stepmax > 1
                        for y in range(len(list_Json[i]['datastep'])):
                            # print(list_Json[i]['datastep'][y])
                            sidCode = list_Json[i]['sid']
                            for y in paper_lesssender.query.filter_by(step_data_sid=sidCode).all():
                                json_sky = {}
                                json_sky['send_time'] = y.send_time
                                json_sky['send_time_string'] = str(y.send_time).split('+')[0]
                                json_sky['status'] = y.status
                                json_sky['sender_name'] = y.sender_name
                                json_sky['sender_email'] = y.sender_email
                                json_sky['sender_position'] = y.sender_position
                                json_sky['result'] = 'OK'
                                json_sky['file_name'] = y.file_name
                                json_sky['tracking_id'] = y.tracking_id
                                json_sky['step_code'] = y.step_code
                                result_stepMax = paper_lessstep.query.filter_by(step_Code=json_sky['step_code']).first()
                                json_sky['step_Max'] = int(result_stepMax.step_Max)
                                json_sky['step_data_sid'] = y.step_data_sid
                                result_stepdata = paper_lessdatastep.query.filter_by(sid=y.step_data_sid).first()
                                if result_stepdata != None:
                                    if result_stepdata.view_details != None:
                                        json_sky['view_details'] = eval(result_stepdata.view_details)
                                    else:
                                        json_sky['view_details'] = None
                                else:
                                    json_sky['view_details'] = None
                                json_sky['url_sign'] = None
                        result_resource = []
                        for i in paper_lesstransactionChain.query.filter_by(f_sid=sidCode).order_by((paper_lesstransactionChain.f_row).desc()).all():
                            json_data_result = {}
                            json_data_result['Account'] = eval(i.f_userAccount)['username']
                            json_data_result['order'] = i.f_row
                            json_data_result['result'] = 'OK'
                            json_data_result['file_id'] = i.f_file_id
                            json_data_result['transactionId'] = i.f_transactionId
                            json_data_result['datetime'] = i.f_timestamp
                            json_data_result['datetime_string'] = str(i.f_timestamp).split('+')[0]
                            json_data_result['user_id'] = eval(i.f_metadate)['metadata']['user_id']
                            result_resource.append(json_data_result)
                        json_sky['resource_OneChain'] = result_resource

                        for j in paper_lessdocument.query.filter_by(step_id=sidCode).all():
                            json_sky['document_Id'] = j.document_id
                        for n in paper_lesspdf.query.filter_by(fid=y.file_id).all():
                            if n.hash_sign != None or n.hash_sign == "":
                                json_sky['file_status'] = 'Complete'
                            else:
                                json_sky['file_status'] = 'Incomplete'

                        for i in paper_lessdatastep.query.filter_by(sid=json_sky['step_data_sid']).all():

                            arr_step = []
                            json_step_data = json.dumps(i.data_json)
                            json_step_data = json.loads(json_step_data)
                            json_step_data = eval(json_step_data)
                            if json_sky['step_Max'] > 1:
                                result_email_list = []
                                arr_step_info = []
                                for o in range(len(json_step_data)):
                                    arr_step.append(json_step_data[o])
                                for nn in range(len(arr_step)):
                                    arr_step_totle = []
                                    json_info_step2 = {}
                                    if 'step_detail' in json_step_data[nn]:
                                        for s in range(len(json_step_data[nn]['step_detail'])):
                                            for y in range(len(json_step_data[nn]['step_detail'][s]['activity_code'])):

                                                if json_step_data[nn]['step_detail'][s]['activity_code'][y] == 'A03':
                                                    json_info_step = {}
                                                    json_info_step['step_num'] = arr_step[nn]['step_num']
                                                    json_info_step['one_email'] = json_step_data[nn]['step_detail'][s]['one_email']
                                                    json_info_step['activity_status'] = json_step_data[nn]['step_detail'][s]['activity_status'][y]
                                                    result_email_list.append(json_info_step['one_email'])
                                                    arr_step_totle.append(json_info_step)
                                                    if arr_step[nn]['step_detail'][s]['activity_status'][y] == 'Complete':
                                                        json_info_step2['step_status'] = 'Complete'
                                                    else:
                                                        try:
                                                            json_info_step2['step_status']
                                                        except Exception as ex:
                                                            json_info_step2['step_status'] = 'Incomplete'
                                        json_info_step2['step_info'] = arr_step_totle
                                        arr_step_info.append(json_info_step2)
                                json_sky['file_user_status_detail'] = arr_step_info
                                json_sky['step_info'] = arr_step
                                json_sky['recipient_Email'] = result_email_list
                            else:
                                json_info_step2 = {}
                                arr_step_info = []
                                arr_step_totle = []
                                if 'step_detail' in json_step_data:
                                        for s in range(len(json_step_data['step_detail'])):
                                            for y in range(len(json_step_data['step_detail'][s]['activity_code'])):
                                                if json_step_data['step_detail'][s]['activity_code'][y] == 'A03':
                                                    json_info_step = {}
                                                    json_info_step['step_num'] = json_step_data['step_num']
                                                    json_info_step['one_email'] = json_step_data['step_detail'][s]['one_email']
                                                    json_info_step['activity_status'] = json_step_data['step_detail'][s]['activity_status'][y]
                                                    arr_step_totle.append(json_info_step)
                                                    if json_step_data['step_detail'][s]['activity_status'][y] == 'Complete':
                                                        json_info_step2['step_status'] = 'Complete'
                                                    else:
                                                        try:
                                                            json_info_step2['step_status']
                                                        except Exception as ex:
                                                            json_info_step2['step_status'] = 'Incomplete'
                                        json_info_step2['step_info'] = arr_step_totle
                                        arr_step_info.append(json_info_step2)
                                json_sky['file_user_status_detail'] = arr_step_info
                                json_sky['step_info'] = [json_step_data]


                arr_get.append(json_sky)
            if len(arr_get) != 0:
                return {'result': 'OK', 'messageText': arr_get,'status_Code':200}
            else:
                return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล ' + self.taxId ,'status_Code':200}
        except Exception as ex:
            return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล ' + self.taxId,'status_Code':200,'messageER':str(ex)}
            # return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล ' + self.taxId  + " " + str(ex),'status_Code':200}

    def select_track_eform(self,tracking_hash):
        self.tracking_hash = tracking_hash
        if len(self.tracking_hash) > 0:
            try:
                data_step = ''
                json_step_data = {}
                arr_get_sid = []
                k = paper_lesstrack.query.filter(paper_lesstrack.hash_sid_code==self.tracking_hash).first()
                if k != None:
                    json_file = {}
                    json_file['tracking'] = k.tracking
                    json_file['generate_time'] = k.t_dateTime
                    json_file['generate_time_string'] = str(k.t_dateTime).split('+')[0]
                    json_file['step'] = k.Step
                    # json_file['step_data_sid'] = k.step_data_sid
                    json_file['templateCode'] = k.step_Code
                    json_file['file_id'] = k.file_id
                    for j in paper_lessdocument.query.filter_by(step_id=k.step_data_sid).all():
                        json_file['document_Id'] = j.document_id
                    for n in paper_lesstable.query.filter_by(cid=k.convert_id).all():
                        print(n)
                        json_convert = {}
                        json_convert['name_file'] = n.nameFile
                        json_convert['result'] = 'OK'
                        json_convert['size_file'] = str(n.sizeFile) + " Mb"
                        json_convert['date_time'] = n.c_dateTime
                        json_convert['date_timeString'] = str(n.c_dateTime).split('+')[0]
                        json_convert['status'] = n.c_status
                    try:
                        json_file['file_info'] = [(json_convert)]
                    except Exception as ex:
                        print(ex)
                        json_file['file_info'] = None
                    for i in paper_lessdatastep.query.filter_by(sid=k.step_data_sid).all():
                        arr_step_info = []
                        json_step_data = json.dumps(i.data_json)
                        json_step_data = json.loads(json_step_data)
                        try:
                            json_step_data = eval(json_step_data)
                            if 'step_num' in json_step_data:
                                json_file['step_info'] = [json_step_data]
                            else:
                                for o in range(len(json_step_data)):
                                    arr_get_sid.append(json_step_data[o])
                                json_file['step_info'] = arr_get_sid
                        except Exception as ex:
                            return jsonify({'result': 'ER', 'messageText': 'ไม่พบข้อมูลเลข ' + self.tracking_hash,'messageER':str(ex),'status_Code':200}),200
                    return jsonify(json_file)
                else:
                    return jsonify({'result': 'ER', 'messageText': 'ไม่พบข้อมูลเลข ' + self.tracking_hash,'messageER':None,'status_Code':200}),200
            except Exception as ex:
                return jsonify({'result': 'ER', 'messageText': 'ไม่พบข้อมูลเลข ' + self.tracking_hash,'messageER':str(ex),'status_Code':200}),200
        else:
            return jsonify({'result': 'ER', 'messageText': 'กรุณาใส่ข้อมูลเลข ' + self.tracking_hash,'status_Code':200}),200


    def select_track(self,tracking):
        self.tracking = tracking
        if len(self.tracking) > 0:
            try:
                data_step = ''
                json_step_data = {}
                arr_get_sid = []
                json_data_res = {}
                list_data_res = []
                k = paper_lesstrack.query.filter_by(tracking=self.tracking).first()
                if k != None:
                    self.sidCode = k.step_data_sid
                else:
                    return jsonify({'result': 'ER', 'messageText': 'ไม่พบข้อมูลเลข ' + self.tracking,'messageER':str(ex)})
                try:
                    result_Select_step = paper_lessdatastep.query.filter(paper_lessdatastep.sid==self.sidCode).first()
                    result_Select_sender = paper_lesssender.query.filter(paper_lesssender.step_data_sid==self.sidCode).first()
                    result_Select_document = paper_lessdocument.query.filter(paper_lessdocument.step_id==self.sidCode).first()
                    if result_Select_document.fileid != None:
                        result_Select_pdf = paper_lesspdf.query.filter(paper_lesspdf.fid==result_Select_document.fileid).first()
                    if result_Select_sender != None:
                        json_data_res['tracking']  = result_Select_sender.tracking_id
                        json_data_res['tracking_id'] = result_Select_sender.tracking_id
                        json_data_res['sender_email'] = result_Select_sender.sender_email
                        json_data_res['sender_name'] = result_Select_sender.sender_name
                        json_data_res['send_time'] = result_Select_sender.send_time
                        json_data_res['sender_position'] = result_Select_sender.sender_position
                        date_time_stamp_ = result_Select_sender.send_time.timestamp()
                        date_time_stamp_ = int(date_time_stamp_)
                        json_data_res['send_time_display'] = convert_datetime_TH_2_display_sendTime(date_time_stamp_)
                        json_data_res['send_time_string'] = str(result_Select_sender.send_time).split('+')[0]
                        json_data_res['generate_time'] = convert_datetime_TH_2_display_sendTime(date_time_stamp_)
                        json_data_res['generate_time_string'] = str(result_Select_sender.send_time).split('+')[0]
                        json_data_res['step_code'] = result_Select_sender.step_code
                        json_data_res['step_data_sid'] = result_Select_sender.step_data_sid
                        json_data_res['document_Id'] = result_Select_sender.doc_id
                        json_data_res['file_name'] = result_Select_sender.file_name
                        json_data_res['template_webhook'] = result_Select_sender.template_webhook
                        json_data_res['email_center'] = result_Select_sender.email_center
                        json_data_res['status'] = result_Select_sender.status
                    if result_Select_document != None:
                        if result_Select_document.options_page != None:
                            json_data_res['options_page_document'] = [eval(result_Select_document.options_page)]
                        else:
                            json_data_res['options_page_document'] = []
                        json_data_res['stamp_all'] = result_Select_document.sign_page_options
                        json_data_res['document_time'] = int(result_Select_document.timest)
                        json_data_res['document_details'] = eval(result_Select_document.documentJson)
                        json_data_res['document_details_string'] = str(result_Select_document.documentJson)
                        json_data_res['file_id'] = int(result_Select_document.fileid)
                        json_data_res['urgent_code'] = result_Select_document.urgent_type
                        json_data_res['digit_sign'] = bool(result_Select_document.digit_sign)
                        json_data_res['attempted_folder'] = result_Select_document.attempted_folder
                    if result_Select_step != None:
                        json_data_res['view_details'] = eval(result_Select_step.view_details)
                        json_data_res['qrCode_position'] = eval(result_Select_step.qrCode_position)
                        if result_Select_step.qrCode_position != None or str(result_Select_step.qrCode_position).replace(' ','') != '':
                            json_data_res['qrCode_status'] = True
                        else:
                            json_data_res['qrCode_status'] = False
                    if result_Select_pdf != None:
                        if result_Select_pdf.string_sign != None:
                            json_data_res['file_status'] = 'Complete'
                        else:
                            json_data_res['file_status'] = 'InComplete'
                    step_infomation = eval(result_Select_step.data_json)
                    json_data_res['file_user_status_detail'] = []
                    if 'step_num' in step_infomation:
                        status_step_sum = ''
                        sum_status_step_list = []
                        list_check_step = []
                        json_step_info_2 = {}
                        step_list_data = []
                        step_ = step_infomation
                        step_num = step_infomation['step_num']
                        json_data_res['step_info'] = [eval(result_Select_step.data_json)]
                        json_step_info_2['step_status'] = ''
                        for u in range(len(step_['step_detail'])):
                            step_2 = step_['step_detail'][u]
                            for k in range(len(step_2['activity_code'])):
                                if step_2['activity_code'][k] == 'A03':
                                    json_step_info = {}
                                    json_step_info['activity_status'] = step_2['activity_status'][k]
                                    if json_step_info['activity_status'] == 'Complete' or json_step_info['activity_status'] == 'Reject':
                                        json_step_info['activity_time'] = step_2['activity_time'][k]
                                    else:
                                        json_step_info['activity_time'] = None
                                    json_step_info['one_email'] = step_2['one_email']
                                    query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(step_2['one_email'])).all()
                                    if len(query_name_account) != 0:
                                        tmp_account_name = eval(query_name_account[0].citizen_data)
                                        try:
                                            tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                        except Exception as e:
                                            tmp_account_name=None
                                    else:
                                        tmp_account_name = None
                                    json_step_info['account_name'] = tmp_account_name
                                    json_step_info['step_num'] = step_num

                                    list_check_step.append(json_step_info['activity_status'])
                                    step_list_data.append(json_step_info)
                            json_step_info_2['step_info'] = step_list_data
                            if json_step_info_2['step_status'] == '':
                                if 'Reject' in list_check_step:
                                    json_step_info_2['step_status'] = 'Reject'
                                elif 'Incomplete' in list_check_step:
                                    json_step_info_2['step_status'] = 'Incomplete'
                                elif 'Pending' in list_check_step:
                                    json_step_info_2['step_status'] = 'Incomplete'
                                else:
                                    json_step_info_2['step_status'] = 'Complete'
                            sum_status_step_list.append(json_step_info_2['step_status'])
                        json_data_res['file_user_status_detail'].append(json_step_info_2)

                        # if 'Reject' in sum_status_step_list:
                        #     status_step_sum = 'Reject'
                        #     for u in range(len(step_['step_detail'])):
                        #         step_2 = step_['step_detail'][u]
                        #         for k in range(len(step_2['activity_code'])):
                        #             if self.emailUser == step_2['one_email']:
                        #                 json_data_res['file_user_status'] = 'Reject'
                        #             # json_data_res['file_user_status'] = step_2['activity_status'][k]
                        # elif 'Incomplete' in sum_status_step_list:
                        #     status_step_sum = 'Incomplete'
                        #     for u in range(len(step_['step_detail'])):
                        #         step_2 = step_['step_detail'][u]
                        #         json_data_res['file_user_status'] = step_2['activity_status'][k]
                        # elif 'Pending' in sum_status_step_list:
                        #     status_step_sum = 'Incomplete'
                        #     for u in range(len(step_['step_detail'])):
                        #         step_2 = step_['step_detail'][u]
                        #         if self.emailUser == step_2['one_email']:
                        #             for k in range(len(step_2['activity_code'])):
                        #                     if step_2['activity_code'][k] == 'A03':
                        #                         json_data_res['file_user_status'] = step_2['activity_status'][k]
                        # else:
                        #     status_step_sum = 'Complete'
                            # for u in range(len(step_['step_detail'])):
                            #     step_2 = step_['step_detail'][u]
                            #     if self.emailUser == step_2['one_email']:
                            #         for k in range(len(step_2['activity_code'])):
                            #                 if step_2['activity_code'][k] == 'A03':
                            #                     json_data_res['file_user_status'] = step_2['activity_status'][k]
                        json_data_res['file_status_sum'] = status_step_sum
                    else:
                        status_step_sum = ''
                        sum_status_step_list = []
                        alr_mail = []
                        json_data_res['step_info'] = eval(result_Select_step.data_json)
                        for i in range(len(step_infomation)):
                            list_check_step = []
                            json_step_info_2 = {}
                            step_list_data = []
                            step_ = step_infomation[i]
                            step_num = step_infomation[i]['step_num']
                            json_step_info_2['step_status'] = ''
                            for u in range(len(step_['step_detail'])):
                                step_2 = step_['step_detail'][u]
                                for k in range(len(step_2['activity_code'])):
                                    if step_2['activity_code'][k] == 'A03':
                                        json_step_info = {}
                                        json_step_info['activity_status'] = step_2['activity_status'][k]
                                        if json_step_info['activity_status'] == 'Complete' or json_step_info['activity_status'] == 'Reject':
                                            json_step_info['activity_time'] = step_2['activity_time'][k]
                                        else:
                                            json_step_info['activity_time'] = None
                                        json_step_info['one_email'] = step_2['one_email']
                                        query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(step_2['one_email'])).all()
                                        if len(query_name_account) != 0:
                                            try:
                                                tmp_account_name = eval(query_name_account[0].citizen_data)
                                                tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                            except Exception as e:
                                                tmp_account_name = None
                                                exc_type, exc_obj, exc_tb = sys.exc_info()
                                                fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                                                print(exc_type, fname, exc_tb.tb_lineno)

                                        else:
                                            tmp_account_name = None
                                        json_step_info['step_num'] = step_num
                                        json_step_info['account_name'] = tmp_account_name
                                        list_check_step.append(json_step_info['activity_status'])
                                        step_list_data.append(json_step_info)
                                json_step_info_2['step_info'] = step_list_data
                                if json_step_info_2['step_status'] == '':
                                    if 'Reject' in list_check_step:
                                        json_step_info_2['step_status'] = 'Reject'
                                    elif 'Incomplete' in list_check_step:
                                        json_step_info_2['step_status'] = 'Incomplete'
                                    elif 'Pending' in list_check_step:
                                        json_step_info_2['step_status'] = 'Incomplete'
                                    else:
                                        json_step_info_2['step_status'] = 'Complete'
                                sum_status_step_list.append(json_step_info_2['step_status'])
                            json_data_res['file_user_status_detail'].append(json_step_info_2)
                        if 'Reject' in sum_status_step_list:
                            status_step_sum = 'Reject'
                        elif 'Incomplete' in sum_status_step_list:
                            status_step_sum = 'Incomplete'
                        elif 'Pending' in sum_status_step_list:
                            status_step_sum = 'Incomplete'
                        else:
                            status_step_sum = 'Complete'
                        json_data_res['file_status_sum'] = status_step_sum

                    list_data_res.append(json_data_res)
                    if len(list_data_res) != 0:
                        return jsonify(json_data_res),200
                    else:
                        return jsonify({'result':'ER','messageText':[],'messageER':'not found sidcode'}),200
                except Exception as ex:
                    exc_type, exc_obj, exc_tb = sys.exc_info()
                    fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                    print(exc_type, fname, exc_tb.tb_lineno)
                    return {'result':'ER','messageText':[],'messageER':'notfound data' + str(ex)}

            except Exception as ex:

                return jsonify({'result': 'ER', 'messageText': 'ไม่พบข้อมูลเลข ' + self.tracking,'messageER':str(ex)})
        else:
            return jsonify({'result': 'ER', 'messageText': 'กรุณาใส่ข้อมูลเลข ' + self.tracking})



    def select_check_track(self, tracking):
        self.tracking = tracking
        return (paper_lesstrack.query.filter_by(tracking=self.tracking).count())

    def select_check_refCode(self, refCode):
        self.refCode = refCode
        return (paper_lessrefCode.query.filter_by(ref_Code=self.refCode).count())

    def select_get_template_tax_new_v10(self,taxId):
        self.taxId = taxId
        tmp_json = {}
        tmp_arr_get = []
        try:
            tmp_list_status = ["ACTIVE"]
            query_temp = db.session.query(
                paper_lessstep.step_Code,
                paper_lessstep.step_Data,
                paper_lessstep.step_Max,
                paper_lessstep.username,
                paper_lessstep.email,
                paper_lessstep.DateTime,
                paper_lessstep.step_Description,
                paper_lessstep.step_Name,
                paper_lessstep.step_Upload,
                paper_lessstep.template_biz,
                paper_lessstep.qrCode_position,
                paper_lessstep.status,
                paper_lessstep.documentDetails,
                paper_lessstep.urgent_type,
                paper_lessstep.webhook,
                paper_lessstep.condition_temp,
                paper_lessstep.email_center,
                paper_lessstep.formula_temp,
                paper_lessstep.digit_sign,
                paper_lessstep.page_sign_options,
                paper_lessstep.options_page,
                paper_lessstep.status_use,
                paper_lessstep.time_expire,
                paper_lessstep.importance_doc,
                paper_lessstep.last_digit_sign,
                paper_lessstep.status_ref,
                # paper_lessstep.status_use,
                paper_lessdocument_detail.documentJson)\
                .join(paper_lessdocument_detail, paper_lessdocument_detail.documentType==paper_lessstep.documentDetails)\
                .filter(paper_lessstep.status=='ACTIVE',paper_lessstep.template_biz.contains(self.taxId))\
                .filter(paper_lessdocument_detail.documentStatus=="ACTIVE",paper_lessdocument_detail.biz_info!=None,paper_lessdocument_detail.biz_info!='',paper_lessdocument_detail.biz_info.contains(self.taxId))\
                .order_by((paper_lessstep.documentDetails).asc())\
                .all()
            for n in query_temp:                
                tmp_asdict = n._asdict()
                try:
                    tmp_options_page = eval(tmp_asdict['options_page'])
                except Exception as e:
                    tmp_options_page = {}
                try:
                    tmpformula_temp = eval(tmp_asdict['formula_temp'])
                    tmpformula_temp_string = tmp_asdict['formula_temp']
                except Exception as e:
                    tmpformula_temp = None
                    tmpformula_temp_string = tmp_asdict['formula_temp']
                if tmp_asdict['qrCode_position'] != None:
                    try:
                        tmp_qrCode_position = eval(tmp_asdict['qrCode_position'])
                    except Exception as ex:
                        return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล qrCode_position ให้เป็น Json ได้'}
                else:
                    tmp_qrCode_position = None
                if tmp_asdict['documentDetails'] != None:
                    tmp_document_typeJson = eval(tmp_asdict['documentJson'])
                    tmp_document_typeJson_string = tmp_asdict['documentJson']
                else:
                    jsondetailsDoc = {}
                    jsondetailsDoc['document_type'] = None
                    jsondetailsDoc['document_name'] = None
                    jsondetailsDoc['document_remark'] = None
                    tmp_document_typeJson = jsondetailsDoc
                    tmp_document_typeJson_string = str(jsondetailsDoc)
                tmp_urgent_type = 'M'
                tmp_urgent_string_th = 'ปกติ'
                tmp_urgent_string_en = 'MEDIUM'
                if tmp_asdict['urgent_type'] != None:
                    tmp_urgent_type = tmp_asdict['urgent_type']
                    if tmp_urgent_type == 'M':
                        tmp_urgent_string_th = 'ปกติ'
                        tmp_urgent_string_en = 'MEDIUM'
                    elif tmp_urgent_type == 'U':
                        tmp_urgent_string_th = 'ด่วน'
                        tmp_urgent_string_en = 'URGENT'
                    elif tmp_urgent_type == 'I':
                        tmp_urgent_string_th = 'ด่วนมาก'
                        tmp_urgent_string_en = 'IMMEDIATE'
                try:
                    data_step = eval(tmp_asdict['step_Data'])
                except Exception as ex:
                    return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล Step ให้เป็น Json ได้'}
                try:
                    step_Upload = eval(tmp_asdict['step_Upload'])
                except Exception as ex:
                    return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล step_Upload ให้เป็น Json ได้'}
                if tmp_asdict['step_Max'] == 1:
                    tmp_data_step = [data_step]
                else:
                    tmp_data_step = data_step
                try:
                    data_step = tmp_asdict['step_Data']
                    data_step = eval(data_step)
                    if tmp_asdict['step_Max'] != 1:
                        step_infomation = list(eval(tmp_asdict['step_Data']))
                    else:
                        step_infomation = [data_step]
                    tmp_sign_detail_list = []
                    muti_sign = False
                    for i in range(len(step_infomation)):
                        sign_json_info = {}
                        tmp_sign_list_info = []
                        step_ = step_infomation[i]
                        step_num = step_infomation[i]['step_num']
                        if 'step_sign' in step_:
                            tmp_stepsign = step_['step_sign']
                            tmp_status_stepsign = tmp_stepsign['status']
                            if tmp_status_stepsign == True:
                                muti_sign = True
                                tmp_data_stepsign = tmp_stepsign['data']
                                for y in range(len(tmp_data_stepsign)):
                                    step_signning = tmp_data_stepsign[y]
                                    tmp_sign_list_info.append(step_signning)
                        for u in range(len(step_['step_detail'])):
                            step_2 = step_['step_detail'][u]
                            for zz in range(len(step_2['activity_data'])): 
                                if 'status' in step_2['activity_data'][zz]:
                                    sign_json_info = step_2['activity_data'][zz]
                                    tmp_sign_list_info.append(sign_json_info)
                        sign_json_info = {
                            'data':tmp_sign_list_info,
                            'step_num':step_num
                        }
                        tmp_sign_detail_list.append(sign_json_info)
                    # json_sky['sign_info'] = tmp_sign_detail_list
                except Exception as e:
                    exc_type, exc_obj, exc_tb = sys.exc_info()
                    fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                    print(exc_type, fname, exc_tb.tb_lineno)
                    tmp_sign_detail_list = []
                # json_sky['multi_sign'] = muti_sign
                tmpstatus_use = tmp_asdict['status_use']
                tmptime_expire = tmp_asdict['time_expire']
                tmpimportance_doc = tmp_asdict['importance_doc']
                tmplast_digit_sign = tmp_asdict['last_digit_sign']
                tmpstatus_ref = tmp_asdict['status_ref']
                tmp_json = {
                    'stamp_all':tmp_asdict['page_sign_options'],
                    'step_Code':tmp_asdict['step_Code'],
                    'dateTime':tmp_asdict['DateTime'],
                    'dateTime_string':str(tmp_asdict['DateTime']).split('+')[0],
                    'condition_string':tmp_asdict['condition_temp'],
                    'step_Upload':json.loads(json.dumps(tmp_asdict['step_Upload'])),
                    'template_webhook':tmp_asdict['webhook'],
                    'email_center':tmp_asdict['email_center'],
                    'options_page_string':tmp_asdict['options_page'],
                    'options_page':tmp_options_page,
                    'formula_temp_string':tmpformula_temp_string,
                    'formula_temp':tmpformula_temp,
                    'digit_sign':bool(tmp_asdict['digit_sign']),
                    'username':tmp_asdict['username'],
                    'step_Max':int(tmp_asdict['step_Max']),
                    'step_Name':tmp_asdict['step_Name'],
                    'qrCode_position':tmp_qrCode_position,
                    'step_Description':tmp_asdict['step_Description'],
                    'document_details':tmp_document_typeJson,
                    'document_details_string':tmp_document_typeJson_string,
                    'email':tmp_asdict['email'],
                    'urgent_code':tmp_urgent_type,
                    'urgent_string_th':tmp_urgent_string_th,
                    'urgent_string_en':tmp_urgent_string_en,
                    'data_step':tmp_data_step,
                    'sign_info':tmp_sign_detail_list,
                    'multi_sign':muti_sign,
                    'status_ref':tmpstatus_ref,
                    'status_use':tmpstatus_use,
                    'time_expire':tmptime_expire,
                    'last_digit_sign':tmplast_digit_sign,
                    'importance':tmpimportance_doc
                    # 'use_status':tmp_asdict['status_use']
                }
                tmp_arr_get.append(tmp_json)
            if len(tmp_arr_get) != 0:
                return {'result':'OK','messageText':tmp_arr_get,'status_Code':200}
            else:
                return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
        except Exception as ex:
            print(ex)
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล','messageER':str(ex)}
        finally:
            db.session.close()

    def select_get_template_tax_new(self,taxId):
        # self.username = username
        self.taxId = taxId
        try:
            tmp_list_status = ["ACTIVE"]
            query_template = paper_lessstep.query.with_entities(
                paper_lessstep.step_Code,
                paper_lessstep.step_Data,
                paper_lessstep.step_Max,
                paper_lessstep.username,
                paper_lessstep.email,
                paper_lessstep.DateTime,
                paper_lessstep.step_Description,
                paper_lessstep.step_Name,
                paper_lessstep.step_Upload,
                paper_lessstep.template_biz,
                paper_lessstep.qrCode_position,
                paper_lessstep.status,
                paper_lessstep.documentDetails,
                paper_lessstep.urgent_type,
                paper_lessstep.webhook,
                paper_lessstep.condition_temp,
                paper_lessstep.email_center,
                paper_lessstep.formula_temp,
                paper_lessstep.digit_sign,
                paper_lessstep.page_sign_options,
                paper_lessstep.options_page,
                # paper_lessstep.status_use
                # 21
                ).filter(paper_lessstep.status.in_(tmp_list_status)).order_by((paper_lessstep.documentDetails).asc()).all()
            # print(query_template)
            # return ''
            arr_get = []
            for i in range(len(query_template)):
                if query_template[i][9] != None:
                    if str(query_template[i][9]).replace(' ','') != '':
                        null = None
                        biz_info_template = eval(query_template[i][9])
                        taxId_db = biz_info_template['id_card_num']
                        if str(self.taxId).replace(' ','') != '':
                            if self.taxId == taxId_db:
            # for i in paper_lessstep.query.filter(paper_lessstep.status=="ACTIVE").order_by((paper_lessstep.documentDetails).asc()):
                # if i.template_biz != None:
                #     if str(i.template_biz).replace(' ','') != '':
                #         biz_info_template = eval(i.template_biz)
                #         taxId_db = biz_info_template['id_card_num']
                #         if str(self.taxId).replace(' ','') != '':
                #             if self.taxId == taxId_db:
                                try:
                                    json_sky = {}
                                    muti_sign = False
                                    json_sky['stamp_all'] = query_template[i][19]
                                    json_sky['step_Code'] = query_template[i][0]
                                    json_sky['dateTime'] = query_template[i][5]
                                    json_sky['dateTime_string'] = str(query_template[i][5]).split('+')[0]
                                    json_sky['data_step'] = json.dumps(query_template[i][1])
                                    json_sky['data_step'] = json.loads(json_sky['data_step'])
                                    json_sky['condition_string'] = query_template[i][15]
                                    json_sky['step_Upload'] = json.dumps(query_template[i][8])
                                    json_sky['step_Upload'] = json.loads(json_sky['step_Upload'])
                                    json_sky['template_webhook'] = query_template[i][14]
                                    json_sky['email_center'] = query_template[i][16]
                                    json_sky['options_page_string'] = str(query_template[i][20])
                                    # json_sky['use_status'] = query_template[i][21]
                                    try:
                                        data_step = query_template[i][1]
                                        data_step = eval(data_step)
                                        if query_template[i][2] != 1:
                                            step_infomation = list(eval(query_template[i][1]))
                                        else:
                                            step_infomation = [data_step]
                                        tmp_sign_detail_list = []
                                        for i in range(len(step_infomation)):
                                            sign_json_info = {}
                                            tmp_sign_list_info = []
                                            step_ = step_infomation[i]
                                            step_num = step_infomation[i]['step_num']
                                            if 'step_sign' in step_:
                                                tmp_stepsign = step_['step_sign']
                                                tmp_status_stepsign = tmp_stepsign['status']
                                                if tmp_status_stepsign == True:
                                                    muti_sign = True
                                                    tmp_data_stepsign = tmp_stepsign['data']
                                                    for y in range(len(tmp_data_stepsign)):
                                                        step_signning = tmp_data_stepsign[y]
                                                        tmp_sign_list_info.append(step_signning)
                                            for u in range(len(step_['step_detail'])):
                                                step_2 = step_['step_detail'][u]
                                                for zz in range(len(step_2['activity_data'])): 
                                                    if 'status' in step_2['activity_data'][zz]:
                                                        sign_json_info = step_2['activity_data'][zz]
                                                        tmp_sign_list_info.append(sign_json_info)
                                            sign_json_info = {
                                                'data':tmp_sign_list_info,
                                                'step_num':step_num
                                            }
                                            tmp_sign_detail_list.append(sign_json_info)
                                        json_sky['sign_info'] = tmp_sign_detail_list
                                    except Exception as e:
                                        exc_type, exc_obj, exc_tb = sys.exc_info()
                                        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                                        print(exc_type, fname, exc_tb.tb_lineno)
                                        json_sky['sign_info'] = []
                                    json_sky['multi_sign'] = muti_sign

                                    try:
                                        json_sky['options_page'] = eval(query_template[i][20])
                                    except Exception as e:
                                        json_sky['options_page'] = {}
                                    try:
                                        json_sky['formula_temp'] = eval(query_template[i][17])
                                        json_sky['formula_temp_string'] = query_template[i][17]
                                    except Exception as e:
                                        json_sky['formula_temp'] = None
                                        json_sky['formula_temp_string'] = None
                                    json_sky['digit_sign'] = bool(query_template[i][18])
                                    try:
                                        data_step = eval(json_sky['data_step'])
                                    except Exception as ex:
                                        return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล Step ให้เป็น Json ได้'}
                                    try:
                                        step_Upload = eval(json_sky['step_Upload'])
                                    except Exception as ex:
                                        return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล step_Upload ให้เป็น Json ได้'}
                                    json_sky['username'] = query_template[i][3]
                                    json_sky['step_Max'] = query_template[i][2]
                                    json_sky['step_Name'] = query_template[i][7]
                                    if query_template[i][10] != None:
                                        try:
                                            json_sky['qrCode_position'] = eval(query_template[i][10])
                                        except Exception as ex:
                                            return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล qrCode_position ให้เป็น Json ได้'}
                                    else:
                                        json_sky['qrCode_position'] = None
                                    json_sky['step_Description'] = query_template[i][6]
                                    if query_template[i][12] != None:
                                        if str(query_template[i][12]).replace(' ','') != '':
                                            result_detailDoc = paper_lessdocument_detail.query.filter(paper_lessdocument_detail.documentStatus=="ACTIVE",paper_lessdocument_detail.documentType==query_template[i][12],paper_lessdocument_detail.biz_info!=None,paper_lessdocument_detail.biz_info!='',paper_lessdocument_detail.biz_info.contains(self.taxId)).first()
                                            print(result_detailDoc)
                                            if result_detailDoc != None:
                                                json_sky['document_details'] = eval(result_detailDoc.documentJson)
                                                json_sky['document_details_string'] = result_detailDoc.documentJson
                                            else:
                                                jsondetailsDoc = {}
                                                jsondetailsDoc['document_type'] = None
                                                jsondetailsDoc['document_name'] = None
                                                jsondetailsDoc['document_remark'] = None
                                                json_sky['document_details'] = jsondetailsDoc
                                                json_sky['document_details_string'] = str(jsondetailsDoc)
                                        else:
                                            jsondetailsDoc = {}
                                            jsondetailsDoc['document_type'] = None
                                            jsondetailsDoc['document_name'] = None
                                            jsondetailsDoc['document_remark'] = None
                                            json_sky['document_details'] = jsondetailsDoc
                                            json_sky['document_details_string'] = str(jsondetailsDoc)
                                    else:
                                        jsondetailsDoc = {}
                                        jsondetailsDoc['document_type'] = None
                                        jsondetailsDoc['document_name'] = None
                                        jsondetailsDoc['document_remark'] = None
                                        json_sky['document_details'] = jsondetailsDoc
                                        json_sky['document_details_string'] = str(jsondetailsDoc)
                                    json_sky['email'] = query_template[i][4]
                                    if query_template[i][13] != None:
                                        json_sky['urgent_code'] = query_template[i][13]
                                        if query_template[i][13] == 'M':
                                            json_sky['urgent_string_th'] = 'ปกติ'
                                            json_sky['urgent_string_en'] = 'MEDIUM'
                                        elif query_template[i][13] == 'U':
                                            json_sky['urgent_string_th'] = 'ด่วน'
                                            json_sky['urgent_string_en'] = 'URGENT'
                                        elif query_template[i][13] == 'I':
                                            json_sky['urgent_string_th'] = 'ด่วนมาก'
                                            json_sky['urgent_string_en'] = 'IMMEDIATE'
                                    else:
                                        json_sky['urgent_code'] = None
                                        json_sky['urgent_string_th'] = None
                                        json_sky['urgent_string_en'] = None
                                    if json_sky['step_Max'] == 1:
                                        json_sky['data_step'] = [data_step]
                                    else:
                                        json_sky['data_step'] = data_step
                                    json_sky['step_Upload'] = step_Upload
                                    # json_sky = {}
                                    # json_sky['stamp_all'] = i.page_sign_options
                                    # json_sky['step_Code'] = i.step_Code
                                    # json_sky['dateTime'] = i.DateTime
                                    # json_sky['dateTime_string'] = str(i.DateTime).split('+')[0]
                                    # json_sky['data_step'] = json.dumps(i.step_Data)
                                    # json_sky['data_step'] = json.loads(json_sky['data_step'])
                                    # json_sky['condition_string'] = i.condition_temp
                                    # json_sky['step_Upload'] = json.dumps(i.step_Upload)
                                    # json_sky['step_Upload'] = json.loads(json_sky['step_Upload'])
                                    # json_sky['template_webhook'] = i.webhook
                                    # json_sky['email_center'] = i.email_center
                                    # json_sky['options_page'] = i.options_page
                                    # try:
                                    #     json_sky['formula_temp'] = eval(i.formula_temp)
                                    #     json_sky['formula_temp_string'] = i.formula_temp
                                    # except Exception as e:
                                    #     json_sky['formula_temp'] = None
                                    #     json_sky['formula_temp_string'] = None
                                    # json_sky['digit_sign'] = bool(i.digit_sign)
                                    # try:
                                    #     data_step = eval(json_sky['data_step'])
                                    # except Exception as ex:
                                    #     return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล Step ให้เป็น Json ได้'}
                                    # try:
                                    #     step_Upload = eval(json_sky['step_Upload'])
                                    # except Exception as ex:
                                    #     return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล step_Upload ให้เป็น Json ได้'}
                                    # json_sky['username'] = i.username
                                    # json_sky['step_Max'] = i.step_Max
                                    # json_sky['step_Name'] = i.step_Name
                                    # if i.qrCode_position != None:
                                    #     try:
                                    #         json_sky['qrCode_position'] = eval(i.qrCode_position)
                                    #     except Exception as ex:
                                    #         return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล qrCode_position ให้เป็น Json ได้'}
                                    # else:
                                    #     json_sky['qrCode_position'] = None
                                    # json_sky['step_Description'] = i.step_Description
                                    # if i.documentDetails != None:
                                    #     if str(i.documentDetails).replace(' ','') != '':
                                    #         result_detailDoc = paper_lessdocument_detail.query.filter(paper_lessdocument_detail.documentStatus=="ACTIVE",paper_lessdocument_detail.documentType==i.documentDetails,paper_lessdocument_detail.biz_info!=None).first()
                                    #         # print(result_detailDoc.biz_info)
                                    #         if result_detailDoc != None:
                                    #             json_sky['document_details'] = eval(result_detailDoc.documentJson)
                                    #             json_sky['document_details_string'] = result_detailDoc.documentJson
                                    #         else:
                                    #             jsondetailsDoc = {}
                                    #             jsondetailsDoc['document_type'] = None
                                    #             jsondetailsDoc['document_name'] = None
                                    #             jsondetailsDoc['document_remark'] = None
                                    #             json_sky['document_details'] = jsondetailsDoc
                                    #             json_sky['document_details_string'] = str(jsondetailsDoc)
                                    #     else:
                                    #         jsondetailsDoc = {}
                                    #         jsondetailsDoc['document_type'] = None
                                    #         jsondetailsDoc['document_name'] = None
                                    #         jsondetailsDoc['document_remark'] = None
                                    #         json_sky['document_details'] = jsondetailsDoc
                                    #         json_sky['document_details_string'] = str(jsondetailsDoc)
                                    # else:
                                    #     jsondetailsDoc = {}
                                    #     jsondetailsDoc['document_type'] = None
                                    #     jsondetailsDoc['document_name'] = None
                                    #     jsondetailsDoc['document_remark'] = None
                                    #     json_sky['document_details'] = jsondetailsDoc
                                    #     json_sky['document_details_string'] = str(jsondetailsDoc)
                                    # json_sky['email'] = i.email
                                    # if i.urgent_type != None:
                                    #     json_sky['urgent_code'] = i.urgent_type
                                    #     if i.urgent_type == 'M':
                                    #         json_sky['urgent_string_th'] = 'ปกติ'
                                    #         json_sky['urgent_string_en'] = 'MEDIUM'
                                    #     elif i.urgent_type == 'U':
                                    #         json_sky['urgent_string_th'] = 'ด่วน'
                                    #         json_sky['urgent_string_en'] = 'URGENT'
                                    #     elif i.urgent_type == 'I':
                                    #         json_sky['urgent_string_th'] = 'ด่วนมาก'
                                    #         json_sky['urgent_string_en'] = 'IMMEDIATE'
                                    # else:
                                    #     json_sky['urgent_code'] = None
                                    #     json_sky['urgent_string_th'] = None
                                    #     json_sky['urgent_string_en'] = None
                                    # if json_sky['step_Max'] == 1:
                                    #     json_sky['data_step'] = [data_step]
                                    # else:
                                    #     json_sky['data_step'] = data_step
                                    # json_sky['step_Upload'] = step_Upload
                                    arr_get.append(json_sky)
                                except Exception as e:
                                    return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล','messageER':str(e)}

            if len(arr_get) != 0:
                return {'result':'OK','messageText':arr_get,'status_Code':200}
            else:
                return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
        except Exception as ex:
            print(ex)
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล','messageER':str(ex)}

    def select_get_template(self, username):
        self.username = username
        try:
            arr_get = []
            for k in paper_lessstep.query.filter(paper_lessstep.username==self.username,paper_lessstep.status=="ACTIVE").filter(or_(paper_lessstep.template_biz=='',paper_lessstep.template_biz==None)).order_by((paper_lessstep.sid).asc()):
                # print(k)
                json_sky = {}
                muti_sign = False
                json_sky['step_Code'] = k.step_Code
                json_sky['dateTime'] = k.DateTime
                json_sky['dateTime_string'] = str(k.DateTime).split('+')[0]
                json_sky['data_step'] = json.dumps(k.step_Data)
                json_sky['data_step'] = json.loads(json_sky['data_step'])
                json_sky['condition_string'] = k.condition_temp
                json_sky['template_webhook'] = k.webhook
                json_sky['email_center'] = k.email_center
                json_sky['stamp_all'] = k.page_sign_options
                json_sky['step_Upload'] = json.dumps(k.step_Upload)
                json_sky['step_Upload'] = json.loads(json_sky['step_Upload'])
                json_sky['options_page_string'] = k.options_page
                # json_sky['use_status'] = k.status_use
                try:
                    json_sky['options_page'] = eval(k.options_page)
                except Exception as e:
                    json_sky['options_page'] = {}
                try:
                    json_sky['formula_temp'] = eval(k.formula_temp)
                    json_sky['formula_temp_string'] = k.formula_temp
                except Exception as e:
                    json_sky['formula_temp'] = None
                    json_sky['formula_temp_string'] = None
                try:
                    data_step = json_sky['data_step']
                    data_step = eval(data_step)
                    if k.step_Max != 1:
                        step_infomation = list(eval(k.step_Data))
                    else:
                        step_infomation = [data_step]
                    tmp_sign_detail_list = []
                    for i in range(len(step_infomation)):
                        sign_json_info = {}
                        tmp_sign_list_info = []
                        step_ = step_infomation[i]
                        step_num = step_infomation[i]['step_num']
                        if 'step_sign' in step_:
                            tmp_stepsign = step_['step_sign']
                            tmp_status_stepsign = tmp_stepsign['status']
                            if tmp_status_stepsign == True:
                                muti_sign = True
                                tmp_data_stepsign = tmp_stepsign['data']
                                for y in range(len(tmp_data_stepsign)):
                                    step_signning = tmp_data_stepsign[y]
                                    tmp_sign_list_info.append(step_signning)
                        for u in range(len(step_['step_detail'])):
                            step_2 = step_['step_detail'][u]
                            for zz in range(len(step_2['activity_data'])): 
                                if 'status' in step_2['activity_data'][zz]:
                                    sign_json_info = step_2['activity_data'][zz]
                                    tmp_sign_list_info.append(sign_json_info)
                        sign_json_info = {
                            'data':tmp_sign_list_info,
                            'step_num':step_num
                        }
                        tmp_sign_detail_list.append(sign_json_info)
                    json_sky['sign_info'] = tmp_sign_detail_list
                except Exception as e:
                    exc_type, exc_obj, exc_tb = sys.exc_info()
                    fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                    print(exc_type, fname, exc_tb.tb_lineno)
                    json_sky['sign_info'] = []
                json_sky['multi_sign'] = muti_sign
                json_sky['digit_sign'] = bool(k.digit_sign)
                try:
                    data_step = eval(json_sky['data_step'])
                except Exception as ex:
                    return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล Step ให้เป็น Json ได้'}
                try:
                    step_Upload = eval(json_sky['step_Upload'])
                except Exception as ex:
                    return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล step_Upload ให้เป็น Json ได้'}
                json_sky['username'] = k.username
                json_sky['step_Max'] = k.step_Max
                json_sky['step_Name'] = k.step_Name
                if k.qrCode_position != None:
                    try:
                        json_sky['qrCode_position'] = eval(k.qrCode_position)
                    except Exception as ex:
                        return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล qrCode_position ให้เป็น Json ได้'}
                else:
                    json_sky['qrCode_position'] = None
                json_sky['step_Description'] = k.step_Description
                if k.documentDetails != None:
                    if str(k.documentDetails).replace(' ','') != '':
                        print(k.documentDetails)
                        result_detailDoc = paper_lessdocument_detail.query.filter_by(documentUser=self.username,documentStatus="ACTIVE",documentType=k.documentDetails).first()
                        if result_detailDoc != None:
                            json_sky['document_details'] = eval(result_detailDoc.documentJson)
                            json_sky['document_details_string'] = result_detailDoc.documentJson
                        else:
                            jsondetailsDoc = {}
                            jsondetailsDoc['document_type'] = None
                            jsondetailsDoc['document_name'] = None
                            jsondetailsDoc['document_remark'] = None
                            json_sky['document_details'] = jsondetailsDoc
                            json_sky['document_details_string'] = str(jsondetailsDoc)
                    else:
                        jsondetailsDoc = {}
                        jsondetailsDoc['document_type'] = None
                        jsondetailsDoc['document_name'] = None
                        jsondetailsDoc['document_remark'] = None
                        json_sky['document_details'] = jsondetailsDoc
                        json_sky['document_details_string'] = str(jsondetailsDoc)
                else:
                    jsondetailsDoc = {}
                    jsondetailsDoc['document_type'] = None
                    jsondetailsDoc['document_name'] = None
                    jsondetailsDoc['document_remark'] = None
                    json_sky['document_details'] = jsondetailsDoc
                    json_sky['document_details_string'] = str(jsondetailsDoc)
                json_sky['email'] = k.email
                if k.urgent_type != None:
                    json_sky['urgent_code'] = k.urgent_type
                    if k.urgent_type == 'M':
                        json_sky['urgent_string_th'] = 'ปกติ'
                        json_sky['urgent_string_en'] = 'MEDIUM'
                    elif k.urgent_type == 'U':
                        json_sky['urgent_string_th'] = 'ด่วน'
                        json_sky['urgent_string_en'] = 'URGENT'
                    elif k.urgent_type == 'I':
                        json_sky['urgent_string_th'] = 'ด่วนมาก'
                        json_sky['urgent_string_en'] = 'IMMEDIATE'
                else:
                    json_sky['urgent_code'] = None
                    json_sky['urgent_string_th'] = None
                    json_sky['urgent_string_en'] = None
                if json_sky['step_Max'] == 1:
                    json_sky['data_step'] = [data_step]
                else:
                    json_sky['data_step'] = data_step
                json_sky['step_Upload'] = step_Upload
                arr_get.append(json_sky)
            if len(arr_get) != 0:
                return {'result':'OK','messageText':arr_get,'status_Code':200}
            else:
                return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}

    def select_get_template_Reject(self, username):
        self.username = username
        try:
            arr_get = []
            for k in paper_lessstep.query.filter_by(username=self.username,status="REJECT").order_by((paper_lessstep.sid).asc()):
                json_sky = {}
                json_sky['step_Code'] = k.step_Code
                json_sky['dateTime'] = k.DateTime
                json_sky['dateTime_string'] = str(k.DateTime).split('+')[0]
                json_sky['data_step'] = json.dumps(k.step_Data)
                json_sky['data_step'] = json.loads(json_sky['data_step'])
                # json_sky['template_String'] = k.template_images
                json_sky['step_Upload'] = json.dumps(k.step_Upload)
                json_sky['step_Upload'] = json.loads(json_sky['step_Upload'])
                json_sky['options_page'] = k.options_page
                try:
                    data_step = eval(json_sky['data_step'])
                except Exception as ex:
                    return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล Step ให้เป็น Json ได้'}
                try:
                    step_Upload = eval(json_sky['step_Upload'])
                except Exception as ex:
                    return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล step_Upload ให้เป็น Json ได้'}
                json_sky['username'] = k.username
                json_sky['step_Max'] = k.step_Max
                json_sky['step_Name'] = k.step_Name
                json_sky['status_Update'] = k.status_Update
                json_sky['status_Update_string'] = str(k.status_Update).split('+')[0]
                if k.qrCode_position != None:
                    try:
                        json_sky['qrCode_position'] = eval(k.qrCode_position)
                    except Exception as ex:
                        return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล qrCode_position ให้เป็น Json ได้'}
                else:
                    json_sky['qrCode_position'] = None
                json_sky['step_Description'] = k.step_Description
                json_sky['email'] = k.email
                if json_sky['step_Max'] == 1:
                    json_sky['data_step'] = [data_step]
                else:
                    json_sky['data_step'] = data_step
                json_sky['step_Upload'] = step_Upload
                if k.urgent_type != None:
                    json_sky['urgent_code'] = k.urgent_type
                    if k.urgent_type == 'M':
                        json_sky['urgent_string_th'] = 'ปกติ'
                        json_sky['urgent_string_en'] = 'MEDIUM'
                    elif k.urgent_type == 'U':
                        json_sky['urgent_string_th'] = 'ด่วน'
                        json_sky['urgent_string_en'] = 'URGENT'
                    elif k.urgent_type == 'I':
                        json_sky['urgent_string_th'] = 'ด่วนมาก'
                        json_sky['urgent_string_en'] = 'IMMEDIATE'
                else:
                    json_sky['urgent_code'] = None
                    json_sky['urgent_string_th'] = None
                    json_sky['urgent_string_en'] = None
                if k.documentDetails != None:
                    if str(k.documentDetails).replace(' ','') != '':
                        result_detailDoc = paper_lessdocument_detail.query.filter_by(documentUser=k.username,documentType=k.documentDetails).first()
                        if result_detailDoc != None:
                            json_sky['document_details'] = eval(result_detailDoc.documentJson)
                            json_sky['document_details_string'] = result_detailDoc.documentJson
                        else:
                            jsondetailsDoc = {}
                            jsondetailsDoc['document_type'] = None
                            jsondetailsDoc['document_name'] = None
                            jsondetailsDoc['document_remark'] = None
                            json_sky['document_details'] = jsondetailsDoc
                            json_sky['document_details_string'] = str(jsondetailsDoc)
                    else:
                        jsondetailsDoc = {}
                        jsondetailsDoc['document_type'] = None
                        jsondetailsDoc['document_name'] = None
                        jsondetailsDoc['document_remark'] = None
                        json_sky['document_details'] = jsondetailsDoc
                        json_sky['document_details_string'] = str(jsondetailsDoc)
                else:
                    jsondetailsDoc = {}
                    jsondetailsDoc['document_type'] = None
                    jsondetailsDoc['document_name'] = None
                    jsondetailsDoc['document_remark'] = None
                    json_sky['document_details'] = jsondetailsDoc
                    json_sky['document_details_string'] = str(jsondetailsDoc)
                arr_get.append(json_sky)
            if len(arr_get) != 0:
                return {'result':'OK','messageText':arr_get,'status_Code':200}
            else:
                return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
        except Exception as ex:
            return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}

    def select_get_template_for_service_v1(self,username,tax_id):
        self.username = username
        self.tax_id = tax_id
        try:
            list_templateCode = []
            arr_get = []
            count_Template = 0
            if str(self.tax_id) != '':
                for k in paper_lessstep.query.filter(paper_lessstep.status=='ACTIVE',paper_lessstep.template_biz!="",paper_lessstep.documentDetails!='EF').order_by((paper_lessstep.step_Code).asc()):
                    if str(k.template_biz).replace(' ','') != '':
                        if k.template_biz != None:
                            id_card_num = eval(k.template_biz)
                            id_card_num = id_card_num['id_card_num']
                            print(id_card_num)
                            if id_card_num == self.tax_id:
                                list_templateCode.append({'Template_Name':k.step_Name,'Template_Code':k.step_Code,'Document_Type':k.documentDetails,'Document_Name':k.step_Name,'Condition_Template':k.condition_temp,'Template_Type':'biz'})
                                count_Template = count_Template + 1
                            else:
                                print(k.documentDetails)
                        else:
                            if k.username == self.username:
                                list_templateCode.append({'Template_Name':k.step_Name,'Template_Code':k.step_Code,'Document_Type':k.documentDetails,'Document_Name':k.step_Name,'Condition_Template':k.condition_temp,'Template_Type':'citizen'})
                                count_Template = count_Template + 1
                    else:
                        if k.username == self.username:
                            list_templateCode.append({'Template_Name':k.step_Name,'Template_Code':k.step_Code,'Document_Type':k.documentDetails,'Document_Name':k.step_Name,'Condition_Template':k.condition_temp,'Template_Type':'citizen'})
                            count_Template = count_Template + 1
                return {'result':'OK','messageText':list_templateCode,'Template_Count':count_Template}
            else:
                for k in paper_lessstep.query.filter(paper_lessstep.status=='ACTIVE',paper_lessstep.username==self.username,paper_lessstep.documentDetails!='EF').order_by((paper_lessstep.step_Code).asc()):
                    if str(k.template_biz).replace(' ','') != '':
                        if k.template_biz != None:
                            id_card_num = eval(k.template_biz)
                            id_card_num = id_card_num['id_card_num']
                            # print(k.step_Name,k.condition_temp)
                            if id_card_num == self.tax_id:
                                list_templateCode.append({'Template_Name':k.step_Name,'Template_Code':k.step_Code,'Document_Type':k.documentDetails,'Document_Name':k.step_Name,'Condition_Template':k.condition_temp,'Template_Type':'biz'})
                                count_Template = count_Template + 1
                        else:
                            if k.username == self.username:
                                list_templateCode.append({'Template_Name':k.step_Name,'Template_Code':k.step_Code,'Document_Type':k.documentDetails,'Document_Name':k.step_Name,'Condition_Template':k.condition_temp,'Template_Type':'citizen'})
                                count_Template = count_Template + 1
                    else:
                        if k.username == self.username:
                            list_templateCode.append({'Template_Name':k.step_Name,'Template_Code':k.step_Code,'Document_Type':k.documentDetails,'Document_Name':k.step_Name,'Condition_Template':k.condition_temp,'Template_Type':'citizen'})
                            count_Template = count_Template + 1
                return {'result':'OK','messageText':list_templateCode,'Template_Count':count_Template}
        except Exception as e:
            print(str(e))
            return {'result': 'ER', 'messageText': str(e)}

    def select_get_template_for_eform_v1(self,username,tax_id,thai_email):
        self.username = username
        self.tax_id = tax_id
        self.thai_email = thai_email
        null = None
        tax_idtmp = '%'+self.tax_id+'%'
        try:
            list_templateCode = []
            arr_get = []

            count_Template = 0
            sql = ''' 
                    SELECT
                        tb_step_template."step_Name" AS "step_Name",
                        tb_step_template."step_Code" AS "step_Code",
                        tb_step_template."documentDetails" AS "documentDetails",
                        tb_step_template.condition_temp AS "condition_temp",
                        tb_step_template."step_Data" AS "step_Data",
                        tb_step_template.template_biz AS "template_biz",                        
                        tb_step_template.username AS "username"
                    FROM
                        tb_step_template 
                    WHERE
                        tb_step_template.status = 'ACTIVE'                    
                '''
            if str(self.tax_id) != '':
                where = ''' 
                        AND ( tb_step_template.template_biz LIKE :tax_idtmp )  
                    '''
            else:
                where = ''' 
                        AND ( tb_step_template.username = :tmpusername )  
                    '''
            orderbytmp = ''' 
                    ORDER BY
                        tb_step_template."step_Code" ASC
                    '''
            sql += where + orderbytmp
            with engine.connect() as connection:
                result_select = connection.execute(text(sql),tax_idtmp=tax_idtmp,tmpusername=self.username)
                tmp_query = [dict(row) for row in result_select]
            connection.close()
            for n in range(len(tmp_query)):
                k = tmp_query[n]
                tmpstep_Name = k['step_Name']
                tmpstep_Code = k['step_Code']
                tmpdocumentDetails = k['documentDetails']
                tmpcondition_temp = k['condition_temp']
                step_data = eval(k['step_Data'])
                Temp_activity = False
                tmp_auto_flow = False
                if type(step_data) == tuple:
                    for l in range(len(step_data)):
                        step_detail = step_data[l]['step_detail']
                        activity_code = step_detail[0]['activity_code']
                        for n in range(len(activity_code)):
                            if activity_code[n] == 'A04':
                                Temp_activity = True
                                break
                elif type(step_data) == dict:
                    step_detail = step_data['step_detail']
                    activity_code = step_detail[0]['activity_code']
                    for n in range(len(activity_code)):
                        if activity_code[n] == 'A04':
                            Temp_activity = True
                            break
                if str(k['template_biz']).replace(' ','') != '':
                    if k['template_biz'] != None:
                        list_result_email_step = []
                        list_step_num = []
                        id_card_num = eval(k['template_biz'])
                        id_card_num = id_card_num['id_card_num']
                        if id_card_num == self.tax_id:
                            step_data_info = eval(k['step_Data'])
                            if 'step_num' in step_data_info:
                                list_email = []
                                if 'step_detail' in step_data_info:
                                    for u in range(len(step_data_info['step_detail'])):
                                        json_email = {}
                                        one_email_info = step_data_info['step_detail'][u]['one_email']
                                        if str(one_email_info).replace(' ','').lower() == 'me':
                                            one_email_info = self.thai_email
                                        if '@' not in one_email_info and one_email_info != '':
                                            tmp_auto_flow = True
                                        list_email.append(one_email_info)
                                        if step_data_info['step_num'] not in list_step_num:
                                            list_step_num.append(step_data_info['step_num'])
                                            json_email['step_num'] = step_data_info['step_num']
                                            json_email['one_email'] = list_email
                                            json_email['activity_code'] = step_data_info['step_detail'][u]['activity_code']
                                            if 'rf_step' in step_data_info:
                                                json_email['ref_step'] =  step_data_info['rf_step']
                                            list_acdata = []
                                            for v in range(len(step_data_info['step_detail'][u]['activity_data'])):

                                                if step_data_info['step_detail'][u]['activity_data'][v] == {}:
                                                    continue
                                
                                                else:
                                                    list_acdata.append(step_data_info['step_detail'][u]['activity_data'][v])
                                            json_email['activity_data'] = list_acdata

                                            if 'A04' in step_data_info['step_detail'][u]['activity_code']:
                                                json_email['activity_code_check'] = True
                                            else:
                                                json_email['activity_code_check'] = False
                                            
                                            list_result_email_step.append(json_email)
                            else:
                                for i in range(len(step_data_info)):
                                    list_email = []
                                    for z in range(len(step_data_info[i]['step_detail'])):
                                        json_email = {}
                                        one_email_info = step_data_info[i]['step_detail'][z]['one_email']
                                        if str(one_email_info).replace(' ','').lower() == 'me':
                                            one_email_info = self.thai_email
                                        if '@' not in one_email_info and one_email_info != '':
                                            tmp_auto_flow = True
                                        # if len(list_step_num) != 0:
                                        list_email.append(one_email_info)
                                        if step_data_info[i]['step_num'] not in list_step_num:
                                            list_step_num.append(step_data_info[i]['step_num'])
                                            json_email['step_num'] = step_data_info[i]['step_num']
                                            json_email['one_email'] = list_email
                                            json_email['activity_code'] = step_data_info[i]['step_detail'][z]['activity_code']
                                            # print(step_data_info[i]['step_detail'][z][''])
                                            if 'rf_step' in step_data_info[i]:
                                                json_email['ref_step'] =  step_data_info[i]['rf_step']
                                            list_acdata = []
                                            if step_data_info[i]['step_detail'][z]['activity_data'] == {}:
                                                json_email['activity_data'] = ''
                                            else:
                                                json_email['activity_data'] = step_data_info[i]['step_detail'][z]['activity_data']

                                            for v in range(len(step_data_info[i]['step_detail'][z]['activity_data'])):

                                                if step_data_info[i]['step_detail'][z]['activity_data'][v] == {}:
                                                    continue
                                
                                                else:
                                                    list_acdata.append(step_data_info[i]['step_detail'][z]['activity_data'][v])
                                            json_email['activity_data'] = list_acdata
                                            if 'A04' in step_data_info[i]['step_detail'][z]['activity_code']:
                                                json_email['activity_code_check'] = True
                                            else:
                                                json_email['activity_code_check'] = False
                                            list_result_email_step.append(json_email)

                            list_templateCode.append({'auto_flow':tmp_auto_flow,'Template_Name':tmpstep_Name,'Template_Code':tmpstep_Code,'Document_Type':tmpdocumentDetails,'Document_Name':tmpstep_Name,'Condition_Template':tmpcondition_temp,'Template_step':list_result_email_step,'Template_Type':'biz','Template_activity':Temp_activity})
                            count_Template = count_Template + 1
                        else:
                            pass
                else:
                    list_result_email_step = []
                    list_step_num = []
                    if k['username'] == self.username:

                        step_data_info = eval(k['step_Data'])
                        if 'step_num' in step_data_info:
                            list_email = []
                            if 'step_detail' in step_data_info:
                                for u in range(len(step_data_info['step_detail'])):
                                    json_email = {}
                                    one_email_info = step_data_info['step_detail'][u]['one_email']
                                    if str(one_email_info).replace(' ','').lower() == 'me':
                                        one_email_info = self.thai_email                                    
                                    if '@' not in one_email_info and one_email_info != '':
                                        tmp_auto_flow = True
                                    list_email.append(one_email_info)
                                    if step_data_info['step_num'] not in list_step_num:
                                        list_step_num.append(step_data_info['step_num'])
                                        json_email['step_num'] = step_data_info['step_num']
                                        json_email['one_email'] = list_email
                                        json_email['activity_code'] = step_data_info['step_detail'][u]['activity_code']
                                        list_acdata = []
                                        for v in range(len(step_data_info['step_detail'][u]['activity_data'])):

                                            if step_data_info['step_detail'][u]['activity_data'][v] == {}:
                                                continue
                            
                                            else:
                                                list_acdata.append(step_data_info['step_detail'][u]['activity_data'][v])
                                        json_email['activity_data'] = list_acdata

                                        if 'A04' in step_data_info['step_detail'][u]['activity_code']:
                                            json_email['activity_code_check'] = True
                                        else:
                                            json_email['activity_code_check'] = False
                                        list_result_email_step.append(json_email)
                        else:
                            for i in range(len(step_data_info)):
                                list_email = []
                                for z in range(len(step_data_info[i]['step_detail'])):
                                    json_email = {}
                                    one_email_info = step_data_info[i]['step_detail'][z]['one_email']
                                    if str(one_email_info).replace(' ','').lower() == 'me':
                                        one_email_info = self.thai_email                                    
                                    if '@' not in one_email_info and one_email_info != '':
                                        tmp_auto_flow = True
                                    # if len(list_step_num) != 0:
                                    list_email.append(one_email_info)
                                    if step_data_info[i]['step_num'] not in list_step_num:
                                        list_step_num.append(step_data_info[i]['step_num'])
                                        json_email['step_num'] = step_data_info[i]['step_num']
                                        json_email['one_email'] = list_email
                                        json_email['activity_code'] = step_data_info[i]['step_detail'][z]['activity_code']
                                        list_acdata = []
                                        if step_data_info[i]['step_detail'][z]['activity_data'] == {}:
                                            json_email['activity_data'] = ''
                                        else:
                                            json_email['activity_data'] = step_data_info[i]['step_detail'][z]['activity_data']

                                        for v in range(len(step_data_info[i]['step_detail'][z]['activity_data'])):

                                            if step_data_info[i]['step_detail'][z]['activity_data'][v] == {}:
                                                continue
                            
                                            else:
                                                list_acdata.append(step_data_info[i]['step_detail'][z]['activity_data'][v])
                                        json_email['activity_data'] = list_acdata
                                        if 'A04' in step_data_info[i]['step_detail'][z]['activity_code']:
                                            json_email['activity_code_check'] = True
                                        else:
                                            json_email['activity_code_check'] = False
                                        list_result_email_step.append(json_email)

                        list_templateCode.append({'auto_flow':tmp_auto_flow,'Template_Name':tmpstep_Name,'Template_Code':tmpstep_Code,'Document_Type':tmpdocumentDetails,'Document_Name':tmpstep_Name,'Condition_Template':tmpcondition_temp,'Template_step':list_result_email_step,'Template_Type':'biz','Template_activity':Temp_activity})
                        count_Template = count_Template + 1
            
            return {'result':'OK','messageText':list_templateCode,'Template_Count':count_Template} 
            if str(self.tax_id) != '':
                for k in paper_lessstep.query.filter(paper_lessstep.status=='ACTIVE',paper_lessstep.template_biz.contains(self.tax_id)).order_by((paper_lessstep.step_Code).asc()):
                    # print(k)
                    step_data = eval(k.step_Data)
                    Temp_activity = False
                    if type(step_data) == tuple:
                        for l in range(len(step_data)):
                            step_detail = step_data[l]['step_detail']
                            activity_code = step_detail[0]['activity_code']
                            for n in range(len(activity_code)):
                                if activity_code[n] == 'A04':
                                    Temp_activity = True
                                    break

                    elif type(step_data) == dict:
                        step_detail = step_data['step_detail']
                        activity_code = step_detail[0]['activity_code']
                        for n in range(len(activity_code)):
                            if activity_code[n] == 'A04':
                                Temp_activity = True
                                break
                        
                    if str(k.template_biz).replace(' ','') != '':
                        if k.template_biz != None:
                            list_result_email_step = []
                            list_step_num = []

                            id_card_num = eval(k.template_biz)
                            id_card_num = id_card_num['id_card_num']
                            # print(id_card_num)
                            if id_card_num == self.tax_id:
                                step_data_info = eval(k.step_Data)
                                if 'step_num' in step_data_info:
                                    list_email = []
                                    if 'step_detail' in step_data_info:
                                        for u in range(len(step_data_info['step_detail'])):
                                            json_email = {}
                                            one_email_info = step_data_info['step_detail'][u]['one_email']
                                            if str(one_email_info).replace(' ','').lower() == 'me':
                                                one_email_info = self.thai_email
                                            list_email.append(one_email_info)
                                            if step_data_info['step_num'] not in list_step_num:
                                                list_step_num.append(step_data_info['step_num'])
                                                json_email['step_num'] = step_data_info['step_num']
                                                json_email['one_email'] = list_email
                                                json_email['activity_code'] = step_data_info['step_detail'][u]['activity_code']
                                                if 'rf_step' in step_data_info:
                                                    json_email['ref_step'] =  step_data_info['rf_step']
                                                list_acdata = []
                                                for v in range(len(step_data_info['step_detail'][u]['activity_data'])):

                                                    if step_data_info['step_detail'][u]['activity_data'][v] == {}:
                                                        continue
                                    
                                                    else:
                                                        list_acdata.append(step_data_info['step_detail'][u]['activity_data'][v])
                                                json_email['activity_data'] = list_acdata

                                                if 'A04' in step_data_info['step_detail'][u]['activity_code']:
                                                    json_email['activity_code_check'] = True
                                                else:
                                                    json_email['activity_code_check'] = False
                                                
                                                list_result_email_step.append(json_email)
                                else:
                                    for i in range(len(step_data_info)):
                                        list_email = []
                                        for z in range(len(step_data_info[i]['step_detail'])):
                                            json_email = {}
                                            one_email_info = step_data_info[i]['step_detail'][z]['one_email']
                                            if str(one_email_info).replace(' ','').lower() == 'me':
                                                one_email_info = self.thai_email
                                            # if len(list_step_num) != 0:
                                            list_email.append(one_email_info)
                                            if step_data_info[i]['step_num'] not in list_step_num:
                                                list_step_num.append(step_data_info[i]['step_num'])
                                                json_email['step_num'] = step_data_info[i]['step_num']
                                                json_email['one_email'] = list_email
                                                json_email['activity_code'] = step_data_info[i]['step_detail'][z]['activity_code']
                                                # print(step_data_info[i]['step_detail'][z][''])
                                                if 'rf_step' in step_data_info[i]:
                                                    json_email['ref_step'] =  step_data_info[i]['rf_step']
                                                list_acdata = []
                                                if step_data_info[i]['step_detail'][z]['activity_data'] == {}:
                                                    json_email['activity_data'] = ''
                                                else:
                                                    json_email['activity_data'] = step_data_info[i]['step_detail'][z]['activity_data']

                                                for v in range(len(step_data_info[i]['step_detail'][z]['activity_data'])):

                                                    if step_data_info[i]['step_detail'][z]['activity_data'][v] == {}:
                                                        continue
                                    
                                                    else:
                                                        list_acdata.append(step_data_info[i]['step_detail'][z]['activity_data'][v])
                                                json_email['activity_data'] = list_acdata
                                                if 'A04' in step_data_info[i]['step_detail'][z]['activity_code']:
                                                    json_email['activity_code_check'] = True
                                                else:
                                                    json_email['activity_code_check'] = False
                                                list_result_email_step.append(json_email)

                                list_templateCode.append({'Template_Name':k.step_Name,'Template_Code':k.step_Code,'Document_Type':k.documentDetails,'Document_Name':k.step_Name,'Condition_Template':k.condition_temp,'Template_step':list_result_email_step,'Template_Type':'biz','Template_activity':Temp_activity})
                                count_Template = count_Template + 1
                            else:
                                pass
                                # print(k.documentDetails)
                        else:
                            list_result_email_step = []
                            list_step_num = []
                            if k.username == self.username:

                                step_data_info = eval(k.step_Data)
                                if 'step_num' in step_data_info:
                                    list_email = []
                                    if 'step_detail' in step_data_info:
                                        for u in range(len(step_data_info['step_detail'])):
                                            json_email = {}
                                            one_email_info = step_data_info['step_detail'][u]['one_email']
                                            if str(one_email_info).replace(' ','').lower() == 'me':
                                                one_email_info = self.thai_email
                                            list_email.append(one_email_info)
                                            if step_data_info['step_num'] not in list_step_num:
                                                list_step_num.append(step_data_info['step_num'])
                                                json_email['step_num'] = step_data_info['step_num']
                                                json_email['one_email'] = list_email
                                                json_email['activity_code'] = step_data_info['step_detail'][u]['activity_code']
                                                list_acdata = []
                                                for v in range(len(step_data_info['step_detail'][u]['activity_data'])):

                                                    if step_data_info['step_detail'][u]['activity_data'][v] == {}:
                                                        continue
                                    
                                                    else:
                                                        list_acdata.append(step_data_info['step_detail'][u]['activity_data'][v])
                                                json_email['activity_data'] = list_acdata

                                                if 'A04' in step_data_info['step_detail'][u]['activity_code']:
                                                    json_email['activity_code_check'] = True
                                                else:
                                                    json_email['activity_code_check'] = False
                                                list_result_email_step.append(json_email)
                                else:
                                    for i in range(len(step_data_info)):
                                        list_email = []
                                        for z in range(len(step_data_info[i]['step_detail'])):
                                            json_email = {}
                                            one_email_info = step_data_info[i]['step_detail'][z]['one_email']
                                            if str(one_email_info).replace(' ','').lower() == 'me':
                                                one_email_info = self.thai_email
                                            # if len(list_step_num) != 0:
                                            list_email.append(one_email_info)
                                            if step_data_info[i]['step_num'] not in list_step_num:
                                                list_step_num.append(step_data_info[i]['step_num'])
                                                json_email['step_num'] = step_data_info[i]['step_num']
                                                json_email['one_email'] = list_email
                                                json_email['activity_code'] = step_data_info[i]['step_detail'][z]['activity_code']
                                                list_acdata = []
                                                if step_data_info[i]['step_detail'][z]['activity_data'] == {}:
                                                    json_email['activity_data'] = ''
                                                else:
                                                    json_email['activity_data'] = step_data_info[i]['step_detail'][z]['activity_data']

                                                for v in range(len(step_data_info[i]['step_detail'][z]['activity_data'])):

                                                    if step_data_info[i]['step_detail'][z]['activity_data'][v] == {}:
                                                        continue
                                    
                                                    else:
                                                        list_acdata.append(step_data_info[i]['step_detail'][z]['activity_data'][v])
                                                json_email['activity_data'] = list_acdata
                                                if 'A04' in step_data_info[i]['step_detail'][z]['activity_code']:
                                                    json_email['activity_code_check'] = True
                                                else:
                                                    json_email['activity_code_check'] = False
                                                list_result_email_step.append(json_email)

                                list_templateCode.append({'Template_Name':k.step_Name,'Template_Code':k.step_Code,'Document_Type':k.documentDetails,'Document_Name':k.step_Name,'Condition_Template':k.condition_temp,'Template_step':list_result_email_step,'Template_Type':'citizen','Template_activity':Temp_activity})
                                count_Template = count_Template + 1
                    else:
                        list_result_email_step = []
                        list_step_num = []
                        if k.username == self.username:

                            step_data_info = eval(k.step_Data)
                            if 'step_num' in step_data_info:
                                list_email = []
                                if 'step_detail' in step_data_info:
                                    for u in range(len(step_data_info['step_detail'])):
                                        json_email = {}
                                        one_email_info = step_data_info['step_detail'][u]['one_email']
                                        if str(one_email_info).replace(' ','').lower() == 'me':
                                            one_email_info = self.thai_email
                                        list_email.append(one_email_info)
                                        if step_data_info['step_num'] not in list_step_num:
                                            list_step_num.append(step_data_info['step_num'])
                                            json_email['step_num'] = step_data_info['step_num']
                                            json_email['one_email'] = list_email
                                            json_email['activity_code'] = step_data_info['step_detail'][u]['activity_code']
                                            list_acdata = []
                                            for v in range(len(step_data_info['step_detail'][u]['activity_data'])):

                                                if step_data_info['step_detail'][u]['activity_data'][v] == {}:
                                                    continue
                                
                                                else:
                                                    list_acdata.append(step_data_info['step_detail'][u]['activity_data'][v])
                                            json_email['activity_data'] = list_acdata

                                            if 'A04' in step_data_info['step_detail'][u]['activity_code']:
                                                json_email['activity_code_check'] = True
                                            else:
                                                json_email['activity_code_check'] = False
                                            list_result_email_step.append(json_email)
                            else:
                                for i in range(len(step_data_info)):
                                    list_email = []
                                    for z in range(len(step_data_info[i]['step_detail'])):
                                        json_email = {}
                                        one_email_info = step_data_info[i]['step_detail'][z]['one_email']
                                        if str(one_email_info).replace(' ','').lower() == 'me':
                                            one_email_info = self.thai_email
                                        # if len(list_step_num) != 0:
                                        list_email.append(one_email_info)
                                        if step_data_info[i]['step_num'] not in list_step_num:
                                            list_step_num.append(step_data_info[i]['step_num'])
                                            json_email['step_num'] = step_data_info[i]['step_num']
                                            json_email['one_email'] = list_email
                                            json_email['activity_code'] = step_data_info[i]['step_detail'][z]['activity_code']
                                            list_acdata = []
                                            if step_data_info[i]['step_detail'][z]['activity_data'] == {}:
                                                json_email['activity_data'] = ''
                                            else:
                                                json_email['activity_data'] = step_data_info[i]['step_detail'][z]['activity_data']

                                            for v in range(len(step_data_info[i]['step_detail'][z]['activity_data'])):

                                                if step_data_info[i]['step_detail'][z]['activity_data'][v] == {}:
                                                   continue
                                
                                                else:
                                                    list_acdata.append(step_data_info[i]['step_detail'][z]['activity_data'][v])
                                            json_email['activity_data'] = list_acdata
                                            if 'A04' in step_data_info[i]['step_detail'][z]['activity_code']:
                                                json_email['activity_code_check'] = True
                                            else:
                                                json_email['activity_code_check'] = False
                                            list_result_email_step.append(json_email)

                            list_templateCode.append({'Template_Name':k.step_Name,'Template_Code':k.step_Code,'Document_Type':k.documentDetails,'Document_Name':k.step_Name,'Condition_Template':k.condition_temp,'Template_step':list_result_email_step,'Template_Type':'citizen','Template_activity':Temp_activity})
                            count_Template = count_Template + 1
                return {'result':'OK','messageText':list_templateCode,'Template_Count':count_Template}
            else:
                for k in paper_lessstep.query.filter(paper_lessstep.status=='ACTIVE',paper_lessstep.username==self.username).order_by((paper_lessstep.step_Code).asc()):
                    step_data = eval(k.step_Data)
                    Temp_activity = False
                    if type(step_data) == tuple:
                        for l in range(len(step_data)):
                            step_detail = step_data[l]['step_detail']
                            activity_code = step_detail[0]['activity_code']
                            # print ('activity_code1111111: ',activity_code)
                            for n in range(len(activity_code)):
                                if activity_code[n] == 'A04':
                                    Temp_activity = True
                                    break

                    elif type(step_data) == dict:
                        step_detail = step_data['step_detail']
                        activity_code = step_detail[0]['activity_code']
                        # print ('activity_code222222: ',activity_code)
                        for n in range(len(activity_code)):
                            if activity_code[n] == 'A04':
                                Temp_activity = True
                                break
                    
                    if str(k.template_biz).replace(' ','') != '':
                        if k.template_biz != None:
                            id_card_num = eval(k.template_biz)
                            id_card_num = id_card_num['id_card_num']
                            # print(k.step_Name,k.condition_temp)
                            list_result_email_step = []
                            list_step_num = []
                            list_activity = []                           

                            step_data_info = eval(k.step_Data)

                            if 'step_num' in step_data_info:
                                list_email = []
                                if 'step_detail' in step_data_info:
                                    for u in range(len(step_data_info['step_detail'])):
                                        json_email = {}
                                        one_email_info = step_data_info['step_detail'][u]['one_email']
                                        if str(one_email_info).replace(' ','').lower() == 'me':
                                            one_email_info = self.thai_email
                                        list_email.append(one_email_info)
                                        if step_data_info['step_num'] not in list_step_num:
                                            list_step_num.append(step_data_info['step_num'])
                                            json_email['step_num'] = step_data_info['step_num']
                                            json_email['one_email'] = list_email
                                            json_email['activity_code'] = step_data_info['step_detail'][u]['activity_code']
                                            # print ('ACCCCCCC: ',step_data_info['step_detail'][u]['activity_code'])
                                            list_acdata = []
                                            for v in range(len(step_data_info['step_detail'][u]['activity_data'])):
                                                if step_data_info['step_detail'][u]['activity_data'][v] == {}:
                                                    continue                                
                                                else:
                                                    list_acdata.append(step_data_info['step_detail'][u]['activity_data'][v])
                                            json_email['activity_data'] = list_acdata

                                            if 'A04' in step_data_info['step_detail'][u]['activity_code']:
                                                json_email['activity_code_check'] = True
                                            else:
                                                json_email['activity_code_check'] = False
                                            list_result_email_step.append(json_email)
                            else:
                                for i in range(len(step_data_info)):
                                    list_email = []
                                    for z in range(len(step_data_info[i]['step_detail'])):
                                        json_email = {}
                                        one_email_info = step_data_info[i]['step_detail'][z]['one_email']
                                        if str(one_email_info).replace(' ','').lower() == 'me':
                                            one_email_info = self.thai_email
                                        # if len(list_step_num) != 0:
                                        list_email.append(one_email_info)
                                        if step_data_info[i]['step_num'] not in list_step_num:
                                            list_step_num.append(step_data_info[i]['step_num'])
                                            json_email['step_num'] = step_data_info[i]['step_num']
                                            json_email['one_email'] = list_email
                                            json_email['activity_code'] = step_data_info[i]['step_detail'][z]['activity_code']
                                            # print ('ACCCCCCC: ',step_data_info[i]['step_detail'][z]['activity_code'])
                                            list_acdata = []
                                            if step_data_info[i]['step_detail'][z]['activity_data'] == {}:
                                                json_email['activity_data'] = ''
                                            else:
                                                json_email['activity_data'] = step_data_info[i]['step_detail'][z]['activity_data']
                                            for v in range(len(step_data_info[i]['step_detail'][z]['activity_data'])):
                                                if step_data_info[i]['step_detail'][z]['activity_data'][v] == {}:
                                                   continue                                
                                                else:
                                                    list_acdata.append(step_data_info[i]['step_detail'][z]['activity_data'][v])
                                            json_email['activity_data'] = list_acdata
                                            if 'A04' in step_data_info[i]['step_detail'][z]['activity_code']:
                                                json_email['activity_code_check'] = True
                                            else:
                                                json_email['activity_code_check'] = False
                                            list_result_email_step.append(json_email)
                            
                            list_templateCode.append({'Template_Name':k.step_Name,'Template_Code':k.step_Code,'Document_Type':k.documentDetails,'Document_Name':k.step_Name,'Condition_Template':k.condition_temp,'Template_step':list_result_email_step,'Template_Type':'biz','Template_activity':Temp_activity})
                            count_Template = count_Template + 1
                        else:
                            if k.username == self.username:
                                list_result_email_step = []
                                list_step_num = []
                                list_activity = []

                                step_data_info = eval(k.step_Data)
                                
                                if 'step_num' in step_data_info:
                                    list_email = []
                                    if 'step_detail' in step_data_info:
                                        for u in range(len(step_data_info['step_detail'])):
                                            json_email = {}
                                            one_email_info = step_data_info['step_detail'][u]['one_email']
                                            if str(one_email_info).replace(' ','').lower() == 'me':
                                                one_email_info = self.thai_email
                                            list_email.append(one_email_info)
                                            if step_data_info['step_num'] not in list_step_num:
                                                list_step_num.append(step_data_info['step_num'])
                                                json_email['step_num'] = step_data_info['step_num']
                                                json_email['one_email'] = list_email
                                                json_email['activity_code'] = step_data_info['step_detail'][u]['activity_code']
                                                # print ('ACCCCCCC: ',step_data_info['step_detail'][u]['activity_code'])
                                                list_acdata = []
                                                for v in range(len(step_data_info['step_detail'][u]['activity_data'])):
                                                    if step_data_info['step_detail'][u]['activity_data'][v] == {}:
                                                        continue                                    
                                                    else:
                                                        list_acdata.append(step_data_info['step_detail'][u]['activity_data'][v])
                                                json_email['activity_data'] = list_acdata
                                                if 'A04' in step_data_info['step_detail'][u]['activity_code']:
                                                    json_email['activity_code_check'] = True
                                                else:
                                                    json_email['activity_code_check'] = False
                                                list_result_email_step.append(json_email)
                                else:
                                    for i in range(len(step_data_info)):
                                        list_email = []
                                        for z in range(len(step_data_info[i]['step_detail'])):
                                            json_email = {}
                                            one_email_info = step_data_info[i]['step_detail'][z]['one_email']
                                            if str(one_email_info).replace(' ','').lower() == 'me':
                                                one_email_info = self.thai_email
                                            # if len(list_step_num) != 0:
                                            list_email.append(one_email_info)
                                            if step_data_info[i]['step_num'] not in list_step_num:
                                                list_step_num.append(step_data_info[i]['step_num'])
                                                json_email['step_num'] = step_data_info[i]['step_num']
                                                json_email['one_email'] = list_email
                                                json_email['activity_code'] = step_data_info[i]['step_detail'][z]['activity_code']
                                                list_acdata = []
                                                for v in range(len(step_data_info[i]['step_detail'][z]['activity_data'])):                                                    
                                                    if step_data_info[i]['step_detail'][z]['activity_data'][v] == {}:
                                                        continue                                    
                                                    else:
                                                        list_acdata.append(step_data_info[i]['step_detail'][z]['activity_data'][v])
                                                json_email['activity_data'] = list_acdata
                                                if 'A04' in step_data_info[i]['step_detail'][z]['activity_code']:
                                                    json_email['activity_code_check'] = True
                                                else:
                                                    json_email['activity_code_check'] = False
                                                list_result_email_step.append(json_email)

                                list_templateCode.append({'Template_Name':k.step_Name,'Template_Code':k.step_Code,'Document_Type':k.documentDetails,'Document_Name':k.step_Name,'Condition_Template':k.condition_temp,'Template_step':list_result_email_step,'Template_Type':'citizen','Template_activity':Temp_activity})
                                count_Template = count_Template + 1
                    else:
                        if k.username == self.username:
                            list_result_email_step = []
                            list_step_num = []
                            list_activity = []

                            step_data_info = eval(k.step_Data)

                            if 'step_num' in step_data_info:
                                list_email = []
                                if 'step_detail' in step_data_info:
                                    for u in range(len(step_data_info['step_detail'])):
                                        json_email = {}
                                        one_email_info = step_data_info['step_detail'][u]['one_email']
                                        if str(one_email_info).replace(' ','').lower() == 'me':
                                            one_email_info = self.thai_email
                                        list_email.append(one_email_info)
                                        if step_data_info['step_num'] not in list_step_num:
                                            list_step_num.append(step_data_info['step_num'])
                                            json_email['step_num'] = step_data_info['step_num']
                                            json_email['one_email'] = list_email
                                            json_email['activity_code'] = step_data_info['step_detail'][u]['activity_code']
                                            # print ('ACCCCCCC: ',step_data_info['step_detail'][u]['activity_code'])
                                            list_acdata = []
                                            for v in range(len(step_data_info['step_detail'][u]['activity_data'])):
                                                if step_data_info['step_detail'][u]['activity_data'][v] == {}:
                                                    continue                                
                                                else:
                                                    list_acdata.append(step_data_info['step_detail'][u]['activity_data'][v])
                                            json_email['activity_data'] = list_acdata
                                            if 'A04' in step_data_info['step_detail'][u]['activity_code']:
                                                json_email['activity_code_check'] = True
                                            else:
                                                json_email['activity_code_check'] = False
                                            list_result_email_step.append(json_email)
                            else:
                                for i in range(len(step_data_info)):
                                    list_email = []
                                    for z in range(len(step_data_info[i]['step_detail'])):
                                        json_email = {}
                                        one_email_info = step_data_info[i]['step_detail'][z]['one_email']
                                        if str(one_email_info).replace(' ','').lower() == 'me':
                                            one_email_info = self.thai_email
                                        # if len(list_step_num) != 0:
                                        list_email.append(one_email_info)
                                        if step_data_info[i]['step_num'] not in list_step_num:
                                            list_step_num.append(step_data_info[i]['step_num'])
                                            json_email['step_num'] = step_data_info[i]['step_num']
                                            json_email['one_email'] = list_email
                                            json_email['activity_code'] = step_data_info[i]['step_detail'][z]['activity_code']
                                            # print ('ACCCCCCC: ',step_data_info[i]['step_detail'][z]['activity_code'])
                                            list_acdata = []
                                            for v in range(len(step_data_info[i]['step_detail'][z]['activity_data'])):
                                                if step_data_info[i]['step_detail'][z]['activity_data'][v] == {}:
                                                    continue                                
                                                else:
                                                    list_acdata.append(step_data_info[i]['step_detail'][z]['activity_data'][v])
                                            json_email['activity_data'] = list_acdata
                                            if 'A04' in step_data_info[i]['step_detail'][z]['activity_code']:
                                                json_email['activity_code_check'] = True
                                            else:
                                                json_email['activity_code_check'] = False
                                            list_result_email_step.append(json_email)
                            list_templateCode.append({'Template_Name':k.step_Name,'Template_Code':k.step_Code,'Document_Type':k.documentDetails,'Document_Name':k.step_Name,'Condition_Template':k.condition_temp,'Template_step':list_result_email_step,'Template_Type':'citizen','Template_activity':Temp_activity})
                            count_Template = count_Template + 1
                return {'result':'OK','messageText':list_templateCode,'Template_Count':count_Template}
        except Exception as e:
            print(str(e))
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            # print(str(e))
            return {'result': 'ER', 'messageText': str(e)}
        finally:
            connection.close()


    def select_get_document_type_for_service_v1(self,username,tax_id):
        self.username = username
        self.tax_id = tax_id
        try:
            list_DocCode = []
            arr_get = []
            count_Doc = 0
            for k in paper_lessdocument_detail.query.filter_by(documentStatus='ACTIVE').all():

                if (k.biz_info) != None:

                    if str(k.biz_info).replace(' ','') != '':

                        if k.biz_info != None:
                            id_card_num = eval(k.biz_info)
                            id_card_num = id_card_num['id_card_num']
                            if id_card_num == self.tax_id:
                                list_DocCode.append({'Document_Code':k.documentCode,'Document_Type':k.documentType,'Type':'biz'})
                                count_Doc = count_Doc + 1
                            else:
                                if k.documentUser == self.username:
                                    list_DocCode.append({'Document_Code':k.documentCode,'Document_Type':k.documentType,'Type':'citizen'})
                                    count_Doc = count_Doc + 1
                        else:
                            list_DocCode.append({'Document_Code':k.documentCode,'Document_Type':k.documentType,'Type':'citizen'})
                            count_Doc = count_Doc + 1
                    else:
                        if k.documentUser == self.username:
                            list_DocCode.append({'Document_Code':k.documentCode,'Document_Type':k.documentType,'Type':'citizen'})
                            count_Doc = count_Doc + 1
                else:
                    if k.documentUser == self.username:
                        list_DocCode.append({'Document_Code':k.documentCode,'Document_Type':k.documentType,'Type':'citizen'})
                        count_Doc = count_Doc + 1
            return {'result':'OK','messageText':list_DocCode,'Document_Count':count_Doc}
        except Exception as e:
            return {'result': 'ER', 'messageText': str(e)}

    def select_get_document_type_for_eform_v1(self,username,tax_id):
        self.username = username
        self.tax_id = tax_id
        try:
            list_DocCode = []
            arr_get = []
            count_Doc = 0
            tax_idtmp = '%' + self.tax_id + '%' 
            status = 'ACTIVE'
            tmpType = 'biz'
            sql = ''' 
                SELECT
                    tb_document_detail.ID AS "id",
                    tb_document_detail."documentJson" AS "documentJson",
                    tb_document_detail."documentUser" AS "documentUser",
                    tb_document_detail."documentUpdate" AS "documentUpdate",
                    tb_document_detail."documentStatus" AS "documentStatus",
                    tb_document_detail.email AS "email",
                    tb_document_detail."documentType" AS "documentType",
                    tb_document_detail."documentCode" AS "documentCode",
                    tb_document_detail.biz_info AS "biz_info"
                FROM
                    tb_document_detail 
                WHERE
                    tb_document_detail."documentStatus" = :tmpstatus                    
            '''
            if self.tax_id != '':
                where = ''' AND tb_document_detail.biz_info LIKE :tax_idtmp '''
            elif self.tax_id == '':
                where = ''' AND tb_document_detail."documentUser" = :tmpusername '''
                tmpType = 'citizen'
            sql += where            
            with slave.connect() as connection:
                result = connection.execute(text(sql),tax_idtmp=tax_idtmp,tmpstatus=status,tmpusername=self.username)
            connection.close()
            query_result = [dict(row) for row in result]
            for n in range(len(query_result)):
                k = query_result[n]
                tmp_document_Json = eval(k['documentJson'])
                info = {
                    'Document_Code':k['documentCode'],
                    'Document_Type':k['documentType'],
                    'Type':tmpType,
                    'Document_Name':tmp_document_Json
                }
                list_DocCode.append(info)
            return {'result':'OK','messageText':list_DocCode,'Document_Count':len(list_DocCode)}
            for k in paper_lessdocument_detail.query.filter(paper_lessdocument_detail.documentStatus=='ACTIVE').all():

                if (k.biz_info) != None:

                    if str(k.biz_info).replace(' ','') != '':

                        if k.biz_info != None:
                            id_card_num = eval(k.biz_info)
                            id_card_num = id_card_num['id_card_num']
                            if id_card_num == self.tax_id:
                                tmp_document_Json = eval(k.documentJson)
                                list_DocCode.append({'Document_Code':k.documentCode,'Document_Type':k.documentType,'Type':'biz','Document_Name':tmp_document_Json})
                                count_Doc = count_Doc + 1
                            else:
                                if k.documentUser == self.username:
                                    tmp_document_Json = eval(k.documentJson)
                                    list_DocCode.append({'Document_Code':k.documentCode,'Document_Type':k.documentType,'Type':'citizen','Document_Name':tmp_document_Json})
                                    count_Doc = count_Doc + 1
                        else:
                            tmp_document_Json = eval(k.documentJson)
                            list_DocCode.append({'Document_Code':k.documentCode,'Document_Type':k.documentType,'Type':'citizen','Document_Name':tmp_document_Json})
                            count_Doc = count_Doc + 1
                    else:
                        if k.documentUser == self.username:
                            tmp_document_Json = eval(k.documentJson)
                            list_DocCode.append({'Document_Code':k.documentCode,'Document_Type':k.documentType,'Type':'citizen','Document_Name':tmp_document_Json})
                            count_Doc = count_Doc + 1
                else:
                    if k.documentUser == self.username:
                        tmp_document_Json = eval(k.documentJson)
                        list_DocCode.append({'Document_Code':k.documentCode,'Document_Type':k.documentType,'Type':'citizen','Document_Name':tmp_document_Json})
                        count_Doc = count_Doc + 1
            return {'result':'OK','messageText':list_DocCode,'Document_Count':count_Doc}
        except Exception as e:
            return {'result': 'ER', 'messageText': str(e)}

    def select_get_templateandusername_new_biz(self,username,template):
        self.template = template
        self.username = username
        try:
            arr_signpage = []
            arr_get = []
            for k in paper_lessstep.query.filter_by(step_Code=self.template,status='ACTIVE').order_by((paper_lessstep.sid).asc()):
                json_sky = {}
                tmp_muti_sign = False
                json_sky['stamp_all'] = k.page_sign_options
                json_sky['template_webhook'] = k.webhook
                json_sky['email_center'] = k.email_center
                json_sky['step_Code'] = k.step_Code
                json_sky['dateTime'] = k.DateTime
                json_sky['dateTime_string'] = str(k.DateTime).split('+')[0]
                json_sky['data_step'] = json.dumps(k.step_Data)
                json_sky['data_step'] = json.loads(json_sky['data_step'])
                json_sky['step_Upload'] = json.dumps(k.step_Upload)
                json_sky['step_Upload'] = json.loads(json_sky['step_Upload'])
                json_sky['step_Description'] = k.step_Description
                json_sky['condition_string'] = k.condition_temp
                json_sky['stamp_all'] = k.page_sign_options
                json_sky['options_page_string'] = str(k.options_page)
                json_sky['template_biz'] = str(k.template_biz)
                json_sky['use_status'] = (k.status_use)
                json_sky['status_ref'] = (k.status_ref)
                try:
                    data_step = json_sky['data_step']
                    data_step = eval(data_step)
                    if k.step_Max != 1:
                        step_infomation = list(eval(k.step_Data))
                    else:
                        step_infomation = [data_step]
                    tmp_sign_detail_list = []
                    for i in range(len(step_infomation)):
                        sign_json_info = {}
                        tmp_sign_list_info = []
                        step_ = step_infomation[i]
                        step_num = step_infomation[i]['step_num']
                        if 'step_sign' in step_:
                            tmp_stepsign = step_['step_sign']
                            tmp_status_stepsign = tmp_stepsign['status']
                            if tmp_status_stepsign == True:
                                tmp_muti_sign = True
                                tmp_data_stepsign = tmp_stepsign['data']
                                for y in range(len(tmp_data_stepsign)):
                                    step_signning = tmp_data_stepsign[y]
                                    # print(step_signning)
                                    tmp_sign_list_info.append(step_signning)
                        # print(tmp_sign_list_info)
                        for u in range(len(step_['step_detail'])):
                            step_2 = step_['step_detail'][u]
                            for zz in range(len(step_2['activity_data'])): 
                                if 'status' in step_2['activity_data'][zz]:
                                    # print(step_2['activity_data'][zz])
                                    sign_json_info = step_2['activity_data'][zz]
                                    tmp_sign_list_info.append(sign_json_info)
                        sign_json_info = {
                            'data':tmp_sign_list_info,
                            'step_num':step_num
                        }
                        tmp_sign_detail_list.append(sign_json_info)
                        # print(tmp_sign_detail_list)
                    # print(tmp_sign_detail_list)
                    for n in range(len(tmp_sign_detail_list)):
                        tmp_data = tmp_sign_detail_list[n]
                        tmp_signdata = tmp_data['data']
                        for z in range(len(tmp_signdata)):
                            tmp_sign_page = tmp_signdata[z]
                            if 'sign_page' in tmp_sign_page:
                                # print()
                                arr_signpage.append(int(tmp_sign_page['sign_page']))
                        # print(tmp_data)
                    json_sky['page_require'] = max(arr_signpage)
                    json_sky['sign_info'] = (tmp_sign_detail_list)
                except Exception as e:
                    exc_type, exc_obj, exc_tb = sys.exc_info()
                    fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                    print(exc_type, fname, exc_tb.tb_lineno)
                    json_sky['sign_info'] = []
                json_sky['multi_sign'] = tmp_muti_sign
                try:
                    json_sky['options_page'] = eval(k.options_page)
                except Exception as e:
                    json_sky['options_page'] = {}
                try:
                    json_sky['formula_temp'] = eval(k.formula_temp)
                    json_sky['formula_temp_string'] = k.formula_temp
                except Exception as e:
                    json_sky['formula_temp'] = None
                    json_sky['formula_temp_string'] = None
                json_sky['digit_sign'] = bool(k.digit_sign)
                if k.documentDetails != None:
                    if str(k.documentDetails).replace(' ','') != '':
                        if k.template_biz == '':
                            result_detailDoc = paper_lessdocument_detail.query.filter_by(documentUser=self.username,documentStatus="ACTIVE",documentType=k.documentDetails).first()
                        else:
                            tmpeval = eval(k.template_biz)
                            tmp_id_card_num = tmpeval['id_card_num']
                            result_detailDoc = paper_lessdocument_detail.query.filter(paper_lessdocument_detail.biz_info.contains(tmp_id_card_num),paper_lessdocument_detail.documentStatus=="ACTIVE",paper_lessdocument_detail.documentType==k.documentDetails).first()
                        if result_detailDoc != None:
                            json_sky['document_details'] = eval(result_detailDoc.documentJson)
                            json_sky['document_details_string'] = result_detailDoc.documentJson
                        else:
                            jsondetailsDoc = {}
                            jsondetailsDoc['document_type'] = None
                            jsondetailsDoc['document_name'] = None
                            jsondetailsDoc['document_remark'] = None
                            json_sky['document_details'] = jsondetailsDoc
                            json_sky['document_details_string'] = str(jsondetailsDoc)
                    else:
                        jsondetailsDoc = {}
                        jsondetailsDoc['document_type'] = None
                        jsondetailsDoc['document_name'] = None
                        jsondetailsDoc['document_remark'] = None
                        json_sky['document_details'] = jsondetailsDoc
                        json_sky['document_details_string'] = str(jsondetailsDoc)
                else:
                    jsondetailsDoc = {}
                    jsondetailsDoc['document_type'] = None
                    jsondetailsDoc['document_name'] = None
                    jsondetailsDoc['document_remark'] = None
                    json_sky['document_details'] = jsondetailsDoc
                    json_sky['document_details_string'] = str(jsondetailsDoc)
                try:
                    json_sky['template_String'] = eval(k.template_images)
                except Exception as ex:
                    return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล template_String ให้เป็น Json ได้'}
                try:
                    data_step = eval(json_sky['data_step'])
                except Exception as ex:
                    return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล Step ให้เป็น Json ได้'}
                try:
                    step_Upload = eval(json_sky['step_Upload'])
                except Exception as ex:
                    return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล step_Upload ให้เป็น Json ได้'}
                json_sky['username'] = k.username
                json_sky['step_Max'] = k.step_Max
                json_sky['step_Name'] = k.step_Name
                if k.urgent_type != None:
                    json_sky['urgent_code'] = k.urgent_type
                    if k.urgent_type == 'M':
                        json_sky['urgent_string_th'] = 'ปกติ'
                        json_sky['urgent_string_en'] = 'MEDIUM'
                    elif k.urgent_type == 'U':
                        json_sky['urgent_string_th'] = 'ด่วน'
                        json_sky['urgent_string_en'] = 'URGENT'
                    elif k.urgent_type == 'I':
                        json_sky['urgent_string_th'] = 'ด่วนมาก'
                        json_sky['urgent_string_en'] = 'IMMEDIATE'
                else:
                    json_sky['urgent_code'] = None
                    json_sky['urgent_string_th'] = None
                    json_sky['urgent_string_en'] = None
                if k.qrCode_position != None:
                    try:
                        json_sky['qrCode_position'] = eval(k.qrCode_position)
                    except Exception as ex:
                        return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล qrCode_position ให้เป็น Json ได้'}
                else:
                    json_sky['qrCode_position'] = None
                json_sky['email'] = k.email
                if json_sky['step_Max'] == 1:
                    json_sky['data_step'] = [data_step]
                else:
                    json_sky['data_step'] = data_step
                json_sky['step_Upload'] = step_Upload
                arr_get.append(json_sky)
            if len(arr_get) != 0:
                return {'result':'OK','messageText':arr_get,'status_Code':200}
            else:
                return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}

    # def select_get_templateandusername_new_biz(self,username,template):
    #     self.template = template
    #     self.username = username
    #     try:
    #         arr_signpage = []
    #         arr_get = []
    #         for k in paper_lessstep.query.filter_by(step_Code=self.template,status='ACTIVE').order_by((paper_lessstep.sid).asc()):
    #             json_sky = {}
    #             tmp_muti_sign = False
    #             json_sky['stamp_all'] = k.page_sign_options
    #             json_sky['template_webhook'] = k.webhook
    #             json_sky['email_center'] = k.email_center
    #             json_sky['step_Code'] = k.step_Code
    #             json_sky['dateTime'] = k.DateTime
    #             json_sky['dateTime_string'] = str(k.DateTime).split('+')[0]
    #             json_sky['data_step'] = json.dumps(k.step_Data)
    #             json_sky['data_step'] = json.loads(json_sky['data_step'])
    #             json_sky['step_Upload'] = json.dumps(k.step_Upload)
    #             json_sky['step_Upload'] = json.loads(json_sky['step_Upload'])
    #             json_sky['step_Description'] = k.step_Description
    #             json_sky['condition_string'] = k.condition_temp
    #             json_sky['stamp_all'] = k.page_sign_options
    #             json_sky['options_page_string'] = str(k.options_page)
    #             json_sky['template_biz'] = str(k.template_biz)
    #             json_sky['use_status'] = (k.status_use)
    #             try:
    #                 data_step = json_sky['data_step']
    #                 data_step = eval(data_step)
    #                 if k.step_Max != 1:
    #                     step_infomation = list(eval(k.step_Data))
    #                 else:
    #                     step_infomation = [data_step]
    #                 tmp_sign_detail_list = []
    #                 for i in range(len(step_infomation)):
    #                     sign_json_info = {}
    #                     tmp_sign_list_info = []
    #                     step_ = step_infomation[i]
    #                     step_num = step_infomation[i]['step_num']
    #                     if 'step_sign' in step_:
    #                         tmp_stepsign = step_['step_sign']
    #                         tmp_status_stepsign = tmp_stepsign['status']
    #                         if tmp_status_stepsign == True:
    #                             tmp_muti_sign = True
    #                             tmp_data_stepsign = tmp_stepsign['data']
    #                             for y in range(len(tmp_data_stepsign)):
    #                                 step_signning = tmp_data_stepsign[y]
    #                                 # print(step_signning)
    #                                 tmp_sign_list_info.append(step_signning)
    #                     # print(tmp_sign_list_info)
    #                     for u in range(len(step_['step_detail'])):
    #                         step_2 = step_['step_detail'][u]
    #                         for zz in range(len(step_2['activity_data'])): 
    #                             if 'status' in step_2['activity_data'][zz]:
    #                                 # print(step_2['activity_data'][zz])
    #                                 sign_json_info = step_2['activity_data'][zz]
    #                                 tmp_sign_list_info.append(sign_json_info)
    #                     sign_json_info = {
    #                         'data':tmp_sign_list_info,
    #                         'step_num':step_num
    #                     }
    #                     tmp_sign_detail_list.append(sign_json_info)
    #                     # print(tmp_sign_detail_list)
    #                 # print(tmp_sign_detail_list)
    #                 for n in range(len(tmp_sign_detail_list)):
    #                     tmp_data = tmp_sign_detail_list[n]
    #                     tmp_signdata = tmp_data['data']
    #                     for z in range(len(tmp_signdata)):
    #                         tmp_sign_page = tmp_signdata[z]
    #                         if 'sign_page' in tmp_sign_page:
    #                             # print()
    #                             arr_signpage.append(int(tmp_sign_page['sign_page']))
    #                     # print(tmp_data)
    #                 json_sky['page_require'] = max(arr_signpage)
    #                 json_sky['sign_info'] = (tmp_sign_detail_list)
    #             except Exception as e:
    #                 exc_type, exc_obj, exc_tb = sys.exc_info()
    #                 fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
    #                 print(exc_type, fname, exc_tb.tb_lineno)
    #                 json_sky['sign_info'] = []
    #             json_sky['multi_sign'] = tmp_muti_sign
    #             try:
    #                 json_sky['options_page'] = eval(k.options_page)
    #             except Exception as e:
    #                 json_sky['options_page'] = {}
    #             try:
    #                 json_sky['formula_temp'] = eval(k.formula_temp)
    #                 json_sky['formula_temp_string'] = k.formula_temp
    #             except Exception as e:
    #                 json_sky['formula_temp'] = None
    #                 json_sky['formula_temp_string'] = None
    #             json_sky['digit_sign'] = bool(k.digit_sign)
    #             if k.documentDetails != None:
    #                 if str(k.documentDetails).replace(' ','') != '':
    #                     if k.template_biz == '':
    #                         result_detailDoc = paper_lessdocument_detail.query.filter_by(documentUser=self.username,documentStatus="ACTIVE",documentType=k.documentDetails).first()
    #                     else:
    #                         tmpeval = eval(k.template_biz)
    #                         tmp_id_card_num = tmpeval['id_card_num']
    #                         result_detailDoc = paper_lessdocument_detail.query.filter(paper_lessdocument_detail.biz_info.contains(tmp_id_card_num),paper_lessdocument_detail.documentStatus=="ACTIVE",paper_lessdocument_detail.documentType==k.documentDetails).first()
    #                     if result_detailDoc != None:
    #                         json_sky['document_details'] = eval(result_detailDoc.documentJson)
    #                         json_sky['document_details_string'] = result_detailDoc.documentJson
    #                     else:
    #                         jsondetailsDoc = {}
    #                         jsondetailsDoc['document_type'] = None
    #                         jsondetailsDoc['document_name'] = None
    #                         jsondetailsDoc['document_remark'] = None
    #                         json_sky['document_details'] = jsondetailsDoc
    #                         json_sky['document_details_string'] = str(jsondetailsDoc)
    #                 else:
    #                     jsondetailsDoc = {}
    #                     jsondetailsDoc['document_type'] = None
    #                     jsondetailsDoc['document_name'] = None
    #                     jsondetailsDoc['document_remark'] = None
    #                     json_sky['document_details'] = jsondetailsDoc
    #                     json_sky['document_details_string'] = str(jsondetailsDoc)
    #             else:
    #                 jsondetailsDoc = {}
    #                 jsondetailsDoc['document_type'] = None
    #                 jsondetailsDoc['document_name'] = None
    #                 jsondetailsDoc['document_remark'] = None
    #                 json_sky['document_details'] = jsondetailsDoc
    #                 json_sky['document_details_string'] = str(jsondetailsDoc)
    #             try:
    #                 json_sky['template_String'] = eval(k.template_images)
    #             except Exception as ex:
    #                 return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล template_String ให้เป็น Json ได้'}
    #             try:
    #                 data_step = eval(json_sky['data_step'])
    #             except Exception as ex:
    #                 return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล Step ให้เป็น Json ได้'}
    #             try:
    #                 step_Upload = eval(json_sky['step_Upload'])
    #             except Exception as ex:
    #                 return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล step_Upload ให้เป็น Json ได้'}
    #             json_sky['username'] = k.username
    #             json_sky['step_Max'] = k.step_Max
    #             json_sky['step_Name'] = k.step_Name
    #             if k.urgent_type != None:
    #                 json_sky['urgent_code'] = k.urgent_type
    #                 if k.urgent_type == 'M':
    #                     json_sky['urgent_string_th'] = 'ปกติ'
    #                     json_sky['urgent_string_en'] = 'MEDIUM'
    #                 elif k.urgent_type == 'U':
    #                     json_sky['urgent_string_th'] = 'ด่วน'
    #                     json_sky['urgent_string_en'] = 'URGENT'
    #                 elif k.urgent_type == 'I':
    #                     json_sky['urgent_string_th'] = 'ด่วนมาก'
    #                     json_sky['urgent_string_en'] = 'IMMEDIATE'
    #             else:
    #                 json_sky['urgent_code'] = None
    #                 json_sky['urgent_string_th'] = None
    #                 json_sky['urgent_string_en'] = None
    #             if k.qrCode_position != None:
    #                 try:
    #                     json_sky['qrCode_position'] = eval(k.qrCode_position)
    #                 except Exception as ex:
    #                     return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล qrCode_position ให้เป็น Json ได้'}
    #             else:
    #                 json_sky['qrCode_position'] = None
    #             json_sky['email'] = k.email
    #             if json_sky['step_Max'] == 1:
    #                 json_sky['data_step'] = [data_step]
    #             else:
    #                 json_sky['data_step'] = data_step
    #             json_sky['step_Upload'] = step_Upload
    #             arr_get.append(json_sky)
    #         if len(arr_get) != 0:
    #             return {'result':'OK','messageText':arr_get,'status_Code':200}
    #         else:
    #             return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
    #     except Exception as ex:
    #         exc_type, exc_obj, exc_tb = sys.exc_info()
    #         fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
    #         print(exc_type, fname, exc_tb.tb_lineno)
    #         return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}

    def select_get_templateandusername(self, username,template):
        self.username = username
        self.template = template
        try:
            arr_get = []
            for k in paper_lessstep.query.filter_by(username=self.username,step_Code=self.template,status='ACTIVE').order_by((paper_lessstep.sid).asc()):
                json_sky = {}
                json_sky['step_Code'] = k.step_Code
                json_sky['dateTime'] = k.DateTime
                json_sky['dateTime_string'] = str(k.DateTime).split('+')[0]
                json_sky['data_step'] = json.dumps(k.step_Data)
                json_sky['data_step'] = json.loads(json_sky['data_step'])
                json_sky['step_Upload'] = json.dumps(k.step_Upload)
                json_sky['step_Upload'] = json.loads(json_sky['step_Upload'])
                json_sky['step_Description'] = k.step_Description
                json_sky['condition_string'] = k.condition_temp
                if k.documentDetails != None:
                    if str(k.documentDetails).replace(' ','') != '':
                        result_detailDoc = paper_lessdocument_detail.query.filter_by(documentUser=k.username,documentStatus="ACTIVE",documentType=k.documentDetails).first()
                        if result_detailDoc != None:
                            json_sky['document_details'] = eval(result_detailDoc.documentJson)
                            json_sky['document_details_string'] = result_detailDoc.documentJson
                        else:
                            jsondetailsDoc = {}
                            jsondetailsDoc['document_type'] = None
                            jsondetailsDoc['document_name'] = None
                            jsondetailsDoc['document_remark'] = None
                            json_sky['document_details'] = jsondetailsDoc
                            json_sky['document_details_string'] = str(jsondetailsDoc)
                    else:
                        jsondetailsDoc = {}
                        jsondetailsDoc['document_type'] = None
                        jsondetailsDoc['document_name'] = None
                        jsondetailsDoc['document_remark'] = None
                        json_sky['document_details'] = jsondetailsDoc
                        json_sky['document_details_string'] = str(jsondetailsDoc)
                else:
                    jsondetailsDoc = {}
                    jsondetailsDoc['document_type'] = None
                    jsondetailsDoc['document_name'] = None
                    jsondetailsDoc['document_remark'] = None
                    json_sky['document_details'] = jsondetailsDoc
                    json_sky['document_details_string'] = str(jsondetailsDoc)
                try:
                    json_sky['template_String'] = eval(k.template_images)
                except Exception as ex:
                    return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล template_String ให้เป็น Json ได้'}
                try:
                    data_step = eval(json_sky['data_step'])
                except Exception as ex:
                    return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล Step ให้เป็น Json ได้'}
                try:
                    step_Upload = eval(json_sky['step_Upload'])
                except Exception as ex:
                    return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล step_Upload ให้เป็น Json ได้'}
                json_sky['username'] = k.username
                json_sky['step_Max'] = k.step_Max
                json_sky['step_Name'] = k.step_Name
                if k.urgent_type != None:
                    json_sky['urgent_code'] = k.urgent_type
                    if k.urgent_type == 'M':
                        json_sky['urgent_string_th'] = 'ปกติ'
                        json_sky['urgent_string_en'] = 'MEDIUM'
                    elif k.urgent_type == 'U':
                        json_sky['urgent_string_th'] = 'ด่วน'
                        json_sky['urgent_string_en'] = 'URGENT'
                    elif k.urgent_type == 'I':
                        json_sky['urgent_string_th'] = 'ด่วนมาก'
                        json_sky['urgent_string_en'] = 'IMMEDIATE'
                else:
                    json_sky['urgent_code'] = None
                    json_sky['urgent_string_th'] = None
                    json_sky['urgent_string_en'] = None
                if k.qrCode_position != None:
                    try:
                        json_sky['qrCode_position'] = eval(k.qrCode_position)
                    except Exception as ex:
                        return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล qrCode_position ให้เป็น Json ได้'}
                else:
                    json_sky['qrCode_position'] = None
                json_sky['email'] = k.email
                if json_sky['step_Max'] == 1:
                    json_sky['data_step'] = [data_step]
                else:
                    json_sky['data_step'] = data_step
                json_sky['step_Upload'] = step_Upload
                arr_get.append(json_sky)
            if len(arr_get) != 0:
                return {'result':'OK','messageText':arr_get,'status_Code':200}
            else:
                return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
        except Exception as ex:
            return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}

    # def select_get_string

    def select_get_string_templateAndusername_tax_new(self, templateCode,taxId):
        self.taxId = taxId
        self.taxItemplateCoded = templateCode
        arr_get = []
        tmpstatus = 'ACTIVE'
        tmptaxidlike = "'%" + self.taxId+"%'"
        print(tmptaxidlike)
        try:
            sql = ''' 
            SELECT
                tb_step_template.sid AS "sid",
                tb_step_template."step_Code" AS "step_Code",
                tb_step_template."step_Data" AS "step_Data",
                tb_step_template."step_Max" AS "step_Max",
                tb_step_template.username AS "username",
                tb_step_template.email AS email,
                tb_step_template."DateTime" AS "DateTime",
                tb_step_template."step_Description" AS "step_Description",
                tb_step_template."step_Name" AS "step_Name",
                tb_step_template."step_Upload" AS "step_Upload",
                tb_step_template.template_images AS template_images,
                tb_step_template.template_biz AS template_biz,
                tb_step_template."qrCode_position" AS "qrCode_position",
                tb_step_template.status AS status,
                tb_step_template."status_Update" AS "status_Update",
                tb_step_template."documentDetails" AS "documentDetails",
                tb_step_template.urgent_type AS urgent_type,
                tb_step_template.condition_temp AS condition_temp,
                tb_step_template.webhook AS webhook,
                tb_step_template.email_center AS email_center,
                tb_step_template.formula_temp AS formula_temp,
                tb_step_template.digit_sign AS digit_sign,
                tb_step_template.page_sign_options AS page_sign_options,
                tb_step_template.options_page AS options_page,
                tb_step_template.status_use AS status_use,
                tb_step_template.time_expire AS time_expire,
                tb_step_template.importance_doc AS importance_doc,
                tb_step_template.last_digit_sign AS last_digit_sign,
                tb_step_template.status_ref AS status_ref
            FROM
                tb_step_template 
            WHERE
                tb_step_template."step_Code" = :tmpstepcode
                AND tb_step_template.status = :tmpstatus
            '''
            connection = slave.connect()
            result = connection.execute(text(sql),tmpstatus=tmpstatus,tmpstepcode=self.taxItemplateCoded)
            resultQuery = [dict(row) for row in result]
            if len(resultQuery) > 0:
                i = resultQuery[0]
                tmpbizinfo = i['template_biz']
                if str(tmpbizinfo).replace(' ','') != '':
                    biz_info_template = eval(tmpbizinfo)
                    taxId_db = biz_info_template['id_card_num']
                    if str(self.taxId).replace(' ','') != '':
                        if self.taxId == taxId_db:
                            print(i['template_biz'])
                            try:
                                json_sky = {}
                                json_sky['step_Code'] = i['step_Code']
                                json_sky['dateTime'] = i['DateTime']
                                json_sky['dateTime_string'] = str(i['DateTime']).split('+')[0]
                                json_sky['data_step'] = json.dumps(i['step_Data'])
                                json_sky['data_step'] = json.loads(json_sky['data_step'])
                                json_sky['condition_string'] = i['condition_temp']
                                json_sky['step_Upload'] = str(i['step_Upload'])
                                json_sky['options_page'] = (i['options_page'])
                                json_sky['digit_sign'] = (i['digit_sign'])
                                json_sky['email_center'] = i['email_center']
                                json_sky['webhook'] = i['webhook']
                                json_sky['sign_page_options'] = i['page_sign_options']
                                json_sky['time_expire'] = i['time_expire']
                                json_sky['importance_doc'] = i['importance_doc']
                                json_sky['last_digit_sign'] = i['last_digit_sign']
                                json_sky['status_ref'] = i['status_ref']
                                # json_sky['step_Upload'] = json.loads(json_sky['step_Upload'])
                                try:
                                    data_step = eval(json_sky['data_step'])
                                except Exception as ex:
                                    return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล Step ให้เป็น Json ได้'}
                                try:
                                    step_Upload = eval(json_sky['step_Upload'])
                                except Exception as ex:
                                    return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล step_Upload ให้เป็น Json ได้'}
                                json_sky['username'] = i['username']
                                json_sky['step_Max'] = i['step_Max']
                                json_sky['step_Name'] = i['step_Name']
                                if i['qrCode_position'] != None:
                                    try:
                                        json_sky['qrCode_position'] = eval(i['qrCode_position'])
                                    except Exception as ex:
                                        return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล qrCode_position ให้เป็น Json ได้'}
                                else:
                                    json_sky['qrCode_position'] = None
                                json_sky['step_Description'] = i['step_Description']
                                jsondetailsDoc = {}
                                jsondetailsDoc['document_type'] = None
                                jsondetailsDoc['document_name'] = None
                                jsondetailsDoc['document_remark'] = None
                                json_sky['document_details'] = jsondetailsDoc
                                json_sky['document_details_string'] = str(jsondetailsDoc)
                                if i['documentDetails'] != None:
                                    if str(i['documentDetails']).replace(' ','') != '':
                                        sql_DocType = '''
                                            SELECT
                                                tb_document_detail."documentJson" AS "documentJson"
                                            FROM
                                                tb_document_detail 
                                            WHERE
                                                tb_document_detail."documentStatus" = :tmpstatus
                                                AND tb_document_detail."documentType" = :tmpdoc_type
                                                AND ( tb_document_detail.biz_info LIKE '%''' +self.taxId+ '''%' ) 
                                        '''
                                        result = connection.execute(text(sql_DocType),tmpstatus=tmpstatus,tmpdoc_type=i['documentDetails'])
                                        resultQueryDocType = [dict(row) for row in result]
                                        if len(resultQueryDocType) > 0:
                                            json_sky['document_details'] = eval(resultQueryDocType[0]['documentJson'])
                                            json_sky['document_details_string'] = resultQueryDocType[0]['documentJson']
                                json_sky['email'] = i['email']
                                if i['urgent_type'] != None:
                                    json_sky['urgent_code'] = i['urgent_type']
                                    if i['urgent_type'] == 'M':
                                        json_sky['urgent_string_th'] = 'ปกติ'
                                        json_sky['urgent_string_en'] = 'MEDIUM'
                                    elif i['urgent_type'] == 'U':
                                        json_sky['urgent_string_th'] = 'ด่วน'
                                        json_sky['urgent_string_en'] = 'URGENT'
                                    elif i['urgent_type'] == 'I':
                                        json_sky['urgent_string_th'] = 'ด่วนมาก'
                                        json_sky['urgent_string_en'] = 'IMMEDIATE'
                                else:
                                    json_sky['urgent_code'] = None
                                    json_sky['urgent_string_th'] = None
                                    json_sky['urgent_string_en'] = None
                                if json_sky['step_Max'] == 1:
                                    json_sky['data_step'] = str(data_step)
                                else:
                                    json_sky['data_step'] = str(data_step)
                                json_sky['step_Upload'] = str(step_Upload)
                                arr_get.append(json_sky)
                            except Exception as e:
                                print(str(e))
                                return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
            # return        
            # print(self.taxItemplateCoded)
            # print(paper_lessstep.query.filter(paper_lessstep.step_Code==self.taxItemplateCoded,paper_lessstep.status=="ACTIVE"))
            # return ''
            # for i in paper_lessstep.query.filter(paper_lessstep.step_Code==self.taxItemplateCoded,paper_lessstep.status=="ACTIVE").all():
            #     if i.template_biz != None:
            #         if str(i.template_biz).replace(' ','') != '':
            #             biz_info_template = eval(i.template_biz)
            #             taxId_db = biz_info_template['id_card_num']
            #             if str(self.taxId).replace(' ','') != '':
            #                 if self.taxId == taxId_db:
            #                     try:
            #                         json_sky = {}
            #                         json_sky['step_Code'] = i.step_Code
            #                         json_sky['dateTime'] = i.DateTime
            #                         json_sky['dateTime_string'] = str(i.DateTime).split('+')[0]
            #                         json_sky['data_step'] = json.dumps(i.step_Data)
            #                         json_sky['data_step'] = json.loads(json_sky['data_step'])
            #                         json_sky['condition_string'] = i.condition_temp
            #                         json_sky['step_Upload'] = str(i.step_Upload)
            #                         json_sky['options_page'] = (i.options_page)
            #                         json_sky['digit_sign'] = (i.digit_sign)
            #                         json_sky['email_center'] = i.email_center
            #                         json_sky['webhook'] = i.webhook
            #                         json_sky['sign_page_options'] = i.page_sign_options
            #                         # json_sky['step_Upload'] = json.loads(json_sky['step_Upload'])
            #                         try:
            #                             data_step = eval(json_sky['data_step'])
            #                         except Exception as ex:
            #                             return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล Step ให้เป็น Json ได้'}
            #                         try:
            #                             step_Upload = eval(json_sky['step_Upload'])
            #                         except Exception as ex:
            #                             return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล step_Upload ให้เป็น Json ได้'}
            #                         json_sky['username'] = i.username
            #                         json_sky['step_Max'] = i.step_Max
            #                         json_sky['step_Name'] = i.step_Name
            #                         if i.qrCode_position != None:
            #                             try:
            #                                 json_sky['qrCode_position'] = eval(i.qrCode_position)
            #                             except Exception as ex:
            #                                 return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล qrCode_position ให้เป็น Json ได้'}
            #                         else:
            #                             json_sky['qrCode_position'] = None
            #                         json_sky['step_Description'] = i.step_Description
            #                         if i.documentDetails != None:
            #                             if str(i.documentDetails).replace(' ','') != '':
            #                                 result_detailDoc = paper_lessdocument_detail.query.filter(paper_lessdocument_detail.documentStatus=="ACTIVE",paper_lessdocument_detail.documentType==i.documentDetails,paper_lessdocument_detail.biz_info.contains(self.taxId)).first()
            #                                 if result_detailDoc != None:
            #                                     json_sky['document_details'] = eval(result_detailDoc.documentJson)
            #                                     json_sky['document_details_string'] = result_detailDoc.documentJson
            #                                 else:
            #                                     jsondetailsDoc = {}
            #                                     jsondetailsDoc['document_type'] = None
            #                                     jsondetailsDoc['document_name'] = None
            #                                     jsondetailsDoc['document_remark'] = None
            #                                     json_sky['document_details'] = jsondetailsDoc
            #                                     json_sky['document_details_string'] = str(jsondetailsDoc)
            #                             else:
            #                                 jsondetailsDoc = {}
            #                                 jsondetailsDoc['document_type'] = None
            #                                 jsondetailsDoc['document_name'] = None
            #                                 jsondetailsDoc['document_remark'] = None
            #                                 json_sky['document_details'] = jsondetailsDoc
            #                                 json_sky['document_details_string'] = str(jsondetailsDoc)
            #                         else:
            #                             jsondetailsDoc = {}
            #                             jsondetailsDoc['document_type'] = None
            #                             jsondetailsDoc['document_name'] = None
            #                             jsondetailsDoc['document_remark'] = None
            #                             json_sky['document_details'] = jsondetailsDoc
            #                             json_sky['document_details_string'] = str(jsondetailsDoc)
            #                         json_sky['email'] = i.email
            #                         if i.urgent_type != None:
            #                             json_sky['urgent_code'] = i.urgent_type
            #                             if i.urgent_type == 'M':
            #                                 json_sky['urgent_string_th'] = 'ปกติ'
            #                                 json_sky['urgent_string_en'] = 'MEDIUM'
            #                             elif i.urgent_type == 'U':
            #                                 json_sky['urgent_string_th'] = 'ด่วน'
            #                                 json_sky['urgent_string_en'] = 'URGENT'
            #                             elif i.urgent_type == 'I':
            #                                 json_sky['urgent_string_th'] = 'ด่วนมาก'
            #                                 json_sky['urgent_string_en'] = 'IMMEDIATE'
            #                         else:
            #                             json_sky['urgent_code'] = None
            #                             json_sky['urgent_string_th'] = None
            #                             json_sky['urgent_string_en'] = None
            #                         if json_sky['step_Max'] == 1:
            #                             json_sky['data_step'] = str(data_step)
            #                         else:
            #                             json_sky['data_step'] = str(data_step)
            #                         json_sky['step_Upload'] = str(step_Upload)
            #                         arr_get.append(json_sky)
            #                     except Exception as e:
            #                         print(str(e))
            #                         return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}

            if len(arr_get) != 0:
                return {'result':'OK','messageText':arr_get,'status_Code':200}
            else:
                return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
        except Exception as ex:
            print(str(ex))
            return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
        finally:
            connection.close()


    def select_get_string_templateAndusername(self,username,template):
        self.username = username
        self.template = template
        try:
            arr_get = []
            for k in paper_lessstep.query.filter_by(step_Code=self.template,status='ACTIVE').order_by((paper_lessstep.sid).asc()):
                # print(k)
                json_sky = {}
                json_sky['template_webhook'] = k.webhook
                json_sky['email_center'] = k.email_center
                json_sky['step_Code'] = k.step_Code
                json_sky['dateTime'] = k.DateTime
                json_sky['dateTime_string'] = str(k.DateTime).split('+')[0]
                json_sky['data_step'] = json.dumps(k.step_Data)
                json_sky['data_step'] = json.loads(json_sky['data_step'])
                json_sky['step_Upload'] = json.dumps(k.step_Upload)
                json_sky['step_Upload'] = json.loads(json_sky['step_Upload'])
                json_sky['step_Description'] = k.step_Description
                json_sky['condition_string'] = k.condition_temp
                json_sky['options_page'] = (k.options_page)
                json_sky['digit_sign'] = k.digit_sign
                json_sky['webhook'] = k.webhook
                json_sky['status_ref'] = (k.status_ref)
                # json_sky['stamp_all'] = k.sign_page_options
                if k.urgent_type != None:
                    json_sky['urgent_code'] = k.urgent_type
                    if k.urgent_type == 'M':
                        json_sky['urgent_string_th'] = 'ปกติ'
                        json_sky['urgent_string_en'] = 'MEDIUM'
                    elif k.urgent_type == 'U':
                        json_sky['urgent_string_th'] = 'ด่วน'
                        json_sky['urgent_string_en'] = 'URGENT'
                    elif k.urgent_type == 'I':
                        json_sky['urgent_string_th'] = 'ด่วนมาก'
                        json_sky['urgent_string_en'] = 'IMMEDIATE'
                else:
                    json_sky['urgent_code'] = None
                    json_sky['urgent_string_th'] = None
                    json_sky['urgent_string_en'] = None
                if k.qrCode_position != None:
                    json_sky['qrCode_position'] = json.dumps(k.qrCode_position)
                    json_sky['qrCode_position'] = json.loads(json_sky['qrCode_position'])
                else:
                    json_sky['qrCode_position'] = None
                try:
                    data_step = eval(json_sky['data_step'])
                except Exception as ex:
                    return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล Step ให้เป็น Json ได้'}
                try:
                    step_Upload = eval(json_sky['step_Upload'])
                except Exception as ex:
                    return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล step_Upload ให้เป็น Json ได้'}
                json_sky['username'] = k.username
                json_sky['step_Max'] = k.step_Max
                json_sky['step_Name'] = k.step_Name
                json_sky['email'] = k.email
                if k.documentDetails != None:
                    if str(k.documentDetails).replace(' ','') != '':
                        result_detailDoc = paper_lessdocument_detail.query.filter_by(documentUser=k.username,documentStatus="ACTIVE",documentType=k.documentDetails).first()
                        if result_detailDoc != None:
                            json_sky['document_details'] = eval(result_detailDoc.documentJson)
                            json_sky['document_details_string'] = result_detailDoc.documentJson
                        else:
                            jsondetailsDoc = {}
                            jsondetailsDoc['document_type'] = None
                            jsondetailsDoc['document_name'] = None
                            jsondetailsDoc['document_remark'] = None
                            json_sky['document_details'] = jsondetailsDoc
                            json_sky['document_details_string'] = str(jsondetailsDoc)
                    else:
                        jsondetailsDoc = {}
                        jsondetailsDoc['document_type'] = None
                        jsondetailsDoc['document_name'] = None
                        jsondetailsDoc['document_remark'] = None
                        json_sky['document_details'] = jsondetailsDoc
                        json_sky['document_details_string'] = str(jsondetailsDoc)
                else:
                    jsondetailsDoc = {}
                    jsondetailsDoc['document_type'] = None
                    jsondetailsDoc['document_name'] = None
                    jsondetailsDoc['document_remark'] = None
                    json_sky['document_details'] = jsondetailsDoc
                    json_sky['document_details_string'] = str(jsondetailsDoc)
                json_sky['data_step'] = json_sky['data_step']
                json_sky['step_Upload'] = json_sky['step_Upload']

                arr_get.append(json_sky)
            if len(arr_get) != 0:
                return {'result':'OK','messageText':arr_get,'status_Code':200}
            else:
                return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
        except Exception as ex:
            print(str(ex))
            return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}


    # def select_get_string_templateAndusername(self,username,template):
    #     self.username = username
    #     self.template = template
    #     try:
    #         arr_get = []
    #         for k in paper_lessstep.query.filter_by(step_Code=self.template,status='ACTIVE').order_by((paper_lessstep.sid).asc()):
    #             # print(k)
    #             json_sky = {}
    #             json_sky['template_webhook'] = k.webhook
    #             json_sky['email_center'] = k.email_center
    #             json_sky['step_Code'] = k.step_Code
    #             json_sky['dateTime'] = k.DateTime
    #             json_sky['dateTime_string'] = str(k.DateTime).split('+')[0]
    #             json_sky['data_step'] = json.dumps(k.step_Data)
    #             json_sky['data_step'] = json.loads(json_sky['data_step'])
    #             json_sky['step_Upload'] = json.dumps(k.step_Upload)
    #             json_sky['step_Upload'] = json.loads(json_sky['step_Upload'])
    #             json_sky['step_Description'] = k.step_Description
    #             json_sky['condition_string'] = k.condition_temp
    #             json_sky['options_page'] = (k.options_page)
    #             json_sky['digit_sign'] = k.digit_sign
    #             json_sky['webhook'] = k.webhook
    #             json_sky['sign_page_options'] = k.page_sign_options
    #             # json_sky['stamp_all'] = k.sign_page_options
    #             if k.urgent_type != None:
    #                 json_sky['urgent_code'] = k.urgent_type
    #                 if k.urgent_type == 'M':
    #                     json_sky['urgent_string_th'] = 'ปกติ'
    #                     json_sky['urgent_string_en'] = 'MEDIUM'
    #                 elif k.urgent_type == 'U':
    #                     json_sky['urgent_string_th'] = 'ด่วน'
    #                     json_sky['urgent_string_en'] = 'URGENT'
    #                 elif k.urgent_type == 'I':
    #                     json_sky['urgent_string_th'] = 'ด่วนมาก'
    #                     json_sky['urgent_string_en'] = 'IMMEDIATE'
    #             else:
    #                 json_sky['urgent_code'] = None
    #                 json_sky['urgent_string_th'] = None
    #                 json_sky['urgent_string_en'] = None
    #             if k.qrCode_position != None:
    #                 json_sky['qrCode_position'] = json.dumps(k.qrCode_position)
    #                 json_sky['qrCode_position'] = json.loads(json_sky['qrCode_position'])
    #             else:
    #                 json_sky['qrCode_position'] = None
    #             try:
    #                 data_step = eval(json_sky['data_step'])
    #             except Exception as ex:
    #                 return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล Step ให้เป็น Json ได้'}
    #             try:
    #                 step_Upload = eval(json_sky['step_Upload'])
    #             except Exception as ex:
    #                 return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล step_Upload ให้เป็น Json ได้'}
    #             json_sky['username'] = k.username
    #             json_sky['step_Max'] = k.step_Max
    #             json_sky['step_Name'] = k.step_Name
    #             json_sky['email'] = k.email
    #             if k.documentDetails != None:
    #                 if str(k.documentDetails).replace(' ','') != '':
    #                     result_detailDoc = paper_lessdocument_detail.query.filter_by(documentUser=k.username,documentStatus="ACTIVE",documentType=k.documentDetails).first()
    #                     if result_detailDoc != None:
    #                         json_sky['document_details'] = eval(result_detailDoc.documentJson)
    #                         json_sky['document_details_string'] = result_detailDoc.documentJson
    #                     else:
    #                         jsondetailsDoc = {}
    #                         jsondetailsDoc['document_type'] = None
    #                         jsondetailsDoc['document_name'] = None
    #                         jsondetailsDoc['document_remark'] = None
    #                         json_sky['document_details'] = jsondetailsDoc
    #                         json_sky['document_details_string'] = str(jsondetailsDoc)
    #                 else:
    #                     jsondetailsDoc = {}
    #                     jsondetailsDoc['document_type'] = None
    #                     jsondetailsDoc['document_name'] = None
    #                     jsondetailsDoc['document_remark'] = None
    #                     json_sky['document_details'] = jsondetailsDoc
    #                     json_sky['document_details_string'] = str(jsondetailsDoc)
    #             else:
    #                 jsondetailsDoc = {}
    #                 jsondetailsDoc['document_type'] = None
    #                 jsondetailsDoc['document_name'] = None
    #                 jsondetailsDoc['document_remark'] = None
    #                 json_sky['document_details'] = jsondetailsDoc
    #                 json_sky['document_details_string'] = str(jsondetailsDoc)
    #             json_sky['data_step'] = json_sky['data_step']
    #             json_sky['step_Upload'] = json_sky['step_Upload']

    #             arr_get.append(json_sky)
    #         if len(arr_get) != 0:
    #             return {'result':'OK','messageText':arr_get,'status_Code':200}
    #         else:
    #             return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
    #     except Exception as ex:
    #         print(str(ex))
    #         return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}

    def select_get_sender_OneChain(self, send_user):
        self.send_user = send_user
        try:
            arr_get = []
            arr_resouce_OneChain = []
            json_step_data  = {}
            for k in paper_lesssender.query.filter_by(send_user=self.send_user).order_by((paper_lesssender.id).desc()).all():
                json_sky = {}
                json_sky['send_time'] = k.send_time
                json_sky['send_time_string'] = str(k.send_time).split('+')[0]
                json_sky['status'] = k.status
                json_sky['sender_name'] = k.sender_name
                json_sky['sender_email'] = k.sender_email
                json_sky['sender_position'] = k.sender_position
                json_sky['result'] = 'OK'
                json_sky['file_name'] = k.file_name
                json_sky['tracking_id'] = k.tracking_id
                json_sky['step_code'] = k.step_code
                json_sky['step_data_sid'] = k.step_data_sid
                result_stepdata = paper_lessdatastep.query.filter_by(sid=k.step_data_sid).first()
                if result_stepdata != None:
                    if result_stepdata.view_details != None:
                        json_sky['view_details'] = eval(result_stepdata.view_details)
                    else:
                        json_sky['view_details'] = None
                else:
                    json_sky['view_details'] = None
                json_sky['url_sign'] = None
                result_resource = []
                for i in paper_lesstransactionChain.query.filter_by(f_sid=k.step_data_sid).order_by((paper_lesstransactionChain.f_id).desc()).all():
                    json_data_result = {}
                    json_data_result['Account'] = eval(i.f_userAccount)['username']
                    if json_data_result['Account'] == self.send_user:
                        json_data_result = {}
                        json_data_result['order'] = i.f_row
                        json_data_result['result'] = 'OK'
                        json_data_result['file_id'] = i.f_file_id
                        json_data_result['transactionId'] = i.f_transactionId
                        json_data_result['datetime'] = i.f_timestamp
                        json_data_result['datetime_string'] = str(i.f_timestamp).split('+')[0]
                        json_data_result['user_id'] = eval(i.f_metadate)['metadata']['user_id']
                    else:
                        json_data_result = {}
                        json_data_result['result'] = 'ER'
                    result_resource.append(json_data_result)
                json_sky['resource_OneChain'] = result_resource
                for j in paper_lessdocument.query.filter_by(step_id=k.step_data_sid).all():
                    if j.options_page != None:
                        json_sky['options_page_document'] = [eval(j.options_page)]
                    else:
                        json_sky['options_page_document'] = []
                    json_sky['document_Id'] = j.document_id
                    if j.urgent_type != None:
                        json_sky['urgent_code'] = j.urgent_type
                        if j.urgent_type == 'M':
                            json_sky['urgent_string_th'] = 'ปกติ'
                            json_sky['urgent_string_en'] = 'MEDIUM'
                        elif j.urgent_type == 'U':
                            json_sky['urgent_string_th'] = 'ด่วน'
                            json_sky['urgent_string_en'] = 'URGENT'
                        elif j.urgent_type == 'I':
                            json_sky['urgent_string_th'] = 'ด่วนมาก'
                            json_sky['urgent_string_en'] = 'IMMEDIATE'
                    else:
                        json_sky['urgent_code'] = None
                        json_sky['urgent_string_th'] = None
                        json_sky['urgent_string_en'] = None
                    if j.documentJson != None:
                        if str(j.documentJson).replace(' ','') != '':
                            json_sky['document_details'] = eval(j.documentJson)
                            json_sky['document_details_string'] = str(j.documentJson)
                        else:
                            jsondata = {}
                            jsondata['document_type'] = None
                            jsondata['document_name'] = None
                            jsondata['document_remark'] = None
                            json_sky['document_details'] = jsondata
                            json_sky['document_details_string'] = str(jsondata)
                    else:
                        jsondata = {}
                        jsondata['document_type'] = None
                        jsondata['document_name'] = None
                        jsondata['document_remark'] = None
                        json_sky['document_details'] = jsondata
                        json_sky['document_details_string'] = str(jsondata)
                for n in paper_lesspdf.query.filter_by(fid=k.file_id).all():
                    if n.hash_sign != None or n.hash_sign == "":
                        json_sky['file_status'] = 'Complete'
                    else:
                        json_sky['file_status'] = 'Incomplete'

                for i in paper_lessdatastep.query.filter_by(sid=json_sky['step_data_sid']).order_by((paper_lessdatastep.id).desc()).all():
                    arr_step = []
                    json_step_data = json.dumps(i.data_json)
                    json_step_data = json.loads(json_step_data)
                    json_step_data = eval(json_step_data)
                    if 'step_num' in json_step_data:
                        json_info_step2 = {}
                        arr_step_info = []
                        arr_step_totle = []
                        if 'step_detail' in json_step_data:
                                for s in range(len(json_step_data['step_detail'])):
                                    for y in range(len(json_step_data['step_detail'][s]['activity_code'])):
                                        if json_step_data['step_detail'][s]['activity_code'][y] == 'A03':
                                            json_info_step = {}
                                            json_info_step['step_num'] = json_step_data['step_num']
                                            json_info_step['one_email'] = json_step_data['step_detail'][s]['one_email']
                                            json_info_step['activity_status'] = json_step_data['step_detail'][s]['activity_status'][y]
                                            arr_step_totle.append(json_info_step)
                                            if json_step_data['step_detail'][s]['activity_status'][y] == 'Complete':
                                                json_info_step2['step_status'] = 'Complete'
                                            elif json_step_data['step_detail'][s]['activity_status'][y] == 'Approve':
                                                json_info_step2['step_status'] = 'Complete'
                                            else:
                                                try:
                                                    json_info_step2['step_status']
                                                except Exception as ex:
                                                    json_info_step2['step_status'] = 'Incomplete'
                                json_info_step2['step_info'] = arr_step_totle
                                arr_step_info.append(json_info_step2)
                        json_sky['file_user_status_detail'] = arr_step_info
                        json_sky['step_info'] = [json_step_data]
                    else:
                    # if json_sky['step_Max'] > 1:
                        arr_step_info = []
                        for o in range(len(json_step_data)):
                            arr_step.append(json_step_data[o])
                        for nn in range(len(arr_step)):
                            arr_step_totle = []
                            json_info_step2 = {}
                            if 'step_detail' in json_step_data[nn]:
                                for s in range(len(json_step_data[nn]['step_detail'])):
                                    for y in range(len(json_step_data[nn]['step_detail'][s]['activity_code'])):
                                        if json_step_data[nn]['step_detail'][s]['activity_code'][y] == 'A03':
                                            json_info_step = {}
                                            json_info_step['step_num'] = arr_step[nn]['step_num']
                                            json_info_step['one_email'] = json_step_data[nn]['step_detail'][s]['one_email']
                                            json_info_step['activity_status'] = json_step_data[nn]['step_detail'][s]['activity_status'][y]
                                            arr_step_totle.append(json_info_step)
                                            if arr_step[nn]['step_detail'][s]['activity_status'][y] == 'Complete':
                                                json_info_step2['step_status'] = 'Complete'
                                            elif arr_step[nn]['step_detail'][s]['activity_status'][y] == 'Approve':
                                                json_info_step2['step_status'] = 'Complete'
                                            else:
                                                try:
                                                    json_info_step2['step_status']
                                                except Exception as ex:
                                                    json_info_step2['step_status'] = 'Incomplete'
                                json_info_step2['step_info'] = arr_step_totle
                                arr_step_info.append(json_info_step2)
                        json_sky['file_user_status_detail'] = arr_step_info
                        json_sky['step_info'] = arr_step
                    # else:


                arr_get.append(json_sky)
            if len(arr_get) != 0:
                return {'result': 'OK', 'messageText': arr_get,'status_Code':200}
            else:
                return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล ' + self.send_user}
        except Exception as ex:
            return {'result': 'ER', 'messageText': str(ex)}

    def select_get_sender_sid_v2(self, send_user,sidCode):
        self.send_user = send_user
        self.sidCode = sidCode
        try:
            arr_get = []
            arr_resouce_OneChain = []
            json_step_data  = {}
            for k in paper_lesssender.query.filter_by(send_user=self.send_user,step_data_sid=self.sidCode).order_by((paper_lesssender.id).desc()).all():
                json_sky = {}
                json_sky['send_time'] = k.send_time
                json_sky['send_time_string'] = str(k.send_time).split('+')[0]
                json_sky['status'] = k.status
                json_sky['sender_name'] = k.sender_name
                json_sky['sender_email'] = k.sender_email
                json_sky['sender_position'] = k.sender_position
                json_sky['result'] = 'OK'
                json_sky['file_name'] = k.file_name
                json_sky['tracking_id'] = k.tracking_id
                json_sky['step_code'] = k.step_code
                json_sky['step_data_sid'] = k.step_data_sid
                result_stepdata = paper_lessdatastep.query.filter_by(sid=k.step_data_sid).first()
                if result_stepdata != None:
                    if result_stepdata.view_details != None:
                        json_sky['view_details'] = eval(result_stepdata.view_details)
                    else:
                        json_sky['view_details'] = None
                else:
                    json_sky['view_details'] = None
                json_sky['url_sign'] = None
                result_resource = []
                for i in paper_lesstransactionChain.query.filter_by(f_sid=k.step_data_sid).order_by((paper_lesstransactionChain.f_id).desc()).all():
                    json_data_result = {}
                    json_data_result['Account'] = eval(i.f_userAccount)['username']
                    if json_data_result['Account'] == self.send_user:
                        json_data_result = {}
                        json_data_result['order'] = i.f_row
                        json_data_result['result'] = 'OK'
                        json_data_result['file_id'] = i.f_file_id
                        json_data_result['transactionId'] = i.f_transactionId
                        json_data_result['datetime'] = i.f_timestamp
                        json_data_result['datetime_string'] = str(i.f_timestamp).split('+')[0]
                        json_data_result['user_id'] = eval(i.f_metadate)['metadata']['user_id']
                    else:
                        json_data_result = {}
                        json_data_result['result'] = 'ER'
                    result_resource.append(json_data_result)
                json_sky['resource_OneChain'] = result_resource
                for j in paper_lessdocument.query.filter_by(step_id=k.step_data_sid).all():
                    json_sky['document_Id'] = j.document_id
                    if j.documentJson != None:
                        if str(j.documentJson).replace(' ','') != '':
                            json_sky['document_details'] = eval(j.documentJson)
                            json_sky['document_details_string'] = str(j.documentJson)
                        else:
                            jsondata = {}
                            jsondata['document_type'] = None
                            jsondata['document_name'] = None
                            jsondata['document_remark'] = None
                            json_sky['document_details'] = jsondata
                            json_sky['document_details_string'] = str(jsondata)
                    else:
                        jsondata = {}
                        jsondata['document_type'] = None
                        jsondata['document_name'] = None
                        jsondata['document_remark'] = None
                        json_sky['document_details'] = jsondata
                        json_sky['document_details_string'] = str(jsondata)
                for n in paper_lesspdf.query.filter_by(fid=k.file_id).all():
                    if n.hash_sign != None or n.hash_sign == "":
                        json_sky['file_status'] = 'Complete'
                    else:
                        json_sky['file_status'] = 'Incomplete'

                for i in paper_lessdatastep.query.filter_by(sid=json_sky['step_data_sid']).order_by((paper_lessdatastep.id).desc()).all():
                    arr_step = []
                    json_step_data = json.dumps(i.data_json)
                    json_step_data = json.loads(json_step_data)
                    json_step_data = eval(json_step_data)
                    if 'step_num' in json_step_data:
                        json_info_step2 = {}
                        arr_step_info = []
                        arr_step_totle = []
                        if 'step_detail' in json_step_data:
                                for s in range(len(json_step_data['step_detail'])):
                                    for y in range(len(json_step_data['step_detail'][s]['activity_code'])):
                                        if json_step_data['step_detail'][s]['activity_code'][y] == 'A03':
                                            json_info_step = {}
                                            json_info_step['step_num'] = json_step_data['step_num']
                                            json_info_step['one_email'] = json_step_data['step_detail'][s]['one_email']
                                            json_info_step['activity_status'] = json_step_data['step_detail'][s]['activity_status'][y]
                                            arr_step_totle.append(json_info_step)
                                            if json_step_data['step_detail'][s]['activity_status'][y] == 'Complete':
                                                json_info_step2['step_status'] = 'Complete'
                                            elif json_step_data['step_detail'][s]['activity_status'][y] == 'Approve':
                                                json_info_step2['step_status'] = 'Complete'
                                            else:
                                                try:
                                                    json_info_step2['step_status']
                                                except Exception as ex:
                                                    json_info_step2['step_status'] = 'Incomplete'
                                json_info_step2['step_info'] = arr_step_totle
                                arr_step_info.append(json_info_step2)
                        json_sky['file_user_status_detail'] = arr_step_info
                        json_sky['step_info'] = [json_step_data]
                    else:
                    # if json_sky['step_Max'] > 1:
                        arr_step_info = []
                        for o in range(len(json_step_data)):
                            arr_step.append(json_step_data[o])
                        for nn in range(len(arr_step)):
                            arr_step_totle = []
                            json_info_step2 = {}
                            if 'step_detail' in json_step_data[nn]:
                                for s in range(len(json_step_data[nn]['step_detail'])):
                                    for y in range(len(json_step_data[nn]['step_detail'][s]['activity_code'])):
                                        if json_step_data[nn]['step_detail'][s]['activity_code'][y] == 'A03':
                                            json_info_step = {}
                                            json_info_step['step_num'] = arr_step[nn]['step_num']
                                            json_info_step['one_email'] = json_step_data[nn]['step_detail'][s]['one_email']
                                            json_info_step['activity_status'] = json_step_data[nn]['step_detail'][s]['activity_status'][y]
                                            arr_step_totle.append(json_info_step)
                                            if arr_step[nn]['step_detail'][s]['activity_status'][y] == 'Complete':
                                                json_info_step2['step_status'] = 'Complete'
                                            elif arr_step[nn]['step_detail'][s]['activity_status'][y] == 'Approve':
                                                json_info_step2['step_status'] = 'Complete'
                                            else:
                                                try:
                                                    json_info_step2['step_status']
                                                except Exception as ex:
                                                    json_info_step2['step_status'] = 'Incomplete'
                                json_info_step2['step_info'] = arr_step_totle
                                arr_step_info.append(json_info_step2)
                        json_sky['file_user_status_detail'] = arr_step_info
                        json_sky['step_info'] = arr_step
                    # else:


                arr_get.append(json_sky)
            if len(arr_get) != 0:
                return {'result': 'OK', 'messageText': arr_get,'status_Code':200}
            else:
                return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล ' + self.send_user}
        except Exception as ex:
            return {'result': 'ER', 'messageText': str(ex)}

    def select_getComment(self,sidCode):
        self.sidCode = sidCode
        json_data = {}
        result_Comment = paper_lessmessageComment.query.filter_by(sid=self.sidCode).order_by((paper_lessmessageComment.time_Update).desc()).first()
        print(result_Comment)
        if result_Comment != None:
            try:
                tmp_json = eval(result_Comment.message_Comment)
                for n in range(len(tmp_json)):
                    if 'modified' in tmp_json[n]:
                        tmp_email = tmp_json[n]['modified']
                    if 'comment_modified_by' in tmp_json[n]:
                        tmp_email = tmp_json[n]['comment_modified_by']
                    name = fine_name_surename(tmp_email)
                    tmp_json[n]['name'] = name
                json_data['messageComment_json'] = tmp_json
                # print(json_data)
            except Exception as ex:
                return {'result': 'ER', 'messageText': None,'status_Code':200,'messageER':'ไม่สามารถแปลงข้อมูลเป็น Json ได้'}
            return {'result': 'OK', 'messageText': json_data,'status_Code':200,'messageER':None}
        else:
            return {'result': 'ER', 'messageText': None,'status_Code':200,'messageER':'ไม่พบข้อมูลที่ค้นหา'}

    def select_get_sender(self, send_user):
        self.send_user = send_user
        try:
            arr_get = []
            arr_resouce_OneChain = []
            json_step_data  = {}
            for k in paper_lesssender.query.filter_by(send_user=self.send_user).order_by((paper_lesssender.id).desc()).all():
                json_sky = {}
                json_sky['send_time'] = k.send_time
                json_sky['send_time_string'] = str(k.send_time).split('+')[0]
                json_sky['status'] = k.status
                json_sky['sender_name'] = k.sender_name
                json_sky['sender_email'] = k.sender_email
                json_sky['sender_position'] = k.sender_position
                json_sky['result'] = 'OK'
                json_sky['file_name'] = k.file_name
                json_sky['tracking_id'] = k.tracking_id
                json_sky['step_code'] = k.step_code
                json_sky['step_data_sid'] = k.step_data_sid
                for j in paper_lessdocument.query.filter_by(step_id=k.step_data_sid).all():
                    json_sky['document_Id'] = j.document_id
                for n in paper_lesspdf.query.filter_by(fid=k.file_id).all():
                    if n.hash_sign != None or n.hash_sign == "":
                        json_sky['file_status'] = 'Complete'
                    else:
                        json_sky['file_status'] = 'Incomplete'
                arr_step = []
                for i in paper_lessdatastep.query.filter_by(sid=json_sky['step_data_sid']).order_by((paper_lessdatastep.id).desc()).all():
                    #
                    arr_step_info = []
                    json_step_data = json.dumps(i.data_json)
                    json_step_data = json.loads(json_step_data)
                    json_step_data = eval(json_step_data)
                    for o in range(len(json_step_data)):
                        arr_step.append(json_step_data[o])
                    for nn in range(len(arr_step)):
                        arr_step_totle = []

                        json_info_step2 = {}
                        if 'step_detail' in json_step_data[nn]:
                            for s in range(len(json_step_data[nn]['step_detail'])):
                                for y in range(len(json_step_data[nn]['step_detail'][s]['activity_code'])):

                                    if json_step_data[nn]['step_detail'][s]['activity_code'][y] == 'A03':
                                        json_info_step = {}
                                        json_info_step['step_num'] = arr_step[nn]['step_num']
                                        json_info_step['one_email'] = json_step_data[nn]['step_detail'][s]['one_email']
                                        json_info_step['activity_status'] = json_step_data[nn]['step_detail'][s]['activity_status'][y]
                                        arr_step_totle.append(json_info_step)
                                        # json_info_step['info'] = arr_step_totle
                                if 'Complete' in json_step_data[nn]['step_detail'][s]['activity_status']:
                                    json_info_step2['step_status'] = 'Complete'
                                else:
                                    try:
                                        json_info_step2['step_status']
                                    except Exception as ex:
                                        json_info_step2['step_status'] = 'Incomplete'
                            json_info_step2['step_info'] = arr_step_totle
                            arr_step_info.append(json_info_step2)
                            json_sky['file_user_status_detail'] = arr_step_info

                    json_sky['step_info'] = arr_step

                arr_get.append(json_sky)
            if len(arr_get) != 0:
                return {'result': 'OK', 'messageText': arr_get,'status_Code':200}
            else:
                return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล ' + self.send_user}
        except Exception as ex:
            return {'result': 'ER', 'messageText': str(ex)}

    def select_get_stepdata(self, data_sid):
        self.data_sid = data_sid
        try:
            arr_get = []
            for k in paper_lessdatastep.query.filter_by(sid=self.data_sid).all():
                print(k)
                json_sky = {}
                json_sky['id'] = k.id
                json_sky['sid'] = str(k.sid)
                json_sky['list_step'] = eval(k.data_json)
                json_sky['update_time'] = k.update_time
                arr_get.append(json_sky)
            if len(arr_get) != 0:
                return {'result': 'OK', 'messageText': arr_get,'status_Code':200}
            else:
                return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล' }
        except Exception as ex:
            return {'result': 'ER', 'messageText': str(ex)}

    def select_get_recipient_OneChain(self,thai_email):
        self.thai_email = thai_email
        try:
            arr_get_sid = []
            arr_get = []
            for k in paper_lessdatastep.query.order_by((paper_lessdatastep.id).desc()).all():
                json_sky = {}
                try:
                    json_sky['data_json'] = eval(k.data_json)
                except Exception as ex:
                    return {'result': 'ER', 'messageText': 'Json ER!'}
                json_sky['sid'] = k.sid
                json_sky['update_time'] = k.update_time

                arr_get.append(json_sky)
            print(len(arr_get))
            for n in range(len(arr_get)):
                if 'step_num' in arr_get[n]['data_json']:
                    if 'step_detail' in arr_get[n]['data_json']:
                            for o in range(len(arr_get[n]['data_json']['step_detail'])):
                                if 'one_email' in arr_get[n]['data_json']['step_detail'][o]:
                                    arrjson_data = {}
                                    arr_data_json = []
                                    for s in range(len(arr_get[n]['data_json']['step_detail'][o]['activity_code'])):
                                        try:
                                            activity_code = arr_get[n]['data_json']['step_detail'][o]['activity_code'][s]
                                        except Exception as ex:
                                            print(ex)
                                            activity_code = ''
                                        if activity_code == "A03":
                                            if self.thai_email == arr_get[n]['data_json']['step_detail'][o]['one_email']:
                                                try:
                                                    for u in paper_lesssender.query.filter_by(step_data_sid=arr_get[n]['sid']).order_by((paper_lesssender.id).desc()).all():
                                                        json_sky = {}
                                                        json_sky['send_time'] = u.send_time
                                                        json_sky['send_time_string'] = str(u.send_time).split('+')[0]
                                                        json_sky['status'] = u.status
                                                        json_sky['sender_name'] = u.sender_name
                                                        json_sky['sender_email'] = u.sender_email
                                                        json_sky['sender_position'] = u.sender_position
                                                        json_sky['file_id'] = u.file_id
                                                        json_sky['result'] = 'OK'
                                                        json_sky['file_name'] = u.file_name
                                                        json_sky['tracking_id'] = u.tracking_id
                                                        json_sky['step_code'] = u.step_code
                                                        json_sky['step_data_sid'] = u.step_data_sid
                                                        json_sky['url_sign'] = None
                                                        result_stepdata = paper_lessdatastep.query.filter_by(sid=arr_get[n]['sid']).first()
                                                        if result_stepdata != None:
                                                            if result_stepdata.view_details != None:
                                                                json_sky['view_details'] = eval(result_stepdata.view_details)
                                                            else:
                                                                json_sky['view_details'] = None
                                                        else:
                                                            json_sky['view_details'] = None
                                                        result_resource = []
                                                        for i in paper_lesstransactionChain.query.filter_by(f_sid=u.step_data_sid).order_by((paper_lesstransactionChain.f_id).desc()).all():
                                                            json_data_result = {}
                                                            json_data_result['Account'] = eval(i.f_userAccount)['email_thai']
                                                            if self.thai_email in json_data_result['Account']:
                                                                json_data_result = {}
                                                                json_data_result['order'] = i.f_row
                                                                json_data_result['result'] = 'OK'
                                                                json_data_result['file_id'] = i.f_file_id
                                                                json_data_result['transactionId'] = i.f_transactionId
                                                                json_data_result['datetime'] = i.f_timestamp
                                                                json_data_result['datetime_string'] = str(i.f_timestamp).split('+')[0]
                                                                json_data_result['user_id'] = eval(i.f_metadate)['metadata']['user_id']
                                                                json_data_result['userAccount'] = str(i.f_userAccount)
                                                            else:
                                                                json_data_result = {}
                                                                json_data_result['result'] = 'ER'
                                                            result_resource.append(json_data_result)
                                                        json_sky['resource_OneChain'] = result_resource
                                                        for j in paper_lessdocument.query.filter_by(step_id=arr_get[n]['sid']).all():
                                                            json_sky['document_Id'] = j.document_id
                                                            json_sky['stamp_all'] = j.sign_page_options
                                                            if j.options_page != None:
                                                                documentoptions_page = [eval(j.options_page)]
                                                            else:
                                                                documentoptions_page = []
                                                        if result_DetailsDocument.urgent_type != None:
                                                            if j.urgent_type != None:
                                                                json_sky['urgent_code'] = j.urgent_type
                                                                if j.urgent_type == 'M':
                                                                    json_sky['urgent_string_th'] = 'ปกติ'
                                                                    json_sky['urgent_string_en'] = 'MEDIUM'
                                                                elif j.urgent_type == 'U':
                                                                    json_sky['urgent_string_th'] = 'ด่วน'
                                                                    json_sky['urgent_string_en'] = 'URGENT'
                                                                elif j.urgent_type == 'I':
                                                                    json_sky['urgent_string_th'] = 'ด่วนมาก'
                                                                    json_sky['urgent_string_en'] = 'IMMEDIATE'
                                                            else:
                                                                json_sky['urgent_code'] = None
                                                                json_sky['urgent_string_th'] = None
                                                                json_sky['urgent_string_en'] = None
                                                            if j.documentJson != None:
                                                                if str(j.documentJson).replace(' ','') != '':
                                                                    json_sky['document_details'] = eval(j.documentJson)
                                                                    json_sky['document_details_string'] = str(j.documentJson)
                                                                else:
                                                                    jsondata = {}
                                                                    jsondata['document_type'] = None
                                                                    jsondata['document_name'] = None
                                                                    jsondata['document_remark'] = None
                                                                    json_sky['document_details'] = jsondata
                                                                    json_sky['document_details_string'] = str(jsondata)
                                                            else:
                                                                jsondata = {}
                                                                jsondata['document_type'] = None
                                                                jsondata['document_name'] = None
                                                                jsondata['document_remark'] = None
                                                                json_sky['document_details'] = jsondata
                                                                json_sky['document_details_string'] = str(jsondata)
                                                        for y in paper_lesspdf.query.filter_by(fid=u.file_id).all():
                                                            if y.hash_sign != None or y.hash_sign == "":
                                                                json_sky['file_status'] = 'Complete'
                                                            else:
                                                                json_sky['file_status'] = 'Incomplete'
                                                        try:
                                                            json_sky['file_user_status'] = arr_get[n]['data_json']['step_detail'][o]['activity_status'][s]
                                                        except Exception as ex:
                                                            return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
                                                        arr_step = []
                                                        for i in paper_lessdatastep.query.filter_by(sid=json_sky['step_data_sid']).order_by((paper_lessdatastep.id).desc()).all():

                                                            arr_step_info = []
                                                            try:
                                                                json_step_data = json.dumps(i.data_json)
                                                                json_step_data = json.loads(json_step_data)
                                                            except Exception as ex:
                                                                print(ex)
                                                                return {'result': 'ER', 'messageText': 'Json ER!'}
                                                            try:
                                                                json_step_data = eval(json_step_data)
                                                            except Exception as ex:
                                                                return {'result': 'ER', 'messageText': 'Json ER!'}
                                                            arr_step.append(json_step_data)
                                                            for nn in range(len(arr_step)):
                                                                print(arr_step[nn])
                                                                arr_step_totle = []
                                                                json_info_step2 = {}
                                                                if 'step_detail' in arr_step[nn]:
                                                                    for s in range(len(arr_step[nn]['step_detail'])):
                                                                        for y in range(len(arr_step[nn]['step_detail'][s]['activity_code'])):
                                                                            if arr_step[nn]['step_detail'][s]['activity_code'][y] == 'A03':
                                                                                json_info_step = {}
                                                                                json_info_step['step_num'] = arr_step[nn]['step_num']
                                                                                json_info_step['one_email'] = arr_step[nn]['step_detail'][s]['one_email']
                                                                                json_info_step['activity_status'] = arr_step[nn]['step_detail'][s]['activity_status'][y]

                                                                                arr_step_totle.append(json_info_step)
                                                                                # json_info_step['info'] = arr_step_totle
                                                                                # print(json_step_data[nn]['step_detail'][s]['activity_status'])

                                                                                if arr_step[nn]['step_detail'][s]['activity_status'][y] == 'Complete':
                                                                                    json_info_step2['step_status'] = 'Complete'
                                                                                elif arr_step[nn]['step_detail'][s]['activity_status'][y] == 'Approve':
                                                                                    json_info_step2['step_status'] = 'Complete'
                                                                                elif arr_step[nn]['step_detail'][s]['activity_status'][y] == 'Reject':
                                                                                    json_info_step2['step_status'] = 'Reject'
                                                                                else:
                                                                                    try:
                                                                                        json_info_step2['step_status']
                                                                                    except Exception as ex:
                                                                                        json_info_step2['step_status'] = 'Incomplete'

                                                                    json_info_step2['step_info'] = arr_step_totle
                                                                    arr_step_info.append(json_info_step2)

                                                                    json_sky['file_user_status_detail'] = arr_step_info
                                                            try:

                                                                json_sky['step_info'] = arr_step
                                                            except Exception as ex:
                                                                print(ex)

                                                    arr_get_sid.append(json_sky)
                                                except Exception as ex:
                                                    print(ex)
                                                    return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}

                else:
                    count = 0
                    for l in range(len(arr_get[n]['data_json'])):

                        if 'step_detail' in arr_get[n]['data_json'][l]:
                            for o in range(len(arr_get[n]['data_json'][l]['step_detail'])):
                                if 'one_email' in arr_get[n]['data_json'][l]['step_detail'][o]:

                                    arrjson_data = {}
                                    arr_data_json = []
                                    for s in range(len(arr_get[n]['data_json'][l]['step_detail'][o]['activity_code'])):
                                        try:
                                            activity_code = arr_get[n]['data_json'][l]['step_detail'][o]['activity_code'][s]
                                        except Exception as ex:
                                            print(ex)
                                            activity_code = ''
                                        if activity_code == "A03":
                                            if self.thai_email == arr_get[n]['data_json'][l]['step_detail'][o]['one_email'] and count == 0:
                                                # print('step_detail' in arr_get[n]['data_json'][l] , arr_get[n]['sid'] , arr_get[n]['data_json'][l]['step_detail'][o]['one_email'])
                                                count = count + 1
                                                try:
                                                    for u in paper_lesssender.query.filter_by(step_data_sid=arr_get[n]['sid']).order_by((paper_lesssender.id).desc()).all():

                                                        json_sky = {}
                                                        json_sky['send_time'] = u.send_time
                                                        json_sky['send_time_string'] = str(u.send_time).split('+')[0]
                                                        json_sky['status'] = u.status
                                                        json_sky['sender_name'] = u.sender_name
                                                        json_sky['sender_email'] = u.sender_email
                                                        json_sky['sender_position'] = u.sender_position
                                                        json_sky['file_id'] = u.file_id
                                                        json_sky['result'] = 'OK'
                                                        json_sky['file_name'] = u.file_name
                                                        json_sky['tracking_id'] = u.tracking_id
                                                        json_sky['step_code'] = u.step_code
                                                        json_sky['step_data_sid'] = u.step_data_sid
                                                        json_sky['url_sign'] = None
                                                        result_stepdata = paper_lessdatastep.query.filter_by(sid=arr_get[n]['sid']).first()
                                                        if result_stepdata != None:
                                                            if result_stepdata.view_details != None:
                                                                json_sky['view_details'] = eval(result_stepdata.view_details)
                                                            else:
                                                                json_sky['view_details'] = None
                                                        else:
                                                            json_sky['view_details'] = None
                                                        result_resource = []
                                                        for i in paper_lesstransactionChain.query.filter_by(f_sid=u.step_data_sid).order_by((paper_lesstransactionChain.f_id).desc()).all():
                                                            json_data_result = {}
                                                            json_data_result['Account'] = eval(i.f_userAccount)['email_thai']
                                                            if self.thai_email in json_data_result['Account']:
                                                                json_data_result = {}
                                                                json_data_result['order'] = i.f_row
                                                                json_data_result['result'] = 'OK'
                                                                json_data_result['file_id'] = i.f_file_id
                                                                json_data_result['transactionId'] = i.f_transactionId
                                                                json_data_result['datetime'] = i.f_timestamp
                                                                json_data_result['datetime_string'] = str(i.f_timestamp).split('+')[0]
                                                                json_data_result['user_id'] = eval(i.f_metadate)['metadata']['user_id']
                                                                json_data_result['userAccount'] = str(i.f_userAccount)
                                                            else:
                                                                json_data_result = {}
                                                                json_data_result['result'] = 'ER'
                                                            result_resource.append(json_data_result)
                                                        json_sky['resource_OneChain'] = result_resource
                                                        for j in paper_lessdocument.query.filter_by(step_id=arr_get[n]['sid']).all():
                                                            json_sky['document_Id'] = j.document_id
                                                            json_sky['stamp_all'] = j.sign_page_options
                                                            if j.options_page != None:
                                                                documentoptions_page = [eval(j.options_page)]
                                                            else:
                                                                documentoptions_page = []
                                                            if j.documentJson != None:
                                                                if str(j.documentJson).replace(' ','') != '':
                                                                    json_sky['document_details'] = eval(j.documentJson)
                                                                    json_sky['document_details_string'] = str(j.documentJson)
                                                                else:
                                                                    jsondata = {}
                                                                    jsondata['document_type'] = None
                                                                    jsondata['document_name'] = None
                                                                    jsondata['document_remark'] = None
                                                                    json_sky['document_details'] = jsondata
                                                                    json_sky['document_details_string'] = str(jsondata)
                                                            else:
                                                                jsondata = {}
                                                                jsondata['document_type'] = None
                                                                jsondata['document_name'] = None
                                                                jsondata['document_remark'] = None
                                                                json_sky['document_details'] = jsondata
                                                                json_sky['document_details_string'] = str(jsondata)
                                                        for y in paper_lesspdf.query.filter_by(fid=u.file_id).all():
                                                            if y.hash_sign != None or y.hash_sign == "":
                                                                json_sky['file_status'] = 'Complete'
                                                            else:
                                                                json_sky['file_status'] = 'Incomplete'
                                                        try:
                                                            json_sky['file_user_status'] = arr_get[n]['data_json'][l]['step_detail'][o]['activity_status'][s]
                                                        except Exception as ex:
                                                            return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
                                                        arr_step = []
                                                        for i in paper_lessdatastep.query.filter_by(sid=json_sky['step_data_sid']).order_by((paper_lessdatastep.id).desc()).all():
                                                            arr_step_info = []
                                                            try:
                                                                json_step_data = json.dumps(i.data_json)
                                                                json_step_data = json.loads(json_step_data)
                                                            except Exception as ex:
                                                                print(ex)
                                                                return {'result': 'ER', 'messageText': 'Json ER!'}
                                                            try:
                                                                json_step_data = eval(json_step_data)
                                                            except Exception as ex:
                                                                return {'result': 'ER', 'messageText': 'Json ER!'}
                                                            for o in range(len(json_step_data)):
                                                                arr_step.append(json_step_data[o])
                                                            for nn in range(len(arr_step)):

                                                                arr_step_totle = []
                                                                json_info_step2 = {}
                                                                if 'step_detail' in json_step_data[nn]:
                                                                    for s in range(len(json_step_data[nn]['step_detail'])):
                                                                        for y in range(len(json_step_data[nn]['step_detail'][s]['activity_code'])):
                                                                            if json_step_data[nn]['step_detail'][s]['activity_code'][y] == 'A03':
                                                                                json_info_step = {}
                                                                                json_info_step['step_num'] = json_step_data[nn]['step_num']
                                                                                json_info_step['one_email'] = json_step_data[nn]['step_detail'][s]['one_email']
                                                                                json_info_step['activity_status'] = json_step_data[nn]['step_detail'][s]['activity_status'][y]

                                                                                arr_step_totle.append(json_info_step)
                                                                                # json_info_step['info'] = arr_step_totle
                                                                                # print(json_step_data[nn]['step_detail'][s]['activity_status'])

                                                                                if arr_step[nn]['step_detail'][s]['activity_status'][y] == 'Complete':
                                                                                    json_info_step2['step_status'] = 'Complete'
                                                                                elif arr_step[nn]['step_detail'][s]['activity_status'][y] == 'Approve':
                                                                                    json_info_step2['step_status'] = 'Complete'
                                                                                elif arr_step[nn]['step_detail'][s]['activity_status'][y] == 'Reject':
                                                                                    json_info_step2['step_status'] = 'Reject'
                                                                                else:
                                                                                    try:
                                                                                        json_info_step2['step_status']
                                                                                    except Exception as ex:
                                                                                        json_info_step2['step_status'] = 'Incomplete'

                                                                    json_info_step2['step_info'] = arr_step_totle
                                                                    arr_step_info.append(json_info_step2)

                                                                    json_sky['file_user_status_detail'] = arr_step_info
                                                            try:

                                                                json_sky['step_info'] = arr_step
                                                            except Exception as ex:
                                                                print(ex)

                                                        arr_get_sid.append(json_sky)
                                                except Exception as ex:
                                                    print(ex)
                                                    return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}


            if len(arr_get_sid) != 0:
                return {'result': 'OK', 'messageText': arr_get_sid,'status_Code':200}
            else:
                return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
        except Exception as ex:
            print(ex.args)
            return {'result': 'ER', 'messageText': str(ex)}

    def select_get_recipient(self,thai_email):
        self.thai_email = thai_email
        try:
            arr_get_sid = []
            arr_get = []
            for k in paper_lessdatastep.query.order_by((paper_lessdatastep.id).desc()).all():
                json_sky = {}
                try:
                    json_sky['data_json'] = eval(k.data_json)
                except Exception as ex:
                    return {'result': 'ER', 'messageText': 'Json ER!'}

                json_sky['sid'] = k.sid

                json_sky['update_time'] = k.update_time
                arr_get.append(json_sky)
            for n in range(len(arr_get)):
                for l in range(len(arr_get[n]['data_json'])):
                    if 'step_detail' in arr_get[n]['data_json'][l]:
                        for o in range(len(arr_get[n]['data_json'][l]['step_detail'])):
                            if 'one_email' in arr_get[n]['data_json'][l]['step_detail'][o]:
                                arrjson_data = {}
                                arr_data_json = []
                                for s in range(len(arr_get[n]['data_json'][l]['step_detail'][o]['activity_code'])):
                                    print(arr_get[n]['data_json'][l]['step_detail'][o]['activity_code'][s])
                                    if arr_get[n]['data_json'][l]['step_detail'][o]['activity_code'][s] == "A03":
                                        if self.thai_email == arr_get[n]['data_json'][l]['step_detail'][o]['one_email']:

                                            try:
                                                for u in paper_lesssender.query.filter_by(step_data_sid=arr_get[n]['sid']).order_by((paper_lesssender.id).desc()).all():
                                                    json_sky = {}
                                                    json_sky['send_time'] = u.send_time
                                                    json_sky['send_time_string'] = str(u.send_time).split('+')[0]
                                                    json_sky['status'] = u.status
                                                    json_sky['sender_name'] = u.sender_name
                                                    json_sky['sender_email'] = u.sender_email
                                                    json_sky['sender_position'] = u.sender_position
                                                    json_sky['file_id'] = u.file_id
                                                    json_sky['result'] = 'OK'
                                                    json_sky['file_name'] = u.file_name
                                                    json_sky['tracking_id'] = u.tracking_id
                                                    json_sky['step_code'] = u.step_code
                                                    json_sky['step_data_sid'] = u.step_data_sid
                                                    for j in paper_lessdocument.query.filter_by(step_id=arr_get[n]['sid']).all():
                                                        json_sky['document_Id'] = j.document_id
                                                    for y in paper_lesspdf.query.filter_by(fid=u.file_id).all():
                                                        if y.hash_sign != None or y.hash_sign == "":
                                                            json_sky['file_status'] = 'Complete'
                                                        else:
                                                            json_sky['file_status'] = 'Incomplete'
                                                    try:
                                                        json_sky['file_user_status'] = arr_get[n]['data_json'][l]['step_detail'][o]['activity_status'][s]
                                                    except Exception as ex:
                                                        return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}

                                                    arr_step = []

                                                    for i in paper_lessdatastep.query.filter_by(sid=json_sky['step_data_sid']).order_by((paper_lessdatastep.id).desc()).all():
                                                        arr_step_info = []
                                                        json_step_data = json.dumps(i.data_json)
                                                        json_step_data = json.loads(json_step_data)
                                                        try:
                                                            json_step_data = eval(json_step_data)
                                                        except Exception as ex:
                                                            return {'result': 'ER', 'messageText': 'Json ER!'}
                                                        for o in range(len(json_step_data)):
                                                            arr_step.append(json_step_data[o])
                                                            print(json_step_data[o])
                                                        for nn in range(len(arr_step)):
                                                            arr_step_totle = []

                                                            json_info_step2 = {}
                                                            if 'step_detail' in json_step_data[nn]:
                                                                for s in range(len(json_step_data[nn]['step_detail'])):
                                                                    for y in range(len(json_step_data[nn]['step_detail'][s]['activity_code'])):
                                                                        print(y)
                                                                        if json_step_data[nn]['step_detail'][s]['activity_code'][y] == 'A03':
                                                                            json_info_step = {}
                                                                            json_info_step['step_num'] = arr_step[nn]['step_num']
                                                                            json_info_step['one_email'] = json_step_data[nn]['step_detail'][s]['one_email']
                                                                            json_info_step['activity_status'] = json_step_data[nn]['step_detail'][s]['activity_status'][y]
                                                                            arr_step_totle.append(json_info_step)
                                                                            # json_info_step['info'] = arr_step_totle
                                                                            # print(json_step_data[nn]['step_detail'][s]['activity_status'])
                                                                            if arr_step[nn]['step_detail'][s]['activity_status'][y] == 'Complete':
                                                                                json_info_step2['step_status'] = 'Complete'
                                                                            else:
                                                                                try:
                                                                                    json_info_step2['step_status']
                                                                                except Exception as ex:
                                                                                    json_info_step2['step_status'] = 'Incomplete'
                                                                json_info_step2['step_info'] = arr_step_totle
                                                                arr_step_info.append(json_info_step2)
                                                                json_sky['file_user_status_detail'] = arr_step_info
                                                        try:
                                                            json_sky['step_info'] = arr_step
                                                        except Exception as ex:
                                                            print(ex)


                                                    arr_get_sid.append(json_sky)
                                            except Exception as ex:
                                                print(ex)
                                                return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}



            if len(arr_get_sid) != 0:
                return {'result': 'OK', 'messageText': arr_get_sid,'status_Code':200}
            else:
                return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
        except Exception as ex:
            return {'result': 'ER', 'messageText': str(ex)}

    def select_get_recipient_sid_OneChain(self,thai_email,sid):
        self.thai_email = thai_email
        self.sid = sid
        try:
            arr_get_sid = []
            arr_get = []
            for k in paper_lessdatastep.query.filter_by(sid=self.sid).order_by((paper_lessdatastep.id).desc()).all():
                json_sky = {}
                try:
                    json_sky['data_json'] = eval(k.data_json)
                except Exception as ex:
                    return {'result': 'ER', 'messageText': 'Json ER!'}
                json_sky['sid'] = k.sid
                json_sky['update_time'] = k.update_time
                arr_get.append(json_sky)

            for n in range(len(arr_get)):

                if 'step_num' in arr_get[n]['data_json']:
                    if 'step_detail' in arr_get[n]['data_json']:
                            for o in range(len(arr_get[n]['data_json']['step_detail'])):
                                if 'one_email' in arr_get[n]['data_json']['step_detail'][o]:
                                    arrjson_data = {}
                                    arr_data_json = []
                                    for s in range(len(arr_get[n]['data_json']['step_detail'][o]['activity_code'])):
                                        try:
                                            activity_code = arr_get[n]['data_json']['step_detail'][o]['activity_code'][s]
                                        except Exception as ex:
                                            print(ex)
                                            activity_code = ''
                                        if activity_code == "A03":
                                            if self.thai_email == arr_get[n]['data_json']['step_detail'][o]['one_email']:

                                                try:
                                                    for u in paper_lesssender.query.filter_by(step_data_sid=arr_get[n]['sid']).order_by((paper_lesssender.id).desc()).all():
                                                        json_sky = {}
                                                        json_sky['send_time'] = u.send_time
                                                        json_sky['send_time_string'] = str(u.send_time).split('+')[0]
                                                        json_sky['status'] = u.status
                                                        json_sky['sender_name'] = u.sender_name
                                                        json_sky['sender_email'] = u.sender_email
                                                        json_sky['sender_position'] = u.sender_position
                                                        json_sky['file_id'] = u.file_id
                                                        json_sky['result'] = 'OK'
                                                        json_sky['file_name'] = u.file_name
                                                        json_sky['tracking_id'] = u.tracking_id
                                                        json_sky['step_code'] = u.step_code
                                                        json_sky['step_data_sid'] = u.step_data_sid
                                                        result_stepdata = paper_lessdatastep.query.filter_by(sid=arr_get[n]['sid']).first()
                                                        if result_stepdata != None:
                                                            if result_stepdata.view_details != None:
                                                                json_sky['view_details'] = eval(result_stepdata.view_details)
                                                            else:
                                                                json_sky['view_details'] = None
                                                        else:
                                                            json_sky['view_details'] = None
                                                        json_sky['url_sign'] = None
                                                        result_resource = []
                                                        for i in paper_lesstransactionChain.query.filter_by(f_sid=u.step_data_sid).order_by((paper_lesstransactionChain.f_id).desc()).all():
                                                            json_data_result = {}
                                                            json_data_result['Account'] = eval(i.f_userAccount)['email_thai']
                                                            if self.thai_email in json_data_result['Account']:
                                                                json_data_result = {}
                                                                json_data_result['order'] = i.f_row
                                                                json_data_result['result'] = 'OK'
                                                                json_data_result['file_id'] = i.f_file_id
                                                                json_data_result['transactionId'] = i.f_transactionId
                                                                json_data_result['datetime'] = i.f_timestamp
                                                                json_data_result['datetime_string'] = str(i.f_timestamp).split('+')[0]
                                                                json_data_result['user_id'] = eval(i.f_metadate)['metadata']['user_id']
                                                                json_data_result['userAccount'] = str(i.f_userAccount)
                                                            else:
                                                                json_data_result = {}
                                                                json_data_result['result'] = 'ER'
                                                            result_resource.append(json_data_result)
                                                        json_sky['resource_OneChain'] = result_resource
                                                        print(arr_get[n]['sid'])
                                                        for j in paper_lessdocument.query.filter_by(step_id=arr_get[n]['sid']).all():
                                                            json_sky['document_Id'] = j.document_id
                                                            if j.urgent_type != None:
                                                                json_sky['urgent_code'] = j.urgent_type
                                                                if j.urgent_type == 'M':
                                                                    json_sky['urgent_string_th'] = 'ปกติ'
                                                                    json_sky['urgent_string_en'] = 'MEDIUM'
                                                                elif j.urgent_type == 'U':
                                                                    json_sky['urgent_string_th'] = 'ด่วน'
                                                                    json_sky['urgent_string_en'] = 'URGENT'
                                                                elif j.urgent_type == 'I':
                                                                    json_sky['urgent_string_th'] = 'ด่วนมาก'
                                                                    json_sky['urgent_string_en'] = 'IMMEDIATE'
                                                            else:
                                                                json_sky['urgent_code'] = None
                                                                json_sky['urgent_string_th'] = None
                                                                json_sky['urgent_string_en'] = None
                                                            if j.documentJson != None:
                                                                if str(j.documentJson).replace(' ','') != '':
                                                                    json_sky['document_details'] = eval(j.documentJson)
                                                                    json_sky['document_details_string'] = str(j.documentJson)
                                                                else:
                                                                    jsondata = {}
                                                                    jsondata['document_type'] = None
                                                                    jsondata['document_name'] = None
                                                                    jsondata['document_remark'] = None
                                                                    json_sky['document_details'] = jsondata
                                                                    json_sky['document_details_string'] = str(jsondata)
                                                            else:
                                                                jsondata = {}
                                                                jsondata['document_type'] = None
                                                                jsondata['document_name'] = None
                                                                jsondata['document_remark'] = None
                                                                json_sky['document_details'] = jsondata
                                                                json_sky['document_details_string'] = str(jsondata)
                                                        for y in paper_lesspdf.query.filter_by(fid=u.file_id).all():
                                                            if y.hash_sign != None or y.hash_sign == "":
                                                                json_sky['file_status'] = 'Complete'
                                                            else:
                                                                json_sky['file_status'] = 'Incomplete'
                                                        try:
                                                            json_sky['file_user_status'] = arr_get[n]['data_json']['step_detail'][o]['activity_status'][s]
                                                        except Exception as ex:
                                                            return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
                                                        arr_step = []
                                                        for i in paper_lessdatastep.query.filter_by(sid=json_sky['step_data_sid']).order_by((paper_lessdatastep.id).desc()).all():

                                                            arr_step_info = []
                                                            try:
                                                                json_step_data = json.dumps(i.data_json)
                                                                json_step_data = json.loads(json_step_data)
                                                            except Exception as ex:
                                                                print(ex)
                                                                return {'result': 'ER', 'messageText': 'Json ER!'}
                                                            try:
                                                                json_step_data = eval(json_step_data)
                                                            except Exception as ex:
                                                                return {'result': 'ER', 'messageText': 'Json ER!'}
                                                            arr_step.append(json_step_data)
                                                            for nn in range(len(arr_step)):
                                                                print(arr_step[nn])
                                                                arr_step_totle = []
                                                                json_info_step2 = {}
                                                                if 'step_detail' in arr_step[nn]:
                                                                    for s in range(len(arr_step[nn]['step_detail'])):
                                                                        for y in range(len(arr_step[nn]['step_detail'][s]['activity_code'])):
                                                                            if arr_step[nn]['step_detail'][s]['activity_code'][y] == 'A03':
                                                                                json_info_step = {}
                                                                                json_info_step['step_num'] = arr_step[nn]['step_num']
                                                                                json_info_step['one_email'] = arr_step[nn]['step_detail'][s]['one_email']
                                                                                json_info_step['activity_status'] = arr_step[nn]['step_detail'][s]['activity_status'][y]

                                                                                arr_step_totle.append(json_info_step)

                                                                                if arr_step[nn]['step_detail'][s]['activity_status'][y] == 'Complete':
                                                                                    json_info_step2['step_status'] = 'Complete'
                                                                                elif arr_step[nn]['step_detail'][s]['activity_status'][y] == 'Approve':
                                                                                    json_info_step2['step_status'] = 'Complete'
                                                                                elif arr_step[nn]['step_detail'][s]['activity_status'][y] == 'Reject':
                                                                                    json_info_step2['step_status'] = 'Reject'
                                                                                else:
                                                                                    try:
                                                                                        json_info_step2['step_status']
                                                                                    except Exception as ex:
                                                                                        json_info_step2['step_status'] = 'Incomplete'

                                                                    json_info_step2['step_info'] = arr_step_totle
                                                                    arr_step_info.append(json_info_step2)

                                                                    json_sky['file_user_status_detail'] = arr_step_info
                                                            try:

                                                                json_sky['step_info'] = arr_step
                                                            except Exception as ex:
                                                                print(ex)


                                                except Exception as ex:
                                                    print(ex)
                                                    return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล','status_Code':200,'messageER':str(ex)}
                    arr_get_sid.append(json_sky)
                else:
                    for l in range(len(arr_get[n]['data_json'])):
                        if 'step_detail' in arr_get[n]['data_json'][l]:
                            for o in range(len(arr_get[n]['data_json'][l]['step_detail'])):
                                if 'one_email' in arr_get[n]['data_json'][l]['step_detail'][o]:
                                    arrjson_data = {}
                                    arr_data_json = []
                                    for s in range(len(arr_get[n]['data_json'][l]['step_detail'][o]['activity_code'])):
                                        try:
                                            activity_code = arr_get[n]['data_json'][l]['step_detail'][o]['activity_code'][s]
                                        except Exception as ex:
                                            print(ex)
                                            activity_code = ''
                                        if activity_code == "A03":
                                            if self.thai_email == arr_get[n]['data_json'][l]['step_detail'][o]['one_email']:
                                                try:
                                                    for u in paper_lesssender.query.filter_by(step_data_sid=arr_get[n]['sid']).order_by((paper_lesssender.id).desc()).all():
                                                        json_sky = {}
                                                        json_sky['send_time'] = u.send_time
                                                        json_sky['send_time_string'] = str(u.send_time).split('+')[0]
                                                        json_sky['status'] = u.status
                                                        json_sky['sender_name'] = u.sender_name
                                                        json_sky['sender_email'] = u.sender_email
                                                        json_sky['sender_position'] = u.sender_position
                                                        json_sky['file_id'] = u.file_id
                                                        json_sky['result'] = 'OK'
                                                        json_sky['file_name'] = u.file_name
                                                        json_sky['tracking_id'] = u.tracking_id
                                                        json_sky['step_code'] = u.step_code
                                                        json_sky['step_data_sid'] = u.step_data_sid
                                                        result_stepdata = paper_lessdatastep.query.filter_by(sid=arr_get[n]['sid']).first()
                                                        if result_stepdata != None:
                                                            if result_stepdata.view_details != None:
                                                                json_sky['view_details'] = eval(result_stepdata.view_details)
                                                            else:
                                                                json_sky['view_details'] = None
                                                        else:
                                                            json_sky['view_details'] = None
                                                        json_sky['url_sign'] = None
                                                        result_resource = []
                                                        for i in paper_lesstransactionChain.query.filter_by(f_sid=u.step_data_sid).order_by((paper_lesstransactionChain.f_id).desc()).all():
                                                            json_data_result = {}
                                                            json_data_result['Account'] = eval(i.f_userAccount)['email_thai']
                                                            if self.thai_email in json_data_result['Account']:
                                                                json_data_result = {}
                                                                json_data_result['order'] = i.f_row
                                                                json_data_result['result'] = 'OK'
                                                                json_data_result['file_id'] = i.f_file_id
                                                                json_data_result['transactionId'] = i.f_transactionId
                                                                json_data_result['datetime'] = i.f_timestamp
                                                                json_data_result['datetime_string'] = str(i.f_timestamp).split('+')[0]
                                                                json_data_result['user_id'] = eval(i.f_metadate)['metadata']['user_id']
                                                                json_data_result['userAccount'] = str(i.f_userAccount)
                                                            else:
                                                                json_data_result = {}
                                                                json_data_result['result'] = 'ER'
                                                            result_resource.append(json_data_result)
                                                        json_sky['resource_OneChain'] = result_resource
                                                        for j in paper_lessdocument.query.filter_by(step_id=arr_get[n]['sid']).all():
                                                            json_sky['document_Id'] = j.document_id
                                                            if j.documentJson != None:
                                                                if str(j.documentJson).replace(' ','') != '':
                                                                    json_sky['document_details'] = eval(j.documentJson)
                                                                    json_sky['document_details_string'] = str(j.documentJson)
                                                                else:
                                                                    jsondata = {}
                                                                    jsondata['document_type'] = None
                                                                    jsondata['document_name'] = None
                                                                    jsondata['document_remark'] = None
                                                                    json_sky['document_details'] = jsondata
                                                                    json_sky['document_details_string'] = str(jsondata)
                                                            else:
                                                                jsondata = {}
                                                                jsondata['document_type'] = None
                                                                jsondata['document_name'] = None
                                                                jsondata['document_remark'] = None
                                                                json_sky['document_details'] = jsondata
                                                                json_sky['document_details_string'] = str(jsondata)
                                                        for y in paper_lesspdf.query.filter_by(fid=u.file_id).all():
                                                            if y.hash_sign != None or y.hash_sign == "":
                                                                json_sky['file_status'] = 'Complete'
                                                            else:
                                                                json_sky['file_status'] = 'Incomplete'
                                                        try:
                                                            print(arr_get[n]['data_json'][l]['step_detail'][o]['activity_status'][s])
                                                            json_sky['file_user_status'] = arr_get[n]['data_json'][l]['step_detail'][o]['activity_status'][s]
                                                        except Exception as ex:
                                                            return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
                                                        arr_step = []
                                                        for i in paper_lessdatastep.query.filter_by(sid=json_sky['step_data_sid']).order_by((paper_lessdatastep.id).desc()).all():
                                                            arr_step_info = []
                                                            try:
                                                                json_step_data = json.dumps(i.data_json)
                                                                json_step_data = json.loads(json_step_data)
                                                            except Exception as ex:
                                                                print(ex)
                                                                return {'result': 'ER', 'messageText': 'Json ER!'}
                                                            try:
                                                                json_step_data = eval(json_step_data)
                                                            except Exception as ex:
                                                                return {'result': 'ER', 'messageText': 'Json ER!'}
                                                            for o in range(len(json_step_data)):
                                                                arr_step.append(json_step_data[o])
                                                            for nn in range(len(arr_step)):

                                                                arr_step_totle = []
                                                                json_info_step2 = {}
                                                                if 'step_detail' in json_step_data[nn]:
                                                                    for s in range(len(json_step_data[nn]['step_detail'])):
                                                                        for y in range(len(json_step_data[nn]['step_detail'][s]['activity_code'])):
                                                                            if json_step_data[nn]['step_detail'][s]['activity_code'][y] == 'A03':
                                                                                json_info_step = {}
                                                                                json_info_step['step_num'] = json_step_data[nn]['step_num']
                                                                                json_info_step['one_email'] = json_step_data[nn]['step_detail'][s]['one_email']
                                                                                json_info_step['activity_status'] = json_step_data[nn]['step_detail'][s]['activity_status'][y]
                                                                                arr_step_totle.append(json_info_step)
                                                                                if arr_step[nn]['step_detail'][s]['activity_status'][y] == 'Complete':
                                                                                    json_info_step2['step_status'] = 'Complete'
                                                                                elif arr_step[nn]['step_detail'][s]['activity_status'][y] == 'Approve':
                                                                                    json_info_step2['step_status'] = 'Complete'
                                                                                elif arr_step[nn]['step_detail'][s]['activity_status'][y] == 'Reject':
                                                                                    json_info_step2['step_status'] = 'Reject'
                                                                                else:
                                                                                    try:
                                                                                        json_info_step2['step_status']
                                                                                    except Exception as ex:
                                                                                        json_info_step2['step_status'] = 'Incomplete'

                                                                    json_info_step2['step_info'] = arr_step_totle
                                                                    arr_step_info.append(json_info_step2)

                                                                    json_sky['file_user_status_detail'] = arr_step_info
                                                            try:

                                                                json_sky['step_info'] = arr_step
                                                            except Exception as ex:
                                                                print(ex)


                                                except Exception as ex:
                                                    print(ex)
                                                    return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล','status_Code':200,'messageER':str(ex)}
                    arr_get_sid.append(json_sky)

            if len(arr_get_sid) != 0:
                return {'result': 'OK', 'messageText': arr_get_sid,'status_Code':200}
            else:
                return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}

        except Exception as ex:
            return {'result': 'ER', 'messageText': str(ex)}


    def select_get_recipient_sid(self,thai_email,sid):
        self.thai_email = thai_email
        self.sid = sid
        try:
            arr_get_sid = []
            arr_get = []
            for k in paper_lessdatastep.query.filter_by(sid=self.sid).order_by((paper_lessdatastep.id).desc()).all():
                json_sky = {}
                try:
                    json_sky['data_json'] = eval(k.data_json)
                except Exception as ex:
                    return {'result': 'ER', 'messageText': 'Json ER!'}

                json_sky['sid'] = k.sid

                json_sky['update_time'] = k.update_time
                arr_get.append(json_sky)
            print(str(len(arr_get)) + " " + " arr_get")
            for n in range(len(arr_get)):
                print(arr_get[n])
                for l in range(len(arr_get[n]['data_json'])):
                    if 'step_detail' in arr_get[n]['data_json'][l]:
                        for o in range(len(arr_get[n]['data_json'][l]['step_detail'])):
                            if 'one_email' in arr_get[n]['data_json'][l]['step_detail'][o]:
                                arrjson_data = {}
                                arr_data_json = []
                                print(str(n) + " num")
                                for s in range(len(arr_get[n]['data_json'][l]['step_detail'][o]['activity_code'])):
                                    print(arr_get[n]['data_json'][l]['step_detail'][o]['activity_code'][s])
                                    if arr_get[n]['data_json'][l]['step_detail'][o]['activity_code'][s] == "A03":
                                        if self.thai_email == arr_get[n]['data_json'][l]['step_detail'][o]['one_email']:
                                            print(arr_get[n]['sid'])

                                            try:
                                                for u in paper_lesssender.query.filter_by(step_data_sid=arr_get[n]['sid']).order_by((paper_lesssender.id).desc()).all():
                                                    json_sky = {}
                                                    json_sky['send_time'] = u.send_time
                                                    json_sky['send_time_string'] = str(u.send_time).split('+')[0]
                                                    json_sky['status'] = u.status
                                                    json_sky['sender_name'] = u.sender_name
                                                    json_sky['sender_email'] = u.sender_email
                                                    json_sky['sender_position'] = u.sender_position
                                                    json_sky['file_id'] = u.file_id
                                                    json_sky['result'] = 'OK'
                                                    json_sky['file_name'] = u.file_name
                                                    json_sky['tracking_id'] = u.tracking_id
                                                    json_sky['step_code'] = u.step_code
                                                    json_sky['step_data_sid'] = u.step_data_sid
                                                    for j in paper_lessdocument.query.filter_by(step_id=arr_get[n]['sid']).all():
                                                        print(j)
                                                        json_sky['document_Id'] = j.document_id
                                                    for y in paper_lesspdf.query.filter_by(fid=u.file_id).all():
                                                        if y.hash_sign != None or y.hash_sign == "":
                                                            json_sky['file_status'] = 'Complete'
                                                        else:
                                                            json_sky['file_status'] = 'Incomplete'
                                                    try:
                                                        json_sky['file_user_status'] = arr_get[n]['data_json'][l]['step_detail'][o]['activity_status'][s]
                                                    except Exception as ex:
                                                        return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}

                                                    arr_step = []

                                                    for i in paper_lessdatastep.query.filter_by(sid=json_sky['step_data_sid']).order_by((paper_lessdatastep.id).desc()).all():
                                                        arr_step_info = []
                                                        json_step_data = json.dumps(i.data_json)
                                                        json_step_data = json.loads(json_step_data)
                                                        try:
                                                            json_step_data = eval(json_step_data)
                                                        except Exception as ex:
                                                            return {'result': 'ER', 'messageText': 'Json ER!'}
                                                        for o in range(len(json_step_data)):
                                                            arr_step.append(json_step_data[o])
                                                            print(json_step_data[o])
                                                        for nn in range(len(arr_step)):
                                                            arr_step_totle = []

                                                            json_info_step2 = {}
                                                            if 'step_detail' in json_step_data[nn]:
                                                                for s in range(len(json_step_data[nn]['step_detail'])):
                                                                    for y in range(len(json_step_data[nn]['step_detail'][s]['activity_code'])):
                                                                        print(y)
                                                                        if json_step_data[nn]['step_detail'][s]['activity_code'][y] == 'A03':
                                                                            print(json_step_data[nn]['step_detail'][s]['one_email'])
                                                                            json_info_step = {}
                                                                            json_info_step['step_num'] = arr_step[nn]['step_num']
                                                                            json_info_step['one_email'] = json_step_data[nn]['step_detail'][s]['one_email']
                                                                            json_info_step['activity_status'] = json_step_data[nn]['step_detail'][s]['activity_status'][y]
                                                                            arr_step_totle.append(json_info_step)
                                                                            # json_info_step['info'] = arr_step_totle
                                                                            # print(json_step_data[nn]['step_detail'][s]['activity_status'])
                                                                    if 'Complete' in json_step_data[nn]['step_detail'][s]['activity_status']:
                                                                        json_info_step2['step_status'] = 'Complete'
                                                                    else:
                                                                        try:
                                                                            json_info_step2['step_status']
                                                                        except Exception as ex:
                                                                            json_info_step2['step_status'] = 'Incomplete'
                                                                json_info_step2['step_info'] = arr_step_totle
                                                                arr_step_info.append(json_info_step2)
                                                                json_sky['file_user_status_detail'] = arr_step_info
                                                        print("-----------")
                                                        # print(arr_step_info)
                                                        try:
                                                            json_sky['step_info'] = arr_step
                                                        except Exception as ex:
                                                            print(ex)


                                                    arr_get_sid.append(json_sky)
                                            except Exception as ex:
                                                print(ex)
                                                return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}



            if len(arr_get_sid) != 0:
                return {'result': 'OK', 'messageText': arr_get_sid,'status_Code':200}
            else:
                return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
        except Exception as ex:
            return {'result': 'ER', 'messageText': str(ex)}

    def select_getViewDetails(self,sidCode,emailUser):
        self.sidCode = sidCode
        self.emailUser = emailUser
        try:
            arr_data = []
            json_data = {}
            result_getView = paper_lessdatastep.query.filter_by(sid=self.sidCode).first()
            if result_getView != None:
                if result_getView.view_details != None:
                    json_data['view_details'] = eval(result_getView.view_details)
                    if 'view_details' in json_data:
                        if len(json_data['view_details']) == 0:
                            arr_data.append(self.emailUser)
                            result_getView.view_details = str(arr_data)
                            db.session.commit()
                            return {'result': 'OK', 'messageText': 'update view for email'}
                        else:
                            if self.emailUser in json_data['view_details']:
                                return {'result': 'OK', 'messageText': 'duplicate email'}
                            else:
                                for o in range(len(json_data['view_details'])):
                                    arr_data.append(json_data['view_details'][o])
                                arr_data.append(self.emailUser)
                                result_getView.view_details = str(arr_data)
                                db.session.commit()
                                return {'result': 'OK', 'messageText': 'update view for email'}
                    else:
                        return {'result': 'ER', 'messageText': 'None key view_details'}
                else:
                    return {'result': 'ER', 'messageText': 'not found data views detail'}
            else:
                return {'result': 'ER', 'messageText': 'not found data'}
        except Exception as ex:
            return {'result': 'ER', 'messageText': str(ex)}

    def select_get_pdf(self,data_idfile):
        self.data_idfile = data_idfile
        try:
            file_json = {}
            for i in paper_lessdatastep.query.filter_by(sid=self.data_idfile).all():
                file_json['datetime'] = i.update_time
                file_json['datetime_string'] = str(i.update_time).split('+')[0]
                file_json['datetime_upload'] = i.upload_time
                file_json['datetime_upload_string'] = str(i.upload_time).split('+')[0]
            for u in paper_lesstrack.query.filter_by(step_data_sid=self.data_idfile).all():
                for a in paper_lesspdf.query.filter_by(fid=u.file_id).all():
                    if a.string_sign == None or len(a.string_sign) == 0:
                        file_json['file_base'] = a.string_pdf
                        return {'result': 'OK', 'messageText': file_json,'status_Code':200}
                    else:
                        file_json['file_base'] = a.string_sign
                        return {'result': 'OK', 'messageText': file_json,'status_Code':200}
            return {'result': 'ER', 'messageText': 'Not Found!'}
        except Exception as ex:
            return {'result': 'ER', 'messageText': str(ex)}

    def select_get_pdf_v2(self,data_idfile):
        self.data_idfile = data_idfile

        try:
            value_row = None
            oneChainJson = None
            file_json = {}
            for i in paper_lessdatastep.query.filter_by(sid=self.data_idfile).all():
                file_json['datetime'] = i.update_time
                file_json['datetime_string'] = str(i.update_time).split('+')[0]
                file_json['datetime_upload'] = i.upload_time
                file_json['datetime_upload_string'] = str(i.upload_time).split('+')[0]
            for u in paper_lesstrack.query.filter_by(step_data_sid=self.data_idfile).all():
                for a in paper_lesspdf.query.filter_by(fid=u.file_id).all():
                    if a.string_sign == None or len(a.string_sign) == 0:
                        file_json['file_base'] = a.string_pdf
                        # return {'result': 'OK', 'messageText': file_json,'status_Code':200}
                    else:
                        file_json['file_base'] = a.string_sign
                        # return {'result': 'OK', 'messageText': file_json,'status_Code':200}
            for o in paper_lesstransactionChain.query.filter_by(f_sid=self.data_idfile).order_by((paper_lesstransactionChain.f_row).asc()).all():
                value_row = o.f_row
            res_OneChain = paper_lesstransactionChain.query.filter_by(f_sid=self.data_idfile,f_row=value_row).first()
            if res_OneChain != None:
                oneChainJson = eval(res_OneChain.f_metadate)
            return {'result': 'OK', 'messageText': {'file_Paperless':file_json,'file_OneChain':oneChainJson}}
        except Exception as ex:
            return {'result': 'ER', 'messageText': str(ex)}

    def select_pdf_check_forupdate(self,data_sid):
        self.data_sid = data_sid
        try:
            sql = '''
                SELECT
                    tb_pdf_storage.string_sign
                FROM
                    tb_send_detail
                    INNER JOIN tb_pdf_storage ON tb_pdf_storage.fid = tb_send_detail.file_id 
                WHERE
                    step_data_sid =:sidtmp 
            '''
            connection = slave.connect()
            result = connection.execute(text(sql), sidtmp=self.data_sid)
            data = [dict(row) for row in result]
            if len(data) > 0:
                if data[0]['string_sign'] == None:
                    return {'result': 'OK'}
            return {'result': 'ER'}
            connection.close()
        except Exception as e:
            return {'result': 'ER', 'messageText': str(ex)}
        finally:
            connection.close()
        # try:
        #     for u in paper_lesstrack.query.filter_by(step_data_sid=self.data_sid).all():
        #         for a in paper_lesspdf.query.filter_by(fid=u.file_id).all():
        #             if a.string_sign == None:
        #                 return {'result': 'OK'}
        #             else:
        #                 return {'result': 'ER'}
        # except Exception as ex:
        #     return {'result': 'ER', 'messageText': str(ex)}

    def select_sign(self,data_sid,email):
        self.data_sid = data_sid
        self.email = email
        try:
            for u in paper_lesssign.query.filter_by(sid=self.data_sid).all():
                json_sign_data = {}
                try:
                    sign_json = eval(u.sign_json)
                except Exception as ex:
                    print(ex)
                # print(sign_json)
                json_sign_data['sign_detail'] = []
                for k in range(len(sign_json)):
                    if 'step_detail' in sign_json[k]:
                        for i in range(len(sign_json[k]['step_detail'])):
                            if 'one_email' in sign_json[k]['step_detail'][i]:
                                if self.email == sign_json[k]['step_detail'][i]['one_email']:
                                    for o in range(len(sign_json[k]['step_detail'][i]['activity_code'])):
                                        if sign_json[k]['step_detail'][i]['activity_code'][o] == "A03":
                                            arr_json = {}
                                            arr_json['sign_detail'] = {}
                                    #         # # json_sign_data['sign_detail'] = sign_json[k]['step_detail'][o]
                                            arr_json['sign_detail']['activity_code'] = sign_json[k]['step_detail'][i]['activity_code'][o]
                                            arr_json['sign_detail']['activity_description'] = sign_json[k]['step_detail'][i]['activity_description'][o]
                                            arr_json['sign_detail']['activity_status'] = sign_json[k]['step_detail'][i]['activity_status'][o]
                                            arr_json['sign_detail']['activity_data'] = []
                                            for z in range(len(sign_json[k]['step_detail'][i]['activity_data'])):
                                                arr_json['sign_detail']['activity_data'].append(sign_json[k]['step_detail'][i]['activity_data'][z])
                                            arr_json['step_num'] = sign_json[k]['step_num']
                                            json_sign_data['sign_detail'].append(arr_json)
            if len(json_sign_data) != 0:
                return {'result': 'OK','messageText':json_sign_data}
            else:
                return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
        except Exception as ex:
            return {'result': 'ER', 'messageText': str(ex)}

    def select_sign_v2(self,data_sid,email):
        self.data_sid = data_sid
        self.email = email
        try:
            for u in paper_lessdatastep.query.filter_by(sid=self.data_sid).all():
                tmp_sid = u.sid
                json_sign_data = {}
                try:
                    sign_json = eval(u.data_json)
                except Exception as ex:
                    print(ex)
                json_sign_data['sign_detail'] = []

                if 'step_detail' in sign_json:
                    for i in range(len(sign_json['step_detail'])):
                        if 'one_email' in sign_json['step_detail'][i]:
                            if self.email == sign_json['step_detail'][i]['one_email']:
                                for o in range(len(sign_json['step_detail'][i]['activity_code'])):
                                    if sign_json['step_detail'][i]['activity_code'][o] == "A03":
                                        arr_json = {}
                                        arr_json['sign_detail'] = {}
                                        arr_json['sign_detail']['activity_code'] = sign_json['step_detail'][i]['activity_code'][o]
                                        arr_json['sign_detail']['activity_description'] = sign_json['step_detail'][i]['activity_description'][o]
                                        arr_json['sign_detail']['activity_status'] = sign_json['step_detail'][i]['activity_status'][o]
                                        arr_json['sign_detail']['activity_data'] = []
                                        for z in range(len(sign_json['step_detail'][i]['activity_data'])):
                                            arr_json['sign_detail']['activity_data'].append(sign_json['step_detail'][i]['activity_data'][z])
                                        arr_json['step_num'] = sign_json['step_num']
                                        json_sign_data['sign_detail'].append(arr_json)
                else:
                    for k in range(len(sign_json)):
                        if 'step_detail' in sign_json[k]:
                            for i in range(len(sign_json[k]['step_detail'])):
                                if 'one_email' in sign_json[k]['step_detail'][i]:
                                    if self.email == sign_json[k]['step_detail'][i]['one_email']:
                                        print(sign_json[k]['step_detail'][i])
                                        for o in range(len(sign_json[k]['step_detail'][i]['activity_code'])):

                                            if sign_json[k]['step_detail'][i]['activity_code'][o] == "A03":
                                                arr_json = {}
                                                arr_json['sign_detail'] = {}
                                                arr_json['sign_detail']['activity_code'] = sign_json[k]['step_detail'][i]['activity_code'][o]
                                                arr_json['sign_detail']['activity_description'] = sign_json[k]['step_detail'][i]['activity_description'][o]
                                                arr_json['sign_detail']['activity_status'] = sign_json[k]['step_detail'][i]['activity_status'][o]

                                                arr_json['sign_detail']['activity_data'] = []
                                                for z in range(len(sign_json[k]['step_detail'][i]['activity_data'])):
                                                    arr_json['sign_detail']['activity_data'].append(sign_json[k]['step_detail'][i]['activity_data'][z])
                                                arr_json['step_num'] = sign_json[k]['step_num']
                                                json_sign_data['sign_detail'].append(arr_json)
            if len(json_sign_data) != 0:
                return {'result': 'OK','messageText':json_sign_data}
            else:
                return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
        except Exception as ex:
            return {'result': 'ER', 'messageText': str(ex)}

    def select_sign_v3(self,data_sid,email):
        self.data_sid = data_sid
        self.email = email
        try:
            unique_folder = str(uuid.uuid4())
            # path = './storage/pdf/' + unique_folder
            # path_01 = '/storage/pdf/' + unique_folder
            path = path_global_1 + '/storage/pdf/' + unique_folder
            path_01 = path_global_1 + '/storage/pdf/' + unique_folder
            if not os.path.exists(path):
                os.makedirs(path)
            num_of_pages = 1
            for u in paper_lessdatastep.query.filter_by(sid=self.data_sid).all():
                query_file_id = paper_lesssender.query.filter(paper_lesssender.step_data_sid==self.data_sid).first()
                if query_file_id != None:
                    tmp_file_id = query_file_id.file_id
                    query_file_base = paper_lesspdf.query.filter(paper_lesspdf.fid==tmp_file_id).first()
                    if query_file_base != None:
                        if query_file_base.string_sign == None:
                            base64_pdfFile = query_file_base.string_pdf
                            try:
                                unique_filename = str(uuid.uuid4())
                                with open(path + '/' + unique_filename +".pdf","wb") as f:
                                    f.write(base64.b64decode((base64_pdfFile)))
                            except Exception as e:
                                print(str(e))
                            file_path_pdf = path +'/' + unique_filename +".pdf"
                        else:
                            base64_pdfFile = query_file_base.string_sign
                            try:
                                unique_filename = str(uuid.uuid4())
                                with open(path +'/' + unique_filename +".pdf","wb") as f:
                                    f.write(base64.b64decode((base64_pdfFile)))
                            except Exception as e:
                                print(str(e))
                            file_path_pdf = path +'/' + unique_filename +".pdf"
                try:
                    pdf = PdfFileReader(open(file_path_pdf, "rb"))
                    num_of_pages = pdf.getNumPages()
                    print(num_of_pages)
                    os.remove(os.getcwd() + path_01)
                except Exception as e:
                    print(e)
                json_sign_data = {}
                try:
                    sign_json = eval(u.data_json)
                except Exception as ex:
                    print(ex)
                list_step_email = []
                json_sign_data['sign_detail'] = []
                
                if 'step_detail' in sign_json:
                    for i in range(len(sign_json['step_detail'])):
                        if 'one_email' in sign_json['step_detail'][i]:
                            if self.email == sign_json['step_detail'][i]['one_email']:
                                for o in range(len(sign_json['step_detail'][i]['activity_code'])):
                                    if sign_json['step_detail'][i]['activity_code'][o] == "A03":
                                        arr_json = {}
                                        arr_json['sign_detail'] = {}
                                        arr_json['sign_detail']['activity_code'] = sign_json['step_detail'][i]['activity_code'][o]
                                        arr_json['sign_detail']['activity_description'] = sign_json['step_detail'][i]['activity_description'][o]
                                        arr_json['sign_detail']['activity_status'] = sign_json['step_detail'][i]['activity_status'][o]
                                        arr_json['sign_detail']['activity_data'] = []
                                        for z in range(len(sign_json['step_detail'][i]['activity_data'])):
                                            arr_json['sign_detail']['activity_data'].append(sign_json['step_detail'][i]['activity_data'][z])
                                        arr_json['step_num'] = sign_json['step_num']
                                        json_sign_data['sign_detail'].append(arr_json)
                                        json_sign_data['max_page'] = num_of_pages
                else:
                    for k in range(len(sign_json)):
                        if 'step_detail' in sign_json[k]:
                            for i in range(len(sign_json[k]['step_detail'])):
                                if 'one_email' in sign_json[k]['step_detail'][i]:
                                    if self.email == sign_json[k]['step_detail'][i]['one_email']:
                                        for o in range(len(sign_json[k]['step_detail'][i]['activity_code'])):

                                            if sign_json[k]['step_detail'][i]['activity_code'][o] == "A03":
                                                arr_json = {}
                                                arr_json['sign_detail'] = {}
                                                arr_json['sign_detail']['activity_code'] = sign_json[k]['step_detail'][i]['activity_code'][o]
                                                arr_json['sign_detail']['activity_description'] = sign_json[k]['step_detail'][i]['activity_description'][o]
                                                arr_json['sign_detail']['activity_status'] = sign_json[k]['step_detail'][i]['activity_status'][o]

                                                arr_json['sign_detail']['activity_data'] = []
                                                for z in range(len(sign_json[k]['step_detail'][i]['activity_data'])):
                                                    arr_json['sign_detail']['activity_data'].append(sign_json[k]['step_detail'][i]['activity_data'][z])
                                                arr_json['step_num'] = sign_json[k]['step_num']
                                                json_sign_data['sign_detail'].append(arr_json)
                                                json_sign_data['max_page'] = num_of_pages
            if len(json_sign_data) != 0:
                return {'result': 'OK','messageText':json_sign_data}
            else:
                return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result': 'ER', 'messageText': str(ex)}

    def select_recep_chat_v3(self,email,string):
        self.thai_email = email
        self.string = string
        try:
            arr_get_sid=[]
            json_data = {}
            arr_get=[]
            query_temp = paper_lesstrack.query.filter(paper_lesstrack.hash_sid_code==self.string).first()
            
            # print(query_temp)
            # return ''
            # for u in paper_lessdatastep.query.all():
            #     sha512encode = hashlib.sha512(str(u.sid).encode('utf-8')).hexdigest()
            #     if self.string == sha512encode:
            #         json_data['id'] = u.id
            for k in paper_lessdatastep.query.filter(paper_lessdatastep.sid==query_temp.step_data_sid).all():
                json_sky = {}
                json_sky['data_json'] = eval(k.data_json)
                json_sky['sid'] = k.sid
                json_sky['update_time'] = k.update_time
                arr_get.append(json_sky)
            for n in range(len(arr_get)):
                if 'step_num' in arr_get[n]['data_json']:
                    if 'signpad' in arr_get[n]['data_json']:
                        json_sky['signpad'] = arr_get[n]['data_json']['signpad']
                    else:
                        json_sky['signpad'] = None
                    if 'step_detail' in arr_get[n]['data_json']:
                            for o in range(len(arr_get[n]['data_json']['step_detail'])):
                                if 'one_email' in arr_get[n]['data_json']['step_detail'][o]:
                                    arrjson_data = {}
                                    arr_data_json = []
                                    for s in range(len(arr_get[n]['data_json']['step_detail'][o]['activity_code'])):
                                        try:
                                            activity_code = arr_get[n]['data_json']['step_detail'][o]['activity_code'][s]
                                        except Exception as ex:
                                            print(ex)
                                            activity_code = ''
                                        if activity_code == "A03":
                                            if self.thai_email == str(arr_get[n]['data_json']['step_detail'][o]['one_email']).lower():
                                                try:
                                                    for u in paper_lesssender.query.filter_by(step_data_sid=arr_get[n]['sid']).order_by((paper_lesssender.id).desc()).all():
                                                        json_sky = {}
                                                        json_sky['send_time'] = u.send_time
                                                        json_sky['send_time_string'] = str(u.send_time).split('+')[0]
                                                        json_sky['status'] = u.status
                                                        json_sky['sender_name'] = u.sender_name
                                                        json_sky['sender_email'] = u.sender_email
                                                        json_sky['sender_position'] = u.sender_position
                                                        json_sky['file_id'] = u.file_id
                                                        result_pdf_string = paper_lesspdf.query.filter_by(fid=json_sky['file_id']).first()
                                                        if result_pdf_string != None:
                                                            if result_pdf_string.string_sign != None:
                                                                with io.BytesIO(base64.b64decode(result_pdf_string.string_sign)) as open_pdf_file:
                                                                    read_pdf = PdfFileReader(open_pdf_file)
                                                                    num_pages = read_pdf.getNumPages()
                                                                json_sky['max_page'] = int(num_pages)
                                                            else:
                                                                with io.BytesIO(base64.b64decode(result_pdf_string.string_pdf)) as open_pdf_file:
                                                                    read_pdf = PdfFileReader(open_pdf_file)
                                                                    num_pages = read_pdf.getNumPages()
                                                                json_sky['max_page'] = int(num_pages)
                                                        else:
                                                            json_sky['max_page'] = int(0)
                                                        json_sky['result'] = 'OK'
                                                        json_sky['file_name'] = u.file_name
                                                        json_sky['tracking_id'] = u.tracking_id
                                                        json_sky['step_code'] = u.step_code
                                                        json_sky['step_data_sid'] = u.step_data_sid
                                                        sha512encode = hashlib.sha512(str(u.step_data_sid).encode('utf-8')).hexdigest()
                                                        sha512encode_OneBill = hashlib.sha512('P7Rw2h5GUVE2LpbVNRBO'.encode('utf-8')).hexdigest()
                                                        url_sendtochat = login_Page + sha512encode + "&todo=" + sha512encode_OneBill
                                                        json_sky['url_sign'] = url_sendtochat
                                                        result_resource = []
                                                        resultUserProfile = paper_lessuserProfile.query.filter_by(p_emailthai=self.thai_email).first()
                                                        if resultUserProfile != None:
                                                            json_sky['sign_string'] = resultUserProfile.p_sign
                                                        for i in paper_lesstransactionChain.query.filter_by(f_sid=u.step_data_sid).order_by((paper_lesstransactionChain.f_id).desc()).all():
                                                            json_data_result = {}
                                                            json_data_result['Account'] = eval(i.f_userAccount)['email_thai']
                                                            if self.thai_email in json_data_result['Account']:
                                                                json_data_result = {}
                                                                json_data_result['order'] = i.f_row
                                                                json_data_result['result'] = 'OK'
                                                                json_data_result['file_id'] = i.f_file_id
                                                                json_data_result['transactionId'] = i.f_transactionId
                                                                json_data_result['datetime'] = i.f_timestamp
                                                                json_data_result['datetime_string'] = str(i.f_timestamp).split('+')[0]
                                                                json_data_result['user_id'] = eval(i.f_metadate)['metadata']['user_id']
                                                                json_data_result['userAccount'] = str(i.f_userAccount)
                                                            else:
                                                                json_data_result = {}
                                                                json_data_result['result'] = 'ER'
                                                            result_resource.append(json_data_result)
                                                        json_sky['resource_OneChain'] = result_resource
                                                        for j in paper_lessdocument.query.filter_by(step_id=arr_get[n]['sid']).all():
                                                            json_sky['stamp_all'] = j.sign_page_options
                                                            json_sky['document_Id'] = j.document_id
                                                            json_sky['digit_sign'] = j.digit_sign
                                                            json_sky['attempted_folder'] = j.attempted_folder
                                                            # json_sky['options_page'] = j.options_page
                                                            # tmp_option_page = eval(j.options_page)
                                                            if j.options_page != None:
                                                                tmp_option_page = eval(j.options_page)
                                                                json_sky['options_page'] = [tmp_option_page]
                                                                if 'ca_require' in tmp_option_page:
                                                                    tmp_ca_require = tmp_option_page['ca_require']
                                                                    if type(tmp_ca_require) is bool:
                                                                        json_sky['digit_sign'] = bool(tmp_ca_require)
                                                                    else:
                                                                        json_sky['digit_sign'] = ""
                                                                else:
                                                                    json_sky['digit_sign'] = bool(j.digit_sign)
                                                            else:
                                                                json_sky['options_page'] = []
                                                            if j.documentJson != None:
                                                                if str(j.documentJson).replace(' ','') != '':
                                                                    json_sky['document_details'] = eval(j.documentJson)
                                                                    json_sky['document_details_string'] = str(j.documentJson)
                                                                else:
                                                                    jsondata = {}
                                                                    jsondata['document_type'] = None
                                                                    jsondata['document_name'] = None
                                                                    jsondata['document_remark'] = None
                                                                    json_sky['document_details'] = jsondata
                                                                    json_sky['document_details_string'] = str(jsondata)
                                                            else:
                                                                jsondata = {}
                                                                jsondata['document_type'] = None
                                                                jsondata['document_name'] = None
                                                                jsondata['document_remark'] = None
                                                                json_sky['document_details'] = jsondata
                                                                json_sky['document_details_string'] = str(jsondata)
                                                        for y in paper_lesspdf.query.filter_by(fid=u.file_id).all():
                                                            if y.hash_sign != None or y.hash_sign == "":
                                                                json_sky['file_status'] = 'Complete'
                                                            else:
                                                                json_sky['file_status'] = 'Incomplete'
                                                        try:
                                                            json_sky['file_user_status'] = arr_get[n]['data_json']['step_detail'][o]['activity_status'][s]
                                                        except Exception as ex:
                                                            return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
                                                        arr_step = []
                                                        for i in paper_lessdatastep.query.filter_by(sid=json_sky['step_data_sid']).order_by((paper_lessdatastep.id).desc()).all():
                                                            # tmp_sign_detail_list = []
                                                            arr_step_info = []
                                                            try:
                                                                json_step_data = json.dumps(i.data_json)
                                                                json_step_data = json.loads(json_step_data)
                                                            except Exception as ex:
                                                                print(ex)
                                                                return {'result': 'ER', 'messageText': 'Json ER!'}
                                                            try:
                                                                json_step_data = eval(json_step_data)
                                                            except Exception as ex:
                                                                return {'result': 'ER', 'messageText': 'Json ER!'}
                                                            arr_step.append(json_step_data)
                                                            tmp_sign_detail_list = []
                                                            for i in range(len(arr_step)):
                                                                sign_json_info = {}
                                                                tmp_sign_list_info = []
                                                                step_ = arr_step[i]
                                                                step_num = arr_step[i]['step_num']
                                                                # json_step_info_2['step_status'] = ''
                                                                if 'step_sign' in step_:
                                                                    tmp_stepsign = step_['step_sign']
                                                                    tmp_status_stepsign = tmp_stepsign['status']
                                                                    if tmp_status_stepsign == True:
                                                                        tmp_data_stepsign = tmp_stepsign['data']
                                                                        for y in range(len(tmp_data_stepsign)):
                                                                            step_signning = tmp_data_stepsign[y]
                                                                            if 'id' in step_signning:
                                                                                if step_signning['id'] not in tmp_list_sign_id:
                                                                                    tmp_sign_list_info.append(step_signning)
                                                                            else:
                                                                                tmp_sign_list_info.append(step_signning)
                                                                for u in range(len(step_['step_detail'])):
                                                                    step_2 = step_['step_detail'][u]
                                                                    for k in range(len(step_2['activity_data'])): 
                                                                        if 'status' in step_2['activity_data'][k]:
                                                                            sign_json_info = step_2['activity_data'][k]
                                                                            tmp_sign_list_info.append(sign_json_info)
                                                                sign_json_info = {
                                                                    'data':tmp_sign_list_info,
                                                                    'step_num':step_num
                                                                }
                                                                tmp_sign_detail_list.append(sign_json_info)
                                                            json_sky['sign_info'] = tmp_sign_detail_list
                                                            for nn in range(len(arr_step)):
                                                                print(arr_step[nn])
                                                                arr_step_totle = []
                                                                json_info_step2 = {}
                                                                if 'step_detail' in arr_step[nn]:
                                                                    for s in range(len(arr_step[nn]['step_detail'])):
                                                                        for y in range(len(arr_step[nn]['step_detail'][s]['activity_code'])):
                                                                            if arr_step[nn]['step_detail'][s]['activity_code'][y] == 'A03':
                                                                                json_info_step = {}
                                                                                json_info_step['step_num'] = arr_step[nn]['step_num']
                                                                                json_info_step['one_email'] = arr_step[nn]['step_detail'][s]['one_email']
                                                                                json_info_step['activity_status'] = arr_step[nn]['step_detail'][s]['activity_status'][y]

                                                                                arr_step_totle.append(json_info_step)
                                                                                # json_info_step['info'] = arr_step_totle
                                                                                # print(json_step_data[nn]['step_detail'][s]['activity_status'])

                                                                                if arr_step[nn]['step_detail'][s]['activity_status'][y] == 'Complete':
                                                                                    json_info_step2['step_status'] = 'Complete'
                                                                                elif arr_step[nn]['step_detail'][s]['activity_status'][y] == 'Approve':
                                                                                    json_info_step2['step_status'] = 'Complete'
                                                                                else:
                                                                                    try:
                                                                                        json_info_step2['step_status']
                                                                                    except Exception as ex:
                                                                                        json_info_step2['step_status'] = 'Incomplete'

                                                                    json_info_step2['step_info'] = arr_step_totle
                                                                    arr_step_info.append(json_info_step2)

                                                                    json_sky['file_user_status_detail'] = arr_step_info
                                                            try:

                                                                json_sky['step_info'] = arr_step
                                                            except Exception as ex:
                                                                print(ex)

                                                        arr_get_sid.append(json_sky)
                                                except Exception as ex:
                                                    print(ex)
                                                    return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
                else:
                    for l in range(len(arr_get[n]['data_json'])):
                        if 'step_detail' in arr_get[n]['data_json'][l]:
                            for o in range(len(arr_get[n]['data_json'][l]['step_detail'])):
                                if 'one_email' in arr_get[n]['data_json'][l]['step_detail'][o]:
                                    arrjson_data = {}
                                    arr_data_json = []
                                    for s in range(len(arr_get[n]['data_json'][l]['step_detail'][o]['activity_code'])):
                                        try:
                                            activity_code = arr_get[n]['data_json'][l]['step_detail'][o]['activity_code'][s]
                                        except Exception as ex:
                                            print(ex)
                                            activity_code = ''
                                        if activity_code == "A03":
                                            if self.thai_email == str(arr_get[n]['data_json'][l]['step_detail'][o]['one_email']).lower():
                                                try:
                                                    
                                                    for u in paper_lesssender.query.filter_by(step_data_sid=arr_get[n]['sid']).order_by((paper_lesssender.id).desc()).all():

                                                        json_sky = {}
                                                        if 'signpad' in arr_get[n]['data_json'][l]:
                                                            json_sky['signpad'] = arr_get[n]['data_json'][l]['signpad']
                                                        else:
                                                            json_sky['signpad'] = None
                                                        json_sky['send_time'] = u.send_time
                                                        json_sky['send_time_string'] = str(u.send_time).split('+')[0]
                                                        json_sky['status'] = u.status
                                                        json_sky['sender_name'] = u.sender_name
                                                        json_sky['sender_email'] = u.sender_email
                                                        json_sky['sender_position'] = u.sender_position
                                                        json_sky['file_id'] = u.file_id
                                                        result_pdf_string = paper_lesspdf.query.filter_by(fid=json_sky['file_id']).first()
                                                        if result_pdf_string != None:
                                                            if result_pdf_string.string_sign != None:
                                                                with io.BytesIO(base64.b64decode(result_pdf_string.string_sign)) as open_pdf_file:
                                                                    read_pdf = PdfFileReader(open_pdf_file)
                                                                    num_pages = read_pdf.getNumPages()
                                                                json_sky['max_page'] = int(num_pages)
                                                            else:
                                                                with io.BytesIO(base64.b64decode(result_pdf_string.string_pdf)) as open_pdf_file:
                                                                    read_pdf = PdfFileReader(open_pdf_file)
                                                                    num_pages = read_pdf.getNumPages()
                                                                json_sky['max_page'] = int(num_pages)
                                                        else:
                                                            json_sky['max_page'] = int(0)
                                                        json_sky['result'] = 'OK'
                                                        json_sky['file_name'] = u.file_name
                                                        json_sky['tracking_id'] = u.tracking_id
                                                        json_sky['step_code'] = u.step_code
                                                        json_sky['step_data_sid'] = u.step_data_sid
                                                        sha512encode = hashlib.sha512(str(u.step_data_sid).encode('utf-8')).hexdigest()
                                                        sha512encode_OneBill = hashlib.sha512('P7Rw2h5GUVE2LpbVNRBO'.encode('utf-8')).hexdigest()
                                                        url_sendtochat = login_Page + sha512encode + "&todo=" + sha512encode_OneBill
                                                        json_sky['url_sign'] = url_sendtochat
                                                        result_resource = []
                                                        resultUserProfile = paper_lessuserProfile.query.filter_by(p_emailthai=self.thai_email).first()
                                                        if resultUserProfile != None:
                                                            json_sky['sign_string'] = resultUserProfile.p_sign
                                                        for i in paper_lesstransactionChain.query.filter_by(f_sid=u.step_data_sid).order_by((paper_lesstransactionChain.f_id).desc()).all():
                                                            json_data_result = {}
                                                            json_data_result['Account'] = eval(i.f_userAccount)['email_thai']
                                                            if self.thai_email in json_data_result['Account']:
                                                                json_data_result = {}
                                                                json_data_result['order'] = i.f_row
                                                                json_data_result['result'] = 'OK'
                                                                json_data_result['file_id'] = i.f_file_id
                                                                json_data_result['transactionId'] = i.f_transactionId
                                                                json_data_result['datetime'] = i.f_timestamp
                                                                json_data_result['datetime_string'] = str(i.f_timestamp).split('+')[0]
                                                                json_data_result['user_id'] = eval(i.f_metadate)['metadata']['user_id']
                                                                json_data_result['userAccount'] = str(i.f_userAccount)
                                                            else:
                                                                json_data_result = {}
                                                                json_data_result['result'] = 'ER'
                                                            result_resource.append(json_data_result)
                                                        json_sky['resource_OneChain'] = result_resource
                                                        for j in paper_lessdocument.query.filter_by(step_id=arr_get[n]['sid']).all():
                                                            json_sky['stamp_all'] = j.sign_page_options
                                                            json_sky['document_Id'] = j.document_id
                                                            json_sky['digit_sign'] = j.digit_sign
                                                            json_sky['attempted_folder'] = j.attempted_folder
                                                            if j.options_page != None:
                                                                tmp_option_page = eval(j.options_page)
                                                                json_sky['options_page'] = [tmp_option_page]
                                                                if 'ca_require' in tmp_option_page:
                                                                    tmp_ca_require = tmp_option_page['ca_require']
                                                                    if type(tmp_ca_require) is bool:
                                                                        json_sky['digit_sign'] = bool(tmp_ca_require)
                                                                    else:
                                                                        json_sky['digit_sign'] = ""
                                                                else:
                                                                    json_sky['digit_sign'] = bool(j.digit_sign)
                                                            else:
                                                                json_sky['options_page'] = []
                                                            json_sky['options_page'] = j.options_page
                                                            if j.documentJson != None:
                                                                if str(j.documentJson).replace(' ','') != '':
                                                                    json_sky['document_details'] = eval(j.documentJson)
                                                                    json_sky['document_details_string'] = str(j.documentJson)
                                                                else:
                                                                    jsondata = {}
                                                                    jsondata['document_type'] = None
                                                                    jsondata['document_name'] = None
                                                                    jsondata['document_remark'] = None
                                                                    json_sky['document_details'] = jsondata
                                                                    json_sky['document_details_string'] = str(jsondata)
                                                            else:
                                                                jsondata = {}
                                                                jsondata['document_type'] = None
                                                                jsondata['document_name'] = None
                                                                jsondata['document_remark'] = None
                                                                json_sky['document_details'] = jsondata
                                                                json_sky['document_details_string'] = str(jsondata)
                                                        for y in paper_lesspdf.query.filter_by(fid=u.file_id).all():
                                                            if y.hash_sign != None or y.hash_sign == "":
                                                                json_sky['file_status'] = 'Complete'
                                                            else:
                                                                json_sky['file_status'] = 'Incomplete'
                                                        try:
                                                            json_sky['file_user_status'] = arr_get[n]['data_json'][l]['step_detail'][o]['activity_status'][s]
                                                        except Exception as ex:
                                                            return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
                                                        arr_step = []
                                                        for i in paper_lessdatastep.query.filter_by(sid=json_sky['step_data_sid']).order_by((paper_lessdatastep.id).desc()).all():
                                                            arr_step_info = []
                                                            try:
                                                                json_step_data = json.dumps(i.data_json)
                                                                json_step_data = json.loads(json_step_data)
                                                            except Exception as ex:
                                                                print(ex)
                                                                return {'result': 'ER', 'messageText': 'Json ER!'}
                                                            try:
                                                                json_step_data = eval(json_step_data)
                                                            except Exception as ex:
                                                                return {'result': 'ER', 'messageText': 'Json ER!'}
                                                            for o in range(len(json_step_data)):
                                                                arr_step.append(json_step_data[o])
                                                            tmp_step_num = u
                                                            # for hg in range(len(tmp_code)):
                                                            #     if tmp_code[hg] == 'A03':
                                                            #         sign_detail_require = []
                                                            #         tmp_activity_data = tmp_arr_step_detail['activity_data'][hg]
                                                            #         if 'status' in tmp_activity_data:
                                                            #             if tmp_activity_data['status'] == 'incomplete':
                                                            #                 sign_detail_require.append(tmp_activity_data)
                                                            #                 list_my_email.append(u)
                                                            # if 'step_sign' in  step_infomation[i]:
                                                            #     if  step_infomation[i]['step_sign']['status'] == True:
                                                            #         tmp_data_ssign = step_infomation[i]['step_sign']['data']
                                                            #         for zy in range(len(tmp_data_ssign)):
                                                            #             if 'step_index' in tmp_data_ssign[zy]: 
                                                            #                 if len(tmp_data_ssign[zy]['step_index']) != 0:
                                                            #                     # print(tmp_step_num , tmp_data_ssign[zy]['step_index'])
                                                            #                     if tmp_step_num in tmp_data_ssign[zy]['step_index']:
                                                            #                         if  tmp_data_ssign[zy]['status'] == 'incomplete':
                                                            #                             sign_detail_require.append(tmp_data_ssign[zy])
                                                            #                 else:
                                                            #                     if 'id' in tmp_data_ssign[zy]:
                                                            #                         if tmp_data_ssign[zy]['id'] not in tmp_list_sign_id:
                                                            #                             if  tmp_data_ssign[zy]['status'] == 'incomplete':
                                                            #                                 sign_detail_require.append(tmp_data_ssign[zy])
                                                            #                     else:
                                                            #                         sign_detail_require.append(tmp_data_ssign[zy])
                                                            # # print(sign_detail_require , step_num)
                                                            # info_step = {
                                                            #     'data':sign_detail_require,
                                                            #     'step_num':step_num
                                                            # }
                                                            # require_sign_info.append(info_step)
                                                            tmp_sign_detail_list = []
                                                            for i in range(len(arr_step)):
                                                                sign_json_info = {}
                                                                tmp_sign_list_info = []
                                                                step_ = arr_step[i]
                                                                step_num = arr_step[i]['step_num']
                                                                # json_step_info_2['step_status'] = ''
                                                                if 'step_sign' in step_:
                                                                    tmp_stepsign = step_['step_sign']
                                                                    tmp_status_stepsign = tmp_stepsign['status']
                                                                    if tmp_status_stepsign == True:
                                                                        tmp_data_stepsign = tmp_stepsign['data']
                                                                        for y in range(len(tmp_data_stepsign)):
                                                                            step_signning = tmp_data_stepsign[y]
                                                                            if 'id' in step_signning:
                                                                                if step_signning['id'] not in tmp_list_sign_id:
                                                                                    tmp_sign_list_info.append(step_signning)
                                                                            else:
                                                                                tmp_sign_list_info.append(step_signning)
                                                                for u in range(len(step_['step_detail'])):
                                                                    step_2 = step_['step_detail'][u]
                                                                    for k in range(len(step_2['activity_data'])): 
                                                                        if 'status' in step_2['activity_data'][k]:
                                                                            sign_json_info = step_2['activity_data'][k]
                                                                            tmp_sign_list_info.append(sign_json_info)
                                                                sign_json_info = {
                                                                    'data':tmp_sign_list_info,
                                                                    'step_num':step_num
                                                                }
                                                                tmp_sign_detail_list.append(sign_json_info)
                                                            json_sky['sign_info'] = tmp_sign_detail_list
                                                            for nn in range(len(arr_step)):

                                                                arr_step_totle = []
                                                                json_info_step2 = {}
                                                                if 'step_detail' in json_step_data[nn]:
                                                                    for s in range(len(json_step_data[nn]['step_detail'])):
                                                                        for y in range(len(json_step_data[nn]['step_detail'][s]['activity_code'])):
                                                                            if json_step_data[nn]['step_detail'][s]['activity_code'][y] == 'A03':
                                                                                json_info_step = {}
                                                                                json_info_step['step_num'] = json_step_data[nn]['step_num']
                                                                                json_info_step['one_email'] = json_step_data[nn]['step_detail'][s]['one_email']
                                                                                json_info_step['activity_status'] = json_step_data[nn]['step_detail'][s]['activity_status'][y]

                                                                                arr_step_totle.append(json_info_step)
                                                                                # json_info_step['info'] = arr_step_totle
                                                                                # print(json_step_data[nn]['step_detail'][s]['activity_status'])

                                                                                if arr_step[nn]['step_detail'][s]['activity_status'][y] == 'Complete':
                                                                                    json_info_step2['step_status'] = 'Complete'
                                                                                elif arr_step[nn]['step_detail'][s]['activity_status'][y] == 'Approve':
                                                                                    json_info_step2['step_status'] = 'Complete'
                                                                                else:
                                                                                    try:
                                                                                        json_info_step2['step_status']
                                                                                    except Exception as ex:
                                                                                        json_info_step2['step_status'] = 'Incomplete'

                                                                    json_info_step2['step_info'] = arr_step_totle
                                                                    arr_step_info.append(json_info_step2)

                                                                    json_sky['file_user_status_detail'] = arr_step_info
                                                            try:

                                                                json_sky['step_info'] = arr_step
                                                            except Exception as ex:
                                                                print(ex)

                                                        arr_get_sid.append(json_sky)
                                                except Exception as ex:
                                                    print(ex)
                                                    return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}

            if len(arr_get_sid) != 0:
                return {'result': 'OK', 'messageText': arr_get_sid,'status_Code':200}
            else:
                return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}

        except Exception as ex:
            return {'result': 'ER', 'messageText': str(ex)}



    def select_recep_chat_v2(self,email,string):
        self.thai_email = email
        self.string = string
        try:
            arr_get_sid=[]
            json_data = {}
            arr_get=[]
            for u in paper_lessdatastep.query.all():
                sha512encode = hashlib.sha512(str(u.sid).encode('utf-8')).hexdigest()
                if self.string == sha512encode:
                    json_data['id'] = u.id
            for k in paper_lessdatastep.query.filter_by(id=json_data['id']).all():
                json_sky = {}
                json_sky['data_json'] = eval(k.data_json)
                json_sky['sid'] = k.sid
                json_sky['update_time'] = k.update_time
                arr_get.append(json_sky)
            for n in range(len(arr_get)):
                if 'step_num' in arr_get[n]['data_json']:
                    if 'signpad' in arr_get[n]['data_json']:
                        json_sky['signpad'] = arr_get[n]['data_json']['signpad']
                    else:
                        json_sky['signpad'] = None
                    if 'step_detail' in arr_get[n]['data_json']:
                            for o in range(len(arr_get[n]['data_json']['step_detail'])):
                                if 'one_email' in arr_get[n]['data_json']['step_detail'][o]:
                                    arrjson_data = {}
                                    arr_data_json = []
                                    for s in range(len(arr_get[n]['data_json']['step_detail'][o]['activity_code'])):
                                        try:
                                            activity_code = arr_get[n]['data_json']['step_detail'][o]['activity_code'][s]
                                        except Exception as ex:
                                            print(ex)
                                            activity_code = ''
                                        if activity_code == "A03":
                                            if self.thai_email == str(arr_get[n]['data_json']['step_detail'][o]['one_email']).lower():
                                                try:
                                                    for u in paper_lesssender.query.filter_by(step_data_sid=arr_get[n]['sid']).order_by((paper_lesssender.id).desc()).all():
                                                        json_sky = {}
                                                        json_sky['send_time'] = u.send_time
                                                        json_sky['send_time_string'] = str(u.send_time).split('+')[0]
                                                        json_sky['status'] = u.status
                                                        json_sky['sender_name'] = u.sender_name
                                                        json_sky['sender_email'] = u.sender_email
                                                        json_sky['sender_position'] = u.sender_position
                                                        json_sky['file_id'] = u.file_id
                                                        result_pdf_string = paper_lesspdf.query.filter_by(fid=json_sky['file_id']).first()
                                                        if result_pdf_string != None:
                                                            if result_pdf_string.string_sign != None:
                                                                with io.BytesIO(base64.b64decode(result_pdf_string.string_sign)) as open_pdf_file:
                                                                    read_pdf = PdfFileReader(open_pdf_file)
                                                                    num_pages = read_pdf.getNumPages()
                                                                json_sky['max_page'] = int(num_pages)
                                                            else:
                                                                with io.BytesIO(base64.b64decode(result_pdf_string.string_pdf)) as open_pdf_file:
                                                                    read_pdf = PdfFileReader(open_pdf_file)
                                                                    num_pages = read_pdf.getNumPages()
                                                                json_sky['max_page'] = int(num_pages)
                                                        else:
                                                            json_sky['max_page'] = int(0)
                                                        json_sky['result'] = 'OK'
                                                        json_sky['file_name'] = u.file_name
                                                        json_sky['tracking_id'] = u.tracking_id
                                                        json_sky['step_code'] = u.step_code
                                                        json_sky['step_data_sid'] = u.step_data_sid
                                                        sha512encode = hashlib.sha512(str(u.step_data_sid).encode('utf-8')).hexdigest()
                                                        sha512encode_OneBill = hashlib.sha512('P7Rw2h5GUVE2LpbVNRBO'.encode('utf-8')).hexdigest()
                                                        url_sendtochat = login_Page + sha512encode + "&todo=" + sha512encode_OneBill
                                                        json_sky['url_sign'] = url_sendtochat
                                                        result_resource = []
                                                        resultUserProfile = paper_lessuserProfile.query.filter_by(p_emailthai=self.thai_email).first()
                                                        if resultUserProfile != None:
                                                            json_sky['sign_string'] = resultUserProfile.p_sign
                                                        for i in paper_lesstransactionChain.query.filter_by(f_sid=u.step_data_sid).order_by((paper_lesstransactionChain.f_id).desc()).all():
                                                            json_data_result = {}
                                                            json_data_result['Account'] = eval(i.f_userAccount)['email_thai']
                                                            if self.thai_email in json_data_result['Account']:
                                                                json_data_result = {}
                                                                json_data_result['order'] = i.f_row
                                                                json_data_result['result'] = 'OK'
                                                                json_data_result['file_id'] = i.f_file_id
                                                                json_data_result['transactionId'] = i.f_transactionId
                                                                json_data_result['datetime'] = i.f_timestamp
                                                                json_data_result['datetime_string'] = str(i.f_timestamp).split('+')[0]
                                                                json_data_result['user_id'] = eval(i.f_metadate)['metadata']['user_id']
                                                                json_data_result['userAccount'] = str(i.f_userAccount)
                                                            else:
                                                                json_data_result = {}
                                                                json_data_result['result'] = 'ER'
                                                            result_resource.append(json_data_result)
                                                        json_sky['resource_OneChain'] = result_resource
                                                        for j in paper_lessdocument.query.filter_by(step_id=arr_get[n]['sid']).all():
                                                            json_sky['stamp_all'] = j.sign_page_options
                                                            json_sky['document_Id'] = j.document_id
                                                            json_sky['digit_sign'] = j.digit_sign
                                                            # json_sky['options_page'] = j.options_page
                                                            # tmp_option_page = eval(j.options_page)
                                                            if j.options_page != None:
                                                                tmp_option_page = eval(j.options_page)
                                                                json_sky['options_page'] = [tmp_option_page]
                                                                if 'ca_require' in tmp_option_page:
                                                                    tmp_ca_require = tmp_option_page['ca_require']
                                                                    if type(tmp_ca_require) is bool:
                                                                        json_sky['digit_sign'] = bool(tmp_ca_require)
                                                                    else:
                                                                        json_sky['digit_sign'] = ""
                                                                else:
                                                                    json_sky['digit_sign'] = bool(j.digit_sign)
                                                            else:
                                                                json_sky['options_page'] = []
                                                            if j.documentJson != None:
                                                                if str(j.documentJson).replace(' ','') != '':
                                                                    json_sky['document_details'] = eval(j.documentJson)
                                                                    json_sky['document_details_string'] = str(j.documentJson)
                                                                else:
                                                                    jsondata = {}
                                                                    jsondata['document_type'] = None
                                                                    jsondata['document_name'] = None
                                                                    jsondata['document_remark'] = None
                                                                    json_sky['document_details'] = jsondata
                                                                    json_sky['document_details_string'] = str(jsondata)
                                                            else:
                                                                jsondata = {}
                                                                jsondata['document_type'] = None
                                                                jsondata['document_name'] = None
                                                                jsondata['document_remark'] = None
                                                                json_sky['document_details'] = jsondata
                                                                json_sky['document_details_string'] = str(jsondata)
                                                        for y in paper_lesspdf.query.filter_by(fid=u.file_id).all():
                                                            if y.hash_sign != None or y.hash_sign == "":
                                                                json_sky['file_status'] = 'Complete'
                                                            else:
                                                                json_sky['file_status'] = 'Incomplete'
                                                        try:
                                                            json_sky['file_user_status'] = arr_get[n]['data_json']['step_detail'][o]['activity_status'][s]
                                                        except Exception as ex:
                                                            return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
                                                        arr_step = []
                                                        for i in paper_lessdatastep.query.filter_by(sid=json_sky['step_data_sid']).order_by((paper_lessdatastep.id).desc()).all():

                                                            arr_step_info = []
                                                            try:
                                                                json_step_data = json.dumps(i.data_json)
                                                                json_step_data = json.loads(json_step_data)
                                                            except Exception as ex:
                                                                print(ex)
                                                                return {'result': 'ER', 'messageText': 'Json ER!'}
                                                            try:
                                                                json_step_data = eval(json_step_data)
                                                            except Exception as ex:
                                                                return {'result': 'ER', 'messageText': 'Json ER!'}
                                                            arr_step.append(json_step_data)
                                                            for nn in range(len(arr_step)):
                                                                print(arr_step[nn])
                                                                arr_step_totle = []
                                                                json_info_step2 = {}
                                                                if 'step_detail' in arr_step[nn]:
                                                                    for s in range(len(arr_step[nn]['step_detail'])):
                                                                        for y in range(len(arr_step[nn]['step_detail'][s]['activity_code'])):
                                                                            if arr_step[nn]['step_detail'][s]['activity_code'][y] == 'A03':
                                                                                json_info_step = {}
                                                                                json_info_step['step_num'] = arr_step[nn]['step_num']
                                                                                json_info_step['one_email'] = arr_step[nn]['step_detail'][s]['one_email']
                                                                                json_info_step['activity_status'] = arr_step[nn]['step_detail'][s]['activity_status'][y]

                                                                                arr_step_totle.append(json_info_step)
                                                                                # json_info_step['info'] = arr_step_totle
                                                                                # print(json_step_data[nn]['step_detail'][s]['activity_status'])

                                                                                if arr_step[nn]['step_detail'][s]['activity_status'][y] == 'Complete':
                                                                                    json_info_step2['step_status'] = 'Complete'
                                                                                elif arr_step[nn]['step_detail'][s]['activity_status'][y] == 'Approve':
                                                                                    json_info_step2['step_status'] = 'Complete'
                                                                                else:
                                                                                    try:
                                                                                        json_info_step2['step_status']
                                                                                    except Exception as ex:
                                                                                        json_info_step2['step_status'] = 'Incomplete'

                                                                    json_info_step2['step_info'] = arr_step_totle
                                                                    arr_step_info.append(json_info_step2)

                                                                    json_sky['file_user_status_detail'] = arr_step_info
                                                            try:

                                                                json_sky['step_info'] = arr_step
                                                            except Exception as ex:
                                                                print(ex)

                                                        arr_get_sid.append(json_sky)
                                                except Exception as ex:
                                                    print(ex)
                                                    return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
                else:
                    for l in range(len(arr_get[n]['data_json'])):
                        if 'step_detail' in arr_get[n]['data_json'][l]:
                            for o in range(len(arr_get[n]['data_json'][l]['step_detail'])):
                                if 'one_email' in arr_get[n]['data_json'][l]['step_detail'][o]:
                                    arrjson_data = {}
                                    arr_data_json = []
                                    for s in range(len(arr_get[n]['data_json'][l]['step_detail'][o]['activity_code'])):
                                        try:
                                            activity_code = arr_get[n]['data_json'][l]['step_detail'][o]['activity_code'][s]
                                        except Exception as ex:
                                            print(ex)
                                            activity_code = ''
                                        if activity_code == "A03":
                                            if self.thai_email == str(arr_get[n]['data_json'][l]['step_detail'][o]['one_email']).lower():
                                                try:
                                                    
                                                    for u in paper_lesssender.query.filter_by(step_data_sid=arr_get[n]['sid']).order_by((paper_lesssender.id).desc()).all():

                                                        json_sky = {}
                                                        if 'signpad' in arr_get[n]['data_json'][l]:
                                                            json_sky['signpad'] = arr_get[n]['data_json'][l]['signpad']
                                                        else:
                                                            json_sky['signpad'] = None
                                                        json_sky['send_time'] = u.send_time
                                                        json_sky['send_time_string'] = str(u.send_time).split('+')[0]
                                                        json_sky['status'] = u.status
                                                        json_sky['sender_name'] = u.sender_name
                                                        json_sky['sender_email'] = u.sender_email
                                                        json_sky['sender_position'] = u.sender_position
                                                        json_sky['file_id'] = u.file_id
                                                        result_pdf_string = paper_lesspdf.query.filter_by(fid=json_sky['file_id']).first()
                                                        if result_pdf_string != None:
                                                            if result_pdf_string.string_sign != None:
                                                                with io.BytesIO(base64.b64decode(result_pdf_string.string_sign)) as open_pdf_file:
                                                                    read_pdf = PdfFileReader(open_pdf_file)
                                                                    num_pages = read_pdf.getNumPages()
                                                                json_sky['max_page'] = int(num_pages)
                                                            else:
                                                                with io.BytesIO(base64.b64decode(result_pdf_string.string_pdf)) as open_pdf_file:
                                                                    read_pdf = PdfFileReader(open_pdf_file)
                                                                    num_pages = read_pdf.getNumPages()
                                                                json_sky['max_page'] = int(num_pages)
                                                        else:
                                                            json_sky['max_page'] = int(0)
                                                        json_sky['result'] = 'OK'
                                                        json_sky['file_name'] = u.file_name
                                                        json_sky['tracking_id'] = u.tracking_id
                                                        json_sky['step_code'] = u.step_code
                                                        json_sky['step_data_sid'] = u.step_data_sid
                                                        sha512encode = hashlib.sha512(str(u.step_data_sid).encode('utf-8')).hexdigest()
                                                        sha512encode_OneBill = hashlib.sha512('P7Rw2h5GUVE2LpbVNRBO'.encode('utf-8')).hexdigest()
                                                        url_sendtochat = login_Page + sha512encode + "&todo=" + sha512encode_OneBill
                                                        json_sky['url_sign'] = url_sendtochat
                                                        result_resource = []
                                                        resultUserProfile = paper_lessuserProfile.query.filter_by(p_emailthai=self.thai_email).first()
                                                        if resultUserProfile != None:
                                                            json_sky['sign_string'] = resultUserProfile.p_sign
                                                        for i in paper_lesstransactionChain.query.filter_by(f_sid=u.step_data_sid).order_by((paper_lesstransactionChain.f_id).desc()).all():
                                                            json_data_result = {}
                                                            json_data_result['Account'] = eval(i.f_userAccount)['email_thai']
                                                            if self.thai_email in json_data_result['Account']:
                                                                json_data_result = {}
                                                                json_data_result['order'] = i.f_row
                                                                json_data_result['result'] = 'OK'
                                                                json_data_result['file_id'] = i.f_file_id
                                                                json_data_result['transactionId'] = i.f_transactionId
                                                                json_data_result['datetime'] = i.f_timestamp
                                                                json_data_result['datetime_string'] = str(i.f_timestamp).split('+')[0]
                                                                json_data_result['user_id'] = eval(i.f_metadate)['metadata']['user_id']
                                                                json_data_result['userAccount'] = str(i.f_userAccount)
                                                            else:
                                                                json_data_result = {}
                                                                json_data_result['result'] = 'ER'
                                                            result_resource.append(json_data_result)
                                                        json_sky['resource_OneChain'] = result_resource
                                                        for j in paper_lessdocument.query.filter_by(step_id=arr_get[n]['sid']).all():
                                                            json_sky['stamp_all'] = j.sign_page_options
                                                            json_sky['document_Id'] = j.document_id
                                                            json_sky['digit_sign'] = j.digit_sign
                                                            if j.options_page != None:
                                                                tmp_option_page = eval(j.options_page)
                                                                json_sky['options_page'] = [tmp_option_page]
                                                                if 'ca_require' in tmp_option_page:
                                                                    tmp_ca_require = tmp_option_page['ca_require']
                                                                    if type(tmp_ca_require) is bool:
                                                                        json_sky['digit_sign'] = bool(tmp_ca_require)
                                                                    else:
                                                                        json_sky['digit_sign'] = ""
                                                                else:
                                                                    json_sky['digit_sign'] = bool(j.digit_sign)
                                                            else:
                                                                json_sky['options_page'] = []
                                                            json_sky['options_page'] = j.options_page
                                                            if j.documentJson != None:
                                                                if str(j.documentJson).replace(' ','') != '':
                                                                    json_sky['document_details'] = eval(j.documentJson)
                                                                    json_sky['document_details_string'] = str(j.documentJson)
                                                                else:
                                                                    jsondata = {}
                                                                    jsondata['document_type'] = None
                                                                    jsondata['document_name'] = None
                                                                    jsondata['document_remark'] = None
                                                                    json_sky['document_details'] = jsondata
                                                                    json_sky['document_details_string'] = str(jsondata)
                                                            else:
                                                                jsondata = {}
                                                                jsondata['document_type'] = None
                                                                jsondata['document_name'] = None
                                                                jsondata['document_remark'] = None
                                                                json_sky['document_details'] = jsondata
                                                                json_sky['document_details_string'] = str(jsondata)
                                                        for y in paper_lesspdf.query.filter_by(fid=u.file_id).all():
                                                            if y.hash_sign != None or y.hash_sign == "":
                                                                json_sky['file_status'] = 'Complete'
                                                            else:
                                                                json_sky['file_status'] = 'Incomplete'
                                                        try:
                                                            json_sky['file_user_status'] = arr_get[n]['data_json'][l]['step_detail'][o]['activity_status'][s]
                                                        except Exception as ex:
                                                            return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
                                                        arr_step = []
                                                        for i in paper_lessdatastep.query.filter_by(sid=json_sky['step_data_sid']).order_by((paper_lessdatastep.id).desc()).all():
                                                            arr_step_info = []
                                                            try:
                                                                json_step_data = json.dumps(i.data_json)
                                                                json_step_data = json.loads(json_step_data)
                                                            except Exception as ex:
                                                                print(ex)
                                                                return {'result': 'ER', 'messageText': 'Json ER!'}
                                                            try:
                                                                json_step_data = eval(json_step_data)
                                                            except Exception as ex:
                                                                return {'result': 'ER', 'messageText': 'Json ER!'}
                                                            for o in range(len(json_step_data)):
                                                                arr_step.append(json_step_data[o])
                                                            for nn in range(len(arr_step)):

                                                                arr_step_totle = []
                                                                json_info_step2 = {}
                                                                if 'step_detail' in json_step_data[nn]:
                                                                    for s in range(len(json_step_data[nn]['step_detail'])):
                                                                        for y in range(len(json_step_data[nn]['step_detail'][s]['activity_code'])):
                                                                            if json_step_data[nn]['step_detail'][s]['activity_code'][y] == 'A03':
                                                                                json_info_step = {}
                                                                                json_info_step['step_num'] = json_step_data[nn]['step_num']
                                                                                json_info_step['one_email'] = json_step_data[nn]['step_detail'][s]['one_email']
                                                                                json_info_step['activity_status'] = json_step_data[nn]['step_detail'][s]['activity_status'][y]

                                                                                arr_step_totle.append(json_info_step)
                                                                                # json_info_step['info'] = arr_step_totle
                                                                                # print(json_step_data[nn]['step_detail'][s]['activity_status'])

                                                                                if arr_step[nn]['step_detail'][s]['activity_status'][y] == 'Complete':
                                                                                    json_info_step2['step_status'] = 'Complete'
                                                                                elif arr_step[nn]['step_detail'][s]['activity_status'][y] == 'Approve':
                                                                                    json_info_step2['step_status'] = 'Complete'
                                                                                else:
                                                                                    try:
                                                                                        json_info_step2['step_status']
                                                                                    except Exception as ex:
                                                                                        json_info_step2['step_status'] = 'Incomplete'

                                                                    json_info_step2['step_info'] = arr_step_totle
                                                                    arr_step_info.append(json_info_step2)

                                                                    json_sky['file_user_status_detail'] = arr_step_info
                                                            try:

                                                                json_sky['step_info'] = arr_step
                                                            except Exception as ex:
                                                                print(ex)

                                                        arr_get_sid.append(json_sky)
                                                except Exception as ex:
                                                    print(ex)
                                                    return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}


            if len(arr_get_sid) != 0:
                return {'result': 'OK', 'messageText': arr_get_sid,'status_Code':200}
            else:
                return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}

        except Exception as ex:
            return {'result': 'ER', 'messageText': str(ex)}


    def select_recep_publicsign(self,email_hash,string):
        self.thai_email = email_hash
        self.string = string
        try:
            arr_get_sid=[]
            json_data = {}
            arr_get=[]
            for u in paper_lessdatastep.query.all():
                sha512encode = hashlib.sha512(str(u.sid).encode('utf-8')).hexdigest()
                if self.string == sha512encode:
                    json_data['id'] = u.id
            for k in paper_lessdatastep.query.filter_by(id=json_data['id']).all():
                json_sky = {}
                json_sky['data_json'] = eval(k.data_json)
                json_sky['sid'] = k.sid
                json_sky['update_time'] = k.update_time
                arr_get.append(json_sky)
            for n in range(len(arr_get)):
                if 'step_num' in arr_get[n]['data_json']:
                    if 'step_detail' in arr_get[n]['data_json']:
                            for o in range(len(arr_get[n]['data_json']['step_detail'])):
                                if 'one_email' in arr_get[n]['data_json']['step_detail'][o]:
                                    arrjson_data = {}
                                    arr_data_json = []
                                    for s in range(len(arr_get[n]['data_json']['step_detail'][o]['activity_code'])):
                                        try:
                                            activity_code = arr_get[n]['data_json']['step_detail'][o]['activity_code'][s]
                                        except Exception as ex:
                                            print(ex)
                                            activity_code = ''
                                        if activity_code == "A03":
                                            sha512encode_thai_email = hashlib.sha512(str(arr_get[n]['data_json']['step_detail'][o]['one_email']).encode('utf-8')).hexdigest()
                                            if self.thai_email == sha512encode_thai_email:
                                                try:
                                                    for u in paper_lesssender.query.filter_by(step_data_sid=arr_get[n]['sid']).order_by((paper_lesssender.id).desc()).all():
                                                        json_sky = {}
                                                        json_sky['send_time'] = u.send_time
                                                        json_sky['send_time_string'] = str(u.send_time).split('+')[0]
                                                        json_sky['status'] = u.status
                                                        json_sky['sender_name'] = u.sender_name
                                                        json_sky['sender_email'] = u.sender_email
                                                        json_sky['sender_position'] = u.sender_position
                                                        json_sky['file_id'] = u.file_id
                                                        json_sky['result'] = 'OK'
                                                        json_sky['file_name'] = u.file_name
                                                        json_sky['tracking_id'] = u.tracking_id
                                                        json_sky['step_code'] = u.step_code
                                                        json_sky['step_data_sid'] = u.step_data_sid
                                                        sha512encode = hashlib.sha512(str(u.step_data_sid).encode('utf-8')).hexdigest()
                                                        sha512encode_OneBill = hashlib.sha512('P7Rw2h5GUVE2LpbVNRBO'.encode('utf-8')).hexdigest()
                                                        url_sendtochat = login_Page + sha512encode + "&todo=" + sha512encode_OneBill
                                                        json_sky['url_sign'] = url_sendtochat
                                                        result_resource = []
                                                        for i in paper_lesstransactionChain.query.filter_by(f_sid=u.step_data_sid).order_by((paper_lesstransactionChain.f_id).desc()).all():
                                                            json_data_result = {}
                                                            json_data_result['Account'] = eval(i.f_userAccount)['email_thai']
                                                            for y in range(len(json_data_result['Account'])):
                                                                sha512encode_account = hashlib.sha512(str(json_data_result['Account'][y]).encode('utf-8')).hexdigest()
                                                                json_data_result['Account'][y] = sha512encode_account
                                                            if self.thai_email in json_data_result['Account']:
                                                                json_data_result = {}
                                                                json_data_result['order'] = str(i.f_row)
                                                                json_data_result['result'] = 'OK'
                                                                json_data_result['file_id'] = i.f_file_id
                                                                json_data_result['transactionId'] = i.f_transactionId
                                                                json_data_result['datetime'] = i.f_timestamp
                                                                json_data_result['datetime_string'] = str(i.f_timestamp).split('+')[0]
                                                                json_data_result['user_id'] = eval(i.f_metadate)['metadata']['user_id']
                                                                json_data_result['userAccount'] = str(i.f_userAccount)
                                                            else:
                                                                json_data_result = {}
                                                                json_data_result['result'] = 'ER'
                                                            result_resource.append(json_data_result)
                                                        json_sky['resource_OneChain'] = result_resource
                                                        for j in paper_lessdocument.query.filter_by(step_id=arr_get[n]['sid']).all():
                                                            json_sky['document_Id'] = j.document_id
                                                        for y in paper_lesspdf.query.filter_by(fid=u.file_id).all():
                                                            if y.hash_sign != None or y.hash_sign == "":
                                                                json_sky['file_status'] = 'Complete'
                                                            else:
                                                                json_sky['file_status'] = 'Incomplete'
                                                        try:
                                                            json_sky['file_user_status'] = arr_get[n]['data_json']['step_detail'][o]['activity_status'][s]
                                                        except Exception as ex:
                                                            return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
                                                        arr_step = []
                                                        for i in paper_lessdatastep.query.filter_by(sid=json_sky['step_data_sid']).order_by((paper_lessdatastep.id).desc()).all():

                                                            arr_step_info = []
                                                            try:
                                                                json_step_data = json.dumps(i.data_json)
                                                                json_step_data = json.loads(json_step_data)
                                                            except Exception as ex:
                                                                print(ex)
                                                                return {'result': 'ER', 'messageText': 'Json ER!'}
                                                            try:
                                                                json_step_data = eval(json_step_data)
                                                            except Exception as ex:
                                                                return {'result': 'ER', 'messageText': 'Json ER!'}
                                                            arr_step.append(json_step_data)
                                                            for nn in range(len(arr_step)):
                                                                print(arr_step[nn])
                                                                arr_step_totle = []
                                                                json_info_step2 = {}
                                                                if 'step_detail' in arr_step[nn]:
                                                                    for s in range(len(arr_step[nn]['step_detail'])):
                                                                        for y in range(len(arr_step[nn]['step_detail'][s]['activity_code'])):
                                                                            if arr_step[nn]['step_detail'][s]['activity_code'][y] == 'A03':
                                                                                json_info_step = {}
                                                                                json_info_step['step_num'] = arr_step[nn]['step_num']
                                                                                json_info_step['one_email'] = arr_step[nn]['step_detail'][s]['one_email']
                                                                                json_info_step['activity_status'] = arr_step[nn]['step_detail'][s]['activity_status'][y]

                                                                                arr_step_totle.append(json_info_step)
                                                                                # json_info_step['info'] = arr_step_totle
                                                                                # print(json_step_data[nn]['step_detail'][s]['activity_status'])

                                                                                if arr_step[nn]['step_detail'][s]['activity_status'][y] == 'Complete':
                                                                                    json_info_step2['step_status'] = 'Complete'
                                                                                elif arr_step[nn]['step_detail'][s]['activity_status'][y] == 'Approve':
                                                                                    json_info_step2['step_status'] = 'Complete'
                                                                                else:
                                                                                    try:
                                                                                        json_info_step2['step_status']
                                                                                    except Exception as ex:
                                                                                        json_info_step2['step_status'] = 'Incomplete'

                                                                    json_info_step2['step_info'] = arr_step_totle
                                                                    arr_step_info.append(json_info_step2)

                                                                    json_sky['file_user_status_detail'] = arr_step_info
                                                            try:

                                                                json_sky['step_info'] = arr_step
                                                            except Exception as ex:
                                                                print(ex)

                                                        arr_get_sid.append(json_sky)
                                                except Exception as ex:
                                                    print(ex)
                                                    return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
                else:
                    for l in range(len(arr_get[n]['data_json'])):
                        if 'step_detail' in arr_get[n]['data_json'][l]:
                            for o in range(len(arr_get[n]['data_json'][l]['step_detail'])):
                                if 'one_email' in arr_get[n]['data_json'][l]['step_detail'][o]:
                                    arrjson_data = {}
                                    arr_data_json = []
                                    for s in range(len(arr_get[n]['data_json'][l]['step_detail'][o]['activity_code'])):
                                        try:
                                            activity_code = arr_get[n]['data_json'][l]['step_detail'][o]['activity_code'][s]
                                        except Exception as ex:
                                            print(ex)
                                            activity_code = ''
                                        if activity_code == "A03":
                                            sha512encode_thai_email = hashlib.sha512(str(arr_get[n]['data_json'][l]['step_detail'][o]['one_email']).encode('utf-8')).hexdigest()
                                            if self.thai_email == arr_get[n]['data_json'][l]['step_detail'][o]['one_email']:
                                                try:
                                                    for u in paper_lesssender.query.filter_by(step_data_sid=arr_get[n]['sid']).order_by((paper_lesssender.id).desc()).all():

                                                        json_sky = {}
                                                        json_sky['send_time'] = u.send_time
                                                        json_sky['send_time_string'] = str(u.send_time).split('+')[0]
                                                        json_sky['status'] = u.status
                                                        json_sky['sender_name'] = u.sender_name
                                                        json_sky['sender_email'] = u.sender_email
                                                        json_sky['sender_position'] = u.sender_position
                                                        json_sky['file_id'] = u.file_id
                                                        json_sky['result'] = 'OK'
                                                        json_sky['file_name'] = u.file_name
                                                        json_sky['tracking_id'] = u.tracking_id
                                                        json_sky['step_code'] = u.step_code
                                                        json_sky['step_data_sid'] = u.step_data_sid
                                                        sha512encode = hashlib.sha512(str(u.step_data_sid).encode('utf-8')).hexdigest()
                                                        sha512encode_OneBill = hashlib.sha512('P7Rw2h5GUVE2LpbVNRBO'.encode('utf-8')).hexdigest()
                                                        url_sendtochat = login_Page + sha512encode + "&todo=" + sha512encode_OneBill
                                                        json_sky['url_sign'] = url_sendtochat
                                                        result_resource = []
                                                        for i in paper_lesstransactionChain.query.filter_by(f_sid=u.step_data_sid).order_by((paper_lesstransactionChain.f_id).desc()).all():
                                                            json_data_result = {}
                                                            json_data_result['Account'] = eval(i.f_userAccount)['email_thai']
                                                            for y in range(len(json_data_result['Account'])):
                                                                sha512encode_account = hashlib.sha512(str(json_data_result['Account'][y]).encode('utf-8')).hexdigest()
                                                                json_data_result['Account'][y] = sha512encode_account
                                                            if self.thai_email in json_data_result['Account']:
                                                                json_data_result = {}
                                                                json_data_result['order'] = i.f_row
                                                                json_data_result['result'] = 'OK'
                                                                json_data_result['file_id'] = i.f_file_id
                                                                json_data_result['transactionId'] = i.f_transactionId
                                                                json_data_result['datetime'] = i.f_timestamp
                                                                json_data_result['datetime_string'] = str(i.f_timestamp).split('+')[0]
                                                                json_data_result['user_id'] = eval(i.f_metadate)['metadata']['user_id']
                                                                json_data_result['userAccount'] = str(i.f_userAccount)
                                                            else:
                                                                json_data_result = {}
                                                                json_data_result['result'] = 'ER'
                                                            result_resource.append(json_data_result)
                                                        json_sky['resource_OneChain'] = result_resource
                                                        for j in paper_lessdocument.query.filter_by(step_id=arr_get[n]['sid']).all():
                                                            json_sky['document_Id'] = j.document_id
                                                        for y in paper_lesspdf.query.filter_by(fid=u.file_id).all():
                                                            if y.hash_sign != None or y.hash_sign == "":
                                                                json_sky['file_status'] = 'Complete'
                                                            else:
                                                                json_sky['file_status'] = 'Incomplete'
                                                        try:
                                                            json_sky['file_user_status'] = arr_get[n]['data_json'][l]['step_detail'][o]['activity_status'][s]
                                                        except Exception as ex:
                                                            return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
                                                        arr_step = []
                                                        for i in paper_lessdatastep.query.filter_by(sid=json_sky['step_data_sid']).order_by((paper_lessdatastep.id).desc()).all():
                                                            arr_step_info = []
                                                            try:
                                                                json_step_data = json.dumps(i.data_json)
                                                                json_step_data = json.loads(json_step_data)
                                                            except Exception as ex:
                                                                print(ex)
                                                                return {'result': 'ER', 'messageText': 'Json ER!'}
                                                            try:
                                                                json_step_data = eval(json_step_data)
                                                            except Exception as ex:
                                                                return {'result': 'ER', 'messageText': 'Json ER!'}
                                                            for o in range(len(json_step_data)):
                                                                arr_step.append(json_step_data[o])
                                                            for nn in range(len(arr_step)):

                                                                arr_step_totle = []
                                                                json_info_step2 = {}
                                                                if 'step_detail' in json_step_data[nn]:
                                                                    for s in range(len(json_step_data[nn]['step_detail'])):
                                                                        for y in range(len(json_step_data[nn]['step_detail'][s]['activity_code'])):
                                                                            if json_step_data[nn]['step_detail'][s]['activity_code'][y] == 'A03':
                                                                                json_info_step = {}
                                                                                json_info_step['step_num'] = json_step_data[nn]['step_num']
                                                                                json_info_step['one_email'] = json_step_data[nn]['step_detail'][s]['one_email']
                                                                                json_info_step['activity_status'] = json_step_data[nn]['step_detail'][s]['activity_status'][y]

                                                                                arr_step_totle.append(json_info_step)
                                                                                # json_info_step['info'] = arr_step_totle
                                                                                # print(json_step_data[nn]['step_detail'][s]['activity_status'])

                                                                                if arr_step[nn]['step_detail'][s]['activity_status'][y] == 'Complete':
                                                                                    json_info_step2['step_status'] = 'Complete'
                                                                                elif arr_step[nn]['step_detail'][s]['activity_status'][y] == 'Approve':
                                                                                    json_info_step2['step_status'] = 'Complete'
                                                                                else:
                                                                                    try:
                                                                                        json_info_step2['step_status']
                                                                                    except Exception as ex:
                                                                                        json_info_step2['step_status'] = 'Incomplete'

                                                                    json_info_step2['step_info'] = arr_step_totle
                                                                    arr_step_info.append(json_info_step2)

                                                                    json_sky['file_user_status_detail'] = arr_step_info
                                                            try:

                                                                json_sky['step_info'] = arr_step
                                                            except Exception as ex:
                                                                print(ex)

                                                        arr_get_sid.append(json_sky)
                                                except Exception as ex:
                                                    print(ex)
                                                    return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}


            if len(arr_get_sid) != 0:
                return {'result': 'OK', 'messageText': arr_get_sid,'status_Code':200}
            else:
                return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}

        except Exception as ex:
            return {'result': 'ER', 'messageText': str(ex)}

    def select_recep_chat(self,email,string):
        self.email = email
        self.string = string
        try:
            arr_get_sid=[]
            json_data = {}
            arr_get=[]
            for u in paper_lessdatastep.query.all():
                sha512encode = hashlib.sha512(str(u.sid).encode('utf-8')).hexdigest()
                if self.string == sha512encode:
                    json_data['id'] = u.id
            for k in paper_lessdatastep.query.filter_by(id=json_data['id']).all():
                json_sky = {}
                json_sky['data_json'] = eval(k.data_json)
                json_sky['sid'] = k.sid
                json_sky['update_time'] = k.update_time
                arr_get.append(json_sky)
            for n in range(len(arr_get)):
                for l in range(len(arr_get[n]['data_json'])):
                    if 'step_detail' in arr_get[n]['data_json'][l]:
                        for o in range(len(arr_get[n]['data_json'][l]['step_detail'])):
                            if 'one_email' in arr_get[n]['data_json'][l]['step_detail'][o]:
                                arrjson_data = {}
                                arr_data_json = []
                                for s in range(len(arr_get[n]['data_json'][l]['step_detail'][o]['activity_code'])):
                                    if arr_get[n]['data_json'][l]['step_detail'][o]['activity_code'][s] == "A03":

                                        if self.email == arr_get[n]['data_json'][l]['step_detail'][o]['one_email']:
                                            for u in paper_lesssender.query.filter_by(step_data_sid=arr_get[n]['sid']).order_by((paper_lesssender.id).desc()).all():
                                                json_sky = {}
                                                json_sky['send_time'] = u.send_time
                                                json_sky['send_time_string'] = str(u.send_time).split('+')[0]
                                                json_sky['status'] = u.status
                                                json_sky['sender_name'] = u.sender_name
                                                json_sky['sender_email'] = u.sender_email
                                                json_sky['sender_position'] = u.sender_position
                                                json_sky['file_id'] = u.file_id
                                                json_sky['result'] = 'OK'
                                                json_sky['file_name'] = u.file_name
                                                json_sky['tracking_id'] = u.tracking_id
                                                json_sky['step_code'] = u.step_code
                                                json_sky['step_data_sid'] = u.step_data_sid
                                                for j in paper_lessdocument.query.filter_by(step_id=u.step_data_sid).all():
                                                        json_sky['document_Id'] = j.document_id
                                                for y in paper_lesspdf.query.filter_by(fid=u.file_id).all():
                                                    if y.hash_sign != None or y.hash_sign == "":
                                                        json_sky['file_status'] = 'Complete'
                                                    else:
                                                        json_sky['file_status'] = 'Incomplete'
                                                json_sky['file_user_status'] = arr_get[n]['data_json'][l]['step_detail'][o]['activity_status'][s]
                                                arr_step = []

                                                for i in paper_lessdatastep.query.filter_by(sid=json_sky['step_data_sid']).order_by((paper_lessdatastep.id).desc()).all():
                                                    arr_step_info = []
                                                    json_step_data = json.dumps(i.data_json)
                                                    json_step_data = json.loads(json_step_data)
                                                    json_step_data = eval(json_step_data)
                                                    for o in range(len(json_step_data)):
                                                        arr_step.append(json_step_data[o])
                                                    for nn in range(len(arr_step)):
                                                        arr_step_totle = []

                                                        json_info_step2 = {}
                                                        if 'step_detail' in json_step_data[nn]:
                                                            for s in range(len(json_step_data[nn]['step_detail'])):
                                                                for y in range(len(json_step_data[nn]['step_detail'][s]['activity_code'])):

                                                                    if json_step_data[nn]['step_detail'][s]['activity_code'][y] == 'A03':
                                                                        json_info_step = {}
                                                                        json_info_step['step_num'] = arr_step[nn]['step_num']
                                                                        json_info_step['one_email'] = json_step_data[nn]['step_detail'][s]['one_email']
                                                                        json_info_step['activity_status'] = json_step_data[nn]['step_detail'][s]['activity_status'][y]
                                                                        arr_step_totle.append(json_info_step)
                                                                        # json_info_step['info'] = arr_step_totle
                                                                if 'Complete' in json_step_data[nn]['step_detail'][s]['activity_status']:
                                                                    json_info_step2['step_status'] = 'Complete'
                                                                else:
                                                                    try:
                                                                        json_info_step2['step_status']
                                                                    except Exception as ex:
                                                                        json_info_step2['step_status'] = 'Incomplete'
                                                            json_info_step2['step_info'] = arr_step_totle
                                                            arr_step_info.append(json_info_step2)
                                                            json_sky['file_user_status_detail'] = arr_step_info

                                                    json_sky['step_info'] = arr_step

                                                arr_get_sid.append(json_sky)


            if len(arr_get_sid) != 0:
                return {'result': 'OK', 'messageText': arr_get_sid,'status_Code':200}
            else:
                return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
        except Exception as ex:
            return {'result': 'ER', 'messageText': str(ex)}

    def select_qrCodeImage(self,hash_qrCode):
        self.hash_qrCode = hash_qrCode
        json = {}
        res_select = paper_lessmail.query.filter_by(qrcode_hash=self.hash_qrCode).first()
        json['qrcode_string'] = res_select.qrcode_string
        return json

    def select_refCode(self,sid):
        self.sid = sid
        arr_json = []
        for i in paper_lessrefCode.query.all():
            json = {}
            json['sid'] = i.sid
            json['ref_Code'] = i.ref_Code
            json['ref_Detail'] = eval(i.ref_Detail)
            arr_json.append(json)
        for u in range(len(arr_json)):
            if self.sid == arr_json[u]['sid']:
                for n in range(len(arr_json[u]['ref_Detail'])):
                    json_to = {}
                    arr_json_to = []
                    if arr_json[u]['ref_Detail'][n]['ref_Code'] != None:
                        print(arr_json[u]['ref_Detail'][n]['ref_Code'])
                        res_select = paper_lessrefCode.query.filter_by(ref_Code=arr_json[u]['ref_Detail'][n]['ref_Code']).first()
                        json_to['ref_Code'] = res_select.ref_Code
                        json_to['ref_Detail'] = res_select.ref_Detail
                        arr_json_to.append(json_to)
        return arr_json

    def select_transactionTaskChat(self,jsonresult):
        self.jsonresult = jsonresult
        self.sid = self.jsonresult['msg']['sid']
        self.stepNum = self.jsonresult['msg']['stepNum']

        arr_data = []
        for i in paper_lesstransactionTask.query.filter_by(task_sidCode=self.sid,task_stepnum=self.stepNum,task_status='Y').order_by((paper_lesstransactionTask.task_order).asc()).all():
            json_data = {}
            json_data['sidCode'] = i.task_sidCode
            json_data['task_id'] = i.task_uid
            json_data['state_id'] = i.task_state_id
            json_data['emailUser'] = i.task_emailUser
            json_data['step_num'] = i.task_stepnum
            arr_data.append(json_data)
        return arr_data


    def select_transactionChat(self,sid):
        self.sid = sid
        arr_json_to = []
        for i in paper_lesstransactionChat.query.filter_by(sidCode=self.sid).order_by((paper_lesstransactionChat.OrderResult).asc()).all():
            json_to = {}
            tmp_query_TaskChat = paper_lesstransactionTask.query.filter(paper_lesstransactionTask.task_sidCode==self.sid,paper_lesstransactionTask.task_emailUser==i.email_User,paper_lesstransactionTask.task_stepnum==i.stepNum,paper_lesstransactionTask.task_order==i.OrderResult).first()
            if tmp_query_TaskChat != None:
                json_to['messageTask_Chat'] = tmp_query_TaskChat.task_message
                json_to['messageTask_Id'] = tmp_query_TaskChat.task_id
            else:
                json_to['messageTask_Chat'] = None
                json_to['messageTask_Id'] = None
            json_to['transactionCode'] = i.transactionCode
            json_to['email_User'] = i.email_User
            json_to['statusSign'] = i.statusSign
            json_to['stepNum'] = i.stepNum
            json_to['datetime'] = i.timeStamp
            json_to['datetime_string'] = str(i.timeStamp).split('+')[0]
            json_to['statusId'] = i.statusId
            json_to['sidCode'] = i.sidCode
            json_to['url_Sign'] = i.urlSign
            json_to['propertyChat'] = i.propertyChat
            json_to['id_chat'] = i.id_chat
            arr_json_to.append(json_to)
        return (arr_json_to)

    def select_transactioneMail_next(self,json_result):
        self.json_result = json_result
        self.sid = self.json_result['msg']['sid']
        self.stepNum = self.json_result['msg']['stepNum']
        self.NextStepNum = int(self.stepNum)  + 1
        arr_json_to = []
        arr_transactionCode = []
        for i in paper_lesstransactionMail.query.filter_by(sidCode=self.sid,stepNum=str(self.NextStepNum)).all():
            json_to = {}
            json_to['transactionCode'] = str(i.transactionCode)
            json_to['email_User'] = i.email_User
            json_to['statusSign'] = i.statusSign
            json_to['stepNum'] = i.stepNum
            json_to['datetime'] = i.timeStamp
            json_to['datetime_string'] = str(i.timeStamp).split('+')[0]
            json_to['statusId'] = i.statusId
            json_to['sidCode'] = i.sidCode
            json_to['sendMail'] = i.sendMail
            json_to['urlSign'] = i.urlSign
            json_to['propertyMail'] = i.propertyMail
            arr_json_to.append(json_to)
        for o in range(len(arr_json_to)):
            if arr_json_to[o]['sendMail'] == 'true':
                arr_transactionCode.append({'propertyMail':arr_json_to[o]['propertyMail'],'urlSign':arr_json_to[o]['urlSign'],'email_User':arr_json_to[o]['email_User'],'stepNum':arr_json_to[o]['stepNum'],'sidCode':arr_json_to[o]['sidCode'],'transactionCode':str(arr_json_to[o]['transactionCode'])})
        return (arr_transactionCode)

    def select_emailFromProfileUser(self,emailUser):
        self.emailUser = emailUser
        try:
            result_emailProfile = paper_lessuserProfile.query.filter_by()
        except expression as identifier:
            pass

    def select_transactionChat_before(self,stepnum_,sidcode_):
        self.stepnum_ = stepnum_
        self.sidcode_ = sidcode_
        # ,stepNum=str(self.stepnum_),email_User=self.email_
        list_result = []
        try:
            for i in paper_lesstransactionChat.query.filter_by(sidCode=self.sidcode_,stepNum=str(self.stepnum_)).all():
                json_result = {}
                json_result['email_User'] = i.email_User
                list_result.append(json_result)
            return {'result':'OK','messageText':list_result}
        except Exception as e:
            return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล','status_Code':200,'messageER':str(e)}


    def select_transactionChat_next(self,json_result):
        self.json_result = json_result
        self.sid = self.json_result['msg']['sid']
        self.stepNum = self.json_result['msg']['stepNum']
        self.NextStepNum = int(self.stepNum) + 1
        self.statusSign = self.json_result['msg']['statusSign']
        arr_json_to = []
        arr_transactionCode = []
        for i in paper_lesstransactionChat.query.filter_by(sidCode=self.sid,stepNum=str(self.NextStepNum)).all():
            json_to = {}
            result_tracking = paper_lesstrack.query.filter(paper_lesstrack.step_data_sid==self.sid).first()
            if result_tracking != None:
                json_to['tracking'] = str(result_tracking.tracking)
            result_sender_details = paper_lesssender.query.filter(paper_lesssender.step_data_sid==self.sid).first()
            if result_sender_details != None:
                json_to['file_name'] = str(result_sender_details.file_name)
            json_to['transactionCode'] = str(i.transactionCode)
            json_to['email_User'] = i.email_User
            json_to['statusSign'] = i.statusSign
            json_to['stepNum'] = i.stepNum
            json_to['datetime'] = i.timeStamp
            json_to['datetime_string'] = str(i.timeStamp).split('+')[0]
            json_to['statusId'] = i.statusId
            json_to['sidCode'] = i.sidCode
            json_to['sendChat'] = i.sendChat
            json_to['urlSign'] = i.urlSign
            arr_json_to.append(json_to)

        for o in range(len(arr_json_to)):
            if arr_json_to[o]['sendChat'] == 'true':
                arr_transactionCode.append({'file_name':arr_json_to[o]['file_name'],'tracking_id':arr_json_to[o]['tracking'],'statusSign':self.statusSign,'email_User':arr_json_to[o]['email_User'],'stepNum':arr_json_to[o]['stepNum'],'sidCode':arr_json_to[o]['sidCode'],'transactionCode':str(arr_json_to[o]['transactionCode'])})

        return (arr_transactionCode)

    def select_transactionChat_next_v2(self,json_result):
        self.json_result = json_result
        self.sid = self.json_result['msg']['sid']
        self.stepNum = self.json_result['msg']['stepNum']
        self.NextStepNum = int(self.stepNum) +1
        self.statusSign = self.json_result['msg']['statusSign']
        arr_json_to = []
        arr_transactionCode = []
        for i in paper_lesstransactionChat.query.filter_by(sidCode=self.sid,stepNum=str(self.NextStepNum)).all():
            json_to = {}
            result_tracking = paper_lesstrack.query.filter(paper_lesstrack.step_data_sid==self.sid).first()
            if result_tracking != None:
                json_to['tracking'] = str(result_tracking.tracking)
            result_sender_details = paper_lesssender.query.filter(paper_lesssender.step_data_sid==self.sid).first()
            if result_sender_details != None:
                json_to['file_name'] = str(result_sender_details.file_name)
            json_to['transactionCode'] = str(i.transactionCode)
            json_to['email_User'] = i.email_User
            json_to['statusSign'] = i.statusSign
            json_to['stepNum'] = i.stepNum
            json_to['datetime'] = i.timeStamp
            json_to['datetime_string'] = str(i.timeStamp).split('+')[0]
            json_to['statusId'] = i.statusId
            json_to['sidCode'] = i.sidCode
            json_to['sendChat'] = i.sendChat
            json_to['urlSign'] = i.urlSign
            arr_json_to.append(json_to)

        for o in range(len(arr_json_to)):
            if arr_json_to[o]['sendChat'] == 'true':
                arr_transactionCode.append({'file_name':arr_json_to[o]['file_name'],'tracking_id':arr_json_to[o]['tracking'],'statusSign':self.statusSign,'email_User':arr_json_to[o]['email_User'],'stepNum':arr_json_to[o]['stepNum'],'sidCode':arr_json_to[o]['sidCode'],'transactionCode':str(arr_json_to[o]['transactionCode'])})

        return (arr_transactionCode)

    def select_UrlSign_SidCodeEmailUser(self,sidCode,emailUser,step_num):
        self.sidCode = sidCode
        self.emailUser = emailUser
        self.step_num = step_num
        result_UrlSign = paper_lesstransactionChat.query.filter_by(sidCode=self.sidCode,email_User=self.emailUser,stepNum=str(self.step_num),statusSign='N').first()
        if result_UrlSign != None:
            result_propertyChat = result_UrlSign.propertyChat
            result_UrlSign = result_UrlSign.urlSign
            return result_UrlSign,result_propertyChat
        else:
            result_propertyChat = None
            result_UrlSign = url_paperless
            return result_UrlSign,result_propertyChat

    def select_UserProfile(self,username):
        self.username = username
        result_json = {}
        try:
            res_select = paper_lessuserProfile.query.filter_by(p_username=self.username).first()
            result_json['webhook'] = res_select.p_webHook
            result_json['updateUser_Time'] = res_select.p_updateTime
            result_json['updateUser_TimeString'] = str(res_select.p_updateTime).split('+')[0]
            result_json['Username'] = res_select.p_username
            result_json['signString'] = res_select.p_sign
            result_json['emailUser'] = res_select.p_emailUser
            return {'result': 'OK', 'messageText': result_json,'status_Code':200,'messageER':None}
        except Exception as ex:
            return {'result': 'ER', 'messageText': None,'status_Code':200,'messageER':'ไม่พบข้อมูล ' + str(ex)}

    def select_UserProfile_v1(self,username):
        self.username = username
        result_json = {}
        try:
            res_select = paper_lessuserProfile.query.filter_by(p_username=self.username).first()
            if res_select != None:
                tmp_statusca = None
                result_json['webhook'] = res_select.p_webHook
                result_json['updateUser_Time'] = res_select.p_updateTime
                result_json['updateUser_TimeString'] = str(res_select.p_updateTime).split('+')[0]
                result_json['Username'] = res_select.p_username
                result_json['signString'] = res_select.p_sign
                result_json['emailUser'] = res_select.p_emailUser
                result_json['permission_id'] = res_select.permission_id
                if res_select.p_signca == 'Y':
                    tmp_statusca = 'พบข้อมูล CA'
                else:
                    tmp_statusca = 'ไม่พบข้อมูล CA'
                result_json['signCA_status'] = res_select.p_signca
                result_json['signCA'] = tmp_statusca
                if res_select.p_options != None:
                    try:
                        result_json['options'] = eval(res_select.p_options)
                    except Exception as e:
                        result_json['options'] = None
                else:
                    result_json['options'] = None
                return {'result': 'OK', 'messageText': result_json}
            else:
                return {'result': 'ER', 'messageText': 'data not found'}
        except Exception as ex:
            return {'result': 'ER', 'messageText': str(ex)}

    def select_UserBizAndTax(self,userId,Tax):
        self.userId = userId
        self.Tax    = Tax
        res_json = {}
        biz_info = []
        jsonData = {}
        try:
            res_select = paper_lessbizLogin.query.filter_by(account_id=self.userId).first()
            res_json = eval(res_select.biz_information)
            for i in range(len(res_json)):
                if self.Tax == res_json[i]['getbiz'][0]['id_card_num']:
                    resjsonOneBiz = res_json[i]['getbiz']
                    jsonData = {
                        'id':res_json[i]['getbiz'][0]['id'],
                        'first_name_th':res_json[i]['getbiz'][0]['first_name_th'],
                        'first_name_eng':res_json[i]['getbiz'][0]['first_name_eng'],
                        'id_card_type':res_json[i]['getbiz'][0]['id_card_type'],
                        'id_card_num':res_json[i]['getbiz'][0]['id_card_num'],
                        'role_level':res_json[i]['getrole'][0]['role_level'],
                        'role_name':res_json[i]['getrole'][0]['name']
                    }
                    biz_info.append(jsonData)
                    res = {'result': 'OK', 'messageText': {'bizinfo':biz_info,'one_biz_detail':resjsonOneBiz},'status_Code':200}
            return res
            # return {'result': 'OK', 'messageText': {'bizinfo':biz_info,'one_biz_detail':resjsonOneBiz},'status_Code':200}
        except Exception as ex:
            return {'result': 'ER', 'messageText':None ,'status_Code':200,'messageER':'data not found && found ' + str(ex)}

    def select_UserBiz(self,userId):
        self.userId = userId
        result_json = {}
        getBiz_Json = {}
        try:
            res_select = paper_lessbizLogin.query.filter_by(account_id=self.userId).first()
            if res_select != None:
                try:
                    result_json['biz_detail'] = eval(res_select.biz_information)
                except Exception as ex:
                    result_json['biz_detail'] = "Not Found Data!"
                biz_info = []
                if 'biz_detail' in result_json:
                    for i in range(len(result_json['biz_detail'])):
                        jsonData = {
                            'id':result_json['biz_detail'][i]['getbiz'][0]['id'],
                            'first_name_th':result_json['biz_detail'][i]['getbiz'][0]['first_name_th'],
                            'first_name_eng':result_json['biz_detail'][i]['getbiz'][0]['first_name_eng'],
                            'id_card_type':result_json['biz_detail'][i]['getbiz'][0]['id_card_type'],
                            'id_card_num':result_json['biz_detail'][i]['getbiz'][0]['id_card_num'],
                            'role_level':result_json['biz_detail'][i]['getrole'][0]['role_level'],
                            'role_name':result_json['biz_detail'][i]['getrole'][0]['name']
                        }
                        biz_info.append(jsonData)
                else:
                    biz_info = []
                return {'result': 'OK', 'messageText': {'bizinfo':biz_info,'one_biz_detail':result_json['biz_detail']},'status_Code':200}
            else:
                return {'result': 'ER', 'messageText': 'Not Found Data!','status_Code':200}
        except Exception as ex:
            return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล','status_Code':200}

    def select_ForWebHook(self,sidCode):
        self.sidCode = sidCode
        result_json = {}
        try:
            res_select = paper_lesssender.query.filter_by(step_data_sid=self.sidCode).first()
            res_selectDocument = paper_lessdocument.query.filter_by(step_id=self.sidCode).first()
            res_selectdataDocument = paper_lessdatastep.query.filter_by(sid=self.sidCode).first()
            res_selectStoragefile = paper_lesstransactionfile.query.filter_by(folder_name=res_selectDocument.attempted_folder).first()
            res_select_userProfile = paper_lessuserProfile.query.filter_by(p_username=res_select.send_user).first()
            res_basePdf = paper_lesspdf.query.filter_by(fid=res_selectDocument.fileid).first()
            result_json['webHook'] = res_select.template_webhook
            result_json['email_center'] = res_select.email_center
            result_json['userSender'] = res_select.sender_name
            result_json['emailSender'] = res_select.sender_email
            result_json['fileName'] = res_select.file_name
            result_json['trackingId'] = res_select.tracking_id
            result_json['sender_email'] = res_select.sender_email
            result_json['documentId'] = res_selectDocument.document_id
            result_json['datetime'] = str(res_select.send_time)
            result_json['attchfile_path'] = None
            result_json['attchfile_json'] = None
            result_json['attempted_folder'] = res_selectDocument.attempted_folder
            if res_selectStoragefile != None:
                result_json['attchfile_path'] = str(res_selectStoragefile.pathfolder)
                try:
                    result_json['attchfile_json'] = eval(str(res_selectStoragefile.json_data))
                except Exception as e:
                    result_json['attchfile_json'] = None
            tmpdata = data_doc(res_selectDocument.data_document)
            if tmpdata['result'] == 'OK':
                tmpdataDoc = tmpdata['messageText']
            else:
                tmpdataDoc = None
            result_json['data_document'] = tmpdataDoc
            result_json['business'] = res_selectdataDocument.biz_info
            if result_json['business'] != None or result_json['business'] != 'None' or result_json['business'] != '':
                result_json['business'] = eval(result_json['business'])
                if result_json['business'] != None:
                    if 'business' in result_json:
                        if 'data_details_biz' in result_json['business']:
                            del result_json['business']['data_details_biz']
            # result_json['document_type'] = res_selectDocument.documentType
            result_json['documentTypeDetail'] = eval(res_selectDocument.documentJson)
            if res_basePdf.string_sign != None:
                result_json['PDF_String'] = res_basePdf.string_sign
            else:
                result_json['PDF_String'] = res_basePdf.string_pdf
            try:
                result_json['body'] = eval(res_selectDocument.options_page)['body_text']
            except Exception as e:
                result_json['body'] = None
            
            return {'result': 'OK', 'messageText': result_json,'status_Code':200}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            print(str(ex), ' ex')
            return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล','status_Code':200}
        finally:
            db.session.close()

    def select_LoginUser(self,user_Id):
        self.user_Id = user_Id
        result_json = {}
        try:
            res_select = paper_lesslogin.query.filter_by(account_id=self.user_Id).first()
            if res_select is not None:
                return {'result': 'OK', 'messageText': None,'status_Code':200}
            else:
                return {'result': 'ER', 'messageText': None,'status_Code':200}
        except Exception as ex:
            return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล','status_Code':200}

    def select_Loglogin_ForLoingUrl(self,ipz,todo):
        self.ipz = ipz
        self.todo = todo
        for i in paper_lesstransactionLogin.query.filter(paper_lesstransactionLogin.ipaddress == self.ipz).all():
            if self.ipz == i.ipaddress:
                username = i.username
                userId = i.userid
                for y in paper_lesstransactionLogin.query.filter_by(username=username,userid=userId,ipaddress=self.ipz).all():
                    transaction = hashlib.sha512(str(y.transactionCode).encode('utf-8')).hexdigest()
                    print(transaction)
                    if self.todo == transaction:
                        Username = y.username
                        UserId = y.userid
                        emailUser = y.email
                        return {'result': 'OK', 'messageText': {'username':Username,'userId':UserId,'emailUser':emailUser},'status_Code':200,'messageER':None}
        return {'result': 'ER', 'messageText': None,'status_Code':200,'messageER':'Login Fail!'}

    def select_Loglogin_CheckSID(self,sid_hash):
        self.sid_hash = sid_hash
        for i in paper_lesssender.query.order_by(desc(paper_lesssender.send_time)).all():
            hash_sid = hashlib.sha512(str(i.step_data_sid).encode('utf-8')).hexdigest()
            if self.sid_hash == hash_sid:
                return {'result': 'OK', 'messageText': None,'status_Code':200,'messageER':None}
        return {'result': 'ER', 'messageText': None,'status_Code':200,'messageER':'Sid Fail!'}

    def generate_tokenPaperless(self,username,user_email,typeToken='paperless'):
        self.username = username
        self.user_email = user_email
        self.typeToken = typeToken
        iat_time = time.time()
        exp_time = time.time() + 86400
        jsonData = {
            "iat":      int(iat_time),
            "username": self.username,
            "type":     self.typeToken,
            "email":    self.user_email,
            "exp":      int(exp_time)
        }
        jwtencode = encode(jsonData)
        return jwtencode

    def select_LoginUser(self,username,userId,emailUser):
        self.username = str(username).lower()
        self.userId = userId
        self.emailUser = emailUser
        result_Login = paper_lesslogin.query.filter_by(account_id=self.userId,username=self.username).first()
        if result_Login != None:
            decodes = result_Login.access_token
            decodes = decodes.split('.')
            decodes[2] = decodes[2][:-32] ##[:-32] ลบข้อมูลนับจากหลังไป 32 ตัวอักษร
            decodes = decodes[1]+'.'+decodes[2]+'.'+decodes[0]
            try:
                decodes = jwt.decode(decodes,'bill',algorithms='HS256')
                result_check = {'result':'OK','messageText':decodes}
            except jwt.ExpiredSignatureError:
                print('ExpiredSignatureError!')
                result_check = {'result':'ER'}
            except jwt.InvalidTokenError:
                print('InvalidTokenError!')
                result_check = {'result':'ER'}
            # result_check = check_Ref_Token(str(result_Login.access_token))
        else:
            return {'result': 'ER', 'messageText': None,'status_Code':200,'messageER':None}
        if result_check['result'] == 'OK':
            result_refToken = select().generate_tokenPaperless(result_check['messageText']['username'],result_check['messageText']['email'])
            one_accesstoken = result_Login.one_access_token
            paperless_access_token = result_refToken
            one_result_data = eval(result_Login.citizen_data)
            getBuz = eval(result_Login.biz_information)
            biz_info = []
            if 'biz_detail' in getBuz:
                for i in range(len(getBuz['biz_detail'])):
                    jsonData = {
                        'id':getBuz['biz_detail'][i]['getbiz'][0]['id'],
                        'first_name_th':getBuz['biz_detail'][i]['getbiz'][0]['first_name_th'],
                        'first_name_eng':getBuz['biz_detail'][i]['getbiz'][0]['first_name_eng'],
                        'id_card_type':getBuz['biz_detail'][i]['getbiz'][0]['id_card_type'],
                        'id_card_num':getBuz['biz_detail'][i]['getbiz'][0]['id_card_num']
                    }
                    biz_info.append(jsonData)
            else:
                biz_info = []
            enaccess = endcode_access(one_accesstoken)
            return {'result':'OK','enaccess':enaccess,'one_access_token':one_accesstoken,'paperless_access_token':paperless_access_token,'one_result_data':one_result_data,'one_biz_detail':biz_info,'username':result_check['messageText']['username']}
        else:
            result_refToken = select().generate_tokenPaperless(self.username,self.emailUser)
            result_Login.access_token = result_refToken
            one_accesstoken = result_Login.one_access_token
            paperless_access_token = result_refToken
            one_result_data = eval(result_Login.citizen_data)
            getBuz = eval(result_Login.biz_information)
            biz_info = []
            if 'biz_detail' in getBuz:
                for i in range(len(getBuz['biz_detail'])):
                    jsonData = {
                        'id':getBuz['biz_detail'][i]['getbiz'][0]['id'],
                        'first_name_th':getBuz['biz_detail'][i]['getbiz'][0]['first_name_th'],
                        'first_name_eng':getBuz['biz_detail'][i]['getbiz'][0]['first_name_eng'],
                        'id_card_type':getBuz['biz_detail'][i]['getbiz'][0]['id_card_type'],
                        'id_card_num':getBuz['biz_detail'][i]['getbiz'][0]['id_card_num']
                    }
                    biz_info.append(jsonData)
            else:
                biz_info = []
            enaccess = endcode_access(one_accesstoken)
            return {'result':'OK','enaccess':enaccess,'one_access_token':one_accesstoken,'paperless_access_token':paperless_access_token,'one_result_data':one_result_data,'one_biz_detail':biz_info,'username':self.username}

    def select_LoginUrl(self,ipz,todo):
        self.ipz = ipz
        self.todo = todo
        result_json = {}
        try:
            for i in paper_lesslogin.query.all():
                sha512encode_secure_number = hashlib.sha512(str(i.secure_number).encode('utf-8')).hexdigest()
                if self.todo == sha512encode_secure_number:
                    if self.ipz == i.ipaddress:
                        result_check = check_Ref_Token(str(i.access_token))
                        if result_check['result'] == 'OK':
                            result_refToken = select().generate_tokenPaperless(result_check['messageText']['username'],result_check['messageText']['email'])
                            one_accesstoken = i.one_access_token
                            paperless_access_token = result_refToken
                            one_result_data = eval(i.citizen_data)
                            getBuz = eval(i.biz_information)
                            biz_info = []
                            if 'biz_detail' in getBuz:
                                for i in range(len(getBuz['biz_detail'])):
                                    jsonData = {
                                        'id':getBuz['biz_detail'][i]['getbiz'][0]['id'],
                                        'first_name_th':getBuz['biz_detail'][i]['getbiz'][0]['first_name_th'],
                                        'first_name_eng':getBuz['biz_detail'][i]['getbiz'][0]['first_name_eng'],
                                        'id_card_type':getBuz['biz_detail'][i]['getbiz'][0]['id_card_type'],
                                        'id_card_num':getBuz['biz_detail'][i]['getbiz'][0]['id_card_num']
                                    }
                                    biz_info.append(jsonData)
                            else:
                                biz_info = []
                            return {'result':'OK','one_access_token':one_accesstoken,'paperless_access_token':paperless_access_token,'one_result_data':one_result_data,'one_biz_detail':biz_info}
                        else:
                            return {'result': 'ER', 'messageText': None,'status_Code':200,'messageER':None}

        except Exception as ex:
            return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล','status_Code':200}

    def select_GETEmail(self,sid):
        self.sid = sid
        result_json = {}
        try:
            res_select = paper_lesssender.query.filter_by(step_data_sid=self.sid).first()
            result_json['email_Sender'] = res_select.sender_email
            if res_select is not None:
                return {'result': 'OK', 'messageText': result_json,'status_Code':200}
            else:
                return {'result': 'ER', 'messageText': None,'status_Code':200}
        except Exception as ex:
            return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล','status_Code':200}

    def select_CheckPdf_v1(self,stepDataCode,step_num):
        self.stepDataCode = stepDataCode
        self.step_num = step_num
        result_json = {}
        try:
            arrCheck = []
            res_select = paper_lessdatastep.query.filter(paper_lessdatastep.sid==self.stepDataCode).first()
            tmp_json = None
            if res_select != None:
                tmp_json = res_select.data_json
                if tmp_json != None:
                    tmp_json = eval(tmp_json)
            tmp_arr = []
            if tmp_json != None:
                if 'step_num' in tmp_json:
                    tmp_arr.append(tmp_json)
                    tmp_json = tmp_arr
                    arrCheck = []
                    json_check = {}
                    for i in range(len(tmp_json)):
                        if 'step_num' in tmp_json[i]:
                            print(tmp_json[i]['step_num'])
                            if self.step_num == tmp_json[i]['step_num']:
                                json_check = tmp_json[i]
                                if 'step_detail' in json_check:
                                    for y in range(len(json_check['step_detail'])):
                                        print(json_check['step_detail'][y])
                                        if 'activity_code' in json_check['step_detail'][y]:
                                            for k in range(len(json_check['step_detail'][y]['activity_code'])):

                                                if json_check['step_detail'][y]['activity_code'][k] == 'A03':
                                                    if json_check['step_detail'][y]['activity_status'][k] == 'Complete':
                                                        return {'result':'ER','messageText':'Complete','status_Code':200}
                                                        arrCheck.append({'result':'ER','messageText':'Complete'})
                                                    elif json_check['step_detail'][y]['activity_status'][k] == 'Approve':
                                                        arrCheck.append({'result':'ER','messageText':'Approve'})
                                                    else:
                                                        arrCheck.append({'result':'OK','messageText':None})
                            for u in range(len(arrCheck)):
                                if 'ER' == arrCheck[u]['result']:
                                    return {'result': 'ER', 'messageText': arrCheck[u]['messageText'],'status_Code':200}

                        else:
                            return {'result': 'ER', 'messageText': None,'status_Code':200,'messageER':'Not Found StepNum'}
            
            else:
                return {'result': 'ER', 'messageText': 'Step data not found','status_Code':200}
        except Exception as ex:
            return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล','status_Code':200,'messageER':str(ex)}

    def select_CheckPdf(self,stepDataCode,step_num):
        self.stepDataCode = stepDataCode
        self.step_num = step_num
        result_json = {}
        try:
            arrCheck = []
            res_select = paper_lessdatastep.query.filter_by(sid=self.stepDataCode).first()
            result_json['data_json'] = res_select.data_json
            try:
                result_json['data_json'] = eval(result_json['data_json'])
            except Exception as ex:
                result_json['data_json'] = 'non-json'
            print(result_json['data_json'])
            if 'data_json' in result_json:
                if 'step_num' in result_json['data_json']:
                    if result_json['data_json']['step_num'] == self.step_num:
                        if 'step_detail' in result_json['data_json']:
                            print(result_json['data_json'])
                            for i in range(len(result_json['data_json']['step_detail'])):
                                if 'activity_code' in result_json['data_json']['step_detail'][i]:
                                    for k in range(len(result_json['data_json']['step_detail'][i]['activity_code'])):
                                        if result_json['data_json']['step_detail'][i]['activity_code'][k] == 'A03':
                                            if result_json['data_json']['step_detail'][i]['activity_status'][k] == 'Complete':
                                                arrCheck.append({'result':'ER','messageText':'Complete'})
                                            elif result_json['data_json']['step_detail'][i]['activity_status'][k] == 'Approve':
                                                arrCheck.append({'result':'ER','messageText':'Approve'})
                                            elif result_json['data_json']['step_detail'][i]['activity_status'][k] == 'Reject':
                                                arrCheck.append({'result':'ER','messageText':'Reject'})
                                            else:
                                                arrCheck.append({'result':'OK','messageText':None})
                            # print('l')
                            for i in range(len(arrCheck)):
                                if 'ER' == arrCheck[i]['result']:
                                    return {'result': 'ER', 'messageText': arrCheck[i]['messageText'],'status_Code':200}
                            # if 'ER' in arrCheck['result']:
                            #     return {'result': 'ER', 'messageText': arrCheck['messageText'],'status_Code':200}
                            # else:
                            return {'result': 'OK', 'messageText': None,'status_Code':200}
                    else:
                        return {'result': 'ER', 'messageText': None,'status_Code':200,'messageER':'Not Found StepNum'}
                else:
                    arrCheck = []
                    json_check = {}
                    for i in range(len(result_json['data_json'])):
                        if 'step_num' in result_json['data_json'][i]:
                            print(result_json['data_json'][i]['step_num'])
                            if self.step_num == result_json['data_json'][i]['step_num']:
                                json_check = result_json['data_json'][i]
                                if 'step_detail' in json_check:
                                    for y in range(len(json_check['step_detail'])):
                                        print(json_check['step_detail'][y])
                                        if 'activity_code' in json_check['step_detail'][y]:
                                            for k in range(len(json_check['step_detail'][y]['activity_code'])):

                                                if json_check['step_detail'][y]['activity_code'][k] == 'A03':
                                                    if json_check['step_detail'][y]['activity_status'][k] == 'Complete':
                                                        arrCheck.append({'result':'ER','messageText':'Complete'})
                                                    elif json_check['step_detail'][y]['activity_status'][k] == 'Approve':
                                                        arrCheck.append({'result':'ER','messageText':'Approve'})
                                                    elif json_check['step_detail'][y]['activity_status'][k] == 'Reject':
                                                        arrCheck.append({'result':'ER','messageText':'Reject'})
                                                    else:
                                                        arrCheck.append({'result':'OK','messageText':None})
                            for u in range(len(arrCheck)):
                                if 'ER' == arrCheck[u]['result']:
                                    return {'result': 'ER', 'messageText': arrCheck[u]['messageText'],'status_Code':200}

                        else:
                            return {'result': 'ER', 'messageText': None,'status_Code':200,'messageER':'Not Found StepNum'}
                    return {'result': 'OK', 'messageText': None,'status_Code':200}
            else:
                return {'result': 'ER', 'messageText': 'Step data not found','status_Code':200}
        except Exception as ex:
            return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล','status_Code':200,'messageER':str(ex)}

    def select_geturl(self,emailUser,sidCode):
        self.emailUser = emailUser
        self.sidCode = sidCode
        try:
            result_sidCode = paper_lesssender.query.filter_by(step_data_sid=self.sidCode).first()
            if result_sidCode != None:
                res_select = paper_lesstransactionLogin.query.filter_by(email=self.emailUser).order_by(desc(paper_lesstransactionLogin.date_time)).first()
                if res_select != None:
                    generate_hash_Url = hashlib.sha512(str(res_select.transactionCode).encode('utf8')).hexdigest()
                    sha512encode = hashlib.sha512(str(self.sidCode).encode('utf-8')).hexdigest()
                    result_UrlSign = login_Page + sha512encode + "&todo=" + generate_hash_Url
                    return {'result': 'OK', 'messageText': result_UrlSign,'status_Code':200}
                else:
                    generate_hash_Url = hashlib.sha512('P7Rw2h5GUVE2LpbVNRBO'.encode('utf8')).hexdigest()
                    sha512encode = hashlib.sha512(str(self.sidCode).encode('utf-8')).hexdigest()
                    result_UrlSign = login_Page + sha512encode + "&todo=" + generate_hash_Url
                    return {'result': 'OK', 'messageText': result_UrlSign,'status_Code':200}
            else:
                return {'result': 'ER', 'messageText': 'sid Not Found!','status_Code':200}
        except Exception as ex:
            return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล','status_Code':200}

class insert:
    def insert_userprofile_v1(self,username,userid,emailthai,emailthai2,emailthai3,employee_email,taskchat=None,todo=None,doing=None,done=None,options=None,signca=None):
        self.username = username
        self.userid = userid
        self.emailthai = emailthai
        self.emailthai2 = emailthai2
        self.emailthai3 = emailthai3
        self.employee_email = str(employee_email)
        if taskchat != None:
            self.taskchat = str(taskchat)
        else:
            self.taskchat = None
        if signca != None:
            self.signca = signca
        else:
            self.signca = 'N'
        if options != None:
            self.options = options
        else:
            self.options = None
        self.todo = todo
        self.doing = doing
        self.done = done
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        try:
            with engine.connect() as connection:
                sql = ''' SELECT * FROM "tb_userProfile" where "p_username"=:tmpusername and "p_userid"=:tmpuserid ''' 
                result_select = connection.execute(text(sql), tmpusername=self.username,tmpuserid=self.userid)
                data_prfile = [dict(row) for row in result_select]
                if len(data_prfile) != 0:
                    tmpprofiledata = data_prfile[0]['p_taskchat']                        
                    sqlupdate = ''' UPDATE "tb_userProfile" SET "p_updateTime"=:tmpupdatetime,"p_emailthai"=:tmpemailthai,"p_emailthai2"=:tmpemailthai2,"p_emailthai3"=:tmpemailthai3,employee_email=:employee_email,"p_signca"=:tmpsignca where "p_username"=:tmpusername and "p_userid"=:tmpuserid '''
                    if tmpprofiledata == None:
                        sqlupdate = ''' UPDATE "tb_userProfile" SET "p_updateTime"=:tmpupdatetime,"p_emailthai"=:tmpemailthai,"p_emailthai2"=:tmpemailthai2,"p_emailthai3"=:tmpemailthai3,employee_email=:employee_email,"p_signca"=:tmpsignca,"p_taskchat"=:tmptaskchat,"p_todo"=:tmptodo,"p_doing"=:tmpdoing,"p_done"=:tmpdone where "p_username"=:tmpusername and "p_userid"=:tmpuserid  '''
                    result_update = connection.execute(text(sqlupdate), tmpupdatetime=str(st),tmpemailthai=self.emailthai,tmpemailthai2=self.emailthai2,tmpemailthai3=self.emailthai3,tmpsignca=self.signca,tmptaskchat=self.taskchat,tmptodo=self.todo,tmpdoing=self.doing,tmpdone=self.done,tmpusername=self.username,tmpuserid=self.userid,employee_email=self.employee_email)
                else:
                    sqlinsert = '''INSERT INTO "tb_userProfile" ("p_username", "p_userid", "p_updateTime","p_webHook","p_sign","p_emailUser","p_emailthai","p_emailthai2","p_emailthai3","p_taskchat","p_todo","p_doing","p_done","p_options","p_signca","chat_noti","email_noti","permission_id","pic_profile","employee_email") VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s) '''
                    result_insert = connection.execute((sqlinsert), self.username,self.userid,str(st),None,None,None,self.emailthai,self.emailthai2,self.emailthai3,self.taskchat,self.todo,self.doing,self.done,None,self.signca,None,None,None,None,self.employee_email)
            connection.close()
            return ({'result':'OK','messageText':'success','messageER':None,'status_Code':200})  
        except Exception as e:
            print(str(e))
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return ({'result':'ER','messageText':None,'messageER':str(e),'status_Code':200})

    def insert_pdf_togroup_v1(self,group_id,pdf_data):
        self.group_id = group_id
        self.pdf_data = pdf_data
        try:
            sql = '''UPDATE "tb_group_document" SET "pdf_org"=:tmppdf_org where "id"=:tmpgroup_id and "status"=:tmpstatus '''
            connection = engine.connect()
            result_select = connection.execute(text(sql), tmppdf_org=str(self.pdf_data),tmpgroup_id=str(self.group_id),tmpstatus='ACTIVE')
            # tmp_query = tb_group_document.query.filter(tb_group_document.id==self.group_id,tb_group_document.status=='ACTIVE').first()
            # if tmp_query != None:
            #     tmp_query.pdf_org = str(self.pdf_data)             
            #     db.session.commit()
            return {'result':'OK','messageText':None}
            # else:
            #     return {'result':'ER','messageText':'data not found'}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':str(e)}
        finally:
            connection.close()

    def insert_group_v1(self,sidcode,group_email,email_create,group_step_num,datasum_group,arr_color,group_view_email,datasign,groupstatus_email,group_title=None,\
        cover_name=None,document_type=None,bizinfo=None,group_status=None,cover_page=None,calculate_fieds=None,maxstep=None,email_middle=None,html_data=None,json_data=None,webhook=None):
        self.sidcode = sidcode
        self.group_email = group_email
        self.email_create = email_create
        self.group_step_num = group_step_num
        self.datasum_group = datasum_group
        self.arr_color = arr_color
        self.group_view_email = group_view_email
        self.datasign = datasign
        self.groupstatus_email = groupstatus_email
        self.group_title = None
        self.cover_name = None
        self.document_type = None
        self.bizinfo = None
        self.group_status = None
        self.cover_page = None
        self.calculate_fieds = None
        self.maxstep = None
        self.email_middle = None
        self.html_data = None
        self.json_data = None
        self.webhook = webhook
        if group_title != None:
            self.group_title = str(group_title)
        if cover_name != None:
            self.cover_name = str(cover_name)
        if document_type != None:
            self.document_type = str(document_type)
        if bizinfo != None:
            self.bizinfo = str(bizinfo)
        if group_status != None:
            self.group_status = str(group_status)
        if cover_page != None:
            self.cover_page = str(cover_page)
        if calculate_fieds != None:
            self.calculate_fieds = str(calculate_fieds)
        if maxstep != None:
            self.maxstep = str(maxstep)
        if email_middle != None:
            self.email_middle = str(email_middle)
        if html_data != None:
            self.html_data = str(html_data)
        if json_data != None:
            self.json_data = str(json_data)
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        arr_string_options_page = []
        try:
            # select_result = paper_lessdocument.query.filter(paper_lessdocument.step_id.in_(self.sidcode)).all()
            if isinstance(self.sidcode, list):
                sidCode = tuple(self.sidcode)
            elif isinstance(self.sidcode, str):
                sidCode = "("+ self.sidcode +")"
            else:
                sidCode = self.sidcode
            with engine.connect() as connection:
                result_select = connection.execute(text('''SELECT * FROM "tb_doc_detail" WHERE "step_id" IN :sid'''),sid=sidCode)
                result = [dict(row) for row in result_select]
            connection.close()
            # print(result)
            for i in range(len(result)):
                tmpjson = result[i]
                if '_sa_instance_state' in tmpjson:
                    del tmpjson['_sa_instance_state']
                tmp_options_page = tmpjson['options_page']
                try:
                    tmp_options_page = eval(tmp_options_page)
                except Exception as e:
                    tmp_options_page = ''
                if 'subject_text' in tmp_options_page:
                    tmp_subject_text = tmp_options_page['subject_text']
                if 'body_text' in tmp_options_page:
                    tmp_body_text = tmp_options_page['body_text']
                json_data = {
                    "subject_text":tmp_subject_text,
                    "body_text":tmp_body_text
                }
                arr_string_options_page.append(json_data)
            random_digit = random.randint(1, 3)
            if random_digit == 1:
                tracking = get_random_string(9)
            elif random_digit == 2:
                tracking = random_string_digit_generator()
            elif random_digit == 3:
                tracking = random_digit_string_generator()
            tracking = string_check(tracking,random_digit)
            tracking = id_generator(4) + (''.join(tracking))
            # print(self.email_middle)
            tmpgroup_color = self.arr_color[0]['color']
            # insert_result = tb_group_document(sid_group=str(self.sidcode),data_group=str(arr_string_options_page),updatetime=str(st),email_group=str(self.group_email),status='ACTIVE',create_by=self.email_create\
            #     ,update_by=self.email_create,step_group=str(self.group_step_num),pdf_org=None,pdf_sign=None,step_group_detail=str(self.datasign)\
            #     ,group_data_json=str(self.datasum_group),group_other=str(self.arr_color),email_view_group=str(self.group_view_email),hash_id=None,tracking_group=tracking\
            #     ,status_group=str(self.groupstatus_email),group_title=self.group_title,group_name=self.cover_name,document_type=self.document_type,bizinfo=self.bizinfo\
            #     ,group_status=self.group_status,cover_page=self.cover_page,calculate_fieds=self.calculate_fieds,maxstep=self.maxstep,email_middle=str(self.email_middle),html_data=self.html_data,json_data=self.json_data)
            # db.session.add(insert_result)
            # db.session.flush()
            # db.session.commit()
            
            with engine.connect() as connection:
                result_insert = connection.execute('INSERT INTO tb_group_document (sid_group,data_group,updatetime,email_group,status,create_by,update_by,step_group,pdf_org,pdf_sign,step_group_detail \
                ,group_data_json,group_other,email_view_group,hash_id,tracking_group,status_group,group_title,group_name,document_type,bizinfo,group_status,cover_page,calculate_fieds,maxstep \
                ,email_middle,html_data,json_data,webhook) VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s) RETURNING "id"', str(self.sidcode),str(arr_string_options_page) \
                ,str(st),str(self.group_email),'ACTIVE',self.email_create,self.email_create,str(self.group_step_num),None,None,str(self.datasign),str(self.datasum_group),str(self.arr_color) \
                ,str(self.group_view_email),None,tracking,str(self.groupstatus_email),self.group_title,self.cover_name,self.document_type,self.bizinfo,self.group_status,self.cover_page \
                ,self.calculate_fieds,self.maxstep,str(self.email_middle),self.html_data,self.json_data,self.webhook)
                tmp = [dict(row) for row in result_insert]
            connection.close()
            return {'result':'OK','messageText':{'group_id':tmp[0]['id'],'tracking_group':tracking,'group_color':tmpgroup_color,'document_type':self.document_type}}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            print(str(e))
            return {'result':'ER','messageText':str(e)}
        finally:
            connection.close()

    def insert_messageComment_v2(self,sidCode,email,id,comment,step):
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d-%m-%Y %H:%M:%S')
        st_indb = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        self.sidCode = sidCode
        self.email = email
        self.id = id
        self.comment = comment
        self.step = step
        tmp_json = {}
        list_json = []
        name_surename = ''
        dict_comment = {}
        try:
            # ตรวจสอบว่่าเอกสารอยู่ในระบบ ppl หรือส่งมาจาก eform
            check_ppl = paper_lesstrack.query.filter_by(step_data_sid = self.sidCode).first()
            if check_ppl == None:
                sid_from_ppl = paper_lesstrack.query.filter_by(hash_sid_code = self.sidCode).first()
                self.sidCode = sid_from_ppl.step_data_sid
            # ตรวจสอบว่่าเอกสารอยู่ในระบบ ppl หรือส่งมาจาก eform
            #เช็ค email ใน citizen login
            query_name = paper_lesslogin.query.filter(paper_lesslogin.biz_information.contains(self.email)).all()
            # หา list_onemail
            if query_name != None :
                for x in range(len(query_name)):
                    biz_information = query_name[x].biz_information
                    biz_information_eval = eval(str(biz_information))
                    name = biz_information_eval['first_name_th']
                    name_surename += name
                    surename = biz_information_eval['last_name_th']
                    name_surename += ' ' + surename
                typeComment = 'insert'
                dict_comment = getListUser(self.sidCode,self.email,name_surename,self.comment,typeComment)
            # หา list_onemail
            else :
                name_surename = self.email
                # return {'result':'ER','messageText':'email incorret'}
            query_comment1 = paper_lessmessageComment.query.filter_by(sid = self.sidCode).order_by((paper_lessmessageComment.time_Update).desc()).first()
            if query_comment1 != None:
                msgComment = query_comment1.message_Comment 
                msgComment_eval = eval(str(msgComment))
                for x in range(len(msgComment_eval)):
                    if 'comment' in msgComment_eval[x] and 'comment_modified_by' in msgComment_eval[x] and 'comment_modified_date' in msgComment_eval[x] :
                        tmp_json['id'] = str(uuid.uuid4())
                        tmp_json['comment'] = msgComment_eval[x]['comment']
                        tmp_json['modified'] = msgComment_eval[x]['comment_modified_by']
                        tmp_json['modified_date'] = msgComment_eval[x]['comment_modified_date']
                        tmp_json['status'] = 'ON'
                        n = fine_name_surename(tmp_json['modified'])
                        tmp_json['name'] = n
                        tmp_json['step'] = None
                        list_json.append(tmp_json)
                        tmp_json = {}
                    else :
                        list_json.append(msgComment_eval[x])
                        tmp_json = {}
                query_comment1.message_Comment = str(list_json)
                db.session.commit()
            query_comment = paper_lessmessageComment.query.filter_by(sid = self.sidCode).order_by((paper_lessmessageComment.time_Update).desc()).first()
            if self.id == '': #insert comment
                if query_comment != None: #sid มีค่าอยู่เเล้ว
                    msg_comment = query_comment.message_Comment
                    msg_comment_eval = eval(str(msg_comment))
                    # for x in range(len(msg_comment_eval)):
                    #     list_json.append(msg_comment_eval[x])
                    tmp_json['id'] = str(uuid.uuid4())
                    tmp_json['comment'] = self.comment
                    tmp_json['modified'] = self.email
                    tmp_json['modified_date'] = st
                    tmp_json['status'] = 'ON'
                    n = fine_name_surename(tmp_json['modified'])
                    tmp_json['name'] = n
                    tmp_json['step'] = self.step
                    list_json.append(tmp_json)
                    query_comment.message_Comment = str(list_json)
                    db.session.commit()
                    return {'result':'OK','messageText':list_json,'dict_comment':dict_comment}
                else: #ไม่มี sid นี้ insert เข้าใหม่
                    tmp_json['id'] = str(uuid.uuid4())
                    tmp_json['comment'] = self.comment
                    tmp_json['modified'] = self.email
                    tmp_json['modified_date'] = st
                    tmp_json['status'] = 'ON'
                    n = fine_name_surename(tmp_json['modified'])
                    tmp_json['name'] = n
                    tmp_json['step'] = self.step
                    list_json.append(tmp_json)
                    db.session.add(paper_lessmessageComment(sid=self.sidCode,message_Comment=str(list_json),time_Update=str(st_indb)))
                    db.session.commit()
                    return {'result':'OK','messageText':list_json,'dict_comment':dict_comment}
            else :
                return {'result':'OK','messageText':'ไม่สามารถแสดงความคิดเห็นได้','dict_comment':dict_comment}
 
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':str(ex)}

    def insert_messageComment_for_Eform(self,sidCode,email,id,comment,step,modified_date):
        # ts = int(time.time())
        # st = datetime.datetime.fromtimestamp(ts).strftime('%d-%m-%Y %H:%M:%S')
        # st_indb = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        self.sidCode = sidCode
        self.email = email
        self.id = id
        self.comment = comment
        self.step = step
        self.modified_date = int(modified_date)
        # ts = int(time.time())
        st = datetime.datetime.fromtimestamp(self.modified_date).strftime('%d-%m-%Y %H:%M:%S')
        st_indb = datetime.datetime.fromtimestamp(self.modified_date).strftime('%d/%b/%Y %H:%M:%S')
        tmp_json = {}
        list_json = []
        name_surename = ''
        dict_comment = {}
        try:
            # ตรวจสอบว่่าเอกสารอยู่ในระบบ ppl หรือส่งมาจาก eform
            check_ppl = paper_lesstrack.query.filter_by(step_data_sid = self.sidCode).first()
            if check_ppl == None:
                sid_from_ppl = paper_lesstrack.query.filter_by(hash_sid_code = self.sidCode).first()
                self.sidCode = sid_from_ppl.step_data_sid
            # ตรวจสอบว่่าเอกสารอยู่ในระบบ ppl หรือส่งมาจาก eform
            #เช็ค email ใน citizen login
            query_name = paper_lesslogin.query.filter(paper_lesslogin.biz_information.contains(self.email)).all()
            # หา list_onemail
            if query_name != None :
                for x in range(len(query_name)):
                    biz_information = query_name[x].biz_information
                    biz_information_eval = eval(str(biz_information))
                    name = biz_information_eval['first_name_th']
                    name_surename += name
                    surename = biz_information_eval['last_name_th']
                    name_surename += ' ' + surename
                typeComment = 'insert'
                dict_comment = getListUser(self.sidCode,self.email,name_surename,self.comment,typeComment)
            # หา list_onemail
            else :
                name_surename = self.email
                # return {'result':'ER','messageText':'email incorret'}
            query_comment1 = paper_lessmessageComment.query.filter_by(sid = self.sidCode).order_by((paper_lessmessageComment.time_Update).desc()).first()
            if query_comment1 != None:
                msgComment = query_comment1.message_Comment 
                msgComment_eval = eval(str(msgComment))
                for x in range(len(msgComment_eval)):
                    if 'comment' in msgComment_eval[x] and 'comment_modified_by' in msgComment_eval[x] and 'comment_modified_date' in msgComment_eval[x] :
                        tmp_json['id'] = str(uuid.uuid4())
                        tmp_json['comment'] = msgComment_eval[x]['comment']
                        tmp_json['modified'] = msgComment_eval[x]['comment_modified_by']
                        tmp_json['modified_date'] = msgComment_eval[x]['comment_modified_date']
                        tmp_json['status'] = 'ON'
                        n = fine_name_surename(tmp_json['modified'])
                        tmp_json['name'] = n
                        tmp_json['step'] = None
                        list_json.append(tmp_json)
                        tmp_json = {}
                    else :
                        list_json.append(msgComment_eval[x])
                        tmp_json = {}
                query_comment1.message_Comment = str(list_json)
                db.session.commit()
            query_comment = paper_lessmessageComment.query.filter_by(sid = self.sidCode).order_by((paper_lessmessageComment.time_Update).desc()).first()
            if self.id == '': #insert comment
                if query_comment != None: #sid มีค่าอยู่เเล้ว
                    msg_comment = query_comment.message_Comment
                    msg_comment_eval = eval(str(msg_comment))
                    # for x in range(len(msg_comment_eval)):
                    #     list_json.append(msg_comment_eval[x])
                    tmp_json['id'] = str(uuid.uuid4())
                    tmp_json['comment'] = self.comment
                    tmp_json['modified'] = self.email
                    tmp_json['modified_date'] = st
                    tmp_json['status'] = 'ON'
                    n = fine_name_surename(tmp_json['modified'])
                    tmp_json['name'] = n
                    tmp_json['step'] = self.step
                    list_json.append(tmp_json)
                    query_comment.message_Comment = str(list_json)
                    db.session.commit()
                    return {'result':'OK','messageText':list_json,'dict_comment':dict_comment}
                else: #ไม่มี sid นี้ insert เข้าใหม่
                    tmp_json['id'] = str(uuid.uuid4())
                    tmp_json['comment'] = self.comment
                    tmp_json['modified'] = self.email
                    tmp_json['modified_date'] = st
                    tmp_json['status'] = 'ON'
                    n = fine_name_surename(tmp_json['modified'])
                    tmp_json['name'] = n
                    tmp_json['step'] = self.step
                    list_json.append(tmp_json)
                    db.session.add(paper_lessmessageComment(sid=self.sidCode,message_Comment=str(list_json),time_Update=str(st_indb)))
                    db.session.commit()
                    return {'result':'OK','messageText':list_json,'dict_comment':dict_comment}
            else :
                return {'result':'OK','messageText':'ไม่สามารถแสดงความคิดเห็นได้','dict_comment':dict_comment}
 
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':str(ex)}



    def insert_admin_username_v1(self,username,email_user,level_admin):
        self.username = username
        self.email_user = email_user
        self.level_admin = level_admin
        datetime_now = datetime.datetime.now()
        datetime_now_tstamp = int(datetime.datetime.timestamp(datetime_now))
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        select_result = None
        tmp_list_data = []
        tmp_data = {}
        try:
            select_result = paper_lesslogin.query.filter(paper_lesslogin.username == self.username).filter(paper_lesslogin.citizen_data.contains(self.email_user)).first()
            select_result2 = tb_user_admin.query.filter(tb_user_admin.username == self.username).filter(tb_user_admin.email_user == self.email_user).first()
            if select_result2 != None :
                status_admin = select_result2.status
                if status_admin == 'Reject':
                    select_result2.status = 'Active'
                    select_result2.datetime_update = str(st)
                    select_result2.level_admin = self.level_admin
                    db.session.commit()
                    return {'result':'OK','messageText':'success'}
                else :
                    return {'result':'ER','messageText':'user and email already admin'}

            elif select_result2 == None :
                print ('NONE')
                if select_result != None:
                    tmp_data['username'] = select_result.username
                    tmp_data['hash_data'] = select_result.hash_data
                    eval_user_email = eval(select_result.citizen_data)
                    tmp_data['email_user'] = eval_user_email['thai_email']
                    tmp_list_data.append(tmp_data)
                    if self.level_admin != None or self.level_admin == "0" or self.level_admin == "1":
                        try:
                            insert_result = tb_user_admin(username = tmp_data['username'],hash_data = None,datetime_create = str(st),datetime_update = None,email_user = tmp_data['email_user'],status = 'Active',level_admin = self.level_admin)
                            db.session.add(insert_result)
                            db.session.flush()
                            db.session.commit()
                            return {'result':'OK','messageText':'success'}
                        except exc.SQLAlchemyError as ex:
                            return {'result':'ER','messageText':'user and email already admin'}
                        except Exception as ex:
                            return {'result':'ER','messageText':str(ex)}
                    else:
                        return {'result':'ER','messageText':'invalid level_admin'}
                else :
                    return {'result':'OK','messageText':'invalid username or email'}
        except exc.SQLAlchemyError as ex:
            return {'result':'ER','messageText':ex}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def insert_register_business_ppl_v1(self,tax_id):
        self.tax_id = tax_id
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        try:
            insert_result = paper_lessbizPaperless(tax_id=self.tax_id,theme_color=None,path_logo=None,datetime=str(st))
            db.session.add(insert_result)
            db.session.flush()
            db.session.commit()
            return {'result':'OK','messageText':'insert success'}
        except exc.SQLAlchemyError as ex:
            return {'result':'ER','messageText':'duplicate value!'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}
    
    def insert_register_business_ppl_v2(self,tax_id):
        self.tax_id = tax_id
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        self.create_date = st
        self.status = False
        self.config = '[{"name_service":"RPA","status":false},{"name_service":"DMS","status":false},{"name_service":"WEBHOOK","status":true},{"name_service":"ONEBOX","status":false}]'
        try:
            with engine.connect() as connection:
                insert_businessId =  connection.execute('INSERT INTO "tb_bizPaperless" ("tax_id","datetime","create_date","update_date","status","config") values (%s,%s,%s,%s,%s,%s) ',self.tax_id,self.create_date,self.create_date,self.create_date,self.status,self.config)
                connection.close()
            if insert_businessId != None:
                return {'result':'OK','messageText':insert_businessId}
            else:
                return {'result':'ER','messageText':'fail'}
        except Exception as ex:
            print(str(ex))
            return {'result':'ER','messageText':str(ex)}

    def insert_register_citizen_v1(self,account_id,account_title_th,first_name_th,last_name_th,account_title_eng,first_name_eng,last_name_eng,id_card_type,id_card_num,email,mobile_no,birth_date,username,account_email):
        self.account_id = account_id
        self.account_title_th = account_title_th
        self.first_name_th = first_name_th
        self.last_name_th = last_name_th
        self.account_title_eng = account_title_eng
        self.first_name_eng = first_name_eng
        self.last_name_eng =last_name_eng
        self.id_card_type = id_card_type
        self.id_card_num = hash_512_v2(id_card_num)
        self.email = email
        self.mobile_no = mobile_no
        self.birth_date = birth_date
        if self.birth_date == '':
            self.birth_date = None
        self.username = username
        self.account_email = account_email
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        try:
            insert_result = tb_register(account_id=self.account_id,account_title_th=self.account_title_th,first_name_th=self.first_name_th,last_name_th=self.last_name_th,account_title_eng=self.account_title_eng
            ,first_name_eng=self.first_name_eng,last_name_eng=self.last_name_eng,id_card_type=self.id_card_type,id_card_num=self.id_card_num,email=self.email,mobile_no=self.mobile_no,birth_date=self.birth_date,username=self.username,account_email=self.account_email,register_date=str(st))
            db.session.add(insert_result)
            db.session.flush()
            db.session.commit()
            return {'result':'OK','messageText':'insert success'}
        except exc.SQLAlchemyError as ex:
            print(str(ex))
            return {'result':'ER','messageText':'duplicate value!'}
        except Exception as ex:
            print(str(ex))
            return {'result':'ER','messageText':str(ex)}

    def insert_register_business_v1(self,citizen_id,taxid,all_data,approve_document,result_document,first_name_th,first_name_eng,porpor20_document):
        self.citizen_id = citizen_id
        self.taxid = taxid
        self.all_data = all_data
        self.approve_document = approve_document
        self.result_document = result_document
        self.first_name_th = first_name_th
        self.first_name_eng = first_name_eng
        self.porpor20_document = porpor20_document
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        try:
            insert_result = tb_register_business(citizen_id=self.citizen_id,taxid=self.taxid,all_data=self.all_data,approve_document=self.approve_document,result_document=self.result_document,register_date=str(st),first_name_th=self.first_name_th,first_name_eng=self.first_name_eng,porpor20_document=self.porpor20_document)
            db.session.add(insert_result)
            db.session.flush()
            db.session.commit()
            return {'result':'OK','messageText':'insert success'}
        except exc.SQLAlchemyError as ex:
            return {'result':'ER','messageText':'duplicate value!'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def inert_logger_error_v1(self,message_error,url):
        self.message_error = message_error
        self.url = url
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        try:
            insert_result = tb_loger_error(message_error=self.message_error,url=self.url,datetime=str(st))
            db.session.add(insert_result)
            db.session.flush()
            db.session.commit()
            return {'result':'OK','messageText':'insert success'}
        except exc.SQLAlchemyError as ex:
            return {'result':'ER','messageText':'Duplicate Value!'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def insert_transaction_servicelog_v1(self,service_type,status,sidcode,message_error,hash_token=None):
        self.service_type = service_type
        self.status = status
        self.sidcode = sidcode
        self.message_error = message_error
        if hash_token != None:
            self.hash_token = hashlib.sha512(str(hash_token).encode('utf-8')).hexdigest()
        else:
            self.hash_token = None
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        try:
            insert_result = tb_transaction_servicelog(service_type=self.service_type,status=self.status,sidcode=self.sidcode,message_error=self.message_error,datetime=str(st),hash_token=self.hash_token)
            db.session.add(insert_result)
            db.session.flush()
            db.session.commit()
            return {'result':'OK','messageText':'insert success'}
        except exc.SQLAlchemyError as ex:
            return {'result':'ER','messageText':'Duplicate Value!'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def insert_tran_log_v1(self,message,status,request,url,hash_token,time_duration=None):
        self.message = message
        self.status = status
        self.request = request
        self.url = url
        self.hash_token = hashlib.sha512(str(hash_token).encode('utf-8')).hexdigest()
        self.time_duration = time_duration
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        try:
            sql = '''INSERT INTO tb_transactionlog ("message", "status", "request", "datetime","url","hash_token","time") VALUES ( %s, %s, %s,%s,%s,%s,%s);'''
            with engine.connect() as connection:
                result = connection.execute((sql),self.message,self.status,self.request,str(st),self.url,self.hash_token,self.time_duration)
                connection.close()
            tmp_query = [dict(row) for row in result]
            # insert_result = tb_transactionlog(message=self.message,status=self.status,request=self.request,datetime=str(st),url=self.url,hash_token=self.hash_token,time=self.time_duration)
            # db.session.add(insert_result)
            # db.session.flush()
            # db.session.commit()
            return {'result':'OK','messageText':'insert success'}
        except exc.SQLAlchemyError as ex:
            return {'result':'ER','messageText':'Duplicate Value!'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def insert_tran_excel_file_download_v1(self,path_excel,name_excel,key_download,username,tmp_dataJson):
        self.path_excel = path_excel
        self.name_excel = name_excel
        self.key_download = key_download
        self.username = username
        self.tmp_dataJson = tmp_dataJson
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        try:
            insert_result = tb_transactionexcel(path_excel=self.path_excel,name_excel=self.name_excel,key_download=self.key_download,datetime=str(st),username=self.username,filter_key=self.tmp_dataJson)
            db.session.add(insert_result)
            db.session.flush()
            db.session.commit()
            return {'result':'OK','messageText':'insert success','text_id':str(insert_result.id)}
        except exc.SQLAlchemyError as ex:
            print(str(ex))
            return {'result':'ER','messageText':'Duplicate Value!'}
        except Exception as ex:
            print(str(ex))
            return {'result':'ER','messageText':str(ex)}

    def insert_tran_log_requset_v1(self,message,status_code,request,url_request,methods,hash_token=None):
        self.message = message
        self.status_code = status_code
        self.request = str(request)
        self.url_request = url_request
        self.methods = methods
        if hash_token != None:
            self.hash_token = hashlib.sha512(str(hash_token).encode('utf-8')).hexdigest()
        else:
            self.hash_token = None
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        try:
            insert_result = tb_transactionlogrequest(message=self.message,statuscode=self.status_code,datetime=str(st),request=self.request,url_request=self.url_request,methods=self.methods,hash_token=self.hash_token)
            db.session.add(insert_result)
            db.session.flush()
            db.session.commit()
            return {'result':'OK','messageText':'insert success','text_id':str(insert_result.id)}
        except exc.SQLAlchemyError as ex:
            db.session.rollback()
            return {'result':'ER','messageText':'Duplicate Value!'}
        except Exception as ex:
            db.session.rollback()
            return {'result':'ER','messageText':str(ex)}
        finally:
            db.session.close()

    def insert_new_row_from_chat_v1(self,account_id,username, access_time, vertify_token,access_token,access_token_time,access_token_begin,one_access_token,citizen_data,hash_data,biz_information,secure_number,ipaddress):
        print()

    def insert_transactionSftp(self,status_sftp,path_folder,doc_type):
        self.status_sftp = status_sftp
        self.path_folder = path_folder
        self.doc_type = doc_type
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        try:
            insert_result = paper_lesstransactionSftp(status=self.status_sftp,folder_path=self.path_folder,date_time=str(st),document_type=str(self.doc_type))
            db.session.add(insert_result)
            db.session.flush()
            db.session.commit()
            return {'result':'OK','messageText':'insert success'}
        except exc.SQLAlchemyError as ex:
            return {'result':'ER','messageText':'Duplicate Value!'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def insert_log_mail_sender(self,email_to,email_sender,status_from_email):
        self.email_to = email_to
        self.email_sender = email_sender
        self.status_from_email = status_from_email
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        email_to_sha512encode = hashlib.sha512(str(self.email_to).encode('utf-8')).hexdigest()
        email_sender_sha512encode = hashlib.sha512(str(self.email_sender).encode('utf-8')).hexdigest()
        try:
            insert_result = paper_lesslogerMail_sender(status=self.status_from_email,to_mail=self.email_to,from_mail=self.email_sender,hash_to=email_to_sha512encode,hash_from=email_sender_sha512encode,time=str(st))
            db.session.add(insert_result)
            db.session.flush()
            db.session.commit()
            return {'result':'OK','messageText':'insert success'}
        except exc.SQLAlchemyError as ex:
            return {'result':'ER','messageText':'Duplicate Value!'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def insert_transactionTask(self,arrlist_data):
        self.arrlist_data = arrlist_data
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        count_order = 0
        if len(self.arrlist_data) != 0:
            for i in range(len(self.arrlist_data)):
                print(self.arrlist_data[i])

                status_task = self.arrlist_data[i]['result']
                if status_task == 'OK':
                    status = 'Y'
                elif status_task == 'ER':
                    status = 'ER'
                elif status_task == 'NO':
                    status = 'N'
                task_messageText = self.arrlist_data[i]['messageText']
                email_User = self.arrlist_data[i]['email']
                sendChat = self.arrlist_data[i]['sendChat']
                step_num = self.arrlist_data[i]['step_num']
                if task_messageText != None:
                    count_order = count_order + 1
                    create_task = task_messageText['create_task']
                    get_project = task_messageText['get_project']
                    self.task_project_id = get_project['data'][0]['project_id']
                    self.task_sidCode = self.arrlist_data[i]['sidCode']
                    self.task_uid = create_task['data']['task_id']
                    self.task_state_id = create_task['data']['state']['state_id']
                    self.task_state_name = create_task['data']['state']['name']
                    self.task_timeupdate = str(st)
                    self.task_order = count_order
                    self.task_stepnum = str(step_num)
                    self.task_emailUser = email_User
                    self.task_status = str(status)
                    self.task_sendChat = str(sendChat)
                    try:
                        insert_result = paper_lesstransactionTask(task_project_id=self.task_project_id,task_sidCode=self.task_sidCode,task_uid=self.task_uid,task_state_id=self.task_state_id,task_state_name=self.task_state_name,task_timeupdate=self.task_timeupdate,
                        task_order=self.task_order,task_stepnum=self.task_stepnum,task_emailUser=self.task_emailUser,task_status=self.task_status,task_sendChat=self.task_sendChat,task_message=str(task_messageText))
                        db.session.add(insert_result)
                        db.session.flush()
                        db.session.commit()
                    except exc.SQLAlchemyError as ex:
                        print(ex)
                        return {'result':'ER','messageText':'Duplicate Value!'}
                    except Exception as ex:
                        return {'result':'ER','messageText':str(ex)}
                else:
                    count_order = count_order + 1
                    self.task_project_id = None
                    self.task_sidCode = self.arrlist_data[i]['sidCode']
                    self.task_uid = None
                    self.task_state_id = None
                    self.task_state_name = None
                    self.task_timeupdate = str(st)
                    self.task_order = count_order
                    self.task_stepnum = str(step_num)
                    self.task_emailUser = email_User
                    self.task_status = str(status)
                    self.task_sendChat = str(sendChat)
                    try:
                        insert_result = paper_lesstransactionTask(task_project_id=self.task_project_id,task_sidCode=self.task_sidCode,task_uid=self.task_uid,task_state_id=self.task_state_id,task_state_name=self.task_state_name,task_timeupdate=self.task_timeupdate,
                        task_order=self.task_order,task_stepnum=self.task_stepnum,task_emailUser=self.task_emailUser,task_status=self.task_status,task_sendChat=self.task_sendChat,task_message=str(task_messageText))
                        db.session.add(insert_result)
                        db.session.flush()
                        db.session.commit()
                    except exc.SQLAlchemyError as ex:
                        print(ex)
                        return {'result':'ER','messageText':'Duplicate Value!'}
                    except Exception as ex:
                        return {'result':'ER','messageText':str(ex)}
            return {'result':'OK','messageText':'insert success'}



    def insert_transactionfile(self,json_data,pathfolder,folder_name,storagesum):
        self.json_data = str(json_data)
        self.pathfolder = pathfolder
        self.folder_name = folder_name
        self.storagesum = storagesum
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        attempted_id = str(uuid.uuid4())
        try:
            insert_result = paper_lesstransactionfile(json_data=self.json_data,pathfolder=self.pathfolder,folder_name=self.folder_name,attempted_id=attempted_id,timeupdate=str(st),storage=self.storagesum)
            db.session.add(insert_result)
            db.session.flush()
            db.session.commit()
            return {'result':'OK','messageText':{'messageResult':'insert ok','att_id':str(insert_result.attempted_id)}}
        except exc.SQLAlchemyError as ex:
            return {'result':'ER','messageText':'Duplicate Value!'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}


    def insert_documentDetails(self,documentJson,documentUser,email,documentType,documentCode):
        self.documentJson = documentJson
        self.documentUser = documentUser
        self.email = email
        self.documentType = documentType
        self.documentCode = documentCode
        status_documentDetails = 'ACTIVE'
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        try:
            result_Row = paper_lessdocument_detail.query.filter(paper_lessdocument_detail.documentUser==self.documentUser,paper_lessdocument_detail.documentStatus=='ACTIVE',paper_lessdocument_detail.documentType==self.documentType).count()
            if result_Row == 0:
                db.session.add(paper_lessdocument_detail(documentJson=self.documentJson,documentUser=self.documentUser,documentUpdate=str(st),documentStatus=status_documentDetails,email=email,documentType=self.documentType,documentCode=self.documentCode,biz_info=None))
                db.session.commit()
                return {'result':'OK','messageText':'insert ok'}
            else:
                return {'result':'ER','messageText':'Duplicate Value!'}
        except exc.SQLAlchemyError as ex:
            return {'result':'ER','messageText':'Duplicate Value!'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def insert_documentDetails_v2(self,documentJson,documentUser,email,documentType,documentCode,biz_info,service_permission=None,other_service_permission=None,chat_bot=None):
        self.documentJson = documentJson
        self.documentUser = documentUser
        self.email = email
        self.documentType = documentType
        self.documentCode = documentCode
        self.biz_info = biz_info
        status_documentDetails = 'ACTIVE'
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        if service_permission == None:
            self.service_permission = 'paperless'
        else:
            self.service_permission = service_permission
        if other_service_permission == None:
            self.other_service_permission = [{'name_service':'RPA','status':True,'other':[{'path_folder':'','url_path':''}]},{'name_service':'DMS','status':True,'other':[{'path_folder':'','url_path':''}]},{'name_service':'WEBHOOK','status':True,'other':[{'path_folder':'','url_path':''}]},{'name_service':'ONEBOX','status':True,'other':[{'path_folder':'','url_path':''}]}]
        else:
            self.other_service_permission = other_service_permission
        self.chat_bot = chat_bot
        if self.chat_bot == None:
            self.chat_bot = {"chat_bot_status":True,"chat_bot_id":"B8bb8493bce765ca99374070aefd167cb","chat_bot_token":"Bearer A16185216830056b1946f138905230c3c633dbeec596d4e8d962971c40269af89a5b101b00a02411db4d741312cee67d5","chat_bot_name":"Paperless Bot"}
        try:
            if self.biz_info == None:
                self.biz_info = ''
            if str(self.biz_info).replace(' ','') == "":
                result_Row = paper_lessdocument_detail.query.filter(paper_lessdocument_detail.documentUser==self.documentUser,paper_lessdocument_detail.documentStatus=='ACTIVE',paper_lessdocument_detail.documentType==self.documentType,paper_lessdocument_detail.biz_info=='',paper_lessdocument_detail.biz_info==None).count()
                if result_Row == 0:
                    query_tmp = paper_lessdocument_detail(documentJson=self.documentJson,documentUser=self.documentUser,documentUpdate=str(st),documentStatus=status_documentDetails,email=email,documentType=self.documentType,documentCode=self.documentCode,biz_info=self.biz_info,service_permission=self.service_permission,other_service_permission=str(self.other_service_permission),chat_bot=str(self.chat_bot))
                    db.session.add(query_tmp)
                    db.session.flush()
                    db.session.commit()
                    return {'result':'OK','messageText':'insert success','data':query_tmp.documentCode}
                else:
                    return {'result':'ER','messageText':'duplicate value'}
            else:
                try:
                    tmp_tax_id = eval(biz_info)['id_card_num']
                except Exception as ex:
                    return {'result':'ER','messageText':str(ex)}
                result_Row = paper_lessdocument_detail.query.filter(paper_lessdocument_detail.biz_info!='',paper_lessdocument_detail.biz_info.contains(tmp_tax_id),paper_lessdocument_detail.documentStatus=='ACTIVE',paper_lessdocument_detail.documentType==self.documentType).count()
                print(result_Row)
                if result_Row == 0:
                    query_tmp = paper_lessdocument_detail(documentJson=self.documentJson,documentUser=self.documentUser,documentUpdate=str(st),documentStatus=status_documentDetails,email=email,documentType=self.documentType,documentCode=self.documentCode,biz_info=self.biz_info,service_permission=self.service_permission,other_service_permission=str(self.other_service_permission),chat_bot=str(self.chat_bot))
                    db.session.add(query_tmp)
                    db.session.flush()
                    db.session.commit()
                    return {'result':'OK','messageText':'insert success','data':query_tmp.documentCode}
                else:
                    return {'result':'ER','messageText':'duplicate value','code':'ERDT990'}
        except exc.SQLAlchemyError as ex:
            return {'result':'ER','messageText':'duplicate value'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def insert_documentDetails_v5(self,documentJson,documentUser,email,documentType,documentCode,biz_info,service_permission,other_service_permission=None,chat_bot=None):
        self.documentJson = documentJson
        self.documentUser = documentUser
        self.email = email
        self.documentType = documentType
        self.documentCode = documentCode
        self.biz_info = biz_info
        status_documentDetails = 'ACTIVE'
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        self.service_permission = service_permission
        self.other_service_permission = other_service_permission
        self.chat_bot = chat_bot
        # if self.chat_bot == None:
        #     self.chat_bot = {"chat_bot_status":True,"chat_bot_id":"B8bb8493bce765ca99374070aefd167cb","chat_bot_token":"Bearer A16185216830056b1946f138905230c3c633dbeec596d4e8d962971c40269af89a5b101b00a02411db4d741312cee67d5","chat_bot_name":"Paperless Bot"}
        try:
            if self.biz_info == None:
                self.biz_info = ''
            if str(self.biz_info).replace(' ','') == "":
                result_Row = paper_lessdocument_detail.query.filter(paper_lessdocument_detail.documentUser==self.documentUser,paper_lessdocument_detail.documentStatus=='ACTIVE',paper_lessdocument_detail.documentType==self.documentType,paper_lessdocument_detail.biz_info=='').count()
                if result_Row == 0:
                    query_tmp = paper_lessdocument_detail(documentJson=self.documentJson,documentUser=self.documentUser,documentUpdate=str(st),documentStatus=status_documentDetails,email=email,documentType=self.documentType,documentCode=self.documentCode,biz_info=self.biz_info,service_permission=self.service_permission,other_service_permission=str(self.other_service_permission),chat_bot=str(self.chat_bot))
                    db.session.add(query_tmp)
                    db.session.flush()
                    db.session.commit()
                    return {'result':'OK','messageText':'insert success','data':query_tmp.documentCode}
                else:
                    return {'result':'ER','messageText':'duplicate value','code':'ERDT991'}
            else:
                try:
                    tmp_tax_id = eval(biz_info)['id_card_num']
                except Exception as ex:
                    return {'result':'ER','messageText':str(ex)}
                result_Row = paper_lessdocument_detail.query.filter(paper_lessdocument_detail.biz_info!='',paper_lessdocument_detail.biz_info.contains(tmp_tax_id),paper_lessdocument_detail.documentStatus=='ACTIVE',paper_lessdocument_detail.documentType==self.documentType).count()
                print(result_Row)
                if result_Row == 0:
                    query_tmp = paper_lessdocument_detail(documentJson=self.documentJson,documentUser=self.documentUser,documentUpdate=str(st),documentStatus=status_documentDetails,email=email,documentType=self.documentType,documentCode=self.documentCode,biz_info=self.biz_info,service_permission=self.service_permission,other_service_permission=str(self.other_service_permission),chat_bot=str(self.chat_bot))
                    db.session.add(query_tmp)
                    db.session.flush()
                    db.session.commit()
                    return {'result':'OK','messageText':'insert success','data':query_tmp.documentCode}
                else:
                    return {'result':'ER','messageText':'duplicate value','code':'ERDT990'}
        except exc.SQLAlchemyError as ex:
            return {'result':'ER','messageText':'duplicate value'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}
        finally:
            db.session.close()



    def insert_downloadLogFile(self,sidCode,jsonInformation):
        self.sidCode = sidCode
        self.jsonInformation = jsonInformation
        ts = int(time.time())
        count_download = "1"
        random_number = string.ascii_letters + string.digits
        random_number = ''.join(random.choice(random_number) for i in range(128))
        random_number = str(random_number).upper() + str(ts)
        try:
            db.session.add(paper_lesstransactionLoad(sidCode=self.sidCode,count_download=count_download,jsonInformation=self.jsonInformation,key_gen=random_number))
            db.session.commit()
            return {'result':'OK','messageText':str(random_number)}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def insert_downloadLogQrCodeFile(self,sidCode,jsonInformation):
        self.sidCode = sidCode
        self.jsonInformation = jsonInformation
        count_download = "1"
        ts = int(time.time())
        random_number = string.ascii_letters + string.digits
        random_number = ''.join(random.choice(random_number) for i in range(128))
        random_number = str(random_number).upper() + str(ts)
        try:
            db.session.add(paper_lesstransactionLoadQr(sidCode=self.sidCode,count_download=count_download,jsonInformation=self.jsonInformation,key_gen=random_number))
            db.session.commit()
            return {'result':'OK','messageText':str(random_number)}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def insert_token_requiredOneId(self,tokenOne,tokenPaperless,username,email_thai):
        self.tokenOne = tokenOne
        self.tokenPaperless = tokenPaperless
        self.username = username
        self.email_thai = email_thai
        sha512encode = hashlib.sha512(str(self.tokenOne).encode('utf-8')).hexdigest()
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        expire_ts = int(time.time()) + 3600
        expire_st = datetime.datetime.fromtimestamp(expire_ts).strftime('%d/%b/%Y %H:%M:%S')
        try:
            connection = engine.connect()
            sql = 'INSERT INTO tb_token_required (hash_one_access_token, updatetime, access_token_system, username, email_thai, expire_datetime, status_online) VALUES (%s, %s, %s, %s, %s, %s, %s) RETURNING tb_token_required.id;'
            connection.execute(sql,sha512encode,str(st),self.tokenPaperless,self.username,self.email_thai,str(expire_st),'ACTIVE')
            connection.close()
            # db.session.add(paper_lesstoken_required(hash_one_access_token=sha512encode,updatetime=str(st),access_token_system=self.tokenPaperless,username=self.username,email_thai=self.email_thai,expire_datetime=str(expire_st),status_online='ACTIVE'))
            # db.session.commit()
            return {'result':'OK'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}
        finally:
            connection.close()

    def insert_BizProfile(self,bizTax,bizInfoJson,bizRole):
        self.bizTax = bizTax
        self.bizInfoJson = str(bizInfoJson)
        self.bizRole    = str(bizRole)
        print(self.bizTax,self.bizInfoJson,self.bizRole)
        try:
            with engine.connect() as connection:
                result_insert = connection.execute('INSERT INTO "tb_bizProfile" ("bizTax", "bizInfoJson", "bizRole") VALUES (%s,%s,%s) ', self.bizTax,self.bizInfoJson,self.bizRole)
            connection.close()
            return {'result':'OK'}
        except Exception as ex:
            print(str(ex))
            return {'result':'ER','messageText':str(ex)}

    def insert_LogPDF(self,username,hashStringPdf):
        self.username = username
        self.hashStringPdf  = hashStringPdf
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        try:
            db.session.add(paper_lesstransactionPDF(username=self.username,hash_pdf=self.hashStringPdf,timelast=str(st)))
            db.session.commit()
            return {'result':'OK'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def insert_LogBizLogin(self,username,userId,JsonBiz):
        self.username   = str(username).lower()
        self.userId     = userId
        self.JsonBiz    = str(JsonBiz)
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        try:
            db.session.add(paper_lessbizLogin(account_id=self.userId,biz_information=self.JsonBiz,username=self.username,update_time=str(st)))
            db.session.commit()
            return {'result':'OK'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def insert_transactionMail(self,sidCode,statusId,OrderResult,email_User,statusSign,stepNum,sendMail,urlSign,propertyMail=None):
        self.sidCode = sidCode
        self.statusId = statusId
        self.OrderResult = OrderResult
        self.email_User = email_User
        self.statusSign = statusSign
        self.stepNum = stepNum
        self.sendMail = sendMail
        self.urlSign = urlSign
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        self.propertyMail = propertyMail
        try:
            db.session.add(paper_lesstransactionMail(sidCode=self.sidCode,timeStamp=str(st),statusId=self.statusId,OrderResult=self.OrderResult,email_User=self.email_User,statusSign=self.statusSign,stepNum=self.stepNum,sendMail=self.sendMail,urlSign=self.urlSign,propertyMail=self.propertyMail))
            db.session.commit()
            return {'result':'OK'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def insert_message_comment_v2(self,sidcode,json_comment):
        self.sidcode = sidcode
        self.json_comment = json_comment
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d-%m-%Y %H:%M:%S')
        st_indb = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        print(st_indb)

    def insert_messageComment(self,sidCode,json_Comment):
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d-%m-%Y %H:%M:%S')
        st_indb = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        self.sidCode = sidCode
        self.json_Comment = json_Comment
        jsonComment_data = eval(self.json_Comment)
        try:
            for i in range(len(jsonComment_data)):
                if 'comment_modified_date' in jsonComment_data[i]:
                    jsonComment_data[i]['comment_modified_date'] = str(st)
                else:
                    return {'result':'ER','messageText':'not found key comment_modified_date'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}
        try:
            db.session.add(paper_lessmessageComment(sid=self.sidCode,message_Comment=str(jsonComment_data),time_Update=str(st_indb)))
            db.session.commit()
            return {'result':'OK'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def insert_UserLog(self,username,userid,ipaddress,email):
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        self.username = str(username).lower()
        self.userid = userid
        self.transactionCode = str(uuid.uuid4())
        self.ipaddress = ipaddress
        self.email      = email
        try:
            db.session.add(paper_lesstransactionLogin(username=self.username,userid=self.userid,transactionCode=self.transactionCode,ipaddress=self.ipaddress,date_time=str(st),email=self.email))
            db.session.commit()
            return {'result':'OK'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}
        finally:
            db.session.close()

    def insert_paper_less_uat(self,namefile,sizefile,c_status):
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        self.namefile = namefile
        self.sizefile = sizefile
        self.c_datetime = st
        self.c_status = c_status

        try:
            db.session.add(paper_lesstable(nameFile=self.namefile,sizeFile=self.sizefile,c_dateTime=self.c_datetime,c_status=self.c_status))
            db.session.commit()
            return {'result':'OK'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def insert_paper_tracking(self,convert_id,file_id,step_Code,step,tracking=None):
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        self.t_dateTime = st
        self.tracking = tracking
        random_digit = random.randint(1, 3)
        if random_digit == 1:
            tracking = get_random_string(9)
        elif random_digit == 2:
            tracking = random_string_digit_generator()
        elif random_digit == 3:
            tracking = random_digit_string_generator()
        tracking = string_check(tracking,random_digit)
        tracking = id_generator(3) + (''.join(tracking))
        try:
            tracking = gen_digit_tracking(tracking)
            if tracking['result'] == 'OK':
                tracking = tracking['messageText']
        except Exception as e:
            tracking = id_generator(4) + (''.join(tracking))
        if self.tracking != None:
            tracking = self.tracking
        self.convert_id = convert_id
        self.file_id = file_id
        self.step_Code = step_Code
        self.step = step
        self.uuid_step = str(uuid.uuid4())
        self.hash_sidcode = hashlib.sha512(str(self.uuid_step).encode('utf-8')).hexdigest()
        try:
            insert_paper_track = (paper_lesstrack(tracking=tracking,t_dateTime=self.t_dateTime,Step=self.step,convert_id=self.convert_id,file_id=self.file_id,step_Code=self.step_Code,step_data_sid=self.uuid_step,hash_sid_code=self.hash_sidcode))
            db.session.add(insert_paper_track)
            db.session.flush()
            db.session.commit()
            return {'result':'OK','messageText':tracking,'convert_id':self.convert_id,'paper_trackid':insert_paper_track.tid,'step_data_sid':self.uuid_step}
        except exc.SQLAlchemyError as ex:
            print(ex)
            return {'result':'ER','messageText':'Duplicate Value!'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def insert_paper_pdf(self,string_pdf,hash_pdf):
        self.string_pdf = string_pdf
        self.hash_pdf = hash_pdf
        message_pathpdf = None
        message_pathpdf_hash = None
        try:
            r = createfile_pdfsign_v1(self.string_pdf,self.hash_pdf)
            if r['result'] == 'OK':
                message_pathpdf = str(r['path_pdf'])
                message_pathpdf_hash = str(r['path_pdfhash'])
                message_path_data = str(r['path_data'])
            insert_pdf = paper_lesspdf(string_pdf=self.string_pdf,hash_pdf=self.hash_pdf,string_sign=None,hash_sign=None,pdf_rejectorcancle=None,path_pdf=message_pathpdf,path_sign=None,path=message_path_data,path_rejectorcancle=None)
            db.session.add(insert_pdf)
            db.session.flush()
            db.session.commit()
            return {'result':'OK','messageText':insert_pdf.fid}
        except exc.SQLAlchemyError as ex:
            print(ex)
            return {'result':'ER','messageText':'Duplicate Value!'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def insert_paper_template(self,step_Code,step_Data,step_Max,username,email,DateTime,step_Name):
        self.step_Code = step_Code
        self.step_Data = step_Data
        self.step_Max = step_Max
        self.username = username
        self.email = email
        self.DateTime = DateTime
        self.step_Name = step_Name
        try:
            insert_template = paper_lessstep(step_Code=self.step_Code,step_Data=self.step_Data,step_Max=self.step_Max,username=self.username,email=self.email,DateTime=self.DateTime,step_Description=None,step_Name=self.step_Name,step_Upload=None,template_images=None)
            db.session.add(insert_template)
            db.session.flush()
            db.session.commit()
            return {'result':'OK','messageText':insert_template.sid}
        except exc.SQLAlchemyError as ex:
            print(ex)
            return {'result':'ER','messageText':'Duplicate Value!'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def insert_paper_template_v2(self,step_Code,step_Data,step_Max,username,email,DateTime,step_Name,step_Upload,step_Description=None,template_images=None):
        self.step_Code = step_Code
        self.step_Data = step_Data
        self.step_Max = step_Max
        self.username = username
        self.email = email
        self.DateTime = DateTime
        self.step_Description = step_Description
        self.step_Name = step_Name
        self.step_Upload = step_Upload
        self.template_images = template_images
        try:
            insert_template = paper_lessstep(step_Code=self.step_Code,step_Data=self.step_Data,step_Max=self.step_Max,username=self.username,email=self.email,DateTime=self.DateTime,step_Description=self.step_Description,step_Name=self.step_Name,step_Upload=self.step_Upload,template_images=None)
            db.session.add(insert_template)
            db.session.flush()
            db.session.commit()
            return {'result':'OK','messageText':insert_template.sid}
        except exc.SQLAlchemyError as ex:
            print(ex)
            return {'result':'ER','messageText':'Duplicate Value!'}
        except Exception as ex:
            print(ex)
            return {'result':'ER','messageText':str(ex)}

    def insert_paper_template_v3(self,step_Code,step_Data,step_Max,username,email,DateTime,step_Name,step_Upload,step_Description=None,template_images=None,qrCode_position=None,status_Update=None):
        self.step_Code = step_Code
        self.step_Data = step_Data
        self.step_Max = step_Max
        self.username = username
        self.email = email
        self.DateTime = DateTime
        self.step_Description = step_Description
        self.step_Name = step_Name
        self.step_Upload = step_Upload
        self.template_images = template_images
        self.qrCode_position = qrCode_position
        self.status = 'ACTIVE'
        self.status_Update = status_Update
        try:
            insert_template = paper_lessstep(step_Code=self.step_Code,step_Data=self.step_Data,step_Max=self.step_Max,username=self.username,email=self.email,DateTime=self.DateTime,step_Description=self.step_Description,step_Name=self.step_Name,step_Upload=self.step_Upload,template_images=self.template_images,template_biz=None,qrCode_position=self.qrCode_position,status=self.status,status_Update=self.status_Update)
            db.session.add(insert_template)
            db.session.flush()
            db.session.commit()
            return {'result':'OK','messageText':insert_template.sid}
        except exc.SQLAlchemyError as ex:
            print(ex)
            return {'result':'ER','messageText':'Duplicate Value!'}
        except Exception as ex:
            print(ex)
            return {'result':'ER','messageText':str(ex)}

    def insert_paper_template_v4(self,step_Code,step_Data,step_Max,username,email,DateTime,step_Name,step_Upload,step_Description=None,template_images=None,qrCode_position=None,status_Update=None,documentDetails=None,urgent_type=None,template_biz=None,condition_temp=None):
        self.step_Code = step_Code
        self.step_Data = step_Data
        self.step_Max = step_Max
        self.username = username
        self.email = email
        self.DateTime = DateTime
        self.step_Description = step_Description
        self.step_Name = step_Name
        self.step_Upload = step_Upload
        self.template_images = template_images
        self.qrCode_position = qrCode_position
        self.status = 'ACTIVE'
        self.status_Update = status_Update
        self.documentDetails = documentDetails
        self.urgent_type = urgent_type
        self.template_biz = template_biz
        self.condition_temp = condition_temp
        if str(self.urgent_type).replace(' ','') == '':
             self.urgent_type = 'M'
        try:
            count_row = paper_lessstep.query.filter_by(step_Code=self.step_Code,username=self.username,status='ACTIVE').count()
            if count_row == 0:
                insert_template = paper_lessstep(step_Code=self.step_Code,step_Data=self.step_Data,step_Max=self.step_Max,username=self.username,email=self.email,DateTime=self.DateTime,
                step_Description=self.step_Description,step_Name=self.step_Name,step_Upload=self.step_Upload,
                template_images=json.dumps(self.template_images),template_biz=self.template_biz,qrCode_position=self.qrCode_position,
                status=self.status,status_Update=self.status_Update,documentDetails=self.documentDetails,urgent_type=self.urgent_type,
                condition_temp=self.condition_temp,webhook=None,email_center=None)
                db.session.add(insert_template)
                db.session.flush()
                db.session.commit()
            else:
                return {'result':'ER','messageText':'Duplicate Value!'}
            return {'result':'OK','messageText':insert_template.sid}
        except exc.SQLAlchemyError as ex:
            print(ex)
            return {'result':'ER','messageText':'Duplicate Value!'}
        except Exception as ex:
            print(ex)
            return {'result':'ER','messageText':str(ex)}

    def insert_paper_template_v5(self,step_Code,step_Data,step_Max,username,email,DateTime,step_Name,step_Upload,step_Description=None,template_images=None,qrCode_position=None,status_Update=None,documentDetails=None,urgent_type=None,template_biz=None,condition_temp=None,webhook=None,email_center=None):
        self.step_Code = step_Code
        self.step_Data = step_Data
        self.step_Max = step_Max
        self.username = username
        self.email = email
        self.DateTime = DateTime
        self.step_Description = step_Description
        self.step_Name = step_Name
        self.step_Upload = step_Upload
        self.template_images = template_images
        self.qrCode_position = qrCode_position
        self.status = 'ACTIVE'
        self.status_Update = status_Update
        self.documentDetails = documentDetails
        self.urgent_type = urgent_type
        self.template_biz = template_biz
        self.condition_temp = condition_temp
        self.webhook = webhook
        self.email_center = email_center
        if str(self.urgent_type).replace(' ','') == '':
             self.urgent_type = 'M'
        try:
            count_row = paper_lessstep.query.filter_by(step_Code=self.step_Code,username=self.username,status='ACTIVE').count()
            if count_row == 0:
                insert_template = paper_lessstep(step_Code=self.step_Code,step_Data=self.step_Data,step_Max=self.step_Max,username=self.username,email=self.email,DateTime=self.DateTime,
                step_Description=self.step_Description,step_Name=self.step_Name,step_Upload=self.step_Upload,
                template_images=json.dumps(self.template_images),template_biz=self.template_biz,qrCode_position=self.qrCode_position,
                status=self.status,status_Update=self.status_Update,documentDetails=self.documentDetails,urgent_type=self.urgent_type,
                condition_temp=self.condition_temp,webhook=self.webhook,email_center=self.email_center,formula_temp=None,digit_sign=None)
                db.session.add(insert_template)
                db.session.flush()
                db.session.commit()
            else:
                return {'result':'ER','messageText':'Duplicate Value!'}
            return {'result':'OK','messageText':insert_template.sid}
        except exc.SQLAlchemyError as ex:
            print(ex)
            return {'result':'ER','messageText':'Duplicate Value!'}
        except Exception as ex:
            print(ex)
            return {'result':'ER','messageText':str(ex)}

    def insert_paper_template_v8(self,step_Code,step_Data,step_Max,username,email,DateTime,step_Name,step_Upload,step_Description=None,template_images=None,qrCode_position=None,status_Update=None,documentDetails=None,urgent_type=None,template_biz=None,condition_temp=None,webhook=None,email_center=None,formula_temp=None,digit_sign=None):
        self.step_Code = step_Code
        self.step_Data = step_Data
        self.step_Max = step_Max
        self.username = username
        self.email = email
        self.DateTime = DateTime
        self.step_Description = step_Description
        self.step_Name = step_Name
        self.step_Upload = step_Upload
        self.template_images = template_images
        self.qrCode_position = qrCode_position
        self.status = 'ACTIVE'
        self.status_Update = status_Update
        self.documentDetails = documentDetails
        self.urgent_type = urgent_type
        self.template_biz = template_biz
        self.condition_temp = condition_temp
        self.webhook = webhook
        self.email_center = email_center
        self.formula_temp = str(formula_temp)
        self.digit_sign = digit_sign
        if str(self.urgent_type).replace(' ','') == '':
             self.urgent_type = 'M'
        try:
            count_row = paper_lessstep.query.filter_by(step_Code=self.step_Code,username=self.username,status='ACTIVE').count()
            if count_row == 0:
                insert_template = paper_lessstep(step_Code=self.step_Code,step_Data=self.step_Data,step_Max=self.step_Max,username=self.username,email=self.email,DateTime=self.DateTime,
                step_Description=self.step_Description,step_Name=self.step_Name,step_Upload=self.step_Upload,
                template_images=json.dumps(self.template_images),template_biz=self.template_biz,qrCode_position=self.qrCode_position,
                status=self.status,status_Update=self.status_Update,documentDetails=self.documentDetails,urgent_type=self.urgent_type,
                condition_temp=self.condition_temp,webhook=self.webhook,email_center=self.email_center,formula_temp=self.formula_temp,digit_sign=self.digit_sign,page_sign_options=None)
                db.session.add(insert_template)
                db.session.flush()
                db.session.commit()
            else:
                return {'result':'ER','messageText':'Duplicate Value!'}
            return {'result':'OK','messageText':insert_template.sid}
        except exc.SQLAlchemyError as ex:
            print(ex)
            return {'result':'ER','messageText':'Duplicate Value!'}
        except Exception as ex:
            print(ex)
            return {'result':'ER','messageText':str(ex)}


    def insert_paper_template_v9(self,step_Code,step_Data,step_Max,username,email,DateTime,step_Name,step_Upload,step_Description=None,template_images=None,qrCode_position=None,status_Update=None,documentDetails=None,urgent_type=None,template_biz=None,condition_temp=None,webhook=None,email_center=None,formula_temp=None,digit_sign=None,page_sign_options=None,options_page=None,use_status=None):
        self.step_Code = step_Code
        self.step_Data = step_Data
        self.step_Max = step_Max
        self.username = username
        self.email = email
        self.DateTime = DateTime
        self.step_Description = step_Description
        self.step_Name = str(step_Name)
        self.step_Upload = step_Upload
        self.template_images = template_images
        self.qrCode_position = qrCode_position
        self.status = 'ACTIVE'
        self.status_Update = status_Update
        self.documentDetails = documentDetails
        self.urgent_type = urgent_type
        self.template_biz = template_biz
        if use_status != None:
            self.use_status = use_status
        else:
            self.use_status = 'ACTIVE'
        try:
            tmp_eval_tax_id = eval(self.template_biz)
            tmp_tax_id = tmp_eval_tax_id['id_card_num']
        except Exception as e:
            tmp_tax_id = ''
        self.condition_temp = condition_temp
        self.webhook = webhook
        self.email_center = email_center
        self.formula_temp = str(formula_temp)
        self.digit_sign = digit_sign
        if str(self.urgent_type).replace(' ','') == '':
             self.urgent_type = 'M'
        self.page_sign_options = page_sign_options
        self.options_page = str(options_page)
        try:
            if tmp_tax_id != '':
                count_row = paper_lessstep.query.filter(paper_lessstep.step_Name==self.step_Name,paper_lessstep.username==self.username,paper_lessstep.status=='ACTIVE',paper_lessstep.template_biz.contains(tmp_tax_id)).count()
            else:
                count_row = paper_lessstep.query.filter(paper_lessstep.step_Name==self.step_Name,paper_lessstep.username==self.username,paper_lessstep.status=='ACTIVE',paper_lessstep.template_biz=='').count()
            if count_row == 0:
                insert_template = paper_lessstep(step_Code=self.step_Code,step_Data=self.step_Data,step_Max=self.step_Max,username=self.username,email=self.email,DateTime=self.DateTime,
                step_Description=self.step_Description,step_Name=self.step_Name,step_Upload=self.step_Upload,
                template_images=json.dumps(self.template_images),template_biz=self.template_biz,qrCode_position=self.qrCode_position,
                status=self.status,status_Update=self.status_Update,documentDetails=self.documentDetails,urgent_type=self.urgent_type,
                condition_temp=self.condition_temp,webhook=self.webhook,email_center=self.email_center,formula_temp=self.formula_temp,digit_sign=self.digit_sign,page_sign_options=self.page_sign_options,options_page=self.options_page,
                status_use=self.use_status,time_expire=None,importance_doc=None,last_digit_sign=None)
                db.session.add(insert_template)
                db.session.flush()
                db.session.commit()
                return {'result':'OK','messageText':insert_template.sid}
            else:
                return {'result':'ER','messageText':'Duplicate Value!'}
        except exc.SQLAlchemyError as ex:
            print(ex)
            return {'result':'ER','messageText':'Duplicate Value!'}
        except Exception as ex:
            print(ex)
            return {'result':'ER','messageText':str(ex)}


    def insert_paper_template_biz_v1(self,step_Code,step_Data,step_Max,username,email,DateTime,step_Name,step_Upload,step_Description=None,template_images=None,template_biz=None,qrCode_position=None):
        self.step_Code = step_Code
        self.step_Data = step_Data
        self.step_Max = step_Max
        self.username = username
        self.email = email
        self.DateTime = DateTime
        self.step_Description = step_Description
        self.step_Name = step_Name
        self.step_Upload = step_Upload
        self.template_images = template_images
        self.template_biz = template_biz
        self.qrCode_position = qrCode_position
        try:
            insert_template = paper_lessstep(step_Code=self.step_Code,step_Data=self.step_Data,step_Max=self.step_Max,username=self.username,email=self.email,DateTime=self.DateTime,step_Description=self.step_Description,step_Name=self.step_Name,step_Upload=self.step_Upload,template_images=self.template_images,template_biz=self.template_biz,qrCode_position=self.qrCode_position)
            db.session.add(insert_template)
            db.session.flush()
            db.session.commit()
            return {'result':'OK','messageText':insert_template.sid}
        except exc.SQLAlchemyError as ex:
            print(ex)
            return {'result':'ER','messageText':'Duplicate Value!'}
        except Exception as ex:
            print(ex)
            return {'result':'ER','messageText':str(ex)}

    def insert_paper_sender(self,send_user,send_time,status,sender_name,sender_email,sender_position,file_id,file_name,tracking_id,step_data_sid,step_code,doc_id):
        self.send_user = send_user
        self.send_time = send_time
        self.status = status
        self.sender_name = sender_name
        self.sender_email = sender_email
        self.sender_position = sender_position
        self.file_id = file_id
        self.file_name = file_name
        self.tracking_id = tracking_id
        self.step_data_sid = step_data_sid
        self.step_code = step_code
        self.doc_id = doc_id
        try:
            insert_sender = paper_lesssender(send_user=self.send_user,send_time=self.send_time,status=self.status,sender_name=self.sender_name,sender_email=self.sender_email,sender_position=self.sender_position,
            file_id=self.file_id,file_name=self.file_name,tracking_id=self.tracking_id,step_data_sid=self.step_data_sid,step_code=self.step_code,doc_id=self.doc_id,template_webhook=None,email_center=None)
            db.session.add(insert_sender)
            db.session.flush()
            db.session.commit()
            return {'result':'OK','messageText':'insert sender OK!'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def select_filter_email_recp_v1(self,json_data):
        self.json_data = json_data

        datajson_info = eval(self.json_data)
        if 'step_num' in datajson_info:
            arr_email = []
            list_res = []
            for u in range(len(datajson_info['step_detail'])):
                one_email = datajson_info['step_detail'][u]['one_email']
                arr_email.append(one_email)
            return arr_email
        else:
            arr_email = []
            list_res = []
            for y in range(len(datajson_info)):
                for u in range(len(datajson_info[y]['step_detail'])):
                    one_email = datajson_info[y]['step_detail'][u]['one_email']
                    arr_email.append(one_email)
            return arr_email


    def insert_paper_sender_v2(self,send_user,send_time,status,sender_name,sender_email,sender_position,file_id,file_name,tracking_id,step_data_sid,step_code,doc_id,webhook,email_center,ref_document=None):
        tmparr_refdocument = []
        self.send_user = send_user
        self.send_time = send_time
        self.status = status
        self.sender_name = sender_name
        self.sender_email = sender_email
        self.sender_position = sender_position
        self.file_id = file_id
        self.file_name = file_name
        self.tracking_id = tracking_id
        self.step_data_sid = step_data_sid
        self.step_code = step_code
        self.doc_id = doc_id
        self.webhook = webhook
        self.email_center = email_center
        query_select = paper_lessdatastep.query.filter(paper_lessdatastep.sid==self.step_data_sid).first()
        result_fiter_email = insert().select_filter_email_recp_v1(query_select.data_json)
        result_select = select().select_datajson_form_step_data_update_sender_v1(self.step_data_sid)
        self.detail_status = str(result_select['messageText']['data_document'])
        self.document_status = result_select['messageText']['status_document']
        self.max_step = str(result_select['messageText']['max_step'])
        self.step_now = str(result_select['messageText']['step_now'])
        self.ref_document = ref_document
        if self.ref_document != None:
            tmparr_refdocument.append(self.ref_document)
        # print(detail_status,document_status)
        if len(result_fiter_email) != 0:
            email_recp = result_fiter_email
        else:
            email_recp = []
        try:
            insert_sender = paper_lesssender(send_user=self.send_user,send_time=self.send_time,status=self.status,sender_name=self.sender_name,sender_email=self.sender_email,sender_position=self.sender_position,
            file_id=self.file_id,file_name=self.file_name,tracking_id=self.tracking_id,step_data_sid=self.step_data_sid,step_code=self.step_code,doc_id=self.doc_id,template_webhook=self.webhook,email_center=self.email_center,recipient_email=str(email_recp),status_details=self.detail_status,document_status=self.document_status,group_id=None,stepnow=self.step_now,stepmax=self.max_step,status_service=None,list_ref=None,ref_document=str(tmparr_refdocument),status_ref=None)
            db.session.add(insert_sender)
            db.session.flush()
            db.session.commit()
            return {'result':'OK','messageText':'insert sender OK!'}
        except Exception as ex:
            print(str(ex))
            return {'result':'ER','messageText':str(ex)}

    def insert_paper_datastep(self,sid,data_json,update_time):
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        self.sid = sid
        self.data_json = data_json
        self.update_time = update_time
        eval_json = eval(self.data_json)
        try:
            for k in range(len(eval_json)):
                if 'step_detail' in eval_json[k]:
                    for n in range(len(eval_json[k]['step_detail'])):
                        if  'A01' in eval_json[k]['step_detail'][n]['activity_code']:
                            eval_json[k]['step_detail'][n]['activity_time'] = [st]
                        if  'A03' in eval_json[k]['step_detail'][n]['activity_code']:
                            eval_json[k]['step_detail'][n]['activity_time'] = [st]
                        if  'A03' in eval_json[k]['step_detail'][n]['activity_code'] and 'A02' in eval_json[k]['step_detail'][n]['activity_code']:
                            eval_json[k]['step_detail'][n]['activity_time'] = [st,st]
            print(eval_json)
            insert_datastep = paper_lessdatastep(sid=self.sid,data_json=json.dumps(eval_json),update_time=self.update_time,data_json_Upload=None,upload_time=st)
            db.session.add(insert_datastep)
            db.session.flush()
            db.session.commit()
            return {'result':'OK','messageText':'insert step_data OK!'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def insert_paper_datastepv2_1(self,sid,data_json,update_time,data_json_Upload,step_Max,biz_info,qrCode_position):
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        self.sid                = sid
        self.data_json          = data_json
        self.update_time        = update_time
        self.data_json_Upload   = data_json_Upload
        self.step_Max           = int(step_Max)
        self.biz_info           = str(biz_info)
        eval_json               = eval(self.data_json)
        self.qrCode_position    = qrCode_position
        try:
            if self.step_Max > 1:
                for k in range(len(eval_json)):
                    if 'step_detail' in eval_json[k]:
                        for n in range(len(eval_json[k]['step_detail'])):
                            if  'A01' in eval_json[k]['step_detail'][n]['activity_code']:
                                eval_json[k]['step_detail'][n]['activity_time'] = [st]
                            if  'A03' in eval_json[k]['step_detail'][n]['activity_code']:
                                eval_json[k]['step_detail'][n]['activity_time'] = [st]
                            if  'A03' in eval_json[k]['step_detail'][n]['activity_code'] and 'A02' in eval_json[k]['step_detail'][n]['activity_code']:
                                eval_json[k]['step_detail'][n]['activity_time'] = [st,st]
                insert_datastep = paper_lessdatastep(sid=self.sid,data_json=json.dumps(eval_json),update_time=self.update_time,data_json_Upload=self.data_json_Upload,upload_time=st,biz_info=self.biz_info,view_details="[]",qrCode_position=self.qrCode_position)
                db.session.add(insert_datastep)
                db.session.flush()
                db.session.commit()
                return {'result':'OK','messageText':'insert step_data OK!'}
            else:
                if 'step_detail' in eval_json:
                    for n in range(len(eval_json['step_detail'])):
                        if  'A01' in eval_json['step_detail'][n]['activity_code']:
                            eval_json['step_detail'][n]['activity_time'] = [st]
                        if  'A03' in eval_json['step_detail'][n]['activity_code']:
                            eval_json['step_detail'][n]['activity_time'] = [st]
                        if  'A03' in eval_json['step_detail'][n]['activity_code'] and 'A02' in eval_json['step_detail'][n]['activity_code']:
                            eval_json['step_detail'][n]['activity_time'] = [st,st]
                insert_datastep = paper_lessdatastep(sid=self.sid,data_json=json.dumps(eval_json),update_time=self.update_time,data_json_Upload=self.data_json_Upload,upload_time=st,biz_info=self.biz_info,view_details="[]",qrCode_position=self.qrCode_position)
                db.session.add(insert_datastep)
                db.session.flush()
                db.session.commit()
                return {'result':'OK','messageText':'insert step_data OK!'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def insert_sign_data(self,sid,data_json,file_id):
        self.sid = sid
        self.data_json = data_json
        self.file_id = file_id
        try:
            get_count_row = paper_lesssign.query.filter_by(sid=self.sid).count()
            if get_count_row == 0:
                insert_signdata = paper_lesssign(sid=self.sid,sign_json=self.data_json,file_id=self.file_id)
                db.session.add(insert_signdata)
                db.session.flush()
                db.session.commit()
                return {'result':'OK','messageText':'insert sign_json OK!'}
            else:
                return {'result': 'ER', 'messageText': 'insert sign_json ER!'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}



    def insert_document(self,sid,typefile,fileid,documentJson=None,documentType=None,urgent_type=None,digit_sign=None,attempted_name=None):
        self.sid = sid
        self.typefile = typefile
        self.fileid = fileid
        ts = int(time.time())
        self.documentJson = documentJson
        self.documentType = documentType
        self.urgent_type = urgent_type
        self.digit_sign = digit_sign
        self.attempted_name = attempted_name
        try:
            insert_document = paper_lessdocument(timest=str(ts),step_id=self.sid,typefile=self.typefile,fileid=self.fileid,document_id=None,documentJson=self.documentJson,documentType=self.documentType,urgent_type=self.urgent_type,digit_sign=self.digit_sign,attempted_folder=self.attempted_name)
            db.session.add(insert_document)
            db.session.flush()
            db.session.commit()
            jam_hash = hash(self.sid) % 10**2
            doc_id = "F-"  + str(ts)[-5:] + str(jam_hash) + str(self.fileid)[-1:] + str(insert_document.id)[-1:].upper()
            ref_code = 'REF-'+ ''.join(random_digit_generator())
            res_refCode = check_insert_refCode(ref_code,self.sid)
            if res_refCode['result'] == 'OK':
                update_doc_id = paper_lessdocument.query.filter_by(step_id=self.sid).first()
                update_doc_id.document_id = doc_id
                db.session.commit()
                return {'result':'OK','messageText':'insert document and refCode OK!','document_Id':doc_id,'ref_id':res_refCode['messageText']}
            else:
                return {'result':'OK','messageText':'insert document OK and refCode ' + res_refCode['messageText']  +'!','document_Id':doc_id,'ref_id':res_refCode['messageText']}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def insert_document_new_v2(self,sid,typefile,fileid,documentJson=None,documentType=None,urgent_type=None,digit_sign=None,attempted_name=None,documentID=None,sign_page_options=None,options_page=None,data_document=None):
        self.sid = sid
        self.typefile = typefile
        self.fileid = fileid
        ts = int(time.time())
        self.documentJson = documentJson
        self.documentType = documentType
        self.data_document = data_document
        if self.documentType != None:
            self.documentType = documentType
        else:
            self.documentType = 'OTHER'
        self.urgent_type = urgent_type
        self.digit_sign = digit_sign
        self.attempted_name = attempted_name
        self.documentID = documentID
        self.sign_page_options = sign_page_options
        if options_page != None:
            self.options_page = str(options_page)
        else:
            self.options_page = None
        try:
            insert_document = paper_lessdocument(timest=str(ts),step_id=self.sid,typefile=self.typefile,fileid=self.fileid,document_id=None,documentJson=self.documentJson,documentType=self.documentType,urgent_type=self.urgent_type,digit_sign=self.digit_sign,attempted_folder=self.attempted_name,sign_page_options=self.sign_page_options,options_page=self.options_page,data_document =self.data_document)
            db.session.add(insert_document)
            db.session.flush()
            db.session.commit()
            # jam_hash = hash(self.sid) % 10**2
            # doc_id = "F-"  + str(ts)[-5:] + str(jam_hash) + str(self.fileid)[-1:] + str(insert_document.id)[-1:].upper()
            doc_id = self.documentID
            ref_code = self.documentType + '-R' + ''.join(random_digit_generator())
            res_refCode = check_insert_refCode_new_v(ref_code,self.sid,self.documentType)
            if res_refCode['result'] == 'OK':
                update_doc_id = paper_lessdocument.query.filter_by(step_id=self.sid).first()
                update_doc_id.document_id = doc_id
                db.session.commit()
                return {'result':'OK','messageText':'insert document details and refcode and documentid ok','document_Id':doc_id,'ref_id':res_refCode['messageText']}
            else:
                return {'result':'OK','messageText':'insert document details and documentid ok refcode ' + res_refCode['messageText']  +'!','document_Id':doc_id,'ref_id':res_refCode['messageText']}
        except Exception as ex:
            return {'result':'ER','messageText':None,'messageER':str(ex)}

    def insert_document_new_v(self,sid,typefile,fileid,documentJson=None,documentType=None,urgent_type=None,digit_sign=None,attempted_name=None,documentID=None,sign_page_options=None,options_page=None):
        self.sid = sid
        self.typefile = typefile
        self.fileid = fileid
        ts = int(time.time())
        self.documentJson = documentJson
        self.documentType = documentType
        if self.documentType != None:
            self.documentType = documentType
        else:
            self.documentType = 'OTHER'
        self.urgent_type = urgent_type
        self.digit_sign = digit_sign
        self.attempted_name = attempted_name
        self.documentID = documentID
        self.sign_page_options = sign_page_options
        result_data_document = None
        info = {
            'sub':'ppl',
            'document_type':self.documentType,
            'tracking':'',
            'formdata_eform':'',
            'iat':ts
        }
        result_data_document = generate_data_document(info)
        if result_data_document != None:
            result_data_document = result_data_document.decode('utf-8')
            # result_data_document = str(result_data_document)
        if options_page != None:
            self.options_page = str(options_page)
        else:
            self.options_page = None
        try:
            insert_document = paper_lessdocument(timest=str(ts),step_id=self.sid,typefile=self.typefile,fileid=self.fileid,document_id=None,documentJson=self.documentJson,documentType=self.documentType,urgent_type=self.urgent_type,digit_sign=self.digit_sign,attempted_folder=self.attempted_name,sign_page_options=self.sign_page_options,options_page=self.options_page,data_document=result_data_document)
            db.session.add(insert_document)
            db.session.flush()
            db.session.commit()
            # jam_hash = hash(self.sid) % 10**2
            # doc_id = "F-"  + str(ts)[-5:] + str(jam_hash) + str(self.fileid)[-1:] + str(insert_document.id)[-1:].upper()
            doc_id = self.documentID
            ref_code = self.documentType + '-R' + ''.join(random_digit_generator())
            res_refCode = check_insert_refCode_new_v(ref_code,self.sid,self.documentType)
            if res_refCode['result'] == 'OK':
                update_doc_id = paper_lessdocument.query.filter_by(step_id=self.sid).first()
                update_doc_id.document_id = doc_id
                db.session.commit()
                return {'result':'OK','messageText':'insert document details and refcode and documentid ok','document_Id':doc_id,'ref_id':res_refCode['messageText']}
            else:
                return {'result':'OK','messageText':'insert document details and documentid ok refcode ' + res_refCode['messageText']  +'!','document_Id':doc_id,'ref_id':res_refCode['messageText']}
        except Exception as ex:
            return {'result':'ER','messageText':None,'messageER':str(ex)}

    def insert_refCode(self,ref_Code,sid):
        self.ref_Code = ref_Code
        self.sid =sid
        try:
            db.session.add(paper_lessrefCode(ref_Code=self.ref_Code,ref_Detail=None,sid=self.sid))
            db.session.commit()
            return {'result':'OK','messageText':'insert refCode OK!'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}


    def insert_sendEmail(self,sid,status,to_email,from_email,qrCode_string,url_qrCode):
        self.sid = sid
        self.status = status
        self.to_email = to_email
        self.from_email = from_email
        self.qrCode_string = qrCode_string
        self.hash_to = hashlib.sha256(str(to_email).encode('utf8')).hexdigest()
        self.hash_from = hashlib.sha256(str(from_email).encode('utf8')).hexdigest()
        self.url_qrCode = url_qrCode
        self.hash_qrCode = hashlib.sha256(str(qrCode_string).encode('utf8')).hexdigest()
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        try:
            insert_email = paper_lessmail(sid=self.sid,status=status,to_mail=self.to_email,from_mail=self.from_email,qrcode_string=self.qrCode_string,hash_to=self.hash_to,hash_from=self.hash_from,url_qrcode=self.url_qrCode,time=str(st),qrcode_hash=self.hash_qrCode)
            db.session.add(insert_email)
            db.session.commit()
            return {'result':'OK','messageText':'insert send email and qrCode!','hash_urlqrCode':self.hash_qrCode}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}


    def insert_transactionChat(self,sidCode,statusId,OrderResult,email_one,statusSign,stepNum,sendChat,urlSign,propertyChat=None,onechat_id=None):
        self.sidCode = sidCode
        self.statusId = statusId
        self.OrderResult = OrderResult
        self.email_one = email_one
        self.statusSign = statusSign
        self.stepNum = stepNum
        self.sendChat = sendChat
        self.urlSign = urlSign
        self.propertyChat = propertyChat
        self.onechat_id = onechat_id
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        # print(self.sidCode,self.statusId,self.OrderResult,self.statusSign,self.propertyChat)

        try:
            insert_Chat = paper_lesstransactionChat(sidCode=self.sidCode,statusId=self.statusId,timeStamp=str(st),OrderResult=self.OrderResult,email_User=self.email_one,statusSign=self.statusSign,stepNum=self.stepNum,sendChat=self.sendChat,urlSign=self.urlSign,propertyChat=self.propertyChat,id_chat=self.onechat_id)
            db.session.add(insert_Chat)
            db.session.commit()
            return {'result':'OK','messageText':'insert chat!'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def insert_transactionChain(self,f_sid,f_file_id,f_transactionId,f_timestamp,f_metadate,f_user):
        self.f_sid = f_sid
        self.f_file_id = f_file_id
        self.f_transactionId = f_transactionId
        self.f_timestamp = f_timestamp
        self.f_metadate = f_metadate
        self.f_user = f_user
        self.f_row = 1
        st = datetime.datetime.fromtimestamp(self.f_timestamp).strftime('%d/%b/%Y %H:%M:%S')
        try:
            for i in paper_lesstransactionChain.query.filter_by(f_sid=self.f_sid).order_by((paper_lesstransactionChain.f_row).asc()).all():
                print(i)
                result_count_row = i.f_row
            self.f_row = int(result_count_row) + 1
        except Exception as ex:
            print(ex)
        print(self.f_row)
        try:
            insert_Chain = paper_lesstransactionChain(f_sid=self.f_sid,f_file_id=self.f_file_id,f_transactionId=self.f_transactionId,f_timestamp=str(st),f_metadate=self.f_metadate,f_userAccount=self.f_user,f_row=self.f_row)
            db.session.add(insert_Chain)
            db.session.commit()
            return {'result':'OK','messageText':'insert Chain OK!'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def insert_userProfile(self,p_username,p_userid,p_emailthai,p_taskchat=None,p_todo=None,p_doing=None,p_done=None,p_options=None,p_signca=None):
        self.p_username = p_username
        self.p_userid = p_userid
        self.p_emailthai = p_emailthai
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        if p_taskchat != None:
            self.p_taskchat = str(p_taskchat)
        else:
            self.p_taskchat = None
        self.p_todo = p_todo
        self.p_doing = p_doing
        self.p_done = p_done
        if p_signca != None:
            self.p_signca = p_signca
        else:
            self.p_signca = 'N'
        if p_options != None:
            self.p_options = p_options
        else:
            self.p_options = None
        print(self.p_signca)
        try:
            result_select = paper_lessuserProfile.query.filter_by(p_username=self.p_username,p_userid=self.p_userid).first()
            if result_select != None:
                result_select.p_updateTime = str(st)
                result_select.p_emailthai = self.p_emailthai
                result_select.p_signca=self.p_signca
                if result_select.p_taskchat == None:
                    result_select.p_taskchat=self.p_taskchat
                    result_select.p_todo=self.p_todo
                    result_select.p_doing=self.p_doing
                    result_select.p_done=self.p_done
                db.session.commit()
                return {'result':'OK','messageText':'update UserProfile OK!'}
            else:
                insert_userProfile = paper_lessuserProfile(p_username=self.p_username,p_userid=self.p_userid,p_updateTime=str(st),p_webHook=None,p_sign=None,p_emailUser=None,p_emailthai=self.p_emailthai,p_taskchat=self.p_taskchat,p_todo=self.p_todo,p_doing=self.p_doing,p_done=self.p_done,p_options=None,p_signca=self.p_signca,chat_noti=None,email_noti=None,permission_id=None)
                db.session.add(insert_userProfile)
                db.session.commit()
                return {'result':'OK','messageText':'insert UserProfile OK!'}
        except Exception as ex:
            print(str(ex))
            return {'result':'ER','messageText':str(ex)}

    def insert_login(self,account_id,username, access_time, vertify_token,access_token,access_token_time,access_token_begin,one_access_token,citizen_data,hash_data,biz_information,secure_number,ipaddress):
        self.account_id         = account_id
        self.username           = str(username).lower()
        self.access_time        = access_time
        self.access_time        = datetime.datetime.fromtimestamp(self.access_time).strftime('%Y-%m-%d %H:%M:%S')
        self.vertify_token      = vertify_token
        self.access_token       = access_token
        self.access_token_time  = int(access_token_time)
        self.access_token_begin = int(access_token_begin)
        self.one_access_token   = one_access_token
        self.citizen_data       = citizen_data
        self.hash_data          = str(hash_data)
        self.biz_information    = str(biz_information)
        self.secure_number      = secure_number
        self.ipaddress          = ipaddress
        ts = int(time.time())
        try:
            LoginUser_insert = paper_lesslogin(account_id=self.account_id,username=self.username,access_time=self.access_time,vertify_token=self.vertify_token,
                access_token=self.access_token,access_token_time=self.access_token_time,access_token_begin=self.access_token_begin,one_access_token=self.one_access_token,
                citizen_data=self.citizen_data,hash_data=self.hash_data,biz_information=self.biz_information,secure_number=self.secure_number,ipaddress=self.ipaddress)
            db.session.add(LoginUser_insert)
            db.session.commit()
            return {'result':'OK','messageText':'insertuser ok!'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def update_template_use_status_v3(self,username,templateCode,use_status):
        self.templateCode = templateCode
        self.username = username
        self.use_status = use_status
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        try:
            resultForUpdate = paper_lessstep.query.filter_by(step_Code=self.templateCode,username=self.username,status='ACTIVE').first()
            if resultForUpdate != None:
                resultForUpdate.status_Update = str(st)
                resultForUpdate.status_use = self.use_status
                db.session.commit()
                return {'result':'OK','messageText':'update ok'}
            else:
                return {'result':'ER','messageText':'not found data in db'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}


    def insert_paper_template_v10(self,step_Code,step_Data,step_Max,username,email,DateTime,step_Name,step_Upload,step_Description=None,template_images=None,qrCode_position=None,status_Update=None,documentDetails=None,urgent_type=None,template_biz=None,condition_temp=None,webhook=None,email_center=None,formula_temp=None,digit_sign=None,page_sign_options=None,options_page=None,use_status=None,time_expire=None,importance=None,last_digitsign=None):
        self.step_Code = step_Code
        self.step_Data = step_Data
        self.step_Max = step_Max
        self.username = username
        self.email = email
        self.DateTime = DateTime
        self.step_Description = step_Description
        self.step_Name = str(step_Name)
        self.step_Upload = step_Upload
        self.template_images = template_images
        self.qrCode_position = qrCode_position
        self.status = 'ACTIVE'
        self.status_Update = status_Update
        self.documentDetails = documentDetails
        self.urgent_type = urgent_type
        self.template_biz = template_biz
        self.time_expire = time_expire
        self.importance = importance
        self.last_digitsign = last_digitsign
        if use_status != None:
            self.use_status = use_status
        else:
            self.use_status = 'ACTIVE'
        try:
            tmp_eval_tax_id = eval(self.template_biz)
            tmp_tax_id = tmp_eval_tax_id['id_card_num']
        except Exception as e:
            tmp_tax_id = ''
        self.condition_temp = condition_temp
        self.webhook = webhook
        self.email_center = email_center
        self.formula_temp = str(formula_temp)
        self.digit_sign = digit_sign
        if str(self.urgent_type).replace(' ','') == '':
             self.urgent_type = 'M'
        self.page_sign_options = page_sign_options
        self.options_page = str(options_page)
        total_time = None
        if self.time_expire != None :
            time_ex_eval = eval(self.time_expire)
            status = time_ex_eval['status']
            if status == True:
                data_ex = eval(str(time_ex_eval['data_ex']))
                day = data_ex['day']
                hour = data_ex['hour']
                total_time = (int(day) * 24) + int(hour)
        try:
            if tmp_tax_id != '':
                count_row = paper_lessstep.query.filter(paper_lessstep.step_Name==self.step_Name,paper_lessstep.username==self.username,paper_lessstep.status=='ACTIVE',paper_lessstep.template_biz.contains(tmp_tax_id)).count()
            else:
                count_row = paper_lessstep.query.filter(paper_lessstep.step_Name==self.step_Name,paper_lessstep.username==self.username,paper_lessstep.status=='ACTIVE',paper_lessstep.template_biz=='').count()
            if count_row == 0:
                insert_template = paper_lessstep(step_Code=self.step_Code,step_Data=self.step_Data,step_Max=self.step_Max,username=self.username,email=self.email,DateTime=self.DateTime,
                step_Description=self.step_Description,step_Name=self.step_Name,step_Upload=self.step_Upload,
                template_images=json.dumps(self.template_images),template_biz=self.template_biz,qrCode_position=self.qrCode_position,
                status=self.status,status_Update=self.status_Update,documentDetails=self.documentDetails,urgent_type=self.urgent_type,
                condition_temp=self.condition_temp,webhook=self.webhook,email_center=self.email_center,formula_temp=self.formula_temp,digit_sign=self.digit_sign,page_sign_options=self.page_sign_options,options_page=self.options_page,
                status_use=self.use_status,time_expire=total_time,importance_doc=self.importance,last_digit_sign=self.last_digitsign)
                db.session.add(insert_template)
                db.session.flush()
                db.session.commit()
                return {'result':'OK','messageText':insert_template.sid}
            else:
                return {'result':'ER','messageText':'Duplicate Value!'}
        except exc.SQLAlchemyError as ex:
            print(ex)
            return {'result':'ER','messageText':'Duplicate Value!'}
        except Exception as ex:
            print(ex)
            return {'result':'ER','messageText':str(ex)}

class update:
    def update_stringpdf_v2(self,hash_sid_code,string_pdf,data_document,data_jwt):
        self.hash_sid_code = hash_sid_code
        self.string_pdf = string_pdf
        self.data_document = data_document
        self.data_jwt = data_jwt
        try:
            tmpdecodedata = self.data_document
            if 'messageText' in tmpdecodedata:
                tmp_datamessage = tmpdecodedata['messageText']
                if 'flow_eform' in tmp_datamessage:
                    tmpdata_flow_eform = eval(str(tmp_datamessage['flow_eform'])) 
            query_paperless = paper_lesstrack.query.filter_by(hash_sid_code = self.hash_sid_code).first()
            data_sid = query_paperless.step_data_sid
            # print('data_sid',data_sid)
            query_send_detail = paper_lesssender.query.filter_by(step_data_sid = data_sid).first()
            file_id = query_send_detail.file_id
            update_pdfstorage = paper_lesspdf.query.filter_by(fid = file_id).first()
            update_pdfstorage.string_pdf = self.string_pdf
            update_doc_detail = paper_lessdocument.query.filter_by(fileid = file_id).first()
            update_doc_detail.data_document = self.data_jwt
            update_step_data = paper_lessdatastep.query.filter_by(sid = data_sid).first()
            ts = int(time.time())
            st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
            update_step_data.data_json = str(tmpdata_flow_eform)
            update_step_data.update_time = st
            process_json = update_json_send(str(tmpdata_flow_eform))
            data_document_ = process_json['messageText']['data_document']
            # print('data_document',data_document_)
            status_document = process_json['messageText']['status_document']
            step_now = process_json['messageText']['step_now']

            update_send_detail = paper_lesssender.query.filter_by(step_data_sid = data_sid).first()
            update_send_detail.status_details = str(data_document_)
            update_send_detail.stepnow = step_now
            update_send_detail.document_status = status_document
            db.session.commit()
            return {'result':'OK','messageText':'update success !'}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':str(e)}

    def update_signature_group_v1(self,group_id,emailone,signbase):
        self.group_id = group_id
        self.emailone = emailone
        self.signbase = signbase
        try:
            tmp_query = tb_group_document.query.filter(tb_group_document.id==self.group_id,tb_group_document.status=='ACTIVE').first()
            if tmp_query != None:
                jsontmp_info = tmp_query.__dict__
                tmp_step_group_detail = jsontmp_info['step_group_detail']
                if tmp_step_group_detail != None:
                    tmp_step_group_detail = eval(tmp_step_group_detail)
                    for z in range(len(tmp_step_group_detail)):
                        if self.emailone in tmp_step_group_detail[z]['email_one']:
                            tmp_step_group_detail[z]['sign_base'] = str(self.signbase)
                            tmp_step_group_detail[z]['email_complete'] = str(self.emailone)
                            tmp_query.step_group_detail = str(tmp_step_group_detail)
                            db.session.commit()
                            return {'result':'OK','messageText':None}
                    return {'result':'ER','messageText':'data not found'}
                else:                
                    return {'result':'ER','messageText':'data not found'}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            print('error',str(e))
            return {'result':'ER','messageText':str(e)} 

    def update_hashid_ingroup_v1(self,group_id,hash_id):
        self.group_id = group_id
        self.hash_id = hash_id
        try:
            tmp_query = tb_group_document.query.filter(tb_group_document.id==self.group_id,tb_group_document.status=='ACTIVE').first()
            if tmp_query != None:
                tmp_query.hash_id = str(self.hash_id)
                db.session.commit()
                return {'result':'OK','messageText':None}
            else:                
                return {'result':'ER','messageText':'data not found'}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            print('error',str(e))
            return {'result':'ER','messageText':str(e)} 

    def update_pdf_ingroup_v1(self,group_id,pdf_data,email_thai):
        self.group_id = group_id
        self.pdf_data = pdf_data
        self.email_thai = email_thai
        try:
            tmp_query = tb_group_document.query.filter(tb_group_document.id==self.group_id,tb_group_document.status=='ACTIVE').first()
            if tmp_query != None:
                tmpstatus_group = tmp_query.status_group
                if tmpstatus_group != None:
                    tmpstatus_group = eval(tmpstatus_group)
                for n in range(len(tmpstatus_group)):
                    tmpemailOne = tmpstatus_group[n]['email_one']
                    if self.email_thai in tmpemailOne:
                        tmpstatus_group[n]['status'] = 'Complete'
                tmp_query.status_group = str(tmpstatus_group)
                tmp_query.pdf_sign = str(self.pdf_data)
                db.session.commit()
                return {'result':'OK','messageText':None}
            else:                
                return {'result':'ER','messageText':'data not found'}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            print('error',str(e))
            return {'result':'ER','messageText':str(e)} 
    
    def update_pdf_ingroup_v2(self,group_id,pdf_data,email_thai):
        self.group_id = group_id
        self.pdf_data = pdf_data
        self.email_thai = email_thai
        try:
            # sql_update = '''update "tb_group_document" set "pdf_sign"=:tmppdf_sign WHERE "id"=:tmpid AND "status"=:tmpstatus'''
            tmp_query = tb_group_document.query.filter(tb_group_document.id==self.group_id,tb_group_document.status=='ACTIVE').first()
            if tmp_query != None:
                # tmpstatus_group = tmp_query.status_group
                # if tmpstatus_group != None:
                #     tmpstatus_group = eval(tmpstatus_group)
                # for n in range(len(tmpstatus_group)):
                #     tmpemailOne = tmpstatus_group[n]['email_one']
                #     if self.email_thai in tmpemailOne:
                #         tmpstatus_group[n]['status'] = 'Complete'
                # tmp_query.status_group = str(tmpstatus_group)
                tmp_query.pdf_sign = str(self.pdf_data)
                db.session.commit()
                return {'result':'OK','messageText':None}
            else:                
                return {'result':'ER','messageText':'data not found'}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            print('error',str(e))
            return {'result':'ER','messageText':str(e)} 


    def update_toadd_document_ingroup_v1(self,sidcode,group_id,email_one,email_updateby):
        self.sidcode = sidcode
        self.group_id = group_id
        self.email_one = email_one
        self.email_updateby = email_updateby
        arr_sidgroup = []
        try:
            tmp_query = tb_group_document.query.filter(tb_group_document.id== self.group_id,tb_group_document.status=='ACTIVE').first()
            if tmp_query != None:
                tmp_sidgroup = eval(tmp_query.sid_group)
                tmp_datagroup = eval(tmp_query.data_group)
                tmp_email_group = eval(tmp_query.email_group)
                for z in range(len(self.sidcode)):
                    tmp_emailjson = self.email_one[z]
                    tmp_sidcode = self.sidcode[z]
                    select_result = paper_lessdocument.query.filter(paper_lessdocument.step_id==tmp_sidcode).first()
                    if select_result != None:
                        tmpjson = select_result.__dict__
                        tmp_options_page = tmpjson['options_page']
                        try:
                            tmp_options_page = eval(tmp_options_page)
                        except Exception as e:
                            tmp_options_page = ''
                        if 'subject_text' in tmp_options_page:
                            tmp_subject_text = tmp_options_page['subject_text']
                        if 'body_text' in tmp_options_page:
                            tmp_body_text = tmp_options_page['body_text']
                        json_data = {
                            "subject_text":tmp_subject_text,
                            "body_text":tmp_body_text
                        }
                    if tmp_sidcode in tmp_sidgroup:
                        return {'result':'ER','messageText':'duplicate document','data':tmp_sidcode}
                    tmp_sidgroup.append(tmp_sidcode)
                    tmp_datagroup.append(json_data)
                    tmp_email_group.append(tmp_emailjson)
                tmp_query.sid_group = str(tmp_sidgroup)
                tmp_query.data_group = str(tmp_datagroup)
                tmp_query.email_group = str(tmp_email_group)
                tmp_query.update_by = self.email_updateby
                db.session.commit()
                # for u in range(len(self.sidcode)):
                #     tmp_sidcode_01 = (self.sidcode[u])

                tmp_db = paper_lesssender.query.filter(paper_lesssender.step_data_sid.in_(self.sidcode)).all()
                for u in range(len(tmp_db)):
                    try:
                        tmp_groupid = eval(tmp_db[u].group_id)
                    except Exception as e:
                        tmp_groupid = []
                   
                    tmp_groupid.append(self.group_id)
                    tmp_db[u].group_id = str(tmp_groupid)
                    db.session.commit()
                return {'result':'OK','messageText':'success'}
            else:
                return {'result':'ER','messageText':'data not found'}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            print('error',str(e))
            return {'result':'ER','messageText':str(e)} 
    
    def update_changestatusgroup_v1(self,sidcode):
        self.sidcode = sidcode
        try:
            tmp_query = paper_lessdocument.query.filter(paper_lessdocument.step_id.in_(self.sidcode)).all()
            for u in range(len(tmp_query)):
                tmp_options_page = tmp_query[u].options_page
                if tmp_options_page != None:
                    tmp_options_page = eval(tmp_options_page)
                    if 'group_detail' in tmp_options_page:
                        tmp_group_detail = tmp_options_page['group_detail']
                        if 'group_status' in tmp_group_detail:
                            tmp_group_detail['group_status'] = False
                tmp_query[u].options_page = str(tmp_options_page)
                db.session.commit()
            return {'result':'OK','messageText':'success'}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            print('error',str(e))
            return {'result':'ER','messageText':str(e)}

    def update_toremove_document_ingroup_v1(self,sidcode,group_id,email_updateby):
        self.sidcode = sidcode
        self.group_id = group_id
        self.email_updateby = email_updateby
        try:
            tmp_query = tb_group_document.query.filter(tb_group_document.id== self.group_id).first()
            if tmp_query != None:
                tmp_sidgroup = eval(tmp_query.sid_group)
                tmp_data_group = eval(tmp_query.data_group)
                tmp_email_group = eval(tmp_query.email_group)
                tmp_group_data_json = eval(tmp_query.group_data_json)
                tmp_step_group = eval(tmp_query.step_group)
                for z in range(len(self.sidcode)):
                    tmp_sidcode = self.sidcode[z]
                    index_yu = tmp_sidgroup.index(tmp_sidcode)
                    tmp_data_group.pop(index_yu)
                    tmp_email_group.pop(index_yu)
                    tmp_step_group.pop(index_yu)
                    if 'data_sum' in tmp_group_data_json[0]:
                        tmp_group_data_json.pop(index_yu)
                    else:
                        tmp_group_data_json.pop(index_yu)
                        # print(tmp_group_data_json.pop(index_yu))
                        # tmp_group_data_json.pop(index_yu)
                        # print()
                        # return ''
                        # tmp_group_data_json[0].pop(index_yu)
                    tmp_sidgroup.remove(tmp_sidcode)
                tmp_query.sid_group = str(tmp_sidgroup)
                tmp_query.data_group = str(tmp_data_group)                
                tmp_query.email_group = str(tmp_email_group)
                tmp_query.group_data_json = str(tmp_group_data_json)
                tmp_query.step_group = str(tmp_step_group)
                tmp_query.update_by = self.email_updateby                           
                db.session.commit()
                tmp_db = paper_lesssender.query.filter(paper_lesssender.step_data_sid.in_(self.sidcode)).all()
                for u in range(len(tmp_db)):
                    tmp_groupid = eval(tmp_db[u].group_id)
                    tmp_groupid.remove(self.group_id)
                    tmp_db[u].group_id = str(tmp_groupid)
                    db.session.commit()
            return {'result':'OK','messageText':'success','tmpsid':tmp_sidgroup}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            print('error',str(e))
            return {'result':'ER','messageText':str(e)}

    def update_toremove_group_v1(self,group_id,email_updateby):
        self.group_id = group_id
        self.email_updateby = email_updateby
        try:
            for z in range(len(self.group_id)):
                tmp_groupid = self.group_id[z]
                tmp_query = tb_group_document.query.filter(tb_group_document.id==tmp_groupid).first()
                if tmp_query != None:
                    tmp_query.status = 'REJECT'
                    tmp_query.update_by = self.email_updateby
                    tmp_sidgroup = eval(tmp_query.sid_group)
                    db.session.commit()
                    tmp_db = paper_lesssender.query.filter(paper_lesssender.step_data_sid.in_(tmp_sidgroup)).all()
                    for u in range(len(tmp_db)):
                        tmp_groupid_01 = tmp_db[u].group_id
                        tmp_groupid_01 = eval(tmp_groupid_01)
                        tmp_groupid_01.remove(tmp_groupid)
                        tmp_db[u].group_id = str(tmp_groupid_01)
                        db.session.commit()
            return {'result':'OK','messageText':'success'}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            print('error',str(e))
            return {'result':'ER','messageText':str(e)}

    def update_template_v1(self,step_num,step_code,step_data):
        self.step_num = step_num
        self.step_code = step_code
        self.step_data = step_data
        edit_activity_data = None
        list_update = []
        list_ = []
        list_stepNum = []
        try:
            query_temp = paper_lessstep.query.filter_by(step_Code = self.step_code).first()
            step_Data = query_temp.step_Data
            step_Data_eval = (eval(str(step_Data)))
            status = query_temp.status  
            if status == 'REJECT':
                return {'result':'ER','messageText':'status invalid'}
            else:
                for i in range(len(step_Data_eval)):
                    step_num = step_Data_eval[i]['step_num']
                    list_stepNum.append(step_num)
                    step_detail_ = step_Data_eval[i]['step_detail']
                    step_detail_eval = eval(str(step_detail_))
                    if step_num == self.step_num:
                        tmp_json = {}
                        tmp_1 = {}
                        tmp_json['step_num'] = step_Data_eval[i]['step_num']
                        tmp_json['rf_step'] = step_Data_eval[i]['rf_step']
                        tmp_json['signpad'] = step_Data_eval[i]['signpad']
                        tmp_json['step_answer'] = step_Data_eval[i]['step_answer']
                        tmp_json['step_description'] = step_Data_eval[i]['step_description']
                        for j in range(len(step_detail_eval)):
                            activity_code = step_detail_eval[j]['activity_code']
                            activity_data = step_detail_eval[j]['activity_data']
                            if 'A04' not in activity_code: 
                                return {'result':'ER','messageText':'update error'}
                            for k in range(len(activity_code)):
                                if activity_code[k] == 'A04':
                                    # print(activity_data)
                                    tmp_2 = {}
                                    tmp_2['activity_data'] = eval(self.step_data)
                                    tmp_2['activity_code'] = step_detail_eval[j]['activity_code']
                                    tmp_2['activity_description'] = step_detail_eval[j]['activity_description']
                                    tmp_2['activity_status'] = step_detail_eval[j]['activity_status']
                                    tmp_2['activity_time'] = step_detail_eval[j]['activity_time']
                                    tmp_2['one_email'] = step_detail_eval[j]['one_email']
                                    tmp_2['sign_position'] = step_detail_eval[j]['sign_position']
                                    list_.append(tmp_2)
                        tmp_json['step_detail'] = list_
                        list_update.append(tmp_json)
                    else:
                        tmp_json = {}
                        list_update.append(step_Data_eval[i])
            if int(self.step_num) > len(Counter(list_stepNum)):
                return {'result':'ER','messageText':'fail'}
            con_str = ''
            for k in range(len(list_update)):
                con_str += str(list_update[k])
                if k != len(list_update) - 1:
                    con_str += ','
           
            query_temp.step_Data = con_str
            return {'result':'OK','messageText':'success'}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            print('error',str(e))
            return {'result':'ER','messageText':str(e)}

    def update_group_v1(self,sidcode,group_id):
        self.sidcode = sidcode
        self.group_id = group_id
        try:
            for z in range(len(self.sidcode)):
                tmp_list_group_id = []
                tmp_sidcode = self.sidcode[z]
                result_select = paper_lesssender.query.filter_by(step_data_sid=tmp_sidcode).first()
                if result_select.group_id == None:
                    tmp_list_group_id.append(self.group_id)
                    result_select.group_id = str(tmp_list_group_id)
                    db.session.commit()
                else:
                    tmp_group_idarr = eval(result_select.group_id)
                    tmp_group_idarr.append(self.group_id)
                    result_select.group_id = str(tmp_group_idarr)
                    db.session.commit()
            return {'result':'OK','messageText':'success'}
        except Exception as e:
            return {'result':'ER','messageText':str(e)}

    def update_stringpdf(self,hash_sid_code,string_pdf,data_document):
        self.hash_sid_code = hash_sid_code
        self.string_pdf = string_pdf
        self.data_document = data_document
        try:
            query_paperless = paper_lesstrack.query.filter_by(hash_sid_code = self.hash_sid_code).first()
            data_sid = query_paperless.step_data_sid
            query_send_detail = paper_lesssender.query.filter_by(step_data_sid = data_sid).first()
            file_id = query_send_detail.file_id
            update_pdfstorage = paper_lesspdf.query.filter_by(fid = file_id).first()
            update_pdfstorage.string_pdf = self.string_pdf
            update_doc_detail = paper_lessdocument.query.filter_by(fileid = file_id).first()
            update_doc_detail.data_document = self.data_document
            return {'result':'OK','messageText':'update pdf success'}
        except Exception as e:
            return {'result':'ER','messageText':str(e)}

    def update_messageComment_v2(self,sidCode,email,id,comment,step):
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d-%m-%Y %H:%M:%S')
        st_indb = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        self.sidCode = sidCode
        self.email = email
        self.id = id
        self.comment = comment
        self.step = step
        tmp_json = {}
        list_json = []
        name_surename = ''
        dict_comment = {}
        try:
            #เช็ค email ใน citizen login
            query_name = paper_lesslogin.query.filter(paper_lesslogin.biz_information.contains(self.email)).all()
            if query_name != None :
                for x in range(len(query_name)):
                    biz_information = query_name[x].biz_information
                    biz_information_eval = eval(str(biz_information))
                    name = biz_information_eval['first_name_th']
                    name_surename += name
                    surename = biz_information_eval['last_name_th']
                    name_surename += ' ' + surename
                typeComment = 'update'
                dict_comment = getListUser(self.sidCode,self.email,name_surename,self.comment,typeComment)
            else :
                return {'result':'ER','messageText':'email incorret'}
            
            query_comment1 = paper_lessmessageComment.query.filter_by(sid = self.sidCode).order_by((paper_lessmessageComment.time_Update).desc()).first()
            if query_comment1 != None:
                msgComment = query_comment1.message_Comment 
                msgComment_eval = eval(str(msgComment))
                for x in range(len(msgComment_eval)):
                    if 'comment' in msgComment_eval[x] and 'comment_modified_by' in msgComment_eval[x] and 'comment_modified_date' in msgComment_eval[x] :
                        tmp_json['id'] = str(uuid.uuid4())
                        tmp_json['comment'] = msgComment_eval[x]['comment']
                        tmp_json['modified'] = msgComment_eval[x]['comment_modified_by']
                        tmp_json['modified_date'] = msgComment_eval[x]['comment_modified_date']
                        tmp_json['status'] = 'ON'
                        n = fine_name_surename(tmp_json['modified'])
                        tmp_json['name'] = n
                        tmp_json['step'] = None
                        list_json.append(tmp_json)
                        tmp_json = {}
                    else :
                        list_json.append(msgComment_eval[x])
                        tmp_json = {}
                query_comment1.message_Comment = str(list_json)
                db.session.commit()
                list_json = []
            

            query_comment = paper_lessmessageComment.query.filter_by(sid = self.sidCode).order_by((paper_lessmessageComment.time_Update).desc()).first()

            if self.id != '' or self.id != None: #update comment
                if query_comment != None:
                    # print('update!')
                    msg_comment = query_comment.message_Comment
                    msg_comment_eval = eval(str(msg_comment))
                    for x in range(len(msg_comment_eval)):
                        if msg_comment_eval[x]['id'] == self.id:
                            if msg_comment_eval[x]['status'] == 'ON':
                                if msg_comment_eval[x]['modified'] == self.email:
                                    # print(msg_comment_eval[x])
                                    tmp_json['id'] = self.id
                                    tmp_json['comment'] = self.comment
                                    tmp_json['modified_date'] = st
                                    tmp_json['modified'] = self.email
                                    tmp_json['status'] = 'ON'
                                    n = fine_name_surename(tmp_json['modified'])
                                    tmp_json['name'] = n
                                    tmp_json['step'] = self.step
                                    list_json.append(tmp_json)
                                    tmp_json = {}
                                else :
                                    return {'result':'ER','messageText':'ไม่พบข้อมูล'}
                            else :
                                return {'result':'ER','messageText':'ไม่พบข้อมูล'}
                        else :
                            tmp_json['id'] = msg_comment_eval[x]['id']
                            tmp_json['comment'] = msg_comment_eval[x]['comment']
                            tmp_json['modified_date'] = msg_comment_eval[x]['modified_date']
                            tmp_json['modified'] = msg_comment_eval[x]['modified']
                            tmp_json['status'] = msg_comment_eval[x]['status']
                            n = fine_name_surename(tmp_json['modified'])
                            tmp_json['name'] = n
                            # tmp_json['step'] = msg_comment_eval[x]['step']
                            if 'step' in  msg_comment_eval[x]:
                                tmp_json['step'] = msg_comment_eval[x]['step']
                            else:
                                tmp_json['step'] = None
                            list_json.append(tmp_json)
                            tmp_json = {}
                    query_comment.message_Comment = str(list_json)
                    db.session.commit()
                    return {'result':'OK','messageText':list_json,'dict_comment':dict_comment}
                else:
                    return {'result':'ER','messageText':'ไม่พบข้อมูล'}
            else:
                return {'result':'ER','messageText':'ไม่พบข้อมูล'}

        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':str(ex)}

    def update_username_admin(self,username,email):
        self.username = username
        self.email = email
        status = None
        try:
            update_result = tb_user_admin.query.filter(tb_user_admin.username == self.username).first()
            status = update_result.status
            if(status == 'Reject'):
                return {'result': 'ER', 'messageText': 'The user status is already reject'}
            if update_result != None:
                update_result.status = "Reject"
                db.session.commit()
                return {'result': 'OK', 'messageText': 'delete success!'}
            else:
                return {'result': 'ER', 'messageText': 'update error!'}

        except Exception as e:
            return {'result': 'ER', 'messageText': str(e)}

    def update_attmp_folder_name_for_document_v1(self,sidcode,folder_name):
        self.sidcode = sidcode
        self.folder_name = folder_name
        try:
            result_select = paper_lessdocument.query.filter(paper_lessdocument.step_id == self.sidcode).first()
            if result_select != None:
                result_select.attempted_folder = self.folder_name
                db.session.commit()
                return {'result': 'OK', 'messageText': 'success'}
            else:
                return {'result':'ER','messageText':'fail'}

        except Exception as e:
            return {'result':'ER','messageText':str(e)}
    def update_username_admin(self,username,email):
        self.username = username
        self.email = email

        status = None
        try:
            update_result = tb_user_admin.query.filter(tb_user_admin.username == self.username).first()
            status = update_result.status
            if(status == 'Reject'):
                return {'result': 'ER', 'messageText': 'The user status is already reject'}
            if update_result != None:
                update_result.status = "Reject"
                db.session.commit()
                return {'result': 'OK', 'messageText': 'delete success!'}
            else:
                return {'result': 'ER', 'messageText': 'update error!'}

        except Exception as e:
            return {'result': 'ER', 'messageText': str(e)}

    def update_hashtoken_for_logout_v1(self,hash_token_data):
        self.hash_token_data = hash_token_data
        try:
            result_select = paper_lesstoken_required.query.filter(paper_lesstoken_required.hash_one_access_token==self.hash_token_data).first()
            if result_select != None:
                print(result_select)
        except exc.SQLAlchemyError as e:
            db.session.rollback()
            raise
            return {'result':'ER','messageText':'cant update','messageER':str(e)}
        except Exception as e:
            db.session.rollback()
            raise
            return {'result':'ER','messageText':'cant update','messageER':str(e)}
        finally:
            db.session.close()

    def update_login_user_admin_v1(self,username,password):
        self.username = username
        self.password = password
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        try:
            result_select = tb_user_admin.query.filter(tb_user_admin.username==self.username).first()
            if result_select != None:
                tmp_password = hash_512_v2(self.password)
                result_select.hash_data = tmp_password
                result_select.datetime_update = str(st)
                db.session.commit()
                return {'result':'OK','messageText':'update success'}
            else:
                return {'result':'ER','messageText':'data not found'}
        except exc.SQLAlchemyError as e:
            db.session.rollback()
            raise
            return {'result':'ER','messageText':'cant update','messageER':str(e)}
        except Exception as e:
            db.session.rollback()
            raise
            return {'result':'ER','messageText':'cant update','messageER':str(e)}
        finally:
            db.session.close()

    def update_id_chatRoom_v1(self,id_chat,email_user):
        self.email_user = email_user
        self.id_chat = id_chat
        try:
            result_select = paper_lesstransactionChat.query.filter(paper_lesstransactionChat.email_User==self.email_user).first()
        except Exception as e:
            print(str(e))

    def update_req_v1(self,textid,mesg,status_code):
        self.textid = textid
        self.mesg = mesg
        self.status_code = status_code
        try:
            result_select = tb_transactionlogrequest.query.filter(tb_transactionlogrequest.id==self.textid).first()
            if result_select != None:
                result_select.message = str(self.mesg)
                result_select.statuscode = self.status_code
                db.session.commit()
        except exc.SQLAlchemyError as ex:
            db.session.rollback()
            raise
        except Exception as e:
            db.session.rollback()
            raise
            return {'result':'ER','messageText':'cant update','messageER':str(e)}
        finally:
            db.session.close()



    def update_status_user(self):
        ts = int(time.time())
        ts_string = date_start_tmp = datetime.datetime.fromtimestamp(ts)
        # print(ts_string)
        query_temp_tokendate = db.session.query(\
            paper_lesstoken_required,
            )\
            .filter(paper_lesstoken_required.expire_datetime!=None,paper_lesstoken_required.expire_datetime<=ts_string)\
            .count()
        print(query_temp_tokendate)
        return ''
        for i in paper_lesstoken_required.query.filter().all():
            if i.expire_datetime != None:
                print(i)
                # ts_status = (i.expire_datetime).timestamp()
                # if int(ts_status) <= int(ts):
                #     try:
                #         id_status = i.id
                #         result_select = paper_lesstoken_required.query.filter(paper_lesstoken_required.id==id_status).first()
                #         result_select.status_online = 'INACTIVE'
                #         db.session.commit()
                #     except exc.SQLAlchemyError as e:
                #         db.session.rollback()
                #         return {'result':'ER','messageText':'cant update','messageER':str(e)}
                #     except Exception as e:
                #         db.session.rollback()
                #         return {'result':'ER','messageText':'cant update','messageER':str(e)}
                #     finally:
                #         db.session.close()
                # else:
                #     try:
                #         id_status = i.id
                #         result_select = paper_lesstoken_required.query.filter(paper_lesstoken_required.id==id_status).first()
                #         result_select.status_online = 'ACTIVE'
                #         db.session.commit()
                #     except exc.SQLAlchemyError as e:
                #         db.session.rollback()
                #         return {'result':'ER','messageText':'cant update','messageER':str(e)}
                #     except Exception as e:
                #         db.session.rollback()
                #         return {'result':'ER','messageText':'cant update','messageER':str(e)}
                #     finally:
                #         db.session.close()

    def update_taskchat_nextstep(self,jsonarr_data):
        self.jsonarr_data = jsonarr_data
        for i in range(len(self.jsonarr_data)):
            # print(self.jsonarr_data[i])
            ts = int(time.time())
            st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
            print(self.jsonarr_data[i])
            create_task = self.jsonarr_data[i]['messageText']['create_task']
            get_project = self.jsonarr_data[i]['messageText']['get_project']
            status = self.jsonarr_data[i]['result']
            self.sid_code = self.jsonarr_data[i]['sidCode']
            self.emailUser = self.jsonarr_data[i]['email']
            self.step_num = self.jsonarr_data[i]['step_num']
            self.task_message = self.jsonarr_data[i]['messageText']
            self.task_project_id = get_project['data'][0]['project_id']
            self.task_uid = create_task['data']['task_id']
            self.task_state_id = create_task['data']['state']['state_id']
            self.task_state_name = create_task['data']['state']['name']
            self.task_timeupdate = str(st)
            if status =='OK':
                self.task_status = 'Y'
            elif status =='NO':
                self.task_status = 'N'
            elif status =='ER':
                self.task_status = 'ER'
            try:
                selectResult = paper_lesstransactionTask.query.filter(paper_lesstransactionTask.task_sidCode==self.sid_code,paper_lesstransactionTask.task_stepnum==self.step_num,paper_lesstransactionTask.task_emailUser==self.emailUser).first()
                selectResult.task_project_id = self.task_project_id
                selectResult.task_uid = self.task_uid
                selectResult.task_timeupdate = self.task_timeupdate
                selectResult.task_state_id = self.task_state_id
                selectResult.task_status = self.task_status
                selectResult.task_state_name = self.task_state_name
                selectResult.task_message = str(self.task_message)
                db.session.commit()
            except Exception as ex:
                return {'result':'ER','messageText':'cant update','messageER':str(ex)}
        return {'result':'OK','messageText':'update ok'}


    def update_taskchat_state(self,sidCode,emailUser,step_num,task_state_name_new,task_state_id_new):
        self.emailUser = emailUser
        self.step_num = step_num
        self.sidCode = sidCode
        self.task_state_name_new = task_state_name_new
        self.task_state_id_new = task_state_id_new
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        try:
            selectResult = paper_lesstransactionTask.query.filter(paper_lesstransactionTask.task_sidCode==self.sidCode,paper_lesstransactionTask.task_stepnum==self.step_num,paper_lesstransactionTask.task_emailUser==self.emailUser).first()
            selectResult.task_state_name = self.task_state_name_new
            selectResult.task_state_id = self.task_state_id_new
            selectResult.task_timeupdate = str(st)
            db.session.commit()
            return {'result':'OK','messageText':'update ok'}
        except Exception as ex:
            return {'result':'ER','messageText':'cant update','messageER':str(ex)}

    def update_transactionfile(self,json_data,folder_name,storagesum):
        self.json_data = str(json_data)
        self.folder_name = folder_name
        self.storagesum = str(storagesum)
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        try:
            selectResult = paper_lesstransactionfile.query.filter(paper_lesstransactionfile.folder_name==self.folder_name).first()
            selectResult.json_data = self.json_data
            selectResult.timeupdate = str(st)
            selectResult.storage = self.storagesum
            db.session.commit()
            return {'result':'OK','messageText':'update ok'}
        except Exception as ex:
            return {'result':'ER','messageText':'can"t update','messageER':str(ex)}

    def updateTokenPaperlessSystem(self,tokenHashOnetoken,tokenPaperless):
        self.tokenHashOnetoken = tokenHashOnetoken
        self.tokenPaperless = tokenPaperless
        sha512encode = hashlib.sha512(str(self.tokenHashOnetoken).encode('utf-8')).hexdigest()
        ts = int(time.time())
        expire_date = int(time.time()) + 3600
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        expire_date_string = datetime.datetime.fromtimestamp(expire_date).strftime('%d/%b/%Y %H:%M:%S')
        try:
            sql = '''UPDATE tb_token_required SET "access_token_system"=:tmpaccess_token_system,"updatetime"=:tmpupdatetime,"expire_datetime"=:tmpexpire_datetime WHERE "hash_one_access_token"=:tmphash_one_access_token'''
            with engine.connect() as connection:
                result_update = connection.execute(text(sql),tmpaccess_token_system=str(self.tokenPaperless),tmpupdatetime=st,tmpexpire_datetime=expire_date_string,tmphash_one_access_token=str(sha512encode))
                # result2 = [dict(row) for row in result_update]
                connection.close() 
            # selectResult = paper_lesstoken_required.query.filter(paper_lesstoken_required.hash_one_access_token==sha512encode).first()
            # selectResult.access_token_system = self.tokenPaperless
            # selectResult.updatetime = st
            # selectResult.expire_datetime = expire_date_string
            # db.session.commit()
            return {'result':'OK','messageText':'update ok'}
        except Exception as ex:
            print(str(ex))
            return {'result':'ER','messageText':'can"t update','messageER':str(ex)}
        finally:
            connection.close()

    def update_delete_documentTemplate_v1(self,email,documentUser,documentType):
        self.email = email
        self.documentUser = documentUser
        self.documentType = documentType
        resultSelect = paper_lessdocument_detail.query.filter_by(email=self.email,documentUser=self.documentUser,documentStatus='ACTIVE',documentType=self.documentType).first()
        try:
            if resultSelect != None:
                resultSelect.documentStatus = 'REJECT'
                db.session.commit()
                return {'result':'OK','messageText':'delete ok'}
            else:
                return {'result':'ER','messageText':'can"t update','messageER':'not found data in db'}
        except Exception as ex:
            return {'result':'ER','messageText':'can"t update','messageER':str(ex)}

    def update_delete_documentTemplate_v2(self,document_code):
        self.document_code = document_code
        resultSelect = paper_lessdocument_detail.query.filter_by(documentCode=self.document_code,documentStatus='ACTIVE').first()
        try:
            tmp_documentType = resultSelect.documentType
            tmp_username = resultSelect.documentUser
            tmp_biz_info = resultSelect.biz_info
            if tmp_biz_info != None:
                if tmp_biz_info != 'None':
                    if tmp_biz_info != '':
                        tmp_id_card_num = eval(tmp_biz_info)['id_card_num']
                    else:
                        tmp_id_card_num = ''
                else:
                    tmp_biz_info = ''
            else:
                tmp_biz_info = ''
            if tmp_biz_info != '':
                count_template = paper_lessstep.query.filter(paper_lessstep.documentDetails==tmp_documentType,paper_lessstep.status=='ACTIVE',paper_lessstep.template_biz.contains(tmp_biz_info)).count()
            else:
                count_template = paper_lessstep.query.filter(paper_lessstep.documentDetails==tmp_documentType,paper_lessstep.status=='ACTIVE',paper_lessstep.username==tmp_username).count()
            if count_template == 0:
                if resultSelect != None:
                    resultSelect.documentStatus = 'REJECT'
                    db.session.commit()
                    return {'result':'OK','messageText':'delete ok'}
                else:
                    return {'result':'ER','messageText':'can"t update','messageER':'not found data in db'}
            else:
                return {'result':'ER','messageText':'have template use documenttype','messageER':None,'code':'ERDT005'}
        except Exception as ex:
            print(str(ex))
            return {'result':'ER','messageText':'can"t update','messageER':str(ex)}
        finally:
            db.session.close()


    def update_documentTemplate_v1(self,documentJson,documentUser,email,documentType,documentCode):
        self.documentJson_ = documentJson
        self.documentUser = documentUser
        self.email = email
        self.documentType = documentType
        self.documentCode = documentCode
        status_documentDetails = 'ACTIVE'
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        try:
            resultSelect = paper_lessdocument_detail.query.filter_by(email=self.email,documentUser=self.documentUser,documentStatus='ACTIVE',documentCode=self.documentCode,documentType=self.documentType).first()
            if resultSelect != None:
                ts = int(time.time())
                documentCode_new = datetime.datetime.fromtimestamp(ts).strftime('%Y%m-%d%H-%M%S-') + str(uuid.uuid4())
                db.session.add(paper_lessdocument_detail(documentJson=resultSelect.documentJson,documentUser=resultSelect.documentUser,documentUpdate=str(resultSelect.documentUpdate),documentStatus='REJECT',email=resultSelect.email,documentType=self.documentType,documentCode=documentCode_new,biz_info=resultSelect.biz_info))
                db.session.commit()
                resultSelect.documentJson = str(self.documentJson_)
                resultSelect.documentUser = self.documentUser
                resultSelect.documentUpdate = str(st)
                resultSelect.email = self.email
                resultSelect.documentType = self.documentType
                db.session.commit()
                return {'result':'OK','messageText':'update ok'}
            else:
                return {'result':'ER','messageText':'can"t update'}
        except Exception as ex:
            return {'result':'ER','messageText':'can"t update','messageER':str(ex)}

    def update_documentTemplate_v2(self,documentJson,documentUser,email,documentType,documentCode,business_info,service_permission=None,chat_bot=None):
        self.documentJson_ = documentJson
        self.documentUser = documentUser
        self.email = email
        self.documentType = documentType
        self.documentCode = documentCode
        self.business_info = business_info
        self.service_permission = service_permission
        if self.service_permission == None:
            self.service_permission = 'paperless'
        self.chat_bot = chat_bot
        if self.chat_bot == None:
            self.chat_bot = {"chat_bot_status":True,"chat_bot_id":"B8bb8493bce765ca99374070aefd167cb","chat_bot_token":"Bearer A16185216830056b1946f138905230c3c633dbeec596d4e8d962971c40269af89a5b101b00a02411db4d741312cee67d5","chat_bot_name":"Paperless Bot"}
        status_documentDetails = 'ACTIVE'
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        try:
            resultSelect = paper_lessdocument_detail.query.filter_by(email=self.email,documentUser=self.documentUser,documentStatus='ACTIVE',documentCode=self.documentCode,documentType=self.documentType).first()
            if resultSelect != None:
                ts = int(time.time())
                documentCode_new = datetime.datetime.fromtimestamp(ts).strftime('%Y%m-%d%H-%M%S-') + str(uuid.uuid4())
                db.session.add(paper_lessdocument_detail(documentJson=resultSelect.documentJson,documentUser=resultSelect.documentUser,documentUpdate=str(resultSelect.documentUpdate),documentStatus='REJECT',email=resultSelect.email,documentType=self.documentType,documentCode=documentCode_new,biz_info=resultSelect.biz_info,service_permission=resultSelect.service_permission,other_service_permission=None,chat_bot=resultSelect.chat_bot))
                db.session.commit()
                resultSelect.documentJson = str(self.documentJson_)
                resultSelect.documentUser = self.documentUser
                resultSelect.documentUpdate = str(st)
                resultSelect.email = self.email
                resultSelect.documentType = self.documentType
                resultSelect.biz_info = self.business_info
                resultSelect.service_permission = self.service_permission
                resultSelect.chat_bot = str(self.chat_bot)
                db.session.commit()
                return {'result':'OK','messageText':'update ok'}
            else:
                return {'result':'ER','messageText':'can"t update','messageER':'not found data'}
        except Exception as ex:
            return {'result':'ER','messageText':'can"t update','messageER':str(ex)}

    def update_documentTemplate_v5(self,documentJson,documentUser,email,documentType,documentCode,business_info,service_permission,other_service_permission,chat_bot):
        self.documentJson_ = documentJson
        self.documentUser = documentUser
        self.email = email
        self.documentType = documentType
        self.documentCode = documentCode
        self.business_info = business_info
        self.service_permission = service_permission
        self.chat_bot = chat_bot
        self.other_service_permission = other_service_permission
        # if self.chat_bot == None:
        #     self.chat_bot = {"chat_bot_status":True,"chat_bot_id":"B8bb8493bce765ca99374070aefd167cb","chat_bot_token":"Bearer A16185216830056b1946f138905230c3c633dbeec596d4e8d962971c40269af89a5b101b00a02411db4d741312cee67d5","chat_bot_name":"Paperless Bot"}
        status_documentDetails = 'ACTIVE'
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        try:
            resultSelect = paper_lessdocument_detail.query.filter_by(documentStatus='ACTIVE',documentCode=self.documentCode,documentType=self.documentType).first()
            if resultSelect != None:
                ts = int(time.time())
                documentCode_new = datetime.datetime.fromtimestamp(ts).strftime('%Y%m-%d%H-%M%S-') + str(uuid.uuid4())
                db.session.add(paper_lessdocument_detail(documentJson=resultSelect.documentJson,documentUser=resultSelect.documentUser,documentUpdate=str(resultSelect.documentUpdate),documentStatus='REJECT',email=resultSelect.email,documentType=self.documentType,documentCode=documentCode_new,biz_info=resultSelect.biz_info,service_permission=resultSelect.service_permission,other_service_permission=resultSelect.other_service_permission,chat_bot=resultSelect.chat_bot))
                db.session.commit()
                resultSelect.documentJson = str(self.documentJson_)
                resultSelect.documentUser = self.documentUser
                resultSelect.documentUpdate = str(st)
                resultSelect.email = self.email
                resultSelect.documentType = self.documentType
                resultSelect.biz_info = self.business_info
                resultSelect.service_permission = self.service_permission
                resultSelect.other_service_permission = str(self.other_service_permission)
                resultSelect.chat_bot = str(self.chat_bot)
                db.session.commit()
                return {'result':'OK','messageText':'success'}
            else:
                return {'result':'ER','messageText':'fail','messageER':'not found data'}
        except Exception as ex:
            return {'result':'ER','messageText':'fail','messageER':str(ex)}

    def token_formChat_v1(self,userId,username,token,citizen_data,biz_info):
        self.token = token
        self.userId = userId
        self.username = username
        self.citizen_data = citizen_data
        self.biz_info = biz_info
        # print(self.userId,self.username)
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        try:
            resultForUpdate = paper_lesslogin.query.filter_by(account_id=self.userId,username=self.username).first()
            if resultForUpdate != None:
                resultForUpdate.one_access_token = self.token
                resultForUpdate.citizen_data = self.citizen_data
                resultForUpdate.biz_information = self.biz_info
                resultForUpdate.access_time = str(st)
                db.session.commit()
                return {'result':'OK','messageText':'update ok'}
            else:
                return {'result':'OK','messageText':''}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def update_template_v3(self,username,templateCode):
        self.templateCode = templateCode
        self.username = username
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        try:
            resultForUpdate = paper_lessstep.query.filter_by(step_Code=self.templateCode,username=self.username,status='ACTIVE').first()
            if resultForUpdate != None:
                resultForUpdate.status_Update = str(st)
                resultForUpdate.status = 'REJECT'
                db.session.commit()
                return {'result':'OK','messageText':'update ok'}
            else:
                return {'result':'ER','messageText':'not found data in db'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def update_template_use_status_v3(self,username,templateCode,use_status):
        self.templateCode = templateCode
        self.username = username
        self.use_status = use_status
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        try:
            resultForUpdate = paper_lessstep.query.filter_by(step_Code=self.templateCode,username=self.username,status='ACTIVE').first()
            if resultForUpdate != None:
                resultForUpdate.status_Update = str(st)
                resultForUpdate.status_use = self.use_status
                db.session.commit()
                return {'result':'OK','messageText':'update ok'}
            else:
                return {'result':'ER','messageText':'not found data in db'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def update_LoadLog(self,sidCode,jsoninfo,count_download):
        self.sidCode = sidCode
        self.jsoninfo = str(jsoninfo)
        self.count_download = count_download
        try:
            resultForUpdate = paper_lesstransactionLoad.query.filter_by(sidCode=self.sidCode).first()
            resultForUpdate.count_download = self.count_download
            resultForUpdate.jsonInformation = self.jsoninfo
            db.session.commit()
            return {'result':'OK','messageText':'update ok'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def update_LoadLogQrCode(self,sidCode,jsoninfo,count_download):
        self.sidCode = sidCode
        self.jsoninfo = str(jsoninfo)
        self.count_download = count_download
        ts = int(time.time())
        random_number = string.ascii_letters + string.digits
        random_number = ''.join(random.choice(random_number) for i in range(128))
        random_number = str(random_number).upper() + str(ts)
        try:
            resultForUpdate = paper_lesstransactionLoadQr.query.filter_by(sidCode=self.sidCode).first()
            resultForUpdate.count_download = self.count_download
            resultForUpdate.jsonInformation = self.jsoninfo
            resultForUpdate.key_gen = random_number
            db.session.commit()
            return {'result':'OK','messageText':'update ok','keygen':random_number}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def update_statusDoc_v1(self,sidCode,type_status):
        self.sidCode = sidCode
        self.type_status = type_status
        try:
            resultForUpdate = paper_lesssender.query.filter_by(step_data_sid=self.sidCode).first()
            if resultForUpdate != None:
                resultForUpdate.status = str(self.type_status).upper()
                db.session.commit()
                return {'result':'OK','messageText':'update ok'}
            else:
                return {'result':'ER','messageText':'can"t update'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def update_status_document_v2(self,username,userEmail,sidCode,type_status):
        self.username = username
        self.userEmail = userEmail
        self.sidCode = sidCode
        self.type_status = type_status
        tmp_list_chatid = []
        try:
            query_update = paper_lesssender.query.filter_by(send_user=self.username,sender_email=self.userEmail,step_data_sid=self.sidCode).first()
            if query_update != None:
                query_update.status = str(self.type_status).upper()
                db.session.commit()                
                return {'result':'OK','messageText':'success'}
            else:
                return {'result':'ER','messageText':'fail'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def update_statusDoc(self,username,userEmail,sidCode,type_status):
        self.username = username
        self.userEmail = userEmail
        self.sidCode = sidCode
        self.type_status = type_status
        try:
            resultForUpdate = paper_lesssender.query.filter_by(send_user=self.username,sender_email=self.userEmail,step_data_sid=self.sidCode).first()
            if resultForUpdate != None:
                resultForUpdate.status = str(self.type_status).upper()
                db.session.commit()
                return {'result':'OK','messageText':'update ok'}
            else:
                return {'result':'ER','messageText':'can"t update'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def update_BizProfile(self,bizTax,bizInfoJson,bizRole):
        self.bizTax        = bizTax
        self.bizInfoJson   = str(bizInfoJson)
        self.bizRole       = str(bizRole)
        try:
            with engine.connect() as connection:
                result_insert = connection.execute('UPDATE "tb_bizProfile" SET "bizInfoJson"=%s,"bizRole"=%s WHERE "transactionId" = (SELECT "transactionId" FROM "tb_bizProfile" WHERE "bizTax"=%s LIMIT(1))', self.bizInfoJson,self.bizRole,self.bizTax)
            connection.close()
            return {'result':'OK','messageText':'update ok'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def update_LogLoingBiz(self,username,userId,JsonBiz):
        self.username   = str(username).lower()
        self.userId     = userId
        self.JsonBiz    = str(JsonBiz)
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        try:
            resultForUpdate = paper_lessbizLogin.query.filter_by(account_id=self.userId,username=self.username).first()
            resultForUpdate.update_time = str(st)
            resultForUpdate.biz_information = self.JsonBiz
            db.session.commit()
            return {'result':'OK','messageText':'update ok'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}
        finally:
            db.session.close()


    def update_messageComment(self,sidCode,email,messageComment):
        self.sidCode            = sidCode
        self.email              = email
        self.messageComment     = messageComment
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d-%m-%Y %H:%M:%S')
        st_indb = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        json_data = {}
        arr_modified_by = []
        try:
            result_selectMessageComment = paper_lessmessageComment.query.filter_by(sid=self.sidCode).order_by((paper_lessmessageComment.time_Update).desc()).first()
            try:
                json_data['messageComment'] = eval(result_selectMessageComment.message_Comment)
            except Exception as ex:
                return {'result':'ER','messageText':'ไม่สามารถแปลงข้อมูล Json ได้'}
            for i in range(len(json_data['messageComment'])):
                arr_modified_by.append(json_data['messageComment'][i]['comment_modified_by'])
                if self.email == json_data['messageComment'][i]['comment_modified_by']:
                    json_data['messageComment'][i]['comment'] = self.messageComment
                    json_data['messageComment'][i]['comment_modified_date'] = str(st)
                    result_selectMessageComment.message_Comment = str(json_data['messageComment'])
                    db.session.commit()
            return {'result':'OK','messageText':json_data}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def update_LoginUser(self,account_id,username, access_time, vertify_token,access_token,access_token_time,access_token_begin,one_access_token,citizen_data,hash_data,biz_information,secure_number,ipaddress):
        self.account_id             = account_id
        self.username               = str(username).lower()
        self.access_time            = access_time
        self.access_time            = datetime.datetime.fromtimestamp(self.access_time).strftime('%Y-%m-%d %H:%M:%S')
        self.vertify_token          = vertify_token
        self.access_token           = access_token
        self.access_token_time      = int(access_token_time)
        self.access_token_begin     = int(access_token_begin)
        self.one_access_token       = one_access_token
        self.citizen_data           = citizen_data
        self.hash_data              = str(hash_data)
        self.biz_information        = str(biz_information)
        self.secure_number          = secure_number
        self.ipaddress              = ipaddress
        try:
            update_LoginUser = paper_lesslogin.query.filter_by(account_id=self.account_id,username=self.username).first()
            update_LoginUser.access_time        = self.access_time
            update_LoginUser.vertify_token      = self.vertify_token
            update_LoginUser.access_token       = self.access_token
            update_LoginUser.access_token_time  = self.access_token_time
            update_LoginUser.access_token_begin = self.access_token_begin
            update_LoginUser.one_access_token   = self.one_access_token
            update_LoginUser.citizen_data       = self.citizen_data
            update_LoginUser.hash_data          = self.hash_data
            update_LoginUser.biz_information    = self.biz_information
            update_LoginUser.secure_number      = self.secure_number
            update_LoginUser.ipaddress          = self.ipaddress
            db.session.commit()
            return {'result': 'OK', 'messageText': 'updateok!','status_Code':200}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}
        finally:
            db.session.close()

    def update_refCode(self,sid,ref_Code,ref_Details):
        self.sid = sid
        self.ref_Code = ref_Code
        self.ref_Details = ref_Details
        try:
            update_ref_Details = paper_lessrefCode.query.filter_by(sid=self.sid,ref_Code=self.ref_Code).first()
            update_ref_Details.ref_Detail = self.ref_Details
            db.session.commit()
            return {'result': 'OK', 'messageText': 'Update OK!','status_Code':200}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def update_pdf(self,file_data,data_sign):
        self.file_data = file_data
        self.data_sign = data_sign
        try:
            arr_sign = []
            sql = '''
                SELECT
                    tb_pdf_storage.fid
                FROM
                    tb_send_detail
                    INNER JOIN tb_pdf_storage ON tb_pdf_storage.fid = tb_send_detail.file_id 
                WHERE
                    step_data_sid =:sidtmp 
            '''
            connection = engine.connect()
            result = connection.execute(sql,sidtmp=self.file_data)
            data = [dict(row) for row in result]
            if len(data) > 0:
                tmpfile_id = data[0]['fid']
                update_package =  connection.execute('UPDATE "tb_pdf_storage" SET "string_sign"=%s,"hash_sign"=%s,"transactions"=%s,"e_form"=%s,"support_user"=%s,"support_ca"=%s,"storage_gb"=%s,"one_box_gb"=%s,"back_up"=%s,"offer"=%s,"implement"=%s,"cost_month"=%s,"updatetime"=%s \
                WHERE "code_service"=%s RETURNING "code_service"',self.name_service,self.type_service,self.transactions,self.eform,self.support_user,self.support_ca,self.storage,self.one_box,self.back_up,self.offer,self.implement,self.cost_month,st,self.code_service)
            for u in paper_lesstrack.query.filter_by(step_data_sid=self.file_data).all():
                for a in paper_lesspdf.query.filter_by(fid=u.file_id).all():
                    if a.string_sign == None or len(a.string_sign) == 0:
                        update_data_pdf = paper_lesspdf.query.filter_by(fid=u.file_id).first()
                        update_data_pdf.string_sign = self.data_sign
                        sha512encode = hashlib.sha512(str(self.data_sign).encode('utf-8')).hexdigest()
                        update_data_pdf.hash_sign = sha512encode
                        db.session.commit()
                        return {'result': 'OK', 'messageText': 'Update OK!','status_Code':200}
                    else:
                        update_datapdf = paper_lesspdf.query.filter_by(fid=u.file_id).first()
                        update_datapdf.string_sign = self.data_sign
                        sha512encode = hashlib.sha512(str(self.data_sign).encode('utf-8')).hexdigest()
                        update_datapdf.hash_sign = sha512encode
                        db.session.commit()
                        return {'result': 'OK', 'messageText': 'Update OK!','status_Code':200}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def update_pdf_v2(self,file_data,data_sign):
        self.file_data = file_data
        self.data_sign = data_sign
        sha512encode = hashlib.sha512(str(self.data_sign).encode('utf-8')).hexdigest()
        tmppath_pdf = None
        try:
            arr_sign = []
            with engine.connect() as connection:
                result = connection.execute(text('SELECT "tb_pdf_storage"."path","tb_pdf_storage"."path_pdf","tb_pdf_storage"."path_sign","tb_pdf_storage"."string_sign","tb_send_detail"."file_id" FROM "tb_send_detail" INNER JOIN "tb_pdf_storage" ON "fid" = "file_id" \
                    WHERE "step_data_sid"=:sidfile AND "status"=:status'),sidfile=self.file_data,status='ACTIVE')
                tmp = [dict(row) for row in result]
                tmp = tmp[0]
                connection.close()
            if tmp['string_sign'] == None:
                tmpfile_id = tmp['file_id']
                tmppath_sign = tmp['path_pdf']
                tmppath_data = tmp['path']
                r = updatefile_pdfsign_v1(self.data_sign,sha512encode,tmppath_data)
                print(r)
                if 'path_data' in r:
                    tmppath_pdf = r['path_pdf']
                    tmppath_data = r['path_data']
                    with engine.connect() as connection:
                        result = connection.execute(text('UPDATE "tb_pdf_storage" SET string_sign=:string_sign,hash_sign=:tmphash_sign,path_sign=:tmppathSign,path=:path WHERE fid=:fileid'),string_sign=self.data_sign,tmphash_sign=sha512encode,tmppathSign=tmppath_pdf,fileid=tmpfile_id,path=tmppath_data)
                        connection.close()
                    if result != None:
                        return {'result':'OK'}
                    else:
                        return {'result':'ER'}
                if r['result'] == 'OK':
                    tmppath_pdf = r['path_pdf']
                with engine.connect() as connection:
                    result = connection.execute(text('UPDATE "tb_pdf_storage" SET string_sign=:string_sign,hash_sign=:tmphash_sign,path_sign=:tmppathSign WHERE fid=:fileid'),string_sign=self.data_sign,tmphash_sign=sha512encode,tmppathSign=tmppath_pdf,fileid=tmpfile_id)
                    connection.close()
                if result != None:
                    return {'result':'OK'}
                else:
                    return {'result':'ER'}
            else:
                tmpfile_id = tmp['file_id']
                tmppath_sign = tmp['path_pdf']
                tmppath_data = tmp['path']
                r = updatefile_pdfsign_v1(self.data_sign,sha512encode,tmppath_data)
                if 'path_data' in r:
                    tmppath_pdf = r['path_pdf']
                    tmppath_data = r['path_data']
                    with engine.connect() as connection:
                        result = connection.execute(text('UPDATE "tb_pdf_storage" SET string_sign=:string_sign,hash_sign=:tmphash_sign,path_sign=:tmppathSign,path=:path WHERE fid=:fileid'),string_sign=self.data_sign,tmphash_sign=sha512encode,tmppathSign=tmppath_pdf,fileid=tmpfile_id,path=tmppath_data)
                        connection.close()
                    if result != None:
                        return {'result':'OK'}
                    else:
                        return {'result':'ER'}
                if r['result'] == 'OK':
                    tmppath_pdf = r['path_pdf']
                with engine.connect() as connection:
                    result = connection.execute(text('UPDATE "tb_pdf_storage" SET string_sign=:string_sign,hash_sign=:tmphash_sign,path_sign=:tmppathSign WHERE fid=:fileid'),string_sign=self.data_sign,tmphash_sign=sha512encode,tmppathSign=tmppath_pdf,fileid=tmpfile_id)
                    connection.close()
                if result != None:
                    return {'result':'OK'}
                else:
                    return {'result':'ER'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def update_step(self,sid_data_step,sign_email,activity_code,activity_status,step_num,signlat,signlong):
        self.sid_data_step = sid_data_step
        self.sign_email = sign_email
        self.activity_code = activity_code
        self.activity_status = activity_status
        self.step_num = step_num
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        st_update = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        try:
            json_step = {}
            update_step_data = paper_lessdatastep.query.filter_by(sid=self.sid_data_step).first()
            try:
                json_step = eval(update_step_data.data_json)
            except Exception as ex:
                print(ex)
            arr_step = []
            for z in range(len(json_step)):
                arr_step.append(json_step[z]['step_num'])
            for i in range(len(json_step)):
                if self.step_num in arr_step:
                    if json_step[i]['step_num'] == self.step_num:
                        if 'step_detail' in json_step[i]:
                            for o in range(len(json_step[i]['step_detail'])):
                                if 'one_email' in json_step[i]['step_detail'][o] and 'activity_code' in json_step[i]['step_detail'][o] and 'activity_status' in json_step[i]['step_detail'][o]:
                                    if self.sign_email == json_step[i]['step_detail'][o]['one_email']:
                                        for l in range(len(json_step[i]['step_detail'][o]['activity_code'])):
                                            if json_step[i]['step_detail'][o]['activity_code'][l] == str(self.activity_code):
                                                json_step[i]['step_detail'][o]['activity_status'][l] = self.activity_status
                                                json_step[i]['step_detail'][o]['activity_time'][l] = st_update
                                        json_step[i]['step_detail'][o]['sign_position']['sign_latitude'] = signlat
                                        json_step[i]['step_detail'][o]['sign_position']['sign_longitude'] = signlong
                                        json_step[i]['step_detail'][o]['sign_position']['sign_time'] = st_update
                else:
                    return {'result':'ER','messageText':str("step num Fail!")}
            json_step = json.dumps(json_step)
            update_step_data.data_json = (json_step)
            update_step_data.update_time = st
            db.session.commit()
            result_update = paper_lesstransactionChat.query.filter_by(
                sidCode=self.sid_data_step,email_User=self.sign_email,stepNum=self.step_num).first()
            result_update.statusSign = 'Y'
            db.session.commit()
            return {'result':'OK','messageText':'update OK!'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def update_step_v2(self,sid_data_step,sign_email,activity_code,activity_status,step_num,signlat,signlong):
        self.sid_data_step = sid_data_step
        self.sign_email = sign_email
        self.activity_code = activity_code
        self.activity_status = activity_status
        self.step_num = step_num
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        st_update = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        try:
            json_step = {}
            update_step_data = paper_lessdatastep.query.filter_by(sid=self.sid_data_step).first()
            try:
                json_step = eval(update_step_data.data_json)
            except Exception as ex:
                print(ex)
            arr_step = []
            if 'step_detail' in json_step:
                for o in range(len(json_step['step_detail'])):
                    if 'one_email' in json_step['step_detail'][o] and 'activity_code' in json_step['step_detail'][o] and 'activity_status' in json_step['step_detail'][o]:
                        if self.sign_email == json_step['step_detail'][o]['one_email']:
                            for l in range(len(json_step['step_detail'][o]['activity_code'])):
                                if json_step['step_detail'][o]['activity_code'][l] == str(self.activity_code):
                                    json_step['step_detail'][o]['activity_status'][l] = self.activity_status
                                    json_step['step_detail'][o]['activity_time'][l] = st_update
                            json_step['step_detail'][o]['sign_position']['sign_latitude'] = signlat
                            json_step['step_detail'][o]['sign_position']['sign_longitude'] = signlong
                            json_step['step_detail'][o]['sign_position']['sign_time'] = st_update
            else:
                for z in range(len(json_step)):
                    arr_step.append(json_step[z]['step_num'])
                for i in range(len(json_step)):
                    print(self.step_num)
                    if self.step_num in arr_step:
                        if json_step[i]['step_num'] == self.step_num:
                            if 'step_detail' in json_step[i]:
                                for o in range(len(json_step[i]['step_detail'])):
                                    if 'one_email' in json_step[i]['step_detail'][o] and 'activity_code' in json_step[i]['step_detail'][o] and 'activity_status' in json_step[i]['step_detail'][o]:
                                        if self.sign_email == json_step[i]['step_detail'][o]['one_email']:
                                            for l in range(len(json_step[i]['step_detail'][o]['activity_code'])):
                                                if json_step[i]['step_detail'][o]['activity_code'][l] == str(self.activity_code):
                                                    json_step[i]['step_detail'][o]['activity_status'][l] = self.activity_status
                                                    json_step[i]['step_detail'][o]['activity_time'][l] = st_update
                                            json_step[i]['step_detail'][o]['sign_position']['sign_latitude'] = signlat
                                            json_step[i]['step_detail'][o]['sign_position']['sign_longitude'] = signlong
                                            json_step[i]['step_detail'][o]['sign_position']['sign_time'] = st_update
                    else:
                        return {'result':'ER','messageText':str("step num Fail!")}
            json_step = json.dumps(json_step)
            update_step_data.data_json = (json_step)
            update_step_data.update_time = st
            db.session.commit()
            if self.activity_status == 'Complete':
                result_update = paper_lesstransactionChat.query.filter_by(sidCode=self.sid_data_step,email_User=self.sign_email,stepNum=self.step_num).first()
                if result_update != None:
                    result_update.statusSign = 'Y'
                    db.session.commit()
                result_update_mail = paper_lesstransactionMail.query.filter_by(sidCode=self.sid_data_step,email_User=self.sign_email,stepNum=self.step_num).first()
                if result_update_mail != None:
                    result_update_mail.statusSign = 'Y'
                    db.session.commit()
            elif self.activity_status == 'Approve':
                result_update = paper_lesstransactionChat.query.filter_by(sidCode=self.sid_data_step,email_User=self.sign_email,stepNum=self.step_num).first()
                if result_update != None:
                    result_update.statusSign = 'Y'
                    db.session.commit()
                result_update_mail = paper_lesstransactionMail.query.filter_by(sidCode=self.sid_data_step,email_User=self.sign_email,stepNum=self.step_num).first()
                if result_update_mail != None:
                    result_update_mail.statusSign = 'Y'
                    db.session.commit()
            elif self.activity_status == 'Reject':
                result_update = paper_lesstransactionChat.query.filter_by(sidCode=self.sid_data_step,email_User=self.sign_email,stepNum=self.step_num).first()
                if result_update != None:
                    result_update.statusSign = 'R'
                    db.session.commit()
                result_update_mail = paper_lesstransactionMail.query.filter_by(sidCode=self.sid_data_step,email_User=self.sign_email,stepNum=self.step_num).first()
                if result_update_mail != None:
                    result_update_mail.statusSign = 'R'
                    db.session.commit()
            return {'result':'OK','messageText':'update OK!'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def update_step_v3(self,sid_data_step,sign_email,activity_code,activity_status,step_num,signlat,signlong):
        self.sid_data_step = sid_data_step
        self.sign_email = sign_email
        self.activity_code = activity_code
        self.activity_status = activity_status
        self.step_num = step_num
        list_num_step_ref = []
        list_num_step_before = []
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        st_update = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        arr_step = []
        json_step = {}
        try:
            select_step_data = paper_lessdatastep.query.filter_by(sid=self.sid_data_step).first()
            try:
                json_step = eval(select_step_data.data_json)
            except Exception as e:
                return {'result':'ER','messageText':'data json cant eval to json'}
            # print(json_step)
            if 'step_num' in json_step:
                pass
            else:
                for u in range(len(json_step)):
                    tmp_step_num = json_step[u]['step_num']
                    if 'rf_step' in json_step[u]:
                        if json_step[u]['rf_step'] != None:
                            tmp_num_step_ref = str(json_step[u]['rf_step']).split('-')[1]
                            if tmp_num_step_ref == self.step_num:
                                list_num_step_ref.append(tmp_num_step_ref)
                                list_num_step_before.append(tmp_step_num)
                # print(list_num_step_ref,list_num_step_before)
                for u in range(len(json_step)):
                    tmp_step_num_2 = json_step[u]['step_num']
                    if len(list_num_step_ref) != 0:
                        for yy in range(len(list_num_step_ref)):
                            tmp_step_num_ref = list_num_step_ref[yy]
                            tmp_step_before_ref = list_num_step_before[yy]
                            if tmp_step_num_2 == tmp_step_before_ref:
                                tmp_step_detail = json_step[u]['step_detail']
                                for z in range(len(tmp_step_detail)):
                                    tmp_step_detail[z]['one_email'] = self.sign_email
            # print(json_step)
            if 'step_detail' in json_step:
                for o in range(len(json_step['step_detail'])):
                    if 'one_email' in json_step['step_detail'][o] and 'activity_code' in json_step['step_detail'][o] and 'activity_status' in json_step['step_detail'][o]:
                        if self.sign_email == json_step['step_detail'][o]['one_email']:
                            for l in range(len(json_step['step_detail'][o]['activity_code'])):
                                if json_step['step_detail'][o]['activity_code'][l] == str(self.activity_code):
                                    json_step['step_detail'][o]['activity_status'][l] = self.activity_status
                                    json_step['step_detail'][o]['activity_time'][l] = st_update
                            json_step['step_detail'][o]['sign_position']['sign_latitude'] = signlat
                            json_step['step_detail'][o]['sign_position']['sign_longitude'] = signlong
                            json_step['step_detail'][o]['sign_position']['sign_time'] = st_update
            else:
                for z in range(len(json_step)):
                    arr_step.append(json_step[z]['step_num'])
                for i in range(len(json_step)):
                    print(self.step_num)
                    if self.step_num in arr_step:
                        if json_step[i]['step_num'] == self.step_num:
                            if 'step_detail' in json_step[i]:
                                for o in range(len(json_step[i]['step_detail'])):
                                    if 'one_email' in json_step[i]['step_detail'][o] and 'activity_code' in json_step[i]['step_detail'][o] and 'activity_status' in json_step[i]['step_detail'][o]:
                                        if self.sign_email == json_step[i]['step_detail'][o]['one_email']:
                                            for l in range(len(json_step[i]['step_detail'][o]['activity_code'])):
                                                if json_step[i]['step_detail'][o]['activity_code'][l] == str(self.activity_code):
                                                    json_step[i]['step_detail'][o]['activity_status'][l] = self.activity_status
                                                    json_step[i]['step_detail'][o]['activity_time'][l] = st_update
                                            json_step[i]['step_detail'][o]['sign_position']['sign_latitude'] = signlat
                                            json_step[i]['step_detail'][o]['sign_position']['sign_longitude'] = signlong
                                            json_step[i]['step_detail'][o]['sign_position']['sign_time'] = st_update
                    else:
                        return {'result':'ER','messageText':"step num fail"}
            json_step = json.dumps(json_step)
            select_step_data.data_json = (json_step)
            select_step_data.update_time = st
            db.session.commit()
            result_select = select().select_datajson_form_step_data_update_sender_v1(self.sid_data_step)
            detail_status = str(result_select['messageText']['data_document'])
            document_status = result_select['messageText']['status_document']
            try:
                result_update = paper_lesssender.query.filter(paper_lesssender.step_data_sid==self.sid_data_step).first()
                if result_update != None:
                    result_update.status_details = detail_status
                    result_update.document_status = document_status
                    db.session.commit()
            except Exception as e:
                return {'result':'ER','messageText':str(e)}
            if self.activity_status == 'Complete' or self.activity_status == 'Approve':
                if len(list_num_step_before) != 0:
                    for y in range(len(list_num_step_before)):
                        step_num_info = list_num_step_before[y]
                        result_update = paper_lesstransactionChat.query.filter_by(sidCode=self.sid_data_step,stepNum=step_num_info).first()
                        if result_update != None:
                            result_update.email_User = self.sign_email
                            db.session.commit()
                result_update = paper_lesstransactionChat.query.filter_by(sidCode=self.sid_data_step,email_User=self.sign_email,stepNum=self.step_num).first()
                if result_update != None:
                    result_update.statusSign = 'Y'
                    db.session.commit()
                result_update_mail = paper_lesstransactionMail.query.filter_by(sidCode=self.sid_data_step,email_User=self.sign_email,stepNum=self.step_num).first()
                if result_update_mail != None:
                    result_update_mail.statusSign = 'Y'
                    db.session.commit()
            elif self.activity_status == 'Reject':
                if len(list_num_step_before) != 0:
                    for y in range(len(list_num_step_before)):
                        step_num_info = list_num_step_before[y]
                        result_update = paper_lesstransactionChat.query.filter_by(sidCode=self.sid_data_step,stepNum=step_num_info).first()
                        if result_update != None:
                            result_update.email_User = self.sign_email
                            db.session.commit()
                result_update = paper_lesstransactionChat.query.filter_by(sidCode=self.sid_data_step,email_User=self.sign_email,stepNum=self.step_num).first()
                if result_update != None:
                    result_update.statusSign = 'R'
                    db.session.commit()
                result_update_mail = paper_lesstransactionMail.query.filter_by(sidCode=self.sid_data_step,email_User=self.sign_email,stepNum=self.step_num).first()
                if result_update_mail != None:
                    result_update_mail.statusSign = 'R'
                    db.session.commit()
            return {'result':'OK','messageText':'update success'}
        except Exception as e:
            return {'result':'ER','messageText':str(e)}

    def update_step_v4(self,sid_data_step,sign_email,activity_code,activity_status,step_num,signlat,signlong,sign_id):
        self.sid_data_step = sid_data_step
        self.sign_email = sign_email
        self.activity_code = activity_code
        self.activity_status = activity_status
        self.step_num = step_num
        self.sign_id = sign_id
        list_num_step_ref = []
        list_num_step_before = []
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        st_update = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        arr_step = []
        json_step = {}
        tmp_sign_tran = None
        try:
            select_step_data = paper_lessdatastep.query.filter_by(sid=self.sid_data_step).first()
            try:
                json_step = eval(select_step_data.data_json)
            except Exception as e:
                return {'result':'ER','messageText':'data json cant eval to json'}
            # print(json_step)
            if 'step_num' in json_step:
                pass
            else:
                for u in range(len(json_step)):
                    tmp_step_num = json_step[u]['step_num']
                    if 'rf_step' in json_step[u]:
                        if json_step[u]['rf_step'] != None:
                            tmp_num_step_ref = str(json_step[u]['rf_step']).split('-')[1]
                            if tmp_num_step_ref == self.step_num:
                                list_num_step_ref.append(tmp_num_step_ref)
                                list_num_step_before.append(tmp_step_num)
                # print(list_num_step_ref,list_num_step_before)
                for u in range(len(json_step)):
                    tmp_step_num_2 = json_step[u]['step_num']
                    if len(list_num_step_ref) != 0:
                        for yy in range(len(list_num_step_ref)):
                            tmp_step_num_ref = list_num_step_ref[yy]
                            tmp_step_before_ref = list_num_step_before[yy]
                            if tmp_step_num_2 == tmp_step_before_ref:
                                tmp_step_detail = json_step[u]['step_detail']
                                for z in range(len(tmp_step_detail)):
                                    tmp_step_detail[z]['one_email'] = self.sign_email
            # print(json_step)
            if 'step_detail' in json_step:
                if str(self.sign_id).replace(' ','') != '':
                    if 'step_sign' in json_step:
                        tmp_step_sign = json_step['step_sign']
                        if tmp_step_sign['status'] == True:
                            tmp_data_sign = tmp_step_sign['data']
                            for yz in range(len(tmp_data_sign)):
                                tmpdata_signone = tmp_data_sign[yz]
                                tmp_id = tmpdata_signone['id']
                                if self.sign_id == tmp_id:
                                    tmpdata_signone['status'] = 'complete'
                                    tmp_sign_tran = tmpdata_signone
                for o in range(len(json_step['step_detail'])):
                    if 'one_email' in json_step['step_detail'][o] and 'activity_code' in json_step['step_detail'][o] and 'activity_status' in json_step['step_detail'][o]:
                        if self.sign_email == json_step['step_detail'][o]['one_email']:
                            for l in range(len(json_step['step_detail'][o]['activity_code'])):
                                if json_step['step_detail'][o]['activity_code'][l] == str(self.activity_code):
                                    json_step['step_detail'][o]['activity_status'][l] = self.activity_status
                                    json_step['step_detail'][o]['activity_time'][l] = st_update
                                    if tmp_sign_tran != None:
                                        tmp_sign_tran['status'] = 'complete'
                                        json_step['step_detail'][o]['activity_data'][l] = tmp_sign_tran
                                    else:
                                        json_step['step_detail'][o]['activity_data'][l]['status'] = 'complete'
                            json_step['step_detail'][o]['sign_position']['sign_latitude'] = signlat
                            json_step['step_detail'][o]['sign_position']['sign_longitude'] = signlong
                            json_step['step_detail'][o]['sign_position']['sign_time'] = st_update
            else:
                for z in range(len(json_step)):
                    arr_step.append(json_step[z]['step_num'])
                for i in range(len(json_step)):
                    # print(self.step_num)
                    if self.step_num in arr_step:
                        if json_step[i]['step_num'] == self.step_num:
                            if 'step_detail' in json_step[i]:
                                if 'step_sign' in json_step[i]:
                                    tmp_step_sign = json_step[i]['step_sign']
                                    if tmp_step_sign['status'] == True:
                                        tmp_data_sign = tmp_step_sign['data']
                                        for yz in range(len(tmp_data_sign)):
                                            tmpdata_signone = tmp_data_sign[yz]
                                            tmp_id = tmpdata_signone['id']
                                            if self.sign_id == tmp_id:
                                                tmpdata_signone['status'] = 'complete'
                                                tmp_sign_tran = tmpdata_signone
                                for o in range(len(json_step[i]['step_detail'])):
                                    if 'one_email' in json_step[i]['step_detail'][o] and 'activity_code' in json_step[i]['step_detail'][o] and 'activity_status' in json_step[i]['step_detail'][o]:
                                        if self.sign_email == json_step[i]['step_detail'][o]['one_email']:
                                            for l in range(len(json_step[i]['step_detail'][o]['activity_code'])):
                                                if json_step[i]['step_detail'][o]['activity_code'][l] == str(self.activity_code):
                                                    json_step[i]['step_detail'][o]['activity_status'][l] = self.activity_status
                                                    json_step[i]['step_detail'][o]['activity_time'][l] = st_update
                                                    if tmp_sign_tran != None:
                                                        tmp_sign_tran['status'] = 'complete'
                                                        json_step[i]['step_detail'][o]['activity_data'][l] = tmp_sign_tran
                                                    else:
                                                        json_step[i]['step_detail'][o]['activity_data'][l]['status'] = 'complete'
                                            json_step[i]['step_detail'][o]['sign_position']['sign_latitude'] = signlat
                                            json_step[i]['step_detail'][o]['sign_position']['sign_longitude'] = signlong
                                            json_step[i]['step_detail'][o]['sign_position']['sign_time'] = st_update
                    else:
                        return {'result':'ER','messageText':"step num fail"}
            json_step = json.dumps(json_step)
            select_step_data.data_json = (json_step)
            select_step_data.update_time = st
            db.session.commit()
            result_select = select().select_datajson_form_step_data_update_sender_v1(self.sid_data_step)
            detail_status = str(result_select['messageText']['data_document'])
            document_status = result_select['messageText']['status_document']
            tmp_step_now = str(result_select['messageText']['step_now'])
            tmp_maxstep = str(result_select['messageText']['max_step'])
            try:
                result_update = paper_lesssender.query.filter(paper_lesssender.step_data_sid==self.sid_data_step).first()
                if result_update != None:
                    result_update.status_details = detail_status
                    result_update.document_status = document_status
                    result_update.stepmax = tmp_maxstep
                    result_update.stepnow = tmp_step_now
                    db.session.commit()
            except Exception as e:
                return {'result':'ER','messageText':str(e)}
            if self.activity_status == 'Complete' or self.activity_status == 'Approve':
                if len(list_num_step_before) != 0:
                    for y in range(len(list_num_step_before)):
                        step_num_info = list_num_step_before[y]
                        result_update = paper_lesstransactionChat.query.filter_by(sidCode=self.sid_data_step,stepNum=step_num_info).first()
                        if result_update != None:
                            result_update.email_User = self.sign_email
                            db.session.commit()
                result_update = paper_lesstransactionChat.query.filter_by(sidCode=self.sid_data_step,email_User=self.sign_email,stepNum=self.step_num).first()
                if result_update != None:
                    result_update.statusSign = 'Y'
                    db.session.commit()
                result_update_mail = paper_lesstransactionMail.query.filter_by(sidCode=self.sid_data_step,email_User=self.sign_email,stepNum=self.step_num).first()
                if result_update_mail != None:
                    result_update_mail.statusSign = 'Y'
                    db.session.commit()
            elif self.activity_status == 'Reject':
                if len(list_num_step_before) != 0:
                    for y in range(len(list_num_step_before)):
                        step_num_info = list_num_step_before[y]
                        result_update = paper_lesstransactionChat.query.filter_by(sidCode=self.sid_data_step,stepNum=step_num_info).first()
                        if result_update != None:
                            result_update.email_User = self.sign_email
                            db.session.commit()
                result_update = paper_lesstransactionChat.query.filter_by(sidCode=self.sid_data_step,email_User=self.sign_email,stepNum=self.step_num).first()
                if result_update != None:
                    result_update.statusSign = 'R'
                    db.session.commit()
                result_update_mail = paper_lesstransactionMail.query.filter_by(sidCode=self.sid_data_step,email_User=self.sign_email,stepNum=self.step_num).first()
                if result_update_mail != None:
                    result_update_mail.statusSign = 'R'
                    db.session.commit()
            return {'result':'OK','messageText':'update success'}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':str(e)}

    def update_step_v4_group(self,sid_data_step,sign_email,activity_code,activity_status,signlat,signlong,sign_id):
        self.sid_data_step = sid_data_step
        self.sign_email = sign_email
        self.activity_code = activity_code
        self.activity_status = activity_status
        self.sign_id = sign_id
        list_num_step_ref = []
        list_num_step_before = []
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        st_update = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        arr_step = []
        json_step = {}
        arr_status = []
        tmp_sign_tran = None
        try:
            select_step_data = paper_lessdatastep.query.filter_by(sid=self.sid_data_step).first()
            try:
                json_step = eval(select_step_data.data_json)
            except Exception as e:
                return {'result':'ER','messageText':'data json cant eval to json'}
            # print(json_step)
            if 'step_num' in json_step:
                pass
            else:
                for u in range(len(json_step)):
                    tmp_step_num = json_step[u]['step_num']
                    if 'rf_step' in json_step[u]:
                        if json_step[u]['rf_step'] != None:
                            tmp_num_step_ref = str(json_step[u]['rf_step']).split('-')[1]
                            if tmp_num_step_ref == self.step_num:
                                list_num_step_ref.append(tmp_num_step_ref)
                                list_num_step_before.append(tmp_step_num)
                # print(list_num_step_ref,list_num_step_before)
                for u in range(len(json_step)):
                    tmp_step_num_2 = json_step[u]['step_num']
                    if len(list_num_step_ref) != 0:
                        for yy in range(len(list_num_step_ref)):
                            tmp_step_num_ref = list_num_step_ref[yy]
                            tmp_step_before_ref = list_num_step_before[yy]
                            if tmp_step_num_2 == tmp_step_before_ref:
                                tmp_step_detail = json_step[u]['step_detail']
                                for z in range(len(tmp_step_detail)):
                                    tmp_step_detail[z]['one_email'] = self.sign_email
            # print(json_step)
            if 'step_detail' in json_step:
                if str(self.sign_id).replace(' ','') != '':
                    if 'step_sign' in json_step:
                        tmp_step_sign = json_step['step_sign']
                        if tmp_step_sign['status'] == True:
                            tmp_data_sign = tmp_step_sign['data']
                            for yz in range(len(tmp_data_sign)):
                                tmpdata_signone = tmp_data_sign[yz]
                                tmp_id = tmpdata_signone['id']
                                if self.sign_id == tmp_id:
                                    tmpdata_signone['status'] = 'complete'
                                    tmp_sign_tran = tmpdata_signone
                for o in range(len(json_step['step_detail'])):
                    if 'one_email' in json_step['step_detail'][o] and 'activity_code' in json_step['step_detail'][o] and 'activity_status' in json_step['step_detail'][o]:
                        if self.sign_email == json_step['step_detail'][o]['one_email']:
                            for l in range(len(json_step['step_detail'][o]['activity_code'])):
                                if json_step['step_detail'][o]['activity_code'][l] == str(self.activity_code):
                                    json_step['step_detail'][o]['activity_status'][l] = self.activity_status
                                    json_step['step_detail'][o]['activity_time'][l] = st_update
                                    if tmp_sign_tran != None:
                                        tmp_sign_tran['status'] = 'complete'
                                        json_step['step_detail'][o]['activity_data'][l] = tmp_sign_tran
                                    else:
                                        json_step['step_detail'][o]['activity_data'][l]['status'] = 'complete'
                            json_step['step_detail'][o]['sign_position']['sign_latitude'] = signlat
                            json_step['step_detail'][o]['sign_position']['sign_longitude'] = signlong
                            json_step['step_detail'][o]['sign_position']['sign_time'] = st_update
            else:
                for z in range(len(json_step)):
                    arr_step.append(json_step[z]['step_num'])
                for x in range(len(json_step)):
                    tmp_arrstatus = []
                    if 'step_detail' in json_step[x]:
                        for o in range(len(json_step[x]['step_detail'])):
                            if 'one_email' in json_step[x]['step_detail'][o] and 'activity_code' in json_step[x]['step_detail'][o] and 'activity_status' in json_step[x]['step_detail'][o]:
                                for l in range(len(json_step[x]['step_detail'][o]['activity_code'])):
                                    if json_step[x]['step_detail'][o]['activity_code'][l] == str(self.activity_code):
                                        tmp_arrstatus.append(json_step[x]['step_detail'][o]['activity_status'][l])
                        if 'Reject' in tmp_arrstatus:
                            arr_status.append('Reject')
                        elif 'Incomplete' in tmp_arrstatus:
                            arr_status.append('Incomplete')
                        elif 'Pending' in tmp_arrstatus:
                            arr_status.append('Incomplete')
                        elif 'Complete' in tmp_arrstatus:
                            arr_status.append('Complete')
                        elif 'Approve' in tmp_arrstatus:
                            arr_status.append('Complete')

                # print(arr_status)
                for i in range(len(json_step)):
                    # print(self.step_num)
                    if 'step_detail' in json_step[i]:
                        stpint = int(json_step[i]['step_num'])
                        stepforarr = stpint - 1
                        if 'step_sign' in json_step[i]:
                            tmp_step_sign = json_step[i]['step_sign']
                            if tmp_step_sign['status'] == True:
                                tmp_data_sign = tmp_step_sign['data']
                                for yz in range(len(tmp_data_sign)):
                                    tmpdata_signone = tmp_data_sign[yz]
                                    tmp_id = tmpdata_signone['id']
                                    if self.sign_id == tmp_id:
                                        tmpdata_signone['status'] = 'complete'
                                        tmp_sign_tran = tmpdata_signone
                        for o in range(len(json_step[i]['step_detail'])):
                            if 'one_email' in json_step[i]['step_detail'][o] and 'activity_code' in json_step[i]['step_detail'][o] and 'activity_status' in json_step[i]['step_detail'][o]:
                                if self.sign_email == json_step[i]['step_detail'][o]['one_email']:
                                    if arr_status[stepforarr] == 'Incomplete':
                                        for l in range(len(json_step[i]['step_detail'][o]['activity_code'])):
                                            if json_step[i]['step_detail'][o]['activity_code'][l] == str(self.activity_code):
                                                json_step[i]['step_detail'][o]['activity_status'][l] = self.activity_status
                                                json_step[i]['step_detail'][o]['activity_time'][l] = st_update
                                                if tmp_sign_tran != None:
                                                    tmp_sign_tran['status'] = 'complete'
                                                    json_step[i]['step_detail'][o]['activity_data'][l] = tmp_sign_tran
                                                else:
                                                    json_step[i]['step_detail'][o]['activity_data'][l]['status'] = 'complete'
                                        json_step[i]['step_detail'][o]['sign_position']['sign_latitude'] = signlat
                                        json_step[i]['step_detail'][o]['sign_position']['sign_longitude'] = signlong
                                        json_step[i]['step_detail'][o]['sign_position']['sign_time'] = st_update
                    else:
                        return {'result':'ER','messageText':"step num fail"}
            json_step = json.dumps(json_step)
            select_step_data.data_json = (json_step)
            select_step_data.update_time = st
            db.session.commit()
            result_select = select().select_datajson_form_step_data_update_sender_v1(self.sid_data_step)
            detail_status = str(result_select['messageText']['data_document'])
            document_status = result_select['messageText']['status_document']
            try:
                result_update = paper_lesssender.query.filter(paper_lesssender.step_data_sid==self.sid_data_step).first()
                if result_update != None:
                    result_update.status_details = detail_status
                    result_update.document_status = document_status
                    db.session.commit()
            except Exception as e:
                return {'result':'ER','messageText':str(e)}
            if self.activity_status == 'Complete' or self.activity_status == 'Approve':
                if len(list_num_step_before) != 0:
                    for y in range(len(list_num_step_before)):
                        step_num_info = list_num_step_before[y]
                        result_update = paper_lesstransactionChat.query.filter_by(sidCode=self.sid_data_step,stepNum=step_num_info).first()
                        if result_update != None:
                            result_update.email_User = self.sign_email
                            db.session.commit()
                result_update = paper_lesstransactionChat.query.filter_by(sidCode=self.sid_data_step,email_User=self.sign_email).first()
                if result_update != None:
                    result_update.statusSign = 'Y'
                    db.session.commit()
                result_update_mail = paper_lesstransactionMail.query.filter_by(sidCode=self.sid_data_step,email_User=self.sign_email).first()
                if result_update_mail != None:
                    result_update_mail.statusSign = 'Y'
                    db.session.commit()
            elif self.activity_status == 'Reject':
                if len(list_num_step_before) != 0:
                    for y in range(len(list_num_step_before)):
                        step_num_info = list_num_step_before[y]
                        result_update = paper_lesstransactionChat.query.filter_by(sidCode=self.sid_data_step,stepNum=step_num_info).first()
                        if result_update != None:
                            result_update.email_User = self.sign_email
                            db.session.commit()
                result_update = paper_lesstransactionChat.query.filter_by(sidCode=self.sid_data_step,email_User=self.sign_email).first()
                if result_update != None:
                    result_update.statusSign = 'R'
                    db.session.commit()
                result_update_mail = paper_lesstransactionMail.query.filter_by(sidCode=self.sid_data_step,email_User=self.sign_email).first()
                if result_update_mail != None:
                    result_update_mail.statusSign = 'R'
                    db.session.commit()
            return {'result':'OK','messageText':'update success'}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':str(e)}

    def update_step_table(self,step_code,step_data,step_max,username,email,step_name):
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        self.step_code = step_code
        self.step_data = step_data
        self.step_max = step_max
        self.username = username
        self.email = email
        self.step_name = step_name
        try:
            update_steptable = paper_lessstep.query.filter_by(
                email=self.email,step_Code=self.step_code,username=self.username).first()
            update_steptable.step_Data = self.step_data
            update_steptable.step_Max = self.step_max
            update_steptable.DateTime = st
            update_steptable.step_Name = self.step_name
            db.session.commit()
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}
        finally:
            return {'result':'OK','messageText':'update OK!'}

    def update_step_OneChat(self,step_code,step_data,step_max,username,email,step_name):
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')

    def update_step_table_v3(self,step_code,step_data,step_max,username,email,step_name,step_Description,templateString,qrCode_position,documentDetails,urgent_type):
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        self.step_code = step_code
        self.step_data = step_data
        self.step_max = step_max
        self.username = username
        self.email = email
        self.step_name = step_name
        self.step_Description = step_Description
        self.templateString = json.dumps(templateString)
        self.qrCode_position = qrCode_position
        self.documentDetails = documentDetails
        self.urgent_type = urgent_type

        try:
            update_steptable = paper_lessstep.query.filter_by(
                email=self.email,step_Code=str(self.step_code),username=self.username,status='ACTIVE').first()
            if update_steptable != None:
                self.status = 'REJECT'
                self.status_Update = str(st)
                insert_template = paper_lessstep(step_Code=str(update_steptable.step_Code),step_Data=update_steptable.step_Data,step_Max=update_steptable.step_Max,username=update_steptable.username,email=update_steptable.email,DateTime=update_steptable.DateTime,step_Description=update_steptable.step_Description,step_Name=update_steptable.step_Name,step_Upload=update_steptable.step_Upload,template_images=update_steptable.template_images,template_biz=update_steptable.template_biz,qrCode_position=update_steptable.qrCode_position,status=self.status,status_Update=self.status_Update,documentDetails=update_steptable.documentDetails,urgent_type=update_steptable.urgent_type,condition_temp=None)
                db.session.add(insert_template)
                db.session.flush()
                db.session.commit()
                update_steptable.step_Data = self.step_data
                update_steptable.step_Max = self.step_max
                update_steptable.step_Description = self.step_Description
                update_steptable.DateTime = str(st)
                update_steptable.step_Name = self.step_name
                update_steptable.template_images = self.templateString
                update_steptable.qrCode_position = self.qrCode_position
                update_steptable.documentDetails = self.documentDetails
                update_steptable.urgent_type = self.urgent_type
                db.session.commit()
                return {'result':'OK','messageText':'update OK!'}
            else:
                return {'result':'ER','messageText':'not found'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def update_step_table_biz_v_new(self,step_code,step_data,step_max,username,email,step_name,step_Description,templateString,qrCode_position,documentDetails,urgent_type,condition_string):
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        self.step_code = step_code
        self.step_data = step_data
        self.step_max = step_max
        self.username = username
        self.email = email
        self.step_name = step_name
        self.step_Description = step_Description
        self.templateString = json.dumps(templateString)
        self.qrCode_position = qrCode_position
        self.documentDetails = documentDetails
        self.urgent_type = urgent_type
        self.condition_string = condition_string
        try:
            update_steptable = paper_lessstep.query.filter_by(step_Code=str(self.step_code),status='ACTIVE').first()
            if update_steptable != None:
                self.status = 'REJECT'
                self.status_Update = str(st)
                insert_template = paper_lessstep(step_Code=str(update_steptable.step_Code),step_Data=update_steptable.step_Data,step_Max=update_steptable.step_Max,username=self.username,email=self.email,DateTime=update_steptable.DateTime,step_Description=update_steptable.step_Description,step_Name=update_steptable.step_Name,step_Upload=update_steptable.step_Upload,template_images=update_steptable.template_images,template_biz=update_steptable.template_biz,qrCode_position=update_steptable.qrCode_position,status=self.status,status_Update=self.status_Update,documentDetails=update_steptable.documentDetails,urgent_type=update_steptable.urgent_type,condition_temp=update_steptable.condition_temp,webhook=update_steptable.webhook,email_center=update_steptable.email_center)
                db.session.add(insert_template)
                db.session.flush()
                db.session.commit()
                update_steptable.condition_temp = self.condition_string
                update_steptable.step_Data = self.step_data
                update_steptable.step_Max = self.step_max
                update_steptable.step_Description = self.step_Description
                update_steptable.DateTime = str(st)
                update_steptable.step_Name = self.step_name
                update_steptable.template_images = self.templateString
                update_steptable.qrCode_position = self.qrCode_position
                update_steptable.documentDetails = self.documentDetails
                update_steptable.urgent_type = self.urgent_type
                db.session.commit()
                return {'result':'OK','messageText':'update OK!'}
            else:
                return {'result':'ER','messageText':'not found'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def update_step_table_biz_v_2(self,step_code,step_data,step_max,username,email,step_name,step_Description,templateString,qrCode_position,documentDetails,urgent_type,condition_string,webhook=None,email_center=None,template_biz=None):
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        self.step_code = step_code
        self.step_data = step_data
        self.step_max = step_max
        self.username = username
        self.email = email
        self.step_name = step_name
        self.step_Description = step_Description
        self.templateString = json.dumps(templateString)
        self.qrCode_position = qrCode_position
        self.documentDetails = documentDetails
        self.urgent_type = urgent_type
        self.condition_string = condition_string
        self.webhook = webhook
        self.email_center = email_center
        self.template_biz = template_biz
        try:
            update_steptable = paper_lessstep.query.filter_by(step_Code=str(self.step_code),status='ACTIVE').first()
            if update_steptable != None:
                self.status = 'REJECT'
                self.status_Update = str(st)
                insert_template = paper_lessstep(step_Code=str(update_steptable.step_Code),step_Data=update_steptable.step_Data,step_Max=update_steptable.step_Max,username=self.username,email=self.email,DateTime=update_steptable.DateTime,step_Description=update_steptable.step_Description,step_Name=update_steptable.step_Name,step_Upload=update_steptable.step_Upload,template_images=update_steptable.template_images,template_biz=update_steptable.template_biz,qrCode_position=update_steptable.qrCode_position,status=self.status,status_Update=self.status_Update,documentDetails=update_steptable.documentDetails,urgent_type=update_steptable.urgent_type,condition_temp=update_steptable.condition_temp,webhook=update_steptable.webhook,email_center=update_steptable.email_center,formula_temp=update_steptable.formula_temp,digit_sign=update_steptable.digit_sign)
                db.session.add(insert_template)
                db.session.flush()
                db.session.commit()
                update_steptable.condition_temp = self.condition_string
                update_steptable.step_Data = self.step_data
                update_steptable.step_Max = self.step_max
                update_steptable.step_Description = self.step_Description
                update_steptable.DateTime = str(st)
                update_steptable.step_Name = self.step_name
                update_steptable.template_images = self.templateString
                update_steptable.qrCode_position = self.qrCode_position
                update_steptable.documentDetails = self.documentDetails
                update_steptable.urgent_type = self.urgent_type
                update_steptable.webhook = self.webhook
                update_steptable.email_center = self.email_center
                update_steptable.template_biz = self.template_biz
                db.session.commit()
                return {'result':'OK','messageText':'update OK!'}
            else:
                return {'result':'ER','messageText':'not found'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def update_step_table_template_v8(self,step_code,step_data,step_max,username,email,step_name,step_Description,templateString,qrCode_position,documentDetails,urgent_type,condition_string,webhook=None,email_center=None,template_biz=None,formula_temp=None,digit_sign=None):
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        self.step_code = step_code
        self.step_data = step_data
        self.step_max = step_max
        self.username = username
        self.email = email
        self.step_name = step_name
        self.step_Description = step_Description
        self.templateString = json.dumps(templateString)
        self.qrCode_position = qrCode_position
        self.documentDetails = documentDetails
        self.urgent_type = urgent_type
        self.condition_string = condition_string
        self.webhook = webhook
        self.email_center = email_center
        self.template_biz = template_biz
        self.formula_temp= str(formula_temp)
        self.digit_sign= digit_sign
        try:
            update_steptable = paper_lessstep.query.filter_by(step_Code=str(self.step_code),status='ACTIVE').first()
            if update_steptable != None:
                self.status = 'REJECT'
                self.status_Update = str(st)
                insert_template = paper_lessstep(step_Code=str(update_steptable.step_Code),step_Data=update_steptable.step_Data,step_Max=update_steptable.step_Max,username=self.username,email=self.email,DateTime=update_steptable.DateTime,step_Description=update_steptable.step_Description,step_Name=update_steptable.step_Name,step_Upload=update_steptable.step_Upload,template_images=update_steptable.template_images,template_biz=update_steptable.template_biz,qrCode_position=update_steptable.qrCode_position,status=self.status,status_Update=self.status_Update,documentDetails=update_steptable.documentDetails,urgent_type=update_steptable.urgent_type,condition_temp=update_steptable.condition_temp,webhook=update_steptable.webhook,email_center=update_steptable.email_center,formula_temp=update_steptable.formula_temp,digit_sign=update_steptable.digit_sign,page_sign_options=update_steptable.page_sign_options)
                db.session.add(insert_template)
                db.session.flush()
                db.session.commit()
                update_steptable.condition_temp = self.condition_string
                update_steptable.step_Data = self.step_data
                update_steptable.step_Max = self.step_max
                update_steptable.step_Description = self.step_Description
                update_steptable.DateTime = str(st)
                update_steptable.step_Name = self.step_name
                update_steptable.template_images = self.templateString
                update_steptable.qrCode_position = self.qrCode_position
                update_steptable.documentDetails = self.documentDetails
                update_steptable.urgent_type = self.urgent_type
                update_steptable.webhook = self.webhook
                update_steptable.email_center = self.email_center
                update_steptable.template_biz = self.template_biz
                update_steptable.formula_temp = self.formula_temp
                update_steptable.digit_sign = self.digit_sign
                update_steptable.page_sign_options = None
                db.session.commit()
                return {'result':'OK','messageText':'update OK!'}
            else:
                return {'result':'ER','messageText':'not found'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def update_step_table_template_v9(self,step_code,step_data,step_max,username,email,step_name,step_Description,templateString,qrCode_position,documentDetails,urgent_type,condition_string,webhook=None,email_center=None,template_biz=None,formula_temp=None,digit_sign=None,page_sign_options=None,options_page=None,use_status=None):
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        self.step_code = step_code
        self.step_data = step_data
        self.step_max = step_max
        self.username = username
        self.email = email
        self.step_name = step_name
        self.step_Description = step_Description
        self.templateString = json.dumps(templateString)
        self.qrCode_position = qrCode_position
        self.documentDetails = documentDetails
        self.urgent_type = urgent_type
        self.condition_string = condition_string
        self.webhook = webhook
        self.email_center = email_center
        self.template_biz = template_biz
        self.formula_temp= str(formula_temp)
        self.digit_sign= digit_sign
        self.page_sign_options = page_sign_options
        self.options_page = str(options_page)
        if use_status != None:
            self.use_status = use_status
        else:
            self.use_status = 'ACTIVE'
        try:
            update_steptable = paper_lessstep.query.filter_by(step_Code=str(self.step_code),status='ACTIVE').first()
            if update_steptable != None:
                self.status = 'REJECT'
                self.status_Update = str(st)
                insert_template = paper_lessstep(step_Code=str(update_steptable.step_Code),step_Data=update_steptable.step_Data,step_Max=update_steptable.step_Max,username=self.username,email=self.email,DateTime=update_steptable.DateTime,step_Description=update_steptable.step_Description,step_Name=update_steptable.step_Name,step_Upload=update_steptable.step_Upload,template_images=update_steptable.template_images,template_biz=update_steptable.template_biz,qrCode_position=update_steptable.qrCode_position,status=self.status,status_Update=self.status_Update,documentDetails=update_steptable.documentDetails,urgent_type=update_steptable.urgent_type,condition_temp=update_steptable.condition_temp,webhook=update_steptable.webhook,email_center=update_steptable.email_center,formula_temp=update_steptable.formula_temp,digit_sign=update_steptable.digit_sign,page_sign_options=update_steptable.page_sign_options,options_page=update_steptable.options_page,status_use=update_steptable.status_use,time_expire=None,importance_doc=None,last_digit_sign=None)
                db.session.add(insert_template)
                db.session.flush()
                db.session.commit()
                update_steptable.condition_temp = self.condition_string
                update_steptable.step_Data = self.step_data
                update_steptable.step_Max = self.step_max
                update_steptable.step_Description = self.step_Description
                update_steptable.DateTime = str(st)
                update_steptable.step_Name = self.step_name
                update_steptable.template_images = self.templateString
                update_steptable.qrCode_position = self.qrCode_position
                update_steptable.documentDetails = self.documentDetails
                update_steptable.urgent_type = self.urgent_type
                update_steptable.webhook = self.webhook
                update_steptable.email_center = self.email_center
                update_steptable.template_biz = self.template_biz
                update_steptable.formula_temp = self.formula_temp
                update_steptable.digit_sign = self.digit_sign
                update_steptable.page_sign_options = self.page_sign_options
                update_steptable.options_page = self.options_page
                update_steptable.status_use = self.use_status
                db.session.commit()
                return {'result':'OK','messageText':'update OK!'}
            else:
                return {'result':'ER','messageText':'not found'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}



    def update_send_detail(self, sid,status):
        self.sid = sid
        self.status = status
        try:
            update_send_detail = paper_lesssender.query.filter_by(
                step_data_sid=self.sid).first()
            update_send_detail.status = self.status
            db.session.commit()
            return {'result': 'OK', 'messageText': 'update OK!'}
        except Exception as ex:
            return {'result': 'ER', 'messageText': str(ex)}


    def update_ChatToSend_(self, json_data):
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        self.json_data = json_data
        result_arr = []
        for n in self.json_data:
            if n['result'] == 'OK':
                statusId = 'Y'
            if n['result'] == 'ER':
                statusId = 'ER'
            if n['result'] == 'NO':
                statusId = 'N'
            self.sid = n['sid']
            self.transactionCode = n['transactionCode']
            self.stepNum = n['stepNum']
            self.email = n['email']
            try:
                result_update = paper_lesstransactionChat.query.filter_by(
                    sidCode=self.sid,email_User=self.email,stepNum=self.stepNum,transactionCode=self.transactionCode).first()
                result_update.statusId = statusId
                result_update.timeStamp = st
                db.session.commit()
                result_arr.append({'result': 'OK', 'messageText': 'update OK!'})
            except Exception as ex:
                result_arr.append({'result': 'ER', 'messageText': str(ex)})

        return result_arr

    def update_ChatToSend_v2(self, json_data):
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        self.json_data = json_data
        result_arr = []
        for n in self.json_data:
            if n['result'] == 'OK':
                statusId = 'Y'
            if n['result'] == 'ER':
                statusId = 'ER'
            if n['result'] == 'NO':
                statusId = 'N'
            self.sid = n['sid']
            self.transactionCode = n['transactionCode']
            self.stepNum = n['stepNum']
            self.email = n['email']
            self.id_chat = n['id_chat']
            try:
                result_update = paper_lesstransactionChat.query.filter_by(
                    sidCode=self.sid,email_User=self.email,stepNum=self.stepNum,transactionCode=self.transactionCode).first()
                result_update.statusId = statusId
                result_update.timeStamp = st
                result_update.id_chat= self.id_chat
                db.session.commit()
                result_arr.append({'result': 'OK', 'messageText': 'update OK!'})
            except Exception as ex:
                result_arr.append({'result': 'ER', 'messageText': str(ex)})

        return result_arr

    def update_SendToMail_(self, json_data):
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        self.json_data = json_data
        result_arr = []
        for n in self.json_data:
            if n['result'] == 'OK':
                statusId = 'Y'
            if n['result'] == 'ER':
                statusId = 'ER'
            if n['result'] == 'NO':
                statusId = 'N'
            self.sid = n['sid']
            self.transactionCode = n['transactionCode']
            self.stepNum = n['stepNum']
            self.email = n['email']
            try:
                result_update = paper_lesstransactionMail.query.filter_by(
                    sidCode=self.sid,email_User=self.email,stepNum=self.stepNum,transactionCode=self.transactionCode).first()
                result_update.statusId = statusId
                result_update.timeStamp = st
                db.session.commit()
                result_arr.append({'result': 'OK', 'messageText': 'update OK!'})
            except Exception as ex:
                result_arr.append({'result': 'ER', 'messageText': str(ex)})

        return result_arr

    def update_userProfile(self, json_data):
        username        = json_data['username']
        userid          = json_data['userid']
        webhook         = json_data['webhook']
        signString      = json_data['signString']
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        try:
            result_update  = paper_lessuserProfile.query.filter_by(p_username=username,p_userid=userid).first()
            if result_update != None:
                result_update.p_updateTime  = st
                result_update.p_webHook     = webhook
                result_update.p_sign        = signString
                db.session.commit()
                return {'result': 'OK', 'messageText': 'update success'}
            else:
                return {'result': 'ER', 'messageText': 'cant update data because data not found'}
        except Exception as ex:
            return {'result': 'ER', 'messageText': 'Exception : ' + str(ex)}

    def update_userProfile_v1(self, json_data):
        username        = json_data['username']
        userid          = json_data['userid']
        webhook         = json_data['webhook']
        signString      = json_data['signString']
        emailUser       = json_data['email']
        options_profile = str(json_data['options_profile'])
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        try:
            result_update  = paper_lessuserProfile.query.filter_by(p_username=username,p_userid=userid).first()
            if result_update != None:
                result_update.p_updateTime  = st
                result_update.p_webHook     = webhook
                result_update.p_sign        = signString
                result_update.p_emailUser   = emailUser
                result_update.p_options     = options_profile
                db.session.commit()
                return {'result': 'OK', 'messageText': 'update success'}
            else:
                return {'result': 'ER', 'messageText': 'cant update data because data not found'}
        except Exception as ex:
            return {'result': 'ER', 'messageText': 'Exception : ' + str(ex)}

    def update_StatusOneChat(self, sid,thai_email):
        self.sid = sid
        self.thai_email = thai_email
        result_json = {}
        try:
            result = paper_lessdatastep.query.filter_by(sid=self.sid).first()
            try:
                result_json['dataJson'] = eval(result.data_json)
            except Exception as ex:
                result_json['dataJson'] = None
            if 'step_num' in result_json['dataJson']:
                if 'step_detail' in result_json['dataJson']:
                    for o in range(len(result_json['dataJson']['step_detail'])):
                        if self.thai_email == result_json['dataJson']['step_detail'][o]['one_email']:
                            for p in range(len(result_json['dataJson']['step_detail'][o]['activity_code'])):
                                if 'A02' == result_json['dataJson']['step_detail'][o]['activity_code'][p]:
                                    result_json['dataJson']['step_detail'][o]['activity_status'][p] = 'Complete'
            else:
                for i in range(len(result_json['dataJson'])):
                    if 'step_detail' in result_json['dataJson'][i]:
                        for o in range(len(result_json['dataJson'][i]['step_detail'])):
                            if self.thai_email == result_json['dataJson'][i]['step_detail'][o]['one_email']:
                                for p in range(len(result_json['dataJson'][i]['step_detail'][o]['activity_code'])):
                                    if 'A02' == result_json['dataJson'][i]['step_detail'][o]['activity_code'][p]:
                                        result_json['dataJson'][i]['step_detail'][o]['activity_status'][p] = 'Complete'

            result.data_json = str(result_json['dataJson'])
            db.session.commit()
            return {'result': 'OK', 'messageText': 'update ok!'}
        except Exception as ex:
            return {'result': 'ER', 'messageText': str(ex)}

    def update_StatusOneChat_v2(self, sid,thai_email,step_num):
        self.sid = sid
        self.thai_email = thai_email
        self.step_num = step_num
        result_json = {}
        print()
        try:
            result = paper_lessdatastep.query.filter_by(sid=self.sid).first()
            try:
                result_json['dataJson'] = eval(result.data_json)
            except Exception as ex:
                result_json['dataJson'] = None

            if 'step_num' in result_json['dataJson']:
                if result_json['dataJson']['step_num'] == self.step_num:
                    if 'step_detail' in result_json['dataJson']:
                        for o in range(len(result_json['dataJson']['step_detail'])):
                            if self.thai_email == result_json['dataJson']['step_detail'][o]['one_email']:
                                for p in range(len(result_json['dataJson']['step_detail'][o]['activity_code'])):
                                    if 'A02' == result_json['dataJson']['step_detail'][o]['activity_code'][p]:
                                        result_json['dataJson']['step_detail'][o]['activity_status'][p] = 'Complete'
            else:
                for i in range(len(result_json['dataJson'])):
                    if result_json['dataJson'][i]['step_num'] == self.step_num:
                        if 'step_detail' in result_json['dataJson'][i]:
                            for o in range(len(result_json['dataJson'][i]['step_detail'])):
                                if self.thai_email == result_json['dataJson'][i]['step_detail'][o]['one_email']:
                                    for p in range(len(result_json['dataJson'][i]['step_detail'][o]['activity_code'])):
                                        if 'A02' == result_json['dataJson'][i]['step_detail'][o]['activity_code'][p]:
                                            result_json['dataJson'][i]['step_detail'][o]['activity_status'][p] = 'Complete'
            result.data_json = str(result_json['dataJson'])
            db.session.commit()
            return {'result': 'OK', 'messageText': 'update ok!'}
        except Exception as ex:
            return {'result': 'ER', 'messageText': str(ex)}

    def update_onechatId_v1(self,sid,thai_email,step_num,chat_id):
        self.sid = sid
        self.thai_email = thai_email
        self.step_num = step_num
        self.chat_id = chat_id
        result_json = {}
        try:
            result = paper_lessdatastep.query.filter_by(sid=self.sid).first()
            try:
                result_json['dataJson'] = eval(result.data_json)
            except Exception as ex:
                result_json['dataJson'] = None
            if 'step_num' in result_json['dataJson']:
                if result_json['dataJson']['step_num'] == self.step_num:
                    if 'step_detail' in result_json['dataJson']:
                        for o in range(len(result_json['dataJson']['step_detail'])):
                            if self.thai_email == result_json['dataJson']['step_detail'][o]['one_email']:
                                if 'task_id' not in result_json['dataJson']['step_detail'][o]:
                                    result_json['dataJson']['step_detail'][o]['task_id_status'] = False
                                else:
                                    result_json['dataJson']['step_detail'][o]['task_id_status'] = False
                                if 'chat_id' not in result_json['dataJson']['step_detail'][o]:
                                    result_json['dataJson']['step_detail'][o]['chat_id_status'] = False
                                    for yy in range(len(self.chat_id)):
                                        if self.chat_id[yy] in result_json['dataJson']['step_detail'][o]['chat_id']:
                                                result_json['dataJson']['step_detail'][o]['chat_id'].remove(self.chat_id[yy])
                                else:
                                    result_json['dataJson']['step_detail'][o]['chat_id_status'] = False
                                    for yy in range(len(self.chat_id)):
                                        if self.chat_id[yy] in result_json['dataJson']['step_detail'][o]['chat_id']:
                                                result_json['dataJson']['step_detail'][o]['chat_id'].remove(self.chat_id[yy])
                                # for p in range(len(result_json['dataJson']['step_detail'][o]['activity_code'])):
                                #     if 'A02' == result_json['dataJson']['step_detail'][o]['activity_code'][p]:
                                #         result_json['dataJson']['step_detail'][o]['activity_status'][p] = str(status_send_chat)
            else:
                for i in range(len(result_json['dataJson'])):
                    if result_json['dataJson'][i]['step_num'] == self.step_num:
                        if 'step_detail' in result_json['dataJson'][i]:
                            for o in range(len(result_json['dataJson'][i]['step_detail'])):
                                if self.thai_email == result_json['dataJson'][i]['step_detail'][o]['one_email']:
                                    if 'task_id' not in result_json['dataJson'][i]['step_detail'][o]:
                                        result_json['dataJson'][i]['step_detail'][o]['task_id_status'] = False
                                    else:
                                        result_json['dataJson'][i]['step_detail'][o]['task_id_status'] = False
                                    if 'chat_id' not in result_json['dataJson'][i]['step_detail'][o]:
                                        result_json['dataJson'][i]['step_detail'][o]['chat_id_status'] = False
                                        for yy in range(len(self.chat_id)):
                                            if 'chat_id' in result_json['dataJson'][i]['step_detail'][o]:
                                                if self.chat_id[yy] in result_json['dataJson'][i]['step_detail'][o]['chat_id']:
                                                        result_json['dataJson'][i]['step_detail'][o]['chat_id'].remove(self.chat_id[yy])
                                    else:
                                        result_json['dataJson'][i]['step_detail'][o]['chat_id_status'] = False
                                        for yy in range(len(self.chat_id)):
                                            if 'chat_id' in result_json['dataJson'][i]['step_detail'][o]:
                                                if self.chat_id[yy] in result_json['dataJson'][i]['step_detail'][o]['chat_id']:
                                                        result_json['dataJson'][i]['step_detail'][o]['chat_id'].remove(self.chat_id[yy])
            result.data_json = str(result_json['dataJson'])
            db.session.commit()
            return {'result': 'OK', 'messageText': 'update succuess'}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            print(str(e))
            return {'result': 'ER', 'messageText': str(e)}
        finally:
            db.session.close()


    def update_StatusOneChat_v3(self,sid,thai_email,step_num,chat_id,task_id,status_send_chat):
        self.sid = sid
        self.thai_email = thai_email
        self.step_num = step_num
        self.chat_id = chat_id
        self.task_id = task_id
        print(sid,thai_email,step_num,chat_id,task_id,status_send_chat)
        result_json = {}
        try:
            result = paper_lessdatastep.query.filter_by(sid=self.sid).first()
            try:
                result_json['dataJson'] = eval(result.data_json)
            except Exception as ex:
                result_json['dataJson'] = None
            if 'step_num' in result_json['dataJson']:
                if result_json['dataJson']['step_num'] == self.step_num:
                    if 'step_detail' in result_json['dataJson']:
                        for o in range(len(result_json['dataJson']['step_detail'])):
                            if self.thai_email == result_json['dataJson']['step_detail'][o]['one_email']:
                                if 'task_id' not in result_json['dataJson']['step_detail'][o]:
                                    result_json['dataJson']['step_detail'][o]['task_id_status'] = True
                                    result_json['dataJson']['step_detail'][o]['task_id'] = []
                                    if self.task_id != None:
                                        result_json['dataJson']['step_detail'][o]['task_id'].append(str(self.task_id))
                                else:
                                    result_json['dataJson']['step_detail'][o]['task_id_status'] = True
                                    if self.task_id != None:
                                        result_json['dataJson']['step_detail'][o]['task_id'].append(str(self.task_id))
                                    
                                if 'chat_id' not in result_json['dataJson']['step_detail'][o]:
                                    result_json['dataJson']['step_detail'][o]['chat_id_status'] = True
                                    result_json['dataJson']['step_detail'][o]['chat_id'] = []
                                    result_json['dataJson']['step_detail'][o]['chat_id'].append(str(self.chat_id))
                                else:
                                    result_json['dataJson']['step_detail'][o]['chat_id_status'] = True
                                    result_json['dataJson']['step_detail'][o]['chat_id'].append(str(self.chat_id))
                                for p in range(len(result_json['dataJson']['step_detail'][o]['activity_code'])):
                                    if 'A02' == result_json['dataJson']['step_detail'][o]['activity_code'][p]:
                                        result_json['dataJson']['step_detail'][o]['activity_status'][p] = str(status_send_chat)
            else:
                for i in range(len(result_json['dataJson'])):
                    if result_json['dataJson'][i]['step_num'] == self.step_num:
                        if 'step_detail' in result_json['dataJson'][i]:
                            for o in range(len(result_json['dataJson'][i]['step_detail'])):
                                if self.thai_email == result_json['dataJson'][i]['step_detail'][o]['one_email']:
                                    if 'task_id' not in result_json['dataJson'][i]['step_detail'][o]:
                                        result_json['dataJson'][i]['step_detail'][o]['task_id_status'] = True
                                        result_json['dataJson'][i]['step_detail'][o]['task_id'] = []
                                        if self.task_id != None:
                                            result_json['dataJson'][i]['step_detail'][o]['task_id'].append(str(self.task_id))
                                    else:
                                        result_json['dataJson'][i]['step_detail'][o]['task_id_status'] = True
                                        if self.task_id != None:
                                            result_json['dataJson'][i]['step_detail'][o]['task_id'].append(str(self.task_id))
                                    if 'chat_id' not in result_json['dataJson'][i]['step_detail'][o]:
                                        result_json['dataJson'][i]['step_detail'][o]['chat_id_status'] = True
                                        result_json['dataJson'][i]['step_detail'][o]['chat_id'] = []
                                        result_json['dataJson'][i]['step_detail'][o]['chat_id'].append(str(self.chat_id))
                                    else:
                                        result_json['dataJson'][i]['step_detail'][o]['chat_id_status'] = True
                                        result_json['dataJson'][i]['step_detail'][o]['chat_id'].append(str(self.chat_id))
                                    for p in range(len(result_json['dataJson'][i]['step_detail'][o]['activity_code'])):
                                        if 'A02' == result_json['dataJson'][i]['step_detail'][o]['activity_code'][p]:
                                            result_json['dataJson'][i]['step_detail'][o]['activity_status'][p] = str(status_send_chat)
            # print(result_json['dataJson'])
            result.data_json = str(result_json['dataJson'])
            db.session.commit()
            # result.data_json = str(result_json['dataJson'])
            # db.session.commit()
            return {'result': 'OK', 'messageText': 'update ok!'}
        except Exception as ex:
            print(str(ex))
            return {'result': 'ER', 'messageText': str(ex)}
        finally:
            db.session.close()

    # def update_chatid_to_reject_v1(self,sid,thai_email,step_num,chat_id,task_id,status_send_chat):
    #     self.sid = sid
    #     self.thai_email = thai_email
    #     self.step_num = step_num
    #     self.chat_id = chat_id
    #     self.task_id = task_id
    #     result_json = {}
    #     try:
    #         result = paper_lessdatastep.query.filter_by(sid=self.sid).first()
    #         try:
    #             result_json['dataJson'] = eval(result.data_json)
    #         except Exception as ex:
    #             result_json['dataJson'] = None
    #         if 'step_num' in result_json['dataJson']:
    #             if result_json['dataJson']['step_num'] == self.step_num:
    #                 if 'step_detail' in result_json['dataJson']:
    #                     for o in range(len(result_json['dataJson']['step_detail'])):
    #                         if self.thai_email == result_json['dataJson']['step_detail'][o]['one_email']:
    #                             if 'task_id' not in result_json['dataJson']['step_detail'][o]:
    #                                 result_json['dataJson']['step_detail'][o]['task_id_status'] = True
    #                                 result_json['dataJson']['step_detail'][o]['task_id'] = []
    #                                 if self.task_id != None:
    #                                     result_json['dataJson']['step_detail'][o]['task_id'].append(str(self.task_id))
    #                             else:
    #                                 result_json['dataJson']['step_detail'][o]['task_id_status'] = True
    #                                 if self.task_id != None:
    #                                     result_json['dataJson']['step_detail'][o]['task_id'].append(str(self.task_id))
                                    
    #                             if 'chat_id' not in result_json['dataJson']['step_detail'][o]:
    #                                 result_json['dataJson']['step_detail'][o]['chat_id_status'] = True
    #                                 result_json['dataJson']['step_detail'][o]['chat_id'] = []
    #                                 result_json['dataJson']['step_detail'][o]['chat_id'].append(str(self.chat_id))
    #                             else:
    #                                 result_json['dataJson']['step_detail'][o]['chat_id_status'] = True
    #                                 result_json['dataJson']['step_detail'][o]['chat_id'].append(str(self.chat_id))
    #                             for p in range(len(result_json['dataJson']['step_detail'][o]['activity_code'])):
    #                                 if 'A02' == result_json['dataJson']['step_detail'][o]['activity_code'][p]:
    #                                     result_json['dataJson']['step_detail'][o]['activity_status'][p] = str(status_send_chat)
    #         else:
    #             for i in range(len(result_json['dataJson'])):
    #                 if result_json['dataJson'][i]['step_num'] == self.step_num:
    #                     if 'step_detail' in result_json['dataJson'][i]:
    #                         for o in range(len(result_json['dataJson'][i]['step_detail'])):
    #                             if self.thai_email == result_json['dataJson'][i]['step_detail'][o]['one_email']:
    #                                 if 'task_id' not in result_json['dataJson'][i]['step_detail'][o]:
    #                                     result_json['dataJson'][i]['step_detail'][o]['task_id_status'] = True
    #                                     result_json['dataJson'][i]['step_detail'][o]['task_id'] = []
    #                                     if self.task_id != None:
    #                                         result_json['dataJson'][i]['step_detail'][o]['task_id'].append(str(self.task_id))
    #                                 else:
    #                                     result_json['dataJson'][i]['step_detail'][o]['task_id_status'] = True
    #                                     if self.task_id != None:
    #                                         result_json['dataJson'][i]['step_detail'][o]['task_id'].append(str(self.task_id))
    #                                 if 'chat_id' not in result_json['dataJson'][i]['step_detail'][o]:
    #                                     result_json['dataJson'][i]['step_detail'][o]['chat_id_status'] = True
    #                                     result_json['dataJson'][i]['step_detail'][o]['chat_id'] = []
    #                                     result_json['dataJson'][i]['step_detail'][o]['chat_id'].append(str(self.chat_id))
    #                                 else:
    #                                     result_json['dataJson'][i]['step_detail'][o]['chat_id_status'] = True
    #                                     result_json['dataJson'][i]['step_detail'][o]['chat_id'].append(str(self.chat_id))
    #                                 for p in range(len(result_json['dataJson'][i]['step_detail'][o]['activity_code'])):
    #                                     if 'A02' == result_json['dataJson'][i]['step_detail'][o]['activity_code'][p]:
    #                                         result_json['dataJson'][i]['step_detail'][o]['activity_status'][p] = str(status_send_chat)
    #         # print(result_json['dataJson'])
    #         result.data_json = str(result_json['dataJson'])
    #         # db.session.commit()
    #         return {'result': 'OK', 'messageText': 'update ok!'}
    #     except Exception as ex:
    #         print(str(ex))
    #         return {'result': 'ER', 'messageText': str(ex)}

class delete:
    def delete_status_comment(self,sidCode,email,id):
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d-%m-%Y %H:%M:%S')
        st_indb = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        self.sidCode = sidCode
        self.email = email
        self.id = id
        comment_delete = ''
        tmp_json = {}
        list_json = []
        name_surename = ''
        try:
            #เช็ค email ใน citizen login
            query_name = paper_lesslogin.query.filter(paper_lesslogin.biz_information.contains(self.email)).all()
            if query_name != None :
                for x in range(len(query_name)):
                    biz_information = query_name[x].biz_information
                    biz_information_eval = eval(str(biz_information))
                    name = biz_information_eval['first_name_th']
                    name_surename += name
                    surename = biz_information_eval['last_name_th']
                    name_surename += ' ' + surename
            else :
                return {'result':'ER','messageText':'email incorret'}
            
            query_comment = paper_lessmessageComment.query.filter_by(sid = self.sidCode).order_by((paper_lessmessageComment.time_Update).desc()).first()

            if query_comment != None:
                msg_comment = query_comment.message_Comment
                msg_comment_eval = eval(str(msg_comment))
                for x in range(len(msg_comment_eval)):
                    if msg_comment_eval[x]['id'] == self.id:
                        if msg_comment_eval[x]['modified'] == self.email:
                            if msg_comment_eval[x]['status'] == 'ON':
                                # print(msg_comment_eval[x])
                                tmp_json['id'] = msg_comment_eval[x]['id']
                                tmp_json['comment'] = msg_comment_eval[x]['comment']
                                comment_delete = msg_comment_eval[x]['comment']
                                tmp_json['modified_date'] = st
                                tmp_json['modified'] = msg_comment_eval[x]['modified']
                                n = fine_name_surename(tmp_json['modified'])
                                tmp_json['name'] = n
                                tmp_json['status'] = 'OFF'
                                list_json.append(tmp_json)
                                tmp_json = {}
                            else :
                                return {'result':'ER','messageText':'ไม่พบความคิดเห็นที่คุณต้องการลบ'}
                        else :
                            return {'result':'ER','messageText':'ไม่พบข้อมูล'}
                    else :
                        tmp_json['id'] = msg_comment_eval[x]['id']
                        tmp_json['comment'] = msg_comment_eval[x]['comment']
                        tmp_json['modified_date'] = msg_comment_eval[x]['modified_date']
                        tmp_json['modified'] = msg_comment_eval[x]['modified']
                        tmp_json['status'] = msg_comment_eval[x]['status']
                        n = fine_name_surename(tmp_json['modified'])
                        tmp_json['name'] = n
                        list_json.append(tmp_json)
                        tmp_json = {}
                typeComment = 'delete'
                dict_comment = getListUser(self.sidCode,self.email,name_surename,comment_delete,typeComment)
                query_comment.message_Comment = str(list_json)
                db.session.commit()
                db.session.close()
                return {'result':'OK','messageText':list_json,'dict_comment':dict_comment}
            else:
                return {'result':'ER','messageText':'ไม่พบข้อมูล'}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':str(ex)}


    def delete_all_table_for_service(self,sidCode):
        self.sidCode = sidCode
        paper_lesstrack.query.filter(paper_lesstrack.step_data_sid==self.sidCode).delete()
        paper_lessdocument.query.filter(paper_lessdocument.step_id==self.sidCode).delete()
        paper_lesssender.query.filter(paper_lesssender.step_data_sid==self.sidCode).delete()
        paper_lessdatastep.query.filter(paper_lessdatastep.sid==self.sidCode).delete()
        db.session.commit()


    def delete_template(self,user,template_code):
        self.user = user
        self.template_code = template_code
        try:
            paper_lessstep.query.filter_by(username=self.user,step_Code=self.template_code).delete()
            db.session.commit()
            return {'result': 'OK', 'messageText': 'delete OK!'}
        except Exception as ex:
            return {'result': 'ER', 'messageText': str(ex)}
