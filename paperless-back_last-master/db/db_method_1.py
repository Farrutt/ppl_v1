#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from db.db_Class import *
from config.value import *
from method.access import *
from method.hashpy import *
from method.other import *
from config.lib import *
from db.db_method import *
from db.db_method_2 import *
from db.db_method_3 import *
from method.document import *
from method.pdfSign import *
from method.callserver import *
# from method.cal_tracking import *



def sum_doc_name_group_v2(list_doctype_group):
    list_document_type = []
    tmpresult = []
    try:
        # print('list_doctype_group',list_doctype_group)
        # print(type(list_doctype_group))
        # list_doctype_group = eval(list_doctype_group)
        if type(list_doctype_group) != list :
            list_doctype_group = eval(str(list_doctype_group))
        

        for x in range(len(list_doctype_group)):
            list_doctype_group[x]['count'] = 0

        arr_tmp = []
        for y in range(len(list_doctype_group)):
            tmp = {}
            tmp['document_type'] = list_doctype_group[y]['document_type']
            if 'id_card_num' in str(list_doctype_group):
                tmp['id_card_num'] = list_doctype_group[y]['id_card_num']
            else:
                tmp['id_card_num'] = ''
            if 'document_json' in str(list_doctype_group):
                tmp['document_json'] = list_doctype_group[y]['document_json']
            else:
                tmp['document_json'] = ''
            if 'first_name_th' in str(list_doctype_group):
                tmp['first_name_th'] = list_doctype_group[y]['first_name_th']
            else:
                tmp['first_name_th'] = ''
            tmp['count'] = list_doctype_group[y]['count']
            tmp['key'] = str(tmp['document_type'])+str(tmp['id_card_num'])
            # print(tmp['document_type'],tmp['id_card_num'])
            if tmp['key'] in str(arr_tmp):
                for i in range(len(arr_tmp)):
                    # print(tmp['document_type'],arr_tmp[i]['document_type'])
                    if tmp['document_type'] == arr_tmp[i]['document_type'] and tmp['id_card_num'] == arr_tmp[i]['id_card_num']:
                        # print(tmp['count'])
                        arr_tmp[i]['count'] += 1
            else:
                # print('else')
                tmp['count'] += 1
                arr_tmp.append(tmp)
        return {'result':'OK','messageText':arr_tmp}
    except Exception as e:
        exc_type, exc_obj, exc_tb = sys.exc_info()
        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        print(exc_type, fname, exc_tb.tb_lineno)
        return {'result':'ER','messageText':str(e)}



def sum_doc_name_group_v3(tmp_doctypeGroup):
    result_sum = sum_doc_name_group_v2(tmp_doctypeGroup)
    # หา cover_page
    result_sum01 = result_sum['messageText']
    arr_properties = []
    arr_group_title = []
    arr_taxid = []
    arr_namebiz = []
    print('result_sum01',result_sum01)
    for ii in range(len(result_sum01)):
        id_card_num = result_sum01[ii]['id_card_num']
        doctype01 = result_sum01[ii]['document_type']
        first_name_th = result_sum01[ii]['first_name_th']
        result = select_2().select_DocumentDetail(id_card_num,doctype01)
        result01 = result['messageText'][0]
        print('business_json',result01['business_json'])
        documentType = result01['documentType']
        document_name = result01['documentJson']['document_name']
        # id_card_num = result01['business_json']['id_card_num']
        # first_name_th = result01['business_json']['first_name_th']
        header_text = 'ประเภทเอกสาร ' + str(document_name)
        service_other = result01['service_other']
        for y in range(len(service_other)):
            if service_other[y]['name_service'] == 'GROUP':
                other = service_other[y]['other']
                arr_header = []
                arr_coverpage = []
                for i in range(len(other)):
                    properties = other[i]['properties']
                    for x in range(len(properties)):
                        properties[x] = eval(str(properties[x]))
                        if 'sum_display' not in str(properties[x]):
                            properties[x]['sum_display'] = False
                        tmp_header_column = {
                            'display_key': properties[x]['display'],
                            'display_status': properties[x]['sum_display']
                        }
                        arr_header.append(tmp_header_column)
                        if properties[x]['sum_display'] == True and properties[x]['type'] == 'Number':
                            arr_coverpage.append(tmp_header_column)
                #         arr_taxid.append(id_card_num)
                #         arr_namebiz.append(first_name_th)
                # count_arr_taxid = Counter(arr_taxid)
                # count_arr_namebiz = Counter(arr_namebiz)
                # arr_taxid = []
                # arr_namebiz = []
                # for x,y in count_arr_taxid.items():
                #     arr_taxid.append(x)
                # for x,y in count_arr_namebiz.items():
                #     arr_namebiz.append(x)
                tmp_group_title = {
                    'cover_name': '',
                    'cover_column': arr_header,
                    'document_type': documentType,
                    'name_bizinfo': first_name_th,
                    'tax_id': id_card_num
                }                                          
                tmp = {
                    'header_column': arr_coverpage,
                    'header_text': header_text,
                    'body_column': '',
                    'body_sign': '',
                    'document_type': documentType,
                    'name_bizinfo': first_name_th,
                    'tax_id': id_card_num
                }
                arr_properties.append(tmp)
                arr_group_title.append(tmp_group_title)
        # print('arr_properties',arr_properties)
    tmpcover_page = str(arr_properties)
    tmp_group_title = str(arr_group_title)
    return tmpcover_page,tmp_group_title

def sum_doc_name_group(list_doctype_group):
    list_document_name = []
    tmpresult = []
    try:
        for i in range(len(list_doctype_group)):
            document_json = eval(list_doctype_group[i]['document_json'])
            document_name = document_json['document_name']
            list_document_name.append(document_name)
        count_doc_name = Counter(list_document_name)
        for x,y in count_doc_name.items():
            json = {}
            json['document_name'] = x
            json['count'] = y
            tmpresult.append(json)
        print ('tmpresult:',tmpresult)
        return {'result':'OK','messageText':tmpresult}
    except Exception as e:
        exc_type, exc_obj, exc_tb = sys.exc_info()
        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        print(exc_type, fname, exc_tb.tb_lineno)
        return {'result':'ER','messageText':str(e)}

def sum_biz_info_group(list_biz_group):
    list_tax_id = []
    tmpresult = []
    list_result = []
    try:
        # print ('list_biz_group:',list_biz_group)
        for i in range(len(list_biz_group)):
            tax_id = (list_biz_group[i]['tax_id'])
            role_name = (list_biz_group[i]['role_name'])
            dept_name = (list_biz_group[i]['dept_name'])
            role_level = (list_biz_group[i]['role_level'])
            first_name_eng = (list_biz_group[i]['first_name_eng'])
            first_name_th = (list_biz_group[i]['first_name_th'])
            
            list_tax_id.append(tax_id)

        count_tax_id = Counter(list_tax_id)
        # print ('count_doc_name:',count_tax_id)
        for x,y in count_tax_id.items():
            json = {}
            json['tax_id'] = x
            json['count'] = y
            tmpresult.append(json)
        # print ('tmpresult:',tmpresult)
        for j in range(len(tmpresult)):
            dict_sum = tmpresult[j]
            count_biz = tmpresult[j]['count']
            tax_id_count = tmpresult[j]['tax_id']
            for k in range(len(list_biz_group)):
                tax_id_biz = list_biz_group[k]['tax_id']
                if tax_id_biz == tax_id_count:
                    dict_sum.update(list_biz_group[k])
        # print ('list_result:',tmpresult)
        return {'result':'OK','messageText':tmpresult}
    except Exception as e:
        print(str(e))
        exc_type, exc_obj, exc_tb = sys.exc_info()
        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        print(exc_type, fname, exc_tb.tb_lineno)
        return {'result':'ER','messageText':str(e)}

def fucn_filter_documentgroup_v2(list_data):
    group_arr = []
    arr_templatecode = []
    tmpcolor_group = None
    tmpemail_middle = None
    if len(list_data) != 0:
        for n in range(len(list_data)):
            tmp_data = list_data[n]
            tmptemplate_code = tmp_data['template']
            tmpstep_group = tmp_data['step_group']
            tmpgroup_data = tmp_data['group_data']
            tmpgroup_title = tmp_data['group_title']
            tmpgroup_name = tmp_data['group_name']
            tmp_emailStep = []
            if 'email_step' in tmp_data:
                tmp_emailStep = tmp_data['email_step']
            # tmpdocument_type = tmp_data['document_type']
            tmpbiz_info = tmp_data['biz_info']
            tmpcover_page = tmp_data['cover_page']
            if 'email_middle' in tmp_data:
                tmpemail_middle = tmp_data['email_middle']
            if 'group_color' in tmp_data:
                tmp_group_clr = tmp_data['group_color']
                if 'color' in tmp_group_clr[0]:
                    tmp_clr = tmp_group_clr[0]['color']
            if tmp_clr not in group_arr:
                group_arr.append(tmp_clr)
                for x in range(len(tmptemplate_code)):
                    arr_templatecode.append(tmptemplate_code[x])
            else:
                for x in range(len(tmptemplate_code)):
                    if tmptemplate_code[x] not in arr_templatecode:
                        arr_templatecode.append(tmptemplate_code[x])        
        return {'result':'OK','messageText':{'email_middle':tmpemail_middle,'template_code':arr_templatecode,'color':tmp_clr,'group_data':tmpgroup_data,'group_step':tmpstep_group,'group_title':tmpgroup_title,'group_name':tmpgroup_name,'bizinfo':tmpbiz_info,'cover_page':tmpcover_page,'email_step':tmp_emailStep}}
    return {'result':'ER','messageText':'data not found'}

def base64Tobytes(txt):
    n = float(len(txt))
    if txt.endswith("==") : p = 2
    elif txt.endswith("="): p = 1
    else : p = 0
    byte = (n / 4) * 3 - p
    kb = byte * 0.000977
    # print(p)
    # print(byte)
    # print(kb)
    # print('Size = {:.2f} bytes'.format(byte))
    # print('Size = {:.2f} KB'.format(kb))
    return byte

def getTimeline(start_send_time,step_time):
    sendtime = int(datetime.datetime.timestamp(start_send_time))
    step_time_1 = []
    step_time_1 = step_time
    string_list_timeline = ''
    concat_steptimeline = ''
    step_timeline = []
    if(len(step_time_1) !=0):
        for i in range(len(step_time_1)):
            if(i==0):
                result = step_time_1[i] - sendtime
                list_timeline = convert_hr_min_sec_v1(int(result))
                for yy in range(len(list_timeline)):
                    if list_timeline[yy] > 0:
                        if yy == 0:
                            type_date = " วัน "
                        elif yy == 1:
                            type_date = " ชั่วโมง "
                        elif yy == 2:
                            type_date = " นาที "
                        elif yy == 3:
                            type_date = " วินาที "
                        string_list_timeline += str(list_timeline[yy]) + type_date
                step_timeline.append(string_list_timeline)
                string_list_timeline = ''
            else:
                result = step_time_1[i] - step_time_1[i-1]
                # print ('ลำดับปัจจุบัน- ลำดับก่อนหน้า',result)
                list_timeline = convert_hr_min_sec_v1(int(result))
                for yy in range(len(list_timeline)):
                    if list_timeline[yy] > 0:
                        if yy == 0:
                            type_date = " วัน "
                        elif yy == 1:
                            type_date = " ชั่วโมง "
                        elif yy == 2:
                            type_date = " นาที "
                        elif yy == 3:
                            type_date = " วินาที "
                        string_list_timeline += str(list_timeline[yy]) + type_date
                step_timeline.append(string_list_timeline)
                string_list_timeline = ''
        concat_steptimeline += 'ระยะเวลาดำเนินการ\n'
        for j in range(len(step_timeline)):
            if(j == (len(step_timeline))-1):
                concat_steptimeline += '-ลำดับที่ ' +str(j+1)+ ' : ' + str(step_timeline[j])
            else:
                concat_steptimeline += '-ลำดับที่ ' +str(j+1)+ ' : ' + str(step_timeline[j]) + '\n'
        # print (concat_steptimeline)
    elif(len(step_time_1) == 0):
        concat_steptimeline += 'อยู่ระหว่างดำเนินการ'
    return concat_steptimeline

def get_url_image_pdf_v1(foldername):
    list_file_name = []
    path_image = path_global_1 + '/storage/image/' + foldername
    # path_image = os.getcwd() + '/storage/image/' + foldername
    try:
        for the_file in sorted(os.listdir(path_image)):
            file_path = os.path.join(path_image, the_file)
            print(file_path)
            filename_only = str(file_path).split('/')[-1]
            url_view_image = myUrl_domain + 'api/view2/pdf_image/' + foldername +'/' + filename_only
            list_file_name.append({'image_Url': url_view_image})
    except Exception as e:
        return ({'result':'ER','messageText':None,'status_Code':200,'messageER':'not found folder name ' + str(e)})
    return ({'result': 'OK', 'messageText': list_file_name, 'status_Code': 200})

def convert_datetime_TH_2(timestamp_string):
    now1 = datetime.datetime.fromtimestamp(timestamp_string)
    month_name = 'x มกราคม กุมภาพันธ์ มีนาคม เมษายน พฤษภาคม มิถุนายน กรกฎาคม สิงหาคม กันยายน ตุลาคม พฤศจิกายน ธันวาคม'.split()[now1.month]
    thai_year = now1.year + 543
    time_str = now1.strftime('%H:%M:%S')
    return "%d %s %d"%(now1.day, month_name, thai_year) # 30 ตุลาคม 2560 20:45:30

def convert_datetime_TH_2_display_sendTime(timestamp_string):
    now1 = datetime.datetime.fromtimestamp(timestamp_string)
    month_name = 'x มกราคม กุมภาพันธ์ มีนาคม เมษายน พฤษภาคม มิถุนายน กรกฎาคม สิงหาคม กันยายน ตุลาคม พฤศจิกายน ธันวาคม'.split()[now1.month]
    thai_year = now1.year + 543
    time_str = now1.strftime('%H:%M:%S')
    return "%d %s %d %s"%(now1.day, month_name, thai_year,time_str) # 30 ตุลาคม 2560 20:45:30

def convert_datetime_TH_2_display(timestamp_string):
    now1 = datetime.datetime.fromtimestamp(timestamp_string)
    month_name = 'x ม.ค ก.พ มี.ค เม.ย พ.ค มิ.ย ก.ค ส.ค ก.ย ต.ค พ.ย ธ.ค'.split()[now1.month]
    thai_year = now1.year + 543
    time_str = now1.strftime('%H:%M:%S')
    return "%d %s"%(now1.day, month_name) # 30 ตุลาคม 2560 20:45:30

def timing(time,start_send_time):
    t = int(time - datetime.datetime.timestamp(start_send_time))

    timing_1 = convert_hr_min_sec_v1(int(t))
    string_timing = ''
    for yy in range(len(timing_1)):
        if timing_1[yy] > 0:
            if yy == 0:
                type_date = " วัน "
            elif yy == 1:
                type_date = " ชั่วโมง "
            elif yy == 2:
                type_date = " นาที "
            elif yy == 3:
                type_date = " วินาที "
            string_timing += str(timing_1[yy]) + type_date
    return string_timing

def convert_hr_min_sec_v1(time):
    list_return = []
    day = time // (24 * 3600)
    time = time % (24 * 3600)
    hour = time // 3600
    time %= 3600
    minutes = time // 60
    time %= 60
    seconds = time
    list_return.append(day)
    list_return.append(hour)
    list_return.append(minutes)
    list_return.append(seconds)
    return list_return

def parse_list_timeline_for_eform(list_timeline):
    for x in range(len(list_timeline)):
        if list_timeline[x] == '':
            list_timeline[x] = '0 วินาที'
    return list_timeline

def parse_json_for_eform(data_json):
    arr_activity_code = []
    for x in range(len(data_json)):
        step_detail = data_json[x]['step_detail']
        for y in range(len(step_detail)):
            activity_code = step_detail[y]['activity_code']
            for xx in range(len(activity_code)):
                act_status = data_json[x]['step_detail'][y]['activity_status'][xx]
                act_time = data_json[x]['step_detail'][y]['activity_time'][xx]
        if 'A03' in activity_code and 'A04' in activity_code:
            data_json[x]['step_detail'][y]['activity_code'] = ['A05']
            data_json[x]['step_detail'][y]['activity_status'] = [act_status]
            data_json[x]['step_detail'][y]['activity_time'] = [act_time]
    return data_json

def data_doc(data_document):
    try:
        decodes = jwt.decode(data_document, 'yiDaGvk4c6jbmXaSdiOtIqgS7Dkn5U1ItNz5hxHU', algorithms = 'HS256')
        # print('decodes',decodes)
        return {'result':'OK', 'messageText':decodes}
    except jwt.ExpiredSignatureError:
        print('ExpiredSignatureError!')
        return {'result':'ER'}
    except jwt.InvalidTokenError:
        print('InvalidTokenError!')
        return {'result':'ER'}

def find_sid_from_docid(doc_id):
    try:
        sid = None
        sql = """
            SELECT
                tb_send_detail.step_data_sid AS "sid"
            FROM
                tb_send_detail 
            WHERE
                tb_send_detail.doc_id = :doc_id 
        """
        connection = slave.connect()
        getsidcode = connection.execute(text(sql),doc_id=doc_id)
        get_code = [dict(row) for row in getsidcode]
        # temp_query = paper_lesssender.query.filter(paper_lesssender.doc_id == str(doc_id))
        # print(temp_query)
        if len(get_code) != 0:
            sid = get_code[0]['sid']   
        return {'result':'OK','sid': sid}
    except Exception as e:
        exc_type, exc_obj, exc_tb = sys.exc_info()
        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        print(exc_type, fname, exc_tb.tb_lineno)
        return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(e)}
    finally:
        connection.close()

def convert_pdf_image_v1(foldername,base64pdf):
    # dataJson = request.json
    resul_res = {}
    list_file_name = []
    base64_pdfFile = base64pdf
    path = path_global_1 + '/storage/pdf/' + foldername
    # path = './storage/pdf/' + foldername
    if not os.path.exists(path):
        os.makedirs(path)
    try:
        for the_file in os.listdir(path):
            file_path = os.path.join(path, the_file)
            try:
                if os.path.isfile(file_path):
                    os.unlink(file_path)
            except Exception as e:
                return jsonify({'result':'ER','messageText':None,'status_Code':200,'messageER':'not found folder name ' + str(e)}),200
    except Exception as e:
        return jsonify({'result':'ER','messageText':None,'status_Code':200,'messageER':'not found folder name ' + str(e)}),200
    path_image = path_global_1 + '/storage/image/' + foldername
    # path_image = './storage/image/' + foldername
    if not os.path.exists(path_image):
        os.makedirs(path_image)
    try:
        for the_file in os.listdir(path_image):
            file_path = os.path.join(path_image, the_file)
            try:
                if os.path.isfile(file_path):
                    os.remove(file_path)
                    # os.unlink(file_path)
            except Exception as e:
                return jsonify({'result':'ER','messageText':None,'status_Code':200,'messageER':'not found folder name ' + str(e)}),200
    except Exception as e:
        return jsonify({'result':'ER','messageText':None,'status_Code':200,'messageER':'not found folder name ' + str(e)}),200

    try:
        unique_filename = str(uuid.uuid4())
        with open(path +'/'+ unique_filename +".pdf","wb") as f:
            f.write(base64.b64decode((base64_pdfFile)))
    except Exception as e:
        print(str(e))
    address_file = path + '/' + unique_filename + '.pdf'
    countpages = 0
    images = convert_from_bytes(open(address_file,'rb').read())
    for i, image in enumerate(images):
        countpages = countpages + 1
    # print(countpages)
    try:
        maxPages = pdf2image._page_count(address_file)
    except Exception as e:
        maxPages = countpages
    print(maxPages)
    #  min(page+10-1,maxPages)
    if maxPages != 1:
        # for page in range(1,maxPages,1):
            # print(page)
        pages = convert_from_path(address_file, dpi=200, fmt='jpeg',output_folder=path_image)
        for u in range(len(pages)):
            print(pages[u].filename)
            filename_only = str(pages[u].filename).split('/')[-1]
            try:
                url_view_image = myUrl_domain + 'api/view2/pdf_image/' + foldername +'/' + filename_only
                with open(pages[u].filename, "rb") as image_file:
                    encoded_string = base64.b64encode(image_file.read())
                    encoded_string = (encoded_string).decode('utf8')
                # list_file_name.append({'image_Base64': str(encoded_string), 'image_Url': url_view_image})
                list_file_name.append({'image_Url': url_view_image})
            except Exception as ex:
                return jsonify({'result':'ER','messageText':None,'status_Code':200,'messageER':'not found folder name ' + str(ex)}),200
        return jsonify({'result': 'OK', 'messageText': list_file_name, 'status_Code': 200}), 200
    else:
        pages = convert_from_path(address_file, dpi=200, first_page=0,fmt='jpeg', last_page = 1,output_folder=path_image)
        for u in range(len(pages)):
            print(pages[u].filename)
            filename_only = str(pages[u].filename).split('/')[-1]
            try:
                url_view_image = myUrl_domain + 'api/view2/pdf_image/' + foldername +'/' + filename_only
                with open(pages[u].filename, "rb") as image_file:
                    encoded_string = base64.b64encode(image_file.read())
                    encoded_string = (encoded_string).decode('utf8')
                # list_file_name.append({'image_Base64': str(encoded_string), 'image_Url': url_view_image})
                list_file_name.append({'image_Url': url_view_image})
            except Exception as ex:
                return jsonify({'result':'ER','messageText':None,'status_Code':200,'messageER':'not found folder name ' + str(ex)}),200
        return jsonify({'result': 'OK', 'messageText': list_file_name, 'status_Code': 200}), 200

def split_list(a_list):
    half = len(a_list)//2
    return a_list[:half], a_list[half:]

def listV5(emailUser,query_temp):
    # for u in range(len(query_temp)):
    #     arr_email_document = []
    #     tmp_req_email = []
    arr_email_document = []
    tmp_req_email = []
    tmp_list = []             
    count_rowDocument = 0
    count_rowDocument_StatusActive = 0
    count_rowDocument_StatusReject = 0
    count_rowDocument_StatusCancel = 0
    statusFile_count_approve = 0
    statusFile_count_pendding = 0
    statusFile_count_reject = 0
    statusFile_count_wait = 0
    list_temp_query = []
    tmp_sid_code_list = []
    arr_gruop = []
    arr_group_sid = []
    tmp_arr_sid = []
    tmp_group_id = None
    json_Data = {}
    list_arr = []
    res_status_file = ''
    str_time = (time.time())
    tmp_status_group = None
    # print('123')
    for z in range(len(query_temp)):
        if z == 0:
            tmp_dict_json = query_temp[z].__dict__
            if '_sa_instance_state' in tmp_dict_json:
                tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state']) 
            tmp_sicode = tmp_dict_json['step_data_sid']
            tmp_sid_code_list.append(tmp_sicode)
            tmp_send_time = tmp_dict_json['send_time']
            tmp_document_id = tmp_dict_json['doc_id']
            tmp_tracking_id = tmp_dict_json['tracking_id']
            tmp_sender_name = tmp_dict_json['sender_name']
            tmp_sender_email = tmp_dict_json['sender_email']
            tmp_file_name = tmp_dict_json['file_name']
            tmp_groupid = tmp_dict_json['group_id']
            email_step_sum = tmp_dict_json['recipient_email']
            if email_step_sum != None:
                email_step_sum = eval(email_step_sum)
            # print(email_step_sum)
            tmpstatus_detail = tmp_dict_json['status_details']
            tmpdocument_status = tmp_dict_json['document_status']
            tmpstepnow = tmp_dict_json['stepnow']
            status_groupid = False
            if tmp_groupid != None:
                tmp_groupid = eval(tmp_groupid)
                if len(tmp_groupid) != 0:
                    status_groupid = True
            if tmpstepnow != None:
                tmpstepnow = int(tmpstepnow)
            tmpstepmax = tmp_dict_json['stepmax']
            if tmpstepmax != None:
                tmpstepmax = int(tmpstepmax)
            if tmpstatus_detail != None:
                tmpstatus_detail = eval(tmpstatus_detail)
                if tmpdocument_status == 'N':
                    for x in range(len(tmpstatus_detail)):
                        # print(tmp_sicode)
                        # print(tmpstatus_detail[x])
                        if emailUser not in arr_email_document:
                            if emailUser in tmpstatus_detail[x]['email']:
                                if tmpstatus_detail[x]['step_status_code'] == 'W':
                                    arr_email_document.append(emailUser)
                                    tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                                    break
                                else:
                                    tmpdocument_status = tmpstatus_detail[x]['step_status_code']
            if tmpdocument_status == 'Z':
                res_status_file_string = 'อยู่ในช่วงดำเนินการ'
            elif tmpdocument_status == 'W':
                res_status_file_string = 'รอคุณอนุมัติ'
            elif tmpdocument_status == 'N':
                res_status_file_string = 'กำลังดำเนินการ'
            elif tmpdocument_status == 'R':
                res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
            else:
                res_status_file_string = ''
                                # else:

            # print(tmpstatus_detail)
        if z == 1:
            tmp_document_type = None
            tmp_dict_json = query_temp[z].__dict__
            if '_sa_instance_state' in tmp_dict_json:
                tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state'])
            tmp_sign_page_options = tmp_dict_json['sign_page_options']
            tmp_document_type = tmp_dict_json['documentType']
            tmp_options_page = []
            if tmp_dict_json['options_page'] != None:
                if tmp_dict_json['options_page'] != '':
                # print(tmp_dict_json['options_page'],tmp_document_id)
                    tmp_options_page = [eval(tmp_dict_json['options_page'])]
            else:
                tmp_options_page = []
            if len(tmp_options_page) != 0:
                # print(tmp_options_page[0]['group_detail'])
                tmp_status_group = False
                if status_groupid == True:
                    if len(tmp_options_page) != 0:
                        if 'group_detail' in tmp_options_page[0]:
                            tmp_group_detail = tmp_options_page[0]['group_detail']
                            if 'group_status' in tmp_group_detail:
                                if tmp_group_detail['group_status'] == True:
                                    tmp_status_group = True
                                    tmpstepnum = tmp_group_detail['step_num']
                            # if 'step_num' in tmp_group_detail:
                            #     tmp_status_group = True
                            #     tmp_group_stepnum = tmp_group_detail['step_num']
                # if 'group_detail' in tmp_options_page[0]:
                #     if 'group_status' in tmp_options_page[0]['group_detail']:
                #         tmpgroupdetails = tmp_options_page[0]['group_detail']
                #         if tmpgroupdetails['group_status'] == True:
                #             tmpstepnum = tmpgroupdetails['step_num']
                            # print(tmpstepnum)
            if tmp_dict_json['documentJson'] != None:
                documentJson_result = eval(tmp_dict_json['documentJson'])
                documentName = documentJson_result['document_name']
                documentType = documentJson_result['document_type']
            else:
                documentName = None
                documentType = None
            if tmp_dict_json['urgent_type'] != None:
                documentUrgentType = tmp_dict_json['urgent_type']
                if documentUrgentType == 'I':
                    documentUrgentString = 'ด่วนมาก'
                elif documentUrgentType == 'U':
                    documentUrgentString = 'ด่วน'
                elif documentUrgentType == 'M':
                    documentUrgentString = 'ปกติ'
        tmp_biz_info = None
        if z == 2:
            if query_temp[z] != None:
                if query_temp[z] != 'None':
                    
                    eval_biz_info = json.dumps(query_temp[z])
                    eval_biz_info = json.loads(eval_biz_info)
                    eval_biz_info = eval(eval_biz_info)
                    # eval_biz_info
                    # print(eval_biz_info)
                    if 'dept_name' in eval_biz_info:            
                        tmp_biz_info = {
                            'tax_id':eval_biz_info['id_card_num'],
                            'role_name' : eval_biz_info['role_name'],
                            'dept_name' : eval_biz_info['dept_name'],
                            'role_level' : eval_biz_info['role_level']               
                        }                                
                    elif 'dept_name' not in eval_biz_info:
                        tmp_biz_info = {
                            'tax_id':eval_biz_info['id_card_num'],
                            'role_name' : eval_biz_info['role_name'],
                            'dept_name' : [],
                            'role_level' : eval_biz_info['role_level']               
                        }
            
        dateTime_String = tmp_send_time
        th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
        ts = int(time.time())
        date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
        year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
        datetime_display = int(dateTime_String.timestamp())
        date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
        yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
        time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
        old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
        if date_time_today == date_time_db:
            date_display_show = time_show_db
        else:
            if year_today == yar_db:
                date_display_show = convert_datetime_TH_2_display(datetime_display)
            else:
                date_display_show = old_year

    if tmp_status_group == True:
        for ui in range(len(tmpstepnum)):
            intstepnum = tmpstepnum[ui] - 1
            tmp_req_email.append(email_step_sum[intstepnum])    
    list_arr.append({
        'group_email':tmp_req_email,
        'group_id':None,
        'group_status':tmp_status_group,
        'sidCode':tmp_sicode,
        'document_name':documentName,
        'document_type':tmp_document_type,
        'document_urgent':documentUrgentType,
        'document_urgent_string':documentUrgentString,
        'dateTime_String':str(dateTime_String).split('+')[0],
        'dateTime_String_TH_1':th_dateTime_2,
        'dateTime_display':date_display_show,
        'document_id':tmp_document_id,
        'stamp_all':tmp_sign_page_options,
        'options_page_document':tmp_options_page,
        'max_step':tmpstepmax,
        'step_now':tmpstepnow,
        # 'dateTime_String_TH_2':th_dateTime_2,
        'date_String':str(dateTime_String).split(' ')[0],
        'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
        'status_file_code':tmpdocument_status,
        'status_file_string':res_status_file_string,
        'dateTime':int(dateTime_String.timestamp()),
        'tracking_id':tmp_tracking_id,
        'sender_name':tmp_sender_name,
        'sender_email':tmp_sender_email,
        'file_name':tmp_file_name,
        'document_business':tmp_biz_info
    })
    if res_status_file == 'W':
        statusFile_count_wait = statusFile_count_wait + 1
    elif res_status_file == 'Y':
        statusFile_count_approve = statusFile_count_approve + 1
    elif res_status_file == 'R':
        statusFile_count_reject = statusFile_count_reject + 1
    else:
        statusFile_count_pendding = statusFile_count_pendding + 1
    return list_arr

def listV5_2(emailUser,query_temp):
    print('12')
    list_arr = []
    tmp_req_email = []
    tmp_req_email = []
    tmp_list = []             
    count_rowDocument = 0
    count_rowDocument_StatusActive = 0
    count_rowDocument_StatusReject = 0
    count_rowDocument_StatusCancel = 0
    statusFile_count_approve = 0
    statusFile_count_pendding = 0
    statusFile_count_reject = 0
    statusFile_count_wait = 0
    list_temp_query = []
    tmp_sid_code_list = []
    arr_gruop = []
    arr_group_sid = []
    tmp_arr_sid = []
    tmp_group_id = None
    json_Data = {}
    res_status_file = ''
    str_time = (time.time())
    tmp_status_group = None
    try:
        for u in range(len(query_temp)):
            arr_email_document = []
            tmp_req_email = []
            for z in range(len(query_temp[u])):
                if z == 0:
                    tmp_dict_json = query_temp[u][z].__dict__
                    if '_sa_instance_state' in tmp_dict_json:
                        tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state']) 
                    tmp_sicode = tmp_dict_json['step_data_sid']
                    tmp_sid_code_list.append(tmp_sicode)
                    tmp_send_time = tmp_dict_json['send_time']
                    tmp_document_id = tmp_dict_json['doc_id']
                    tmp_tracking_id = tmp_dict_json['tracking_id']
                    tmp_sender_name = tmp_dict_json['sender_name']
                    tmp_sender_email = tmp_dict_json['sender_email']
                    tmp_file_name = tmp_dict_json['file_name']
                    tmp_groupid = tmp_dict_json['group_id']
                    email_step_sum = tmp_dict_json['recipient_email']
                    if email_step_sum != None:
                        email_step_sum = eval(email_step_sum)
                    # print(email_step_sum)
                    tmpstatus_detail = tmp_dict_json['status_details']
                    tmpdocument_status = tmp_dict_json['document_status']
                    tmpstepnow = tmp_dict_json['stepnow']
                    status_groupid = False
                    if tmp_groupid != None:
                        tmp_groupid = eval(tmp_groupid)
                        if len(tmp_groupid) != 0:
                            status_groupid = True
                    if tmpstepnow != None:
                        tmpstepnow = int(tmpstepnow)
                    tmpstepmax = tmp_dict_json['stepmax']
                    if tmpstepmax != None:
                        tmpstepmax = int(tmpstepmax)
                    if tmpstatus_detail != None:
                        tmpstatus_detail = eval(tmpstatus_detail)
                        if tmpdocument_status == 'N':
                            for x in range(len(tmpstatus_detail)):
                                # print(tmp_sicode)
                                # print(tmpstatus_detail[x])
                                if emailUser not in arr_email_document:
                                    if emailUser in tmpstatus_detail[x]['email']:
                                        if tmpstatus_detail[x]['step_status_code'] == 'W':
                                            arr_email_document.append(emailUser)
                                            tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                                            break
                                        else:
                                            tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                    if tmpdocument_status == 'Z':
                        res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                    elif tmpdocument_status == 'W':
                        res_status_file_string = 'รอคุณอนุมัติ'
                    elif tmpdocument_status == 'N':
                        res_status_file_string = 'กำลังดำเนินการ'
                    elif tmpdocument_status == 'R':
                        res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                    else:
                        res_status_file_string = ''
                                        # else:

                    # print(tmpstatus_detail)
                if z == 1:
                    tmp_document_type = None
                    tmp_dict_json = query_temp[u][z].__dict__
                    if '_sa_instance_state' in tmp_dict_json:
                        tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state'])
                    tmp_sign_page_options = tmp_dict_json['sign_page_options']
                    tmp_document_type = tmp_dict_json['documentType']
                    tmp_options_page = []
                    if tmp_dict_json['options_page'] != None:
                        if tmp_dict_json['options_page'] != '':
                        # print(tmp_dict_json['options_page'],tmp_document_id)
                            tmp_options_page = [eval(tmp_dict_json['options_page'])]
                    else:
                        tmp_options_page = []
                    if len(tmp_options_page) != 0:
                        # print(tmp_options_page[0]['group_detail'])
                        tmp_status_group = False
                        if status_groupid == True:
                            if len(tmp_options_page) != 0:
                                if 'group_detail' in tmp_options_page[0]:
                                    tmp_group_detail = tmp_options_page[0]['group_detail']
                                    if 'group_status' in tmp_group_detail:
                                        if tmp_group_detail['group_status'] == True:
                                            tmp_status_group = True
                                            tmpstepnum = tmp_group_detail['step_num']
                                    # if 'step_num' in tmp_group_detail:
                                    #     tmp_status_group = True
                                    #     tmp_group_stepnum = tmp_group_detail['step_num']
                        # if 'group_detail' in tmp_options_page[0]:
                        #     if 'group_status' in tmp_options_page[0]['group_detail']:
                        #         tmpgroupdetails = tmp_options_page[0]['group_detail']
                        #         if tmpgroupdetails['group_status'] == True:
                        #             tmpstepnum = tmpgroupdetails['step_num']
                                    # print(tmpstepnum)
                    if tmp_dict_json['documentJson'] != None:
                        documentJson_result = eval(tmp_dict_json['documentJson'])
                        documentName = documentJson_result['document_name']
                        documentType = documentJson_result['document_type']
                    else:
                        documentName = None
                        documentType = None
                    if tmp_dict_json['urgent_type'] != None:
                        documentUrgentType = tmp_dict_json['urgent_type']
                        if documentUrgentType == 'I':
                            documentUrgentString = 'ด่วนมาก'
                        elif documentUrgentType == 'U':
                            documentUrgentString = 'ด่วน'
                        elif documentUrgentType == 'M':
                            documentUrgentString = 'ปกติ'
                tmp_biz_info = None
                if z == 2:
                    if query_temp[u][z] != None:
                        if query_temp[u][z] != 'None':
                            
                            eval_biz_info = json.dumps(query_temp[u][z])
                            eval_biz_info = json.loads(eval_biz_info)
                            eval_biz_info = eval(eval_biz_info)
                            # eval_biz_info
                            # print(eval_biz_info)
                            if 'dept_name' in eval_biz_info:            
                                tmp_biz_info = {
                                    'tax_id':eval_biz_info['id_card_num'],
                                    'role_name' : eval_biz_info['role_name'],
                                    'dept_name' : eval_biz_info['dept_name'],
                                    'role_level' : eval_biz_info['role_level']               
                                }                                
                            elif 'dept_name' not in eval_biz_info:
                                tmp_biz_info = {
                                    'tax_id':eval_biz_info['id_card_num'],
                                    'role_name' : eval_biz_info['role_name'],
                                    'dept_name' : [],
                                    'role_level' : eval_biz_info['role_level']               
                                }
                    
                dateTime_String = tmp_send_time
                th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                ts = int(time.time())
                date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                datetime_display = int(dateTime_String.timestamp())
                date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                if date_time_today == date_time_db:
                    date_display_show = time_show_db
                else:
                    if year_today == yar_db:
                        date_display_show = convert_datetime_TH_2_display(datetime_display)
                    else:
                        date_display_show = old_year

            if tmp_status_group == True:
                for ui in range(len(tmpstepnum)):
                    intstepnum = tmpstepnum[ui] - 1
                    tmp_req_email.append(email_step_sum[intstepnum])    
            list_arr.append({
                'group_email':tmp_req_email,
                'group_id':None,
                'group_status':tmp_status_group,
                'sidCode':tmp_sicode,
                'document_name':documentName,
                'document_type':tmp_document_type,
                'document_urgent':documentUrgentType,
                'document_urgent_string':documentUrgentString,
                'dateTime_String':str(dateTime_String).split('+')[0],
                'dateTime_String_TH_1':th_dateTime_2,
                'dateTime_display':date_display_show,
                'document_id':tmp_document_id,
                'stamp_all':tmp_sign_page_options,
                'options_page_document':tmp_options_page,
                'max_step':tmpstepmax,
                'step_now':tmpstepnow,
                # 'dateTime_String_TH_2':th_dateTime_2,
                'date_String':str(dateTime_String).split(' ')[0],
                'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                'status_file_code':tmpdocument_status,
                'status_file_string':res_status_file_string,
                'dateTime':int(dateTime_String.timestamp()),
                'tracking_id':tmp_tracking_id,
                'sender_name':tmp_sender_name,
                'sender_email':tmp_sender_email,
                'file_name':tmp_file_name,
                'document_business':tmp_biz_info
            })
    except Exception as e:
        exc_type, exc_obj, exc_tb = sys.exc_info()
        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        print(exc_type, fname, exc_tb.tb_lineno)
    return list_arr
        # if res_status_file == 'W':
        #     statusFile_count_wait = statusFile_count_wait + 1
        # elif res_status_file == 'Y':
        #     statusFile_count_approve = statusFile_count_approve + 1
        # elif res_status_file == 'R':
        #     statusFile_count_reject = statusFile_count_reject + 1
        # else:
        #     statusFile_count_pendding = statusFile_count_pendding + 1

def checkDatetime(date_string):
    try:
        date_format = '%Y-%m-%d'
        date_obj = datetime.datetime.strptime(date_string, date_format)
        print(date_obj)
        return True,date_obj
    except ValueError:
        print("Incorrect data format, should be YYYY-MM-DD")
        return False,''

def TradeExcelReport_v2(tmp_tax_id,result_DB):
    result_biz_info = {}
    tmp_list_sid_code = []
    count_document = 0
    count_rowDocument = 0
    count_rowDocument_StatusActive = 0
    count_rowDocument_StatusReject = 0
    count_rowDocument_StatusCancel = 0
    statusFile_count_approve = 0
    statusFile_count_pendding = 0
    statusFile_count_reject = 0
    statusFile_count_wait = 0
    step_time = []
    step_time_total = []
    t1 = None
    t2 = None
    # result_DB = query_email[n]
    sid_email = result_DB.sid
    # status_details_ = result_DB.status_details
    # result_DB = paper_lessdatastep.query.filter(paper_lessdatastep.sid==sid_list_email[n]).first()
    jsonData_eval = eval(result_DB.data_json)
    try:
        tmp_biz_info = eval(result_DB.biz_info)
        if str(tmp_tax_id).replace(' ','') != '':
            if tmp_biz_info['id_card_num'] == tmp_tax_id:
                result_biz_info = {
                    'id':tmp_biz_info['id'],
                    'id_card_num':tmp_biz_info['id_card_num'],
                    'first_name_eng':tmp_biz_info['first_name_eng'],
                    'first_name_th':tmp_biz_info['first_name_th']
                }
            else:
                result_biz_info = {
                    'id':tmp_biz_info['id'],
                    'id_card_num':tmp_biz_info['id_card_num'],
                    'first_name_eng':tmp_biz_info['first_name_eng'],
                    'first_name_th':tmp_biz_info['first_name_th']
                }
        else:
            result_biz_info = {
                'id':tmp_biz_info['id'],
                'id_card_num':tmp_biz_info['id_card_num'],
                'first_name_eng':tmp_biz_info['first_name_eng'],
                'first_name_th':tmp_biz_info['first_name_th']
            }

    except Exception as e:
        if result_DB.biz_info != 'None':
            result_biz_info = {
                'id':None,
                'id_card_num':None,
                'first_name_eng':None,
                'first_name_th':None
            }
        else:
            result_biz_info = {
                'id':None,
                'id_card_num':None,
                'first_name_eng':None,
                'first_name_th':None
            }
    try:
        arr_step_info = []
        timestamp_info = []
        step_time_1 = []
        step_timeline = []
        result = None
        timing_1 = None
        list_string_timing = []
        string_list_timeline = ''
        concat_steptimeline = ''
        list_arr = []
        if 'step_num' in jsonData_eval:
            step_status = ''
            step_before = ''
            my_step = ''
            res_status_file = 'Y'
            arr_step_totle = []
            json_data_info = jsonData_eval
            step_ = json_data_info
            details_email_reject = []
            details_email_incomplete = []
            if 'step_detail' in json_data_info:
                for s in range(len(json_data_info['step_detail'])):
                    json_info_step2 = {}
                    step_2 = json_data_info['step_detail'][s]
                    for u in range(len(json_data_info['step_detail'][s]['activity_code'])):
                        oneMail = json_data_info['step_detail'][s]['one_email']
                        # if str(oneMail).replace(' ','').lower() == self.emailUser:
                        if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
                            # print(timestamp_info)
                            # print(sid_email)
                            if my_step == '':
                                if json_data_info['step_detail'][s]['activity_status'][u] == 'Complete':
                                    step_status = 'Complete'
                                    timestemp = int(time.mktime(datetime.datetime.strptime(json_data_info['step_detail'][s]['activity_time'][u], "%Y-%m-%d %H:%M:%S").timetuple()))
                                    timestamp_info.append(timestemp)
                                    t1 = step_2['activity_time'][u]
                                    t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                    step_time_1.append(t2)
                                elif json_data_info['step_detail'][s]['activity_status'][u] == 'Approve':
                                    step_status = 'Complete'
                                    timestemp = int(time.mktime(datetime.datetime.strptime(json_data_info['step_detail'][s]['activity_time'][u], "%Y-%m-%d %H:%M:%S").timetuple()))
                                    timestamp_info.append(timestemp)
                                    t1 = step_2['activity_time'][u]
                                    t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                    step_time_1.append(t2)
                                elif json_data_info['step_detail'][s]['activity_status'][u] == 'Reject':
                                    step_status = 'Reject'
                                    timestemp = int(time.mktime(datetime.datetime.strptime(json_data_info['step_detail'][s]['activity_time'][u], "%Y-%m-%d %H:%M:%S").timetuple()))
                                    timestamp_info.append(timestemp)
                                    t1 = step_2['activity_time'][u]
                                    t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                    step_time_1.append(t2)
                                else:
                                    try:
                                        step_status  = 'Incomplete'
                                        # t1 = step_2['activity_time'][u]
                                        # t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                        # step_time_1.append(t2)
                                        details_email_incomplete.append({'email':json_data_info['step_detail'][s]['one_email'],'step_num':json_data_info['step_num']})
                                    except Exception as ex:
                                        step_status = 'Incomplete'
                            arr_step_info.append(step_status)
                            arr_step_info.append(step_before)
            # print(arr_step_info)
            if 'Reject' in arr_step_info:
                res_status_file = 'R'
                res_status_file_string = 'เอกสารปฏิเสธอนุมัติ'
            elif 'Complete' in arr_step_info:
                res_status_file = 'Y'
                res_status_file_string = 'อนุมัติแล้ว'
            elif 'Waitting' in arr_step_info:
                res_status_file = 'W'
                res_status_file_string = 'รออนุมัติ'
            elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                res_status_file = 'N'
                res_status_file_string = 'กำลังดำเนินการ'
            else:
                res_status_file_string = 'อนุมัติแล้ว'
            if res_status_file == 'W':
                statusFile_count_wait = statusFile_count_wait + 1
            elif res_status_file == 'Y':
                statusFile_count_approve = statusFile_count_approve + 1
            elif res_status_file == 'R':
                statusFile_count_reject = statusFile_count_reject + 1
            else:
                statusFile_count_pendding = statusFile_count_pendding + 1
            result_SenderDetails = paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_email).first()
            if result_SenderDetails !=None:
                file_name = result_SenderDetails.file_name
                dateTime_String = result_SenderDetails.send_time
                trackingCode = result_SenderDetails.tracking_id
                sender_name = result_SenderDetails.sender_name
                sender_email = result_SenderDetails.sender_email
                if sender_name == 'null null':
                    sender_name = sender_email
            result_DetailsDocument = paper_lessdocument.query.filter(paper_lessdocument.step_id==sid_email).first()
            db.session.close()
            if result_DetailsDocument != None:
                documentsign_page_options = result_DetailsDocument.sign_page_options
                
                if result_DetailsDocument.options_page != None:
                    document_options_page = eval(result_DetailsDocument.options_page)
                else:
                    document_options_page = {'subject_text':'','body_text':''}
                if result_DetailsDocument.urgent_type != None:
                    documentUrgentType = result_DetailsDocument.urgent_type
                    if documentUrgentType == 'I':
                        documentUrgentString = 'ด่วนมาก'
                    elif documentUrgentType == 'U':
                        documentUrgentString = 'ด่วน'
                    elif documentUrgentType == 'M':
                        documentUrgentString = 'ปกติ'
                if result_DetailsDocument.documentJson != None:
                    documentJson_result = eval(result_DetailsDocument.documentJson)
                    documentName = documentJson_result['document_name']
                    documentType = documentJson_result['document_type']
                else:
                    documentName = None
                    documentType = None
                document_Id = result_DetailsDocument.document_id
            start_send_time = dateTime_String.timestamp()
            now = datetime.datetime.now()
            if  res_status_file == 'W' or res_status_file == 'N' :
                timing = (now.timestamp()) - start_send_time
                # print ('w, n',timing)
            elif res_status_file == 'R' or res_status_file == 'Y':
                timing = t2 - start_send_time
                # print ('R,Y',timing)
            else:
                print('else')
            timing_1 = convert_hr_min_sec_v1(int(timing))
            string_timing = ''
            for yy in range(len(timing_1)):
                if timing_1[yy] > 0:
                    if yy == 0:
                        type_date = " วัน "
                    elif yy == 1:
                        type_date = " ชั่วโมง "
                    elif yy == 2:
                        type_date = " นาที "
                    elif yy == 3:
                        type_date = " วินาที "
                    string_timing += str(timing_1[yy]) + type_date
            string_list_timeline = ''
            concat_steptimeline = ''
            if(len(step_time_1) !=0):
                for i in range(len(step_time_1)):
                    if(i==0):
                        # print ('เริ่มต้น : ',start_send_time)
                        result = step_time_1[i] - start_send_time
                        # print ('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ',result)
                        list_timeline = convert_hr_min_sec_v1(int(result))
                        # print ('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ : ',list_timeline)
                        for yy in range(len(list_timeline)):
                            if list_timeline[yy] > 0:
                                if yy == 0:
                                    type_date = " วัน "
                                elif yy == 1:
                                    type_date = " ชั่วโมง "
                                elif yy == 2:
                                    type_date = " นาที "
                                elif yy == 3:
                                    type_date = " วินาที "
                                string_list_timeline += str(list_timeline[yy]) + type_date
                        # print('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ (string)',string_list_timeline)
                        step_timeline.append(string_list_timeline)
                        string_list_timeline = ''
                    else:
                        result = step_time_1[i] - step_time_1[i-1]
                        # print ('ลำดับปัจจุบัน- ลำดับก่อนหน้า',result)
                        list_timeline = convert_hr_min_sec_v1(int(result))
                        for yy in range(len(list_timeline)):
                            if list_timeline[yy] > 0:
                                if yy == 0:
                                    type_date = " วัน "
                                elif yy == 1:
                                    type_date = " ชั่วโมง "
                                elif yy == 2:
                                    type_date = " นาที "
                                elif yy == 3:
                                    type_date = " วินาที "
                                string_list_timeline += str(list_timeline[yy]) + type_date
                        # print('เริ่มต้น -  ลำดับก่อนหน้า (string)',string_list_timeline)
                        step_timeline.append(string_list_timeline)
                        string_list_timeline = ''
                # print ("สรุปเวลาการเซ็นแต่ละลำดับ :",step_timeline)
                concat_steptimeline += 'ระยะเวลาดำเนินการ\n'
                for j in range(len(step_timeline)):
                    if(j == (len(step_timeline))-1):
                        concat_steptimeline += '-ลำดับที่ ' +str(j+1)+ ' : ' + str(step_timeline[j])
                    else:
                        concat_steptimeline += '-ลำดับที่ ' +str(j+1)+ ' : ' + str(step_timeline[j]) + '\n'
                # print ('concat_steptimeline',concat_steptimeline)
            elif(len(step_time_1) == 0):
                concat_steptimeline += 'อยู่ระหว่างดำเนินการ'
            # string_details_avg_time = ''
            string_details_avg_time = 'ระยะเวลาทั้งหมดที่เอกสารถูกดำเนินการ\n'
            if len(timestamp_info) != 0:
                end_time_document = timestamp_info[-1]
                result_start_and_end = end_time_document - start_send_time
                list_day_hr_min_sec = convert_hr_min_sec_v1(int(result_start_and_end))
                for yy in range(len(list_day_hr_min_sec)):

                    if list_day_hr_min_sec[yy] > 0:
                        if yy == 0:
                            type_date = " วัน "
                        elif yy == 1:
                            type_date = " ชั่วโมง "
                        elif yy == 2:
                            type_date = " นาที "
                        elif yy == 3:
                            type_date = " วินาที "
                        string_details_avg_time += str(list_day_hr_min_sec[yy]) + type_date
            # print(string_details_avg_time)
            # else:
            #     string_details_avg_time = str(day_int) + " วัน " + str(hr_int) + " ชั่วโมง " + str(min_int) + " นาที " + str(sec_int) + " วินาที"
            # print(string_details_avg_time)
            if res_status_file == 'N':
                string_details_avg_time = ""

            # th_dateTime_1 = convert_datetime_TH_1(int(dateTime_String.timestamp()))
            th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
            ts = int(time.time())
            date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
            year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
            datetime_display = int(dateTime_String.timestamp())
            date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
            yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
            time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
            old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
            if date_time_today == date_time_db:
                date_display_show = time_show_db
            else:
                if year_today == yar_db:
                    date_display_show = convert_datetime_TH_2_display(datetime_display)
                else:
                    date_display_show = old_year
            lis_details = []
            string_remark_description = ''
            title_remark = ''
            if res_status_file == 'R':
                if len(details_email_reject) != 0:
                    for o in range(len(details_email_reject)):
                        query_data = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(details_email_reject[o]['email'])).all()
                        try:
                            data_json_name = eval(query_data[0].citizen_data)['first_name_th'] + ' ' + eval(query_data[0].citizen_data)['last_name_th']
                        except Exception as e:
                            data_json_name = details_email_incomplete[oi]['email']
                        details_msg = {}
                        details_msg['reject_by'] = details_email_reject[o]['email']
                        details_msg['reject_in_step_num'] = details_email_reject[o]['step_num']
                        details_msg['reject_in_datetime'] = details_email_reject[o]['datetime']
                        title_remark = 'ยกเลิกโดย ลำดับที่ ' + str(details_email_reject[o]['step_num'])
                        datetime_display = convert_datetime_TH_2(int(details_email_reject[o]['datetime_string']))
                        string_remark_description +=  '\n-' + data_json_name + '\nวันที่ ' + datetime_display
                        lis_details.append(details_msg)
            elif res_status_file == 'N':
                if len(details_email_incomplete) != 0:
                    print('details_email_incomplete',details_email_incomplete)
                    for oi in range(len(details_email_incomplete)):
                        tmp_step_num_list_0 = details_email_incomplete[0]['step_num']
                        tmp_step_num_list = details_email_incomplete[oi]['step_num']
                        if tmp_step_num_list_0 == tmp_step_num_list:
                            query_data = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(details_email_incomplete[oi]['email'])).all()
                            try:
                                data_json_name = eval(query_data[0].citizen_data)['first_name_th'] + ' ' + eval(query_data[0].citizen_data)['last_name_th']
                            except Exception as e:
                                data_json_name = details_email_incomplete[oi]['email']
                            details_msg = {}
                            details_msg['pending_by'] = details_email_incomplete[oi]['email']
                            details_msg['pending_in_step_num'] = details_email_incomplete[oi]['step_num']
                            title_remark = 'รอการอนุมัติ ลำดับที่ ' + str(details_email_incomplete[oi]['step_num'])
                            string_remark_description += '\n-' + data_json_name + ''
                            lis_details.append(details_msg)
            list_arr.append({
                'sidCode':sid_email,
                'biz_detail':result_biz_info,
                'document_name':documentName,
                'document_type':documentType,
                'document_urgent':documentUrgentType,
                'document_urgent_string':documentUrgentString,
                'dateTime_String':str(dateTime_String).split('+')[0],
                'dateTime_String_TH_1':th_dateTime_2,
                'dateTime_display':date_display_show,
                'document_id':document_Id,
                'stamp_all':documentsign_page_options,
                'string_details_avg_time':string_details_avg_time,
                # 'dateTime_String_TH_2':th_dateTime_2,
                'date_String':str(dateTime_String).split(' ')[0],
                'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                'status_file_code':res_status_file,
                'status_file_details':lis_details,
                'status_file_string':res_status_file_string,
                'dateTime':int(dateTime_String.timestamp()),
                'tracking_id':trackingCode,
                'sender_name':sender_name,
                'sender_email':sender_email,
                'file_name':file_name,
                'remark_description': title_remark + string_remark_description,
                'timeline': concat_steptimeline,
                'timing': string_timing,
                'data_options':document_options_page
            })
            return list_arr
        else:
            step_status = ''
            res_status_file = 'Y'
            step_before = ''
            step_list_before = []
            step_list_ = []
            step_list_next = []
            arr_step_totle = []
            step_me = ''
            step_sum_status = []
            sum_status_step_list = []
            list_check_step = []
            step_list_data = []
            max_step = (len(jsonData_eval))
            step_infomation = jsonData_eval
            sum_status_step = []
            details_email_reject = []
            details_email_incomplete = []
            for i in range(len(step_infomation)):
                list_check_step = []
                json_step_info_2 = {}
                step_list_data = []
                step_ = step_infomation[i]
                step_num = step_infomation[i]['step_num']
                json_step_info_2['step_status'] = ''
                for u in range(len(step_['step_detail'])):
                    oneMail = step_['step_detail'][u]['one_email']
                    # if str(oneMail).replace(' ','').lower() == self.emailUser:
                    #     step_me = step_infomation[i]['step_num']
                    #     step_me = int(step_me) - 1
                    step_2 = step_['step_detail'][u]
                    for k in range(len(step_2['activity_code'])):
                        if step_2['activity_code'][k] == 'A03':
                            # print()
                            if step_2['activity_status'][k] == 'Complete':
                                timestemp = int(time.mktime(datetime.datetime.strptime(step_2['activity_time'][k], "%Y-%m-%d %H:%M:%S").timetuple()))
                                timestamp_info.append(timestemp)
                                t1 = str(step_2['activity_time'][k])
                                t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))

                                time_success = change_to_Timestamp(t1)
                                step_time_1.append(time_success)
                                # step_time_1.append(t2)
                            elif step_2['activity_status'][k] == 'Approve':
                                timestemp = int(time.mktime(datetime.datetime.strptime(step_2['activity_time'][k], "%Y-%m-%d %H:%M:%S").timetuple()))
                                timestamp_info.append(timestemp)
                                t1 = str(step_2['activity_time'][k])
                                t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                time_success = change_to_Timestamp(t1)
                                step_time_1.append(time_success)
                                # step_time_1.append(t2)
                            elif step_2['activity_status'][k] == 'Reject':
                                timestemp = int(time.mktime(datetime.datetime.strptime(step_2['activity_time'][k], "%Y-%m-%d %H:%M:%S").timetuple()))
                                timestamp_info.append(timestemp)
                                t1 = str(step_2['activity_time'][k])
                                t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                time_success = change_to_Timestamp(t1)
                                step_time_1.append(time_success)
                                # step_time_1.append(t2)
                            json_step_info = {}
                            json_step_info['activity_status'] = step_2['activity_status'][k]
                            json_step_info['one_email'] = step_2['one_email']
                            json_step_info['step_num'] = step_num
                            list_check_step.append(json_step_info['activity_status'])
                            step_list_data.append(json_step_info)
                    # print ('Round time', step_time_1)
                    json_step_info_2['step_info'] = step_list_data
                    if json_step_info_2['step_status'] == '':
                        if 'Reject' in list_check_step:
                            for kz in range(len(step_2['activity_code'])):
                                if step_2['activity_code'][kz] == 'A03':
                                    details_email_reject.append({'email':step_2['one_email'],'step_num':step_num,'datetime':step_2['activity_time'][kz],'datetime_string':time.mktime(datetime.datetime.strptime(step_2['activity_time'][kz], "%Y-%m-%d %H:%M:%S").timetuple())})
                            json_step_info_2['step_status'] = 'Reject'
                        elif 'Complete' in list_check_step:
                            json_step_info_2['step_status'] = 'Complete'
                        elif 'Approve' in list_check_step:
                            json_step_info_2['step_status'] = 'Complete'
                        elif 'Incomplete' in list_check_step:
                            # details_email_incomplete.append({'email':step_2['one_email'],'step_num':step_num})
                            json_step_info_2['step_status'] = 'Incomplete'
                        elif 'Pending' in list_check_step:
                            # details_email_incomplete.append({'email':step_2['one_email'],'step_num':step_num})
                            json_step_info_2['step_status'] = 'Incomplete'
                        else:
                            json_step_info_2['step_status'] = 'Complete'
                    if json_step_info_2['step_status'] == 'Incomplete':
                        if 'Reject' in list_check_step:
                            json_step_info_2['step_status'] = 'Reject'
                        elif 'Complete' in list_check_step:
                            json_step_info_2['step_status'] = 'Complete'
                        elif 'Approve' in list_check_step:
                            json_step_info_2['step_status'] = 'Complete'
                        elif 'Incomplete' in list_check_step:
                            details_email_incomplete.append({'email':step_2['one_email'],'step_num':step_num})
                            json_step_info_2['step_status'] = 'Incomplete'
                        elif 'Pending' in list_check_step:
                            details_email_incomplete.append({'email':step_2['one_email'],'step_num':step_num})
                            json_step_info_2['step_status'] = 'Incomplete'
                        else:
                            json_step_info_2['step_status'] = 'Complete'
                    
                    sum_status_step_list.append(json_step_info_2['step_status'])
                sum_status_step.append(json_step_info_2['step_status'])
                arr_step_info.append(json_step_info_2['step_status'])
            index_mystep = step_me
            # print(sid_email)
            # print(arr_step_info)

            query_status = db.session.query(
                        paper_lesssender.document_status)\
                        .filter(paper_lesssender.step_data_sid==sid_email)\
                        .first()
            # print(query_status.document_status)
            res_status_file = query_status.document_status
            if res_status_file == 'R':
                res_status_file_string = 'เอกสารปฏิเสธอนุมัติ'
            elif res_status_file == 'N':
                if 'Incomplete_1' in arr_step_info or 'Pending_1' in arr_step_info:
                    res_status_file = 'W'
                    res_status_file_string = 'รออนุมัติ'
                elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                    res_status_file = 'N'
                    res_status_file_string = 'กำลังดำเนินการ'
                elif 'Wait__' in arr_step_info:
                    res_status_file = 'Z'
                    res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                elif 'Waitting' in arr_step_info:
                    res_status_file = 'W'
                    res_status_file_string = 'รออนุมัติ'
            else:
                res_status_file_string = 'อนุมัติแล้ว'
            # if 'Reject' in arr_step_info:
            #     res_status_file = 'R'
            #     res_status_file_string = 'เอกสารปฏิเสธอนุมัติ'
            # elif 'Incomplete_1' in arr_step_info or 'Pending_1' in arr_step_info:
            #     res_status_file = 'W'
            #     res_status_file_string = 'รออนุมัติ'
            # elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
            #     res_status_file = 'N'
            #     res_status_file_string = 'กำลังดำเนินการ'
            # elif 'Wait__' in arr_step_info:
            #     res_status_file = 'Z'
            #     res_status_file_string = 'อยู่ในช่วงดำเนินการ'
            # elif 'Waitting' in arr_step_info:
            #     res_status_file = 'W'
            #     res_status_file_string = 'รออนุมัติ'
            # else:
            #     res_status_file_string = 'อนุมัติแล้ว'
            if res_status_file == 'W':
                statusFile_count_wait = statusFile_count_wait + 1
            elif res_status_file == 'Y':
                statusFile_count_approve = statusFile_count_approve + 1
            elif res_status_file == 'R':
                statusFile_count_reject = statusFile_count_reject + 1
            else:
                statusFile_count_pendding = statusFile_count_pendding + 1
            result_SenderDetails = paper_lesssender.query.filter(paper_lesssender.step_data_sid==sid_email).first()
            db.session.close()
            if result_SenderDetails !=None:
                file_name = result_SenderDetails.file_name
                dateTime_String = result_SenderDetails.send_time
                trackingCode = result_SenderDetails.tracking_id
                sender_name = result_SenderDetails.sender_name
                sender_email = result_SenderDetails.sender_email
                if sender_name == 'null null':
                    sender_name = sender_email
            result_DetailsDocument = paper_lessdocument.query.filter(paper_lessdocument.step_id==sid_email).first()
            db.session.close()
            if result_DetailsDocument != None:
                documentsign_page_options = result_DetailsDocument.sign_page_options
                if result_DetailsDocument.options_page != None:
                    document_options_page = eval(result_DetailsDocument.options_page)
                else:
                    document_options_page = {'subject_text':'','body_text':''}
                if result_DetailsDocument.urgent_type != None:
                    documentUrgentType = result_DetailsDocument.urgent_type
                    if documentUrgentType == 'I':
                        documentUrgentString = 'ด่วนมาก'
                    elif documentUrgentType == 'U':
                        documentUrgentString = 'ด่วน'
                    elif documentUrgentType == 'M':
                        documentUrgentString = 'ปกติ'
                if result_DetailsDocument.documentJson != None:
                    documentJson_result = eval(result_DetailsDocument.documentJson)
                    documentName = documentJson_result['document_name']
                    documentType = documentJson_result['document_type']
                else:
                    documentName = None
                    documentType = None
                document_Id = result_DetailsDocument.document_id
            start_send_time = dateTime_String.timestamp()
            now = datetime.datetime.now()
            if  res_status_file == 'W' or res_status_file == 'N' :
                timing = (now.timestamp()) - start_send_time
                # print ('w, n',timing)
            elif res_status_file == 'R' or res_status_file == 'Y':
                timing = t2 - start_send_time
                # print ('R,Y',timing)
            else:
                print('else')
            timing_1 = convert_hr_min_sec_v1(int(timing))
            string_timing = ''
            
            for yy in range(len(timing_1)):
                if timing_1[yy] > 0:
                    if yy == 0:
                        type_date = " วัน "
                    elif yy == 1:
                        type_date = " ชั่วโมง "
                    elif yy == 2:
                        type_date = " นาที "
                    elif yy == 3:
                        type_date = " วินาที "
                    string_timing += str(timing_1[yy]) + type_date
            string_list_timeline = ''
            concat_steptimeline = ''
            timeline_ = getTimeline(dateTime_String,step_time_1)

            string_details_avg_time = 'ระยะเวลาทั้งหมดที่เอกสารถูกดำเนินการ\n'
            if res_status_file == 'R':
                if len(timestamp_info) != 0:
                    # end_time_document = timestamp_info[-1]
                    # result_start_and_end = end_time_document - start_send_time
                    end_time_document = timestamp_info[-1]
                    result_start_and_end = end_time_document - start_send_time
                    list_day_hr_min_sec = convert_hr_min_sec_v1(int(result_start_and_end))
                    # print(end_time_document,start_send_time)
                    # print(timestamp_info)
                    for yy in range(len(list_day_hr_min_sec)):
                        if list_day_hr_min_sec[yy] > 0:
                            if yy == 0:
                                type_date = " วัน "
                            elif yy == 1:
                                type_date = " ชั่วโมง "
                            elif yy == 2:
                                type_date = " นาที "
                            elif yy == 3:
                                type_date = " วินาที "
                            string_details_avg_time += str(list_day_hr_min_sec[yy]) + type_date
                
            if res_status_file == 'N':
                string_details_avg_time = ""
            # th_dateTime_1 = convert_datetime_TH_1(int(dateTime_String.timestamp()))
            th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
            ts = int(time.time())
            date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
            year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
            datetime_display = int(dateTime_String.timestamp())
            date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
            yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
            time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
            old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
            if date_time_today == date_time_db:
                date_display_show = time_show_db
            else:
                if year_today == yar_db:
                    date_display_show = convert_datetime_TH_2_display(datetime_display)
                else:
                    date_display_show = old_year
            lis_details = []
            string_remark_description = ''
            title_remark = ''
            if res_status_file == 'R':
                query_step = db.session.query(
                        paper_lesssender.status_details,
                        paper_lesssender.stepnow)\
                        .filter(paper_lesssender.step_data_sid==sid_email)\
                        .first()
                query_ = db.session.query(
                        paper_lessdatastep.data_json,
                       )\
                        .filter(paper_lessdatastep.sid==sid_email)\
                        .first()
                
                # stepnow = query_step.stepnow
                step = eval(query_step.status_details)
                step_rej = int(len(step_time_1) - 1 )
                ch_rej=eval(query_.data_json)
                ch_rej2 = ch_rej[step_rej]
                step_detail = ch_rej2['step_detail']
                ch_step_rej = None
                email_reject = None
                # print(ch_rej2['step_detail'])
                for ch in range(len(step_detail)):
                    # print('77',step_detail[ch]['activity_status'][0])
                    if step_detail[ch]['activity_status'][0] == 'Reject':
                        ch_step_rej = ch 
                        email_reject = step_detail[ch]['one_email']
                        # print('ch',step_detail[ch]['one_email'])
                # print('sid',sid_email)
                
                for st in range(len(step)):
                    if step[st]['step_status'] == 'Reject':
                        email = step[st]['email']
                        # print(ch_step_rej)
                        # print('email',email_reject)
                        time_reject = step_time_1[len(step_time_1) -1 ]
                        for m in range(len(email)):
                            query_data = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(email_reject)).all()
                            if len(query_data) != 0:
                                if eval(query_data[0].citizen_data)['first_name_th'] != None:
                                    data_json_name = str(eval(query_data[0].citizen_data)['first_name_th'] + ' ' + eval(query_data[0].citizen_data)['last_name_th'])
                                else:
                                    data_json_name = step[st]['email']
                            else:
                                data_json_name = step[st]['email']
                        details_msg = {}
                        details_msg['reject_by'] = step[st]['email']
                        details_msg['reject_in_step_num'] = step[st]['step_num']
                        details_msg['reject_in_datetime'] = str(datetime.datetime.fromtimestamp(time_reject))
                        title_remark = 'ยกเลิกโดย ลำดับที่ ' + str(step[st]['step_num'])
                        datetime_display = convert_datetime_TH_2(int(time_reject))
                        # print('time_reject',time_reject)
                        # print('datetime_display',datetime_display)
                        string_remark_description +=  '\n-' + str(data_json_name) + '\nวันที่ ' + datetime_display
                        lis_details.append(details_msg)  
            
            # if len(details_email_reject) != 0:
            #     for o in range(len(details_email_reject)):
            #         query_data = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(details_email_reject[o]['email'])).all()
            #         if len(query_data) != 0:
            #             if eval(query_data[0].citizen_data)['first_name_th'] != None:
            #                 data_json_name = str(eval(query_data[0].citizen_data)['first_name_th'] + ' ' + eval(query_data[0].citizen_data)['last_name_th'])
            #             else:
            #                 data_json_name = details_email_reject[o]['email']
            #         else:
            #             data_json_name = details_email_reject[o]['email']
            #         # print(data_json_name)
            #         details_msg = {}
            #         details_msg['reject_by'] = details_email_reject[o]['email']
            #         details_msg['reject_in_step_num'] = details_email_reject[o]['step_num']
            #         details_msg['reject_in_datetime'] = details_email_reject[o]['datetime']
            #         print(details_email_reject[o]['datetime'])
            #         title_remark = 'ยกเลิกโดย ลำดับที่ ' + str(details_email_reject[o]['step_num'])
            #         print(details_email_reject[o]['datetime_string'])
            #         datetime_display = convert_datetime_TH_2(int(details_email_reject[o]['datetime_string']))
            #         string_remark_description +=  '\n-' + data_json_name + '\nวันที่ ' + datetime_display
            #         lis_details.append(details_msg)
            elif res_status_file == 'N':
                query_step = db.session.query(
                        paper_lesssender.status_details,
                        paper_lesssender.stepnow)\
                        .filter(paper_lesssender.step_data_sid==sid_email)\
                        .first()
                stepnow = query_step.stepnow
                step = eval(query_step.status_details)
                for st in range(len(step)):
                    if step[st]['step_status'] == 'Incomplete' or step[st]['step_status'] == 'Pending' : 
                        if stepnow == step[st]['step_num'] :
                            email = step[st]['email']
                            for m in range(len(email)) :
                                query_data = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(email[m])).all()
                                try:
                                    data_json_name = eval(query_data[0].citizen_data)['first_name_th'] + ' ' + eval(query_data[0].citizen_data)['last_name_th']
                                except Exception as e:
                                    data_json_name = step[st]['email']
                                details_msg = {}
                                details_msg['pending_by'] = step[st]['email']
                                details_msg['pending_in_step_num'] = step[st]['step_num']
                                title_remark = 'รอการอนุมัติ ลำดับที่ ' + str(step[st]['step_num'])
                                string_remark_description += '\n-' + str(data_json_name) + ''
                                lis_details.append(details_msg)
                # if len(details_email_incomplete) != 0:
                #     for oi in range(len(details_email_incomplete)):
                #         tmp_step_num_list_0 = details_email_incomplete[0]['step_num']
                #         tmp_step_num_list = details_email_incomplete[oi]['step_num']
                #         if tmp_step_num_list_0 == tmp_step_num_list:
                #             query_data = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(details_email_incomplete[oi]['email'])).all()
                #             try:
                #                 data_json_name = eval(query_data[0].citizen_data)['first_name_th'] + ' ' + eval(query_data[0].citizen_data)['last_name_th']
                #             except Exception as e:
                #                 data_json_name = details_email_incomplete[oi]['email']

                #             details_msg = {}
                #             details_msg['pending_by'] = details_email_incomplete[oi]['email']
                #             details_msg['pending_in_step_num'] = details_email_incomplete[oi]['step_num']
                #             title_remark = 'รอการอนุมัติ ลำดับที่ ' + str(details_email_incomplete[oi]['step_num'])
                #             string_remark_description += '\n-' + data_json_name + ''
                            
                #             lis_details.append(details_msg)
            list_arr.append({
                'sidCode':sid_email,
                'biz_detail':result_biz_info,
                'document_name':documentName,
                'document_type':documentType,
                'document_urgent':documentUrgentType,
                'document_urgent_string':documentUrgentString,
                'dateTime_String':str(dateTime_String).split('+')[0],
                'dateTime_String_TH_1':th_dateTime_2,
                'dateTime_display':date_display_show,
                'document_id':document_Id,
                'stamp_all':documentsign_page_options,
                'string_details_avg_time':string_details_avg_time,
                # 'dateTime_String_TH_2':th_dateTime_2,
                'date_String':str(dateTime_String).split(' ')[0],
                'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                'status_file_code':res_status_file,
                'status_file_details':lis_details,
                'status_file_string':res_status_file_string,
                'dateTime':int(dateTime_String.timestamp()),
                'tracking_id':trackingCode,
                'sender_name':sender_name,
                'sender_email':sender_email,
                'file_name':file_name,
                'remark_description': title_remark + string_remark_description,
                'timeline': timeline_,
                'timing': string_timing,
                'data_options':document_options_page
            })
            # print('LIST_ARR',list_arr)
            db.session.close()
            return list_arr
        db.session.close()
    except Exception as e:
        exc_type, exc_obj, exc_tb = sys.exc_info()
        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        print(exc_type, fname, exc_tb.tb_lineno)
        print('ee',e)

def fucn_filter_documentgroup(list_data):
    group_arr = []
    arr_templatecode = []
    tmpcolor_group = None
    tmpemail_middle = None
    tmpwebhook = None
    if len(list_data) != 0:
        for n in range(len(list_data)):
            tmp_data = list_data[n]
            tmptemplate_code = tmp_data['template']
            tmpstep_group = tmp_data['step_group']
            tmpgroup_data = tmp_data['group_data']
            tmpgroup_title = tmp_data['group_title']
            tmpgroup_name = tmp_data['group_name']
            tmpdocument_type = tmp_data['document_type']
            tmpbiz_info = tmp_data['biz_info']
            tmpcover_page = tmp_data['cover_page']
            if 'email_middle' in tmp_data:
                tmpemail_middle = tmp_data['email_middle']
            if 'webhook' in tmp_data:
                tmpwebhook = tmp_data['webhook']
            if 'group_color' in tmp_data:
                tmp_group_clr = tmp_data['group_color']
                if 'color' in tmp_group_clr[0]:
                    tmp_clr = tmp_group_clr[0]['color']
            if tmp_clr not in group_arr:
                group_arr.append(tmp_clr)
                for x in range(len(tmptemplate_code)):
                    arr_templatecode.append(tmptemplate_code[x])
            else:
                for x in range(len(tmptemplate_code)):
                    if tmptemplate_code[x] not in arr_templatecode:
                        arr_templatecode.append(tmptemplate_code[x])        
        return {'result':'OK','messageText':{'email_middle':tmpemail_middle,'template_code':arr_templatecode,'color':tmp_clr,'group_data':tmpgroup_data,'group_step':tmpstep_group,'group_title':tmpgroup_title,'group_name':tmpgroup_name,'document_type':tmpdocument_type,'bizinfo':tmpbiz_info,'cover_page':tmpcover_page,'webhook':tmpwebhook}}
    return {'result':'ER','messageText':'data not found'}
    
def getEmail_complete(sid):
    list_onemail = []
    list_onemail2 = []
    doc_id = None
    
    with slave.connect() as connection:
        result = connection.execute(text('SELECT "id","sid","data_json","update_time","data_json_Upload","upload_time",\
            "upload_time","biz_info","view_details","qrCode_position" FROM "tb_step_data" WHERE sid=:val'),val=sid)
        tmp = [dict(row) for row in result]
        connection.close()
    with slave.connect() as connection:
        result = connection.execute(text('SELECT "id","send_user","send_time","status","sender_name","sender_email","sender_position","file_id",\
            "file_name","tracking_id","step_code","step_data_sid","doc_id","sender_biz_info","template_webhook","email_center","email_center",\
            "recipient_email","status_details","document_status","group_id","stepnow","stepmax","time_expire",\
            "importance","eform_id","last_digitsign" FROM "tb_send_detail" WHERE step_data_sid=:val'),val=sid)
        tmp2 = [dict(row) for row in result]
        connection.close()
    for a in range(len(tmp2)):
        sender_email = tmp2[a]['sender_email']
        doc_id = tmp2[a]['doc_id']
        list_onemail.append(sender_email)

    for x in range(len(tmp)):
        data_json = []
        arr_tmp = eval(str(tmp[x]['data_json']))
        if 'step_num' in arr_tmp:
            data_json.append(arr_tmp)
        else:
            data_json = arr_tmp
        for y in range(len(data_json)):
            step_detail = eval(str(data_json[y]['step_detail']))
            for k in range(len(step_detail)):
                activity_code = step_detail[k]['activity_code']
                activity_status = step_detail[k]['activity_status']
                for kk in range(len(activity_code)):
                    if activity_code[kk] == 'A03':
                        if activity_status[kk] == 'Complete' or activity_status[kk] == 'Approve' or activity_status[kk] == 'Reject':
                            list_onemail.append(step_detail[k]['one_email'])
    dict_ = Counter(list_onemail)
    for x,y in dict_.items():
        list_onemail2.append(x)
    
    return list_onemail2,doc_id

def find_email(name):
    name = '%' + name + '%'
    query_name = paper_lesssender.query.filter(paper_lesssender.sender_name.ilike(name)).first()
    thai_email = ''
    if query_name != None :
        thai_email = query_name.sender_email
        return thai_email
    else :
        return thai_email

def select_trackingid_from_sid(sid):
    try:
        temp_query = paper_lesssender.query.filter(paper_lesssender.step_data_sid == str(sid)).all()
        tracking_id = temp_query[0].tracking_id
        sender_name = temp_query[0].sender_name
        doc_id = temp_query[0].doc_id
        file_name = temp_query[0].file_name      
        return {'trackingId': tracking_id, 'senderName': sender_name, 'docId': doc_id, 'fileName': file_name,'sid':sid}
    except Exception as e:
        exc_type, exc_obj, exc_tb = sys.exc_info()
        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
        print(exc_type, fname, exc_tb.tb_lineno)
        return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(e)}

def getEmail_Incomplete(sid):
    list_onemail = []
    list_onemail2 = []
    doc_id = None
    time_ex = None
    
    with slave.connect() as connection:
        result = connection.execute(text('SELECT "id","sid","data_json","update_time","data_json_Upload","upload_time",\
            "upload_time","biz_info","view_details","qrCode_position" FROM "tb_step_data" WHERE sid=:val'),val=sid)
        tmp = [dict(row) for row in result]
        connection.close()
    with slave.connect() as connection:
        result = connection.execute(text('SELECT "id","send_user","send_time","status","sender_name","sender_email","sender_position","file_id",\
            "file_name","tracking_id","step_code","step_data_sid","doc_id","sender_biz_info","template_webhook","email_center","email_center",\
            "recipient_email","status_details","document_status","group_id","stepnow","stepmax","time_expire",\
            "importance","eform_id","last_digitsign" FROM "tb_send_detail" WHERE step_data_sid=:val'),val=sid)
        tmp2 = [dict(row) for row in result]
        connection.close()
    for a in range(len(tmp2)):
        sender_email = tmp2[a]['sender_email']
        doc_id = tmp2[a]['doc_id']
        list_onemail.append(sender_email)

    for x in range(len(tmp2)):
        data_json = []
        arr_tmp2 = eval(str(tmp2[x]['status_details']))
        time_ex = tmp2[x]['time_expire']
        for x in range(len(arr_tmp2)):
            if arr_tmp2[x]['step_status'] == 'Incomplete' and arr_tmp2[x]['step_status_code'] == 'W':
                for y in range(len(arr_tmp2[x]['email'])):
                    list_onemail.append(arr_tmp2[x]['email'][y])
    dict_ = Counter(list_onemail)
    for x,y in dict_.items():
        list_onemail2.append(x)
    
    return list_onemail2,doc_id,time_ex

def check_count_paper_start_end_v2(query_count_all,list2,time_end,time_start):
    # เช็คเอกสารทั้งหมดตามเวลา
    list_json = []
    list_count_user = []
    tmp_json = {}
    tmp_json_1 = {}
    count_all = 0
    count_active = 0
    count_reject = 0
    count_delete = 0
    count_inactive = 0
    countStatus_Y = 0
    countStatus_N =0
    countStatus_R = 0
    countStatus_W = 0 
    countStatus_N = 0
    countStatus_None = 0
    list_user2 = []
    if len(query_count_all) == 0 :            
        timestamp_end = int(datetime.datetime.timestamp(time_end))
        tmp_json['all_documents'] = count_all
        tmp_json['documents_active'] = count_active
        tmp_json['count_user'] = len(list_user2)
        tmp_json['documents_reject'] = count_reject
        tmp_json['documents_delete'] = count_delete
        tmp_json['documents_inactive'] = count_inactive
        tmp_json['doc_Y'] = countStatus_Y
        tmp_json['doc_W'] = countStatus_W
        tmp_json['doc_N'] = countStatus_N
        tmp_json['doc_R'] = countStatus_R
        tmp_json['doc_none'] = countStatus_None
        tmp_json['list_user'] = list_user2
        list_json.append(tmp_json)
        tmp_json = {}
        tmp_json_1['documents'] = list_json
    else:
        for y in range(len(list2)):
            timestamp_end = int(datetime.datetime.timestamp(time_end))
            timestamp_start = int(datetime.datetime.timestamp(time_start))
            user = list2[y]['sender_email']
            doc_status = list2[y]['document_status']
            list_user2.append(user)
            if doc_status != None:
                if doc_status == 'Y':
                    countStatus_Y = countStatus_Y + 1
                if doc_status == 'N':
                    countStatus_N = countStatus_N + 1 
                if doc_status == 'W':
                    countStatus_W = countStatus_W + 1 
                if doc_status == 'R':
                    countStatus_R = countStatus_R + 1 
            if doc_status == None:
                countStatus_None = countStatus_None + 1
            if int(list2[y]['sendtime']) <= int(timestamp_end) and int(list2[y]['sendtime']) >= int(timestamp_start)\
            or int(list2[y]['updatetime']) <= int(timestamp_end) and int(list2[y]['updatetime']) >= int(timestamp_start):
                count_all = count_all + 1
            if int(list2[y]['sendtime']) <= int(timestamp_end) and int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['status'] == 'ACTIVE'\
            or int(list2[y]['updatetime']) <= int(timestamp_end) and int(list2[y]['updatetime']) >= int(timestamp_start) and list2[y]['status'] == 'ACTIVE':
                count_active = count_active + 1
            if int(list2[y]['sendtime']) <= int(timestamp_end) and int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['status'] == 'REJECT'\
            or int(list2[y]['updatetime']) <= int(timestamp_end) and int(list2[y]['updatetime']) >= int(timestamp_start) and list2[y]['status'] == 'REJECT':
                count_reject = count_reject + 1
            if int(list2[y]['sendtime']) <= int(timestamp_end) and int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['status'] == 'DELETE'\
            or int(list2[y]['updatetime']) <= int(timestamp_end) and int(list2[y]['updatetime']) >= int(timestamp_start) and list2[y]['status'] == 'DELETE':
                count_delete = count_delete + 1
            if int(list2[y]['sendtime']) <= int(timestamp_end) and int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['status'] == 'INACTIVE'\
            or int(list2[y]['updatetime']) <= int(timestamp_end) and int(list2[y]['updatetime']) >= int(timestamp_start) and list2[y]['status'] == 'INACTIVE':
                count_inactive = count_inactive + 1

        tmp_json['all_documents'] = count_all
        tmp_json['documents_active'] = count_active
        tmp_json['count_user'] = len(Counter(list_user2))
        tmp_json['documents_reject'] = count_reject
        tmp_json['documents_delete'] = count_delete
        tmp_json['documents_inactive'] = count_inactive
        tmp_json['doc_Y'] = countStatus_Y
        tmp_json['doc_W'] = countStatus_W
        tmp_json['doc_N'] = countStatus_N
        tmp_json['doc_R'] = countStatus_R
        tmp_json['doc_none'] = countStatus_None
        list_ = []
        list_ = listUser(Counter(list_user2))
        tmp_json['list_user'] = list_
        list_json.append(tmp_json)
        tmp_json = {}
        tmp_json_1['documents'] = list_json
    return tmp_json_1

def check_count_paper_end_v2(query_count_all,list2,time_end):
    # เช็คเอกสารทั้งหมดตามเวลา
    list_json = []
    list_count_user = []
    tmp_json = {}
    tmp_json_1 = {}
    count_all = 0
    count_active = 0
    count_reject = 0
    count_delete = 0
    count_inactive = 0 
    countStatus_Y = 0
    countStatus_N =0
    countStatus_R = 0
    countStatus_W = 0 
    countStatus_N = 0
    countStatus_None = 0
    list_user2 = []
    if len(query_count_all) == 0 :
        timestamp_end = int(datetime.datetime.timestamp(time_end))
        tmp_json['all_documents'] = count_all
        tmp_json['documents_active'] = count_active
        tmp_json['count_user'] = len(list_user2)
        tmp_json['documents_reject'] = count_reject
        tmp_json['documents_delete'] = count_delete
        tmp_json['documents_inactive'] = count_inactive
        tmp_json['list_user'] = list_user2
        tmp_json['doc_Y'] = countStatus_Y
        tmp_json['doc_W'] = countStatus_W
        tmp_json['doc_N'] = countStatus_N
        tmp_json['doc_R'] = countStatus_R
        tmp_json['doc_none'] = countStatus_None
        list_json.append(tmp_json)
        tmp_json = {}
        tmp_json_1['documents'] = list_json
    else:
        for y in range(len(list2)):
            timestamp_end = int(datetime.datetime.timestamp(time_end))
            user = list2[y]['sender_email']
            doc_status = list2[y]['document_status']
            list_user2.append(user)
            if doc_status != None:
                if doc_status == 'Y':
                    countStatus_Y = countStatus_Y + 1
                if doc_status == 'N':
                    countStatus_N = countStatus_N + 1 
                if doc_status == 'W':
                    countStatus_W = countStatus_W + 1 
                if doc_status == 'R':
                    countStatus_R = countStatus_R + 1 
            if doc_status == None:
                countStatus_None = countStatus_None + 1
            if int(list2[y]['sendtime']) <= int(timestamp_end)\
            or int(list2[y]['updatetime']) <= int(timestamp_end):
                count_all = count_all + 1
            if int(list2[y]['sendtime']) <= int(timestamp_end) and list2[y]['status'] == 'ACTIVE'\
            or int(list2[y]['updatetime']) <= int(timestamp_end) and list2[y]['status'] == 'ACTIVE':
                count_active = count_active + 1
            if int(list2[y]['sendtime']) <= int(timestamp_end) and list2[y]['status'] == 'REJECT'\
            or int(list2[y]['updatetime']) <= int(timestamp_end) and list2[y]['status'] == 'REJECT':
                count_reject = count_reject + 1
            if int(list2[y]['sendtime']) <= int(timestamp_end) and list2[y]['status'] == 'DELETE'\
            or int(list2[y]['updatetime']) <= int(timestamp_end) and list2[y]['status'] == 'DELETE':
                count_delete = count_delete + 1
            if int(list2[y]['sendtime']) <= int(timestamp_end) and list2[y]['status'] == 'INACTIVE'\
            or int(list2[y]['updatetime']) <= int(timestamp_end) and list2[y]['status'] == 'INACTIVE':
                count_inactive = count_inactive + 1
        tmp_json['all_documents'] = count_all
        tmp_json['documents_active'] = count_active
        tmp_json['documents_reject'] = count_reject
        tmp_json['documents_delete'] = count_delete
        tmp_json['documents_inactive'] = count_inactive
        tmp_json['count_user'] = len(Counter(list_user2))
        tmp_json['doc_Y'] = countStatus_Y
        tmp_json['doc_W'] = countStatus_W
        tmp_json['doc_N'] = countStatus_N
        tmp_json['doc_R'] = countStatus_R
        tmp_json['doc_none'] = countStatus_None
        list_ = []
        list_ = listUser(Counter(list_user2))
        tmp_json['list_user'] = list_
        list_json.append(tmp_json)
        tmp_json = {}
        tmp_json_1['documents'] = list_json
    return tmp_json_1

def check_count_paper_start_v2(query_count_all,list2,time_start):
    list_json = []
    list_count_user = []
    tmp_json = {}
    count_all = 0
    count_active = 0
    count_reject = 0
    count_delete = 0
    count_inactive = 0
    countStatus_Y = 0
    countStatus_N =0
    countStatus_R = 0
    countStatus_W = 0 
    countStatus_N = 0
    countStatus_None = 0
    list_user2 = []
    tmp_json_1 = {}
    if len(query_count_all) == 0 :
        timestamp_start = int(datetime.datetime.timestamp(time_start))
        tmp_json['all_documents'] = count_all
        tmp_json['documents_active'] = count_active
        tmp_json['count_user'] = len(list_user2)
        tmp_json['documents_reject'] = count_reject
        tmp_json['documents_delete'] = count_delete
        tmp_json['documents_inactive'] = count_inactive
        tmp_json['list_user'] = list_user2
        tmp_json['doc_Y'] = countStatus_Y
        tmp_json['doc_W'] = countStatus_W
        tmp_json['doc_N'] = countStatus_N
        tmp_json['doc_R'] = countStatus_R
        tmp_json['doc_none'] = countStatus_None
        list_json.append(tmp_json)
        tmp_json = {}
        tmp_json_1['documents'] = list_json
    else:
        for y in range(len(list2)):
            timestamp_start = int(datetime.datetime.timestamp(time_start))
            user = list2[y]['sender_email']
            doc_status = list2[y]['document_status']
            list_user2.append(user)
            if doc_status != None:
                if doc_status == 'Y':
                    countStatus_Y = countStatus_Y + 1
                if doc_status == 'N':
                    countStatus_N = countStatus_N + 1 
                if doc_status == 'W':
                    countStatus_W = countStatus_W + 1 
                if doc_status == 'R':
                    countStatus_R = countStatus_R + 1 
            if doc_status == None:
                countStatus_None = countStatus_None + 1
            if int(list2[y]['sendtime']) >= int(timestamp_start)\
            or int(list2[y]['updatetime']) >= int(timestamp_start):
                count_all = count_all + 1
            if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['status'] == 'ACTIVE'\
            or int(list2[y]['updatetime']) >= int(timestamp_start) and list2[y]['status'] == 'ACTIVE':
                count_active = count_active + 1
            if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['status'] == 'REJECT'\
            or int(list2[y]['updatetime']) >= int(timestamp_start) and list2[y]['status'] == 'REJECT':
                count_reject = count_reject + 1
            if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['status'] == 'DELETE'\
            or int(list2[y]['updatetime']) >= int(timestamp_start) and list2[y]['status'] == 'DELETE':
                count_delete = count_delete + 1
            if int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['status'] == 'INACTIVE'\
            or int(list2[y]['updatetime']) >= int(timestamp_start) and list2[y]['status'] == 'INACTIVE':
                count_inactive = count_inactive + 1

        tmp_json['all_documents'] = count_all
        tmp_json['documents_active'] = count_active
        tmp_json['documents_reject'] = count_reject
        tmp_json['documents_delete'] = count_delete
        tmp_json['documents_inactive'] = count_inactive
        tmp_json['count_user'] = len(Counter(list_user2))
        tmp_json['doc_Y'] = countStatus_Y
        tmp_json['doc_W'] = countStatus_W
        tmp_json['doc_N'] = countStatus_N
        tmp_json['doc_R'] = countStatus_R
        tmp_json['doc_none'] = countStatus_None
        list_ = []
        list_ = listUser(Counter(list_user2))
        tmp_json['list_user'] = list_        
        list_json.append(tmp_json)
        tmp_json = {}
        tmp_json_1['documents'] = list_json
    return tmp_json_1

def check_count_paper_all_v2(query_count_all,list2):
    list_json = []
    list_count_user = []
    tmp_json = {}
    tmp_json_1 = {}
    count_all = 0
    count_active = 0
    count_reject = 0
    count_delete = 0
    count_inactive = 0
    countStatus_Y = 0
    countStatus_N =0
    countStatus_R = 0
    countStatus_W = 0 
    countStatus_N = 0
    countStatus_None = 0
    list_user2 = []
    if len(query_count_all) == 0 :
        tmp_json['all_documents'] = count_all
        tmp_json['documents_active'] = count_active
        tmp_json['count_user'] = len(list_user2)
        tmp_json['documents_reject'] = count_reject
        tmp_json['documents_delete'] = count_delete
        tmp_json['documents_inactive'] = count_inactive
        tmp_json['list_user'] = list_user2
        tmp_json['doc_Y'] = countStatus_Y
        tmp_json['doc_W'] = countStatus_W
        tmp_json['doc_N'] = countStatus_N
        tmp_json['doc_R'] = countStatus_R
        tmp_json['doc_none'] = countStatus_None
        list_json.append(tmp_json)
        tmp_json = {}
        tmp_json_1['documents'] = list_json
    else:
        for y in range(len(list2)):
            user = list2[y]['sender_email']
            doc_status = list2[y]['document_status']
            count_all = count_all + 1
            list_user2.append(user)
            if doc_status != None:
                if doc_status == 'Y':
                    countStatus_Y = countStatus_Y + 1
                if doc_status == 'N':
                    countStatus_N = countStatus_N + 1 
                if doc_status == 'W':
                    countStatus_W = countStatus_W + 1 
                if doc_status == 'R':
                    countStatus_R = countStatus_R + 1 
            if doc_status == None:
                countStatus_None = countStatus_None + 1
            if list2[y]['status'] == 'ACTIVE':
                count_active = count_active + 1
            if list2[y]['status'] == 'REJECT':
                count_reject = count_reject + 1
            if list2[y]['status'] == 'DELETE':
                count_delete = count_delete + 1
            if list2[y]['status'] == 'INACTIVE':
                count_inactive = count_inactive + 1

        tmp_json['all_documents'] = count_all
        tmp_json['documents_active'] = count_active
        tmp_json['documents_reject'] = count_reject
        tmp_json['documents_delete'] = count_delete
        tmp_json['documents_inactive'] = count_inactive
        tmp_json['count_user'] = len(Counter(list_user2))
        tmp_json['doc_Y'] = countStatus_Y
        tmp_json['doc_W'] = countStatus_W
        tmp_json['doc_N'] = countStatus_N
        tmp_json['doc_R'] = countStatus_R
        tmp_json['doc_none'] = countStatus_None
        list_ = []
        list_ = listUser(Counter(list_user2))
        tmp_json['list_user'] = list_        
        list_json.append(tmp_json)
        tmp_json = {}
        tmp_json_1['documents'] = list_json
    return tmp_json_1

def getlistTimeline(start_send_time,step_time):
    sendtime = int(datetime.datetime.timestamp(start_send_time))
    step_time_1 = []
    step_time_1 = step_time
    string_list_timeline = ''
    concat_steptimeline = ''
    step_timeline = []
    if(len(step_time_1) !=0):
        for i in range(len(step_time_1)):
            if(i==0):
                result = step_time_1[i] - sendtime
                list_timeline = convert_hr_min_sec_v1(int(result))
                for yy in range(len(list_timeline)):
                    if list_timeline[yy] > 0:
                        if yy == 0:
                            type_date = " วัน "
                        elif yy == 1:
                            type_date = " ชั่วโมง "
                        elif yy == 2:
                            type_date = " นาที "
                        elif yy == 3:
                            type_date = " วินาที "
                        string_list_timeline += str(list_timeline[yy]) + type_date
                step_timeline.append(string_list_timeline)
                string_list_timeline = ''
            else:
                result = step_time_1[i] - step_time_1[i-1]
                list_timeline = convert_hr_min_sec_v1(int(result))
                for yy in range(len(list_timeline)):
                    if list_timeline[yy] > 0:
                        if yy == 0:
                            type_date = " วัน "
                        elif yy == 1:
                            type_date = " ชั่วโมง "
                        elif yy == 2:
                            type_date = " นาที "
                        elif yy == 3:
                            type_date = " วินาที "
                        string_list_timeline += str(list_timeline[yy]) + type_date
                step_timeline.append(string_list_timeline)
                string_list_timeline = ''
    elif(len(step_time_1) == 0):
        step_timeline = []
    return step_timeline

class update_1():
    def update_process_log_status_v2(self,process_id,name_process,status,document_status,group_id,email_thai):     
        self.process_id = process_id
        self.name_process = name_process
        self.status = status
        self.document_status = document_status
        self.group_id = group_id
        self.email_thai = email_thai
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        try:     
            with engine.connect() as connection:
                result_update = connection.execute('UPDATE tb_process_request SET "name_process"=%s,"status"=%s,"document"=%s,"datetime_update"=%s WHERE "id"=%s',self.name_process,self.status,self.document_status,str(st),self.process_id)
            connection.close()
            if result_update != None:
                return {'result':'OK','messageText':'success'}
            else:
                return {'result':'ER','messageText':'fail'}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':str(e)}

    def update_pdf_groupv2(self,file_data,data_sign):
        self.file_data = file_data
        self.data_sign = data_sign
        sha512encode = hashlib.sha512(str(self.data_sign).encode('utf-8')).hexdigest()
        tmppath_pdf = None
        try:
            arr_sign = []
            with engine.connect() as connection:
                result = connection.execute(text('SELECT "tb_pdf_storage"."path","tb_pdf_storage"."path_pdf","tb_pdf_storage"."path_sign","tb_pdf_storage"."string_sign","tb_send_detail"."file_id" FROM "tb_send_detail" INNER JOIN "tb_pdf_storage" ON "fid" = "file_id" \
                    WHERE "step_data_sid"=:sidfile AND "status"=:status'),sidfile=self.file_data,status='ACTIVE')
                tmp = [dict(row) for row in result]
                tmp = tmp[0]
                connection.close()
            if tmp['string_sign'] == None:
                tmpfile_id = tmp['file_id']
                tmppath_sign = tmp['path_pdf']
                tmppath_data = tmp['path']
                r = updatefile_pdfsign_v1(self.data_sign,sha512encode,tmppath_data)
                print(r)
                if 'path_data' in r:
                    tmppath_pdf = r['path_pdf']
                    tmppath_data = r['path_data']
                    with engine.connect() as connection:
                        result = connection.execute(text('UPDATE "tb_pdf_storage" SET string_sign=:string_sign,hash_sign=:tmphash_sign,path_sign=:tmppathSign,path=:path WHERE fid=:fileid'),string_sign=self.data_sign,tmphash_sign=sha512encode,tmppathSign=tmppath_pdf,fileid=tmpfile_id,path=tmppath_data)
                        connection.close()
                    if result != None:
                        return {'result':'OK'}
                    else:
                        return {'result':'ER'}
                if r['result'] == 'OK':
                    tmppath_pdf = r['path_pdf']
                with engine.connect() as connection:
                    result = connection.execute(text('UPDATE "tb_pdf_storage" SET string_sign=:string_sign,hash_sign=:tmphash_sign,path_sign=:tmppathSign WHERE fid=:fileid'),string_sign=self.data_sign,tmphash_sign=sha512encode,tmppathSign=tmppath_pdf,fileid=tmpfile_id)
                    connection.close()
                if result != None:
                    return {'result':'OK'}
                else:
                    return {'result':'ER'}
            else:
                tmpfile_id = tmp['file_id']
                tmppath_sign = tmp['path_pdf']
                tmppath_data = tmp['path']
                r = updatefile_pdfsign_v1(self.data_sign,sha512encode,tmppath_data)
                if 'path_data' in r:
                    tmppath_pdf = r['path_pdf']
                    tmppath_data = r['path_data']
                    with engine.connect() as connection:
                        result = connection.execute(text('UPDATE "tb_pdf_storage" SET string_sign=:string_sign,hash_sign=:tmphash_sign,path_sign=:tmppathSign,path=:path WHERE fid=:fileid'),string_sign=self.data_sign,tmphash_sign=sha512encode,tmppathSign=tmppath_pdf,fileid=tmpfile_id,path=tmppath_data)
                        connection.close()
                    if result != None:
                        return {'result':'OK'}
                    else:
                        return {'result':'ER'}
                if r['result'] == 'OK':
                    tmppath_pdf = r['path_pdf']
                with engine.connect() as connection:
                    result = connection.execute(text('UPDATE "tb_pdf_storage" SET string_sign=:string_sign,hash_sign=:tmphash_sign,path_sign=:tmppathSign WHERE fid=:fileid'),string_sign=self.data_sign,tmphash_sign=sha512encode,tmppathSign=tmppath_pdf,fileid=tmpfile_id)
                    connection.close()
                if result != None:
                    return {'result':'OK'}
                else:
                    return {'result':'ER'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}

    def update_group_v2(self,sidcode,group_id):
        self.sidcode = sidcode
        self.group_id = group_id
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        try:
            for z in range(len(self.sidcode)):
                tmp_list_group_id = []
                tmp_sidcode = self.sidcode[z]
                tmp_list_group_id.append(self.group_id)
                tmp_list_group_id = str(tmp_list_group_id)
                with engine.connect() as connection:
                    result_update = connection.execute('UPDATE "tb_send_detail" SET "group_id"=%s WHERE "step_data_sid"=%s',tmp_list_group_id,tmp_sidcode)
                    result_update_time = connection.execute('UPDATE "tb_step_data" SET "update_time"=%s WHERE "sid"=%s',str(st),tmp_sidcode)
                connection.close()
            return {'result':'OK','messageText':'success'}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':str(e)}

    def update_hashid_ingroup_v2(self,group_id,hash_id):
        self.group_id = group_id
        self.hash_id = hash_id
        try:
            tmp_query = tb_group_document_2.query.filter(tb_group_document_2.id==self.group_id,tb_group_document_2.status=='ACTIVE').first()
            if tmp_query != None:
                tmp_query.hash_id = str(self.hash_id)
                db.session.commit()
                return {'result':'OK','messageText':None}
            else:                
                return {'result':'ER','messageText':'data not found'}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            print('error',str(e))
            return {'result':'ER','messageText':str(e)} 
    
    def update_docdetail_optionpage(self,arrsid,arrstepnum):
        self.arrsid = arrsid
        try:
            for z in range(len(self.arrsid)):
                tmp_list_group_id = []
                tmp_sidcode = self.arrsid[z]
                tmp_stepnum = arrstepnum[z]['step_num']
                result_select = paper_lessdocument.query.filter_by(step_id=tmp_sidcode).first()
                optionpage = result_select.options_page
                if optionpage != None and optionpage != '':
                    optionpage = eval(optionpage)
                    optionpage['group_detail']['step_num'] = tmp_stepnum
                    result_select.options_page = str(optionpage)
                    db.session.commit()
            return {'result':'OK','messageText':'success'}
        except Exception as e:
            print('error',str(e))
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            print('error',str(e))
            return {'result':'ER','messageText':str(e)} 
            return {'result':'ER','messageText':str(e)}


    def update_step_table_template_sql(self,step_code,step_data,step_max,username,email,step_name,step_Description,templateString,qrCode_position,documentDetails,urgent_type,condition_string,webhook=None,email_center=None,template_biz=None,formula_temp=None,digit_sign=None,page_sign_options=None,options_page=None,use_status=None,time_expire=None,importance=None,last_digit_sign=None,status_ref=None):
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        self.step_code = step_code
        self.step_data = step_data
        self.step_max = step_max
        self.username = username
        self.email = email
        self.step_name = step_name
        self.step_Description = step_Description
        self.templateString = json.dumps(templateString)
        self.qrCode_position = qrCode_position
        self.documentDetails = documentDetails
        self.urgent_type = urgent_type
        self.condition_string = condition_string
        self.webhook = webhook
        self.email_center = email_center
        self.template_biz = template_biz
        self.formula_temp= str(formula_temp)
        self.digit_sign= digit_sign
        self.page_sign_options = page_sign_options
        self.options_page = str(options_page)
        self.time_expire = time_expire
        self.importance = importance
        self.last_digit_sign = last_digit_sign
        self.status_ref = status_ref
        if use_status != None:
            self.use_status = use_status
        else:
            self.use_status = 'ACTIVE'
        total_time = None
        if self.time_expire != None :
            time_ex_eval = eval(self.time_expire)
            status = time_ex_eval['status']
            if status == True:
                data_ex = eval(str(time_ex_eval['data_ex']))
                day = data_ex['day']
                hour = data_ex['hour']
                total_time = (int(day) * 24) + int(hour)
        # mod = total_time % 24
        # hour = int(total_time / 24)
        # print('mod',mod)
        # print('hour',hour)
        try:
            with slave.connect() as connection:
                result_select = connection.execute(text('SELECT "step_Code","step_Data","step_Max","username",\
                    "email","DateTime","step_Description","step_Name","step_Upload","template_images","template_biz","qrCode_position",\
                    "status","status_Update","documentDetails","urgent_type","condition_temp","webhook","email_center",\
                    "formula_temp","digit_sign","page_sign_options","options_page","status_use","time_expire","importance_doc",\
                    "last_digit_sign","status_ref" \
                    FROM "tb_step_template" WHERE "step_Code"=:step_code AND "status"=:status'),step_code=self.step_code,status='ACTIVE')
                connection.close()
                update_steptable = [dict(row) for row in result_select]
                # update_steptable01 = paper_lessstep.query.filter_by(step_Code=str(self.step_code),status='ACTIVE').first()
            print('update_steptable',update_steptable[0]['status_use'])
            print('tmp',len(update_steptable))
            if len(update_steptable) != 0:
                #ถ้ามีค่าเข้ามา update และ insert
                self.status = 'REJECT'
                self.status_Update = str(st)
                # INSERT
                with engine.connect() as connection:
                    result =  connection.execute('insert into tb_step_template ("step_Code","step_Data","step_Max","username", \
                    "email","DateTime","step_Description","step_Name","step_Upload","template_images","template_biz","qrCode_position", \
                    "status","status_Update","documentDetails","urgent_type","condition_temp","webhook","email_center", \
                    "formula_temp","digit_sign","page_sign_options","options_page","status_use","time_expire","importance_doc", \
                    "last_digit_sign","status_ref")\
                    values (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s) \
                    returning "sid"',str(update_steptable[0]['step_Code']),\
                    update_steptable[0]['step_Data'],update_steptable[0]['step_Max'],\
                    self.username,self.email,update_steptable[0]['DateTime'],update_steptable[0]['step_Description'],\
                    update_steptable[0]['step_Name'],update_steptable[0]['step_Upload'],\
                    update_steptable[0]['template_images'],update_steptable[0]['template_biz'],\
                    update_steptable[0]['qrCode_position'],self.status,self.status_Update,\
                    update_steptable[0]['documentDetails'],update_steptable[0]['urgent_type'],\
                    update_steptable[0]['condition_temp'],update_steptable[0]['webhook'],update_steptable[0]['email_center'],\
                    update_steptable[0]['formula_temp'],update_steptable[0]['digit_sign'],\
                    update_steptable[0]['page_sign_options'],update_steptable[0]['options_page'],\
                    update_steptable[0]['status_use'],update_steptable[0]['time_expire'],\
                    update_steptable[0]['importance_doc'],update_steptable[0]['last_digit_sign'],update_steptable[0]['status_ref'])
                    connection.close()
                    insert_template = [dict(row) for row in result]
                # UPDATE
                with engine.connect() as connection:
                    result_update = connection.execute('UPDATE tb_step_template SET "condition_temp"=%s,"step_Data"=%s,\
                    "step_Max"=%s,"step_Description"=%s,"DateTime"=%s,"step_Name"=%s,"template_images"=%s,"qrCode_position"=%s,\
                    "documentDetails"=%s,"urgent_type"=%s,"webhook"=%s,"email_center"=%s,"template_biz"=%s,"formula_temp"=%s,\
                    "digit_sign"=%s,"page_sign_options"=%s,"options_page"=%s,"status_use"=%s,"time_expire"=%s,"importance_doc"=%s,\
                    "last_digit_sign"=%s,"status_ref"=%s \
                    WHERE "step_Code"=%s AND "status"=%s',\
                    self.condition_string,self.step_data,self.step_max,self.step_Description,str(st),self.step_name,self.templateString,\
                    self.qrCode_position,self.documentDetails,self.urgent_type,self.webhook,self.email_center,self.template_biz,\
                    self.formula_temp,self.digit_sign,self.page_sign_options,self.options_page,self.use_status,\
                    total_time,self.importance,self.last_digit_sign,self.status_ref,self.step_code,'ACTIVE')
                    connection.close()
                return {'result':'OK','messageText':'update OK!'}
            else:
                return {'result':'ER','messageText':'data not found'}
        except Exception as ex:
            print(ex)
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':str(ex)}

    def update_step_table_template_sql(self,step_code,step_data,step_max,username,email,step_name,step_Description,templateString,qrCode_position,documentDetails,urgent_type,condition_string,webhook=None,email_center=None,template_biz=None,formula_temp=None,digit_sign=None,page_sign_options=None,options_page=None,use_status=None,time_expire=None,importance=None,last_digit_sign=None,status_ref=None):
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        self.step_code = step_code
        self.step_data = step_data
        self.step_max = step_max
        self.username = username
        self.email = email
        self.step_name = step_name
        self.step_Description = step_Description
        self.templateString = json.dumps(templateString)
        self.qrCode_position = qrCode_position
        self.documentDetails = documentDetails
        self.urgent_type = urgent_type
        self.condition_string = condition_string
        self.webhook = webhook
        self.email_center = email_center
        self.template_biz = template_biz
        self.formula_temp= str(formula_temp)
        self.digit_sign= digit_sign
        self.page_sign_options = page_sign_options
        self.options_page = str(options_page)
        self.time_expire = time_expire
        self.importance = importance
        self.last_digit_sign = last_digit_sign
        self.status_ref = status_ref
        if use_status != None:
            self.use_status = use_status
        else:
            self.use_status = 'ACTIVE'
        total_time = None
        if self.time_expire != None :
            time_ex_eval = eval(self.time_expire)
            status = time_ex_eval['status']
            if status == True:
                data_ex = eval(str(time_ex_eval['data_ex']))
                day = data_ex['day']
                hour = data_ex['hour']
                total_time = (int(day) * 24) + int(hour)
        # mod = total_time % 24
        # hour = int(total_time / 24)
        # print('mod',mod)
        # print('hour',hour)
        try:
            with slave.connect() as connection:
                result_select = connection.execute(text('SELECT "step_Code","step_Data","step_Max","username",\
                    "email","DateTime","step_Description","step_Name","step_Upload","template_images","template_biz","qrCode_position",\
                    "status","status_Update","documentDetails","urgent_type","condition_temp","webhook","email_center",\
                    "formula_temp","digit_sign","page_sign_options","options_page","status_use","time_expire","importance_doc",\
                    "last_digit_sign","status_ref" \
                    FROM "tb_step_template" WHERE "step_Code"=:step_code AND "status"=:status'),step_code=self.step_code,status='ACTIVE')
                connection.close()
                update_steptable = [dict(row) for row in result_select]
                # update_steptable01 = paper_lessstep.query.filter_by(step_Code=str(self.step_code),status='ACTIVE').first()
            print('update_steptable',update_steptable[0]['status_use'])
            print('tmp',len(update_steptable))
            if len(update_steptable) != 0:
                #ถ้ามีค่าเข้ามา update และ insert
                self.status = 'REJECT'
                self.status_Update = str(st)
                # INSERT
                with engine.connect() as connection:
                    result =  connection.execute('insert into tb_step_template ("step_Code","step_Data","step_Max","username", \
                    "email","DateTime","step_Description","step_Name","step_Upload","template_images","template_biz","qrCode_position", \
                    "status","status_Update","documentDetails","urgent_type","condition_temp","webhook","email_center", \
                    "formula_temp","digit_sign","page_sign_options","options_page","status_use","time_expire","importance_doc", \
                    "last_digit_sign","status_ref")\
                    values (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s) \
                    returning "sid"',str(update_steptable[0]['step_Code']),\
                    update_steptable[0]['step_Data'],update_steptable[0]['step_Max'],\
                    self.username,self.email,update_steptable[0]['DateTime'],update_steptable[0]['step_Description'],\
                    update_steptable[0]['step_Name'],update_steptable[0]['step_Upload'],\
                    update_steptable[0]['template_images'],update_steptable[0]['template_biz'],\
                    update_steptable[0]['qrCode_position'],self.status,self.status_Update,\
                    update_steptable[0]['documentDetails'],update_steptable[0]['urgent_type'],\
                    update_steptable[0]['condition_temp'],update_steptable[0]['webhook'],update_steptable[0]['email_center'],\
                    update_steptable[0]['formula_temp'],update_steptable[0]['digit_sign'],\
                    update_steptable[0]['page_sign_options'],update_steptable[0]['options_page'],\
                    update_steptable[0]['status_use'],update_steptable[0]['time_expire'],\
                    update_steptable[0]['importance_doc'],update_steptable[0]['last_digit_sign'],update_steptable[0]['status_ref'])
                    connection.close()
                    insert_template = [dict(row) for row in result]
                # UPDATE
                with engine.connect() as connection:
                    result_update = connection.execute('UPDATE tb_step_template SET "condition_temp"=%s,"step_Data"=%s,\
                    "step_Max"=%s,"step_Description"=%s,"DateTime"=%s,"step_Name"=%s,"template_images"=%s,"qrCode_position"=%s,\
                    "documentDetails"=%s,"urgent_type"=%s,"webhook"=%s,"email_center"=%s,"template_biz"=%s,"formula_temp"=%s,\
                    "digit_sign"=%s,"page_sign_options"=%s,"options_page"=%s,"status_use"=%s,"time_expire"=%s,"importance_doc"=%s,\
                    "last_digit_sign"=%s,"status_ref"=%s \
                    WHERE "step_Code"=%s AND "status"=%s',\
                    self.condition_string,self.step_data,self.step_max,self.step_Description,str(st),self.step_name,self.templateString,\
                    self.qrCode_position,self.documentDetails,self.urgent_type,self.webhook,self.email_center,self.template_biz,\
                    self.formula_temp,self.digit_sign,self.page_sign_options,self.options_page,self.use_status,\
                    total_time,self.importance,self.last_digit_sign,self.status_ref,self.step_code,'ACTIVE')
                    connection.close()
                return {'result':'OK','messageText':'update OK!'}
            else:
                return {'result':'ER','messageText':'data not found'}
        except Exception as ex:
            print(ex)
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':str(ex)}

    def update_business_setting_v2(self,level_admin,tax_id,color,img_logo,status,transactionMax,storageMax):
        self.level_admin= level_admin
        self.tax_id = tax_id
        self.color = color
        self.img_logo = img_logo
        self.status = (status)
        self.transactionMax = (transactionMax)
        self.storageMax = (storageMax)
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        self.update_date = st
        if self.color == '': self.color = None
        if self.status == '': self.status = False
        if self.transactionMax == '': self.transactionMax = None
        if self.storageMax == '': self.storageMax = None
        if self.level_admin == 0:
            try:
                if img_logo.filename!='':
                    path = path_global_1 + '/storage/img_logo_business/'
                    # path = './storage/img_logo_business/'
                    if not os.path.exists(path):
                        os.makedirs(path)
                    typefile = img_logo.filename.split('.')[1]
                    filename = str(self.tax_id) + '.' + str(typefile)
                    file_string = base64.b64encode(img_logo.read())
                    with open(path + filename, "wb") as fh:
                        file_open = fh 
                        fh.write(base64.decodebytes(file_string))
                    path_img = path_global_1 + '/storage/img_logo_business/' + str(filename)
                    # path_img = './storage/img_logo_business/' + str(filename)
                    with open(path_img, 'r+b') as f:
                        with Image.open(f) as image:
                            cover = resizeimage.resize_width(image, 100)
                            cover.save(path_img, image.format)
                    self.img_logo = str(path) + str(filename)
                    with engine.connect() as connection:
                        result_update = connection.execute('UPDATE "tb_bizPaperless" SET "theme_color"=%s,"path_logo"=%s,"status"=%s,"transactionMax"=%s,"storageMax"=%s,"update_date"=%s WHERE "tax_id"=%s ',self.color,self.img_logo,self.status,self.transactionMax,self.storageMax,self.update_date,self.tax_id)
                        connection.close()
                    if result_update != None:
                        return {'result':'OK','messageText':'success'}
                    else:
                        return {'result':'ER','messageText':'fail'}
                else:
                    with engine.connect() as connection:
                        result_update = connection.execute('UPDATE "tb_bizPaperless" SET "theme_color"=%s,"status"=%s,"transactionMax"=%s,"storageMax"=%s,"update_date"=%s WHERE "tax_id"=%s ',self.color,self.status,self.transactionMax,self.storageMax,self.update_date,self.tax_id)
                        connection.close()
                    if result_update != None:
                        return {'result':'OK','messageText':'success'}
                    else:
                        return {'result':'ER','messageText':'fail'}
            except Exception as e:
                exc_type, exc_obj, exc_tb = sys.exc_info()
                fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                print(exc_type, fname, exc_tb.tb_lineno)
                return {'result':'ER','messageText':str(e)}
        elif self.level_admin == 1:
            try:
                path = path_global_1 + '/storage/img_logo_business/'
                # path = './storage/img_logo_business/'
                if not os.path.exists(path):
                    os.makedirs(path)
                typefile = img_logo.filename.split('.')[1]
                filename = str(self.tax_id) + '.' + str(typefile)
                file_string = base64.b64encode(img_logo.read())
                with open(path + filename, "wb") as fh:
                    file_open = fh 
                    fh.write(base64.decodebytes(file_string))
                path_img = path_global_1 + '/storage/img_logo_business/' + str(filename)
                # path_img = './storage/img_logo_business/' + str(filename)
                with open(path_img, 'r+b') as f:
                    with Image.open(f) as image:
                        cover = resizeimage.resize_width(image, 100)
                        cover.save(path_img, image.format)
                self.img_logo = str(path) + str(filename)
                with engine.connect() as connection:
                    result_update = connection.execute('UPDATE "tb_bizPaperless" SET "theme_color"=%s,"path_logo"=%s WHERE "tax_id"=%s ',self.color,self.img_logo,self.tax_id)
                    connection.close()
                if result_update != None:
                    return {'result':'OK','messageText':'success'}
                else:
                    return {'result':'ER','messageText':'fail'}
            except Exception as e:
                exc_type, exc_obj, exc_tb = sys.exc_info()
                fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                print(exc_type, fname, exc_tb.tb_lineno)
                return {'result':'ER','messageText':str(e)}

    def update_setting(self,tax_id,color,img_logo):
        self.tax_id = tax_id
        self.color = color
        self.img_logo = img_logo
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        try:
            if self.tax_id == '' or self.color == '' or self.img_logo == '':
                return {'result':'ER','messageText':'Please complete all information'}
            elif len(self.tax_id) != 13:
                return {'result':'ER','messageText':'Incorrect information'}
            tmp_query = paper_lessbizPaperless.query.filter(paper_lessbizPaperless.tax_id==self.tax_id).first()
            if tmp_query != None:
                path = path_global_1 + '/storage/img_logo_business/'
                # path = './storage/img_logo_business/'
                if not os.path.exists(path):
                    os.makedirs(path)
                typefile = img_logo.filename.split('.')[1]
                filename = str(self.tax_id) + '.' + str(typefile)
                file_string = base64.b64encode(img_logo.read())
                with open(path + filename, "wb") as fh:
                    file_open = fh 
                    fh.write(base64.decodebytes(file_string))
                path_img = path_global_1 + '/storage/img_logo_business/' + str(filename)
                # path_img = './storage/img_logo_business/' + str(filename)
                with open(path_img, 'r+b') as f:
                    with Image.open(f) as image:
                        cover = resizeimage.resize_width(image, 100)
                        cover.save(path_img, image.format)
                tmp_query.theme_color = str(self.color)
                tmp_query.path_logo = str(path) + str(filename)
                tmp_query.datetime = st
                db.session.commit()
                tmp = [{
                    'filename': filename
                }]
                return {'result':'OK','messageText':tmp}
            else:
                return {'result':'ER','messageText':'no business!'}
        except exc.SQLAlchemyError as ex:
            print(ex)
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'duplicate value!'}
        except Exception as ex:
            print(ex)
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':str(ex)}
    
    def update_json(self,sid,email,step,email_step):
        self.sid = sid
        self.email = email
        self.step = step
        self.email_step = email_step
        list_stepDetails = []
        list_stepDetails_2 = []
        list_DataStep = []
        tmp_2 = {}
        arr_tmp = []
        # tmp1 = []
        tmp_step_detail = {}
        # status_list = []
        tmp_list_stepDetails  = []
        list_result = []
        tmpdata_json = None
        try:
            query_json1 = db.session.query(
                    paper_lessdatastep.sid,
                    paper_lessdatastep.data_json)\
                .filter(paper_lessdatastep.sid==self.sid)\
                .first()
            query_json = paper_lessdatastep.query\
                .filter(paper_lessdatastep.sid==self.sid)\
                .first()
            arr_email = self.email_step
            if query_json != None:
                # tmp_sid = query_json[0]
                tmpdata_json = query_json1.data_json
                if tmpdata_json != None:
                    tmpdata_json = eval(tmpdata_json)
                if 'step_num' in tmpdata_json:
                    arr_tmp.append(tmpdata_json)
                    tmpdata_json = arr_tmp
                for x in range(len(tmpdata_json)):
                    tmpstepnum = tmpdata_json[x]['step_num']
                    tmpstatus =  tmpdata_json[x]['step_detail']
                    tmparr_email = []
                    arr_stepnum = []
                    for c in range(len(self.step)):
                        tmp_jsonstepnum = self.step[c]
                        tmp_emailtostep = self.email_step[c]
                        activity_status = []
                        tmp1 = []
                        status_list = []
                        if tmp_jsonstepnum == tmpstepnum:
                            tmpstep_detail = tmpdata_json[x]['step_detail']
                            # print('555',tmpstep_detail)
                            for z in range(len(tmpstep_detail)):
                                tmp_1 = tmpstep_detail[z]
                                tmp1.append(tmp_1)
                                activity_status = tmpstep_detail[z]['activity_status']
                                activity_code = tmpstep_detail[z]['activity_code']
                                for zz in range(len(activity_status)):
                                    if activity_code[zz] == 'A03' :
                                        # activity_status_2 = activity_status[zz] 
                                        status_list.append(activity_status[zz])
                            tmp_1 = tmp1[0]
                            # print('tmp_jsonstepnum',tmp_jsonstepnum)
                            # print('tmp_emailtostep',self.step[c])
                            print('statuslist',status_list)
                            if 'Approve' in status_list or 'Complete' in status_list:
                                pass
                            else:
                                for h in range(len(tmp_emailtostep)):
                                    tmpjson1 = {}
                                    for key,value in tmp_1.items():
                                        tmpjson1[key] = value
                                    tmpjson1['one_email'] = tmp_emailtostep[h]
                                    tmp1.append(tmpjson1)
                                tmpdata_json[x]['step_detail'] = tmp1
                                # tmp_list_stepDetails = tmpdata_json
                                # query_json.data_json = str(tmp_list_stepDetails)
                                list_result.append('OK')
                                # db.session.commit()
                if len(list_result) == len(self.step):
                    query_json.data_json = str(tmpdata_json)
                    db.session.commit()
                    ts = int(time.time())
                    st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
                    action = 'ADD'
                    status = 'SUCCESS'
                    insert_log = insert_1().insert_tranferuser(self.sid,action,self.step,None,self.email_step,st,status,self.email)

                    result_select = select().select_datajson_form_step_data_update_sender_v1(self.sid)
                    detail_status = str(result_select['messageText']['data_document'])
                    document_status = result_select['messageText']['status_document']
                    tmp_step_now = str(result_select['messageText']['step_now'])
                    tmp_maxstep = str(result_select['messageText']['max_step'])
                    try:
                        result_update = paper_lesssender.query.filter(paper_lesssender.step_data_sid==self.sid).first()
                        if result_update != None:
                            result_update.status_details = detail_status
                            result_update.document_status = document_status
                            result_update.stepmax = tmp_maxstep
                            result_update.stepnow = tmp_step_now
                            db.session.commit()
                    except Exception as e:
                        return {'result':'ER','messageText':str(e)}
                    return {'result': 'OK', 'messageText': tmpdata_json}     
                else:
                    ts = int(time.time())
                    st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
                    action = 'ADD'
                    status = 'FAIL'
                    insert_log = insert_1().insert_tranferuser(self.sid,action,self.step,None,self.email_step,st,status,self.email)
                    return {'result': 'OK', 'messageText': 'ไม่สามารถเปลี่ยนแปลงลำดับได้'}
        except Exception as ex:
            print(ex)
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result': 'ER', 'messageText': 'ไม่สามารถเปลี่ยนแปลงลำดับได้','messageER':str(ex)}

        finally:
            db.session.close()

    def update_deljson(self,sid,email,step,email_step):
        self.sid = sid
        self.email = email
        self.step = step
        self.email_step = email_step
        list_stepDetails = []
        list_stepDetails_2 = []
        list_DataStep = []
        tmp_2 = {}
        arr_tmp = []
        # tmp1 = []
        tmp_step_detail = {}
        # status_list = []
        tmp_list_stepDetails  = []
        tmpdata_json = ''
        step_de = []
        list_result = []
        try:
            query_json1 = db.session.query(
                    paper_lessdatastep.sid,
                    paper_lessdatastep.data_json)\
                .filter(paper_lessdatastep.sid==self.sid)\
                .first()
            query_json = paper_lessdatastep.query\
                .filter(paper_lessdatastep.sid==self.sid)\
                .first()
            arr_email = self.email_step
            if query_json != None:
                # tmp_sid = query_json[0]
                tmpdata_json = query_json1.data_json
                if tmpdata_json != None:
                    tmpdata_json = eval(tmpdata_json)
                if 'step_num' in tmpdata_json:
                    arr_tmp.append(tmpdata_json)
                    tmpdata_json = arr_tmp
                
                for x in range(len(tmpdata_json)):
                    tmpstepnum = tmpdata_json[x]['step_num']
                    tmpstatus =  tmpdata_json[x]['step_detail']
                    tmparr_email = []
                    arr_stepnum = []
                    tmpstep_detail = []
                    status_list = []
                    list_del = []
                    for c in range(len(self.step)):
                        tmp_jsonstepnum = self.step[c]
                        tmp_emailtostep = self.email_step[c]
                        activity_status = []
                        tmp1 = []
                        # tmp_list_stepDetails  = []
                        tmp_list_onemail = []
                        
                        if tmp_jsonstepnum == tmpstepnum:
                            tmpstep_detail = tmpdata_json[x]['step_detail']
                            for z in range(len(tmpstep_detail)):
                                tmp_1 = tmpstep_detail[z]
                                tmp1.append(tmp_1)
                                activity_status = tmpstep_detail[z]['activity_status']
                                activity_code = tmpstep_detail[z]['activity_code']
                                one_email = tmpstep_detail[z]['one_email']
                                tmp_list_onemail.append(one_email)
                                for zz in range(len(activity_status)):
                                    if activity_code[zz] == 'A03' :
                                        # activity_status_2 = activity_status[zz] 
                                        status_list.append(activity_status[zz])                
                            print(len(tmp1))
                            print('status_list',status_list)
                            tmp_1 = tmp1[0]
                            if 'Approve' in status_list or 'Complete' in status_list:
                                pass
                            else:
                                print('inn',tmp_emailtostep)
                                print('tmp_list_onemail',tmp_list_onemail)
                                for h in range(len(tmp_emailtostep)):
                                    tmpjson1 = {}
                                    for hh in range(len(tmp_list_onemail)):
                                        if tmp_emailtostep[h] == tmp_list_onemail[hh]:
                                            if len(tmpdata_json[x]['step_detail']) > 1 :
                                                # print('x',x)
                                                # print('hh',h)
                                                # print(tmpdata_json[x]['step_detail'][hh])
                                                list_del.append(hh)
                                                list_result.append('OK')
                                print('list_del',list_del)
                                if len(list_del) != 0 :
                                    for i in range(len(tmpdata_json[x]['step_detail'])):
                                        if i not in list_del:
                                            print('i inn',i)
                                            print('x in',x)
                                            step_de.append(tmpdata_json[x]['step_detail'][i])
                                    tmpdata_json[x]['step_detail'] = step_de
                                    step_de = []
                                    list_del = []
                print('list_result',list_result)
                if len(list_result) == len(self.step):
                    query_json.data_json = str(tmpdata_json)
                    db.session.commit()
                    print('success')
                    ts = int(time.time())
                    st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
                    action = 'DELETE'
                    status = 'SUCCESS'
                    insert_log = insert_1().insert_tranferuser(self.sid,action,self.step,None,self.email_step,st,status,self.email)

                    result_select = select().select_datajson_form_step_data_update_sender_v1(self.sid)
                    detail_status = str(result_select['messageText']['data_document'])
                    document_status = result_select['messageText']['status_document']
                    tmp_step_now = str(result_select['messageText']['step_now'])
                    tmp_maxstep = str(result_select['messageText']['max_step'])
                    try:
                        result_update = paper_lesssender.query.filter(paper_lesssender.step_data_sid==self.sid).first()
                        if result_update != None:
                            result_update.status_details = detail_status
                            result_update.document_status = document_status
                            result_update.stepmax = tmp_maxstep
                            result_update.stepnow = tmp_step_now
                            db.session.commit()
                    except Exception as e:
                        return {'result':'ER','messageText':str(e)}
                    return {'result': 'OK', 'messageText': tmpdata_json}     
                else:
                    print('fail')
                    ts = int(time.time())
                    st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
                    action = 'DELETE'
                    status = 'FAIL'
                    insert_log = insert_1().insert_tranferuser(self.sid,action,self.step,None,self.email_step,st,status,self.email)
                    return {'result': 'OK', 'messageText': 'ไม่สามารถเปลี่ยนแปลงลำดับได้'}
        except Exception as ex:
            print(ex)
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result': 'ER', 'messageText': 'ไม่สามารถเปลี่ยนแปลงลำดับได้','messageER':str(ex)}

        finally:
            db.session.close()

    def update_tranfer_sign(self,sid,email,step,email_to):
        self.sid = sid
        self.email = email
        self.step = step
        self.email_to = email_to
        list_stepDetails = []
        list_stepDetails_2 = []
        list_DataStep = []
        tmp_2 = {}
        arr_tmp = []
        # tmp1 = []
        tmp_step_detail = {}
        # status_list = []
        tmp_list_stepDetails  = []
        tmp_list_emailfrom = []
        tmp_list_new_email = []
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        try:
            query_json1 = db.session.query(
                    paper_lessdatastep.sid,
                    paper_lessdatastep.data_json)\
                .filter(paper_lessdatastep.sid==self.sid)\
                .first()
            query_json = paper_lessdatastep.query\
                .filter(paper_lessdatastep.sid==self.sid)\
                .first()
            arr_email = self.email_to
            if query_json != None:
                # tmp_sid = query_json[0]
                tmpdata_json = query_json1.data_json
                if tmpdata_json != None:
                    tmpdata_json = eval(tmpdata_json)
                if 'step_num' in tmpdata_json:
                    arr_tmp.append(tmpdata_json)
                    tmpdata_json = arr_tmp
                for x in range(len(tmpdata_json)):
                    print(x)
                    tmpstepnum = tmpdata_json[x]['step_num']
                    tmpstatus =  tmpdata_json[x]['step_detail']
                    tmparr_email = []
                    arr_stepnum = []
                    for c in range(len(self.step)):
                        tmp_jsonstepnum = self.step[c]
                        tmp_emailtostep = self.email_to[c]
                        activity_status = []
                        tmp1 = []
                        status_list = []
                        tmp_list_onemail = []
                        if tmp_jsonstepnum == tmpstepnum:
                            tmpstep_detail = tmpdata_json[x]['step_detail']
                            for z in range(len(tmpstep_detail)):
                                tmp_1 = tmpstep_detail[z]
                                activity_status = tmpstep_detail[z]['activity_status']
                                activity_code = tmpstep_detail[z]['activity_code']
                                one_email = tmpstep_detail[z]['one_email']
                                tmp_list_onemail.append(one_email)
                                for zz in range(len(activity_status)):
                                    if activity_code[zz] == 'A03' :
                                        status_list.append(activity_status[zz])
                            tmp_list_emailfrom.append(tmp_list_onemail)
                            tmp_list_onemail = []
                            if 'Approve' in status_list or 'Complete' in status_list:
                                pass
                            else:
                                # tmpdata_json[x]['step_detail'] = ''
                                for h in range(len(tmp_emailtostep)):
                                    tmpjson1 = {}
                                    for key,value in tmp_1.items():
                                        tmpjson1[key] = value
                                    tmpjson1['one_email'] = tmp_emailtostep[h]
                                    tmp1.append(tmpjson1)
                                tmpdata_json[x]['step_detail'] = tmp1
                                tmp_list_new_email.append(tmpjson1['one_email'])
                                tmp_list_stepDetails = tmpdata_json
                                # query_json.data_json = str(tmp_list_stepDetails)
                                with engine.connect() as connection:
                                    connection.execute('UPDATE "tb_step_data" SET "data_json"=%s,"update_time"=%s WHERE "sid"=%s', str(tmp_list_stepDetails),str(st),self.sid)
                                    connection.close()
                tmp_list_email_dis = []
                if len(tmp_list_stepDetails) != 0:
                    ts = int(time.time())
                    st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
                    action = 'TRANFER'
                    status = 'SUCCESS'
                    insert_log = insert_1().insert_tranferuser(self.sid,action,self.step,tmp_list_emailfrom,self.email_to,st,status,self.email)
                    result_fiter_email = insert().select_filter_email_recp_v1(str(tmp_list_stepDetails))
                    if len(result_fiter_email) != 0:
                        email_recp = result_fiter_email
                    else:
                        email_recp = []
                    result_select = select().select_datajson_form_step_data_update_sender_v1(self.sid)
                    detail_status = str(result_select['messageText']['data_document'])
                    document_status = result_select['messageText']['status_document']
                    tmp_step_now = str(result_select['messageText']['step_now'])
                    tmp_maxstep = str(result_select['messageText']['max_step'])
                    try:
                        result_update = paper_lesssender.query.filter(paper_lesssender.step_data_sid==self.sid).first()
                        if result_update != None:
                            result_update.status_details = detail_status
                            result_update.document_status = document_status
                            result_update.stepmax = tmp_maxstep
                            result_update.stepnow = tmp_step_now
                            result_update.recipient_email = str(email_recp)
                            db.session.commit()
                    except Exception as e:
                        return {'result':'ER','messageText':str(e)}
                    return {'result': 'OK', 'messageText': tmp_list_stepDetails,'list_dis':tmp_list_email_dis}     
                else:
                    ts = int(time.time())
                    st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
                    action = 'TRANFER'
                    status = 'FAIL'
                    insert_log = insert_1().insert_tranferuser(self.sid,action,self.step,tmp_list_emailfrom,self.email_to,st,status,self.email)
                    
                    return {'result': 'OK', 'messageText': 'ไม่สามารถเปลี่ยนแปลงลำดับได้','list_dis':tmp_list_email_dis}    

        except Exception as ex:
            print(ex)
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result': 'ER', 'messageText': 'ไม่สามารถเปลี่ยนแปลงลำดับได้','messageER':str(ex)}

        finally:
            db.session.close()

class select_1():
    def select_dashboard_recipient_updateV2(self,emailUser,datetime_start,datetime_end,tmptimeapprove=None,timestamp=None):
        self.emailUser = emailUser
        self.datetime_start = datetime_start
        self.datetime_end = datetime_end
        self.tmptimeapprove = tmptimeapprove
        self.timestamp = timestamp
        if self.tmptimeapprove != None:
            self.tmptimeapprove = tmptimeapprove
        if self.timestamp != None:
            self.timestamp = timestamp
            timestamp_to_date = datetime.datetime.fromtimestamp(self.timestamp)
        sid_list = []
        sid_list_email = []
        json_Data = {}
        list_arr = []
        list_json = []
        try:
            tmp_list = []             
            count_rowDocument = 0
            count_rowDocument_StatusActive = 0
            count_rowDocument_StatusReject = 0
            count_rowDocument_StatusCancel = 0
            statusFile_count_approve = 0
            statusFile_count_pendding = 0
            statusFile_count_reject = 0
            statusFile_count_wait = 0
            list_temp_query = []
            tmp_sid_code_list = []
            arr_gruop = []
            arr_group_sid = []
            tmp_arr_sid = []
            tmp_group_id = None
            str_time = (time.time())
            date_start_tmp = datetime.datetime.fromtimestamp(self.datetime_start)
            date_end_tmp = datetime.datetime.fromtimestamp(self.datetime_end)
            print ('date_start_tmp:',date_start_tmp)
            print ('date_end_tmp:',date_end_tmp)
            tmpstatus = 'ACTIVE'
            search = "%'{}'%".format(self.emailUser)
            email_step_sum_w = []
            tmplast_timestamp = []
            maxTimestamp = int(time.time())
            sql = ''' select
                tb_send_detail.send_time AS "dateTime_String",
                tb_send_detail.status AS "status",
                tb_send_detail.sender_name AS "sender_name",
                tb_send_detail.sender_email AS "sender_email",
                tb_send_detail.sender_position AS "type",
                tb_send_detail.file_name AS "file_name",
                tb_send_detail.tracking_id AS "tracking_id",
                tb_send_detail.step_code AS "template_code",
                tb_send_detail.step_data_sid AS "sidCode",
                tb_send_detail.doc_id AS "document_id",
                tb_send_detail.status_details AS "status_details",
                tb_send_detail.document_status AS "status_doc",
                tb_send_detail.group_id AS "group_id",
                tb_send_detail.stepnow AS "step_now",
                tb_send_detail.stepmax AS "max_step",
                tb_send_detail.recipient_email AS "recipient_email",
                tb_doc_detail.timest AS "dateTime",
                tb_doc_detail."documentJson" AS "documentJson",
                tb_doc_detail."documentType" AS "document_type",
                tb_doc_detail.urgent_type AS "document_urgent",
                tb_doc_detail.digit_sign AS "digit_sign",
                tb_doc_detail.sign_page_options AS "stamp_all",
                tb_doc_detail.options_page AS "options_page_document",
                tb_doc_detail.data_document AS "datadoc",
                tb_step_data.biz_info AS "biz_info",
                tb_step_data.update_time AS "update_last" 
            FROM
                tb_send_detail
                JOIN tb_doc_detail ON tb_doc_detail.step_id = tb_send_detail.step_data_sid
                JOIN tb_step_data ON tb_step_data.sid = tb_send_detail.step_data_sid
            '''
            where = ''' WHERE tb_send_detail.status = :status AND tb_send_detail.recipient_email LIKE :email '''
            if self.timestamp == None:
                where += ''' AND ((tb_step_data.update_time<=:date_end_tmp AND tb_step_data.update_time >=:date_start_tmp) OR (tb_send_detail.send_time<=:date_end_tmp AND tb_send_detail.send_time>=:date_start_tmp))  '''
                if self.tmptimeapprove == True:
                    print('intreue')
                    orderby = ''' ORDER BY tb_step_data.update_time DESC '''
                else:
                    orderby = ''' ORDER BY tb_send_detail.send_time DESC '''
            elif self.timestamp != None:
                print ('WITH TIME STAMP')
                where += ''' AND ((tb_step_data.update_time>=:timestamp_to_date) OR (tb_send_detail.send_time>=:timestamp_to_date))  '''
                if self.tmptimeapprove == True:
                    orderby = ''' ORDER BY tb_step_data.update_time DESC '''
                else:
                    orderby = ''' ORDER BY tb_send_detail.send_time DESC '''
            sql += where + orderby
            with slave.connect() as connection:
                resultsql = connection.execute(text(sql),status=tmpstatus,email=search,date_end_tmp=date_end_tmp,date_start_tmp=date_start_tmp,timestamp_to_date=timestamp_to_date)
            connection.close()
            tmp_query = [dict(row) for row in resultsql]
            end_time = (time.time())
            arr = []
            for n in range(len(tmp_query)):
                tmp_req_email = []
                tmpdata = tmp_query[n]
                # print('tmpdata',tmpdata[''])
                # print('__________________')
                arr_email_document = []           
                try:
                    tmpdata['sender_name'] = eval(tmpdata['sender_name'])
                except Exception as e:
                    tmpdata['sender_name'] = tmpdata['sender_name']
                email_step_sum = tmpdata['recipient_email']
                if email_step_sum != None:
                    email_step_sum = eval(email_step_sum)
                tmpstatus_detail = tmpdata['status_details']
                tmpdocument_status = tmpdata['status_doc']
                tmpstepnow = tmpdata['step_now']
                tmp_groupid = tmpdata['group_id']
                tmp_send_time = tmpdata['dateTime_String']
                status_groupid = False
                if tmp_groupid != None:
                    if tmp_groupid != '':
                        tmp_groupid = eval(tmp_groupid)
                        if len(tmp_groupid) != 0:
                            status_groupid = True
                if tmpstepnow != None:
                    tmpstepnow = int(tmpstepnow)
                tmpstepmax = tmpdata['max_step']
                if tmpstepmax != None:
                    tmpstepmax = int(tmpstepmax)
                if tmpstatus_detail != None:
                    tmpstatus_detail = eval(tmpstatus_detail)                            
                    for z in range(len(tmpstatus_detail)):
                        email_step_sum_w.append(tmpstatus_detail[z]['email'])
                    if tmpdocument_status == 'N':
                        for x in range(len(tmpstatus_detail)):
                            if self.emailUser not in arr_email_document:
                                if self.emailUser in tmpstatus_detail[x]['email']:
                                    if tmpstatus_detail[x]['step_status_code'] == 'W':
                                        arr_email_document.append(self.emailUser)
                                        tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                                        break
                                    else:
                                        tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                if tmpdocument_status == 'Z':
                    res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                elif tmpdocument_status == 'W':
                    res_status_file_string = 'รอคุณอนุมัติ'
                elif tmpdocument_status == 'N':
                    res_status_file_string = 'กำลังดำเนินการ'
                elif tmpdocument_status == 'R':
                    res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                else:
                    res_status_file_string = ''
                tmpdata['status_file_code'] = tmpdocument_status
                tmpdata['status_file_string'] = res_status_file_string
                tmp_options_page = []
                if tmpdata['options_page_document'] != None:
                    if tmpdata['options_page_document'] != '':
                        tmp_options_page = [eval(tmpdata['options_page_document'])]
                else:
                    tmp_options_page = []
                tmpdata['options_page_document'] = tmp_options_page
                if len(tmp_options_page) != 0:
                    tmp_status_group = False
                    if status_groupid == True:
                        if len(tmp_options_page) != 0:
                            if 'group_detail' in tmp_options_page[0]:
                                tmp_group_detail = tmp_options_page[0]['group_detail']
                                if 'group_status' in tmp_group_detail:
                                    if tmp_group_detail['group_status'] == True:
                                        tmp_status_group = True
                                        tmpstepnum = tmp_group_detail['step_num']
                if tmpdata['documentJson'] != None:
                    documentJson_result = eval(tmpdata['documentJson'])
                    tmpdata['document_name'] = documentJson_result['document_name']
                    tmpdata['document_type'] = documentJson_result['document_type']
                else:
                    documentName = None
                    documentType = None
                if tmpdata['document_urgent'] != None:
                    documentUrgentType = tmpdata['document_urgent']
                    if documentUrgentType == 'I':
                        tmpdata['document_urgent_string'] = 'ด่วนมาก'
                    elif documentUrgentType == 'U':
                        tmpdata['document_urgent_string'] = 'ด่วน'
                    elif documentUrgentType == 'M':
                        tmpdata['document_urgent_string'] = 'ปกติ'
                tmp_biz_info = None
                tmprole_name = None
                tmpdept_name = None
                tmprole_level = None
                if tmpdata['biz_info'] != None:
                    if tmpdata['biz_info'] != 'None':
                        if tmpdata['biz_info'] != '':
                            eval_biz_info = json.dumps(tmpdata['biz_info'])
                            eval_biz_info = json.loads(eval_biz_info)
                            eval_biz_info = eval(eval_biz_info)
                            if 'role_name' in eval_biz_info:
                                tmprole_name = eval_biz_info['role_name']
                            if 'dept_name' in eval_biz_info:
                                tmpdept_name = eval_biz_info['dept_name']
                            if 'role_level' in eval_biz_info:
                                tmprole_level = eval_biz_info['role_level']
                            # eval_biz_info
                            # print(eval_biz_info)
                            if 'dept_name' in eval_biz_info:            
                                tmp_biz_info = {
                                    'tax_id':eval_biz_info['id_card_num'],
                                    'role_name' : tmprole_name,
                                    'dept_name' : tmpdept_name,
                                    'role_level' : tmprole_level               
                                }                                
                            elif 'dept_name' not in eval_biz_info:
                                tmp_biz_info = {
                                    'tax_id':eval_biz_info['id_card_num'],
                                    'role_name' : tmprole_name,
                                    'dept_name' : [],
                                    'role_level' : tmprole_level              
                                }
                tmpdata['document_business'] = tmp_biz_info
                print(tmpdata['update_last'])
                tmptime_update = (tmpdata['update_last'])
                tmptime_update_timestamp = int(tmptime_update.timestamp())
                tmptime_update_string =  str(tmptime_update).split('+')[0]
                th_dateTime_2_last = convert_datetime_TH_2(int(tmptime_update.timestamp()))
                ts = int(time.time())
                date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                datetime_display_update = int(tmptime_update.timestamp())
                date_time_db = datetime.datetime.fromtimestamp(datetime_display_update).strftime('%Y-%m-%d')
                yar_db = datetime.datetime.fromtimestamp(datetime_display_update).strftime('%Y')
                time_show_db = datetime.datetime.fromtimestamp(datetime_display_update).strftime('%H:%M')
                old_year = datetime.datetime.fromtimestamp(datetime_display_update).strftime('%d/%m/%Y')
                if date_time_today == date_time_db:
                    date_last_display_show = time_show_db
                else:
                    if year_today == yar_db:
                        date_last_display_show = convert_datetime_TH_2_display(datetime_display_update)
                    else:
                        date_last_display_show = old_year
                
                dateTime_String = tmp_send_time
                th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                ts = int(time.time())
                date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                datetime_display = int(dateTime_String.timestamp())
                date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                if date_time_today == date_time_db:
                    date_display_show = time_show_db
                else:
                    if year_today == yar_db:
                        date_display_show = convert_datetime_TH_2_display(datetime_display)
                    else:
                        date_display_show = old_year
                # print(email_step_sum_w)
                if tmp_status_group == True:
                    for ui in range(len(tmpstepnum)):
                        intstepnum = tmpstepnum[ui] - 1
                        try:
                            for w in range(len(email_step_sum_w[intstepnum])):
                                tmp_req_email.append(email_step_sum_w[intstepnum][w])
                        except Exception as e:
                            tmp_req_email = []
                tmp_timepaper = ''
                if str(tmp_send_time).split('+')[0] == str(tmpdata['update_last']).split('+')[0]:
                    tmp_timepaper = 'new'
                else:
                    tmp_timepaper = 'update'
                sender_name_eng = find_name_surename_by_username(tmpdata['sender_email'])
                tmpdata['sender_name_eng'] = sender_name_eng
                tmpdata['date_String'] = str(dateTime_String).split(' ')[0]
                tmpdata['time_String'] = str(dateTime_String).split(' ')[1].split('+')[0]
                tmpdata['dateTime_String'] = str(dateTime_String).split('+')[0]
                tmpdata['dateTime_String_TH_1'] = th_dateTime_2
                tmpdata['dateTime_display'] = date_display_show
                tmpdata['dateTime'] = int(tmpdata['dateTime'])
                tmpdata['group_status'] = tmp_status_group
                tmpdata['step_now'] = int(tmpdata['step_now'])
                tmpdata['max_step'] = int(tmpdata['max_step'])
                tmpdata['update_last_String'] = str(tmptime_update).split('+')[0]
                tmpdata['update_last_String_TH_1'] = th_dateTime_2_last
                tmpdata['update_last_TimeStamp'] = tmptime_update_timestamp
                tmpdata['update_last_display'] = date_last_display_show
                tmpdata['update_last'] = str(tmpdata['update_last'])
                tmpdata['group_email'] = tmp_req_email
                tmpdata['group_id'] = None
                tmpdata['time_paper'] = tmp_timepaper

                # tmpdata['update_last'] = str(tmpdata['update_last'])
                tmplast_timestamp.append(tmptime_update_timestamp)
                del tmpdata['documentJson']
                del tmpdata['biz_info']
                del tmpdata['status_details']
                del tmpdata['recipient_email']
                # del tmpdata['group_id']
                del tmpdata['datadoc']
            if len(tmplast_timestamp) > 0:
                maxTimestamp = (max(tmplast_timestamp))
            tmp_query = sorted(tmp_query, key=lambda k: k['dateTime'], reverse=True)
            if self.tmptimeapprove == True:
                tmp_query = sorted(tmp_query, key=lambda k: k['update_last_TimeStamp'], reverse=True)
            json_Data['Document_Details'] = tmp_query
            return {'result':'OK','messageText':json_Data,'timestamp':maxTimestamp}
            # json_Data['Document_Details'] = tmp_query
            # list_arr = sorted(list_arr, key=lambda k: k['dateTime'], reverse=True)
            # if self.tmptimeapprove == True:
            #     list_arr = sorted(list_arr, key=lambda k: k['update_last_TimeStamp'], reverse=True)
            # json_Data['Document_Details'] = list_arr
            #         # arr.append(tmp_dict_json)
            # return {'result':'OK','messageText':json_Data}
                 
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}
        finally:
            db.session.close()

    def select_chat_group_v2(self,groupid):
        self.groupid = groupid
        list_json = []
        list_json2 = []
        arr_step_num = []
        arr_sum = []
        json_tmp = {}
        tmp_sidcode = ''
        try:
            tmp_groupid = uuid.UUID(self.groupid)
            from sqlalchemy import text
            with engine.connect() as connection:
                result = connection.execute(text('SELECT "id","sid_group","data_group","updatetime","email_group","status","create_by","update_by","step_group","pdf_org","pdf_sign","step_group_detail",\
                "group_data_json","group_other","email_view_group","hash_id","tracking_group","status_group","group_title","group_name","bizinfo","group_status","cover_page",\
                "calculate_fieds","maxstep","email_middle","html_data" FROM "tb_group_document_2" WHERE id=:val'),val=tmp_groupid)
                tmp_query = [dict(row) for row in result]
                tmpjson = tmp_query[0]
                tmp_status_group = tmpjson['status_group']
                tmp_sid_group = tmpjson['sid_group']
                if tmp_sid_group != None:
                    tmp_sid_group = eval(tmp_sid_group)
                    if len(tmp_sid_group) != 0:
                        tmp_sidcode = tmp_sid_group[0]
                if tmp_status_group != None:
                    tmp_status_group = eval(tmp_status_group)
                    for z in range(len(tmp_status_group)):
                        arremail = []
                        arrstatus = []
                        json_tmp = {}
                        tmp_email_one = tmp_status_group[z]['email_one']
                        tmp_status = tmp_status_group[z]['status']
                        arremail.append(tmp_email_one)
                        arrstatus.append(tmp_status)
                        json_tmp['emailone'] = arremail
                        json_tmp['status'] = arrstatus
                        
                        arr_sum.append(json_tmp)
                    return {'result':'OK','messageText':arr_sum,'sidcode':tmp_sidcode}
            # tmp_query = tb_group_document.query.filter(tb_group_document.id==tmp_groupid).first()
            # print(tmp_query)
            # if tmp_query != None:
            #     tmpjson = tmp_query.__dict__
            #     tmp_status_group = tmpjson['status_group']
            #     tmp_sid_group = tmpjson['sid_group']
            #     if tmp_sid_group != None:
            #         tmp_sid_group = eval(tmp_sid_group)
            #         if len(tmp_sid_group) != 0:
            #             tmp_sidcode = tmp_sid_group[0]
            #     if tmp_status_group != None:
            #         tmp_status_group = eval(tmp_status_group)
            #         for z in range(len(tmp_status_group)):
            #             arremail = []
            #             arrstatus = []
            #             json_tmp = {}
            #             tmp_email_one = tmp_status_group[z]['email_one']
            #             tmp_status = tmp_status_group[z]['status']
            #             arremail.append(tmp_email_one)
            #             arrstatus.append(tmp_status)
            #             json_tmp['emailone'] = arremail
            #             json_tmp['status'] = arrstatus
                        
            #             arr_sum.append(json_tmp)
            #         return {'result':'OK','messageText':arr_sum,'sidcode':tmp_sidcode}
            #     else:
            #         return {'result':'ER','messageText':' data not found'}
            # else:
            #     return {'result':'ER','messageText':' data not found'}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'notfound data' + str(e)}
   
    def select_chat_group_v1(self,groupid):
        self.groupid = groupid
        list_json = []
        list_json2 = []
        arr_step_num = []
        arr_sum = []
        json_tmp = {}
        tmp_sidcode = ''
        try:
            tmp_groupid = uuid.UUID(self.groupid)
            from sqlalchemy import text
            with engine.connect() as connection:
                result = connection.execute(text('SELECT "id","sid_group","data_group","updatetime","email_group","status","create_by","update_by","step_group","pdf_org","pdf_sign","step_group_detail",\
                "group_data_json","group_other","email_view_group","hash_id","tracking_group","status_group","group_title","group_name","document_type","bizinfo","group_status","cover_page",\
                "calculate_fieds","maxstep","email_middle","html_data" FROM "tb_group_document_2" WHERE id=:val'),val=tmp_groupid)
                tmp_query = [dict(row) for row in result]
                tmpjson = tmp_query[0]
                tmp_status_group = tmpjson['status_group']
                tmp_sid_group = tmpjson['sid_group']
                if tmp_sid_group != None:
                    tmp_sid_group = eval(tmp_sid_group)
                    if len(tmp_sid_group) != 0:
                        tmp_sidcode = tmp_sid_group[0]
                if tmp_status_group != None:
                    tmp_status_group = eval(tmp_status_group)
                    for z in range(len(tmp_status_group)):
                        arremail = []
                        arrstatus = []
                        json_tmp = {}
                        tmp_email_one = tmp_status_group[z]['email_one']
                        tmp_status = tmp_status_group[z]['status']
                        arremail.append(tmp_email_one)
                        arrstatus.append(tmp_status)
                        json_tmp['emailone'] = arremail
                        json_tmp['status'] = arrstatus
                        
                        arr_sum.append(json_tmp)
                    return {'result':'OK','messageText':arr_sum,'sidcode':tmp_sidcode}
            # tmp_query = tb_group_document.query.filter(tb_group_document.id==tmp_groupid).first()
            # print(tmp_query)
            # if tmp_query != None:
            #     tmpjson = tmp_query.__dict__
            #     tmp_status_group = tmpjson['status_group']
            #     tmp_sid_group = tmpjson['sid_group']
            #     if tmp_sid_group != None:
            #         tmp_sid_group = eval(tmp_sid_group)
            #         if len(tmp_sid_group) != 0:
            #             tmp_sidcode = tmp_sid_group[0]
            #     if tmp_status_group != None:
            #         tmp_status_group = eval(tmp_status_group)
            #         for z in range(len(tmp_status_group)):
            #             arremail = []
            #             arrstatus = []
            #             json_tmp = {}
            #             tmp_email_one = tmp_status_group[z]['email_one']
            #             tmp_status = tmp_status_group[z]['status']
            #             arremail.append(tmp_email_one)
            #             arrstatus.append(tmp_status)
            #             json_tmp['emailone'] = arremail
            #             json_tmp['status'] = arrstatus
                        
            #             arr_sum.append(json_tmp)
            #         return {'result':'OK','messageText':arr_sum,'sidcode':tmp_sidcode}
            #     else:
            #         return {'result':'ER','messageText':' data not found'}
            # else:
            #     return {'result':'ER','messageText':' data not found'}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'notfound data' + str(e)}
        
    def select_tmpAllBiz(self):
        try:
            arr_tmp_v2 = []
            with engine.connect() as connection:
                result = connection.execute(text('SELECT "step_Code","options_page","step_Name","template_biz" FROM "tb_step_template" WHERE status=:val'),val='ACTIVE')
                connection.close()
                tmp_query = [dict(row) for row in result]
            print()
            for x in range(len(tmp_query)):
                if tmp_query[x]['options_page'] != None and tmp_query[x]['options_page'] != '':
                    if 'group_detail' in tmp_query[x]['options_page']:
                        options_page = eval(tmp_query[x]['options_page'])
                        if options_page['group_detail']['group_type'] == '2':
                            tmp_query[x]['options_page'] = eval(tmp_query[x]['options_page'])
                            bizinfo = (tmp_query[x]['template_biz'])
                            if bizinfo != None and bizinfo != '':
                                bizinfo = eval(bizinfo)
                                tmp_query[x]['biz_name'] = bizinfo['first_name_th'] 
                            else:
                                tmp_query[x]['biz_name'] = 'ไม่มี'
                            
                            arr_tmp_v2.append(tmp_query[x])
            return arr_tmp_v2
        except Exception as e:
            print(str(e))
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)


    def select_datajson_toemail_v2(self,sidcode):
        self.sidcode = sidcode
        try:
            arr_emailone_sum = []
            arr_sum_stepnum = []
            arr_datajson = []
            arr_sum_data_2 = []
            arr_sum_email_view = []
            tmpRes = []
            datasum_detail = None
            arr_calculate = []
            tmp_datajson = []
            arr_tmpeformdataBi = []
            tmpeformdataBi = None
            for z in range(len(self.sidcode)):
                json = {}
                arr_emailone = []
                arr_stepnum = []
                arr_sum_data = []
                arr_sum_email_view_group = []
                arr_calculate = []
                tmpsidcode = self.sidcode[z]
                tmp_query = db.session.query(\
                    paper_lessdocument,
                    paper_lessdatastep,
                    paper_lesssender)\
                    .join(paper_lessdatastep,paper_lessdocument.step_id==paper_lessdatastep.sid)\
                    .join(paper_lesssender,paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .filter(paper_lessdatastep.sid==tmpsidcode)\
                    .first()
                if tmp_query != None:
                    for y in range(len(tmp_query)):
                        json_tmp = {}
                        tmp_arr_data_sum_01 = []
                        tmpjson = tmp_query[y].__dict__
                        if y == 0:
                            ppl_step = tmp_query[1].__dict__
                            bizinfo = eval(str(ppl_step['biz_info']))
                            print('bizinfo',bizinfo)
                            tmp_stepnum = []
                            tmp_option_page = tmpjson['options_page']
                            # print('sid',tmpjson['step_id'])
                            try:
                                tmp_option_page = eval(tmp_option_page)
                            except Exception as e:
                                tmp_option_page = ''
                            try:
                                tmpdocumentJson = eval(tmpjson['documentJson'])
                            except Exception as e:
                                tmpdocumentJson = ''
                            tmpdocument_id = tmpjson['document_id']
                            tmpdata_document = tmpjson['data_document']
                            if 'group_detail' in tmp_option_page:
                                tmp_group_detils = tmp_option_page['group_detail']
                                if 'group_status' in tmp_group_detils:
                                    tmp_group_status = tmp_group_detils['group_status']
                                    if tmp_group_status == True:
                                        if 'step_num' in tmp_group_detils:
                                            tmp_stepnum = tmp_group_detils['step_num']
                                            for zu in range(len(tmp_stepnum)):
                                                arr_stepnum.append(tmp_stepnum[zu])
                                if 'email_viewgroup' in tmp_group_detils:
                                    tmp_email_viewgroup = tmp_group_detils['email_viewgroup']
                                    for j in range(len(tmp_email_viewgroup)):
                                        arr_sum_email_view_group.append(tmp_email_viewgroup[j])
                            arr_sum_email_view.append({'email_view_group':arr_sum_email_view_group})
                            if 'service_properties' in tmp_option_page:
                                tmpsp = (tmp_option_page['service_properties'])
                                for n in range(len(tmpsp)):
                                    tmp_spdata = tmpsp[n]
                                    if 'name_service' in tmp_spdata:
                                        if tmp_spdata['name_service'] == 'GROUP2':
                                            if 'other' in tmp_spdata:
                                                tmp_other = tmp_spdata['other']
                                                for u in range(len(tmp_other)):
                                                    if 'properties' in tmp_other[u]:
                                                        tmp_proper = tmp_other[u]['properties']
                                                        for n in range(len(tmp_proper)):
                                                            if 'display' in tmp_proper[n]:                                                            
                                                                tmp_key = str(tmp_proper[n]['display']).replace(' ','')
                                                                if 'type' in tmp_proper[n]:
                                                                    if str(tmp_proper[n]['type']).lower() == 'number':
                                                                        arr_calculate.append(tmp_key)
                                                                if 'value' in tmp_proper[n]:
                                                                    tmp_value = (tmp_proper[n]['value'])
                                                                    json_tmp[tmp_key] = tmp_value
                                                                    # print(json_tmp)
                                                            # arr_sum_data.append(tmp_proper[n])
                                                    # print('document_type',tmpjson['documentType'])
                                                    json_tmp['document_type'] = tmpjson['documentType']
                                                    json_tmp['name_bizinfo'] = bizinfo['first_name_th']
                                                    json_tmp['tax_id'] = bizinfo['id_card_num']
                                                    tmp_arr_data_sum_01.append(json_tmp)
                            datasum_detail = tmp_arr_data_sum_01
                            # print('tmp_arr_data_sum_01',tmp_arr_data_sum_01)
                            arr_sum_data_2.append(tmp_arr_data_sum_01)
                            arr_sum_stepnum.append({'step_num':arr_stepnum})
                        if y == 1:
                            str_datetimeUpload = tmpjson['upload_time']
                            tmp_datajson = tmpjson['data_json']
                            tmp_datajson = eval(tmp_datajson)
                            if 'step_num' in tmp_datajson:
                                arr_datajson.append(tmp_datajson)
                                tmp_datajson = arr_datajson
                            if len(tmp_stepnum) != 0:
                                for a in range(len(tmp_datajson)):
                                    if 'step_num' in tmp_datajson[a]:
                                        tmp_step_num = tmp_datajson[a]['step_num']
                                        tmp_step_detail = tmp_datajson[a]['step_detail']
                                        for j in range(len(tmp_step_detail)):                      
                                            tmpemail_one = tmp_step_detail[j]['one_email']
                                            if int(tmp_step_num) in tmp_stepnum:
                                                arr_emailone.append(tmpemail_one)
                                                # print(tmpemail_one)
                                print('arr_emailone',arr_emailone)
                                arr_emailone_sum.append({'email_one':arr_emailone})
                        if y == 2:
                            tmpfilename = tmpjson['file_name']
                            tmpsender_name = tmpjson['sender_name']
                            tmpsender_email = tmpjson['sender_email']
                            tmptracking_id = tmpjson['tracking_id']
                    if len(datasum_detail) != 0:
                        json = {
                            'dateTime_String':str(str_datetimeUpload).split('+')[0],
                            'document_id':tmpdocument_id,
                            'document_name':tmpdocumentJson['document_name'],
                            'document_type':tmpdocumentJson['document_type'],
                            'file_name':tmpfilename,
                            'sender_email':tmpsender_email,
                            'sender_name':tmpsender_name,
                            'tracking_id':tmptracking_id,
                            "detail":datasum_detail[0]
                        }
                    tmpeformdataBi = None
                    tmpdataeform = data_doc(tmpdata_document)
                    # print(tmpdataeform)
                    if 'messageText' in tmpdataeform:
                        tmpdataeformmessage = tmpdataeform['messageText']
                        if 'formdata_eform' in tmpdataeformmessage:
                            if 'data_json_key' in tmpdataeformmessage['formdata_eform']:
                                tmpeformdataBi = tmpdataeformmessage['formdata_eform']['data_json_key']
                                for u in range(len(tmpeformdataBi)):
                                    if 'document_id' in tmpeformdataBi[u]:
                                        tmpeformdataBi[u]['document_id'] = tmpdocument_id
                    if tmpeformdataBi != None:
                        arr_tmpeformdataBi.append(tmpeformdataBi)
                tmpRes.append(json)     
            return {'result':'OK','messageText':arr_emailone_sum,'step_num_sum':arr_sum_stepnum,'data_sum':arr_sum_data_2,'email_view_group':arr_sum_email_view,'calculated_fields':arr_calculate,'maxstep':len(tmp_datajson),'data_bi':tmpRes,'data_document':arr_tmpeformdataBi}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':[],'messageER':'notfound data' + str(e)}

    def select_filter_sidcode_to_group_v2(self,sidcode,InputEmail):
        self.sidcode = sidcode
        self.InputEmail = eval(InputEmail)
        tmp_sid_code_list = []
        tmp_sidcode = []
        tmp_stepNowIncomplete = []
        arr_emailCenter = []
        tmp_doctypeGroup = []
        tmp_OneMail_Now = []
        tmp_statusGroup = []
        tmp_bizinfo = []
        tmp_maxstep = []
        arr_string_options_page = []
        # InputEmail = 'jirayu.ko@thai.com'
        Db_Email = ''
        stepNow_Incomplete = ''
        try:
            # print('sidcode',sidcode)
            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessstep,paper_lessdatastep)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessstep, paper_lessstep.step_Code==paper_lesssender.step_code)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(and_(paper_lesssender.status=='ACTIVE',paper_lesssender.document_status=='N',paper_lesssender.step_data_sid.in_(self.sidcode),paper_lessstep.status=='ACTIVE'))\
                .order_by(desc(paper_lesssender.send_time))\
                .all()
            print('len',len(query_temp))
            if len(query_temp) != 0:
                for u in range(len(query_temp)):
                    tmp_emailCenter = None
                    tmp_document_json = ''
                    tmp_document_type = ''
                    tmp_subject_text = ''
                    tmp_body_text = ''
                    for z in range(len(query_temp[u])):
                        # tmp_document_json = ''
                        # tmp_document_type = ''
                        if z == 0:
                            tmp_dict_json = query_temp[u][z].__dict__
                            # if '_sa_instance_state' in tmp_dict_json:
                            #     del tmp_dict_json['_sa_instance_state']
                            tmp_sicode = tmp_dict_json['step_data_sid']
                            print('tmp_sicode',tmp_sicode)
                            tmp_sid_code_list.append(tmp_sicode)
                            tmp_send_time = tmp_dict_json['send_time']
                            tmp_document_id = tmp_dict_json['doc_id']
                            tmp_tracking_id = tmp_dict_json['tracking_id']
                            tmp_sender_name = tmp_dict_json['sender_name']
                            tmp_sender_email = tmp_dict_json['sender_email']
                            tmp_file_name = tmp_dict_json['file_name']
                            tmp_group_id = tmp_dict_json['group_id']
                            statusGroup_detail = False
                            if tmp_group_id != None:
                                if tmp_group_id != '':
                                    tmp_group_id = eval(tmp_group_id)
                                    if len(tmp_group_id) != 0:
                                        statusGroup_detail = True
                        # print('statusGroup_detail 01',statusGroup_detail)
                        if z == 1:
                            arr_temp_step_group = []
                            tmp_dict_json = query_temp[u][z].__dict__
                            # if '_sa_instance_state' in tmp_dict_json:
                            #     del tmp_dict_json['_sa_instance_state']
                            tmp_sign_page_options = tmp_dict_json['sign_page_options']
                            tmp_document_type = tmp_dict_json['documentType']
                            tmp_document_json = tmp_dict_json['documentJson']
                            if tmp_dict_json['options_page'] != None:
                                tmp_op = eval(tmp_dict_json['options_page'])
                                tmp_options_page = [eval(tmp_dict_json['options_page'])]
                            else:
                                tmp_options_page = []
                            # print('statusGroup_detail',statusGroup_detail)
                            # if statusGroup_detail == False:
                            #     if 'group_detail' in tmp_op:
                            #         tmp_group_detail = tmp_op['group_detail']
                            #         if 'group_status' in tmp_group_detail:
                            #             tmp_status_group = tmp_group_detail['group_status']
                            #             if tmp_status_group == True:
                            #                 tmpstep_group = tmp_group_detail['step_num']
                            #                 for n in range(len(tmpstep_group)):
                            #                     arr_temp_step_group.append(tmpstep_group[n])
                            # print('tmp_options_page',tmp_options_page)
                            if statusGroup_detail == False:
                                tmp_subject_text = ''
                                tmp_body_text = ''
                                if 'subject_text' in str(tmp_options_page):
                                    tmp_subject_text = tmp_op['subject_text']
                                    print('tmp_subject_text',tmp_subject_text)
                                if 'body_text' in str(tmp_options_page):
                                    tmp_body_text = tmp_op['body_text']
                                    print('tmp_body_text',tmp_body_text)
                                if 'group_detail' in tmp_op:
                                    tmp_group_detail = tmp_op['group_detail']
                                    print('group_type',tmp_group_detail['group_type'])
                                    if tmp_group_detail['group_type'] == '2':
                                        if 'group_status' in tmp_group_detail:
                                            tmp_status_group = tmp_group_detail['group_status']
                                            if tmp_status_group == True:
                                                arr_temp_step_group.append(tmp_status_group)
                                                # tmpstep_group = tmp_group_detail['step_num']
                                                # for n in range(len(tmpstep_group)):
                                                    # print(tmpstep_group[n])
                                                    # arr_temp_step_group.append(tmpstep_group[n])
                            # print('statusGroup_detail',statusGroup_detail)
                            if tmp_dict_json['documentJson'] != None:
                                documentJson_result = eval(tmp_dict_json['documentJson'])
                                documentName = documentJson_result['document_name']
                                documentType = documentJson_result['document_type']
                            else:
                                documentName = None
                                documentType = None
                            if tmp_dict_json['urgent_type'] != None:
                                documentUrgentType = tmp_dict_json['urgent_type']
                                if documentUrgentType == 'I':
                                    documentUrgentString = 'ด่วนมาก'
                                elif documentUrgentType == 'U':
                                    documentUrgentString = 'ด่วน'
                                elif documentUrgentType == 'M':
                                    documentUrgentString = 'ปกติ'
                        if z == 2:
                            tmp_dict_json = query_temp[u][z].__dict__
                            tmp_emailCenter = str(tmp_dict_json['email_center'])
                        if z == 3:
                            id_card_num_tax = None
                            first_name_th = None
                            tmp_dict_json = query_temp[u][z].__dict__
                            tmp_biz_info = None 
                            # if '_sa_instance_state' in tmp_dict_json:
                            #     del tmp_dict_json['_sa_instance_state']
                            step_now2 = 0
                            step_now = None
                            tmprole_name = None
                            tmpdept_name = None
                            tmprole_level = None
                            jsonData_eval = eval(tmp_dict_json['data_json'])
                            arr_step_info = []
                            if tmp_dict_json['biz_info'] != None or tmp_dict_json['biz_info'] != '':
                                if tmp_dict_json['biz_info'] != 'None':
                                    tmp_biz_info = None
                                    tmp_biz_info02 = None
                                    eval_biz_info = eval(tmp_dict_json['biz_info'])
                                    if 'role_name' in eval_biz_info:
                                        tmprole_name = eval_biz_info['role_name']
                                    if 'dept_name' in eval_biz_info:
                                        tmpdept_name = eval_biz_info['dept_name']
                                    if 'role_level' in eval_biz_info:
                                        tmprole_level = eval_biz_info['role_level']
                                    if 'dept_name' in eval_biz_info:   
                                        id_card_num_tax =  eval_biz_info['id_card_num']
                                        first_name_th =  eval_biz_info['first_name_th']
                                        tmp_biz_info = {
                                            'tax_id':eval_biz_info['id_card_num'],
                                            'role_name' : tmprole_name,
                                            'dept_name' : tmpdept_name,
                                            'role_level' : tmprole_level          
                                        }    
                                        tmp_biz_info02 = {
                                            'tax_id':eval_biz_info['id_card_num'],
                                            'role_name' : eval_biz_info['role_name'],
                                            'dept_name' : eval_biz_info['dept_name'],
                                            'role_level' : eval_biz_info['role_level'],
                                            'first_name_eng' : eval_biz_info['first_name_eng'],
                                            'first_name_th' : eval_biz_info['first_name_th']
                                        }                             
                                    elif 'dept_name' not in eval_biz_info:
                                        id_card_num_tax =  eval_biz_info['id_card_num']
                                        first_name_th =  eval_biz_info['first_name_th']  
                                        tmp_biz_info = {
                                            'tax_id':eval_biz_info['id_card_num'],
                                            'role_name' : tmprole_name,
                                            'dept_name' : [],
                                            'role_level' : tmprole_level              
                                        }
                                        tmp_biz_info02 = {
                                            'tax_id':eval_biz_info['id_card_num'],
                                            'role_name' : tmprole_name,
                                            'dept_name' : [],
                                            'role_level' : tmprole_level              
                                        } 
                            tmp_list_step_infomation = []
                            if 'step_num' in jsonData_eval:
                                tmp_step_info = [eval(tmp_dict_json['data_json'])]
                            else:
                                tmp_step_info = eval(tmp_dict_json['data_json'])
                            if 'step_num' in jsonData_eval:
                                tmp_list_step_infomation.append(jsonData_eval)
                                jsonData_eval = tmp_list_step_infomation
                            # 
                            # print('jsonData_eval',jsonData_eval)
                            # 
                            if 'step_num' in jsonData_eval:
                                step_status = ''
                                step_before = ''
                                res_status_file = 'Y'
                                arr_step_totle = []
                                json_data_info = jsonData_eval
                                if 'step_detail' in json_data_info:
                                    for s in range(len(json_data_info['step_detail'])):
                                        json_info_step2 = {}
                                        for u in range(len(json_data_info['step_detail'][s]['activity_code'])):
                                            oneMail = str(json_data_info['step_detail'][s]['one_email']).replace(' ','').lower()
                                            if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
                                                if step_before == '':
                                                    try:
                                                        if json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Complete':
                                                            step_before = 'Complete'
                                                        elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Approve':
                                                            step_before = 'Complete'
                                                        elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Reject':
                                                            step_before = 'Reject'
                                                    except Exception as e:
                                                        step_before = ''
                                                if step_before != 'Reject':
                                                    if json_data_info['step_detail'][s]['activity_status'][u] == 'Complete':
                                                        step_status = 'Complete'
                                                    elif json_data_info['step_detail'][s]['activity_status'][u] == 'Approve':
                                                        step_status = 'Complete'
                                                    elif json_data_info['step_detail'][s]['activity_status'][u] == 'Reject':
                                                        step_status = 'Reject'
                                                    else:
                                                        try:
                                                            step_status  = 'Incomplete'
                                                        except Exception as ex:
                                                            step_status = 'Incomplete'
                                                arr_step_info.append(step_status)
                                                arr_step_info.append(step_before)
                                if 'Reject' in arr_step_info:
                                    res_status_file = 'R'
                                    res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                                elif 'Complete' in arr_step_info:
                                    res_status_file = 'Y'
                                    res_status_file_string = 'อนุมัติแล้ว'
                                elif 'Waitting' in arr_step_info:
                                    res_status_file = 'W'
                                    res_status_file_string = 'รอคุณอนุมัติ'
                                elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                                    res_status_file = 'W'
                                    res_status_file_string = 'รอคุณอนุมัติ'
                                else:
                                    res_status_file_string = 'อนุมัติแล้ว'
                                if res_status_file == 'W':
                                    statusFile_count_wait = statusFile_count_wait + 1
                                elif res_status_file == 'Y':
                                    statusFile_count_approve = statusFile_count_approve + 1
                                elif res_status_file == 'R':
                                    statusFile_count_reject = statusFile_count_reject + 1
                                else:
                                    statusFile_count_pendding = statusFile_count_pendding + 1
                            else:
                                dict_doctypeGroup = {}
                                dict_Onemail = {}
                                dict_statusGroup = {}
                                dict_stepNow = {}
                                tmp_sum_email = []
                                step_status = ''
                                res_status_file = 'Y'
                                res_status_file_string = ''
                                step_before = ''
                                step_list_before = []
                                step_list_ = []
                                step_list_next = []
                                arr_step_totle = []
                                step_me = ''
                                step_sum_status = []
                                sum_status_step_list = []
                                list_check_step = []
                                step_list_data = []
                                max_step = (len(jsonData_eval))
                                step_infomation = jsonData_eval
                                sum_status_step = []
                                tmp_status_sum = []
                                tmp_acvt_code_sum = []
                                arr_email_list = []
                                email_step_sum = []
                                arr_04_sid = []
                                for i in range(len(step_infomation)):
                                    # ARR_statusGroup = []
                                    nameOneStep = ''
                                    statusOneStep = ''
                                    emailOneStep = ''
                                    sidCode = ''
                                    stepNow = ''
                                    list_check_step = []
                                    json_step_info_2 = {}
                                    step_list_data = []
                                    step_status = []
                                    step_email = []
                                    tmp_acvt_code = []
                                    tmp_keep_status = []
                                    tmp_acvt_status = []
                                    step_ = step_infomation[i]
                                    step_num = step_infomation[i]['step_num']
                                    json_step_info_2['step_status'] = ''
                                    tmp_step_detail = step_['step_detail']
                                    for u in range(len(tmp_step_detail)):
                                        tmp_arr_step_detail = tmp_step_detail[u]
                                        tmp_status = tmp_arr_step_detail['activity_status']
                                        tmp_code = tmp_arr_step_detail['activity_code']
                                        tmp_email = tmp_arr_step_detail['one_email']
                                        for s in range(len(tmp_code)):
                                            if tmp_code[s] == 'A03':
                                                tmp_acvt_code.append(tmp_code[s])
                                                step_status.append(tmp_status[s])
                                                tmp_acvt_status.append(tmp_status[s])
                                                step_email.append(tmp_email)
                                                tmp_sum_email.append(tmp_email)
                                    email_step_sum.append(step_email)
                                    if 'step_sign' in step_:
                                        tmp_step_sign = step_['step_sign']
                                        if tmp_step_sign['status'] == True:
                                            len_step_status = len(tmp_step_sign['data'])
                                            if 'Complete' in step_status and step_status.count('Complete') == len_step_status:
                                                tmp_status_sum.append('Complete')
                                            else:
                                                for tyy in range(len(tmp_step_detail)):
                                                    tmp_arr_step_detail = tmp_step_detail[tyy]
                                                    tmp_status = tmp_arr_step_detail['activity_status']
                                                    tmp_code = tmp_arr_step_detail['activity_code']
                                                    tmp_email = tmp_arr_step_detail['one_email']                                        
                                                if 'Incomplete' not in tmp_keep_status:
                                                    tmp_status_sum.append('Incomplete_1')
                                                    tmp_keep_status.append('Incomplete')  
                                        else:
                                            if 'Reject' in step_status:
                                                tmp_status_sum.append('Reject')
                                            elif 'Approve' in step_status:
                                                tmp_status_sum.append('Complete')
                                            elif 'Complete' in step_status:
                                                tmp_status_sum.append('Complete')
                                            elif 'Incomplete' in step_status:
                                                tmp_status_sum.append('Incomplete')
                                            elif 'Pending' in step_status:
                                                tmp_status_sum.append('Incomplete')
                                            else:
                                                tmp_status_sum.append('Complete')
                                    else:
                                        if 'Reject' in step_status:
                                            tmp_status_sum.append('Reject')
                                        elif 'Approve' in step_status:
                                            tmp_status_sum.append('Complete')
                                        elif 'Complete' in step_status:
                                            tmp_status_sum.append('Complete')
                                        elif 'Incomplete' in step_status:
                                            tmp_status_sum.append('Incomplete')
                                        elif 'Pending' in step_status:
                                            tmp_status_sum.append('Incomplete')
                                        else:
                                            tmp_status_sum.append('Complete')
                                arr_step = []
                                arr_tmponeemail_now = []
                                arr_emailOne = []
                                arr_nameOne = []
                                arr_statusStep = []
                                ARR_STATUS = []
                                step_before = ''
                                print('tmp_status_sum',tmp_status_sum)
                                
                                if len(tmp_status_sum) != 0:
                                    # count_email = tmp_sum_email.count(self.emailUser)
                                    for zzi in range(len(step_infomation)):
                                        list_check_step = []
                                        json_step_info_2 = {}
                                        step_list_data = []
                                        step_status = []
                                        step_ = step_infomation[zzi]
                                        step_num = step_infomation[zzi]['step_num']
                                        print('step_num',step_num)
                                        json_step_info_2['step_status'] = ''
                                        tmp_step_detail = step_['step_detail']
                                        # print('tmp_step_detail',tmp_step_detail)
                                        for zi in range(len(tmp_step_detail)):
                                            tmp_arr_step_detail_2 = tmp_step_detail[zi]
                                            oneMail = str(tmp_arr_step_detail_2['one_email']).replace(' ','').lower()
                                            # เช็ค step
                                            statusStepNum = ''
                                            for xx in range(len(tmp_arr_step_detail_2['activity_code'])):
                                                if tmp_arr_step_detail_2['activity_code'][xx] == 'A03':
                                                    statusStepNum = tmp_arr_step_detail_2['activity_status'][xx]
                                                    # print('statusStepNum',statusStepNum)
                                            Db_Email = oneMail
                                            print('oneMail',oneMail)
                                            print('statusStepNum',statusStepNum)
                                            tmp_step_me = int(step_num) - 1
                                            step_num_int2 = int(step_num)
                                            s = False
                                            if oneMail == self.InputEmail[0]:
                                                # print('in 01')
                                                stepNumNow =  (int(step_num) - 1)
                                                # print('stepNumNow',stepNumNow)
                                                for yyy in range(stepNumNow):
                                                    ARR_STATUS.append(tmp_status_sum[yyy])
                                                # print('ARR_STATUS',ARR_STATUS)
                                                if 'Incomplete' in str(ARR_STATUS) or 'Reject' in str(ARR_STATUS):
                                                    s = False
                                                else:
                                                    stepNumNow =  (int(step_num) - 1)
                                                    # print('tmp_status_sum[stepNumNow]',tmp_status_sum[stepNumNow])
                                                    if tmp_status_sum[stepNumNow] == 'Incomplete':
                                                        s = True
                                                        step_before = oneMail
                                            else:
                                                # print('in 02')
                                                for xy in range(len(self.InputEmail)):
                                                    if oneMail == self.InputEmail[xy]:
                                                        # print('in in 02 02')
                                                        # print('step_before',step_before)
                                                        # print('self.InputEmail[xy-1]',self.InputEmail[xy-1])
                                                        if self.InputEmail[xy-1] == step_before:
                                                            stepNumNow =  (int(step_num) - 1)
                                                            # print('tmp_status_sum[stepNumNow]',tmp_status_sum[stepNumNow])
                                                            if tmp_status_sum[stepNumNow] == 'Incomplete':
                                                                s = True
                                                                step_before = oneMail
                                                        else:
                                                            s = False
                                            # print('s',s)
                                            # s = False
                                            if s == True:
                                                for xy in range(len(self.InputEmail)):
                                                    if self.InputEmail[xy] ==  oneMail :
                                                        if statusStepNum == 'Incomplete':
                                                            arr_step.append(int(step_num))
                                                            arr_tmponeemail_now.append(oneMail)
                                                            sidCode = tmp_sicode
                                                        elif statusStepNum == 'Pending':
                                                            arr_step.append(int(step_num))
                                                            arr_tmponeemail_now.append(oneMail)
                                                            sidCode = tmp_sicode
                                            stop = False
                                            for ii in range(len(tmp_status_sum)):
                                                if stop == False :
                                                    list_status = Counter(tmp_status_sum)
                                                    if 'Complete' in list_status and len(list_status) == 1 :
                                                        step_now2 = len(tmp_status_sum)
                                                        stop = True
                                                    elif tmp_status_sum[ii] == 'Incomplete' or tmp_status_sum[ii] == 'Reject' or tmp_status_sum[ii] == 'Approve':
                                                        step_now2 = ii+1
                                                        stop = True
                                            if step_now == None:                                  
                                                step_now = step_num_int2
                                print('arr_step',arr_step)
                                dict_stepNow = {
                                    'step_num': arr_step
                                }
                                dict_Onemail = {
                                    'email_one' : arr_tmponeemail_now
                                }
                                dict_doctypeGroup = {
                                    'document_type': tmp_document_type,
                                    'document_json': tmp_document_json,
                                    'id_card_num' : id_card_num_tax,
                                    'first_name_th': first_name_th
                                }
                            arr_temp_step_group.sort()
                            print('arr_temp_step_group',arr_temp_step_group)
                            print('__________________________________')
                            print(len(arr_step),len(self.InputEmail))
                            if len(arr_step) == len(self.InputEmail):
                                if len(arr_temp_step_group) != 0:
                                    if sidCode != '':
                                        tmp_sidcode.append(sidCode)
                                        tmp_stepNowIncomplete.append(dict_stepNow)
                                        tmp_OneMail_Now.append(dict_Onemail)
                                        tmp_doctypeGroup.append(dict_doctypeGroup)
                                        tmp_bizinfo.append(tmp_biz_info02)
                                        tmp_maxstep.append(str(max_step))
                                        tmp_statusGroup.append(dict_statusGroup)
                                        json_data = {
                                        "subject_text":tmp_subject_text,
                                        "body_text":tmp_body_text
                                        }
                                    arr_string_options_page.append(json_data)
                                    json_mail = {
                                        'email_middle':tmp_emailCenter
                                    }
                                    arr_emailCenter.append(json_mail)
                print('tmp_sidcode',tmp_sidcode)
                print('tmp_OneMail_Now',tmp_OneMail_Now)
                # print('tmp_statusGroup',tmp_statusGroup)
                # print('tmp_bizinfo',tmp_bizinfo)
                print('tmp_maxstep',tmp_maxstep)
                if len(tmp_sidcode) != 0:
                    return {'result':'OK','messageText':tmp_sidcode,'tmp_step':tmp_stepNowIncomplete,'tmp_OneMail_Now':tmp_OneMail_Now,'tmp_doctypeGroup':tmp_doctypeGroup,'tmp_bizinfo':tmp_bizinfo,'tmp_maxstep':tmp_maxstep,'arr_string_options_page':arr_string_options_page,'arr_emailCenter':arr_emailCenter}
                else:
                    return {'result':'ER','messageText':None}
            else:
                return {'result':'ER','messageText':None}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}



    # def select_filter_sidcode_to_group_v2(self,sidcode,InputEmail):
    #     self.sidcode = sidcode
    #     self.InputEmail = eval(InputEmail)
    #     tmp_sid_code_list = []
    #     tmp_sidcode = []
    #     tmp_stepNowIncomplete = []
    #     tmp_doctypeGroup = []
    #     tmp_OneMail_Now = []
    #     tmp_statusGroup = []
    #     tmp_bizinfo = []
    #     tmp_maxstep = []
    #     arr_string_options_page = []
    #     # InputEmail = 'jirayu.ko@thai.com'
    #     Db_Email = ''
    #     stepNow_Incomplete = ''
    #     try:
    #         # print('sidcode',sidcode)
    #         query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep)\
    #             .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
    #             .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
    #             .filter(and_(paper_lesssender.status=='ACTIVE',paper_lesssender.document_status=='N',paper_lesssender.step_data_sid.in_(self.sidcode)))\
    #             .order_by(desc(paper_lesssender.send_time))\
    #             .all()
    #         print('len',len(query_temp))
    #         if len(query_temp) != 0:
    #             for u in range(len(query_temp)):
    #                 tmp_document_json = ''
    #                 tmp_document_type = ''
    #                 tmp_subject_text = ''
    #                 tmp_body_text = ''
    #                 for z in range(len(query_temp[u])):
    #                     # tmp_document_json = ''
    #                     # tmp_document_type = ''
    #                     if z == 0:
    #                         tmp_dict_json = query_temp[u][z].__dict__
    #                         # if '_sa_instance_state' in tmp_dict_json:
    #                         #     del tmp_dict_json['_sa_instance_state']
    #                         tmp_sicode = tmp_dict_json['step_data_sid']
    #                         print('tmp_sicode',tmp_sicode)
    #                         tmp_sid_code_list.append(tmp_sicode)
    #                         tmp_send_time = tmp_dict_json['send_time']
    #                         tmp_document_id = tmp_dict_json['doc_id']
    #                         tmp_tracking_id = tmp_dict_json['tracking_id']
    #                         tmp_sender_name = tmp_dict_json['sender_name']
    #                         tmp_sender_email = tmp_dict_json['sender_email']
    #                         tmp_file_name = tmp_dict_json['file_name']
    #                         tmp_group_id = tmp_dict_json['group_id']
    #                         statusGroup_detail = False
    #                         if tmp_group_id != None:
    #                             if tmp_group_id != '':
    #                                 tmp_group_id = eval(tmp_group_id)
    #                                 if len(tmp_group_id) != 0:
    #                                     statusGroup_detail = True
    #                     # print('statusGroup_detail 01',statusGroup_detail)
    #                     if z == 1:
    #                         arr_temp_step_group = []
    #                         tmp_dict_json = query_temp[u][z].__dict__
    #                         # if '_sa_instance_state' in tmp_dict_json:
    #                         #     del tmp_dict_json['_sa_instance_state']
    #                         tmp_sign_page_options = tmp_dict_json['sign_page_options']
    #                         tmp_document_type = tmp_dict_json['documentType']
    #                         tmp_document_json = tmp_dict_json['documentJson']
    #                         if tmp_dict_json['options_page'] != None:
    #                             tmp_op = eval(tmp_dict_json['options_page'])
    #                             tmp_options_page = [eval(tmp_dict_json['options_page'])]
    #                         else:
    #                             tmp_options_page = []
    #                         # print('statusGroup_detail',statusGroup_detail)
    #                         # if statusGroup_detail == False:
    #                         #     if 'group_detail' in tmp_op:
    #                         #         tmp_group_detail = tmp_op['group_detail']
    #                         #         if 'group_status' in tmp_group_detail:
    #                         #             tmp_status_group = tmp_group_detail['group_status']
    #                         #             if tmp_status_group == True:
    #                         #                 tmpstep_group = tmp_group_detail['step_num']
    #                         #                 for n in range(len(tmpstep_group)):
    #                         #                     arr_temp_step_group.append(tmpstep_group[n])
    #                         # print('tmp_options_page',tmp_options_page)
    #                         if statusGroup_detail == False:
    #                             tmp_subject_text = ''
    #                             tmp_body_text = ''
    #                             if 'subject_text' in str(tmp_options_page):
    #                                 tmp_subject_text = tmp_op['subject_text']
    #                                 print('tmp_subject_text',tmp_subject_text)
    #                             if 'body_text' in str(tmp_options_page):
    #                                 tmp_body_text = tmp_op['body_text']
    #                                 print('tmp_body_text',tmp_body_text)
    #                             if 'group_detail' in tmp_op:
    #                                 tmp_group_detail = tmp_op['group_detail']
    #                                 print('group_type',tmp_group_detail['group_type'])
    #                                 if tmp_group_detail['group_type'] == '2':
    #                                     if 'group_status' in tmp_group_detail:
    #                                         tmp_status_group = tmp_group_detail['group_status']
    #                                         if tmp_status_group == True:
    #                                             arr_temp_step_group.append(tmp_status_group)
    #                                             # tmpstep_group = tmp_group_detail['step_num']
    #                                             # for n in range(len(tmpstep_group)):
    #                                                 # print(tmpstep_group[n])
    #                                                 # arr_temp_step_group.append(tmpstep_group[n])
    #                         # print('statusGroup_detail',statusGroup_detail)
    #                         if tmp_dict_json['documentJson'] != None:
    #                             documentJson_result = eval(tmp_dict_json['documentJson'])
    #                             documentName = documentJson_result['document_name']
    #                             documentType = documentJson_result['document_type']
    #                         else:
    #                             documentName = None
    #                             documentType = None
    #                         if tmp_dict_json['urgent_type'] != None:
    #                             documentUrgentType = tmp_dict_json['urgent_type']
    #                             if documentUrgentType == 'I':
    #                                 documentUrgentString = 'ด่วนมาก'
    #                             elif documentUrgentType == 'U':
    #                                 documentUrgentString = 'ด่วน'
    #                             elif documentUrgentType == 'M':
    #                                 documentUrgentString = 'ปกติ'
    #                     if z == 2:
    #                         id_card_num_tax = None
    #                         tmp_dict_json = query_temp[u][z].__dict__
    #                         tmp_biz_info = None 
    #                         # if '_sa_instance_state' in tmp_dict_json:
    #                         #     del tmp_dict_json['_sa_instance_state']
    #                         step_now2 = 0
    #                         step_now = None
    #                         tmprole_name = None
    #                         tmpdept_name = None
    #                         tmprole_level = None
    #                         jsonData_eval = eval(tmp_dict_json['data_json'])
    #                         arr_step_info = []
    #                         if tmp_dict_json['biz_info'] != None or tmp_dict_json['biz_info'] != '':
    #                             if tmp_dict_json['biz_info'] != 'None':
    #                                 tmp_biz_info = None
    #                                 tmp_biz_info02 = None
    #                                 eval_biz_info = eval(tmp_dict_json['biz_info'])
    #                                 if 'role_name' in eval_biz_info:
    #                                     tmprole_name = eval_biz_info['role_name']
    #                                 if 'dept_name' in eval_biz_info:
    #                                     tmpdept_name = eval_biz_info['dept_name']
    #                                 if 'role_level' in eval_biz_info:
    #                                     tmprole_level = eval_biz_info['role_level']
    #                                 if 'dept_name' in eval_biz_info:   
    #                                     id_card_num_tax =  eval_biz_info['id_card_num']       
    #                                     tmp_biz_info = {
    #                                         'tax_id':eval_biz_info['id_card_num'],
    #                                         'role_name' : tmprole_name,
    #                                         'dept_name' : tmpdept_name,
    #                                         'role_level' : tmprole_level          
    #                                     }    
    #                                     tmp_biz_info02 = {
    #                                         'tax_id':eval_biz_info['id_card_num'],
    #                                         'role_name' : eval_biz_info['role_name'],
    #                                         'dept_name' : eval_biz_info['dept_name'],
    #                                         'role_level' : eval_biz_info['role_level'],
    #                                         'first_name_eng' : eval_biz_info['first_name_eng'],
    #                                         'first_name_th' : eval_biz_info['first_name_th']
    #                                     }                             
    #                                 elif 'dept_name' not in eval_biz_info:
    #                                     id_card_num_tax =  eval_biz_info['id_card_num']   
    #                                     tmp_biz_info = {
    #                                         'tax_id':eval_biz_info['id_card_num'],
    #                                         'role_name' : tmprole_name,
    #                                         'dept_name' : [],
    #                                         'role_level' : tmprole_level              
    #                                     }
    #                                     tmp_biz_info02 = {
    #                                         'tax_id':eval_biz_info['id_card_num'],
    #                                         'role_name' : eval_biz_info['role_name'],
    #                                         'dept_name' : eval_biz_info['dept_name'],
    #                                         'role_level' : eval_biz_info['role_level'],
    #                                         'first_name_eng' : eval_biz_info['first_name_eng'],
    #                                         'first_name_th' : eval_biz_info['first_name_th']
    #                                     }    
    #                         tmp_list_step_infomation = []
    #                         if 'step_num' in jsonData_eval:
    #                             tmp_step_info = [eval(tmp_dict_json['data_json'])]
    #                         else:
    #                             tmp_step_info = eval(tmp_dict_json['data_json'])
    #                         if 'step_num' in jsonData_eval:
    #                             tmp_list_step_infomation.append(jsonData_eval)
    #                             jsonData_eval = tmp_list_step_infomation
    #                         # 
    #                         # print('jsonData_eval',jsonData_eval)
    #                         # 
    #                         if 'step_num' in jsonData_eval:
    #                             step_status = ''
    #                             step_before = ''
    #                             res_status_file = 'Y'
    #                             arr_step_totle = []
    #                             json_data_info = jsonData_eval
    #                             if 'step_detail' in json_data_info:
    #                                 for s in range(len(json_data_info['step_detail'])):
    #                                     json_info_step2 = {}
    #                                     for u in range(len(json_data_info['step_detail'][s]['activity_code'])):
    #                                         oneMail = str(json_data_info['step_detail'][s]['one_email']).replace(' ','').lower()
    #                                         if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
    #                                             if step_before == '':
    #                                                 try:
    #                                                     if json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Complete':
    #                                                         step_before = 'Complete'
    #                                                     elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Approve':
    #                                                         step_before = 'Complete'
    #                                                     elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Reject':
    #                                                         step_before = 'Reject'
    #                                                 except Exception as e:
    #                                                     step_before = ''
    #                                             if step_before != 'Reject':
    #                                                 if json_data_info['step_detail'][s]['activity_status'][u] == 'Complete':
    #                                                     step_status = 'Complete'
    #                                                 elif json_data_info['step_detail'][s]['activity_status'][u] == 'Approve':
    #                                                     step_status = 'Complete'
    #                                                 elif json_data_info['step_detail'][s]['activity_status'][u] == 'Reject':
    #                                                     step_status = 'Reject'
    #                                                 else:
    #                                                     try:
    #                                                         step_status  = 'Incomplete'
    #                                                     except Exception as ex:
    #                                                         step_status = 'Incomplete'
    #                                             arr_step_info.append(step_status)
    #                                             arr_step_info.append(step_before)
    #                             if 'Reject' in arr_step_info:
    #                                 res_status_file = 'R'
    #                                 res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
    #                             elif 'Complete' in arr_step_info:
    #                                 res_status_file = 'Y'
    #                                 res_status_file_string = 'อนุมัติแล้ว'
    #                             elif 'Waitting' in arr_step_info:
    #                                 res_status_file = 'W'
    #                                 res_status_file_string = 'รอคุณอนุมัติ'
    #                             elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
    #                                 res_status_file = 'W'
    #                                 res_status_file_string = 'รอคุณอนุมัติ'
    #                             else:
    #                                 res_status_file_string = 'อนุมัติแล้ว'
    #                             if res_status_file == 'W':
    #                                 statusFile_count_wait = statusFile_count_wait + 1
    #                             elif res_status_file == 'Y':
    #                                 statusFile_count_approve = statusFile_count_approve + 1
    #                             elif res_status_file == 'R':
    #                                 statusFile_count_reject = statusFile_count_reject + 1
    #                             else:
    #                                 statusFile_count_pendding = statusFile_count_pendding + 1
    #                         else:
    #                             dict_doctypeGroup = {}
    #                             dict_Onemail = {}
    #                             dict_statusGroup = {}
    #                             dict_stepNow = {}
    #                             tmp_sum_email = []
    #                             step_status = ''
    #                             res_status_file = 'Y'
    #                             res_status_file_string = ''
    #                             step_before = ''
    #                             step_list_before = []
    #                             step_list_ = []
    #                             step_list_next = []
    #                             arr_step_totle = []
    #                             step_me = ''
    #                             step_sum_status = []
    #                             sum_status_step_list = []
    #                             list_check_step = []
    #                             step_list_data = []
    #                             max_step = (len(jsonData_eval))
    #                             step_infomation = jsonData_eval
    #                             sum_status_step = []
    #                             tmp_status_sum = []
    #                             tmp_acvt_code_sum = []
    #                             arr_email_list = []
    #                             email_step_sum = []
    #                             arr_04_sid = []
    #                             for i in range(len(step_infomation)):
    #                                 # ARR_statusGroup = []
    #                                 nameOneStep = ''
    #                                 statusOneStep = ''
    #                                 emailOneStep = ''
    #                                 sidCode = ''
    #                                 stepNow = ''
    #                                 list_check_step = []
    #                                 json_step_info_2 = {}
    #                                 step_list_data = []
    #                                 step_status = []
    #                                 step_email = []
    #                                 tmp_acvt_code = []
    #                                 tmp_keep_status = []
    #                                 tmp_acvt_status = []
    #                                 step_ = step_infomation[i]
    #                                 step_num = step_infomation[i]['step_num']
    #                                 json_step_info_2['step_status'] = ''
    #                                 tmp_step_detail = step_['step_detail']
    #                                 for u in range(len(tmp_step_detail)):
    #                                     tmp_arr_step_detail = tmp_step_detail[u]
    #                                     tmp_status = tmp_arr_step_detail['activity_status']
    #                                     tmp_code = tmp_arr_step_detail['activity_code']
    #                                     tmp_email = tmp_arr_step_detail['one_email']
    #                                     for s in range(len(tmp_code)):
    #                                         if tmp_code[s] == 'A03':
    #                                             tmp_acvt_code.append(tmp_code[s])
    #                                             step_status.append(tmp_status[s])
    #                                             tmp_acvt_status.append(tmp_status[s])
    #                                             step_email.append(tmp_email)
    #                                             tmp_sum_email.append(tmp_email)
    #                                 email_step_sum.append(step_email)
    #                                 if 'step_sign' in step_:
    #                                     tmp_step_sign = step_['step_sign']
    #                                     if tmp_step_sign['status'] == True:
    #                                         len_step_status = len(tmp_step_sign['data'])
    #                                         if 'Complete' in step_status and step_status.count('Complete') == len_step_status:
    #                                             tmp_status_sum.append('Complete')
    #                                         else:
    #                                             for tyy in range(len(tmp_step_detail)):
    #                                                 tmp_arr_step_detail = tmp_step_detail[tyy]
    #                                                 tmp_status = tmp_arr_step_detail['activity_status']
    #                                                 tmp_code = tmp_arr_step_detail['activity_code']
    #                                                 tmp_email = tmp_arr_step_detail['one_email']                                        
    #                                             if 'Incomplete' not in tmp_keep_status:
    #                                                 tmp_status_sum.append('Incomplete_1')
    #                                                 tmp_keep_status.append('Incomplete')  
    #                                     else:
    #                                         if 'Reject' in step_status:
    #                                             tmp_status_sum.append('Reject')
    #                                         elif 'Approve' in step_status:
    #                                             tmp_status_sum.append('Complete')
    #                                         elif 'Complete' in step_status:
    #                                             tmp_status_sum.append('Complete')
    #                                         elif 'Incomplete' in step_status:
    #                                             tmp_status_sum.append('Incomplete')
    #                                         elif 'Pending' in step_status:
    #                                             tmp_status_sum.append('Incomplete')
    #                                         else:
    #                                             tmp_status_sum.append('Complete')
    #                                 else:
    #                                     if 'Reject' in step_status:
    #                                         tmp_status_sum.append('Reject')
    #                                     elif 'Approve' in step_status:
    #                                         tmp_status_sum.append('Complete')
    #                                     elif 'Complete' in step_status:
    #                                         tmp_status_sum.append('Complete')
    #                                     elif 'Incomplete' in step_status:
    #                                         tmp_status_sum.append('Incomplete')
    #                                     elif 'Pending' in step_status:
    #                                         tmp_status_sum.append('Incomplete')
    #                                     else:
    #                                         tmp_status_sum.append('Complete')
    #                             arr_step = []
    #                             arr_tmponeemail_now = []
    #                             arr_emailOne = []
    #                             arr_nameOne = []
    #                             arr_statusStep = []
    #                             ARR_STATUS = []
    #                             step_before = ''
    #                             # print('tmp_status_sum',tmp_status_sum)
                                
    #                             if len(tmp_status_sum) != 0:
    #                                 # count_email = tmp_sum_email.count(self.emailUser)
    #                                 for zzi in range(len(step_infomation)):
    #                                     list_check_step = []
    #                                     json_step_info_2 = {}
    #                                     step_list_data = []
    #                                     step_status = []
    #                                     step_ = step_infomation[zzi]
    #                                     step_num = step_infomation[zzi]['step_num']
    #                                     print('step_num',step_num)
    #                                     json_step_info_2['step_status'] = ''
    #                                     tmp_step_detail = step_['step_detail']
    #                                     # print('tmp_step_detail',tmp_step_detail)
    #                                     for zi in range(len(tmp_step_detail)):
    #                                         tmp_arr_step_detail_2 = tmp_step_detail[zi]
    #                                         oneMail = str(tmp_arr_step_detail_2['one_email']).replace(' ','').lower()
    #                                         # เช็ค step
    #                                         statusStepNum = ''
    #                                         for xx in range(len(tmp_arr_step_detail_2['activity_code'])):
    #                                             if tmp_arr_step_detail_2['activity_code'][xx] == 'A03':
    #                                                 statusStepNum = tmp_arr_step_detail_2['activity_status'][xx]
    #                                                 # print('statusStepNum',statusStepNum)
    #                                         Db_Email = oneMail
    #                                         print('oneMail',oneMail)
    #                                         # print('statusStepNum',statusStepNum)
    #                                         tmp_step_me = int(step_num) - 1
    #                                         step_num_int2 = int(step_num)
    #                                         s = False
    #                                         if oneMail == self.InputEmail[0]:
    #                                             print('in 01')
    #                                             stepNumNow =  (int(step_num) - 1)
    #                                             print('stepNumNow',stepNumNow)
    #                                             for yyy in range(stepNumNow):
    #                                                 ARR_STATUS.append(tmp_status_sum[yyy])
    #                                             print('ARR_STATUS',ARR_STATUS)
    #                                             if 'Incomplete' in str(ARR_STATUS) or 'Reject' in str(ARR_STATUS):
    #                                                 s = False
    #                                             else:
    #                                                 stepNumNow =  (int(step_num) - 1)
    #                                                 print('tmp_status_sum[stepNumNow]',tmp_status_sum[stepNumNow])
    #                                                 if tmp_status_sum[stepNumNow] == 'Incomplete':
    #                                                     s = True
    #                                                     step_before = oneMail
    #                                         else:
    #                                             print('in 02')
    #                                             for xy in range(len(self.InputEmail)):
    #                                                 if oneMail == self.InputEmail[xy]:
    #                                                     # print('in in 02 02')
    #                                                     # print('step_before',step_before)
    #                                                     # print('self.InputEmail[xy-1]',self.InputEmail[xy-1])
    #                                                     if self.InputEmail[xy-1] == step_before:
    #                                                         stepNumNow =  (int(step_num) - 1)
    #                                                         # print('tmp_status_sum[stepNumNow]',tmp_status_sum[stepNumNow])
    #                                                         if tmp_status_sum[stepNumNow] == 'Incomplete':
    #                                                             s = True
    #                                                             step_before = oneMail
    #                                                     else:
    #                                                         s = False
    #                                         print('s',s)
    #                                         # s = False
    #                                         if s == True:
    #                                             for xy in range(len(self.InputEmail)):
    #                                                 if self.InputEmail[xy] ==  oneMail and statusStepNum == 'Incomplete':
    #                                                     arr_step.append(int(step_num))
    #                                                     arr_tmponeemail_now.append(oneMail)
    #                                                     sidCode = tmp_sicode
                                                      
    #                                         stop = False
    #                                         for ii in range(len(tmp_status_sum)):
    #                                             if stop == False :
    #                                                 list_status = Counter(tmp_status_sum)
    #                                                 if 'Complete' in list_status and len(list_status) == 1 :
    #                                                     step_now2 = len(tmp_status_sum)
    #                                                     stop = True
    #                                                 elif tmp_status_sum[ii] == 'Incomplete' or tmp_status_sum[ii] == 'Reject' or tmp_status_sum[ii] == 'Approve':
    #                                                     step_now2 = ii+1
    #                                                     stop = True
    #                                         if step_now == None:                                  
    #                                             step_now = step_num_int2
    #                             # print('arr_step',arr_step)
    #                             dict_stepNow = {
    #                                 'step_num': arr_step
    #                             }
    #                             dict_Onemail = {
    #                                 'email_one' : arr_tmponeemail_now
    #                             }
    #                             dict_doctypeGroup = {
    #                                 'document_type': tmp_document_type,
    #                                 'document_json': tmp_document_json,
    #                                 'id_card_num' : id_card_num_tax
    #                             }
                                
    #                             # dict_statusGroup = {
    #                             #     'email_one' : arr_emailOne,
    #                             #     'name_one': arr_nameOne,
    #                             #     'status': 'Incomplete'
    #                             # }

    #                             # for zi in range(len(step_infomation[step_now2-1]['step_detail'])):
    #                             #     tmponeemail_now = step_infomation[step_now2-1]['step_detail'][zi]['one_email']
    #                             #     print('tmponeemail_now',tmponeemail_now)
    #                             #     # print('zi',zi)
    #                             #     # print('step_now',step_now2)
    #                             #     if tmponeemail_now == self.InputEmail:
    #                             #         sidCode = tmp_sicode
    #                             #         stepNow = step_now2 
    #                             #         dict_stepNow = {
    #                             #             'step_num': [stepNow]
    #                             #         }
    #                             #         dict_Onemail = {
    #                             #             'email_one' : [tmponeemail_now]
    #                             #         }
    #                             #         # print('tmp_document_json',tmp_document_json)
    #                             #         # print('tmp_document_type',tmp_document_type)
    #                             #         dict_doctypeGroup = {
    #                             #             'document_type': tmp_document_type,
    #                             #             'document_json': tmp_document_json,
    #                             #             'id_card_num' : id_card_num_tax
    #                             #         }
    #                         arr_temp_step_group.sort()
    #                         print('arr_temp_step_group',arr_temp_step_group)
    #                         print('__________________________________')
    #                         if len(arr_step) == len(self.InputEmail):
    #                             if len(arr_temp_step_group) != 0:
    #                                 if sidCode != '':
    #                                     tmp_sidcode.append(sidCode)
    #                                     tmp_stepNowIncomplete.append(dict_stepNow)
    #                                     tmp_OneMail_Now.append(dict_Onemail)
    #                                     tmp_doctypeGroup.append(dict_doctypeGroup)
    #                                     tmp_bizinfo.append(tmp_biz_info02)
    #                                     tmp_maxstep.append(str(max_step))
    #                                     tmp_statusGroup.append(dict_statusGroup)
    #                                     json_data = {
    #                                     "subject_text":tmp_subject_text,
    #                                     "body_text":tmp_body_text
    #                                     }
    #                                     arr_string_options_page.append(json_data)
    #             # print('tmp_sidcode',tmp_sidcode)
    #             # print('tmp_OneMail_Now',tmp_OneMail_Now)
    #             # # print('tmp_statusGroup',tmp_statusGroup)
    #             # # print('tmp_bizinfo',tmp_bizinfo)
    #             # print('tmp_maxstep',tmp_maxstep)
    #             if len(tmp_sidcode) != 0:
    #                 return {'result':'OK','messageText':tmp_sidcode,'tmp_step':tmp_stepNowIncomplete,'tmp_OneMail_Now':tmp_OneMail_Now,'tmp_doctypeGroup':tmp_doctypeGroup,'tmp_bizinfo':tmp_bizinfo,'tmp_maxstep':tmp_maxstep,'arr_string_options_page':arr_string_options_page}
    #             else:
    #                 return {'result':'ER','messageText':None}
    #         else:
    #             return {'result':'ER','messageText':None}
    #     except Exception as ex:
    #         exc_type, exc_obj, exc_tb = sys.exc_info()
    #         fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
    #         print(exc_type, fname, exc_tb.tb_lineno)
    #         return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}


    def select_step_code_togroup_v2(self,stepcode):
        self.stepcode = stepcode
        arr_sidcode = []
        arr_stepcode = []
        try:
            for n in range(len(self.stepcode)):
                arr_tmpsidcode = []
                tmp_stepcode = self.stepcode[n]
                tmp_query = paper_lesstrack.query.filter(paper_lesstrack.step_Code==tmp_stepcode).all()
                if len(tmp_query) != 0:
                    for z in range(len(tmp_query)):
                        tmp_json = tmp_query[z].__dict__
                        if tmp_json['step_data_sid'] != None:
                            arr_tmpsidcode.append(tmp_json['step_data_sid'])
                arr_sidcode.append(arr_tmpsidcode)
                arr_stepcode.append(tmp_stepcode)
            return {'result':'OK','messageText':{'data':arr_sidcode,'stepcode':arr_stepcode}}
                # else:
                #     return {'result':'ER','messageText': None,'messageER':'data not found'}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

    def select_query_templategroup_v2(self,templagegroup_code):
        self.templagegroup_code = templagegroup_code
        tmp_qeury = db.session.query(tb_group_template_2)\
            .filter(and_(tb_group_template_2.status=='ACTIVE',tb_group_template_2.tid==self.templagegroup_code))\
            .first()
        if tmp_qeury != None:
            tmmpresult = {}
            tmp_json = tmp_qeury.__dict__
            if '_sa_instance_state' in tmp_json:
                tmp_json['_sa_instance_state'] = str(tmp_json['_sa_instance_state'])
            if tmp_json['template'] != None:
                tmmpresult['template'] = eval(tmp_json['template'])
            if tmp_json['group_color'] != None:
                tmmpresult['group_color'] = eval(tmp_json['group_color'])
            if tmp_json['group_name'] != None:
                tmmpresult['group_name'] = tmp_json['group_name']
            if tmp_json['group_title'] != None:
                tmmpresult['group_title'] = eval(tmp_json['group_title'])
            if tmp_json['step_group'] != None:
                tmmpresult['step_group'] = eval(tmp_json['step_group'])
            if tmp_json['group_data'] != None:
                tmmpresult['group_data'] = eval(tmp_json['group_data'])
            if tmp_json['group_name'] != None:
                tmmpresult['group_name'] = tmp_json['group_name']
            # if tmp_json['document_type'] != None:
            #     tmmpresult['document_type'] = tmp_json['document_type']
            if tmp_json['biz_info'] != None:
                tmmpresult['biz_info'] = tmp_json['biz_info']
            if tmp_json['cover_page'] != None:
                tmmpresult['cover_page'] = tmp_json['cover_page']
            if tmp_json['email_middle'] != None:
                tmmpresult['email_middle'] = tmp_json['email_middle']
            if tmp_json['email_step'] != None:
                tmmpresult['email_step'] = tmp_json['email_step']
            if tmp_json['status_doing_auto'] != None:
                tmmpresult['status_doing_auto'] = tmp_json['status_doing_auto']
            return {'result':'OK','messageText':tmmpresult}
        else:
            return {'result':'ER','messageText':'data not found'}


    def selectGroupDocument_version2(self,email_one,group_id,tax_id,limit,offset,keyword):
        try:
            self.email_one = email_one
            # self.document_type = document_type
            self.group_id = group_id
            self.tax_id = tax_id
            self.limit = limit
            self.offset = offset
            self.keyword = keyword
            tmp_arrjson = []
            txtQuery = ''
            tmp_query = []
            count = 0
            txt = "%[]%"
            queryString = ''' tb_group_document_2.status=='ACTIVE',tb_group_document_2.sid_group!='[]' '''
            if self.email_one != None :
                queryString += ''',or_(tb_group_document_2.email_view_group.contains(self.email_one),tb_group_document_2.status_group.contains(self.email_one))'''
            if self.tax_id != None and self.tax_id != '' :
                queryString += ''',tb_group_document_2.bizinfo.contains(self.tax_id)'''
            else:
                queryString += ''',or_(tb_group_document_2.bizinfo=='',tb_group_document_2.bizinfo==None)'''
            # if self.document_type != None :
            #     queryString += ''',tb_group_document.document_type==self.document_type'''            
            if self.keyword == None:
                txtQuery = '''db.session.query(tb_group_document_2).filter(and_('''+queryString+''')).order_by(desc(tb_group_document_2.updatetime)).offset(self.offset).limit(self.limit).all()'''
            else:
                try:      
                    dats = datetime.datetime.strptime(self.keyword, '%Y-%m-%d')
                    datetime1 = dats.strftime('%Y-%m-%d 00:00:00')
                    datetime2 = dats.strftime('%Y-%m-%d 23:59:59')                     
                    txtQuery = '''db.session.query(tb_group_document_2).filter(and_('''+queryString+''',tb_group_document_2.updatetime >= datetime1,tb_group_document_2.updatetime <= datetime2))\
                        .order_by(desc(tb_group_document_2.updatetime)).offset(self.offset).limit(self.limit).all()'''                             
                except ValueError:
                    print('key not datetime') 
                    if self.keyword == '':
                        txtQuery = '''db.session.query(tb_group_document_2).filter(and_('''+queryString+''')).order_by(desc(tb_group_document_2.updatetime)).offset(self.offset).limit(self.limit).all()''' 
                    else:
                        txtQuery = '''db.session.query(tb_group_document_2).filter(and_('''+queryString+''',tb_group_document_2.json_data.contains(self.keyword)))\
                            .order_by(desc(tb_group_document_2.updatetime)).offset(self.offset).limit(self.limit).all()''' 
                    print(txtQuery)  
            if self.group_id != None:
                txtQuery = '''db.session.query(tb_group_document_2).filter(and_(tb_group_document_2.status=='ACTIVE',tb_group_document_2.id==self.group_id)).all()'''
            # print(txtQuery) 
            tmp_query = eval(txtQuery)     
            # return ''
            if len(tmp_query) != 0:
                print(len(tmp_query))
                for n in range(len(tmp_query)):
                    step_now = 0
                    tmparr_stepnum = []
                    tmp_step_group_detail = None
                    tmp_pdf = None
                    jsonurl_info = None
                    tmp_group_title = None
                    tmp_cover_page = None
                    tmp_step_group = None
                    tmp_maxstep = None
                    list_file_name = []
                    tmp_arr_status_group = []
                    tmp_arr_status_email = []
                    tmp_arr_status_group_001 = []
                    tmparr_stepstatus = []
                    arr_email_list = []
                    json_tmp = {}
                    tmp_text_status = 'Y'
                    tmp_text_status_string = 'เธญเธเธธเธกเธฑเธ•เธดเนเธฅเนเธง'
                    tmp_arr_data_sum_01 = []
                    tmp_json = tmp_query[n].__dict__
                    if '_sa_instance_state' in tmp_json:
                        del tmp_json['_sa_instance_state']
                    # print(tmp_json)
                    tmp_processid =None
                    tmp_color = None
                    data_biz = None
                    tmp_groupid = tmp_json['id']
                    tmp_sidgroup = tmp_json['sid_group']
                    tmp_updatetime = tmp_json['updatetime']
                    tmp_status = tmp_json['status']
                    tmp_group_other = tmp_json['group_other']
                    tmp_group_data_json = tmp_json['group_data_json']
                    tmp_status_group = tmp_json['status_group']
                    print('tmp_status_group',tmp_status_group)
                    tmp_email_view_group = tmp_json['email_view_group']
                    tmp_group_status = tmp_json['group_status']
                    print('tmp_group_status',tmp_group_status)
                    if tmp_group_status == None:
                        tmp_group_status = 'N'
                    tmp_calculate_fieds = tmp_json['calculate_fieds']
                    # tmp_document_type = tmp_json['document_type']
                    tmp_group_title = tmp_json['group_title']
                    tmp_tracking_group = tmp_json['tracking_group']
                    tmp_json_data = tmp_json['json_data']
                    query_document = None
                    if 'bizinfo' in tmp_json :
                        if tmp_json['bizinfo'] != None:
                            if tmp_json['bizinfo'] != '':
                                eval_biz = eval(tmp_json['bizinfo'])
                                if type(eval_biz) == dict:
                                    for x in range(len(tmp_json['bizinfo'])):
                                        tmp_biz = {}
                                        tmp_biz['id_card_num'] = eval_biz['id_card_num']
                                        tmp_biz['first_name_th'] = eval_biz['first_name_th']
                                        tmp_biz['first_name_eng'] = eval_biz['first_name_eng']
                                        tmp_biz['role_name'] = eval_biz['role_name']
                                        tmp_biz['dept_id'] = eval_biz['dept_id']
                                    data_biz = tmp_biz
                                elif type(eval_biz) == list:
                                    for x in range(len(tmp_query['bizinfo'])):
                                        tmp_biz = {}
                                        tmp_biz['id_card_num'] = eval_biz[0]['id_card_num']
                                        tmp_biz['first_name_th'] = eval_biz[0]['first_name_th']
                                        tmp_biz['first_name_eng'] = eval_biz[0]['first_name_eng']
                                        tmp_biz['role_name'] = eval_biz[0]['role_name']
                                        tmp_biz['dept_id'] = eval_biz[0]['dept_id']
                                    data_biz = tmp_biz
                            else:
                                data_biz =None
                    if 'bizinfo' in tmp_json :
                        if tmp_json['bizinfo'] != None:
                            if tmp_json['bizinfo'] != '':
                                query_document = db.session.query(paper_lessdocument_detail)\
                                    .filter(and_(paper_lessdocument_detail.documentStatus=='ACTIVE',paper_lessdocument_detail.biz_info.contains(data_biz['id_card_num'])))\
                                    .order_by(desc(paper_lessdocument_detail.documentUpdate)).first()
                            else:
                                query_document = db.session.query(paper_lessdocument_detail)\
                                    .filter(and_(paper_lessdocument_detail.documentStatus=='ACTIVE',paper_lessdocument_detail.biz_info.contains==''))\
                                    .order_by(desc(paper_lessdocument_detail.documentUpdate)).first()
                    tmpdocumentdetail = None
                    if query_document != None:
                        tmpdocumentdetail = query_document.documentJson
                        if tmpdocumentdetail != None:
                            tmpdocumentdetail = eval(tmpdocumentdetail)
                    if tmp_group_title != None:
                        tmp_group_title = eval(tmp_group_title)
                    tmpurl_html_data = None
                    tmp_html_data = None
                    if self.group_id != None and self.email_one != None :
                        tmp_maxstep = tmp_json['maxstep']
                        tmp_step_group = tmp_json['step_group']
                        tmp_step_group_detail = tmp_json['step_group_detail']
                        tmp_pdf_org = tmp_json['pdf_org']
                        tmp_pdf_sign = tmp_json['pdf_sign']
                        tmp_hashid = tmp_json['hash_id']
                        tmp_cover_page = tmp_json['cover_page']
                        tmp_html_data = tmp_json['html_data']
                        if tmp_html_data != None:
                            tmpurl_html_data = myUrl_domain + 'api/v1/html?group_id=' + str(tmp_groupid)
                        query_process = db.session.query(tb_process_request)\
                            .filter(and_(tb_process_request.group_id==str(tmp_groupid),tb_process_request.email==self.email_one))\
                            .order_by(desc(tb_process_request.datetime)).first()
                        if query_process != None:
                            tmp_json_process = query_process.__dict__
                            tmp_processid = tmp_json_process['id']
                        if tmp_maxstep != None:
                            try:                               
                                tmp_maxstep = eval(tmp_maxstep)                                
                            except Exception as e:                                
                                tmp_maxstep = str(tmp_maxstep)
                                    # tmp_step_group = tmp_step_group[0]
                                    # print(tmp_step_group)
                        if tmp_cover_page != None:
                            if tmp_cover_page != '':
                                tmp_cover_page = eval(tmp_cover_page)
                            else:
                                tmp_cover_page = None
                        if tmp_step_group_detail != None:
                            tmp_step_group_detail = eval(tmp_step_group_detail)
                        if tmp_pdf_sign != None:
                            tmp_pdf = tmp_pdf_sign
                        else:
                            tmp_pdf = tmp_pdf_org
                        jsonurl_info = None
                        if tmp_pdf != None:
                            url_downloadpdf = myUrl_domain + 'api/v1/download/group_pdf?groupid=' + tmp_hashid
                            url_viewpdf = myUrl_domain + 'api/v1/view/group_pdf?groupid=' + tmp_hashid
                            jsonurl_info = {'view_pdf':url_viewpdf,'download_pdf':url_downloadpdf}
                        list_file_name = []
                        # path_image = os.getcwd() + '/storage/image/' + self.group_id
                        path_image = path_global_1 + '/storage/image/' + self.group_id
                        try:
                            for the_file in os.listdir(path_image):
                                file_path = os.path.join(path_image, the_file)
                                # print(file_path)
                                filename_only = str(file_path).split('/')[-1]
                                url_view_image = myUrl_domain + 'api/view2/pdf_image/' + self.group_id +'/' + filename_only
                                list_file_name.append({'image_Url': url_view_image})
                        except Exception as e:
                            list_file_name = []
                        
                    if tmp_calculate_fieds != None:
                        tmp_calculate_fieds = eval(tmp_calculate_fieds)
                    status_viewGroup = False
                    print('tmp_email_view_group',tmp_email_view_group)
                    if tmp_email_view_group != None:
                        tmp_email_view_group = eval(tmp_email_view_group)
                        if len(tmp_email_view_group) != 0:
                            for z in range(len(tmp_email_view_group)):
                                if self.email_one in tmp_email_view_group[z]['email_view_group']:
                                    status_viewGroup = True
                    if tmp_group_status == 'Y':
                        tmp_text_status = 'Y'
                        tmp_text_status_string = 'เธญเธเธธเธกเธฑเธ•เธดเนเธฅเนเธง'
                    elif tmp_group_status == 'R':
                        tmp_text_status = 'R'
                        tmp_text_status_string = 'เธเธเธดเน€เธชเธเธญเธเธธเธกเธฑเธ•เธด'
                    elif tmp_group_status == 'N':
                        if tmp_status_group != None:
                            tmp_status_group = eval(tmp_status_group)
                            for z in range(len(tmp_status_group)):
                                tmpstatusgroup = tmp_status_group[z]
                                tmp_arr_status_group.append(tmpstatusgroup['status'])
                                tmp_arr_status_email.append(tmpstatusgroup['email_one'])
                        print(tmp_arr_status_group)
                        print(tmp_arr_status_email)
                        count_email = tmp_arr_status_email.count(self.email_one)
                        for g in range(len(tmp_arr_status_group)):
                            tmpstatus = tmp_arr_status_group[g]
                            tmpemailone = tmp_arr_status_email[g]
                            if type(tmpemailone) is list:
                                for h in tmpemailone:
                                    if str(self.email_one).lower() == str(h).lower().replace(' ',''):
                                        my_status = tmpstatus
                                        tmpemailone = self.email_one
                            if tmpemailone == self.email_one:
                                my_status = tmpstatus
                            index_stepnum = g - 1
                            tmpbefore_status = tmp_arr_status_group[index_stepnum]
                            tmpbefore_emailone = tmp_arr_status_email[index_stepnum] 
                            print('tmp_arr_status_group',tmp_arr_status_group)
                            print('self onemail',self.email_one)
                            if 'Reject' in tmp_arr_status_group:
                                step_now = g
                                tmparr_stepstatus.append('Reject')
                            elif tmpemailone == self.email_one and my_status == 'Incomplete_input':
                                step_now = g
                                tmparr_stepstatus.append('Wait_input')
                            elif tmpemailone == self.email_one and my_status == 'Incomplete_1':
                                step_now = g
                                tmparr_stepstatus.append('Incomplete')
                            elif tmpemailone == self.email_one and my_status == 'Incomplete':                                      
                                if self.email_one not in arr_email_list:
                                    index_step_me = g
                                    if index_step_me != 0:
                                        while index_step_me > 0:
                                            if len(tmparr_stepstatus) == 0:
                                                index_step_me = index_step_me - 1
                                                if tmp_arr_status_group[index_step_me] == 'Incomplete_1':
                                                    step_now = g
                                                    tmparr_stepstatus.append('Incomplete')
                                                elif tmp_arr_status_group[index_step_me] == 'Incomplete':
                                                    step_now = g
                                                    tmparr_stepstatus.append('Incomplete')
                                                else:
                                                    step_now = g
                                                    tmparr_stepstatus.append('Wait')
                                                arr_email_list.append(self.email_one)
                                            else:
                                                index_step_me = index_step_me - 1
                                                continue
                                    else:
                                        step_now = g
                                        tmparr_stepstatus.append('Wait')
                            elif tmpemailone == self.email_one and my_status == 'Complete':                                    
                                if self.email_one not in arr_email_list:
                                    if count_email == 1:
                                        for nz in range(g,len(tmp_arr_status_group),1):
                                            if self.email_one in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Incomplete':
                                                step_now = g
                                                tmparr_stepstatus.append('Wait')
                                            elif self.email_one not in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Incomplete':
                                                step_now = g
                                                tmparr_stepstatus.append('Progress')
                                        arr_email_list.append(self.email_one)
                                    else:                                                
                                        for nz in range(g,len(tmp_arr_status_group),1):
                                            if self.email_one not in arr_email_list:
                                                if self.email_one in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Complete':
                                                    pass                                                    
                                                if self.email_one in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Incomplete':
                                                    step_now = g
                                                    tmparr_stepstatus.append('Wait')
                                                    arr_email_list.append(self.email_one)
                                                if self.email_one not in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Incomplete':
                                                    step_now = g
                                                    tmparr_stepstatus.append('Progress')
                                                    arr_email_list.append(self.email_one)
                            tmp_arr_status_group_001.append(tmpstatus)
                        print('tmparr_stepstatus',tmparr_stepstatus)
                        if 'Reject' in tmparr_stepstatus:
                            tmp_text_status = 'R'
                            tmp_text_status_string = 'เน€เธญเธเธชเธฒเธฃเธ—เธตเนเธชเนเธเธเธทเธเนเธเนเนเธ'
                        elif 'Wait_input' in tmparr_stepstatus:
                            tmp_text_status = 'WI'
                            tmp_text_status_string = 'เธฃเธญเธเธธเธ“เธเธฃเธญเธเธเนเธญเธกเธนเธฅ'
                        elif 'V' in tmparr_stepstatus:   
                            tmp_text_status = 'V'
                            tmp_text_status_string = 'เธ”เธนเน€เธญเธเธชเธฒเธฃ'
                        elif 'Progress' in tmparr_stepstatus and 'Wait' in tmparr_stepstatus:
                            tmp_text_status = 'Z'
                            tmp_text_status_string = 'เธญเธขเธนเนเนเธเธเนเธงเธเธ”เธณเน€เธเธดเธเธเธฒเธฃ'
                        elif 'Wait' in tmparr_stepstatus:
                            tmp_text_status = 'W'
                            tmp_text_status_string = 'เธฃเธญเธเธธเธ“เธญเธเธธเธกเธฑเธ•เธด'
                        elif 'Incomplete' in tmparr_stepstatus:
                            tmp_text_status = 'Z'
                            tmp_text_status_string = 'เธญเธขเธนเนเนเธเธเนเธงเธเธ”เธณเน€เธเธดเธเธเธฒเธฃ'
                        elif 'Progress' in tmparr_stepstatus:
                            tmp_text_status = 'N'
                            tmp_text_status_string = 'เธเธณเธฅเธฑเธเธ”เธณเน€เธเธดเธเธเธฒเธฃ'                    
                        elif tmparr_stepstatus.count('Incomplete') >= 2:
                            tmp_text_status = 'Z'
                            tmp_text_status_string = 'เธญเธขเธนเนเนเธเธเนเธงเธเธ”เธณเน€เธเธดเธเธเธฒเธฃ'
                        elif 'Incomplete' in tmparr_stepstatus and 'Complete' in tmparr_stepstatus:
                            tmp_text_status = 'N'
                            tmp_text_status_string = 'เธเธณเธฅเธฑเธเธ”เธณเน€เธเธดเธเธเธฒเธฃ'
                        else:
                            tmp_text_status_string = 'เธญเธเธธเธกเธฑเธ•เธดเนเธฅเนเธง'
                    if tmp_sidgroup != None:
                        tmp_sidgroup = eval(tmp_sidgroup)
                    if tmp_updatetime != None:
                        tmp_updatetime = tmp_updatetime
                        tmp_datetimeString = str(tmp_updatetime).split('+')[0]
                    if tmp_group_other != None:
                        tmp_group_other = eval(tmp_group_other)
                        for i in range(len(tmp_group_other)):
                            if 'color' in tmp_group_other[i]:
                                tmp_color = tmp_group_other[i]['color']
                    if tmp_group_data_json != None:
                        tmp_group_data_json = eval(tmp_group_data_json)
                        for o in range(len(tmp_group_data_json)):
                            if 'data_sum' in tmp_group_data_json[o]:
                                tmp_data_sum = tmp_group_data_json[o]['data_sum']
                                for z in range(len(tmp_data_sum)):
                                    if 'name' in tmp_data_sum[z]:
                                        tmp_key = str(tmp_data_sum[z]['name']).replace(' ','')
                                        tmp_value = (tmp_data_sum[z]['value'])
                                        json_tmp[tmp_key] = tmp_value
                                        # arr_data_sum.append({tmp_key:tmp_value})
                                tmp_arr_data_sum_01.append(json_tmp)
                            else:
                                if len(tmp_group_data_json[o]) != 0:
                                    tmp_group_data_json[o][0]['No_keyno_ppl'] = (o + 1)
                                    tmp_arr_data_sum_01.append(tmp_group_data_json[o][0])
                    if tmp_json_data != None:
                        if tmp_json_data != 'None':
                            tmp_arr_data_sum_01 = eval(tmp_json_data)
                    dateTime_String = tmp_updatetime
                    th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                    ts = int(time.time())
                    date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                    year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                    datetime_display = int(dateTime_String.timestamp())
                    date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                    yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                    time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                    old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                    if date_time_today == date_time_db:
                        date_display_show = time_show_db
                    else:
                        if year_today == yar_db:
                            date_display_show = convert_datetime_TH_2_display(datetime_display)
                        else:
                            date_display_show = old_year      
                    print(tmp_arr_status_email)              
                    if tmp_step_group != None:
                        if tmp_step_group != '':
                            tmp_step_group = eval(tmp_step_group)
                            if len(tmp_step_group) != 0:
                                for j in range(len(tmp_step_group)):
                                    if 'step_num' in tmp_step_group[j]: 
                                        if len(tmp_arr_status_email) != 0:
                                            for hy in range(len(tmp_arr_status_email[step_now])):
                                                if tmp_arr_status_email[step_now][hy] == self.email_one:                        
                                                    tmparr_stepnum.append(tmp_step_group[j]['step_num'][step_now])
                    if len(tmp_sidgroup) > 0:
                        if tmp_group_title != None:
                            if 'cover_column' in tmp_group_title:
                                if tmp_group_title['cover_column']:
                                    for x in range(len(tmp_group_title['cover_column'])):
                                        if 'display_key' in tmp_group_title['cover_column'][x]:
                                            if tmp_group_title['cover_column'][x]['display_key'] == '15_Detail+16_Detail2+18_Detail3':
                                                tmp_group_title['cover_column'][x]['display_key'] = 'Detail+Detail2+Detail3'
                                                stringspil = str(tmp_group_title['cover_column'][x]['display_key']).split('+')
                                                for ju in range(len(stringspil)):
                                                    pass
                        result_sum = sum_doc_name_group_v2(eval(tmp_json['doctype_group']))
                        if result_sum['result'] == 'ER':
                            result_sum['messageText'] = []
                        result_sum_biz = sum_biz_info_group(eval(tmp_json['bizinfo_group']))
                        tmp_arrjson.append({
                            'status':tmp_status,
                            'group_id':tmp_groupid,
                            'sid_group':tmp_sidgroup,
                            'color_group':tmp_color,
                            'datetime':int(tmp_updatetime.timestamp()),
                            'datetime_string':tmp_datetimeString,
                            'datetime_display':date_display_show,
                            'datetime_thai':th_dateTime_2,
                            'document_count':len(tmp_sidgroup),
                            'document_data':tmp_arr_data_sum_01,
                            'status_group':tmp_text_status,
                            'status_group_string':tmp_text_status_string,
                            'viewgroup':status_viewGroup,
                            'calculate_fieds':tmp_calculate_fieds,
                            'image_display':list_file_name,
                            'sign_position':tmp_step_group_detail,
                            'pdf_info':tmp_pdf,
                            'url_info':jsonurl_info,
                            # 'document_type':tmp_document_type,
                            'group_title':tmp_group_title,
                            'cover_page':tmp_cover_page,
                            'biz_info':data_biz,
                            'document_type_detail':tmpdocumentdetail,
                            'step_group_document':tmparr_stepnum,
                            'max_step':tmp_maxstep,
                            'process_id':tmp_processid,
                            'html_data':tmp_html_data,
                            'html_url':tmpurl_html_data,
                            'tracking_id':tmp_tracking_group,
                            'data_group': eval(tmp_json['data_group']),
                            'doctype_group': eval(tmp_json['doctype_group']),
                            'bizinfo_group': eval(tmp_json['bizinfo_group']),
                            'total_document_type':result_sum['messageText'],
                            'total_biz':result_sum_biz['messageText'],
                            'group_name':tmp_json['group_name'],
                            'sum_documentType': len(result_sum['messageText'])
                        })
                return {'result':'OK','messageText':tmp_arrjson}
            else:
                return {'result':'ER','messageER':'data not found'}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(e)}


    def select_querydocument_group_sum_v2(self,email_one,tax_id,keyword):
        self.email_one = email_one
        self.tax_id = tax_id
        self.keyword = keyword
        Complete_Approve = 0
        Incomplete_Pendding = 0
        Reject = 0
        Wait = 0
        status_Z = 0
        tmp_arrjson = []
        txtQuery = ''
        tmp_query = []
        count = 0
        try:
            # queryString = '''"status" = 'ACTIVE' AND "sid_group" != '[]' '''
            # if self.email_one != None :
            #     queryString += '''AND ("email_view_group" LIKE '%'''+ self.email_one +'''%' OR status_group LIKE '%'''+ self.email_one +'''%') '''
            # if self.tax_id != None and self.tax_id != '' :
            #     queryString += '''AND bizinfo LIKE '%'''+ self.tax_id +'''%' '''
            # else:
            #     queryString += '''AND (bizinfo = '' OR bizinfo IS NULL)'''       
            # if self.keyword == None:
            #     query_sql = '''SELECT status,status_group,group_status FROM "tb_group_document_2" WHERE '''+queryString+''' ORDER BY "updatetime" DESC'''
            # else:
            #     try:      
            #         dats = datetime.datetime.strptime(self.keyword, '%Y-%m-%d')
            #         datetime1 = dats.strftime('%Y-%m-%d 00:00:00')
            #         datetime2 = dats.strftime('%Y-%m-%d 23:59:59')       
            #         query_sql = "SELECT * FROM tb_group_document_2 WHERE "+ queryString +" AND updatetime >= '"+datetime1+"' AND updatetime <= '"+datetime2+"' ORDER BY updatetime DESC"                     
            #     except ValueError:
            #         print('key not datetime') 
            #         if self.keyword == '':
            #             query_sql = '''SELECT status,status_group,group_status FROM "tb_group_document_2" WHERE '''+queryString+''' ORDER BY "updatetime" DESC'''
            #         else:   
            #             query_sql = '''SELECT status,status_group,group_status FROM "tb_group_document_2" WHERE '''+queryString+''' AND (json_data LIKE '%'''+ self.keyword +'''%' OR group_data_json LIKE '%''' + self.keyword + '''%') ORDER BY "updatetime" DESC'''         
            
            # query_sql_count_SUM = '''SELECT COUNT(id) FROM "tb_group_document_2" WHERE '''+queryString+''' '''
            # # queryString += ''' AND group_status= 'N' '''
            # query_sql_count_N = '''SELECT status,status_group,group_status,email_view_group FROM "tb_group_document_2" WHERE '''+queryString + ''' AND group_status= 'N' ''' +''' '''
            # # queryString += ''' AND group_status= 'Y' '''
            # query_sql_count_Y = '''SELECT COUNT(id) FROM "tb_group_document_2" WHERE '''+queryString+ ''' AND group_status= 'Y' ''' + ''' '''
            queryString = '''"status" = 'ACTIVE' AND "sid_group" != '[]' '''
            if self.email_one != None :
                queryString += '''AND ("email_view_group" LIKE '%'''+ self.email_one +'''%' OR status_group LIKE '%'''+ self.email_one +'''%') '''
            if self.tax_id != None and self.tax_id != '' :
                queryString += '''AND bizinfo LIKE '%'''+ self.tax_id +'''%' '''
            else:
                queryString += '''AND (bizinfo = '' OR bizinfo IS NULL)'''       
            if self.keyword == None:
                query_sql = '''SELECT status,status_group,group_status FROM "tb_group_document_2" WHERE '''+queryString+''' ORDER BY "updatetime" DESC'''
            else:
                try:      
                    dats = datetime.datetime.strptime(self.keyword, '%Y-%m-%d')
                    datetime1 = dats.strftime('%Y-%m-%d 00:00:00')
                    datetime2 = dats.strftime('%Y-%m-%d 23:59:59')       
                    query_sql = "SELECT * FROM tb_group_document_2 WHERE "+ queryString +" AND updatetime >= '"+datetime1+"' AND updatetime <= '"+datetime2+"' ORDER BY updatetime DESC"                     
                except ValueError:
                    print('key not datetime') 
                    if self.keyword == '':
                        query_sql = '''SELECT status,status_group,group_status FROM "tb_group_document_2" WHERE '''+queryString+''' ORDER BY "updatetime" DESC'''
                    else:   
                        query_sql = '''SELECT status,status_group,group_status FROM "tb_group_document_2" WHERE '''+queryString+''' AND (doctype_group LIKE '%'''+ self.keyword +'''%'  or group_name LIKE '%'''+ self.keyword +'''%') ORDER BY "updatetime" DESC'''  
            with engine.connect() as connection:
                result_select = connection.execute(text(query_sql))
                tmp_query = [dict(row) for row in result_select]
                connection.close()
            # with engine.connect() as connection:
            #     result_select = connection.execute(text(query_sql_count_Y))
            #     tmp_query_count_Y = [dict(row) for row in result_select]
            #     # print(tmp_query)
            # with engine.connect() as connection:
            #     # print(query_sql_count_SUM)
            #     result_select = connection.execute(text(query_sql_count_SUM))
            #     tmp_query_SUM = [dict(row) for row in result_select]
            # with engine.connect() as connection:
            #     result_select = connection.execute(text(query_sql_count_N))
            #     tmp_query = [dict(row) for row in result_select]
            # print(len(tmp_query_SUM),len(tmp_query_count_Y))
            Incomplete_Pendding = 0
            Wait = 0
            count = 0
            if len(tmp_query) != 0:
                step_beforeMe = []
                for n in range(len(tmp_query)):
                    tmp_arr_status_group = []
                    tmp_arr_status_email = []
                    tmp_arr_status_group_001 = []
                    tmparr_stepstatus = []
                    arr_email_list = []
                    tmp_text_status = 'Y'
                    tmp_text_status_string = 'อนุมัติแล้ว'  
                    tmp_json = tmp_query[n]
                    tmp_status = tmp_json['status']
                    tmp_status_group = tmp_json['status_group']
                    tmp_group_status = tmp_json['group_status']
                    if tmp_group_status == None:
                        tmp_group_status = 'N'  

                    if tmp_group_status == 'Y':
                        tmp_text_status = 'Y'
                        tmp_text_status_string = 'อนุมัติแล้ว'
                        Complete_Approve += 1
                    elif tmp_group_status == 'R':
                        tmp_text_status = 'R'
                        tmp_text_status_string = 'ปฎิเสธอนุมัติ'
                    elif tmp_group_status == 'N':
                        if tmp_status_group != None:
                            tmp_status_group = eval(tmp_status_group)
                            for z in range(len(tmp_status_group)):
                                tmpstatusgroup = tmp_status_group[z]
                                tmp_arr_status_group.append(tmpstatusgroup['status'])
                                tmp_arr_status_email.append(tmpstatusgroup['email_one'])
                        # print(tmp_arr_status_group)
                        # print(tmp_arr_status_email)
                        count_email = tmp_arr_status_email.count(self.email_one)
                        for g in range(len(tmp_arr_status_group)):
                            tmpstatus = tmp_arr_status_group[g]
                            tmpemailone = tmp_arr_status_email[g]
                            if type(tmpemailone) is list:
                                for h in tmpemailone:
                                    if str(self.email_one).lower() == str(h).lower().replace(' ',''):
                                        my_status = tmpstatus
                                        tmpemailone = self.email_one
                            if tmpemailone == self.email_one:
                                my_status = tmpstatus
                            index_stepnum = g - 1
                            tmpbefore_status = tmp_arr_status_group[index_stepnum]
                            tmpbefore_emailone = tmp_arr_status_email[index_stepnum] 
                            if 'Reject' in tmp_arr_status_group:
                                step_now = g
                                tmparr_stepstatus.append('Reject')
                            elif tmpemailone == self.email_one and my_status == 'Incomplete_input':
                                step_now = g
                                tmparr_stepstatus.append('Wait_input')
                            elif tmpemailone == self.email_one and my_status == 'Incomplete_1':
                                step_now = g
                                tmparr_stepstatus.append('Incomplete')
                            elif tmpemailone == self.email_one and my_status == 'Incomplete':                                      
                                if self.email_one not in arr_email_list:
                                    index_step_me = g
                                    if index_step_me != 0:
                                        while index_step_me > 0:
                                            if len(tmparr_stepstatus) == 0:
                                                index_step_me = index_step_me - 1
                                                if tmp_arr_status_group[index_step_me] == 'Incomplete_1':
                                                    step_now = g
                                                    tmparr_stepstatus.append('Incomplete')
                                                elif tmp_arr_status_group[index_step_me] == 'Incomplete':
                                                    step_now = g
                                                    tmparr_stepstatus.append('Incomplete')
                                                    for kkk in range(len(tmp_arr_status_group)-1):
                                                        step_beforeMe.append(tmp_arr_status_group[kkk])
                                                else:
                                                    step_now = g
                                                    tmparr_stepstatus.append('Wait')
                                                arr_email_list.append(self.email_one)
                                            else:
                                                index_step_me = index_step_me - 1
                                                continue
                                    else:
                                        step_now = g
                                        tmparr_stepstatus.append('Wait')
                            elif tmpemailone == self.email_one and my_status == 'Complete':                                    
                                if self.email_one not in arr_email_list:
                                    if count_email == 1:
                                        for nz in range(g,len(tmp_arr_status_group),1):
                                            if self.email_one in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Incomplete':
                                                step_now = g
                                                tmparr_stepstatus.append('Wait')
                                            elif self.email_one not in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Incomplete':
                                                step_now = g
                                                tmparr_stepstatus.append('Progress')
                                        arr_email_list.append(self.email_one)
                                    else:                                                
                                        for nz in range(g,len(tmp_arr_status_group),1):
                                            if self.email_one not in arr_email_list:
                                                if self.email_one in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Complete':
                                                    pass                                                    
                                                if self.email_one in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Incomplete':
                                                    step_now = g
                                                    tmparr_stepstatus.append('Wait')
                                                    arr_email_list.append(self.email_one)
                                                if self.email_one not in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Incomplete':
                                                    step_now = g
                                                    tmparr_stepstatus.append('Progress')
                                                    arr_email_list.append(self.email_one)
                            tmp_arr_status_group_001.append(tmpstatus)

                        if 'Reject' in tmparr_stepstatus:
                            tmp_text_status = 'R'
                            tmp_text_status_string = 'เอกสารที่ส่งคืนแก้ไข'
                            Reject += 1
                        elif 'Wait_input' in tmparr_stepstatus:
                            tmp_text_status = 'WI'
                            tmp_text_status_string = 'รอคุณกรอกข้อมูล'
                        elif 'V' in tmparr_stepstatus:   
                            tmp_text_status = 'V'
                            tmp_text_status_string = 'ดูเอกสาร'
                        elif 'Progress' in tmparr_stepstatus and 'Wait' in tmparr_stepstatus:
                            tmp_text_status = 'Z'
                            tmp_text_status_string = 'อยู่ในช่วงดำเนินการ'
                            status_Z += 1
                            Incomplete_Pendding += 1
                        elif 'Wait' in tmparr_stepstatus:
                            tmp_text_status = 'W'
                            tmp_text_status_string = 'รอคุณอนุมัติ'
                            Wait += 1
                        elif 'Incomplete' in tmparr_stepstatus:
                            tmp_text_status = 'Z'
                            tmp_text_status_string = 'อยู่ในช่วงดำเนินการ'
                            status_Z += 1
                            # Incomplete_Pendding += 1
                            if 'Complete' in step_beforeMe:
                                Incomplete_Pendding += 1
                        elif 'Progress' in tmparr_stepstatus:
                            tmp_text_status = 'N'
                            tmp_text_status_string = 'กำลังดำเนินการ'   
                            Incomplete_Pendding += 1
                        elif tmparr_stepstatus.count('Incomplete') >= 2:
                            tmp_text_status = 'Z'
                            tmp_text_status_string = 'อยู่ในช่วงดำเนินการ'
                            status_Z += 1
                            Incomplete_Pendding += 1
                        elif 'Incomplete' in tmparr_stepstatus and 'Complete' in tmparr_stepstatus:
                            tmp_text_status = 'N'
                            tmp_text_status_string = 'กำลังดำเนินการ'
                            Incomplete_Pendding += 1
                        else:
                            # tmp_text_status = 'Y'
                            # tmp_text_status_string = 'อนุมัติแล้ว'
                            # Complete_Approve += 1
                            tmp_text_status = 'N'
                            tmp_text_status_string = 'กำลังดำเนินการ'
                            Incomplete_Pendding += 1
                
                sum_document_all = Complete_Approve + Incomplete_Pendding + Wait
                tmp_arrjson.append({
                    "sum_group_document_search": sum_document_all,
                    "Document_Status_Details": {
                        "Complete_Approve": Complete_Approve, 
                        "Incomplete_Pendding": Incomplete_Pendding, 
                        "Wait": Wait, 
                    }
                })
                return {'result':'OK','messageText':tmp_arrjson}  
            
            else:
                return {'result':'ER','messageER':'data not found'}          

        except Exception as e:
            print(str(e))
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(e)}
        finally:
            connection.close()


    def select_step_code_togroup_v2(self,stepcode):
        self.stepcode = stepcode
        arr_sidcode = []
        arr_stepcode = []
        try:
            for n in range(len(self.stepcode)):
                arr_tmpsidcode = []
                tmp_stepcode = self.stepcode[n]
                tmp_query = paper_lesstrack.query.filter(paper_lesstrack.step_Code==tmp_stepcode).all()
                if len(tmp_query) != 0:
                    for z in range(len(tmp_query)):
                        tmp_json = tmp_query[z].__dict__
                        if tmp_json['step_data_sid'] != None:
                            arr_tmpsidcode.append(tmp_json['step_data_sid'])
                arr_sidcode.append(arr_tmpsidcode)
                arr_stepcode.append(tmp_stepcode)
                print('arr_sidcode',arr_sidcode)
                print('arr_stepcode',arr_stepcode)
            return {'result':'OK','messageText':{'data':arr_sidcode,'stepcode':arr_stepcode}}
                # else:
                #     return {'result':'ER','messageText': None,'messageER':'data not found'}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}
    
    def select_admin_count_viewdoc_v2(self,tax_id,document_type,level_admin,typeShow):
        self.tax_id = tax_id
        self.document_type = document_type
        self.level_admin = int(level_admin)
        self.typeShow = typeShow
        list_json = []
        list_count_user = []
        list_start_time = []
        countDoc_all = 0
        count_Doc_active = 0
        count_Doc_reject = 0
        count_Doc_delete = 0
        count_Doc_inactive = 0
        tmp_json_1 = {}
        start_last = 0
        startTime_list = []
        endTime_list = []
        list_user = []
        tmp_json = {}
        query_count_all = None        
                
        try:          
            now = datetime.datetime.now()
            if self.typeShow == 'month':
                count_1 = 11
                count_2 = 12
                day = (str(now).split('-')[2]).split(' ')[0]
                day_2 = int(day) - 1
                flashback = timedelta(days=day_2)
                end_time = (now).replace(hour=23, minute=59, second=59, microsecond=00)
                start_time =  (now-flashback).replace(hour=0, minute=0, second=0, microsecond=0)
            elif self.typeShow == 'week':
                count_1 = 3
                count_2 = 4
                day = (str(now).split('-')[2]).split(' ')[0]
                year = str(now).split('-')[0]
                month = str(now).split('-')[1]
                day_of_week = calendar.weekday(int(year),int(month),int(day))
                flashback = timedelta(days=day_of_week)
                end_time = (now).replace(hour=23, minute=59, second=59, microsecond=00)
                start_time =  (now-flashback).replace(hour=0, minute=0, second=0, microsecond=0)
            elif self.typeShow == 'day':
                count_1 = 29 
                count_2 = 30
                end_time = now.replace(hour=23, minute=59, second=59, microsecond=00)
                start_time = now.replace(hour=0, minute=0, second=0, microsecond=0)
            elif self.typeShow == 'hour':
                hour = int((str(now).split(' ')[1]).split(':')[0])
                count_1 = hour
                flashback = timedelta(hours = 1)
                end_time = now.replace(microsecond = 00)
                start_time =  (now-flashback).replace(hour=hour, minute=0, second=0, microsecond=00)
            
            startTime_list.append(start_time)
            endTime_list.append(end_time)
            for x in range(count_1):
                if self.typeShow == 'month':
                    list_start_end = find_startTime_endTime(start_time)
                elif self.typeShow == 'week':
                    list_start_end = find_startTime_endTime_week(start_time)
                elif self.typeShow == 'day':
                    list_start_end = find_startTime_endTime_day(start_time)
                elif self.typeShow == 'hour': 
                    list_start_end = find_startTime_endTime_hour(start_time)               
                start_time1 = list_start_end[0]
                end_time1 = list_start_end[1]
                startTime_list.append(start_time1)
                endTime_list.append(end_time1)
                if x == count_1 - 1:
                    start_last = start_time1
                start_time = start_time1
            
            if self.tax_id == '' and self.document_type == '' : # tax_id = ค่าว่าง , document_type = ค่าว่าง 
                # เทส query
                query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.sender_name,
                    view_document.send_time,
                    view_document.update_time,
                    view_document.biz_info,
                    view_document.documentType,
                    view_document.status
                ).filter(and_(view_document.update_time >= start_last,view_document.update_time <= end_time)).all()
                # เทส query 
                    
            elif self.tax_id != '' and self.document_type == '': # tax_id = มีค่า , document_type = ค่าว่าง
                if tax_id == 'citizen':
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status
                    ).filter(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
                    .filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                    # เทส query 
                   
                elif len(self.tax_id) != 13 :
                    return {'result':'ER','messageText':'error because tax_id incorret'} 
                
                else :
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status
                    ).filter(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
                    .filter(view_document.biz_info.contains(self.tax_id)).all()
                    # เทส query  
            
            elif self.tax_id == '' and self.document_type != '': # tax_id = ค่าว่าง , document_type = มีค่า
                # เทส query
                query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.sender_name,
                    view_document.send_time,
                    view_document.update_time,
                    view_document.biz_info,
                    view_document.documentType,
                    view_document.status
                ).filter(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
                .filter(view_document.documentType == self.document_type).all()
                # เทส query 
            
            elif self.tax_id != '' and self.document_type != '': # tax_id = มีค่า , document_type = มีค่า
                if self.tax_id == 'citizen':
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status
                    ).filter(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
                    .filter(view_document.documentType == self.document_type).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                    # เทส query 

                elif len(self.tax_id) != 13 :
                    return {'result':'ER','messageText':'error because tax_id incorret'} 
                
                else:
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status
                    ).filter(and_(view_document.update_time >= start_last,view_document.update_time <= end_time))\
                    .filter(view_document.documentType == self.document_type).filter(view_document.biz_info.contains(self.tax_id)).all()
                    # เทส query 
          
            list2 = []
            print(len(query_count_all))
            for x in range(len(query_count_all)):
                tmp_json = {
                    'sender_email': query_count_all[x].sender_email,
                    'sender_name': query_count_all[x].sender_email,
                    'updatetime':int(datetime.datetime.timestamp(query_count_all[x].update_time)),
                    'biz_info':query_count_all[x].biz_info,
                    'documentType':query_count_all[x].documentType,
                    'status':query_count_all[x].status,
                }
                list2.append(tmp_json)
                tmp_json = {}
            if self.typeShow == 'hour':
                count_2 = count_1 + 1
            if len(query_count_all) == 0 :
                for x in range(count_2):
                    count_all = 0
                    count_active = 0
                    count_reject = 0
                    count_delete = 0
                    count_inactive = 0
                    list_user2 = []
                    timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                    timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                    tmp_json['all_documents'] = count_all
                    tmp_json['documents_active'] = count_active
                    tmp_json['count_user'] = len(list_user2)
                    tmp_json['documents_reject'] = count_reject
                    tmp_json['documents_delete'] = count_delete
                    tmp_json['documents_inactive'] = count_inactive
                    tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                    tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                    tmp_json['timestamp_start'] = timestamp_start
                    tmp_json['timestamp_end'] = timestamp_end
                    list_json.append(tmp_json)
                    tmp_json = {}

            else:
                for x in range(count_2):
                    count_all = 0
                    count_active = 0
                    count_reject = 0
                    count_delete = 0
                    count_inactive = 0
                    list_user2 = []
                    for y in range(len(list2)):
                        timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                        timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                        user = list2[y]['sender_email']
                        if int(list2[y]['updatetime']) >= int(timestamp_start) and list2[y]['updatetime'] <= int(timestamp_end):
                            count_all = count_all + 1
                            if user not in list_user2:
                                list_user2.append(user)
                            if user not in list_count_user:
                                list_count_user.append(user)
                        if int(list2[y]['updatetime']) >= int(timestamp_start) and list2[y]['updatetime'] <= int(timestamp_end) and list2[y]['status'] == 'ACTIVE':
                            count_active = count_active + 1
                        if int(list2[y]['updatetime']) >= int(timestamp_start) and list2[y]['updatetime'] <= int(timestamp_end) and list2[y]['status'] == 'REJECT':
                            count_reject = count_reject + 1
                        if int(list2[y]['updatetime']) >= int(timestamp_start) and list2[y]['updatetime'] <= int(timestamp_end) and list2[y]['status'] == 'DELETE':
                            count_delete = count_delete + 1
                        if int(list2[y]['updatetime']) >= int(timestamp_start) and list2[y]['updatetime'] <= int(timestamp_end) and list2[y]['status'] == 'INACTIVE':
                            count_inactive = count_inactive + 1
                        if x == 0 and list2[y]['status'] == 'ACTIVE':
                            count_Doc_active += 1
                        if x == 0 and list2[y]['status'] == 'REJECT':
                            count_Doc_reject += 1
                        if x == 0 and list2[y]['status'] == 'DELETE':
                            count_Doc_delete += 1
                        if x == 0 and list2[y]['status'] == 'INACTIVE':
                            count_Doc_inactive += 1

                    tmp_json['all_documents'] = count_all
                    tmp_json['count_user'] = len(list_user2)
                    tmp_json['documents_active'] = count_active                    
                    tmp_json['documents_reject'] = count_reject
                    tmp_json['documents_delete'] = count_delete
                    tmp_json['documents_inactive'] = count_inactive
                    tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                    tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                    tmp_json['timestamp_start'] = timestamp_start
                    tmp_json['timestamp_end'] = timestamp_end
                    list_json.append(tmp_json)
                    tmp_json = {}

            list_json2 = []
            tmp_json['documents_all'] = len(list2)
            tmp_json['documents_all_active'] = count_Doc_active
            tmp_json['documents_all_reject'] = count_Doc_reject
            tmp_json['documents_all_delete'] = count_Doc_delete
            tmp_json['documents_all_inactive'] = count_Doc_inactive
            if self.typeShow == 'month':
                tmp_json['countUser_of_month'] = len(list_count_user)
                list_json2.append(tmp_json)
                tmp_json_1['documents_past_month'] = list_json
                tmp_json_1['documents_all_month'] = list_json2
            elif self.typeShow == 'week':
                tmp_json['countUser_of_week'] = len(list_count_user)
                list_json2.append(tmp_json)
                tmp_json_1['documents_past_week'] = list_json
                tmp_json_1['documents_all_week'] = list_json2
            elif self.typeShow == 'day':
                tmp_json['countUser_of_day'] = len(list_count_user)
                list_json2.append(tmp_json)
                tmp_json_1['documents_past_day'] = list_json
                tmp_json_1['documents_all_day'] = list_json2
            elif self.typeShow == 'hour':
                tmp_json['countUser_of_hour'] = len(list_count_user)
                list_json2.append(tmp_json)
                tmp_json_1['documents_past_hour'] = list_json
                tmp_json_1['documents_all_hour'] = list_json2                
            
            return {'result':'OK','messageText':tmp_json_1}
  
        except Exception as e:
           return {'result':'ER','messageText':'notfound data' + str(e)}

    def select_querydocument_group_search_sum_v2(self,email_one,document_type,tax_id,keyword,timestamps):
        self.email_one = email_one
        self.document_type = document_type
        self.tax_id = tax_id
        self.keyword = keyword
        self.timestamps = timestamps 
        Complete_Approve = 0
        Incomplete_Pendding = 0
        Reject = 0
        Wait = 0
        status_Z = 0
        tmp_arrjson = []
        txtQuery = ''
        tmp_query = []
        count = 0
        try:
            queryString = '''"status" = 'ACTIVE' AND "sid_group" != '[]' '''
            if self.email_one != None :
                queryString += '''AND ("email_view_group" LIKE '%'''+ self.email_one +'''%' OR status_group LIKE '%'''+ self.email_one +'''%') '''
            if self.tax_id != None and self.tax_id != '' :
                queryString += '''AND bizinfo LIKE '%'''+ self.tax_id +'''%' '''
            else:
                queryString += '''AND (bizinfo = '' OR bizinfo IS NULL)'''
            if self.document_type != None :
                queryString += "AND document_type = '"+ str(self.document_type) +"'"   
            if self.timestamps != None:
                datetime_str = datetime.datetime.fromtimestamp(int(self.timestamps)).strftime('%Y-%m-%d %H:%M:%S')
                queryString += "AND updatetime >= '"+datetime_str+"'"       
            if self.keyword == None:
                query_sql = '''SELECT status,status_group,group_status,document_type FROM "tb_group_document" WHERE '''+queryString+''' ORDER BY "createtime" DESC'''
            else:
                try:      
                    dats = datetime.datetime.strptime(self.keyword, '%Y-%m-%d')
                    datetime1 = dats.strftime('%Y-%m-%d 00:00:00')
                    datetime2 = dats.strftime('%Y-%m-%d 23:59:59')       
                    query_sql = "SELECT * FROM tb_group_document WHERE "+ queryString +" AND createtime >= '"+datetime1+"' AND createtime <= '"+datetime2+"' ORDER BY createtime DESC"                     
                except ValueError:
                    print('key not datetime') 
                    if self.keyword == '':
                        query_sql = '''SELECT status,status_group,group_status,document_type FROM "tb_group_document" WHERE '''+queryString+''' ORDER BY "createtime" DESC'''
                    else:   
                        query_sql = '''SELECT status,status_group,group_status,document_type FROM "tb_group_document" WHERE '''+queryString+''' AND json_data LIKE '%'''+ self.keyword +'''%' ORDER BY "createtime" DESC'''         
            print(query_sql)
            with engine.connect() as connection:
                result_select = connection.execute(text(query_sql))
                tmp_query = [dict(row) for row in result_select]
                connection.close()

            if len(tmp_query) != 0:
                print(len(tmp_query))
                for n in range(len(tmp_query)):
                    tmp_arr_status_group = []
                    tmp_arr_status_email = []
                    tmp_arr_status_group_001 = []
                    tmparr_stepstatus = []
                    arr_email_list = []
                    tmp_text_status = 'Y'
                    tmp_text_status_string = 'อนุมัติแล้ว'  
                    tmp_json = tmp_query[n]
                    tmp_status = tmp_json['status']
                    tmp_status_group = tmp_json['status_group']
                    tmp_group_status = tmp_json['group_status']
                    tmp_document_type = tmp_json['document_type']
                    if tmp_group_status == None:
                        tmp_group_status = 'N' 
                    if tmp_group_status == 'Y':
                        tmp_text_status = 'Y'
                        tmp_text_status_string = 'อนุมัติแล้ว'
                        Complete_Approve += 1
                    elif tmp_group_status == 'R':
                        tmp_text_status = 'R'
                        tmp_text_status_string = 'ปฎิเสธอนุมัติ'
                    elif tmp_group_status == 'N':
                        if tmp_status_group != None:
                            tmp_status_group = eval(tmp_status_group)
                            for z in range(len(tmp_status_group)):
                                tmpstatusgroup = tmp_status_group[z]
                                tmp_arr_status_group.append(tmpstatusgroup['status'])
                                tmp_arr_status_email.append(tmpstatusgroup['email_one'])
                        # print(tmp_arr_status_group)
                        # print(tmp_arr_status_email)
                        count_email = tmp_arr_status_email.count(self.email_one)
                        for g in range(len(tmp_arr_status_group)):
                            tmpstatus = tmp_arr_status_group[g]
                            tmpemailone = tmp_arr_status_email[g]
                            if type(tmpemailone) is list:
                                for h in tmpemailone:
                                    if str(self.email_one).lower() == str(h).lower().replace(' ',''):
                                        my_status = tmpstatus
                                        tmpemailone = self.email_one
                            if tmpemailone == self.email_one:
                                my_status = tmpstatus
                            index_stepnum = g - 1
                            tmpbefore_status = tmp_arr_status_group[index_stepnum]
                            tmpbefore_emailone = tmp_arr_status_email[index_stepnum] 
                            if 'Reject' in tmp_arr_status_group:
                                step_now = g
                                tmparr_stepstatus.append('Reject')
                            elif tmpemailone == self.email_one and my_status == 'Incomplete_input':
                                step_now = g
                                tmparr_stepstatus.append('Wait_input')
                            elif tmpemailone == self.email_one and my_status == 'Incomplete_1':
                                step_now = g
                                tmparr_stepstatus.append('Incomplete')
                            elif tmpemailone == self.email_one and my_status == 'Incomplete':                                      
                                if self.email_one not in arr_email_list:
                                    index_step_me = g
                                    if index_step_me != 0:
                                        while index_step_me > 0:
                                            if len(tmparr_stepstatus) == 0:
                                                index_step_me = index_step_me - 1
                                                if tmp_arr_status_group[index_step_me] == 'Incomplete_1':
                                                    step_now = g
                                                    tmparr_stepstatus.append('Incomplete')
                                                elif tmp_arr_status_group[index_step_me] == 'Incomplete':
                                                    step_now = g
                                                    tmparr_stepstatus.append('Incomplete')
                                                else:
                                                    step_now = g
                                                    tmparr_stepstatus.append('Wait')
                                                arr_email_list.append(self.email_one)
                                            else:
                                                index_step_me = index_step_me - 1
                                                continue
                                    else:
                                        step_now = g
                                        tmparr_stepstatus.append('Wait')
                            elif tmpemailone == self.email_one and my_status == 'Complete':                                    
                                if self.email_one not in arr_email_list:
                                    if count_email == 1:
                                        for nz in range(g,len(tmp_arr_status_group),1):
                                            if self.email_one in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Incomplete':
                                                step_now = g
                                                tmparr_stepstatus.append('Wait')
                                            elif self.email_one not in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Incomplete':
                                                step_now = g
                                                tmparr_stepstatus.append('Progress')
                                        arr_email_list.append(self.email_one)
                                    else:                                                
                                        for nz in range(g,len(tmp_arr_status_group),1):
                                            if self.email_one not in arr_email_list:
                                                if self.email_one in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Complete':
                                                    pass                                                    
                                                if self.email_one in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Incomplete':
                                                    step_now = g
                                                    tmparr_stepstatus.append('Wait')
                                                    arr_email_list.append(self.email_one)
                                                if self.email_one not in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Incomplete':
                                                    step_now = g
                                                    tmparr_stepstatus.append('Progress')
                                                    arr_email_list.append(self.email_one)
                            tmp_arr_status_group_001.append(tmpstatus)
                        print(tmparr_stepstatus)
                        if 'Reject' in tmparr_stepstatus:
                            tmp_text_status = 'R'
                            tmp_text_status_string = 'เอกสารที่ส่งคืนแก้ไข'
                            Reject += 1
                        elif 'Wait_input' in tmparr_stepstatus:
                            tmp_text_status = 'WI'
                            tmp_text_status_string = 'รอคุณกรอกข้อมูล'
                        elif 'V' in tmparr_stepstatus:   
                            tmp_text_status = 'V'
                            tmp_text_status_string = 'ดูเอกสาร'
                        elif 'Progress' in tmparr_stepstatus and 'Wait' in tmparr_stepstatus:
                            tmp_text_status = 'Z'
                            tmp_text_status_string = 'อยู่ในช่วงดำเนินการ'
                            status_Z += 1
                            Incomplete_Pendding += 1
                        elif 'Wait' in tmparr_stepstatus:
                            tmp_text_status = 'W'
                            tmp_text_status_string = 'รอคุณอนุมัติ'
                            Wait += 1
                        elif 'Incomplete' in tmparr_stepstatus:
                            tmp_text_status = 'Z'
                            tmp_text_status_string = 'อยู่ในช่วงดำเนินการ'
                            status_Z += 1
                            # Incomplete_Pendding += 1
                        elif 'Progress' in tmparr_stepstatus:
                            tmp_text_status = 'N'
                            tmp_text_status_string = 'กำลังดำเนินการ'   
                            Incomplete_Pendding += 1
                        elif tmparr_stepstatus.count('Incomplete') >= 2:
                            tmp_text_status = 'Z'
                            tmp_text_status_string = 'อยู่ในช่วงดำเนินการ'
                            status_Z += 1
                            Incomplete_Pendding += 1
                        elif 'Incomplete' in tmparr_stepstatus and 'Complete' in tmparr_stepstatus:
                            tmp_text_status = 'N'
                            tmp_text_status_string = 'กำลังดำเนินการ'
                            Incomplete_Pendding += 1
                        else:
                            # tmp_text_status = 'Y'
                            # tmp_text_status_string = 'อนุมัติแล้ว'
                            # Complete_Approve += 1
                            tmp_text_status = 'N'
                            tmp_text_status_string = 'กำลังดำเนินการ'
                            Incomplete_Pendding += 1
                
                sum_document_all = Complete_Approve + Incomplete_Pendding + Wait
                tmp_arrjson.append({
                    "sum_group_document_search": sum_document_all,
                    "Document_Status_Details": {
                        "Complete_Approve": Complete_Approve, 
                        "Incomplete_Pendding": Incomplete_Pendding, 
                        "Wait": Wait, 
                        "Z":status_Z
                        }
                })
                return {'result':'OK','messageText':tmp_arrjson}  
            else:
                return {'result':'ER','messageER':'data not found'}          

        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(e)}

    def select_offset_querydocument_group(self,email_one,document_type,tax_id,status,offset,keyword,timestamps):
        self.email_one = email_one
        self.document_type = document_type
        self.tax_id = tax_id
        self.status = status
        self.offset = offset
        self.keyword = keyword
        self.timestamps = timestamps
        Complete_Approve = 0
        Incomplete_Pendding = 0
        Reject = 0
        Wait = 0
        status_Z = 0
        countOffset = 0
        tmp_arrjson = []
        txtQuery = ''
        tmp_query = []
        count = 0
        try:
            queryString = '''"status" = 'ACTIVE' AND "sid_group" != '[]' '''
            if self.email_one != None :
                queryString += '''AND ("email_view_group" LIKE '%'''+ self.email_one +'''%' OR status_group LIKE '%'''+ self.email_one +'''%') '''
            if self.tax_id != None and self.tax_id != '' :
                queryString += '''AND bizinfo LIKE '%'''+ self.tax_id +'''%' '''
            else:
                queryString += '''AND (bizinfo = '' OR bizinfo IS NULL)'''
            if self.document_type != None :
                queryString += "AND document_type = '"+ str(self.document_type) +"'"   
            if self.status == 'Y':
                queryString += "AND group_status = 'Y'" 
            if self.status == 'N' or self.status == 'W' :
                queryString += "AND group_status = 'N'"   
            if self.timestamps != None:
                datetime_str = datetime.datetime.fromtimestamp(int(self.timestamps)).strftime('%Y-%m-%d %H:%M:%S')
                queryString += "AND updatetime >= '"+datetime_str+"'"    
            if self.keyword == None:
                query_sql = '''SELECT "status","status_group","group_status","document_type" FROM "tb_group_document" WHERE '''+queryString+''' ORDER BY "createtime" DESC'''
            else:
                try:      
                    dats = datetime.datetime.strptime(self.keyword, '%Y-%m-%d')
                    datetime1 = dats.strftime('%Y-%m-%d 00:00:00')
                    datetime2 = dats.strftime('%Y-%m-%d 23:59:59')       
                    query_sql = "SELECT * FROM tb_group_document WHERE "+ queryString +" AND createtime >= '"+datetime1+"' AND createtime <= '"+datetime2+"' ORDER BY createtime DESC"                     
                except ValueError:
                    print('key not datetime') 
                    if self.keyword == '':
                        query_sql = '''SELECT status,status_group,group_status,document_type FROM "tb_group_document" WHERE '''+queryString+''' ORDER BY "createtime" DESC'''
                    else:   
                        query_sql = '''SELECT status,status_group,group_status,document_type FROM "tb_group_document" WHERE '''+queryString+''' AND json_data LIKE '%'''+ self.keyword +'''%' ORDER BY "createtime" DESC'''         
            
            with engine.connect() as connection:
                print(query_sql)
                result_select = connection.execute(text(query_sql))
                tmp_query = [dict(row) for row in result_select]
                connection.close()
            
            if len(tmp_query) != 0:
                print(len(tmp_query))
                for n in range(len(tmp_query)):
                    tmp_arr_status_group = []
                    tmp_arr_status_email = []
                    tmp_arr_status_group_001 = []
                    tmparr_stepstatus = []
                    arr_email_list = []
                    tmp_text_status = 'Y'
                    tmp_text_status_string = 'อนุมัติแล้ว'  
                    tmp_json = tmp_query[n]
                    tmp_status = tmp_json['status']
                    tmp_status_group = tmp_json['status_group']
                    tmp_group_status = tmp_json['group_status']
                    if tmp_group_status == None:
                        tmp_group_status = 'N'
                    tmp_document_type = tmp_json['document_type']
                    if tmp_group_status == 'Y':
                        tmp_text_status = 'Y'
                        tmp_text_status_string = 'อนุมัติแล้ว'
                        Complete_Approve += 1
                    elif tmp_group_status == 'R':
                        tmp_text_status = 'R'
                        tmp_text_status_string = 'ปฎิเสธอนุมัติ'
                    elif tmp_group_status == 'N':
                        if tmp_status_group != None:
                            tmp_status_group = eval(tmp_status_group)
                            for z in range(len(tmp_status_group)):
                                tmpstatusgroup = tmp_status_group[z]
                                tmp_arr_status_group.append(tmpstatusgroup['status'])
                                tmp_arr_status_email.append(tmpstatusgroup['email_one'])
                        count_email = tmp_arr_status_email.count(self.email_one)
                        for g in range(len(tmp_arr_status_group)):
                            tmpstatus = tmp_arr_status_group[g]
                            tmpemailone = tmp_arr_status_email[g]
                            if type(tmpemailone) is list:
                                for h in tmpemailone:
                                    if str(self.email_one).lower() == str(h).lower().replace(' ',''):
                                        my_status = tmpstatus
                                        tmpemailone = self.email_one
                            if tmpemailone == self.email_one:
                                my_status = tmpstatus
                            index_stepnum = g - 1
                            tmpbefore_status = tmp_arr_status_group[index_stepnum]
                            tmpbefore_emailone = tmp_arr_status_email[index_stepnum] 
                            if 'Reject' in tmp_arr_status_group:
                                step_now = g
                                tmparr_stepstatus.append('Reject')
                            elif tmpemailone == self.email_one and my_status == 'Incomplete_input':
                                step_now = g
                                tmparr_stepstatus.append('Wait_input')
                            elif tmpemailone == self.email_one and my_status == 'Incomplete_1':
                                step_now = g
                                tmparr_stepstatus.append('Incomplete')
                            elif tmpemailone == self.email_one and my_status == 'Incomplete':                                      
                                if self.email_one not in arr_email_list:
                                    index_step_me = g
                                    if index_step_me != 0:
                                        while index_step_me > 0:
                                            if len(tmparr_stepstatus) == 0:
                                                index_step_me = index_step_me - 1
                                                if tmp_arr_status_group[index_step_me] == 'Incomplete_1':
                                                    step_now = g
                                                    tmparr_stepstatus.append('Incomplete')
                                                elif tmp_arr_status_group[index_step_me] == 'Incomplete':
                                                    step_now = g
                                                    tmparr_stepstatus.append('Incomplete')
                                                else:
                                                    step_now = g
                                                    tmparr_stepstatus.append('Wait')
                                                arr_email_list.append(self.email_one)
                                            else:
                                                index_step_me = index_step_me - 1
                                                continue
                                    else:
                                        step_now = g
                                        tmparr_stepstatus.append('Wait')
                            elif tmpemailone == self.email_one and my_status == 'Complete':                                    
                                if self.email_one not in arr_email_list:
                                    if count_email == 1:
                                        for nz in range(g,len(tmp_arr_status_group),1):
                                            if self.email_one in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Incomplete':
                                                step_now = g
                                                tmparr_stepstatus.append('Wait')
                                            elif self.email_one not in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Incomplete':
                                                step_now = g
                                                tmparr_stepstatus.append('Progress')
                                        arr_email_list.append(self.email_one)
                                    else:                                                
                                        for nz in range(g,len(tmp_arr_status_group),1):
                                            if self.email_one not in arr_email_list:
                                                if self.email_one in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Complete':
                                                    pass                                                    
                                                if self.email_one in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Incomplete':
                                                    step_now = g
                                                    tmparr_stepstatus.append('Wait')
                                                    arr_email_list.append(self.email_one)
                                                if self.email_one not in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Incomplete':
                                                    step_now = g
                                                    tmparr_stepstatus.append('Progress')
                                                    arr_email_list.append(self.email_one)
                            tmp_arr_status_group_001.append(tmpstatus)

                        if 'Reject' in tmparr_stepstatus:
                            tmp_text_status = 'R'
                            tmp_text_status_string = 'เอกสารที่ส่งคืนแก้ไข'
                            Reject += 1
                        elif 'Wait_input' in tmparr_stepstatus:
                            tmp_text_status = 'WI'
                            tmp_text_status_string = 'รอคุณกรอกข้อมูล'
                        elif 'V' in tmparr_stepstatus:   
                            tmp_text_status = 'V'
                            tmp_text_status_string = 'ดูเอกสาร'
                        elif 'Progress' in tmparr_stepstatus and 'Wait' in tmparr_stepstatus:
                            tmp_text_status = 'Z'
                            tmp_text_status_string = 'อยู่ในช่วงดำเนินการ'
                            status_Z += 1
                            Incomplete_Pendding += 1
                        elif 'Wait' in tmparr_stepstatus:
                            tmp_text_status = 'W'
                            tmp_text_status_string = 'รอคุณอนุมัติ'
                            Wait += 1
                        elif 'Incomplete' in tmparr_stepstatus:
                            tmp_text_status = 'Z'
                            tmp_text_status_string = 'อยู่ในช่วงดำเนินการ'
                            status_Z += 1
                            Incomplete_Pendding += 1
                        elif 'Progress' in tmparr_stepstatus:
                            tmp_text_status = 'N'
                            tmp_text_status_string = 'กำลังดำเนินการ'   
                            Incomplete_Pendding += 1
                        elif tmparr_stepstatus.count('Incomplete') >= 2:
                            tmp_text_status = 'Z'
                            tmp_text_status_string = 'อยู่ในช่วงดำเนินการ'
                            status_Z += 1
                            Incomplete_Pendding += 1
                        elif 'Incomplete' in tmparr_stepstatus and 'Complete' in tmparr_stepstatus:
                            tmp_text_status = 'N'
                            tmp_text_status_string = 'กำลังดำเนินการ'
                            Incomplete_Pendding += 1
                        else:
                            tmp_text_status = 'N'
                            tmp_text_status_string = 'กำลังดำเนินการ'
                            Incomplete_Pendding += 1
                
                    sum_document_all = Complete_Approve + Incomplete_Pendding + Wait
                    offset = int(self.offset)                    
                    if self.status == None and offset == sum_document_all:
                        countOffset = n + 1
                        break
                    if self.status == 'Y' and offset == Complete_Approve:
                        countOffset = n + 1
                        break
                    if self.status == 'N' and offset == Incomplete_Pendding:
                        countOffset = n + 1
                        break
                    if self.status == 'W' and offset == Wait:
                        countOffset = n + 1
                        break
                print('countOffset',countOffset)
                return {'result':'OK','messageText': countOffset}  
            else:
                return {'result':'ER','messageER':'data not found'}          

        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(e)}
 
    def recursive_select_querydocument_group_search_v2(self,email_one,document_type,group_id,tax_id,status,limit,offset,keyword,count_data,timestamps):
        try:
            self.email_one = email_one
            self.document_type = document_type
            self.group_id = group_id
            self.tax_id = tax_id
            self.status = status
            self.limit = limit
            self.offset = offset
            self.keyword = keyword
            self.timestamps = timestamps          
            count_data = count_data
            tmp_arrjson = []
            txtQuery = ''
            tmp_query = []
            count = 0
            queryString = '''tb_group_document."status" = 'ACTIVE' AND "sid_group" != '[]' '''
            if self.email_one != None :
                queryString += '''AND ("email_view_group" LIKE '%'''+ self.email_one +'''%' OR status_group LIKE '%'''+ self.email_one +'''%') '''
            if self.tax_id != None and self.tax_id != '' :
                queryString += '''AND bizinfo LIKE '%'''+ self.tax_id +'''%' '''
            else:
                queryString += '''AND (bizinfo = '' OR bizinfo IS NULL)'''
            if self.document_type != None :
                queryString += "AND document_type = '"+ str(self.document_type) +"'"   
            if self.status == 'Y':
                queryString += "AND group_status = 'Y'"  
            if self.status == 'N' or self.status == 'W' :
                queryString += "AND group_status = 'N'"     
            if self.timestamps != None:
                datetime_str = datetime.datetime.fromtimestamp(int(self.timestamps)).strftime('%Y-%m-%d %H:%M:%S')
                queryString += "AND updatetime >= '"+datetime_str+"'"
            if self.keyword == None:
                # query_sql = '''
                #     SELECT * FROM "tb_group_document" WHERE '''+queryString+''' ORDER BY "createtime" DESC limit(:limit) offset(:offset)
                # '''
                query_sql = '''
                    SELECT 
                        tb_group_document.id,
                        tb_group_document.sid_group,
                        tb_group_document.data_group,
                        tb_group_document.updatetime,
                        tb_group_document.email_group,
                        tb_group_document.status,
                        tb_group_document.create_by,
                        tb_group_document.update_by,
                        tb_group_document.step_group,
                        tb_group_document.step_group_detail,
                        tb_group_document.group_data_json,
                        tb_group_document.group_other,
                        tb_group_document.email_view_group,
                        tb_group_document.tracking_group,
                        tb_group_document.status_group,
                        tb_group_document.group_title,
                        tb_group_document.group_name,
                        tb_group_document.document_type,
                        tb_group_document.bizinfo,
                        tb_group_document.group_status,
                        tb_group_document.cover_page,
                        tb_group_document.calculate_fieds,
                        tb_group_document.maxstep,
                        tb_group_document.email_middle,
                        tb_group_document.html_data,
                        tb_group_document.json_data,
                        tb_group_document.average_data,
                        tb_group_document.createtime,
                        CASE
		
                                WHEN tb_process_request.status = 'ONPROCESS' THEN
                            TRUE ELSE FALSE 
                            END AS process_status 
                        FROM
                            "tb_group_document"
                            LEFT JOIN tb_process_request ON tb_process_request.group_id="tb_group_document".ID::TEXT 
                            AND (
                            CASE
                                WHEN tb_process_request.name_process = 'SIGN' 
                                AND tb_process_request.status = 'ONPROCESS' THEN
                                TRUE ELSE FALSE 
                                END 
                            )
                        AND tb_process_request.email = :tmpemail_one   WHERE '''+queryString+''' ORDER BY "createtime" DESC limit(:limit) offset(:offset)
                '''
            else:
                try:      
                    dats = datetime.datetime.strptime(self.keyword, '%Y-%m-%d')
                    datetime1 = dats.strftime('%Y-%m-%d 00:00:00')
                    datetime2 = dats.strftime('%Y-%m-%d 23:59:59')       
                    query_sql = "SELECT * FROM tb_group_document WHERE "+ queryString +" AND createtime >= '"+datetime1+"' AND createtime <= '"+datetime2+"' ORDER BY createtime DESC limit(:limit) offset(:offset)"                      
                except ValueError:
                    print('key not datetime')
                    if self.keyword == '':
                        query_sql = '''SELECT * FROM "tb_group_document" WHERE '''+queryString+''' ORDER BY "createtime" DESC limit(:limit) offset(:offset)'''
                    else:   
                        query_sql = '''SELECT * FROM "tb_group_document" WHERE '''+queryString+''' AND json_data LIKE '%'''+ self.keyword +'''%' ORDER BY "createtime" DESC limit(:limit) offset(:offset)''' 
            print(query_sql)  
            # sql = ''' '''      
            if self.group_id != None:
                sql = '''
                    SELECT
                        tb_group_document.ID,
                        tb_group_document.sid_group,
                        tb_group_document.data_group,
                        tb_group_document.updatetime,
                        tb_group_document.email_group,
                        tb_group_document.status,
                        tb_group_document.create_by,
                        tb_group_document.update_by,
                        tb_group_document.step_group,
                        tb_group_document.step_group_detail,
                        tb_group_document.group_data_json,
                        tb_group_document.group_other,
                        tb_group_document.email_view_group,
                        tb_group_document.tracking_group,
                        tb_group_document.status_group,
                        tb_group_document.group_title,
                        tb_group_document.group_name,
                        tb_group_document.document_type,
                        tb_group_document.bizinfo,
                        tb_group_document.group_status,
                        tb_group_document.cover_page,
                        tb_group_document.calculate_fieds,
                        tb_group_document.maxstep,
                        tb_group_document.email_middle,
                        tb_group_document.html_data,
                        tb_group_document.json_data,
                        tb_group_document.average_data,
                        tb_process_request."id" AS "process_id"
                    FROM
                        tb_group_document
                        LEFT JOIN tb_process_request ON tb_process_request.group_id = "tb_group_document".ID :: TEXT 
                        AND tb_process_request.name_process = 'SIGN' 
                        AND tb_process_request.email = :tmpemail_one
                    WHERE
                        tb_group_document.status = 'ACTIVE' 
                        AND tb_group_document.ID = :tmpgroup_id
                '''
                with engine.connect() as connection:
                    result_select = connection.execute(text(sql),tmpemail_one=self.email_one,tmpgroup_id=self.group_id)
                    tmp_query = [dict(row) for row in result_select]
                    connection.close()
            else:                
                with engine.connect() as connection:
                    result_select = connection.execute(text(query_sql),limit=self.limit,offset=self.offset,tmpemail_one=self.email_one)
                    tmp_query = [dict(row) for row in result_select]
                    connection.close()
            if len(tmp_query) != 0:
                for n in range(len(tmp_query)):
                    tmp_step_group_detail = None
                    tmp_pdf = None
                    jsonurl_info = None
                    tmp_group_title = None
                    tmp_cover_page = None
                    tmp_step_group = None
                    tmp_maxstep = None
                    list_file_name = []
                    tmp_arr_status_group = []
                    tmp_arr_status_email = []
                    tmp_arr_status_group_001 = []
                    tmparr_stepstatus = []
                    arr_email_list = []
                    json_tmp = {}
                    tmp_text_status = 'Y'
                    tmp_text_status_string = 'อนุมัติแล้ว'
                    tmp_arr_data_sum_01 = []
                    tmp_json = tmp_query[n]
                    if '_sa_instance_state' in tmp_json:
                        del tmp_json['_sa_instance_state']
                    tmp_processid =None
                    tmp_color = None
                    data_biz = None
                    tmp_groupid = tmp_json['id']                    
                    tmp_sidgroup = tmp_json['sid_group']
                    tmp_updatetime = tmp_json['createtime']
                    tmp_updatetime2 = tmp_json['updatetime']
                    tmp_status = tmp_json['status']
                    tmp_group_other = tmp_json['group_other']
                    tmp_group_data_json = tmp_json['group_data_json']
                    tmp_status_group = tmp_json['status_group']
                    tmp_email_view_group = tmp_json['email_view_group']
                    tmp_group_status = tmp_json['group_status']
                    if tmp_group_status == None:
                        tmp_group_status = 'N'
                    tmp_calculate_fieds = tmp_json['calculate_fieds']
                    tmp_document_type = tmp_json['document_type']
                    tmp_group_title = tmp_json['group_title']
                    tmp_tracking_group = tmp_json['tracking_group']
                    tmp_json_data = tmp_json['json_data']
                    process_status = tmp_json['process_status']
                    tmp_average_data = None
                    if 'average_data' in tmp_json:
                        try:
                            tmp_average_data = eval(tmp_json['average_data'])
                        except Exception as e:
                            tmp_average_data = None
                    query_document = None
                    if 'bizinfo' in tmp_json :
                        if tmp_json['bizinfo'] != None:
                            if tmp_json['bizinfo'] != '':
                                eval_biz = eval(tmp_json['bizinfo'])
                                if type(eval_biz) == dict:
                                    for x in range(len(tmp_json['bizinfo'])):
                                        tmp_biz = {}
                                        tmp_biz['id_card_num'] = eval_biz['id_card_num']
                                        tmp_biz['first_name_th'] = eval_biz['first_name_th']
                                        tmp_biz['first_name_eng'] = eval_biz['first_name_eng']
                                        tmp_biz['role_name'] = eval_biz['role_name']
                                        tmp_biz['dept_id'] = eval_biz['dept_id']
                                    data_biz = tmp_biz
                                elif type(eval_biz) == list:
                                    for x in range(len(tmp_query['bizinfo'])):
                                        tmp_biz = {}
                                        tmp_biz['id_card_num'] = eval_biz[0]['id_card_num']
                                        tmp_biz['first_name_th'] = eval_biz[0]['first_name_th']
                                        tmp_biz['first_name_eng'] = eval_biz[0]['first_name_eng']
                                        tmp_biz['role_name'] = eval_biz[0]['role_name']
                                        tmp_biz['dept_id'] = eval_biz[0]['dept_id']
                                    data_biz = tmp_biz
                            else:
                                data_biz =None
                    if 'bizinfo' in tmp_json :
                        if tmp_json['bizinfo'] != None:
                            if tmp_json['bizinfo'] != '':
                                query_document = db.session.query(paper_lessdocument_detail)\
                                    .filter(and_(paper_lessdocument_detail.documentType==tmp_json['document_type'],paper_lessdocument_detail.documentStatus=='ACTIVE',paper_lessdocument_detail.biz_info.contains(data_biz['id_card_num'])))\
                                    .order_by(desc(paper_lessdocument_detail.documentUpdate)).first()
                            else:
                                query_document = db.session.query(paper_lessdocument_detail)\
                                    .filter(and_(paper_lessdocument_detail.documentType==tmp_json['document_type'],paper_lessdocument_detail.documentStatus=='ACTIVE',paper_lessdocument_detail.biz_info.contains==''))\
                                    .order_by(desc(paper_lessdocument_detail.documentUpdate)).first()
                    tmpdocumentdetail = None
                    if query_document != None:
                        tmpdocumentdetail = query_document.documentJson
                        if tmpdocumentdetail != None:
                            tmpdocumentdetail = eval(tmpdocumentdetail)
                    if tmp_group_title != None:
                        tmp_group_title = eval(tmp_group_title)
                    tmpurl_html_data = None
                    tmp_html_data = None
                    if self.group_id != None and self.email_one != None and self.document_type == None:
                        tmp_maxstep = tmp_json['maxstep']
                        tmp_step_group = tmp_json['step_group']
                        tmp_step_group_detail = tmp_json['step_group_detail']
                        tmp_pdf_org = tmp_json['pdf_org']
                        tmp_pdf_sign = tmp_json['pdf_sign']
                        tmp_hashid = tmp_json['hash_id']
                        tmp_cover_page = tmp_json['cover_page']
                        tmp_html_data = tmp_json['html_data']
                        if tmp_html_data != None:
                            tmpurl_html_data = myUrl_domain + 'api/v1/html?group_id=' + str(tmp_groupid)
                        query_process = db.session.query(tb_process_request)\
                            .filter(and_(tb_process_request.group_id==str(tmp_groupid),tb_process_request.email==self.email_one))\
                            .order_by(desc(tb_process_request.datetime)).first()
                        if query_process != None:
                            tmp_json_process = query_process.__dict__
                            tmp_processid = tmp_json_process['id']
                        if tmp_maxstep != None:
                            tmp_maxstep = str(tmp_maxstep)
                        if tmp_step_group != None:
                            if tmp_step_group != '':
                                tmp_step_group = eval(tmp_step_group)
                                if len(tmp_step_group) != 0:
                                    tmp_step_group = tmp_step_group[0]
                                    print(tmp_step_group)
                        if tmp_cover_page != None:
                            if tmp_cover_page != '':
                                tmp_cover_page = eval(tmp_cover_page)
                            else:
                                tmp_cover_page = None
                        if tmp_step_group_detail != None:
                            tmp_step_group_detail = eval(tmp_step_group_detail)
                        if tmp_pdf_sign != None:
                            tmp_pdf = tmp_pdf_sign
                        else:
                            tmp_pdf = tmp_pdf_org
                        jsonurl_info = None
                        if tmp_pdf != None:
                            url_downloadpdf = myUrl_domain + 'api/v1/download/group_pdf?groupid=' + tmp_hashid
                            url_viewpdf = myUrl_domain + 'api/v1/view/group_pdf?groupid=' + tmp_hashid
                            jsonurl_info = {'view_pdf':url_viewpdf,'download_pdf':url_downloadpdf}
                        list_file_name = []
                        # path_image = os.getcwd() + '/storage/image/' + self.group_id
                        path_image = path_global_1 + '/storage/image/' + self.group_id
                        try:
                            for the_file in os.listdir(path_image):
                                file_path = os.path.join(path_image, the_file)
                                # current_app.logger.info(file_path)
                                filename_only = str(file_path).split('/')[-1]
                                url_view_image = myUrl_domain + 'api/view2/pdf_image/' + self.group_id +'/' + filename_only
                                list_file_name.append({'image_Url': url_view_image})
                        except Exception as e:
                            list_file_name = []
                        
                    if tmp_calculate_fieds != None:
                        tmp_calculate_fieds = eval(tmp_calculate_fieds)
                    status_viewGroup = False
                    if tmp_email_view_group != None:
                        tmp_email_view_group = eval(tmp_email_view_group)
                        if len(tmp_email_view_group) != 0:
                            for z in range(len(tmp_email_view_group)):
                                if self.email_one in tmp_email_view_group[z]['email_view_group']:
                                    status_viewGroup = True
                    if tmp_group_status == 'Y':
                        tmp_text_status = 'Y'
                        tmp_text_status_string = 'อนุมัติแล้ว'
                    elif tmp_group_status == 'R':
                        tmp_text_status = 'R'
                        tmp_text_status_string = 'ปฎิเสธอนุมัติ'
                    elif tmp_group_status == 'N':
                        if tmp_status_group != None:
                            tmp_status_group = eval(tmp_status_group)
                            for z in range(len(tmp_status_group)):
                                tmpstatusgroup = tmp_status_group[z]
                                tmp_arr_status_group.append(tmpstatusgroup['status'])
                                tmp_arr_status_email.append(tmpstatusgroup['email_one'])
                        # print(tmp_arr_status_group)
                        # print(tmp_arr_status_email)
                        count_email = tmp_arr_status_email.count(self.email_one)
                        for g in range(len(tmp_arr_status_group)):
                            tmpstatus = tmp_arr_status_group[g]
                            tmpemailone = tmp_arr_status_email[g]
                            if type(tmpemailone) is list:
                                for h in tmpemailone:
                                    if str(self.email_one).lower() == str(h).lower().replace(' ',''):
                                        my_status = tmpstatus
                                        tmpemailone = self.email_one
                            if tmpemailone == self.email_one:
                                my_status = tmpstatus
                            index_stepnum = g - 1
                            tmpbefore_status = tmp_arr_status_group[index_stepnum]
                            tmpbefore_emailone = tmp_arr_status_email[index_stepnum] 
                            if 'Reject' in tmp_arr_status_group:
                                step_now = g
                                tmparr_stepstatus.append('Reject')
                            elif tmpemailone == self.email_one and my_status == 'Incomplete_input':
                                step_now = g
                                tmparr_stepstatus.append('Wait_input')
                            elif tmpemailone == self.email_one and my_status == 'Incomplete_1':
                                step_now = g
                                tmparr_stepstatus.append('Incomplete')
                            elif tmpemailone == self.email_one and my_status == 'Incomplete':                                      
                                if self.email_one not in arr_email_list:
                                    index_step_me = g
                                    if index_step_me != 0:
                                        while index_step_me > 0:
                                            if len(tmparr_stepstatus) == 0:
                                                index_step_me = index_step_me - 1
                                                if tmp_arr_status_group[index_step_me] == 'Incomplete_1':
                                                    step_now = g
                                                    tmparr_stepstatus.append('Incomplete')
                                                elif tmp_arr_status_group[index_step_me] == 'Incomplete':
                                                    step_now = g
                                                    tmparr_stepstatus.append('Incomplete')
                                                else:
                                                    step_now = g
                                                    tmparr_stepstatus.append('Wait')
                                                arr_email_list.append(self.email_one)
                                            else:
                                                index_step_me = index_step_me - 1
                                                continue
                                    else:
                                        step_now = g
                                        tmparr_stepstatus.append('Wait')
                            elif tmpemailone == self.email_one and my_status == 'Complete':                                    
                                if self.email_one not in arr_email_list:
                                    if count_email == 1:
                                        for nz in range(g,len(tmp_arr_status_group),1):
                                            if self.email_one in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Incomplete':
                                                step_now = g
                                                tmparr_stepstatus.append('Wait')
                                            elif self.email_one not in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Incomplete':
                                                step_now = g
                                                tmparr_stepstatus.append('Progress')
                                        arr_email_list.append(self.email_one)
                                    else:                                                
                                        for nz in range(g,len(tmp_arr_status_group),1):
                                            if self.email_one not in arr_email_list:
                                                if self.email_one in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Complete':
                                                    pass                                                    
                                                if self.email_one in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Incomplete':
                                                    step_now = g
                                                    tmparr_stepstatus.append('Wait')
                                                    arr_email_list.append(self.email_one)
                                                if self.email_one not in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Incomplete':
                                                    step_now = g
                                                    tmparr_stepstatus.append('Progress')
                                                    arr_email_list.append(self.email_one)
                            tmp_arr_status_group_001.append(tmpstatus)
                        print(tmp_groupid,tmparr_stepstatus)
                        if 'Reject' in tmparr_stepstatus:
                            tmp_text_status = 'R'
                            tmp_text_status_string = 'เอกสารที่ส่งคืนแก้ไข'
                        elif 'Wait_input' in tmparr_stepstatus:
                            tmp_text_status = 'WI'
                            tmp_text_status_string = 'รอคุณกรอกข้อมูล'
                        elif 'V' in tmparr_stepstatus:   
                            tmp_text_status = 'V'
                            tmp_text_status_string = 'ดูเอกสาร'
                        elif 'Progress' in tmparr_stepstatus and 'Wait' in tmparr_stepstatus:
                            # tmp_text_status = 'Z'
                            # tmp_text_status_string = 'อยู่ในช่วงดำเนินการ'
                            tmp_text_status = 'N'
                            tmp_text_status_string = 'กำลังดำเนินการ' 
                        elif 'Wait' in tmparr_stepstatus:
                            tmp_text_status = 'W'
                            tmp_text_status_string = 'รอคุณอนุมัติ'
                        elif 'Incomplete' in tmparr_stepstatus:
                            tmp_text_status = 'Z'
                            tmp_text_status_string = 'อยู่ในช่วงดำเนินการ'
                            # tmp_text_status = 'N'
                            # tmp_text_status_string = 'กำลังดำเนินการ' 
                        elif 'Progress' in tmparr_stepstatus:
                            tmp_text_status = 'N'
                            tmp_text_status_string = 'กำลังดำเนินการ'                    
                        elif tmparr_stepstatus.count('Incomplete') >= 2:
                            # tmp_text_status = 'Z'
                            # tmp_text_status_string = 'อยู่ในช่วงดำเนินการ'
                            tmp_text_status = 'N'
                            tmp_text_status_string = 'กำลังดำเนินการ' 
                        elif 'Incomplete' in tmparr_stepstatus and 'Complete' in tmparr_stepstatus:
                            tmp_text_status = 'N'
                            tmp_text_status_string = 'กำลังดำเนินการ'
                        else:
                            tmp_text_status = 'N'
                            tmp_text_status_string = 'กำลังดำเนินการ'
                    
                    if tmp_sidgroup != None:
                        tmp_sidgroup = eval(tmp_sidgroup)
                    if tmp_updatetime != None:
                        tmp_updatetime = tmp_updatetime
                        tmp_datetimeString = str(tmp_updatetime).split('+')[0]
                        tmp_datetimetimestamp = int(tmp_updatetime.timestamp())
                    if tmp_updatetime == None:
                        tmp_updatetime = tmp_updatetime2
                        tmp_datetimeString = str(tmp_updatetime).split('+')[0]
                        tmp_datetimetimestamp = int(tmp_updatetime.timestamp())
                    if tmp_group_other != None:
                        tmp_group_other = eval(tmp_group_other)
                        for i in range(len(tmp_group_other)):
                            if 'color' in tmp_group_other[i]:
                                tmp_color = tmp_group_other[i]['color']
                    if tmp_group_data_json != None:
                        tmp_group_data_json = eval(tmp_group_data_json)
                        for o in range(len(tmp_group_data_json)):
                            if 'data_sum' in tmp_group_data_json[o]:
                                tmp_data_sum = tmp_group_data_json[o]['data_sum']
                                for z in range(len(tmp_data_sum)):
                                    if 'name' in tmp_data_sum[z]:
                                        tmp_key = str(tmp_data_sum[z]['name']).replace(' ','')
                                        tmp_value = (tmp_data_sum[z]['value'])
                                        json_tmp[tmp_key] = tmp_value
                                        # arr_data_sum.append({tmp_key:tmp_value})
                                tmp_arr_data_sum_01.append(json_tmp)
                            else:
                                if len(tmp_group_data_json[o]) != 0:
                                    tmp_group_data_json[o][0]['No_keyno_ppl'] = (o + 1)
                                    tmp_arr_data_sum_01.append(tmp_group_data_json[o][0])
                    if tmp_json_data != None:
                        if tmp_json_data != 'None':
                            tmp_arr_data_sum_01 = eval(tmp_json_data)
                    dateTime_String = tmp_updatetime
                    th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                    ts = int(time.time())
                    date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                    year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                    datetime_display = int(dateTime_String.timestamp())
                    date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                    yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                    time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                    old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                    if date_time_today == date_time_db:
                        date_display_show = time_show_db
                    else:
                        if year_today == yar_db:
                            date_display_show = convert_datetime_TH_2_display(datetime_display)
                        else:
                            date_display_show = old_year
                    if self.status != None :
                        if tmp_text_status == self.status :      
                            if count_data < int(self.limit):           
                                tmp_arrjson.append({
                                    'status':tmp_status,
                                    'group_id':tmp_groupid,
                                    'sid_group':tmp_sidgroup,
                                    'color_group':tmp_color,
                                    'timestamp_updatetime':int(tmp_updatetime2.timestamp()),
                                    'datetime':tmp_datetimetimestamp,
                                    'datetime_string':tmp_datetimeString,
                                    'datetime_display':date_display_show,
                                    'datetime_thai':th_dateTime_2,
                                    'document_count':len(tmp_sidgroup),
                                    'document_data':tmp_arr_data_sum_01,
                                    'status_group':tmp_text_status,
                                    'status_group_string':tmp_text_status_string,
                                    'viewgroup':status_viewGroup,
                                    'calculate_fieds':tmp_calculate_fieds,
                                    'image_display':list_file_name,
                                    'sign_position':tmp_step_group_detail,
                                    'pdf_info':tmp_pdf,
                                    'url_info':jsonurl_info,
                                    'document_type':tmp_document_type,
                                    'group_title':tmp_group_title,
                                    'cover_page':tmp_cover_page,
                                    'biz_info':data_biz,
                                    'document_type_detail':tmpdocumentdetail,
                                    'step_group_document':tmp_step_group,
                                    'max_step':tmp_maxstep,
                                    'process_id':tmp_processid,
                                    'html_data':tmp_html_data,
                                    'html_url':tmpurl_html_data,
                                    'tracking_id':tmp_tracking_group,
                                    'average_data':tmp_average_data,
                                    'process_status':process_status
                                })
                                count_data += 1
                            else:
                                break
                    else:
                        if tmp_text_status == 'Y' or tmp_text_status == 'N' or tmp_text_status == 'W' :      
                            if count_data < int(self.limit):           
                                tmp_arrjson.append({
                                    'status':tmp_status,
                                    'group_id':tmp_groupid,
                                    'sid_group':tmp_sidgroup,
                                    'color_group':tmp_color,
                                    'timestamp_updatetime':int(tmp_updatetime2.timestamp()),
                                    'datetime':tmp_datetimetimestamp,
                                    'datetime_string':tmp_datetimeString,
                                    'datetime_display':date_display_show,
                                    'datetime_thai':th_dateTime_2,
                                    'document_count':len(tmp_sidgroup),
                                    'document_data':tmp_arr_data_sum_01,
                                    'status_group':tmp_text_status,
                                    'status_group_string':tmp_text_status_string,
                                    'viewgroup':status_viewGroup,
                                    'calculate_fieds':tmp_calculate_fieds,
                                    'image_display':list_file_name,
                                    'sign_position':tmp_step_group_detail,
                                    'pdf_info':tmp_pdf,
                                    'url_info':jsonurl_info,
                                    'document_type':tmp_document_type,
                                    'group_title':tmp_group_title,
                                    'cover_page':tmp_cover_page,
                                    'biz_info':data_biz,
                                    'document_type_detail':tmpdocumentdetail,
                                    'step_group_document':tmp_step_group,
                                    'max_step':tmp_maxstep,
                                    'process_id':tmp_processid,
                                    'html_data':tmp_html_data,
                                    'html_url':tmpurl_html_data,
                                    'tracking_id':tmp_tracking_group,
                                    'average_data':tmp_average_data,
                                    'process_status':process_status
                                })
                                count_data += 1
                            else:
                                break
                print(len(tmp_arrjson))
                print('test')
                tmp_arrjson = sorted(tmp_arrjson, key=lambda k: k['datetime'], reverse=True)
                print('*****************')
                return {'result':'OK','messageText':tmp_arrjson}
            else:
                return {'result':'ER','messageER':'data not found'}
        except Exception as e:
            print(str(e))
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(e)}

    def select_querydocument_group_search_v2(self,email_one,document_type,group_id,tax_id,status,limit,offset,keyword,timestamps):
        try:
            self.email_one = email_one
            self.document_type = document_type
            self.group_id = group_id
            self.tax_id = tax_id
            self.status = status
            self.limit = limit
            self.offset = offset
            self.keyword = keyword
            self.timestamps = timestamps
            tmp_arrjson = []
            if self.group_id == None:
                limit = int(self.limit)
                offset = int(self.offset)
                if offset != 0:
                    result_offset = select_1().select_offset_querydocument_group(self.email_one,self.document_type,self.tax_id,self.status,self.offset,keyword,self.timestamps)
                    if result_offset['result'] == 'OK':                
                        offset = result_offset['messageText']
                        
                result = select_1().recursive_select_querydocument_group_search_v2(self.email_one,self.document_type,self.group_id,self.tax_id,self.status,self.limit,offset,self.keyword,len(tmp_arrjson),self.timestamps)
                if result['result'] == 'OK':                
                    tmp_arrjson = result['messageText']
                    offset += limit
                    while len(tmp_arrjson) < limit :                    
                        result2 = select_1().recursive_select_querydocument_group_search_v2(self.email_one,self.document_type,self.group_id,self.tax_id,self.status,self.limit,offset,self.keyword,len(tmp_arrjson),self.timestamps)
                        if result2['result'] == 'OK':
                            tmp_arrjson.extend(result2['messageText'])
                            offset += limit
                        else:
                            break
                    print(len(tmp_arrjson))
                    timestamp = []
                    for datatime in tmp_arrjson:
                        timestamp.append(datatime['timestamp_updatetime'])
                    max_timestamp = max(timestamp)
                    tmp_arrjson = sorted(tmp_arrjson, key=lambda k: k['datetime'], reverse=True)
                    return {'result':'OK','messageText':tmp_arrjson,'timestamp': max_timestamp}
                else:
                    return {'result':'ER','messageER':'data not found'}      
            else:
                self.limit = 1
                result = select_1().recursive_select_querydocument_group_search_v2(self.email_one,self.document_type,self.group_id,self.tax_id,self.status,self.limit,offset,self.keyword,len(tmp_arrjson),self.timestamps)
                return {'result':'OK','messageText': result['messageText']}

        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(e)}
    
    def select_admin_count_viewdoc_month_v2(self,tax_id,document_type,level_admin):
        self.tax_id = tax_id
        self.document_type = document_type
        self.level_admin = int(level_admin)
        list_json = []
        list_count_user = []
        list_start_time = []
        countDoc_of_month = 0
        count_Doc_of_month_active = 0
        count_Doc_of_month_reject = 0
        count_Doc_of_month_delete = 0
        count_Doc_of_month_inactive = 0
        tmp_json_1 = {}
        start_last = 0
        startTime_list = []
        endTime_list = []
        count_1 = 11
        count_2 = 12
        query_count_all = None
        
        try:
            list_user = []
            tmp_json = {}
            now = datetime.datetime.now()
            day = (str(now).split('-')[2]).split(' ')[0]
            day_2 = int(day) - 1
            flashback = timedelta(days=day_2)
            end_time = (now).replace(hour=23, minute=59, second=59, microsecond=00)
            start_time =  (now-flashback).replace(hour=0, minute=0, second=0, microsecond=0)
            startTime_list.append(start_time)
            endTime_list.append(end_time)

            for x in range(count_1):
                list_start_end = find_startTime_endTime(start_time)
                start_time1 = list_start_end[0]
                end_time1 = list_start_end[1]
                startTime_list.append(start_time1)
                endTime_list.append(end_time1)
                if x == count_1 - 1:
                    start_last = start_time1
                start_time = start_time1
            
            if self.tax_id == '' and self.document_type == '' : # tax_id = ค่าว่าง , document_type = ค่าว่าง 
                # เทส query
                query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.sender_name,
                    view_document.send_time,
                    view_document.update_time,
                    view_document.biz_info,
                    view_document.documentType,
                    view_document.status
                ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time)
                ,and_(view_document.send_time >= start_last,view_document.send_time <= end_time))).all()
                # เทส query 
                    
            elif self.tax_id != '' and self.document_type == '': # tax_id = มีค่า , document_type = ค่าว่าง
                if tax_id == 'citizen':
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status
                    ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time)
                    ,and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                    .filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                    # เทส query 
                   
                elif len(self.tax_id) != 13 :
                    return {'result':'ER','messageText':'error because tax_id incorret'} 
                
                else :
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status
                    ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time)
                    ,and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                    .filter(view_document.biz_info.contains(self.tax_id)).all()
                    # เทส query  
            
            elif self.tax_id == '' and self.document_type != '': # tax_id = ค่าว่าง , document_type = มีค่า
                # เทส query
                query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.sender_name,
                    view_document.send_time,
                    view_document.update_time,
                    view_document.biz_info,
                    view_document.documentType,
                    view_document.status
                ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time)
                ,and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                .filter(view_document.documentType == self.document_type).all()
                # เทส query 
            
            elif self.tax_id != '' and self.document_type != '': # tax_id = มีค่า , document_type = มีค่า
                if self.tax_id == 'citizen':
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status
                    ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time)
                    ,and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                    .filter(view_document.documentType == self.document_type).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                    # เทส query 

                elif len(self.tax_id) != 13 :
                    return {'result':'ER','messageText':'error because tax_id incorret'} 
                
                else:
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status
                    ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time)
                    ,and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                    .filter(view_document.documentType == self.document_type).filter(view_document.biz_info.contains(self.tax_id)).all()
                    # เทส query 
          
            list2 = []
            print(len(query_count_all))
            for x in range(len(query_count_all)):
                tmp_json = {
                    'sender_email': query_count_all[x].sender_email,
                    'sender_name': query_count_all[x].sender_email,
                    'sendtime':int(datetime.datetime.timestamp(query_count_all[x].send_time)),
                    'updatetime':int(datetime.datetime.timestamp(query_count_all[x].update_time)),
                    'biz_info':query_count_all[x].biz_info,
                    'documentType':query_count_all[x].documentType,
                    'status':query_count_all[x].status,
                }
                list2.append(tmp_json)
                tmp_json = {}
            
            if len(query_count_all) == 0 :
                for x in range(count_2):
                    count_all = 0
                    count_active = 0
                    count_reject = 0
                    count_delete = 0
                    count_inactive = 0
                    list_user2 = []
                    timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                    timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                    tmp_json['all_documents'] = count_all
                    tmp_json['documents_active'] = count_active
                    tmp_json['count_user'] = len(list_user2)
                    tmp_json['documents_reject'] = count_reject
                    tmp_json['documents_delete'] = count_delete
                    tmp_json['documents_inactive'] = count_inactive
                    tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                    tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                    tmp_json['timestamp_start'] = timestamp_start
                    tmp_json['timestamp_end'] = timestamp_end
                    list_json.append(tmp_json)
                    tmp_json = {}

            else:
                for x in range(count_2):
                    count_all = 0
                    count_active = 0
                    count_reject = 0
                    count_delete = 0
                    count_inactive = 0
                    list_user2 = []
                    for y in range(len(list2)):
                        timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                        timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                        user = list2[y]['sender_email']
                        list_count_user.append(user)
                        if (int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end))\
                        or (int(list2[y]['updatetime']) >= int(timestamp_start) and list2[y]['updatetime'] <= int(timestamp_end)):
                            count_all = count_all + 1
                            list_user2.append(user)
                            # if user not in list_user2:
                                # list_user2.append(user)
                            # if user not in list_count_user:
                                # list_count_user.append(user)
                        if ((int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end))\
                        or (int(list2[y]['updatetime']) >= int(timestamp_start) and list2[y]['updatetime'] <= int(timestamp_end))) and list2[y]['status'] == 'ACTIVE':
                            count_active = count_active + 1
                        if ((int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end))\
                        or (int(list2[y]['updatetime']) >= int(timestamp_start) and list2[y]['updatetime'] <= int(timestamp_end))) and list2[y]['status'] == 'REJECT':
                            count_reject = count_reject + 1
                        if ((int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end))\
                        or (int(list2[y]['updatetime']) >= int(timestamp_start) and list2[y]['updatetime'] <= int(timestamp_end))) and list2[y]['status'] == 'DELETE':
                            count_delete = count_delete + 1
                        if ((int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end))\
                        or (int(list2[y]['updatetime']) >= int(timestamp_start) and list2[y]['updatetime'] <= int(timestamp_end))) and list2[y]['status'] == 'INACTIVE':
                            count_inactive = count_inactive + 1
                        if x == 0 and list2[y]['status'] == 'ACTIVE':
                            count_Doc_of_month_active += 1
                        if x == 0 and list2[y]['status'] == 'REJECT':
                            count_Doc_of_month_reject += 1
                        if x == 0 and list2[y]['status'] == 'DELETE':
                            count_Doc_of_month_delete += 1
                        if x == 0 and list2[y]['status'] == 'INACTIVE':
                            count_Doc_of_month_inactive += 1

                    tmp_json['all_documents'] = count_all
                    tmp_json['documents_active'] = count_active                    
                    tmp_json['documents_reject'] = count_reject
                    tmp_json['documents_delete'] = count_delete
                    tmp_json['documents_inactive'] = count_inactive
                    tmp_json['count_user'] = len(Counter(list_user2))
                    tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                    tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                    tmp_json['timestamp_start'] = timestamp_start
                    tmp_json['timestamp_end'] = timestamp_end
                    list_json.append(tmp_json)
                    tmp_json = {}

            tmp_json_1['documents_past_month'] = list_json

            tmp_json = {}
            list_json = []
            tmp_json['documents_all'] = len(list2)
            tmp_json['documents_all_active'] = count_Doc_of_month_active
            tmp_json['documents_all_reject'] = count_Doc_of_month_reject
            tmp_json['documents_all_delete'] = count_Doc_of_month_delete
            tmp_json['documents_all_inactive'] = count_Doc_of_month_inactive
            tmp_json['countUser_of_month'] = len(Counter(list_count_user))
            list_json.append(tmp_json)

            tmp_json_1['documents_all_month'] = list_json
            return {'result':'OK','messageText':tmp_json_1}
  
        except Exception as e:
           return {'result':'ER','messageText':'notfound data' + str(e)}

    def selectCountLogin(self,typeShow):
        self.typeShow = typeShow
        CountLoginAll = 0
        list_count_userAll = []
        list_json = []
        list_json_all = []
        list_count_user = []
        list_start_time = []
        tmp_json_1 = {}
        start_last = 0
        startTime_list = []
        endTime_list = []        
        query_count_all = None
        
        try:
            list_user = []
            tmp_json = {}
            now = datetime.datetime.now()
            if self.typeShow == 'month':
                count_1 = 11
                count_2 = 12
                day = (str(now).split('-')[2]).split(' ')[0]
                day_2 = int(day) - 1
                flashback = timedelta(days=day_2)
                end_time = (now).replace(hour=23, minute=59, second=59, microsecond=00)
                start_time =  (now-flashback).replace(hour=0, minute=0, second=0, microsecond=0)
            elif self.typeShow == 'hour':
                now = datetime.datetime.now()
                hour = int((str(now).split(' ')[1]).split(':')[0])
                count_1 = hour
                flashback = timedelta(hours = 1)
                end_time = now.replace(microsecond = 00)
                start_time =  (now-flashback).replace(hour=hour, minute=0, second=0, microsecond=00)
            startTime_list.append(start_time)
            endTime_list.append(end_time)
            
            for x in range(count_1):
                if self.typeShow == 'month':
                    list_start_end = find_startTime_endTime(start_time)
                elif self.typeShow == 'hour': 
                    list_start_end = find_startTime_endTime_hour(start_time) 
                start_time1 = list_start_end[0]
                end_time1 = list_start_end[1]
                startTime_list.append(start_time1)
                endTime_list.append(end_time1)
                if x == count_1 - 1:
                    start_last = start_time1 
                start_time = start_time1
            query_count_all = paper_lesstransactionLogin.query.with_entities(
                    paper_lesstransactionLogin.email,
                    paper_lesstransactionLogin.date_time
            ).filter(and_(paper_lesstransactionLogin.date_time >= start_last,paper_lesstransactionLogin.date_time <= end_time)).all()
          
            list2 = []
            print(len(query_count_all))
            for x in range(len(query_count_all)):
                tmp_json = {
                    'emailLogin': query_count_all[x].email,
                    'date_time': int(datetime.datetime.timestamp(query_count_all[x].date_time)),
                }
                list2.append(tmp_json)
                tmp_json = {}
            print('len_query',len(query_count_all))
            print('len list2',len(list2))
            if self.typeShow == 'hour':
                count_2 = count_1 + 1
            if len(query_count_all) == 0 :
                pass
            else:
                for x in range(count_2):
                    CountOfLogin = 0
                    list_user2 = []
                    list_count_user02 = []                    
                    for y in range(len(list2)):
                        timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                        timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                        user = list2[y]['emailLogin']
                        
                        if int(list2[y]['date_time']) >= int(timestamp_start) and list2[y]['date_time'] <= int(timestamp_end):
                            CountOfLogin = CountOfLogin + 1
                            list_count_user02.append(user)
                            list_count_userAll.append(user)
                    
                    tmp_json['CountOfLogin'] = CountOfLogin
                    tmp_json['CountUserLogin'] = func_list_recp(list_count_user02)
                    tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                    tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                    tmp_json['timestamp_start'] = timestamp_start
                    tmp_json['timestamp_end'] = timestamp_end
                    list_json.append(tmp_json)
                    tmp_json = {}
                    CountLoginAll += CountOfLogin
                
                json_data = {
                    'message': list_json,
                    'status': "OK"
                }
                
                json_all = {
                    'CountLoginAll': CountLoginAll,
                    'CountUserLoginAll': func_list_recp(list_count_userAll),
                    'datetime_start': str(start_last),
                    'datetime_end': str(end_time),
                    'timestamp_start': int(datetime.datetime.timestamp(start_last)),
                    'timestamp_end': int(datetime.datetime.timestamp(end_time))
                }

            list_json_all.append({
                'All_Historical_Login': json_all,
                'Sub_Historical_Login': json_data
            })

            return {'result':'OK','messageText':list_json_all}
  
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'notfound data' + str(e)}
    
    def select_info_document_qts(self,sid):
        self.sid = sid
        data_json = None
        list_ = []
        url = 'http://203.154.135.51:5006/quatation_th'
        result_find_sid = find_sid_from_docid(self.sid)
        if result_find_sid['sid'] != None:
            self.sid = result_find_sid['sid']
        # print('sidddd',self.sid)
        try:
            with slave.connect() as connection:
                result_select_docdetail = connection.execute(text('SELECT "tb_send_detail"."step_data_sid","tb_send_detail"."doc_id",\
                    "tb_doc_detail"."data_document","tb_step_data"."update_time" \
                    FROM "tb_send_detail" \
                    INNER JOIN "tb_doc_detail" ON "tb_doc_detail".step_id = "tb_send_detail".step_data_sid \
                    INNER JOIN "tb_step_data" ON "tb_step_data".sid = "tb_send_detail".step_data_sid \
                    WHERE "tb_send_detail"."step_data_sid"=:sid'),sid=self.sid)
                connection.close()
                tmp_query = [dict(row) for row in result_select_docdetail]
            for x in range(len(tmp_query)):
                tmp_query[x]['update_time'] = str(tmp_query[x]['update_time']).split('+')[0]
                result = data_doc(tmp_query[x]['data_document'])
                if result['result'] == 'OK':
                    if result['messageText']['sub'] == 'eformppl':
                        tmp_query[x]['data_document'] = result
                        tmp_query[x]['data_document'] = tmp_query[x]['data_document']['messageText']['formdata_eform']['data_json_key']
                        for y in range(len(tmp_query[x]['data_document'])):
                            tmp_query[x]['data_document'][y]['ppl_document_id'] = tmp_query[x]['doc_id']
                            tmp_query[x]['data_document'][y]['datetime_approve'] = tmp_query[x]['update_time']
                        data_json = tmp_query[x]['data_document']
                        if data_json != None:
                            # return {'result':'OK','messageText':data_json}
                            result = callPost_Test(url,data_json)
                            # list_.append(result['result'])
                        else:
                            return {'result':'ER','messageText':'data fail'}
                    else:
                        print('ER NOT EFORM')
                        return {'result':'ER','messageText':'document The document was not sent efrom'}
                else:
                    return {'result':'ER','messageText':'Decoding error'}
            return {'result':'OK','messageText':list_}

        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'notfound data' + str(e)}

    def select_get_string_templateAndusername_v2(self,username,template):
        self.username = username
        self.template = template
        try:
            arr_get = []
            strQueryUser1 = ''' SELECT "step_Code","step_Data","step_Max","username","email","DateTime","step_Description","step_Name","step_Upload","template_images","template_biz",
                "qrCode_position","status","status_Update","documentDetails","urgent_type","webhook","condition_temp","email_center","formula_temp","digit_sign","page_sign_options",
                "options_page","status_use","time_expire","importance_doc","last_digit_sign","rpa","dms","onebox","detail_service","status_ref" FROM "tb_step_template" '''

            with slave.connect() as connection:
                result = connection.execute(text(''' '''+ strQueryUser1 +''' WHERE "step_Code" = :step_Code AND "status" = 'ACTIVE' ORDER BY "sid" ASC '''),step_Code=self.template)
                connection.close()
            query_ = [dict(row) for row in result]

            print('lenQuery',len(query_))
            for row in query_ :
                # print(k)
                json_sky = {}
                json_sky['template_webhook'] = row['webhook']
                json_sky['email_center'] = row['email_center']
                json_sky['step_Code'] = row['step_Code']
                json_sky['dateTime'] = row['DateTime']
                json_sky['dateTime_string'] = str(row['DateTime']).split('+')[0]
                json_sky['data_step'] = json.dumps(row['step_Data'])
                json_sky['data_step'] = json.loads(json_sky['data_step'])
                json_sky['step_Upload'] = json.dumps(row['step_Upload'])
                json_sky['step_Upload'] = json.loads(json_sky['step_Upload'])
                json_sky['step_Description'] = row['step_Description']
                json_sky['condition_string'] = row['condition_temp']
                json_sky['options_page'] = (row['options_page'])
                json_sky['digit_sign'] = row['digit_sign']
                json_sky['webhook'] = row['webhook']
                json_sky['status_ref'] = row['status_ref']
                # json_sky['stamp_all'] = k.sign_page_options
                if row['urgent_type'] != None:
                    json_sky['urgent_code'] = row['urgent_type']
                    if row['urgent_type'] == 'M':
                        json_sky['urgent_string_th'] = 'ปกติ'
                        json_sky['urgent_string_en'] = 'MEDIUM'
                    elif row['urgent_type'] == 'U':
                        json_sky['urgent_string_th'] = 'ด่วน'
                        json_sky['urgent_string_en'] = 'URGENT'
                    elif row['urgent_type'] == 'I':
                        json_sky['urgent_string_th'] = 'ด่วนมาก'
                        json_sky['urgent_string_en'] = 'IMMEDIATE'
                else:
                    json_sky['urgent_code'] = None
                    json_sky['urgent_string_th'] = None
                    json_sky['urgent_string_en'] = None
                if row['qrCode_position'] != None:
                    json_sky['qrCode_position'] = json.dumps(row['qrCode_position'])
                    json_sky['qrCode_position'] = json.loads(json_sky['qrCode_position'])
                else:
                    json_sky['qrCode_position'] = None
                try:
                    data_step = eval(json_sky['data_step'])
                except Exception as ex:
                    return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล Step ให้เป็น Json ได้'}
                try:
                    step_Upload = eval(json_sky['step_Upload'])
                except Exception as ex:
                    return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล step_Upload ให้เป็น Json ได้'}
                json_sky['username'] = row['username']
                json_sky['step_Max'] = row['step_Max']
                json_sky['step_Name'] = row['step_Name']
                json_sky['email'] = row['email']
                if row['documentDetails'] != None:
                    if str(row['documentDetails']).replace(' ','') != '':
                        with slave.connect() as connection:
                            result = connection.execute(text(''' SELECT "documentJson" FROM "tb_document_detail" WHERE "documentUser" = :username AND "documentType" = :docDetail AND "documentStatus" = 'ACTIVE' ''')
                                ,username=row['username'],docDetail=row['documentDetails'])
                            connection.close()
                        result_detailDoc = [dict(row) for row in result]

                        if result_detailDoc != []:
                            result_detailDoc = result_detailDoc[0]
                            json_sky['document_details'] = eval(result_detailDoc['documentJson'])
                            json_sky['document_details_string'] = result_detailDoc['documentJson']
                        else:
                            jsondetailsDoc = {}
                            jsondetailsDoc['document_type'] = None
                            jsondetailsDoc['document_name'] = None
                            jsondetailsDoc['document_remark'] = None
                            json_sky['document_details'] = jsondetailsDoc
                            json_sky['document_details_string'] = str(jsondetailsDoc)
                    else:
                        jsondetailsDoc = {}
                        jsondetailsDoc['document_type'] = None
                        jsondetailsDoc['document_name'] = None
                        jsondetailsDoc['document_remark'] = None
                        json_sky['document_details'] = jsondetailsDoc
                        json_sky['document_details_string'] = str(jsondetailsDoc)
                else:
                    jsondetailsDoc = {}
                    jsondetailsDoc['document_type'] = None
                    jsondetailsDoc['document_name'] = None
                    jsondetailsDoc['document_remark'] = None
                    json_sky['document_details'] = jsondetailsDoc
                    json_sky['document_details_string'] = str(jsondetailsDoc)
                json_sky['data_step'] = json_sky['data_step']
                json_sky['step_Upload'] = json_sky['step_Upload']

                arr_get.append(json_sky)
            if len(arr_get) != 0:
                return {'result':'OK','messageText':arr_get,'status_Code':200}
            else:
                return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
        except Exception as ex:
            print(str(ex))
            return {'result': 'ER', 'messageText': str(ex)}

    def select_get_templateandusername_new_biz_v3(self,username,template):
        self.template = template
        self.username = username
        try:
            arr_signpage = []
            arr_get = []
            strQueryUser1 = ''' SELECT "step_Code","step_Data","step_Max","username","email","DateTime","step_Description","step_Name","step_Upload","template_images","template_biz",
                "qrCode_position","status","status_Update","documentDetails","urgent_type","webhook","condition_temp","email_center","formula_temp","digit_sign","page_sign_options",
                "options_page","status_use","time_expire","importance_doc","last_digit_sign","rpa","dms","onebox","detail_service","status_ref" FROM "tb_step_template" '''

            with slave.connect() as connection:
                result = connection.execute(text(''' '''+ strQueryUser1 +''' WHERE "step_Code" = :step_Code AND "status" = 'ACTIVE' ORDER BY "sid" ASC '''),step_Code=self.template)
                connection.close()
            query_ = [dict(row) for row in result] 

            print(len(query_))
            for row in query_ :
                json_sky = {}
                tmp_muti_sign = False
                json_sky['status_use'] = row['status_use']
                json_sky['stamp_all'] = row['page_sign_options']
                json_sky['template_webhook'] = row['webhook']
                json_sky['email_center'] = row['email_center']
                json_sky['step_Code'] = row['step_Code']
                json_sky['dateTime'] = row['DateTime']
                json_sky['dateTime_string'] = str(row['DateTime']).split('+')[0]
                json_sky['data_step'] = json.dumps(row['step_Data'])
                json_sky['data_step'] = json.loads(json_sky['data_step'])
                json_sky['step_Upload'] = json.dumps(row['step_Upload'])
                json_sky['step_Upload'] = json.loads(json_sky['step_Upload'])
                json_sky['step_Description'] = row['step_Description']
                json_sky['condition_string'] = row['condition_temp']
                json_sky['stamp_all'] = row['page_sign_options']
                json_sky['options_page_string'] = str(row['options_page'])
                json_sky['template_biz'] = str(row['template_biz'])
                json_sky['status_use'] = str(row['status_use'])
                json_sky['status_ref'] = row['status_ref']
                # try:
                #     json_sky['template_images'] = eval(row['template_images'])
                # except Exception as e:
                #     json_sky['template_images'] = None
                try:
                    data_step = json_sky['data_step']
                    data_step = eval(data_step)
                    if row['step_Max'] != 1:
                        step_infomation = list(eval(row['step_Data']))
                    else:
                        step_infomation = [data_step]
                    tmp_sign_detail_list = []
                    for i in range(len(step_infomation)):
                        sign_json_info = {}
                        tmp_sign_list_info = []
                        step_ = step_infomation[i]
                        step_num = step_infomation[i]['step_num']
                        if 'step_sign' in step_:
                            tmp_stepsign = step_['step_sign']
                            tmp_status_stepsign = tmp_stepsign['status']
                            if tmp_status_stepsign == True:
                                tmp_muti_sign = True
                                tmp_data_stepsign = tmp_stepsign['data']
                                for y in range(len(tmp_data_stepsign)):
                                    step_signning = tmp_data_stepsign[y]
                                    # print(step_signning)
                                    tmp_sign_list_info.append(step_signning)
                        # print(tmp_sign_list_info)
                        for u in range(len(step_['step_detail'])):
                            step_2 = step_['step_detail'][u]
                            for zz in range(len(step_2['activity_data'])): 
                                if 'status' in step_2['activity_data'][zz]:
                                    # print(step_2['activity_data'][zz])
                                    sign_json_info = step_2['activity_data'][zz]
                                    tmp_sign_list_info.append(sign_json_info)
                        sign_json_info = {
                            'data':tmp_sign_list_info,
                            'step_num':step_num
                        }
                        tmp_sign_detail_list.append(sign_json_info)
                        # print(tmp_sign_detail_list)
                    # print(tmp_sign_detail_list)
                    for n in range(len(tmp_sign_detail_list)):
                        tmp_data = tmp_sign_detail_list[n]
                        tmp_signdata = tmp_data['data']
                        for z in range(len(tmp_signdata)):
                            tmp_sign_page = tmp_signdata[z]
                            if 'sign_page' in tmp_sign_page:
                                # print()
                                arr_signpage.append(int(tmp_sign_page['sign_page']))
                        # print(tmp_data)
                    json_sky['page_require'] = max(arr_signpage)
                    json_sky['sign_info'] = (tmp_sign_detail_list)
                except Exception as e:
                    exc_type, exc_obj, exc_tb = sys.exc_info()
                    fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                    print(exc_type, fname, exc_tb.tb_lineno)
                    json_sky['sign_info'] = []
                json_sky['multi_sign'] = tmp_muti_sign
                try:
                    json_sky['options_page'] = eval(row['options_page'])
                except Exception as e:
                    json_sky['options_page'] = {}
                try:
                    json_sky['formula_temp'] = eval(row['formula_temp'])
                    json_sky['formula_temp_string'] = row['formula_temp']
                except Exception as e:
                    json_sky['formula_temp'] = None
                    json_sky['formula_temp_string'] = None
                json_sky['digit_sign'] = bool(row['digit_sign'])
                if row['documentDetails'] != None:
                    if str(row['documentDetails']).replace(' ','') != '':
                        if row['template_biz'] == '':
                            with slave.connect() as connection:
                                result = connection.execute(text(''' SELECT "documentJson" FROM "tb_document_detail" WHERE "documentUser" = :username AND "documentType" = :docDetail AND "documentStatus" = 'ACTIVE' ''')
                                    ,username=row['username'],docDetail=row['documentDetails'])
                                connection.close()
                            result_detailDoc = [dict(row) for row in result]

                        else:
                            tmpeval = eval(row['template_biz'])
                            tmp_id_card_num = tmpeval['id_card_num']
                            taxid = '%{}%'.format(tmp_id_card_num)
                            with slave.connect() as connection:
                                result = connection.execute(text(''' SELECT "documentJson" FROM "tb_document_detail" WHERE "biz_info" LIKE :taxid AND "documentType" = :docDetail AND "documentStatus" = 'ACTIVE' ''')
                                    ,taxid=taxid,docDetail=row['documentDetails'])
                                connection.close()
                            result_detailDoc = [dict(row) for row in result]

                        if result_detailDoc != []:
                            result_detailDoc = result_detailDoc[0]
                            json_sky['document_details'] = eval(result_detailDoc['documentJson'])
                            json_sky['document_details_string'] = result_detailDoc['documentJson']
                        else:
                            jsondetailsDoc = {}
                            jsondetailsDoc['document_type'] = None
                            jsondetailsDoc['document_name'] = None
                            jsondetailsDoc['document_remark'] = None
                            json_sky['document_details'] = jsondetailsDoc
                            json_sky['document_details_string'] = str(jsondetailsDoc)
                    else:
                        jsondetailsDoc = {}
                        jsondetailsDoc['document_type'] = None
                        jsondetailsDoc['document_name'] = None
                        jsondetailsDoc['document_remark'] = None
                        json_sky['document_details'] = jsondetailsDoc
                        json_sky['document_details_string'] = str(jsondetailsDoc)
                else:
                    jsondetailsDoc = {}
                    jsondetailsDoc['document_type'] = None
                    jsondetailsDoc['document_name'] = None
                    jsondetailsDoc['document_remark'] = None
                    json_sky['document_details'] = jsondetailsDoc
                    json_sky['document_details_string'] = str(jsondetailsDoc)
                try:
                    json_sky['template_String'] = eval(str(row['template_images']))
                except Exception as ex:
                    return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล template_String ให้เป็น Json ได้'}
                try:
                    data_step = eval(json_sky['data_step'])
                except Exception as ex:
                    return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล Step ให้เป็น Json ได้'}
                try:
                    step_Upload = eval(json_sky['step_Upload'])
                except Exception as ex:
                    return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล step_Upload ให้เป็น Json ได้'}
                json_sky['username'] = row['username']
                json_sky['step_Max'] = row['step_Max']
                json_sky['step_Name'] = row['step_Name']
                if row['urgent_type'] != None:
                    json_sky['urgent_code'] = row['urgent_type']
                    if row['urgent_type'] == 'M':
                        json_sky['urgent_string_th'] = 'ปกติ'
                        json_sky['urgent_string_en'] = 'MEDIUM'
                    elif row['urgent_type'] == 'U':
                        json_sky['urgent_string_th'] = 'ด่วน'
                        json_sky['urgent_string_en'] = 'URGENT'
                    elif row['urgent_type'] == 'I':
                        json_sky['urgent_string_th'] = 'ด่วนมาก'
                        json_sky['urgent_string_en'] = 'IMMEDIATE'
                else:
                    json_sky['urgent_code'] = None
                    json_sky['urgent_string_th'] = None
                    json_sky['urgent_string_en'] = None
                if row['qrCode_position'] != None:
                    try:
                        json_sky['qrCode_position'] = eval(row['qrCode_position'])
                    except Exception as ex:
                        return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล qrCode_position ให้เป็น Json ได้'}
                else:
                    json_sky['qrCode_position'] = None
                json_sky['email'] = row['email']
                if json_sky['step_Max'] == 1:
                    json_sky['data_step'] = [data_step]
                else:
                    json_sky['data_step'] = data_step
                json_sky['step_Upload'] = step_Upload
                tmp_importance_doc = None
                list_time_expire = []
                last_digit_sign = False
                if row['importance_doc'] != None:
                    if row['importance_doc'] == '0':
                        tmp_importance_doc = 'สำคัญมาก'
                    elif row['importance_doc'] == '1':
                        tmp_importance_doc = 'สำคัญปานกลาง'
                    elif row['importance_doc'] == '2':
                        tmp_importance_doc = 'สำคัญปกติ'
                    elif row['importance_doc'] == '3':
                        tmp_importance_doc = 'ไม่ได้กำหนดความสำคัญ'
                if row['time_expire'] != None:
                    hour = int(row['time_expire']) % 24
                    day = int(int(row['time_expire']) / 24)
                    list_time_expire = [day,hour] 
                else: 
                    list_time_expire = None
                print(row['last_digit_sign'] )
                if row['last_digit_sign'] == None:
                    last_digit_sign = None
                else:
                    if (row['last_digit_sign']) == "false":
                        last_digit_sign = False
                    else:
                        last_digit_sign = True
                json_sky['importance'] = tmp_importance_doc
                json_sky['time_expire'] = list_time_expire
                json_sky['last_digit_sign'] = last_digit_sign
                arr_get.append(json_sky)
            if len(arr_get) != 0:
                return {'result':'OK','messageText':arr_get,'status_Code':200}
            else:
                return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result': 'ER', 'messageText': str(ex)}

    def select_get_template_Reject_v12(self, username,offset,limit):
        self.username = username
        self.limit = limit
        self.offset = offset
        try:
            arr_get = []
            query_ = None
            strQueryUser1 = ''' SELECT "step_Code","step_Data","step_Max","username","email","DateTime","step_Description","step_Name","step_Upload","template_images","template_biz",
                "qrCode_position","status","status_Update","documentDetails","urgent_type","webhook","condition_temp","email_center","formula_temp","digit_sign","page_sign_options",
                "options_page","status_use","time_expire","importance_doc","last_digit_sign","rpa","dms","onebox","detail_service","status_ref" FROM "tb_step_template" '''
            # if self.offset == '' or self.limit == '' :
            #     return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
            if self.limit == '' and self.offset == '':
                with slave.connect() as connection:
                    result = connection.execute(text(''' '''+ strQueryUser1 +''' WHERE "username" = :username AND "status" = 'REJECT' ORDER BY "sid" ASC '''),username=self.username)
                    connection.close()
                query_ = [dict(row) for row in result] 

            else :
                with slave.connect() as connection:
                    result = connection.execute(text(''' '''+ strQueryUser1 +''' WHERE "username" = :username AND "status" = 'REJECT' ORDER BY "sid" ASC limit(:limit) offset(:offset) ''')
                        ,username=self.username,limit=int(self.limit),offset=int(self.offset))
                    connection.close()
                query_ = [dict(row) for row in result] 
            
            print(len(query_))
            for i in range(len(query_)):
                row = query_[i]
                json_sky = {}
                json_sky['status_use'] = row['status_use']
                json_sky['step_Code'] = row['step_Code']
                json_sky['dateTime'] = row['DateTime']
                json_sky['dateTime_string'] = str(row['DateTime']).split('+')[0]                
                json_sky['data_step'] = json.dumps(row['step_Data'])
                json_sky['data_step'] = json.loads(json_sky['data_step'])
                # json_sky['template_String'] = k.template_images
                json_sky['step_Upload'] = json.dumps(row['step_Upload'])
                json_sky['step_Upload'] = json.loads(json_sky['step_Upload'])
                json_sky['options_page'] = row['options_page']
                json_sky['status_ref'] = row['status_ref']
                try:
                    data_step = eval(json_sky['data_step'])
                except Exception as ex:
                    return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล Step ให้เป็น Json ได้'}
                try:                    
                    step_Upload = eval(json_sky['step_Upload'])                    
                except Exception as ex:
                    return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล step_Upload ให้เป็น Json ได้'}
                json_sky['username'] = row['username']
                json_sky['step_Max'] = row['step_Max']
                json_sky['step_Name'] = row['step_Name']
                json_sky['status_Update'] = row['status_Update']
                json_sky['status_Update_string'] = str(row['status_Update']).split('+')[0]
                if row['qrCode_position'] != None:
                    try:
                        json_sky['qrCode_position'] = eval(row['qrCode_position'])
                    except Exception as ex:
                        return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล qrCode_position ให้เป็น Json ได้'}
                else:
                    json_sky['qrCode_position'] = None
                json_sky['step_Description'] = row['step_Description']
                json_sky['email'] = row['email']
                if json_sky['step_Max'] == 1:
                    json_sky['data_step'] = [data_step]
                else:
                    json_sky['data_step'] = data_step
                json_sky['step_Upload'] = step_Upload
                if row['urgent_type'] != None:
                    json_sky['urgent_code'] = row['urgent_type']
                    if row['urgent_type'] == 'M':
                        json_sky['urgent_string_th'] = 'ปกติ'
                        json_sky['urgent_string_en'] = 'MEDIUM'
                    elif k.urgent_type == 'U':
                        json_sky['urgent_string_th'] = 'ด่วน'
                        json_sky['urgent_string_en'] = 'URGENT'
                    elif k.urgent_type == 'I':
                        json_sky['urgent_string_th'] = 'ด่วนมาก'
                        json_sky['urgent_string_en'] = 'IMMEDIATE'
                else:
                    json_sky['urgent_code'] = None
                    json_sky['urgent_string_th'] = None
                    json_sky['urgent_string_en'] = None
                if row['documentDetails'] != None:
                    if str(row['documentDetails']).replace(' ','') != '':
                        with slave.connect() as connection:
                            result = connection.execute(text(''' SELECT "documentJson" FROM "tb_document_detail" WHERE "documentUser" = :username AND "documentType" = :docDetail ''')
                                ,username=row['username'],docDetail=row['documentDetails'])
                            connection.close()
                        result_detailDoc = [dict(row) for row in result]
                        
                        if result_detailDoc != []:
                            result_detailDoc = result_detailDoc[0]
                            json_sky['document_details'] = eval(result_detailDoc['documentJson'])
                            json_sky['document_details_string'] = result_detailDoc['documentJson']
                        else:
                            jsondetailsDoc = {}
                            jsondetailsDoc['document_type'] = None
                            jsondetailsDoc['document_name'] = None
                            jsondetailsDoc['document_remark'] = None
                            json_sky['document_details'] = jsondetailsDoc
                            json_sky['document_details_string'] = str(jsondetailsDoc)
                    else:
                        jsondetailsDoc = {}
                        jsondetailsDoc['document_type'] = None
                        jsondetailsDoc['document_name'] = None
                        jsondetailsDoc['document_remark'] = None
                        json_sky['document_details'] = jsondetailsDoc
                        json_sky['document_details_string'] = str(jsondetailsDoc)
                else:
                    jsondetailsDoc = {}
                    jsondetailsDoc['document_type'] = None
                    jsondetailsDoc['document_name'] = None
                    jsondetailsDoc['document_remark'] = None
                    json_sky['document_details'] = jsondetailsDoc
                    json_sky['document_details_string'] = str(jsondetailsDoc)
                arr_get.append(json_sky)
            print(len(arr_get))
            if len(arr_get) != 0:
                return {'result':'OK','messageText':arr_get,'status_Code':200}
            else:
                return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
        except Exception as ex:
            return {'result': 'ER', 'messageText': str(ex)}

    def select_get_template_tax_new_v13(self,username,taxId,offset,limit):
        self.username = username
        self.taxId = taxId
        self.offset = offset
        self.limit = limit
        tax_id = '%{}%'.format(self.taxId)
        tmp_json = {}
        tmp_arr_get = []
        strQueryTax1 = ''' SELECT "step_Code","step_Data","step_Max","username",ST."email","DateTime","step_Description","step_Name","step_Upload","template_biz","qrCode_position","status","documentDetails",
            "urgent_type","webhook","condition_temp","email_center","formula_temp","digit_sign","page_sign_options","options_page","status_use","time_expire","importance_doc","last_digit_sign","status_ref",DT."documentJson"             
            FROM "tb_step_template" ST JOIN "tb_document_detail" DT ON DT."documentType" = ST."documentDetails"
            WHERE ST."status" = 'ACTIVE' AND DT."documentStatus" = 'ACTIVE' AND DT."biz_info" != 'None' AND DT."biz_info" != '' ''' 
        strQueryUser1 = ''' SELECT "step_Code","step_Data","step_Max","username",ST."email","DateTime","step_Description","step_Name","step_Upload","template_biz","qrCode_position","status","documentDetails",
            "urgent_type","webhook","condition_temp","email_center","formula_temp","digit_sign","page_sign_options","options_page","status_use","time_expire","importance_doc","last_digit_sign","status_ref",
            DT."documentJson",DT."documentUser",DT."documentStatus",DT."documentType"             
            FROM "tb_step_template" ST JOIN "tb_document_detail" DT ON DT."documentType" = ST."documentDetails"
            WHERE ST."status" = 'ACTIVE' AND (ST."template_biz" = 'None' OR ST."template_biz" = '') AND DT."documentStatus" = 'ACTIVE' AND (DT."biz_info" = 'None' OR DT."biz_info" = '') ''' 
        try:
            tmp_list_status = ["ACTIVE"]
            query_temp = None          
            if self.taxId != None :
                print('tax',self.taxId)
                if self.offset == '' and self.limit == '' :
                    with slave.connect() as connection:
                        result = connection.execute(text('''  '''+ strQueryTax1 +''' AND ST."template_biz" LIKE :tax_id AND DT."biz_info" LIKE :tax_id ORDER BY ST."documentDetails" ASC '''),tax_id=tax_id)
                        connection.close()
                    query_temp = [dict(row) for row in result] 
                else:
                    with slave.connect() as connection:
                        result = connection.execute(text('''  '''+ strQueryTax1 +''' AND ST."template_biz" LIKE :tax_id AND DT."biz_info" LIKE :tax_id ORDER BY ST."documentDetails" ASC limit(:limit) offset(:offset) ''')
                            ,tax_id=tax_id,limit=int(self.limit),offset=int(self.offset))
                        connection.close()
                    query_temp = [dict(row) for row in result] 

            elif self.username != None:
                print('userUSER',self.username)
                if self.offset == '' or self.limit == '':     
                    with slave.connect() as connection:
                        result = connection.execute(text('''  '''+ strQueryUser1 +''' AND ST."username" = :username AND DT."documentUser" = :username ORDER BY ST."sid" ASC '''),username=self.username)
                        connection.close()
                    query_temp = [dict(row) for row in result] 
                else:
                    with slave.connect() as connection:
                        result = connection.execute(text('''  '''+ strQueryUser1 +''' AND ST."username" = :username AND DT."documentUser" = :username ORDER BY ST."sid" ASC limit(:limit) offset(:offset) ''')
                            ,username=self.username,limit=int(self.limit),offset=int(self.offset))
                        connection.close()
                    query_temp = [dict(row) for row in result] 

            if query_temp == []:
                return {'result':'ER','messageText': 'ไม่พบข้อมูล','status_Code':200}             
            print('len',len(query_temp))            
            for row in query_temp:                
                tmp_asdict = row
                print(tmp_asdict['last_digit_sign'])
                # print('tmp_asdict',tmp_asdict['status_use'])
                # print(tmp_asdict['step_Code'])
                tmp_importance_doc = None
                list_time_expire = []
                last_digit_sign = False
                if tmp_asdict['status_ref'] == None:
                    status_ref = None
                else:
                    status_ref = eval(tmp_asdict['status_ref'])
                if tmp_asdict['importance_doc'] != None:
                    if tmp_asdict['importance_doc'] == '0':
                        tmp_importance_doc = 'สำคัญมาก'
                    elif tmp_asdict['importance_doc'] == '1':
                        tmp_importance_doc = 'สำคัญปานกลาง'
                    elif tmp_asdict['importance_doc'] == '2':
                        tmp_importance_doc = 'สำคัญปกติ'
                if tmp_asdict['time_expire'] != None:
                    hour = int(tmp_asdict['time_expire']) % 24
                    day = int(int(tmp_asdict['time_expire']) / 24)
                    list_time_expire = [day,hour] 
                else:
                    list_time_expire = None 
                if tmp_asdict['last_digit_sign'] == None:
                    last_digit_sign = None
                else:
                    last_digit_sign = bool(tmp_asdict['last_digit_sign'])
                try:
                    tmp_options_page = eval(tmp_asdict['options_page'])
                except Exception as e:
                    tmp_options_page = {}
                try:
                    tmpformula_temp = eval(tmp_asdict['formula_temp'])
                    tmpformula_temp_string = tmp_asdict['formula_temp']
                except Exception as e:
                    tmpformula_temp = None
                    tmpformula_temp_string = tmp_asdict['formula_temp']
                if tmp_asdict['qrCode_position'] != None:
                    try:
                        tmp_qrCode_position = eval(tmp_asdict['qrCode_position'])
                    except Exception as ex:
                        return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล qrCode_position ให้เป็น Json ได้'}
                else:
                    tmp_qrCode_position = None
                if tmp_asdict['documentDetails'] != None:
                    tmp_document_typeJson = eval(tmp_asdict['documentJson'])
                    tmp_document_typeJson_string = tmp_asdict['documentJson']
                else:
                    jsondetailsDoc = {}
                    jsondetailsDoc['document_type'] = None
                    jsondetailsDoc['document_name'] = None
                    jsondetailsDoc['document_remark'] = None
                    tmp_document_typeJson = jsondetailsDoc
                    tmp_document_typeJson_string = str(jsondetailsDoc)
                tmp_urgent_type = 'M'
                tmp_urgent_string_th = 'ปกติ'
                tmp_urgent_string_en = 'MEDIUM'
                if tmp_asdict['urgent_type'] != None:
                    tmp_urgent_type = tmp_asdict['urgent_type']
                    if tmp_urgent_type == 'M':
                        tmp_urgent_string_th = 'ปกติ'
                        tmp_urgent_string_en = 'MEDIUM'
                    elif tmp_urgent_type == 'U':
                        tmp_urgent_string_th = 'ด่วน'
                        tmp_urgent_string_en = 'URGENT'
                    elif tmp_urgent_type == 'I':
                        tmp_urgent_string_th = 'ด่วนมาก'
                        tmp_urgent_string_en = 'IMMEDIATE'
                try:
                    data_step = eval(tmp_asdict['step_Data'])
                except Exception as ex:
                    return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล Step ให้เป็น Json ได้'}
                try:
                    step_Upload = eval(tmp_asdict['step_Upload'])
                except Exception as ex:
                    return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล step_Upload ให้เป็น Json ได้'}
                if tmp_asdict['step_Max'] == 1:
                    tmp_data_step = [data_step]
                else:
                    tmp_data_step = data_step
                try:
                    data_step = tmp_asdict['step_Data']
                    data_step = eval(data_step)
                    if tmp_asdict['step_Max'] != 1:
                        step_infomation = list(eval(tmp_asdict['step_Data']))
                    else:
                        step_infomation = [data_step]
                    tmp_sign_detail_list = []
                    muti_sign = False
                    for i in range(len(step_infomation)):
                        sign_json_info = {}
                        tmp_sign_list_info = []
                        step_ = step_infomation[i]
                        step_num = step_infomation[i]['step_num']
                        # print(type(step_infomation[i]))
                        if 'step_sign' in step_:
                            tmp_stepsign = step_['step_sign']
                            tmp_status_stepsign = tmp_stepsign['status']
                            if tmp_status_stepsign == True:
                                muti_sign = True
                                tmp_data_stepsign = tmp_stepsign['data']
                                for y in range(len(tmp_data_stepsign)):
                                    step_signning = tmp_data_stepsign[y]
                                    tmp_sign_list_info.append(step_signning)
                        for u in range(len(step_['step_detail'])):
                            step_2 = step_['step_detail'][u]
                            for zz in range(len(step_2['activity_data'])): 
                                if 'status' in step_2['activity_data'][zz]:
                                    sign_json_info = step_2['activity_data'][zz]
                                    tmp_sign_list_info.append(sign_json_info)
                        sign_json_info = {
                            'data':tmp_sign_list_info,
                            'step_num':step_num
                        }
                        tmp_sign_detail_list.append(sign_json_info)
                    # json_sky['sign_info'] = tmp_sign_detail_list
                except Exception as e:
                    exc_type, exc_obj, exc_tb = sys.exc_info()
                    fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                    print(exc_type, fname, exc_tb.tb_lineno)
                    tmp_sign_detail_list = []
                # json_sky['multi_sign'] = muti_sign
                
                tmp_json = {
                    'stamp_all':tmp_asdict['page_sign_options'],
                    'step_Code':tmp_asdict['step_Code'],
                    'dateTime':tmp_asdict['DateTime'],
                    'dateTime_string':str(tmp_asdict['DateTime']).split('+')[0],
                    'condition_string':tmp_asdict['condition_temp'],
                    'step_Upload':json.loads(json.dumps(tmp_asdict['step_Upload'])),
                    'template_webhook':tmp_asdict['webhook'],
                    'email_center':tmp_asdict['email_center'],
                    'options_page_string':tmp_asdict['options_page'],
                    'options_page':tmp_options_page,
                    'formula_temp_string':tmpformula_temp_string,
                    'formula_temp':tmpformula_temp,
                    'digit_sign':bool(tmp_asdict['digit_sign']),
                    'username':tmp_asdict['username'],
                    'step_Max':int(tmp_asdict['step_Max']),
                    'step_Name':tmp_asdict['step_Name'],
                    'qrCode_position':tmp_qrCode_position,
                    'step_Description':tmp_asdict['step_Description'],
                    'document_details':tmp_document_typeJson,
                    'document_details_string':tmp_document_typeJson_string,
                    'email':tmp_asdict['email'],
                    'urgent_code':tmp_urgent_type,
                    'urgent_string_th':tmp_urgent_string_th,
                    'urgent_string_en':tmp_urgent_string_en,
                    'data_step':tmp_data_step,
                    'sign_info':tmp_sign_detail_list,
                    'multi_sign':muti_sign,
                    'status_use': tmp_asdict['status_use'],
                    'importance': tmp_importance_doc,
                    'time_expire': list_time_expire,
                    'last_digit_sign' : last_digit_sign,
                    'status_ref' : status_ref
                }
                tmp_arr_get.append(tmp_json)
            if len(tmp_arr_get) != 0:
                return {'result':'OK','messageText':tmp_arr_get,'status_Code':200}
            else:
                return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
        except Exception as ex:
            print(ex)
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result': 'ER', 'messageText': str(ex)}
        finally:
            db.session.close()

    def select_documentTemplateDetails_v6(self,username,taxid,documentType,status,service,limit,offset):
        try:
            self.username = username
            self.taxid = taxid
            self.documentType = documentType
            self.status = status
            self.service = service
            self.limit = limit
            self.offset = offset
            taxid = '%{}%'.format(self.taxid)
            arr_data = []     
            stringQuery = ''' SELECT "id","documentJson","documentUser","documentUpdate","documentStatus","email","documentType","documentCode","biz_info","sign_page_options",
                "service_permission","other_service_permission","chat_bot" FROM "tb_document_detail" '''       
            stringQuery2 = ''' "documentStatus" = 'ACTIVE' ORDER BY "documentUpdate" DESC  limit(:limit) offset(:offset) '''
        
            if self.username != None and self.taxid== None and self.documentType == None and self.status == None and self.service == None : # มี username
                with slave.connect() as connection:
                    result = connection.execute(text(''' '''+ stringQuery +''' WHERE "documentUser" = :username AND "biz_info" = '' AND '''+ stringQuery2 +''' ''')\
                        ,username=self.username,limit=self.limit,offset=self.offset)
                    connection.close()
                query_tmp = [dict(row) for row in result]
            elif self.username == None and self.taxid != None and self.documentType == None and self.status == None and self.service == None : # มี taxid
                with slave.connect() as connection:
                    result = connection.execute(text(''' '''+ stringQuery +''' WHERE "biz_info" LIKE :taxid AND '''+ stringQuery2 +''' ''')\
                        ,taxid=taxid,limit=self.limit,offset=self.offset)                        
                    connection.close()    
                query_tmp = [dict(row) for row in result]              
            elif self.username != None and self.taxid == None and self.documentType == None and self.status == None and self.service != None : # มี username and service 
                with slave.connect() as connection:
                    result = connection.execute(text(''' '''+ stringQuery +''' WHERE "documentUser" = :username AND "service_permission" = :service AND '''+ stringQuery2 +''' ''')\
                        ,username=self.username,service=self.service,limit=self.limit,offset=self.offset)
                    connection.close()  
                query_tmp = [dict(row) for row in result]    
            elif self.username == None and self.taxid != None and self.documentType == None and self.status == None and self.service != None : # มี taxid and service 
                with slave.connect() as connection:
                    result = connection.execute(text(''' '''+ stringQuery +''' WHERE "biz_info" LIKE :taxid AND "service_permission" = :service AND '''+ stringQuery2 +''' ''')\
                        ,taxid=taxid,service=self.service,limit=self.limit,offset=self.offset)
                    connection.close()
                query_tmp = [dict(row) for row in result]
            elif self.username != None and self.taxid == None and self.documentType != None and self.status == None and self.service == None : # มี username and docType
                with slave.connect() as connection:
                    result = connection.execute(text(''' '''+ stringQuery +''' WHERE "documentUser" = :username AND "documentType" = :docType AND '''+ stringQuery2 +''' ''')\
                        ,username=self.username,docType=self.documentType,limit=self.limit,offset=self.offset)
                    connection.close()
                query_tmp = [dict(row) for row in result]
            elif self.username != None and self.taxid == None and self.documentType == None and self.status != None and self.service == None : # มี username and status
                with slave.connect() as connection:
                    result = connection.execute(text(''' '''+ stringQuery +''' WHERE "documentUser" = :username AND lower("documentStatus") = lower(:status) ORDER BY "documentUpdate" DESC limit(:limit) offset(:offset) ''')\
                        ,username=self.username,status=self.status,limit=self.limit,offset=self.offset)
                    connection.close()
                query_tmp = [dict(row) for row in result]
            else:
                return {'result':'ER','messageText':None,'messageER':'Parameter incorrect','status_Code':404} 

            if query_tmp == []:
                return {'result':'ER','messageText':None,'messageER':'data not found','status_Code':200}
           
            print('lenQuery',len(query_tmp))
            for u in range(len(query_tmp)):
                tmp_json = query_tmp[u]
                try:
                    tmp_business_json = eval(tmp_json['biz_info'])
                except Exception as e:
                    tmp_business_json = None
                if tmp_json['chat_bot'] == None:
                    tmp_json['chat_bot'] = []
                else:
                    tmp_json['chat_bot'] = eval(tmp_json['chat_bot'])
                if tmp_json['other_service_permission'] == None:
                    tmp_json['other_service_permission'] = []         
                else:
                    tmp_json['other_service_permission'] = eval(tmp_json['other_service_permission'])
                jsondata = {
                    'documentJson': eval(tmp_json['documentJson']),
                    'documentUser': tmp_json['documentUser'],
                    'documentUpdate': tmp_json['documentUpdate'],
                    'documentUpdate_string': str(tmp_json['documentUpdate']),
                    'email': tmp_json['email'],
                    'documentType': tmp_json['documentType'],
                    'documentCode': tmp_json['documentCode'],
                    'status': tmp_json['documentStatus'],
                    'business_json': tmp_business_json,
                    'business_string': str(tmp_business_json),
                    'create_service': tmp_json['service_permission'],
                    'service_other': (tmp_json['other_service_permission']),
                    'chat_bot': tmp_json['chat_bot']
                }
                arr_data.append(jsondata)
            if len(arr_data) != 0:
                return {'result':'OK','messageText':arr_data}
            else:
                return {'result':'ER','messageER':'ไม่พบข้อมูล'}

        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageER':str(ex),'status_Code':200}

    def select_documentTemplateDetails_sum_v6(self,username,taxid,documentType,status,service):
        try:
            self.username = username
            self.taxid = taxid
            self.documentType = documentType
            self.status = status
            self.service = service
            taxid = '%{}%'.format(self.taxid)
            arr_data = []     
            stringQuery = ''' SELECT COUNT("id") FROM "tb_document_detail" '''       
        
            if self.username != None and self.taxid== None and self.documentType == None and self.status == None and self.service == None : # มี username
                with slave.connect() as connection:
                    result = connection.execute(text(''' '''+ stringQuery +''' WHERE "documentUser" = :username AND "biz_info" = '' AND "documentStatus" = 'ACTIVE' '''),username=self.username)
                    connection.close()
                query_tmp = [dict(row) for row in result]
            elif self.username == None and self.taxid != None and self.documentType == None and self.status == None and self.service == None : # มี taxid
                with slave.connect() as connection:
                    result = connection.execute(text(''' '''+ stringQuery +''' WHERE "biz_info" LIKE :taxid AND "documentStatus" = 'ACTIVE' '''),taxid=taxid)
                    connection.close()    
                query_tmp = [dict(row) for row in result]              
            elif self.username != None and self.taxid == None and self.documentType == None and self.status == None and self.service != None : # มี username and service 
                with slave.connect() as connection:
                    result = connection.execute(text(''' '''+ stringQuery +''' WHERE "documentUser" = :username AND "documentStatus" = 'ACTIVE' AND "service_permission" = :service ''')\
                        ,username=self.username,service=self.service)
                    connection.close()  
                query_tmp = [dict(row) for row in result]    
            elif self.username == None and self.taxid != None and self.documentType == None and self.status == None and self.service != None : # มี taxid and service 
                with slave.connect() as connection:
                    result = connection.execute(text(''' '''+ stringQuery +''' WHERE "biz_info" LIKE :taxid AND "documentStatus" = 'ACTIVE' AND "service_permission" = :service ''')\
                        ,taxid=taxid,service=self.service)
                    connection.close()
                query_tmp = [dict(row) for row in result]
            elif self.username != None and self.taxid == None and self.documentType != None and self.status == None and self.service == None : # มี username and docType
                with slave.connect() as connection:
                    result = connection.execute(text(''' ''' + stringQuery + ''' WHERE "documentUser" = :username AND "documentStatus" = 'ACTIVE' AND "documentType" = :docType ''')\
                        ,username=self.username,docType=self.documentType)
                    connection.close()
                query_tmp = [dict(row) for row in result]
            elif self.username != None and self.taxid == None and self.documentType == None and self.status != None and self.service == None : # มี username and status
                with slave.connect() as connection:
                    result = connection.execute(text(''' '''+ stringQuery +''' WHERE "documentUser" = :username AND lower("documentStatus") = lower(:status)  ''')\
                        ,username=self.username,status=self.status)
                    connection.close()
                query_tmp = [dict(row) for row in result]
            else:
                return {'result':'ER','messageText':None,'messageER':'Parameter incorrect','status_Code':404} 
           
            count = query_tmp[0]
            print('lenQuery', count['count']) 
            jsondata = {
                'sum_documentDetail': count['count']
            }
            arr_data.append(jsondata)
            return {'result':'OK','messageText':arr_data,'status_Code':200,'messageER':None} 

        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':str(ex),'status_Code':200}

    def select_documentTemplateDetails_search_v6(self,username,taxid,documentType,status,service,limit,offset,keyword):
        try:
            self.username = username
            self.taxid = taxid
            self.documentType = documentType
            self.status = status
            self.service = service
            self.limit = limit
            self.offset = offset
            self.keyword = keyword
            keyword1 = '%{}%'.format(self.keyword)
            keyword2 = '%ment_name":"%{}%"%'.format(self.keyword)
            taxid = '%{}%'.format(self.taxid)
            arr_data = []     
            stringQuery = ''' SELECT "id","documentJson","documentUser","documentUpdate","documentStatus","email","documentType","documentCode","biz_info","sign_page_options",
                "service_permission","other_service_permission","chat_bot" FROM "tb_document_detail" '''  
            stringQuery2 = ''' (lower("email") LIKE lower(:keyword1) OR lower("documentType") LIKE lower(:keyword1) OR lower("documentJson") LIKE lower(:keyword2)) 
                ORDER BY "documentUpdate" DESC limit(:limit) offset(:offset) '''
            stringQuery3 = ''' "documentUpdate" >= :datetime1 AND "documentUpdate" <= :datetime2 ORDER BY "documentUpdate" DESC limit(:limit) offset(:offset) '''     
            
            try: 
                parse(self.keyword, fuzzy=False)
                print('key is datetime')
                dats = datetime.datetime.strptime(self.keyword, '%Y-%m-%d')
                datetime1 = dats.strftime('%Y-%m-%d 00:00:00')
                datetime2 = dats.strftime('%Y-%m-%d 23:59:59')
                if self.username != None and self.taxid== None and self.documentType == None and self.status == None and self.service == None : # มี username
                    with slave.connect() as connection:
                        result = connection.execute(text(''' '''+ stringQuery +''' WHERE "documentUser" = :username AND "biz_info" = '' AND "documentStatus" = 'ACTIVE' AND '''+ stringQuery3 +''' ''')\
                            ,username=self.username,datetime1=datetime1,datetime2=datetime2,limit=self.limit,offset=self.offset)
                        connection.close()
                    query_tmp = [dict(row) for row in result]
                elif self.username == None and self.taxid != None and self.documentType == None and self.status == None and self.service == None : # มี taxid
                    with slave.connect() as connection:
                        result = connection.execute(text(''' '''+ stringQuery +''' WHERE "biz_info" LIKE :taxid AND "documentStatus" = 'ACTIVE' AND '''+ stringQuery3 +''' ''')\
                            ,taxid=taxid,datetime1=datetime1,datetime2=datetime2,limit=self.limit,offset=self.offset)
                        connection.close()    
                    query_tmp = [dict(row) for row in result]              
                elif self.username != None and self.taxid == None and self.documentType == None and self.status == None and self.service != None : # มี username and service 
                    with slave.connect() as connection:
                        result = connection.execute(text(''' '''+ stringQuery +''' WHERE "documentUser" = :username AND "documentStatus" = 'ACTIVE' AND "service_permission" = :service AND '''+ stringQuery3 +''' ''')\
                            ,username=self.username,service=self.service,datetime1=datetime1,datetime2=datetime2,limit=self.limit,offset=self.offset)
                        connection.close()  
                    query_tmp = [dict(row) for row in result]    
                elif self.username == None and self.taxid != None and self.documentType == None and self.status == None and self.service != None : # มี taxid and service 
                    with slave.connect() as connection:
                        result = connection.execute(text(''' '''+ stringQuery +''' WHERE "biz_info" LIKE :taxid AND "documentStatus" = 'ACTIVE' AND "service_permission" = :service AND '''+ stringQuery3 +''' ''')\
                            ,taxid=taxid,service=self.service,datetime1=datetime1,datetime2=datetime2,limit=self.limit,offset=self.offset)
                        connection.close()
                    query_tmp = [dict(row) for row in result]
                elif self.username != None and self.taxid == None and self.documentType != None and self.status == None and self.service == None : # มี username and docType
                    with slave.connect() as connection:
                        result = connection.execute(text(''' ''' + stringQuery + ''' WHERE "documentUser" = :username AND "documentStatus" = 'ACTIVE' AND "documentType" = :docType AND '''+ stringQuery3 +''' ''')\
                            ,username=self.username,docType=self.documentType,datetime1=datetime1,datetime2=datetime2)
                        connection.close()
                    query_tmp = [dict(row) for row in result]
                elif self.username != None and self.taxid == None and self.documentType == None and self.status != None and self.service == None : # มี username and status
                    with slave.connect() as connection:
                        result = connection.execute(text(''' '''+ stringQuery +''' WHERE "documentUser" = :username AND lower("documentStatus") = lower(:status) AND '''+ stringQuery3 +''' ''')\
                            ,username=self.username,status=self.status,datetime1=datetime1,datetime2=datetime2,limit=self.limit,offset=self.offset)
                        connection.close()
                    query_tmp = [dict(row) for row in result]
                else:
                    return {'result':'ER','messageText':None,'messageER':'Parameter incorrect','status_Code':404}

            except ValueError:
                print('key not datetime') 
                if self.username != None and self.taxid== None and self.documentType == None and self.status == None and self.service == None : # มี username
                    with slave.connect() as connection:
                        result = connection.execute(text(''' '''+ stringQuery +''' WHERE "documentUser" = :username AND "biz_info" = '' AND "documentStatus" = 'ACTIVE' AND '''+ stringQuery2 +''' ''')\
                            ,username=self.username,keyword1=keyword1,keyword2=keyword2,limit=self.limit,offset=self.offset)
                        connection.close()
                    query_tmp = [dict(row) for row in result]
                elif self.username == None and self.taxid != None and self.documentType == None and self.status == None and self.service == None : # มี taxid
                    with slave.connect() as connection:
                        result = connection.execute(text(''' '''+ stringQuery +''' WHERE "biz_info" LIKE :taxid AND "documentStatus" = 'ACTIVE' AND '''+ stringQuery2 +''' ''')\
                            ,taxid=taxid,keyword1=keyword1,keyword2=keyword2,limit=self.limit,offset=self.offset)
                        connection.close()    
                    query_tmp = [dict(row) for row in result]              
                elif self.username != None and self.taxid == None and self.documentType == None and self.status == None and self.service != None : # มี username and service 
                    with slave.connect() as connection:
                        result = connection.execute(text(''' '''+ stringQuery +''' WHERE "documentUser" = :username AND "documentStatus" = 'ACTIVE' AND "service_permission" = :service AND '''+ stringQuery2 +'''''')\
                            ,username=self.username,service=self.service,keyword1=keyword1,keyword2=keyword2,limit=self.limit,offset=self.offset)
                        connection.close()  
                    query_tmp = [dict(row) for row in result]    
                elif self.username == None and self.taxid != None and self.documentType == None and self.status == None and self.service != None : # มี taxid and service 
                    with slave.connect() as connection:
                        result = connection.execute(text(''' '''+ stringQuery +''' WHERE "biz_info" LIKE :taxid AND "documentStatus" = 'ACTIVE' AND "service_permission" = :service AND '''+ stringQuery2 +''' ''')\
                            ,taxid=taxid,service=self.service,keyword1=keyword1,keyword2=keyword2,limit=self.limit,offset=self.offset)
                        connection.close()
                    query_tmp = [dict(row) for row in result]
                elif self.username != None and self.taxid == None and self.documentType != None and self.status == None and self.service == None : # มี username and docType
                    with slave.connect() as connection:
                        result = connection.execute(text(''' ''' + stringQuery + ''' WHERE "documentUser" = :username AND "documentStatus" = 'ACTIVE' AND "documentType" = :docType AND '''+ stringQuery2 +''' ''')\
                            ,username=self.username,docType=self.documentType,keyword1=keyword1,keyword2=keyword2,limit=self.limit,offset=self.offset)
                        connection.close()
                    query_tmp = [dict(row) for row in result]
                elif self.username != None and self.taxid == None and self.documentType == None and self.status != None and self.service == None : # มี username and status
                    with slave.connect() as connection:
                        result = connection.execute(text(''' '''+ stringQuery +''' WHERE "documentUser" = :username AND lower("documentStatus") = lower(:status) AND '''+ stringQuery2 +''' ''')\
                            ,username=self.username,status=self.status,keyword1=keyword1,keyword2=keyword2,limit=self.limit,offset=self.offset)
                        connection.close()
                    query_tmp = [dict(row) for row in result]
                else:
                    return {'result':'ER','messageText':None,'messageER':'Parameter incorrect','status_Code':404}

            if query_tmp == []:
                return {'result':'ER','messageText':None,'messageER':'data not found','status_Code':200}
           
            print('lenQuery',len(query_tmp))
            for u in range(len(query_tmp)):
                tmp_json = query_tmp[u]
                try:
                    tmp_business_json = eval(tmp_json['biz_info'])
                except Exception as e:
                    tmp_business_json = None
                if tmp_json['chat_bot'] == None:
                    tmp_json['chat_bot'] = []
                else:
                    tmp_json['chat_bot'] = eval(tmp_json['chat_bot'])
                if tmp_json['other_service_permission'] == None:
                    tmp_json['other_service_permission'] = []         
                else:
                    tmp_json['other_service_permission'] = eval(tmp_json['other_service_permission'])
                jsondata = {
                    'documentJson': eval(tmp_json['documentJson']),
                    'documentUser': tmp_json['documentUser'],
                    'documentUpdate': tmp_json['documentUpdate'],
                    'documentUpdate_string': str(tmp_json['documentUpdate']),
                    'email': tmp_json['email'],
                    'documentType': tmp_json['documentType'],
                    'documentCode': tmp_json['documentCode'],
                    'status': tmp_json['documentStatus'],
                    'business_json': tmp_business_json,
                    'business_string': str(tmp_business_json),
                    'create_service': tmp_json['service_permission'],
                    'service_other': (tmp_json['other_service_permission']),
                    'chat_bot': tmp_json['chat_bot']
                }
                arr_data.append(jsondata)
            if len(arr_data) != 0:
                return {'result':'OK','messageText':arr_data}
            else:
                return {'result':'ER','messageER':'ไม่พบข้อมูล'}

        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageER':str(ex),'status_Code':200}

    def select_documentTemplateDetails_search_sum_v6(self,username,taxid,documentType,status,service,keyword): 
        try:
            self.username = username
            self.taxid = taxid
            self.documentType = documentType
            self.status = status
            self.service = service
            self.keyword = keyword
            keyword1 = '%{}%'.format(self.keyword)
            keyword2 = '%ment_name":"%{}%"%'.format(self.keyword)
            taxid = '%{}%'.format(self.taxid)
            arr_data = []     
            stringQuery = ''' SELECT COUNT("id") FROM "tb_document_detail" '''  
            stringQuery2 = ''' (lower("email") LIKE lower(:keyword1) OR lower("documentType") LIKE lower(:keyword1) OR lower("documentJson") LIKE lower(:keyword2)) '''
            stringQuery3 = ''' "documentUpdate" >= :datetime1 AND "documentUpdate" <= :datetime2  '''     
            
            try: 
                parse(self.keyword, fuzzy=False)
                print('key is datetime')
                dats = datetime.datetime.strptime(self.keyword, '%Y-%m-%d')
                datetime1 = dats.strftime('%Y-%m-%d 00:00:00')
                datetime2 = dats.strftime('%Y-%m-%d 23:59:59')
                if self.username != None and self.taxid== None and self.documentType == None and self.status == None and self.service == None : # มี username
                    with slave.connect() as connection:
                        result = connection.execute(text(''' '''+ stringQuery +''' WHERE "documentUser" = :username AND "biz_info" = '' AND "documentStatus" = 'ACTIVE' AND '''+ stringQuery3 +''' ''')\
                            ,username=self.username,datetime1=datetime1,datetime2=datetime2)
                        connection.close()
                    query_tmp = [dict(row) for row in result]
                elif self.username == None and self.taxid != None and self.documentType == None and self.status == None and self.service == None : # มี taxid
                    with slave.connect() as connection:
                        result = connection.execute(text(''' '''+ stringQuery +''' WHERE "biz_info" LIKE :taxid AND "documentStatus" = 'ACTIVE' AND '''+ stringQuery3 +''' ''')\
                            ,taxid=taxid,datetime1=datetime1,datetime2=datetime2)
                        connection.close()    
                    query_tmp = [dict(row) for row in result]              
                elif self.username != None and self.taxid == None and self.documentType == None and self.status == None and self.service != None : # มี username and service 
                    with slave.connect() as connection:
                        result = connection.execute(text(''' '''+ stringQuery +''' WHERE "documentUser" = :username AND "documentStatus" = 'ACTIVE' AND "service_permission" = :service AND '''+ stringQuery3 +''' ''')\
                            ,username=self.username,service=self.service,datetime1=datetime1,datetime2=datetime2)
                        connection.close()  
                    query_tmp = [dict(row) for row in result]    
                elif self.username == None and self.taxid != None and self.documentType == None and self.status == None and self.service != None : # มี taxid and service 
                    with slave.connect() as connection:
                        result = connection.execute(text(''' '''+ stringQuery +''' WHERE "biz_info" LIKE :taxid AND "documentStatus" = 'ACTIVE' AND "service_permission" = :service AND '''+ stringQuery3 +''' ''')\
                            ,taxid=taxid,service=self.service,datetime1=datetime1,datetime2=datetime2)
                        connection.close()
                    query_tmp = [dict(row) for row in result]
                elif self.username != None and self.taxid == None and self.documentType != None and self.status == None and self.service == None : # มี username and docType
                    with slave.connect() as connection:
                        result = connection.execute(text(''' ''' + stringQuery + ''' WHERE "documentUser" = :username AND "documentStatus" = 'ACTIVE' AND "documentType" = :docType AND '''+ stringQuery3 +''' ''')\
                            ,username=self.username,docType=self.documentType,datetime1=datetime1,datetime2=datetime2)
                        connection.close()
                    query_tmp = [dict(row) for row in result]
                elif self.username != None and self.taxid == None and self.documentType == None and self.status != None and self.service == None : # มี username and status
                    with slave.connect() as connection:
                        result = connection.execute(text(''' '''+ stringQuery +''' WHERE "documentUser" = :username AND lower("documentStatus") = lower(:status) AND '''+ stringQuery3 +''' ''')\
                            ,username=self.username,status=self.status,datetime1=datetime1,datetime2=datetime2)
                        connection.close()
                    query_tmp = [dict(row) for row in result]
                else:
                    return {'result':'ER','messageText':None,'messageER':'Parameter incorrect','status_Code':404}

            except ValueError:
                print('key not datetime') 
                if self.username != None and self.taxid== None and self.documentType == None and self.status == None and self.service == None : # มี username
                    with slave.connect() as connection:
                        result = connection.execute(text(''' '''+ stringQuery +''' WHERE "documentUser" = :username AND "biz_info" = '' AND "documentStatus" = 'ACTIVE' AND '''+ stringQuery2 +''' ''')\
                            ,username=self.username,keyword1=keyword1,keyword2=keyword2)
                        connection.close()
                    query_tmp = [dict(row) for row in result]
                elif self.username == None and self.taxid != None and self.documentType == None and self.status == None and self.service == None : # มี taxid
                    with slave.connect() as connection:
                        result = connection.execute(text(''' '''+ stringQuery +''' WHERE "biz_info" LIKE :taxid AND "documentStatus" = 'ACTIVE' AND '''+ stringQuery2 +''' ''')\
                            ,taxid=taxid,keyword1=keyword1,keyword2=keyword2)
                        connection.close()    
                    query_tmp = [dict(row) for row in result]              
                elif self.username != None and self.taxid == None and self.documentType == None and self.status == None and self.service != None : # มี username and service 
                    with slave.connect() as connection:
                        result = connection.execute(text(''' '''+ stringQuery +''' WHERE "documentUser" = :username AND "documentStatus" = 'ACTIVE' AND "service_permission" = :service AND '''+ stringQuery2 +'''''')\
                            ,username=self.username,service=self.service,keyword1=keyword1,keyword2=keyword2)
                        connection.close()  
                    query_tmp = [dict(row) for row in result]    
                elif self.username == None and self.taxid != None and self.documentType == None and self.status == None and self.service != None : # มี taxid and service 
                    with slave.connect() as connection:
                        result = connection.execute(text(''' '''+ stringQuery +''' WHERE "biz_info" LIKE :taxid AND "documentStatus" = 'ACTIVE' AND "service_permission" = :service AND '''+ stringQuery2 +''' ''')\
                            ,taxid=taxid,service=self.service,keyword1=keyword1,keyword2=keyword2)
                        connection.close()
                    query_tmp = [dict(row) for row in result]
                elif self.username != None and self.taxid == None and self.documentType != None and self.status == None and self.service == None : # มี username and docType
                    with slave.connect() as connection:
                        result = connection.execute(text(''' ''' + stringQuery + ''' WHERE "documentUser" = :username AND "documentStatus" = 'ACTIVE' AND "documentType" = :docType AND '''+ stringQuery2 +''' ''')\
                            ,username=self.username,docType=self.documentType,keyword1=keyword1,keyword2=keyword2)
                        connection.close()
                    query_tmp = [dict(row) for row in result]
                elif self.username != None and self.taxid == None and self.documentType == None and self.status != None and self.service == None : # มี username and status
                    with slave.connect() as connection:
                        result = connection.execute(text(''' '''+ stringQuery +''' WHERE "documentUser" = :username AND lower("documentStatus") = lower(:status) AND '''+ stringQuery2 +''' ''')\
                            ,username=self.username,status=self.status,keyword1=keyword1,keyword2=keyword2)
                        connection.close()
                    query_tmp = [dict(row) for row in result]
                else:
                    return {'result':'ER','messageText':None,'messageER':'Parameter incorrect','status_Code':404}

            count = query_tmp[0]
            print('lenQuery', count['count']) 
            jsondata = {
                'sum_search_documentDetail': count['count']
            }
            arr_data.append(jsondata)
            return {'result':'OK','messageText':arr_data,'status_Code':200,'messageER':None}

        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':str(ex),'status_Code':200}

    def select_sum_document_bytaxid(self,tax_id):
        self.tax_id = tax_id
        taxid = "%'{}'%".format(self.tax_id)
        all_document = 0
        active_document = 0
        reject_document = 0
        delete_document = 0
        n_document = 0
        y_document = 0
        r_document = 0
        w_document = 0
        try:
            if tax_id != '':
                with slave.connect() as connection:
                    result_select = connection.execute(text('SELECT COUNT("sid") FROM "tb_send_detail" \
                    INNER JOIN "tb_doc_detail" ON "tb_doc_detail".step_id = "tb_send_detail".step_data_sid \
                    INNER JOIN "tb_step_data" ON "tb_step_data".sid = "tb_send_detail".step_data_sid \
                    WHERE "tb_step_data"."biz_info" LIKE :taxid'),taxid=taxid)
                    connection.close()
                    all_document = [dict(row) for row in result_select]
                with slave.connect() as connection:
                    result_select = connection.execute(text('SELECT COUNT("sid") FROM "tb_send_detail" \
                    INNER JOIN "tb_doc_detail" ON "tb_doc_detail".step_id = "tb_send_detail".step_data_sid \
                    INNER JOIN "tb_step_data" ON "tb_step_data".sid = "tb_send_detail".step_data_sid \
                    WHERE "tb_step_data"."biz_info" LIKE :taxid AND "tb_send_detail"."status" =:status'),taxid=taxid,status='ACTIVE')
                    connection.close()
                    active_document = [dict(row) for row in result_select]
                with slave.connect() as connection:
                    result_select = connection.execute(text('SELECT COUNT("sid") FROM "tb_send_detail" \
                    INNER JOIN "tb_doc_detail" ON "tb_doc_detail".step_id = "tb_send_detail".step_data_sid \
                    INNER JOIN "tb_step_data" ON "tb_step_data".sid = "tb_send_detail".step_data_sid \
                    WHERE "tb_step_data"."biz_info" LIKE :taxid AND "tb_send_detail"."status" =:status'),taxid=taxid,status='REJECT')
                    connection.close()
                    reject_document = [dict(row) for row in result_select]
                with slave.connect() as connection:
                    result_select = connection.execute(text('SELECT COUNT("sid") FROM "tb_send_detail" \
                    INNER JOIN "tb_doc_detail" ON "tb_doc_detail".step_id = "tb_send_detail".step_data_sid \
                    INNER JOIN "tb_step_data" ON "tb_step_data".sid = "tb_send_detail".step_data_sid \
                    WHERE "tb_step_data"."biz_info" LIKE :taxid AND "tb_send_detail"."status" =:status'),taxid=taxid,status='DELETE')
                    connection.close()
                    delete_document = [dict(row) for row in result_select]
                with slave.connect() as connection:
                    result_select = connection.execute(text('SELECT COUNT("sid") FROM "tb_send_detail" \
                    INNER JOIN "tb_doc_detail" ON "tb_doc_detail".step_id = "tb_send_detail".step_data_sid \
                    INNER JOIN "tb_step_data" ON "tb_step_data".sid = "tb_send_detail".step_data_sid \
                    WHERE "tb_step_data"."biz_info" LIKE :taxid AND "tb_send_detail"."document_status" =:status'),taxid=taxid,status='Y')
                    connection.close()
                    y_document = [dict(row) for row in result_select]
                with slave.connect() as connection:
                    result_select = connection.execute(text('SELECT COUNT("sid") FROM "tb_send_detail" \
                    INNER JOIN "tb_doc_detail" ON "tb_doc_detail".step_id = "tb_send_detail".step_data_sid \
                    INNER JOIN "tb_step_data" ON "tb_step_data".sid = "tb_send_detail".step_data_sid \
                    WHERE "tb_step_data"."biz_info" LIKE :taxid AND "tb_send_detail"."document_status" =:status'),taxid=taxid,status='N')
                    connection.close()
                    n_document = [dict(row) for row in result_select]
                with slave.connect() as connection:
                    result_select = connection.execute(text('SELECT COUNT("sid") FROM "tb_send_detail" \
                    INNER JOIN "tb_doc_detail" ON "tb_doc_detail".step_id = "tb_send_detail".step_data_sid \
                    INNER JOIN "tb_step_data" ON "tb_step_data".sid = "tb_send_detail".step_data_sid \
                    WHERE "tb_step_data"."biz_info" LIKE :taxid AND "tb_send_detail"."document_status" =:status'),taxid=taxid,status='R')
                    connection.close()
                    r_document = [dict(row) for row in result_select]
            else:
                return {'result':'ER','messageText':'data not found'}
            data_json = [{
                'all_document': all_document[0]['count'],
                # 'active_document': active_document[0]['count'],
                # 'reject_document': reject_document[0]['count'],
                # 'delete_document': delete_document[0]['count'],
                'n_document': n_document[0]['count'],
                'y_document': y_document[0]['count'],
                'r_document': r_document[0]['count'],
            }]
            # print('data_json',data_json)
            return {'result':'OK','messageText':data_json}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'notfound data ' + str(ex)}

    def select_info_document(self,sid):
        self.sid = sid
        data_json = None
        # url = url_biqt + '/quatation_th'
        result_find_sid = find_sid_from_docid(self.sid)
        if result_find_sid['sid'] != None:
            self.sid = result_find_sid['sid']
        try:
            with slave.connect() as connection:
                result_select_docdetail = connection.execute(text('SELECT "tb_send_detail"."step_data_sid","tb_send_detail"."doc_id",\
                    "tb_doc_detail"."data_document","tb_step_data"."update_time" \
                    FROM "tb_send_detail" \
                    INNER JOIN "tb_doc_detail" ON "tb_doc_detail".step_id = "tb_send_detail".step_data_sid \
                    INNER JOIN "tb_step_data" ON "tb_step_data".sid = "tb_send_detail".step_data_sid \
                    WHERE "tb_send_detail"."step_data_sid"=:sid'),sid=self.sid)
                connection.close()
                tmp_query = [dict(row) for row in result_select_docdetail]
            if len(tmp_query) != 0:
                return {'result':'OK','messageText':tmp_query}
            else:
                return {'result':'ER','messageText':None}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'notfound data' + str(e)}

    def select_activity_search(self,emailUser,offsets,limits,keyword):
        self.emailUser = emailUser
        self.offsets = offsets
        self.limits = limits
        self.keyword = keyword
        txtapi1 = "%{}%".format('api/v4/step')
        # txtapi2 = "%{}%".format('api/sign/v2')
        txtapi2 = "%{}%".format('/api/v3/upload_ppl')
        txtapi3 = "%{}".format('api/v2/comment')
        txtapi4 = "%{}%".format('api/v2/rejectdoc')
        txtapi5 = "%{}%".format('api/v1/tranfersign') 
        queryString = "" 
        queryall = 'tb_transactionlogrequest.url_request.like("' + txtapi1 + '"),tb_transactionlogrequest.url_request.like("' + txtapi2 + '")\
                    ,tb_transactionlogrequest.url_request.like("' + txtapi3 + '"),tb_transactionlogrequest.url_request.like("' + txtapi4 + '")\
                    ,tb_transactionlogrequest.url_request.like("' + txtapi5 + '")'                   
        if keyword in "โอนสิทธ์อนุมัติ":
            queryString = 'tb_transactionlogrequest.url_request.like("' + txtapi5 + '")'    
        if keyword in "ส่งเอกสาร" :
            queryString = 'tb_transactionlogrequest.url_request.like("' + txtapi2 + '")'
        if keyword in "ลบเอกสาร" :
            if queryString == "":
                queryString = 'tb_transactionlogrequest.url_request.like("' + txtapi4 + '")'
            else:
                queryString += ',tb_transactionlogrequest.url_request.like("' + txtapi4 + '")'        
        if keyword in "บันทึกข้อความ" :            
            txtapi = "%{}%".format('comment')
            queryString = 'and_(tb_transactionlogrequest.url_request.like("' + txtapi3 + '"),tb_transactionlogrequest.request.like("' + txtapi + '"))'
        if keyword in "ลบข้อความ":
            txtapi = "%{}%".format('comment')
            if queryString == "":
                queryString = 'and_(tb_transactionlogrequest.url_request.like("' + txtapi3 + '"),~tb_transactionlogrequest.request.like("' + txtapi + '"))'
            else:
                queryString += ',and_(tb_transactionlogrequest.url_request.like("' + txtapi3 + '"),~tb_transactionlogrequest.request.like("' + txtapi + '"))'
        if keyword in "เซ็นเอกสาร" :
            txtapi = "%{}%".format('Complete')
            if queryString == "":
                queryString = 'and_(tb_transactionlogrequest.url_request.like("' + txtapi1 + '"),tb_transactionlogrequest.request.like("' + txtapi + '"))'
            else:
                queryString += ',and_(tb_transactionlogrequest.url_request.like("' + txtapi1 + '"),tb_transactionlogrequest.request.like("' + txtapi + '"))'
        if keyword in "อนุมัติเอกสาร" :
            txtapi = "%{}%".format('Approve')
            if queryString == "":
                queryString = 'and_(tb_transactionlogrequest.url_request.like("' + txtapi1 + '"),tb_transactionlogrequest.request.like("' + txtapi + '"))'
            else:
                queryString += ',and_(tb_transactionlogrequest.url_request.like("' + txtapi1 + '"),tb_transactionlogrequest.request.like("' + txtapi + '"))'
        if keyword in "ปฏิเสธอนุมัติ" :
            txtapi = "%{}%".format('Reject')
            if queryString == "":
                queryString = 'and_(tb_transactionlogrequest.url_request.like("' + txtapi1 + '"),tb_transactionlogrequest.request.like("' + txtapi + '"))'
            else:
                queryString += ',and_(tb_transactionlogrequest.url_request.like("' + txtapi1 + '"),tb_transactionlogrequest.request.like("' + txtapi + '"))'
        if keyword.lower() in "success":
            queryString = queryall + '),and_(tb_transactionlogrequest.statuscode == "200 OK"'
        if keyword.lower() in "fail":
            queryString = queryall + '),and_(tb_transactionlogrequest.statuscode != "200 OK"'          
        try: 
            parse(keyword, fuzzy=False)
            print('key is datetime')
            dats = datetime.datetime.strptime(keyword, '%Y-%m-%d')
            datetime1 = dats.strftime('%Y-%m-%d 00:00:00')
            datetime2 = dats.strftime('%Y-%m-%d 23:59:59')
            queryString = queryall + '),and_(tb_transactionlogrequest.datetime >= "' + datetime1 + '",tb_transactionlogrequest.datetime <= "' + datetime2 + '"'
        except ValueError:
            print('key not datetime') 
        if keyword == "":
            queryString = queryall
        if queryString == "":
            return {'result':'OK','messageText':[]}
        try:
            queryString = 'db.session.query(tb_transactionlogrequest)\
                    .join(paper_lesstoken_required, paper_lesstoken_required.hash_one_access_token == tb_transactionlogrequest.hash_token)\
                    .filter(paper_lesstoken_required.email_thai == self.emailUser).filter(or_(' + queryString + '))\
                    .order_by(desc(tb_transactionlogrequest.datetime)).distinct().offset(int(self.offsets)).limit(int(self.limits)).all()'
            query_log = eval(queryString)
            print('len()',len(query_log))
            list_arr = []
            for u in range(len(query_log)): 
                status = ''
                tmp_dict_json = query_log[u].__dict__
                url_request = str(tmp_dict_json['url_request'])
                datetimes = str(tmp_dict_json['datetime']).split('+')[0]
                status_code = str(tmp_dict_json['statuscode'])
                sid = eval(tmp_dict_json['request'])                  
                massage = sid 
                if sid != "":
                    if 'sid' in sid :
                        sid = sid['sid']   
                    elif 'sidCode' in sid :
                        sid = sid['sidCode']
                    elif 'step_data_sid' in sid :
                        sid = sid['step_data_sid']
                else:
                    return {'result':'ER','messageText':'sid not found'}
                # if 'api/sign/v2' in url_request :
                if '/api/v3/upload_ppl' in url_request :
                    status = 'ส่งเอกสาร'
                elif 'api/v2/rejectdoc' in url_request:
                    status = 'ลบเอกสาร'
                elif 'api/v1/tranfersign' in url_request:
                    status = 'โอนสิทธิ์อนุมัติ'
                elif 'api/v2/comment' in url_request:
                    if 'comment' in tmp_dict_json['request']:
                        status = 'บันทึกข้อความ'
                    else:
                        status = 'ลบข้อความ'    
                elif 'api/v4/step' in url_request:
                    if 'Reject' in tmp_dict_json['request']:
                        status = 'ปฏิเสธอนุมัติ'
                    elif 'Approve' in tmp_dict_json['request']:
                        status = 'อนุมัติเอกสาร'
                    elif 'Complete' in tmp_dict_json['request']:
                        status = 'เซ็นเอกสาร'
                        
                if status_code == '200 OK':
                    status_code = 'SUCCESS'
                else:
                    status_code = 'FAIL'

                if status != '':
                    list_arr.append({
                        'status' : status,
                        'updatetime' : str(datetimes),
                        'url' : url_request,
                        'id' : tmp_dict_json['id'],
                        'statuscode' : status_code,
                    })                        
            
            print(len(list_arr))
            return {'result':'OK','messageText':list_arr}

        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

    def select_activity_search_count(self,emailUser,keyword):
        self.emailUser = emailUser
        self.keyword = keyword
        txtapi1 = "%{}%".format('api/v4/step')
        txtapi2 = "%{}%".format('api/v3/upload_ppl')
        txtapi3 = "%{}".format('api/v2/comment')
        txtapi4 = "%{}%".format('api/v2/rejectdoc')
        txtapi5 = "%{}%".format('api/v1/tranfersign') 
        queryString = "" 
        queryall = 'tb_transactionlogrequest.url_request.like("' + txtapi1 + '"),tb_transactionlogrequest.url_request.like("' + txtapi2 + '")\
                    ,tb_transactionlogrequest.url_request.like("' + txtapi3 + '"),tb_transactionlogrequest.url_request.like("' + txtapi4 + '")\
                    ,tb_transactionlogrequest.url_request.like("' + txtapi5 + '")'                   
        if keyword in "โอนสิทธ์อนุมัติ":
            queryString = 'tb_transactionlogrequest.url_request.like("' + txtapi5 + '")'    
        if keyword in "ส่งเอกสาร" :
            queryString = 'tb_transactionlogrequest.url_request.like("' + txtapi2 + '")'
        if keyword in "ลบเอกสาร" :
            if queryString == "":
                queryString = 'tb_transactionlogrequest.url_request.like("' + txtapi4 + '")'
            else:
                queryString += ',tb_transactionlogrequest.url_request.like("' + txtapi4 + '")'        
        if keyword in "บันทึกข้อความ" :            
            txtapi = "%{}%".format('comment')
            queryString = 'and_(tb_transactionlogrequest.url_request.like("' + txtapi3 + '"),tb_transactionlogrequest.request.like("' + txtapi + '"))'
        if keyword in "ลบข้อความ":
            txtapi = "%{}%".format('comment')
            if queryString == "":
                queryString = 'and_(tb_transactionlogrequest.url_request.like("' + txtapi3 + '"),~tb_transactionlogrequest.request.like("' + txtapi + '"))'
            else:
                queryString += ',and_(tb_transactionlogrequest.url_request.like("' + txtapi3 + '"),~tb_transactionlogrequest.request.like("' + txtapi + '"))'
        if keyword in "เซ็นเอกสาร" :
            txtapi = "%{}%".format('Complete')
            if queryString == "":
                queryString = 'and_(tb_transactionlogrequest.url_request.like("' + txtapi1 + '"),tb_transactionlogrequest.request.like("' + txtapi + '"))'
            else:
                queryString += ',and_(tb_transactionlogrequest.url_request.like("' + txtapi1 + '"),tb_transactionlogrequest.request.like("' + txtapi + '"))'
        if keyword in "อนุมัติเอกสาร" :
            txtapi = "%{}%".format('Approve')
            if queryString == "":
                queryString = 'and_(tb_transactionlogrequest.url_request.like("' + txtapi1 + '"),tb_transactionlogrequest.request.like("' + txtapi + '"))'
            else:
                queryString += ',and_(tb_transactionlogrequest.url_request.like("' + txtapi1 + '"),tb_transactionlogrequest.request.like("' + txtapi + '"))'
        if keyword in "ปฏิเสธอนุมัติ" :
            txtapi = "%{}%".format('Reject')
            if queryString == "":
                queryString = 'and_(tb_transactionlogrequest.url_request.like("' + txtapi1 + '"),tb_transactionlogrequest.request.like("' + txtapi + '"))'
            else:
                queryString += ',and_(tb_transactionlogrequest.url_request.like("' + txtapi1 + '"),tb_transactionlogrequest.request.like("' + txtapi + '"))'
        if keyword.lower() in "success":
            queryString = queryall + '),and_(tb_transactionlogrequest.statuscode == "200 OK"'
        if keyword.lower() in "fail":
            queryString = queryall + '),and_(tb_transactionlogrequest.statuscode != "200 OK"'          
        try: 
            parse(keyword, fuzzy=False)
            print('key is datetime')
            dats = datetime.datetime.strptime(keyword, '%Y-%m-%d')
            datetime1 = dats.strftime('%Y-%m-%d 00:00:00')
            datetime2 = dats.strftime('%Y-%m-%d 23:59:59')
            queryString = queryall + '),and_(tb_transactionlogrequest.datetime >= "' + datetime1 + '",tb_transactionlogrequest.datetime <= "' + datetime2 + '"'
        except ValueError:
            print('key not datetime') 
        if keyword == "":
            queryString = queryall
        if queryString == "":
            return {'result':'OK','messageText':[]}
        try:
            queryString = 'db.session.query(tb_transactionlogrequest)\
                    .join(paper_lesstoken_required, paper_lesstoken_required.hash_one_access_token == tb_transactionlogrequest.hash_token)\
                    .filter(paper_lesstoken_required.email_thai == self.emailUser).filter(or_(' + queryString + '))\
                    .order_by(desc(tb_transactionlogrequest.datetime)).distinct().count()'
            query_log = eval(queryString)
            print(query_log)
            list_arr = []
            list_arr.append({
                'count_history' : query_log
            })
            return {'result':'OK','messageText':list_arr}

        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

    def select_activity_v2(self,emailUser,offsets,limits):
        self.emailUser = emailUser
        self.offsets = offsets
        self.limits = limits
        txtapi1 = "%{}%".format('api/v4/step')
        txtapi2 = "%{}%".format('/api/v3/upload_ppl')
        txtapi3 = "%{}".format('api/v2/comment')
        txtapi4 = "%{}%".format('api/v2/rejectdoc')
        txtapi5 = "%{}%".format('api/v1/tranfersign')    
        txtNo1 = "%{}%".format('ppl_id')    
        txtNo2 = "{}".format('None')
        list_arr = []
        list_sid = []
        print(emailUser)
        try:
            query_log = db.session.query(tb_transactionlogrequest)\
                    .join(paper_lesstoken_required, paper_lesstoken_required.hash_one_access_token == tb_transactionlogrequest.hash_token)\
                    .filter(paper_lesstoken_required.email_thai == self.emailUser)\
                    .filter(or_(tb_transactionlogrequest.url_request.like(txtapi1),tb_transactionlogrequest.url_request.like(txtapi2)\
                    ,tb_transactionlogrequest.url_request.like(txtapi3),tb_transactionlogrequest.url_request.like(txtapi4)\
                    ,tb_transactionlogrequest.url_request.like(txtapi5)),~tb_transactionlogrequest.request.like(txtNo1),~tb_transactionlogrequest.request.like(txtNo2))\
                    .order_by(desc(tb_transactionlogrequest.datetime)).distinct().offset(int(self.offsets)).limit(int(self.limits)).all()
            db.session.close()
            print('len()qqq',len(query_log))
            Name = fine_name_surename(self.emailUser) 
            for u in range(len(query_log)):
                status = ''
                detail = ''
                tmp_dict_json = query_log[u].__dict__
                url_request = str(tmp_dict_json['url_request'])
                datetimes = str(tmp_dict_json['datetime']).split('+')[0]
                status_code = str(tmp_dict_json['statuscode'])
                sid = eval(tmp_dict_json['request'])   
                if '/api/v3/upload_ppl' in url_request :
                    status = 'ส่งเอกสาร'
                elif 'api/v2/rejectdoc' in url_request:
                    status = 'ลบเอกสาร'
                elif 'api/v1/tranfersign' in url_request:
                    dats = datetime.datetime.strptime(datetimes, '%Y-%m-%d %H:%M:%S')        
                    datetime1 = dats.strftime('%Y-%m-%d %H:%M:00')
                    datetime2 = dats.strftime('%Y-%m-%d %H:%M:59')
                    status = 'โอนสิทธิ์อนุมัติ'
                elif 'api/v2/comment' in url_request:
                    if 'comment' in tmp_dict_json['request']:
                        status = 'บันทึกข้อความ'
                    else:
                        status = 'ลบข้อความ'    
                elif 'api/v4/step' in url_request:
                    if 'Reject' in tmp_dict_json['request']:
                        status = 'ปฏิเสธอนุมัติ'
                    elif 'Approve' in tmp_dict_json['request']:
                        status = 'อนุมัติเอกสาร'
                    elif 'Complete' in tmp_dict_json['request']:
                        status = 'เซ็นเอกสาร'
                        
                if status_code == '200 OK':
                    status_code = 'SUCCESS'
                else:
                    status_code = 'FAIL'
                if status != '':
                    list_arr.append({
                        'status' : status,
                        'updatetime' : str(datetimes),
                        'url' : url_request,
                        'id' : tmp_dict_json['id'],
                        'statuscode' : status_code,
                    })
            return {'result':'OK','messageText':list_arr}

        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

    def select_activity_one(self,emailUser,log_id):
        self.emailUser = emailUser
        self.log_id = log_id
        list_arr = []
        list_sid = []
        print(emailUser)
        try:
            with slave.connect() as connection:
                result = connection.execute(text('SELECT "id","message","statuscode","datetime","request","url_request","methods","hash_token" FROM  "tb_transactionlogrequest"\
                WHERE "id"=:val'),val=self.log_id)
                connection.close()
            tmp_query = [dict(row) for row in result]
            # print('tmp_query',tmp_query)
            Name = fine_name_surename(self.emailUser) 
            for u in range(len(tmp_query)):
                sid = eval(tmp_query[u]['request'])    
                # print('sid',sid)            
                status = ''
                detail = ''
                #url_request = str(tmp_dict_json['url_request'])
                datetimes = str(tmp_query[u]['datetime']).split('+')[0]
                status_code = str(tmp_query[u]['statuscode'])
                massage = sid 
                if 'sid' in sid :
                    sid = sid['sid']   
                elif 'sidCode' in sid :
                    sid = sid['sidCode']
                elif 'step_data_sid' in sid :
                    sid = sid['step_data_sid']                

                if '/api/v3/upload_ppl' in tmp_query[u]['url_request'] :
                    status = 'ส่งเอกสาร'
                    detail = Name + ' ส่งเอกสาร '
                else:
                    data = select_trackingid_from_sid(sid)
                    if 'api/v2/rejectdoc' in tmp_query[u]['url_request']:
                        status = 'ลบเอกสาร'
                        detail = Name + ' ลบเอกสารเลขที่ ' + data['docId'] + ' ไฟล์ : ' + data['fileName']
                    elif 'api/v1/tranfersign' in tmp_query[u]['url_request']:
                        dats = datetime.datetime.strptime(datetimes, '%Y-%m-%d %H:%M:%S')        
                        datetime1 = dats.strftime('%Y-%m-%d %H:%M:00')
                        datetime2 = dats.strftime('%Y-%m-%d %H:%M:59')
                        temp_query = paper_lesstranfer.query.filter(paper_lesstranfer.sid == str(sid),paper_lesstranfer.datetime >= datetime1,paper_lesstranfer.datetime <= datetime2).first()
                        email_from = eval(temp_query.email_from)
                        email_to = eval(temp_query.email_to)
                        email_from, email_to = email_from[0], email_to[0]
                        txtDetail = ''
                        for i in range(len(email_from)):
                            txtDetail = txtDetail + ' จาก ' + str(email_from[i]) + ' เป็น ' + str(email_to[i])
                        status = 'โอนสิทธิ์อนุมัติ'
                        detail = Name + ' โอนสิทธิ์อนุมัติเอกสารเลขที่ ' + data['docId'] + ' ลำดับที่ ' + str(massage['step'][0]) + txtDetail
                        print('detail',detail)
                    elif 'api/v2/comment' in tmp_query[u]['url_request']:
                        if 'comment' in tmp_query[u]['request']:
                            status = 'บันทึกข้อความ'
                            detail = Name + ' บันทึกข้อความ : ' + massage['comment'] + ' ในเอกสารเลขที่ ' + data['docId'] + ' ลำดับที่ ' + massage['step'] + ' ไฟล์ : ' + data['fileName']
                        else:
                            status = 'ลบข้อความ'    
                            detail = Name + ' ลบข้อความเอกสารเลขที่ ' + data['docId'] + ' ไฟล์ : ' + data['fileName']
                    elif 'api/v4/step' in tmp_query[u]['url_request']:
                        if 'Reject' in tmp_query[u]['request']:
                            status = 'ปฏิเสธอนุมัติ'
                            detail = Name + ' ปฏิเสธอนุมัติเอกสารเลขที่ ' + data['docId'] + ' ลำดับที่ ' + massage['step_num'] + ' ไฟล์ : ' + data['fileName']
                        elif 'Approve' in tmp_query[u]['request']:
                            status = 'อนุมัติเอกสาร'
                            detail = Name + ' อนุมัติเอกสารเลขที่ ' + data['docId'] + ' ลำดับที่ ' + massage['step_num'] + ' ไฟล์ : ' + data['fileName']
                        elif 'Complete' in tmp_query[u]['request']:
                            status = 'เซ็นเอกสาร'
                            detail = Name + ' เซ็นเอกสารเลขที่ ' + data['docId'] + ' ลำดับที่ ' + massage['step_num'] + ' ไฟล์ : ' + data['fileName']
                        
                if status_code == '200 OK':
                    status_code = 'SUCCESS'
                else:
                    status_code = 'FAIL'
                if status != '':
                    list_arr.append({
                        'status' : status,
                        'statusdetail' : str(detail),
                        'updatetime' : str(datetimes),
                        'url' : tmp_query[u]['url_request'],
                        'id' :  tmp_query[u]['id'],
                        'statuscode' : status_code,
                    })
            
            return {'result':'OK','messageText':list_arr}

        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}
    
    def select_countpaper_datetime(self,tax_id,document_type,level_admin,datetimeStart,datetimeEnd):
        self.tax_id = tax_id
        self.document_type = document_type
        self.level_admin = level_admin
        self.datetimeStart = datetimeStart
        self.datetimeEnd = datetimeEnd
        query_count_all = 0
        list_json = []
        tmp_json_1 = {}
        try:
            if self.datetimeStart != '' and self.datetimeEnd == '': #ใส่ start อย่างเดียว
                time_start = datetime.datetime.fromtimestamp(int(self.datetimeStart))
                if self.tax_id == '' and self.document_type == '' : # tax_id = ค่าว่าง , document_type = ค่าว่าง
                    # query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status,
                        view_document.document_status
                    ).filter(or_(view_document.update_time >= time_start,view_document.send_time >= time_start)).all()
                    # query                     
                elif self.tax_id != '' and self.document_type == '': # tax_id = มีค่า document_type = ค่าว่าง
                    if self.tax_id == 'citizen':
                        # เทส query
                        query_count_all = view_document.query.with_entities(
                            view_document.sender_email,
                            view_document.sender_name,
                            view_document.send_time,
                            view_document.update_time,
                            view_document.biz_info,
                            view_document.documentType,
                            view_document.status,
                            view_document.document_status
                        ).filter(or_(view_document.update_time >= time_start,view_document.send_time >= time_start))\
                        .filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                        # เทส query 
                    elif len(self.tax_id) != 13 :
                        return {'result':'ER','messageText':'error because tax_id incorret'} 
                    else:
                        # เทส query
                        query_count_all = view_document.query.with_entities(
                            view_document.sender_email,
                            view_document.sender_name,
                            view_document.send_time,
                            view_document.update_time,
                            view_document.biz_info,
                            view_document.documentType,
                            view_document.status,
                            view_document.document_status
                        ).filter(or_(view_document.update_time >= time_start,view_document.send_time >= time_start))\
                        .filter(view_document.biz_info.contains(self.tax_id)).all()
                        # เทส query  
                elif self.tax_id == '' and self.document_type != '': # tax_id = ค่าว่าง , document_type = มีค่า 
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status,
                        view_document.document_status
                    ).filter(or_(view_document.update_time >= time_start,view_document.send_time >= time_start)).filter(view_document.documentType == self.document_type).all()
                    # เทส query 
                elif self.tax_id != '' and self.document_type != '': # tax_id = มีค่า , document_type = มีค่า
                    if self.tax_id == 'citizen':
                        # เทส query
                        query_count_all = view_document.query.with_entities(
                            view_document.sender_email,
                            view_document.sender_name,
                            view_document.send_time,
                            view_document.update_time,
                            view_document.biz_info,
                            view_document.documentType,
                            view_document.status,
                            view_document.document_status
                        ).filter(or_(view_document.update_time >= time_start,view_document.send_time >= time_start))\
                        .filter(view_document.documentType == self.document_type).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                        # เทส query 
                    
                    elif len(self.tax_id) != 13 :
                        return {'result':'ER','messageText':'error because tax_id incorret'} 
                    
                    else:
                        # เทส query
                        query_count_all = view_document.query.with_entities(
                            view_document.sender_email,
                            view_document.sender_name,
                            view_document.send_time,
                            view_document.update_time,
                            view_document.biz_info,
                            view_document.documentType,
                            view_document.status,
                            view_document.document_status
                        ).filter(or_(view_document.update_time >= time_start,view_document.send_time >= time_start))\
                        .filter(view_document.documentType == self.document_type).filter(view_document.biz_info.contains(self.tax_id)).all()
                        # เทส query
                list2 = generateList(query_count_all)
                tmp_json_1 = check_count_paper_start_v2(query_count_all,list2,time_start)   
            
            elif self.datetimeStart == '' and self.datetimeEnd != '' : #ใส่ end อย่างเดียว
                time_end = datetime.datetime.fromtimestamp(int(self.datetimeEnd))
                if self.tax_id == '' and self.document_type == '' : # tax_id = ค่าว่าง , document_type = ค่าว่าง
                    # query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status,
                        view_document.document_status
                    ).filter(or_(view_document.update_time <= time_end,view_document.send_time <= time_end)).all()
                    # query 
                elif self.tax_id != '' and self.document_type == '': # tax_id = มีค่า document_type = ค่าว่าง
                    if self.tax_id == 'citizen':
                        # เทส query
                        query_count_all = view_document.query.with_entities(
                            view_document.sender_email,
                            view_document.sender_name,
                            view_document.send_time,
                            view_document.update_time,
                            view_document.biz_info,
                            view_document.documentType,
                            view_document.status,
                            view_document.document_status
                        ).filter(or_(view_document.update_time <= time_end,view_document.send_time <= time_end))\
                        .filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                        # เทส query 
                    elif len(self.tax_id) != 13 :
                        return {'result':'ER','messageText':'error because tax_id incorret'} 
                    else:
                        # เทส query
                        query_count_all = view_document.query.with_entities(
                            view_document.sender_email,
                            view_document.sender_name,
                            view_document.send_time,
                            view_document.update_time,
                            view_document.biz_info,
                            view_document.documentType,
                            view_document.status,
                            view_document.document_status
                        ).filter(or_(view_document.update_time <= time_end,view_document.send_time <= time_end))\
                        .filter(view_document.biz_info.contains(self.tax_id)).all()
                        # เทส query  
                elif self.tax_id == '' and self.document_type != '': # tax_id = ค่าว่าง , document_type = มีค่า 
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status,
                        view_document.document_status
                    ).filter(or_(view_document.update_time <= time_end,view_document.send_time <= time_end))\
                    .filter(view_document.documentType == self.document_type).all()
                    # เทส query  
                elif self.tax_id != '' and self.document_type != '': # tax_id = มีค่า , document_type = มีค่า
                    if self.tax_id == 'citizen':
                        # เทส query
                        query_count_all = view_document.query.with_entities(
                            view_document.sender_email,
                            view_document.sender_name,
                            view_document.send_time,
                            view_document.update_time,
                            view_document.biz_info,
                            view_document.documentType,
                            view_document.status,
                            view_document.document_status
                        ).filter(or_(view_document.update_time <= time_end,view_document.send_time <= time_end))\
                        .filter(view_document.documentType == self.document_type).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                        # เทส query 
                    
                    elif len(self.tax_id) != 13 :
                        return {'result':'ER','messageText':'error because tax_id incorret'} 
                    
                    else:
                        # เทส query
                        query_count_all = view_document.query.with_entities(
                            view_document.sender_email,
                            view_document.sender_name,
                            view_document.send_time,
                            view_document.update_time,
                            view_document.biz_info,
                            view_document.documentType,
                            view_document.status,
                            view_document.document_status
                        ).filter(or_(view_document.update_time <= time_end,view_document.send_time <= time_end))\
                        .filter(view_document.documentType == self.document_type).filter(view_document.biz_info.contains(self.tax_id)).all()
                        # เทส query
                list2 = generateList(query_count_all)
                tmp_json_1 = check_count_paper_end_v2(query_count_all,list2,time_end)
            
            elif self.datetimeStart != '' and self.datetimeEnd != '' : #ใส่ start และ end:
                time_end = datetime.datetime.fromtimestamp(int(self.datetimeEnd))
                time_start = datetime.datetime.fromtimestamp(int(self.datetimeStart))
                if self.tax_id == '' and self.document_type == '' : # tax_id = ค่าว่าง , document_type = ค่าว่าง
                    # query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status,
                        view_document.document_status
                    ).filter(or_(and_(view_document.update_time >= time_start,view_document.update_time <= time_end)\
                    ,and_(view_document.send_time >= time_start,view_document.send_time <= time_end))).all()
                    # query 
                elif self.tax_id != '' and self.document_type == '': # tax_id = มีค่า document_type = ค่าว่าง
                    if self.tax_id == 'citizen':
                        # เทส query5
                        query_count_all = view_document.query.with_entities(
                            view_document.sender_email,
                            view_document.sender_name,
                            view_document.send_time,
                            view_document.update_time,
                            view_document.biz_info,
                            view_document.documentType,
                            view_document.status,
                            view_document.document_status
                        ).filter(or_(and_(view_document.update_time >= time_start,view_document.update_time <= time_end)\
                        ,and_(view_document.send_time >= time_start,view_document.send_time <= time_end)))\
                        .filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                        # เทส query 
                    elif len(self.tax_id) != 13 :
                        return {'result':'ER','messageText':'error because tax_id incorret'} 
                    else:
                        # เทส query
                        query_count_all = view_document.query.with_entities(
                            view_document.sender_email,
                            view_document.sender_name,
                            view_document.send_time,
                            view_document.update_time,
                            view_document.biz_info,
                            view_document.documentType,
                            view_document.status,
                            view_document.document_status
                        ).filter(or_(and_(view_document.update_time >= time_start,view_document.update_time <= time_end)\
                        ,and_(view_document.send_time >= time_start,view_document.send_time <= time_end)))\
                        .filter(view_document.biz_info.contains(self.tax_id)).all()
                        # เทส query                    
                elif self.tax_id == '' and self.document_type != '': # tax_id = ค่าว่าง , document_type = มีค่า 
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status,
                        view_document.document_status
                    ).filter(or_(and_(view_document.update_time >= time_start,view_document.update_time <= time_end)\
                    ,and_(view_document.send_time >= time_start,view_document.send_time <= time_end)))\
                    .filter(view_document.documentType == self.document_type).all()
                    # เทส query                    
                elif self.tax_id != '' and self.document_type != '': # tax_id = มีค่า , document_type = มีค่า
                    if self.tax_id == 'citizen':
                        # เทส query
                        query_count_all = view_document.query.with_entities(
                            view_document.sender_email,
                            view_document.sender_name,
                            view_document.send_time,
                            view_document.update_time,
                            view_document.biz_info,
                            view_document.documentType,
                            view_document.status,
                            view_document.document_status
                        ).filter(or_(and_(view_document.update_time >= time_start,view_document.update_time <= time_end)\
                        ,and_(view_document.send_time >= time_start,view_document.send_time <= time_end)))\
                        .filter(view_document.documentType == self.document_type).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                        # เทส query                     
                    elif len(self.tax_id) != 13 :
                        return {'result':'ER','messageText':'error because tax_id incorret'}                     
                    else:
                        # เทส query
                        query_count_all = view_document.query.with_entities(
                            view_document.sender_email,
                            view_document.sender_name,
                            view_document.send_time,
                            view_document.update_time,
                            view_document.biz_info,
                            view_document.documentType,
                            view_document.status,
                            view_document.document_status
                        ).filter(or_(and_(view_document.update_time >= time_start,view_document.update_time <= time_end)\
                        ,and_(view_document.send_time >= time_start,view_document.send_time <= time_end)))\
                        .filter(view_document.documentType == self.document_type).filter(view_document.biz_info.contains(self.tax_id)).all()
                        # เทส query
                list2 = generateList(query_count_all)
                tmp_json_1 = check_count_paper_start_end_v2(query_count_all,list2,time_end,time_start)
            
            elif self.datetimeStart == '' and self.datetimeEnd == '' : #ไม่ใส่ start และ end:
                if self.tax_id == '' and self.document_type == '' : # tax_id = ค่าว่าง , document_type = ค่าว่าง
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status,
                        view_document.document_status
                    ).all() 
                elif self.tax_id != '' and self.document_type == '': # tax_id = มีค่า document_type = ค่าว่าง
                    if self.tax_id == 'citizen':
                        # เทส query
                        query_count_all = view_document.query.with_entities(
                            view_document.sender_email,
                            view_document.sender_name,
                            view_document.send_time,
                            view_document.update_time,
                            view_document.biz_info,
                            view_document.documentType,
                            view_document.status,
                            view_document.document_status
                        ).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                        # เทส query 
                    elif len(self.tax_id) != 13 :
                        return {'result':'ER','messageText':'error because tax_id incorret'} 
                    else:
                        # เทส query
                        query_count_all = view_document.query.with_entities(
                            view_document.sender_email,
                            view_document.sender_name,
                            view_document.send_time,
                            view_document.update_time,
                            view_document.biz_info,
                            view_document.documentType,
                            view_document.status,
                            view_document.document_status
                        ).filter(view_document.biz_info.contains(self.tax_id)).all()
                        # เทส query                      
                elif self.tax_id == '' and self.document_type != '': # tax_id = ค่าว่าง , document_type = มีค่า 
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status,
                        view_document.document_status
                    ).filter(view_document.documentType == self.document_type).all()
                    # เทส query                    
                elif self.tax_id != '' and self.document_type != '': # tax_id = มีค่า , document_type = มีค่า
                    if self.tax_id == 'citizen':
                        # เทส query
                        query_count_all = view_document.query.with_entities(
                            view_document.sender_email,
                            view_document.sender_name,
                            view_document.send_time,
                            view_document.update_time,
                            view_document.biz_info,
                            view_document.documentType,
                            view_document.status,
                            view_document.document_status
                        ).filter(view_document.documentType == self.document_type).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                        # เทส query 
                    elif len(self.tax_id) != 13 :
                        return {'result':'ER','messageText':'error because tax_id incorret'} 
                    else:
                        # เทส query
                        query_count_all = view_document.query.with_entities(
                            view_document.sender_email,
                            view_document.sender_name,
                            view_document.send_time,
                            view_document.update_time,
                            view_document.biz_info,
                            view_document.documentType,
                            view_document.status,
                            view_document.document_status
                        ).filter(view_document.documentType == self.document_type).filter(view_document.biz_info.contains(self.tax_id)).all()
                        # เทส query
                list2 = generateList(query_count_all)
                tmp_json_1 = check_count_paper_all_v2(query_count_all,list2)
               
            return {'result':'OK','messageText':tmp_json_1}

        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'notfound data' + str(e)}
    
    def select_admin_count_viewdoc_hour_v2(self,tax_id,document_type,level_admin):
        self.tax_id = tax_id
        self.document_type = document_type
        self.level_admin = int(level_admin)
        list_json = []
        list_start_time = []        
        countDoc_of_hour= 0
        count_Doc_of_hour_reject = 0
        count_Doc_of_hour_active = 0
        count_Doc_of_hour_delete = 0
        count_Doc_of_hour_inactive = 0
        count_user = 0 
        tmp_json_1 = {}
        start_last = 0
        startTime_list = []
        endTime_list = []
        count_1 = 11
        count_2 = 12
        query_count_all = None
        try:
            list_user = []
            list_json_all = []
            list_count_user = []
            tmp_json = {}
            now = datetime.datetime.now()
            hour = int((str(now).split(' ')[1]).split(':')[0])
            count = hour
            flashback = timedelta(hours = 1)
            end_time = now.replace(microsecond = 00)
            start_time =  (now-flashback).replace(hour=hour, minute=0, second=0, microsecond=00)
            startTime_list.append(start_time)
            endTime_list.append(end_time)
            for x in range(count):
                list_start_end = find_startTime_endTime_hour(start_time)
                start_time1 = list_start_end[0]
                end_time1 = list_start_end[1]
                list_user2 = [] 
                startTime_list.append(start_time1)
                endTime_list.append(end_time1)
                if x == count - 1:
                    start_last = start_time1 
                start_time = start_time1
            if self.tax_id == '' and self.document_type == '' : # tax_id = ค่าว่าง , document_type = ค่าว่าง 
                # เทส query
                query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.sender_name,
                    view_document.send_time,
                    view_document.update_time,
                    view_document.biz_info,
                    view_document.documentType,
                    view_document.status
                ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time)
                ,and_(view_document.send_time >= start_last,view_document.send_time <= end_time))).all()
                # เทส query 
                db.session.close()
            elif self.tax_id != '' and self.document_type == '': # tax_id = มีค่า document_type = ค่าว่าง
                if self.tax_id == 'citizen':
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status
                    ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time)
                    ,and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                    .filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                    # เทส query
                    db.session.close()
                elif len(self.tax_id) != 13 :
                    return {'result':'ER','messageText':'error because tax_id incorret'} 

                else:
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status
                    ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time)
                    ,and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                    .filter(view_document.biz_info.contains(self.tax_id)).all()
                    # เทส query  
                    db.session.close()
            elif self.tax_id == '' and self.document_type != '': # tax_id = ค่าว่าง , document_type = มีค่า 
                # เทส query
                query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.sender_name,
                    view_document.send_time,
                    view_document.update_time,
                    view_document.biz_info,
                    view_document.documentType,
                    view_document.status
                ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time)
                ,and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                .filter(view_document.documentType == self.document_type).all()
                # เทส query 
                db.session.close()
            elif self.tax_id != '' and self.document_type != '': # tax_id = มีค่า , document_type = มีค่า
                if self.tax_id == 'citizen':
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status
                    ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time)
                    ,and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                    .filter(view_document.documentType == self.document_type).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                    # เทส query 
                    db.session.close()
                elif len(self.tax_id) != 13 :
                    print('wekkkkkk11111')
                    return {'result':'ER','messageText':'error because tax_id incorret'} 
                
                else:
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status
                    ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time)
                    ,and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                    .filter(view_document.documentType == self.document_type).filter(view_document.biz_info.contains(self.tax_id)).all()
                    # เทส query
                    db.session.close()
            list2 = []
            for x in range(len(query_count_all)):
                tmp_json = {
                    'sender_email': query_count_all[x].sender_email,
                    'sender_name': query_count_all[x].sender_email,
                    'sendtime':int(datetime.datetime.timestamp(query_count_all[x].send_time)),
                    'updatetime':int(datetime.datetime.timestamp(query_count_all[x].update_time)),
                    'biz_info':query_count_all[x].biz_info,
                    'documentType':query_count_all[x].documentType,
                    'status':query_count_all[x].status,
                }
                list2.append(tmp_json)
                tmp_json = {}
            
            if len(query_count_all)==0:
                for x in range(count+1):
                    count_all = 0
                    count_active = 0
                    count_reject = 0
                    count_delete = 0
                    count_inactive = 0
                    list_user2 = []
                    timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                    timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                    tmp_json['all_documents'] = count_all
                    tmp_json['documents_active'] = count_active
                    tmp_json['count_user'] = len(list_user2)
                    tmp_json['documents_reject'] = count_reject
                    tmp_json['documents_delete'] = count_delete
                    tmp_json['documents_inactive'] = count_inactive
                    tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                    tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                    tmp_json['timestamp_start'] = timestamp_start
                    tmp_json['timestamp_end'] = timestamp_end
                    list_json.append(tmp_json)
                    tmp_json = {}
            else:
                for x in range(count+1):        
                    count_all = 0
                    count_active = 0
                    count_reject = 0
                    count_delete = 0
                    count_inactive = 0            
                    list_user2 = []
                    for y in range(len(list2)):
                        timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                        timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                        user = list2[y]['sender_email']
                        if (int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end))\
                        or (int(list2[y]['updatetime']) >= int(timestamp_start) and list2[y]['updatetime'] <= int(timestamp_end)):
                            count_all = count_all + 1
                            if user not in list_user2:
                                list_user2.append(user)
                            if user not in list_count_user:
                                list_count_user.append(user)
                        if ((int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end))\
                        or (int(list2[y]['updatetime']) >= int(timestamp_start) and list2[y]['updatetime'] <= int(timestamp_end))) and list2[y]['status'] == 'ACTIVE':
                            count_active = count_active + 1
                        if ((int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end))\
                        or (int(list2[y]['updatetime']) >= int(timestamp_start) and list2[y]['updatetime'] <= int(timestamp_end))) and list2[y]['status'] == 'REJECT':
                            count_reject = count_reject + 1
                        if ((int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end))\
                        or (int(list2[y]['updatetime']) >= int(timestamp_start) and list2[y]['updatetime'] <= int(timestamp_end))) and list2[y]['status'] == 'DELETE':
                            count_delete = count_delete + 1
                        if ((int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end))\
                        or (int(list2[y]['updatetime']) >= int(timestamp_start) and list2[y]['updatetime'] <= int(timestamp_end))) and list2[y]['status'] == 'INACTIVE':
                            count_inactive = count_inactive + 1
                        if x == 0 and list2[y]['status'] == 'ACTIVE':
                            count_Doc_of_hour_active += 1
                        if x == 0 and list2[y]['status'] == 'REJECT':
                            count_Doc_of_hour_reject += 1
                        if x == 0 and list2[y]['status'] == 'DELETE':
                            count_Doc_of_hour_delete += 1
                        if x == 0 and list2[y]['status'] == 'INACTIVE':
                            count_Doc_of_hour_inactive += 1

                    tmp_json['all_documents'] = count_all
                    tmp_json['documents_active'] = count_active
                    tmp_json['documents_reject'] = count_reject
                    tmp_json['documents_delete'] = count_delete
                    tmp_json['documents_inactive'] = count_inactive
                    tmp_json['count_user'] = len(list_user2)                    
                    tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                    tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                    tmp_json['timestamp_start'] = timestamp_start
                    tmp_json['timestamp_end'] = timestamp_end
                    list_json.append(tmp_json)
                    tmp_json = {}

            tmp_json_1['documents_past_hour'] = list_json

            tmp_json = {}
            list_json = []
            tmp_json['documents_all'] = len(list2)
            tmp_json['documents_all_active'] = count_Doc_of_hour_active
            tmp_json['documents_all_reject'] = count_Doc_of_hour_reject
            tmp_json['documents_all_delelte'] = count_Doc_of_hour_delete
            tmp_json['documents_all_inactive'] = count_Doc_of_hour_inactive
            tmp_json['countUser_of_hour'] = len(list_count_user)
            list_json.append(tmp_json)

            tmp_json_1['documents_all_hour'] = list_json            
            db.session.close()
            return {'result':'OK','messageText':tmp_json_1}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'notfound data' + str(e)}


    def select_admin_count_viewdoc_week_v2(self,tax_id,document_type,level_admin):
        self.tax_id = tax_id
        self.document_type = document_type
        self.level_admin = int(level_admin)
        list_json = []
        list_start_time = []        
        countDoc_of_week = 0
        count_Doc_of_week_reject = 0
        count_Doc_of_week_active = 0
        count_Doc_of_week_delete = 0
        count_Doc_of_week_inactive = 0
        count_user = 0
        list_count_user = []
        tmp_json_1 = {}
        # count = 4
        start_last = 0
        startTime_list = []
        endTime_list = []
        count_1 = 3
        count_2 = 4
        query_count_all = None
        try:
            now = datetime.datetime.now()
            day = (str(now).split('-')[2]).split(' ')[0]
            year = str(now).split('-')[0]
            month = str(now).split('-')[1]
            day_of_week = calendar.weekday(int(year),int(month),int(day))
            flashback = timedelta(days=day_of_week)
            end_time = (now).replace(hour=23, minute=59, second=59, microsecond=00)
            start_time =  (now-flashback).replace(hour=0, minute=0, second=0, microsecond=0)
            startTime_list.append(start_time)
            endTime_list.append(end_time)
            list_user = []
            tmp_json = {}

            for x in range(count_1):
                list_start_end = find_startTime_endTime_week(start_time)
                start_time1 = list_start_end[0]
                end_time1 = list_start_end[1]
                list_user2 = []
                startTime_list.append(start_time1)
                endTime_list.append(end_time1)
                if x == count_1 - 1:
                    start_last = start_time1
                start_time = start_time1

            if self.tax_id == '' and self.document_type == '' : # tax_id = ค่าว่าง , document_type = ค่าว่าง
                # เทส query
                query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.sender_name,
                    view_document.send_time,
                    view_document.update_time,
                    view_document.biz_info,
                    view_document.documentType,
                    view_document.status
                ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time)
                ,and_(view_document.send_time >= start_last,view_document.send_time <= end_time))).all()
                # เทส query 
                db.session.close()
            elif self.tax_id != '' and self.document_type == '': # tax_id = มีค่า document_type = ค่าว่าง
                if self.tax_id == 'citizen':
                    print('tax_id',self.tax_id)
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status
                    ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time)
                    ,and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                    .filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                    db.session.close()
                    # เทส query 
                elif len(self.tax_id) != 13 :
                    return {'result':'ER','messageText':'error because tax_id incorret'} 
                
                else:
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status
                    ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time)
                    ,and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                    .filter(view_document.biz_info.contains(self.tax_id)).all()
                    # เทส query  
                    db.session.close()
            elif self.tax_id == '' and self.document_type != '': # tax_id = ค่าว่าง , document_type = มีค่า 
                 # เทส query
                query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.sender_name,
                    view_document.send_time,
                    view_document.update_time,
                    view_document.biz_info,
                    view_document.documentType,
                    view_document.status
                ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time)
                ,and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                .filter(view_document.documentType == self.document_type).all()
                # เทส query 
                db.session.close()
            elif self.tax_id != '' and self.document_type != '': # tax_id = มีค่า , document_type = มีค่า
                if self.tax_id == 'citizen':
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status
                    ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time)
                    ,and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                    .filter(view_document.documentType == self.document_type).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                    # เทส query 
                    db.session.close()
                elif len(self.tax_id) != 13 :
                    print('wekkkkkk11111')
                    return {'result':'ER','messageText':'error because tax_id incorret'} 
                
                else:
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status
                    ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time)
                    ,and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                    .filter(view_document.documentType == self.document_type).filter(view_document.biz_info.contains(self.tax_id)).all()
                    # เทส query 
                    db.session.close()
            list2 = []
            for x in range(len(query_count_all)):
                tmp_json = {
                    'sender_email': query_count_all[x].sender_email,
                    'sender_name': query_count_all[x].sender_email,
                    'sendtime':int(datetime.datetime.timestamp(query_count_all[x].send_time)),
                    'updatetime':int(datetime.datetime.timestamp(query_count_all[x].update_time)),
                    'biz_info':query_count_all[x].biz_info,
                    'documentType':query_count_all[x].documentType,
                    'status':query_count_all[x].status,
                }
                list2.append(tmp_json)
                tmp_json = {}

            # เช็คเอกสารทั้งหมดตามเวลา
            if len(query_count_all) == 0 :
                for x in range(count_2):
                    count_all = 0
                    count_active = 0
                    count_reject = 0
                    count_delete = 0
                    count_inactive = 0
                    list_user2 = []
                    timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                    timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                    tmp_json['all_documents'] = count_all
                    tmp_json['documents_active'] = count_active
                    tmp_json['count_user'] = len(list_user2)
                    tmp_json['documents_reject'] = count_reject
                    tmp_json['documents_delete'] = count_delete
                    tmp_json['documents_inactive'] = count_inactive
                    tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                    tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                    tmp_json['timestamp_start'] = timestamp_start
                    tmp_json['timestamp_end'] = timestamp_end
                    list_json.append(tmp_json)
                    tmp_json = {}
            else:
                for x in range(count_2):   
                    count_all = 0
                    count_active = 0
                    count_reject = 0
                    count_delete = 0
                    count_inactive = 0                 
                    list_user2 = []
                    for y in range(len(list2)):
                        timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                        timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                        user = list2[y]['sender_name']
                        if (int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end))\
                        or (int(list2[y]['updatetime']) >= int(timestamp_start) and list2[y]['updatetime'] <= int(timestamp_end)):
                            count_all = count_all + 1
                            if user not in list_user2:
                                list_user2.append(user)
                            if user not in list_count_user:
                                list_count_user.append(user)
                        if ((int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end))\
                        or (int(list2[y]['updatetime']) >= int(timestamp_start) and list2[y]['updatetime'] <= int(timestamp_end))) and list2[y]['status'] == 'ACTIVE':
                            count_active = count_active + 1
                        if ((int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end))\
                        or (int(list2[y]['updatetime']) >= int(timestamp_start) and list2[y]['updatetime'] <= int(timestamp_end))) and list2[y]['status'] == 'REJECT':
                            count_reject = count_reject + 1
                        if ((int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end))\
                        or (int(list2[y]['updatetime']) >= int(timestamp_start) and list2[y]['updatetime'] <= int(timestamp_end))) and list2[y]['status'] == 'DELETE':
                            count_delete = count_delete + 1
                        if ((int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end))\
                        or (int(list2[y]['updatetime']) >= int(timestamp_start) and list2[y]['updatetime'] <= int(timestamp_end))) and list2[y]['status'] == 'INACTIVE':
                            count_inactive = count_inactive + 1
                        if x == 0 and list2[y]['status'] == 'ACTIVE':
                            count_Doc_of_week_active += 1
                        if x == 0 and list2[y]['status'] == 'REJECT':
                            count_Doc_of_week_reject += 1
                        if x == 0 and list2[y]['status'] == 'DELETE':
                            count_Doc_of_week_delete += 1
                        if x == 0 and list2[y]['status'] == 'INACTIVE':
                            count_Doc_of_week_inactive += 1

                    tmp_json['all_documents'] = count_all
                    tmp_json['documents_active'] = count_active
                    tmp_json['documents_reject'] = count_reject
                    tmp_json['documents_delete'] = count_delete
                    tmp_json['documents_inactive'] = count_inactive
                    tmp_json['count_user'] = len(list_user2)                   
                    tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                    tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                    tmp_json['timestamp_start'] = timestamp_start
                    tmp_json['timestamp_end'] = timestamp_end
                    list_json.append(tmp_json)
                    tmp_json = {}
            # เช็คเอกสารทั้งหมดตามเวลา
            tmp_json_1['documents_past_week'] = list_json

            tmp_json = {}
            list_json = []
            tmp_json['documents_all'] = len(list2)
            tmp_json['documents_all_active'] = count_Doc_of_week_active
            tmp_json['documents_all_reject'] = count_Doc_of_week_reject
            tmp_json['documents_all_delete'] = count_Doc_of_week_delete
            tmp_json['documents_all_inactive'] = count_Doc_of_week_inactive
            tmp_json['countUser_of_week'] = len(list_count_user)
            list_json.append(tmp_json)

            tmp_json_1['documents_all_week'] = list_json
            # tmp_json_1['list email user'] = Counter(list_count_user)
            return {'result':'OK','messageText':tmp_json_1}
            db.session.close()
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'notfound data' + str(e)}

    def select_admin_count_viewdoc_day_v2(self,tax_id,document_type,level_admin):
        self.tax_id = tax_id
        self.document_type = document_type
        self.level_admin = int(level_admin)
        list_json = []
        list_start_time = []
        list_count_user = []        
        countDoc_of_day = 0
        count_Doc_of_day_reject = 0
        count_Doc_of_day_active = 0
        count_Doc_of_day_delete = 0
        count_Doc_of_day_inactvie = 0
        tmp_json_1 = {}
        start_last = 0
        startTime_list = []
        endTime_list = []
        count_1 = 29 
        count_2 = 30
        try:
            list_user = []
            tmp_json = {}
            now = datetime.datetime.now()
            end_time = now.replace(hour=23, minute=59, second=59, microsecond=00)
            start_time = now.replace(hour=0, minute=0, second=0, microsecond=0)
            startTime_list.append(start_time)
            endTime_list.append(end_time)
            for x in range(count_1):
                list_start_end = find_startTime_endTime_day(start_time)
                start_time1 = list_start_end[0]
                end_time1 = list_start_end[1]
                startTime_list.append(start_time1)
                endTime_list.append(end_time1)
                if x == count_1 - 1:
                    start_last = start_time1
                start_time = start_time1

            if self.tax_id == '' and self.document_type == '' : # tax_id = ค่าว่าง , document_type = ค่าว่าง                 
                # เทส query
                query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.sender_name,
                    view_document.send_time,
                    view_document.update_time,
                    view_document.biz_info,
                    view_document.documentType,
                    view_document.status
                ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time)
                ,and_(view_document.send_time >= start_last,view_document.send_time <= end_time))).all()
                # เทส query 
                db.session.close()                    
            
            elif self.tax_id != '' and self.document_type == '': # tax_id = มีค่า , document_type = ค่าว่าง
                if self.tax_id == 'citizen':                    
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status
                    ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time)
                    ,and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                    .filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                    # เทส query 
                    db.session.close()                    
                
                elif len(self.tax_id) != 13 :
                    return {'result':'ER','messageText':'error because tax_id incorret'} 
                
                else:                  
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status
                    ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time)
                    ,and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                    .filter(view_document.biz_info.contains(self.tax_id)).all()
                    # เทส query  
                    db.session.close()                 
  
            elif self.tax_id == '' and self.document_type != '': # tax_id = ค่าว่าง , document_type = มีค่า                
                 # เทส query
                query_count_all = view_document.query.with_entities(
                    view_document.sender_email,
                    view_document.sender_name,
                    view_document.send_time,
                    view_document.update_time,
                    view_document.biz_info,
                    view_document.documentType,
                    view_document.status
                ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time)
                ,and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                .filter(view_document.documentType == self.document_type).all()
                # เทส query 
                db.session.close()
             
            elif self.tax_id != '' and self.document_type != '': # tax_id = มีค่า , document_type = มีค่า
                if self.tax_id == 'citizen':
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status
                    ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time)
                    ,and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                    .filter(view_document.documentType == self.document_type).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                    # เทส query 
                    db.session.close()
                   
                elif len(self.tax_id) != 13 :
                    print('wekkkkkk11111')
                    return {'result':'ER','messageText':'error because tax_id incorret'} 
               
                else:                   
                    # เทส query
                    query_count_all = view_document.query.with_entities(
                        view_document.sender_email,
                        view_document.sender_name,
                        view_document.send_time,
                        view_document.update_time,
                        view_document.biz_info,
                        view_document.documentType,
                        view_document.status
                    ).filter(or_(and_(view_document.update_time >= start_last,view_document.update_time <= end_time)
                    ,and_(view_document.send_time >= start_last,view_document.send_time <= end_time)))\
                    .filter(view_document.documentType == self.document_type).filter(view_document.biz_info.contains(self.tax_id)).all()
                    # เทส query 

            list2 = []
            for x in range(len(query_count_all)):
                tmp_json = {
                    'sender_email': query_count_all[x].sender_email,
                    'sender_name': query_count_all[x].sender_email,
                    'sendtime':int(datetime.datetime.timestamp(query_count_all[x].send_time)),
                    'updatetime':int(datetime.datetime.timestamp(query_count_all[x].update_time)),
                    'biz_info':query_count_all[x].biz_info,
                    'documentType':query_count_all[x].documentType,
                    'status':query_count_all[x].status,
                }
                list2.append(tmp_json)
                tmp_json = {}

            if len(query_count_all) == 0: 
                for x in range(count_2):
                    count_all = 0
                    count_active = 0
                    count_reject = 0
                    count_delete = 0
                    count_inactive = 0
                    list_user2 = []
                    timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                    timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                    tmp_json['all_documents'] = count_all
                    tmp_json['documents_active'] = count_active
                    tmp_json['count_user'] = len(list_user2)
                    tmp_json['documents_reject'] = count_reject
                    tmp_json['documents_delete'] = count_delete
                    tmp_json['documents_inactive'] = count_inactive
                    tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                    tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                    tmp_json['timestamp_start'] = timestamp_start
                    tmp_json['timestamp_end'] = timestamp_end
                    list_json.append(tmp_json)
                    tmp_json = {}
        
            else:
                alls, actives, rejects, deletes = 0, 0, 0, 0
                for x in range(count_2):
                    count_all = 0
                    count_active = 0
                    count_reject = 0
                    count_delete = 0
                    count_inactive = 0
                    list_user2 = []
                    for y in range(len(list2)):
                        timestamp_start = int(datetime.datetime.timestamp(startTime_list[x]))
                        timestamp_end = int(datetime.datetime.timestamp(endTime_list[x]))
                        user = list2[y]['sender_email']
                        if (int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end))\
                        or (int(list2[y]['updatetime']) >= int(timestamp_start) and list2[y]['updatetime'] <= int(timestamp_end)):
                            count_all = count_all + 1
                            if user not in list_user2:
                                list_user2.append(user)
                            if user not in list_count_user:
                                list_count_user.append(user)
                        if ((int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end))\
                        or (int(list2[y]['updatetime']) >= int(timestamp_start) and list2[y]['updatetime'] <= int(timestamp_end))) and list2[y]['status'] == 'ACTIVE':
                            count_active = count_active + 1
                        if ((int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end))\
                        or (int(list2[y]['updatetime']) >= int(timestamp_start) and list2[y]['updatetime'] <= int(timestamp_end))) and list2[y]['status'] == 'REJECT':
                            count_reject = count_reject + 1
                        if ((int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end))\
                        or (int(list2[y]['updatetime']) >= int(timestamp_start) and list2[y]['updatetime'] <= int(timestamp_end))) and list2[y]['status'] == 'DELETE':
                            count_delete = count_delete + 1
                        if ((int(list2[y]['sendtime']) >= int(timestamp_start) and list2[y]['sendtime'] <= int(timestamp_end))\
                        or (int(list2[y]['updatetime']) >= int(timestamp_start) and list2[y]['updatetime'] <= int(timestamp_end))) and list2[y]['status'] == 'INACTIVE':
                            count_inactive = count_inactive + 1
                        if x == 0 and list2[y]['status'] == 'ACTIVE':
                            count_Doc_of_day_active += 1
                        if x == 0 and list2[y]['status'] == 'REJECT':
                            count_Doc_of_day_reject += 1
                        if x == 0 and list2[y]['status'] == 'DELETE':
                            count_Doc_of_day_delete += 1
                        if x == 0 and list2[y]['status'] == 'INACTIVE':
                            count_Doc_of_day_inactvie += 1

                    tmp_json['all_documents'] = count_all
                    tmp_json['count_user'] = len(list_user2)
                    tmp_json['documents_active'] = count_active
                    tmp_json['documents_reject'] = count_reject
                    tmp_json['documents_delete'] = count_delete
                    tmp_json['documents_inactive'] = count_inactive
                    tmp_json['datetime_start'] = str(datetime.datetime.fromtimestamp(timestamp_start))
                    tmp_json['datetime_end'] = str(datetime.datetime.fromtimestamp(timestamp_end))
                    tmp_json['timestamp_start'] = timestamp_start
                    tmp_json['timestamp_end'] = timestamp_end
                    list_json.append(tmp_json)
                    tmp_json = {}
                   
                    alls += count_all
                    actives += count_active
                    rejects += count_reject
                    deletes += count_delete
            print('allDay :',alls)
            print('activeday :',actives)
            print('rejectday :',rejects)
            print('deleteday :',deletes)

            tmp_json_1['documents_past_day'] = list_json

            tmp_json = {}
            list_json = []
            tmp_json['documents_all'] = len(list2)
            tmp_json['documents_all_active'] = count_Doc_of_day_active
            tmp_json['documents_all_reject'] = count_Doc_of_day_reject
            tmp_json['documents_all_delete'] = count_Doc_of_day_delete
            tmp_json['documents_all_inactive'] = count_Doc_of_day_inactvie
            tmp_json['countUser_of_day'] = len(list_count_user)
            list_json.append(tmp_json)

            tmp_json_1['documents_all_day'] = list_json
            db.session.close()
            return {'result':'OK','messageText':tmp_json_1}

        except Exception as e:
            return {'result':'ER','messageText':'notfound data' + str(e)}

    def select_admin_count_all(self,tax_id,document_type,level_admin):
        self.tax_id = tax_id
        self.document_type = document_type
        self.level_admin = int(level_admin)
        list_json = []
        list_start_time = []
        countDoc_of_hour= 0
        count_Doc_of_hour_reject = 0
        count_Doc_of_hour_active = 0
        count_Doc_of_hour_delete = 0
        count_Doc_of_hour_inactive = 0
        count_user = 0
        tmp_json_1 = {}
        if self.level_admin == 0:
            if self.tax_id == '' and self.document_type == '': # tax_id ค่าว่าง , document_type != ค่าว่าง
                list_user = []
                query_sendername = view_document.query.with_entities(
                    view_document.sender_email
                ).all()
                
                for x in range(len(query_sendername)):
                    user = str(query_sendername[x])
                    list_user.append(user)
                query_count_active = (view_document.query.filter(view_document.status == 'ACTIVE')).count()
                query_count_reject = (view_document.query.filter(view_document.status == 'REJECT')).count()
                query_count_delete = (view_document.query.filter(view_document.status == 'DELETE')).count()
                query_count_inactive = (view_document.query.filter(view_document.status == 'INACTIVE')).count()
                query_count_all = (view_document.query).count()
                tmp_json = {}
                tmp_json['all'] = query_count_all
                tmp_json['active'] = query_count_active
                tmp_json['reject'] = query_count_reject
                tmp_json['delete'] = query_count_delete
                tmp_json['inactive'] = query_count_inactive
                tmp_json['countUser_all'] = len(Counter(list_user))
                list_json.append(tmp_json)
                tmp_json_1['documents_all'] = list_json                
                db.session.close()
            elif self.tax_id != '' and self.document_type == '':  # tax_id มีค่า , document_type != ค่าว่าง
                if self.tax_id == 'citizen':
                    list_user = []
                    query_sendername = view_document.query.with_entities(
                        view_document.sender_email
                    ).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).all()
                    for x in range(len(query_sendername)):
                        user = str(query_sendername[x])
                        list_user.append(user)
                    query_count_active = (view_document.query.filter(view_document.status == 'ACTIVE').filter(or_(view_document.biz_info == 'None',view_document.biz_info == None))).count()
                    query_count_reject = (view_document.query.filter(view_document.status == 'REJECT').filter(or_(view_document.biz_info == 'None',view_document.biz_info == None))).count()
                    query_count_delete = (view_document.query.filter(view_document.status == 'DELETE').filter(or_(view_document.biz_info == 'None',view_document.biz_info == None))).count()
                    query_count_inactive = (view_document.query.filter(view_document.status == 'INACTIVE').filter(or_(view_document.biz_info == 'None',view_document.biz_info == None))).count()
                    query_count_all = (view_document.query.filter(or_(view_document.biz_info == 'None',view_document.biz_info == None))).count()
                    tmp_json = {}
                    tmp_json['all'] = query_count_all
                    tmp_json['active'] = query_count_active
                    tmp_json['reject'] = query_count_reject
                    tmp_json['delete'] = query_count_delete
                    tmp_json['inactive'] = query_count_inactive
                    tmp_json['countUser_all'] = len(Counter(list_user))
                    list_json.append(tmp_json)
                    tmp_json_1['documents_all'] = list_json                    
                    db.session.close()
                elif len(self.tax_id) == 13:
                    list_user = []
                    query_sendername = view_document.query.with_entities(
                        view_document.sender_email
                    ).filter(view_document.biz_info.contains(self.tax_id)).all()
                    for x in range(len(query_sendername)):
                        user = str(query_sendername[x])
                        list_user.append(user)
                    query_count_active = (view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.biz_info.contains(self.tax_id))).count()
                    query_count_reject = (view_document.query.filter(view_document.status == 'REJECT').filter(view_document.biz_info.contains(self.tax_id))).count()
                    query_count_delete = (view_document.query.filter(view_document.status == 'DELETE').filter(view_document.biz_info.contains(self.tax_id))).count()
                    query_count_inactive = (view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.biz_info.contains(self.tax_id))).count()
                    query_count_all = (view_document.query.filter(view_document.biz_info.contains(self.tax_id))).count()
                    tmp_json = {}
                    tmp_json['all'] = query_count_all
                    tmp_json['active'] = query_count_active
                    tmp_json['reject'] = query_count_reject
                    tmp_json['delete'] = query_count_delete
                    tmp_json['inactive'] = query_count_inactive
                    tmp_json['countUser_all'] = len(Counter(list_user))
                    list_json.append(tmp_json)
                    tmp_json_1['documents_all'] = list_json                    
                    db.session.close()
                else:
                    return {'result':'ER','messageText':'error because tax_id incorret'} 
 
            elif self.tax_id != '' and self.document_type != '':  # tax_id มีค่า , document_type != มีค่า
                if self.tax_id == 'citizen':
                    list_user = []
                    query_sendername = view_document.query.with_entities(
                        view_document.sender_email
                    ).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType == self.document_type).all()
                    for x in range(len(query_sendername)):
                        user = str(query_sendername[x])
                        list_user.append(user)
                    query_count_active = (view_document.query.filter(view_document.status == 'ACTIVE').filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType == self.document_type)).count()
                    query_count_reject = (view_document.query.filter(view_document.status == 'REJECT').filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType == self.document_type)).count()
                    query_count_delete = (view_document.query.filter(view_document.status == 'DELETE').filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType == self.document_type)).count()
                    query_count_inactive = (view_document.query.filter(view_document.status == 'INACTIVE').filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType == self.document_type)).count()
                    query_count_all = (view_document.query.filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType == self.document_type)).count()
                    tmp_json = {}
                    tmp_json['all'] = query_count_all
                    tmp_json['active'] = query_count_active
                    tmp_json['reject'] = query_count_reject
                    tmp_json['delete'] = query_count_delete
                    tmp_json['inactive'] = query_count_inactive
                    tmp_json['countUser_all'] = len(Counter(list_user))
                    list_json.append(tmp_json)
                    tmp_json_1['documents_all'] = list_json                    
                    db.session.close()
                elif len(self.tax_id) == 13 :
                    list_user = []
                    query_sendername = view_document.query.with_entities(
                        view_document.sender_email
                    ).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType == self.document_type).all()
                    for x in range(len(query_sendername)):
                        user = str(query_sendername[x])
                        list_user.append(user)
                    query_count_active = (view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType == self.document_type)).count()
                    query_count_reject = (view_document.query.filter(view_document.status == 'REJECT').filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType == self.document_type)).count()
                    query_count_delete = (view_document.query.filter(view_document.status == 'DELETE').filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType == self.document_type)).count()
                    query_count_inactive = (view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType == self.document_type)).count()
                    query_count_all = (view_document.query.filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType == self.document_type)).count()
                    tmp_json = {}
                    tmp_json['all'] = query_count_all
                    tmp_json['active'] = query_count_active
                    tmp_json['reject'] = query_count_reject
                    tmp_json['delete'] = query_count_delete
                    tmp_json['inactive'] = query_count_inactive
                    tmp_json['countUser_all'] = len(Counter(list_user))
                    list_json.append(tmp_json)
                    tmp_json_1['documents_all'] = list_json                    
                    db.session.close()
                else:
                    return {'result':'ER','messageText':'error because tax_id incorret'} 
            
            elif self.tax_id == '' and self.document_type != '':  # tax_id ค่าว่าง , document_type != มีค่า
                list_user = []
                query_sendername = view_document.query.with_entities(
                    view_document.sender_email
                ).filter(view_document.documentType == self.document_type).all()
                for x in range(len(query_sendername)):
                    user = str(query_sendername[x])
                    list_user.append(user)
                query_count_active = (view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.documentType == self.document_type)).count()
                query_count_reject = (view_document.query.filter(view_document.status == 'REJECT').filter(view_document.documentType == self.document_type)).count()
                query_count_delete = (view_document.query.filter(view_document.status == 'DELETE').filter(view_document.documentType == self.document_type)).count()
                query_count_inactive = (view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.documentType == self.document_type)).count()
                query_count_all = (view_document.query.filter(view_document.documentType == self.document_type)).count()
                tmp_json = {}
                tmp_json['all'] = query_count_all
                tmp_json['active'] = query_count_active
                tmp_json['reject'] = query_count_reject
                tmp_json['delete'] = query_count_delete
                tmp_json['inactive'] = query_count_inactive
                tmp_json['countUser_all'] = len(Counter(list_user))
                list_json.append(tmp_json)
                tmp_json_1['documents_all'] = list_json
                db.session.close()

        elif(self.level_admin == 1):
            if self.tax_id != '' and self.document_type == '':  # tax_id มีค่า , document_type  ค่าว่าง
                list_user = []
                query_sendername = view_document.query.with_entities(
                    view_document.sender_email
                ).filter(view_document.biz_info.contains(self.tax_id)).all()
                for x in range(len(query_sendername)):
                    user = str(query_sendername[x])
                    list_user.append(user)
                query_count_active = (view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.biz_info.contains(self.tax_id))).count()
                query_count_reject = (view_document.query.filter(view_document.status == 'REJECT').filter(view_document.biz_info.contains(self.tax_id))).count()
                query_count_delete = (view_document.query.filter(view_document.status == 'DELETE').filter(view_document.biz_info.contains(self.tax_id))).count()
                query_count_inactive = (view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.biz_info.contains(self.tax_id))).count()
                query_count_all = (view_document.query.filter(view_document.biz_info.contains(self.tax_id))).count()
                tmp_json = {}
                tmp_json['all'] = query_count_all
                tmp_json['active'] = query_count_active
                tmp_json['reject'] = query_count_reject
                tmp_json['delete'] = query_count_delete
                tmp_json['inactive'] = query_count_inactive
                tmp_json['countUser_all'] = len(Counter(list_user))
                tmp_json_1['documents_all'] = list_json
                list_json.append(tmp_json)
                tmp_json_1['documents_all'] = list_json                
                db.session.close()
            elif self.tax_id != '' and self.document_type != '':  # tax_id มีค่า , document_type != มีค่า
                list_user = []
                query_sendername = view_document.query.with_entities(
                    view_document.sender_email
                ).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType == self.document_type).all()
                for x in range(len(query_sendername)):
                    user = str(query_sendername[x])
                    list_user.append(user)
                query_count_active = (view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType == self.document_type)).count()
                query_count_reject = (view_document.query.filter(view_document.status == 'REJECT').filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType == self.document_type)).count()
                query_count_delete = (view_document.query.filter(view_document.status == 'DELETE').filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType == self.document_type)).count()
                query_count_inactive = (view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType == self.document_type)).count()
                query_count_all = (view_document.query.filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType == self.document_type)).count()
                tmp_json = {}
                tmp_json['all'] = query_count_all
                tmp_json['active'] = query_count_active
                tmp_json['reject'] = query_count_reject
                tmp_json['delete'] = query_count_delete
                tmp_json['inactive'] = query_count_inactive
                tmp_json['countUser_all'] = len(Counter(list_user))
                list_json.append(tmp_json)
                tmp_json_1['documents_all'] = list_json
                db.session.close()
        return {'result':'OK','messageText':list_json} 


    def select_document_v3(self,date_start,date_end,document_id,sender_email,recipient_email,tax_id,documentType,limit,offset,text):
        tmp_list_result = []
        tmp_list_result2 = []
        self.date_start = date_start
        self.date_end = date_end
        self.document_id = document_id
        self.sender_email = sender_email
        self.recipient_email = recipient_email
        self.tax_id = tax_id
        self.documentType = documentType
        self.limit = limit
        self.offset = offset
        self.text = text
        limit_ch = self.limit
        tmp_list_sid_code = []
        count_document = 0
        count_rowDocument = 0
        count_rowDocument_StatusActive = 0
        count_rowDocument_StatusReject = 0
        count_rowDocument_StatusCancel = 0
        statusFile_count_approve = 0
        statusFile_count_pendding = 0
        statusFile_count_reject = 0
        statusFile_count_wait = 0
        step_time = []

        step_time_total = []
        t1 = None
        t2 = None

        sum_Document = 0
        Complete_Approve = 0
        Incomplete_Pendding = 0
        Reject = 0
        Wait = 0

        query_document_tmp = None
        query_document_tmp2 = None

        query_document_tmp_Active = 0
        query_document_tmp_Reject = 0
        query_document_tmp_count = 0

        try:

            if (limit_ch == ''):
                limit_ch = 1000
            elif (limit_ch != ''):
                limit_ch = self.limit
                if limit_ch > 1000:
                    limit_ch = 1000

            
            # query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').count()
            # query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').count()
           
            
            if self.tax_id == 'citizen' :
                if self.tax_id != '' and self.text != '' and self.document_id == '' and self.sender_email == '' and self.recipient_email == '' and self.documentType == '':
                    query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.options_page.contains(self.text)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).limit(limit_ch).offset(self.offset).all()
                    query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.options_page.contains(self.text)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                    query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.options_page.contains(self.text)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                    query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.options_page.contains(self.text)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                    query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.options_page.contains(self.text)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                    print('citizen tax_id,text')
                elif self.date_start != '' and self.date_end != '' : # date_start ไม่ว่าง , date_end ไม่ว่าง
                    if self.document_id =='':
                        if self.sender_email != '' and self.tax_id != '' and self.recipient_email != '' and self.documentType != '': # ใส่ทั้งหมด
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                            # query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()

                            query_document_tmp2 = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).offset(self.offset).all()
                            eval_biz_info = eval(query_document_tmp2[0].biz_info)
                            # print ('eval_biz_info: ',eval_biz_info['id_card_num'])
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).limit(limit_ch).offset(self.offset).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                            query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                            query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                            print('all put')

                        elif self.sender_email != '': # ใส่ sender_email

                            if self.sender_email != '' and self.tax_id != '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).count()
                                # query_document_tmp2 = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()
                                # eval_biz_info = eval(query_document_tmp2[0].biz_info)
                                # query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType.contains(self.documentType)).filter(eval_biz_info['id_card_num'] == self.tax_id).limit(limit_ch).all()

                                print('non recipient')

                            elif self.tax_id == '' and self.recipient_email != '' and self.documentType != '': # ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).count()
                                print('non tax')

                            elif self.documentType == '' and self.recipient_email != '' and self.tax_id != '': # ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                print('non documentType')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).count()
                                print('only sender , documentType')

                            elif self.documentType == '' and self.recipient_email == '' and self.tax_id != '': # ไม่ใส่ recipient_email // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                print('only sender , tax_id')

                            elif self.tax_id == '' and self.documentType == '' and self.recipient_email == '': # ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).count()
                                print('only sender , recipient_email')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType == '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).count()
                                print('only sender')

                        elif self.recipient_email != '': # ใส่ recipient_email

                            if self.tax_id != '' and self.sender_email == '' and self.documentType == '': # ไม่ใส่ sender_email // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                print('non sender_email ,documentType')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType != '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                print('only recipient , documentType')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType == '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                print('only recipient')

                        elif self.tax_id == '' and self.recipient_email == '' and self.sender_email == '' and self.documentType != '': # ใส่ documentType
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).offset(self.offset).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.documentType.contains(self.documentType)).count()
                            print('only documenType')

                        elif self.tax_id != '' and self.recipient_email == ''and self.sender_email == ''and self.documentType == '': # ใส่ tax_id
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).limit(limit_ch).offset(self.offset).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                            query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                            query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                            print('tax_id')

                        elif self.tax_id != '' and self.recipient_email == ''and self.sender_email == ''and self.documentType != '': # ใส่ tax_id,documentType
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).offset(self.offset).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).count()
                            print('tax_id , documenType')

                        elif self.sender_email == '' and self.tax_id == '' and self.recipient_email == ''and self.documentType == '': #ไม่ใส่อะไรเลย
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).limit(limit_ch).offset(self.offset).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).count()
                            query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).count()
                            query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).count()
                            print('non put')

                    elif self.document_id != '':# กรอกช่อง id
                        date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                        date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                        co_str = len(self.document_id)
                        # print (co_str)
                        if co_str > 13 : # ใส่ doc_id
                            # print ('doc_id')
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.doc_id.contains(self.document_id)).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.doc_id.contains(self.document_id)).count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.doc_id.contains(self.document_id)).count()
                            query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.doc_id.contains(self.document_id)).count()
                            query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.doc_id.contains(self.document_id)).count()
                        elif co_str <= 13 : # ใส่ tracking_id
                            # print ('tracking_id')
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.tracking_id.contains(self.document_id)).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.tracking_id.contains(self.document_id)).count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.tracking_id.contains(self.document_id)).count()
                            query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.tracking_id.contains(self.document_id)).count()
                            query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.tracking_id.contains(self.document_id)).count()
                        print ('have id')
                elif self.date_start != '' and self.date_end == '' : # date_start ไม่ว่าง , date_end ว่าง
                    if self.document_id =='':
                        if self.sender_email != '' and self.tax_id != '' and self.recipient_email != ''and self.documentType != '': # ใส่ทั้งหมด
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).offset(self.offset).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).count()
                            print('all put2')

                        elif self.sender_email != '': # ใส่ sender_email

                            if self.tax_id != '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).count()
                                print('non recipient2')

                            elif self.tax_id == '' and self.recipient_email != '' and self.documentType != '': # ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).count()
                                print('non tax2')

                            elif self.documentType == '' and self.recipient_email != '' and self.tax_id != '': # ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                print('non documentType2')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).count()
                                print('only sender , documentType2')

                            elif self.documentType == '' and self.recipient_email == '' and self.tax_id != '': # ไม่ใส่ recipient_email // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                print('only sender , tax_id 2')

                            elif self.tax_id == '' and self.documentType == '' and self.recipient_email != '': # ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).count()
                                print('only sender , recipient_email2')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType == '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).count()
                                print('only sender2')

                        elif self.recipient_email != '': # ใส่ recipient_email

                            if self.tax_id != '' and self.sender_email == '' and self.documentType == '': # ไม่ใส่ sender_email // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                print('non sender_email2')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType != '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                print('only recipient , documentType2')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType == '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                print('only recipient2')

                        elif self.tax_id == '' and self.recipient_email == ''and self.sender_email == ''and self.documentType != '': # ใส่ documentType
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).offset(self.offset).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.documentType.contains(self.documentType)).count()
                            print('only documenType2')

                        elif self.tax_id != '' and self.recipient_email == '' and self.sender_email == '' and self.documentType == '': # ใส่ tax_id
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).limit(limit_ch).offset(self.offset).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                            query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                            query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                            print('tax_id2')

                        elif self.tax_id != '' and self.recipient_email == ''and self.sender_email == ''and self.documentType != '': # ใส่ tax_id,documentType
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).offset(self.offset).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).count()
                            print('tax_id , documenType2')

                        elif self.sender_email == '' and self.tax_id == '' and self.recipient_email == '': #ไม่ใส่อะไรเลย
                            date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time>=date_start_tmp).filter(view_document.send_time<=date_end_tmp).limit(limit_ch).offset(self.offset).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time>=date_start_tmp).filter(view_document.send_time<=date_end_tmp).count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time>=date_start_tmp).filter(view_document.send_time<=date_end_tmp).count()
                            query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time>=date_start_tmp).filter(view_document.send_time<=date_end_tmp).count()
                            query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time>=date_start_tmp).filter(view_document.send_time<=date_end_tmp).count()
                            print('non put2')

                    elif self.document_id != '':# กรอกช่อง id
                        date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                        co_str = len(self.document_id)
                        # print (co_str)
                        if co_str > 13 : # ใส่ doc_id
                            # print ('doc_id')
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time>=date_start_tmp).filter(view_document.doc_id.contains(self.document_id)).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time>=date_start_tmp).filter(view_document.doc_id.contains(self.document_id)).count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time>=date_start_tmp).filter(view_document.doc_id.contains(self.document_id)).count()
                            query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time>=date_start_tmp).filter(view_document.doc_id.contains(self.document_id)).count()
                            query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time>=date_start_tmp).filter(view_document.doc_id.contains(self.document_id)).count()
                        elif co_str <= 13 : # ใส่ tracking_id
                            # print ('tracking_id')
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time>=date_start_tmp).filter(view_document.tracking_id.contains(self.document_id)).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time>=date_start_tmp).filter(view_document.tracking_id.contains(self.document_id)).count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time>=date_start_tmp).filter(view_document.tracking_id.contains(self.document_id)).count()
                            query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time>=date_start_tmp).filter(view_document.tracking_id.contains(self.document_id)).count()
                            query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time>=date_start_tmp).filter(view_document.tracking_id.contains(self.document_id)).count()
                        print ('have id2')
                elif self.date_start == '' and self.date_end != '' : # date_start ว่าง , date_end ไม่ว่าง
                    query_document_tmp = []
                    query_document_tmp_Active = 0
                    query_document_tmp_Reject = 0
                    query_document_tmp_Inactive = 0
                    query_document_tmp_Delete = 0
                elif self.date_start == '' and self.date_end == '' : # date_start ว่าง , date_end ว่าง
                    if self.document_id != '':   # กรอกช่อง id
                        co_str = len(self.document_id)
                        # print (co_str)
                        if co_str > 13 :
                            # print ('doc_id')
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.doc_id.contains(self.document_id)).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.doc_id.contains(self.document_id)).count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.doc_id.contains(self.document_id)).count()
                            query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.doc_id.contains(self.document_id)).count()
                            query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.doc_id.contains(self.document_id)).count()
                        elif co_str <= 13 :
                            # print ('tracking_id')
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.tracking_id.contains(self.document_id)).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.tracking_id.contains(self.document_id)).count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.tracking_id.contains(self.document_id)).count()
                            query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.tracking_id.contains(self.document_id)).count()
                            query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.tracking_id.contains(self.document_id)).count()
                        print ('have id4')

                    if self.document_id =='': # ไม่กรอก id
                        if self.sender_email != '' and self.tax_id != '' and self.recipient_email != '' and self.documentType != '' : # ใส่ทั้งหมด

                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).offset(self.offset).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).count()
                            print('all put4')

                        elif self.sender_email != '': # ใส่ sender_email

                            if self.tax_id != '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).count()
                                print('non recipient4')

                            elif self.tax_id == '' and self.recipient_email != '' and self.documentType != '': # ไม่ใส่ tax_id
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).count()
                                print('non tax4')

                            elif self.documentType == '' and self.recipient_email != '' and self.tax_id != '': # ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                print('non documentType2')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).count()
                                print('only sender4')

                            elif self.documentType == '' and self.recipient_email == '' and self.tax_id != '': # ไม่ใส่ recipient_email // ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.sender_email.contains(self.sender_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                print('only sender , tax_id 3')

                            elif self.tax_id == '' and self.documentType == '' and self.recipient_email != '': # ไม่ใส่ tax_id // ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).count()
                                print('only sender , recipient_email 3')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType == '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id // ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.sender_email.contains(self.sender_email)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.sender_email.contains(self.sender_email)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.sender_email.contains(self.sender_email)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.sender_email.contains(self.sender_email)).count()
                                print('only sender4')

                        elif self.recipient_email != '': # ใส่ recipient_email
                            if self.tax_id != '' and self.sender_email == '' and self.documentType == '': # ไม่ใส่ sender_email // ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.recipient_email.contains(self.recipient_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.recipient_email.contains(self.recipient_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.recipient_email.contains(self.recipient_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.recipient_email.contains(self.recipient_email)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                                print('non sender_email 4')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType != '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                print('only recipient , documentType4')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType == '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id // ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.recipient_email.contains(self.recipient_email)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.recipient_email.contains(self.recipient_email)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.recipient_email.contains(self.recipient_email)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.recipient_email.contains(self.recipient_email)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.recipient_email.contains(self.recipient_email)).count()
                                print('only recipient4')

                        elif self.tax_id == '' and self.recipient_email == ''and self.sender_email == ''and self.documentType != '': # ใส่ documentType

                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).offset(self.offset).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.documentType.contains(self.documentType)).count()
                            print('only documenType4')

                        elif self.tax_id != '' and self.recipient_email == ''and self.sender_email == ''and self.documentType == '': # ใส่ tax_id
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).limit(limit_ch).offset(self.offset).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                            query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                            query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).count()
                            print('tax_id4')

                        elif self.tax_id != '' and self.recipient_email == '' and self.sender_email == ''and self.documentType != '': # ใส่ tax_id,documentType

                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).offset(self.offset).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(or_(view_document.biz_info == 'None',view_document.biz_info == None)).filter(view_document.documentType.contains(self.documentType)).count()
                            print('tax_id , documenType 4')


                        elif self.sender_email == '' and self.tax_id == '' and self.recipient_email == ''and self.documentType == '':#ไม่ใส่อะไรเลย
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).limit(limit_ch).offset(self.offset).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').count()
                            query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').count()
                            query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').count()
                            print ('No anything')
                
            else :
                print ('ELSEEEEEE')
                if self.tax_id != '' and self.text != '' and self.document_id == '' and self.sender_email == '' and self.recipient_email == '' and self.documentType == '':
                    print('else tax_id,text')
                    query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.options_page.contains(self.text)).limit(limit_ch).offset(self.offset).all()
                    query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.options_page.contains(self.text)).count()
                    query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.options_page.contains(self.text)).count()
                    query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.options_page.contains(self.text)).count()
                    query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.options_page.contains(self.text)).count()
                elif self.date_start != '' and self.date_end != '' : # date_start ไม่ว่าง , date_end ไม่ว่าง
                    if self.document_id =='':
                        if self.sender_email != '' and self.tax_id != '' and self.recipient_email != '' and self.documentType != '': # ใส่ทั้งหมด
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                            # query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()

                            query_document_tmp2 = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).offset(self.offset).all()
                            eval_biz_info = eval(query_document_tmp2[0].biz_info)
                            # print ('eval_biz_info: ',eval_biz_info['id_card_num'])
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(eval_biz_info['id_card_num'] == self.tax_id).filter(view_document.options_page.contains(self.documentType)).limit(limit_ch).offset(self.offset).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(eval_biz_info['id_card_num'] == self.tax_id).filter(view_document.options_page.contains(self.documentType)).count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(eval_biz_info['id_card_num'] == self.tax_id).filter(view_document.options_page.contains(self.documentType)).count()
                            query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(eval_biz_info['id_card_num'] == self.tax_id).filter(view_document.options_page.contains(self.documentType)).count()
                            query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(eval_biz_info['id_card_num'] == self.tax_id).filter(view_document.options_page.contains(self.documentType)).count()
                            print('all put')

                        elif self.sender_email != '': # ใส่ sender_email

                            if self.sender_email != '' and self.tax_id != '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).count()
                                # query_document_tmp2 = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).all()
                                # eval_biz_info = eval(query_document_tmp2[0].biz_info)
                                # query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType.contains(self.documentType)).filter(eval_biz_info['id_card_num'] == self.tax_id).limit(limit_ch).all()

                                print('non recipient')

                            elif self.tax_id == '' and self.recipient_email != '' and self.documentType != '': # ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).count()
                                print('non tax')

                            elif self.documentType == '' and self.recipient_email != '' and self.tax_id != '': # ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(view_document.biz_info.contains(self.tax_id)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                print('non documentType')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).count()
                                print('only sender , documentType')

                            elif self.documentType == '' and self.recipient_email == '' and self.tax_id != '': # ไม่ใส่ recipient_email // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                print('only sender , tax_id')

                            elif self.tax_id == '' and self.documentType == '' and self.recipient_email == '': # ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).count()
                                print('only sender , recipient_email')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType == '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).count()
                                print('only sender')

                        elif self.recipient_email != '': # ใส่ recipient_email

                            if self.tax_id != '' and self.sender_email == '' and self.documentType == '': # ไม่ใส่ sender_email // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                print('non sender_email ,documentType')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType != '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                print('only recipient , documentType')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType == '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                print('only recipient')

                        elif self.tax_id == '' and self.recipient_email == '' and self.sender_email == '' and self.documentType != '': # ใส่ documentType
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).offset(self.offset).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.documentType.contains(self.documentType)).count()
                            print('only documenType')

                        elif self.tax_id != '' and self.recipient_email == ''and self.sender_email == ''and self.documentType == '': # ใส่ tax_id
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.biz_info.contains(self.tax_id)).limit(limit_ch).offset(self.offset).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.biz_info.contains(self.tax_id)).count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.biz_info.contains(self.tax_id)).count()
                            query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.biz_info.contains(self.tax_id)).count()
                            query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.biz_info.contains(self.tax_id)).count()
                            print('tax_id')

                        elif self.tax_id != '' and self.recipient_email == ''and self.sender_email == ''and self.documentType != '': # ใส่ tax_id,documentType
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).offset(self.offset).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).count()
                            print('tax_id , documenType')

                        elif self.sender_email == '' and self.tax_id == '' and self.recipient_email == ''and self.documentType == '': #ไม่ใส่อะไรเลย
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).limit(limit_ch).offset(self.offset).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).count()
                            query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).count()
                            query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).count()
                            print('non put')

                    elif self.document_id != '':# กรอกช่อง id
                        date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                        date_end_tmp = datetime.datetime.fromtimestamp(self.date_end)
                        co_str = len(self.document_id)
                        # print (co_str)
                        if co_str > 13 : # ใส่ doc_id
                            # print ('doc_id')
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.doc_id.contains(self.document_id)).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.doc_id.contains(self.document_id)).count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.doc_id.contains(self.document_id)).count()
                            query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.doc_id.contains(self.document_id)).count()
                            query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.doc_id.contains(self.document_id)).count()
                        elif co_str <= 13 : # ใส่ tracking_id
                            # print ('tracking_id')
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.tracking_id.contains(self.document_id)).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.tracking_id.contains(self.document_id)).count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.tracking_id.contains(self.document_id)).count()
                            query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.tracking_id.contains(self.document_id)).count()
                            query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.tracking_id.contains(self.document_id)).count()
                        print ('have id')
                elif self.date_start != '' and self.date_end == '' : # date_start ไม่ว่าง , date_end ว่าง
                    if self.document_id =='':
                        if self.sender_email != '' and self.tax_id != '' and self.recipient_email != ''and self.documentType != '': # ใส่ทั้งหมด
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).offset(self.offset).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).count()
                            print('all put2')

                        elif self.sender_email != '': # ใส่ sender_email

                            if self.tax_id != '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).count()
                                print('non recipient2')

                            elif self.tax_id == '' and self.recipient_email != '' and self.documentType != '': # ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).count()
                                print('non tax2')

                            elif self.documentType == '' and self.recipient_email != '' and self.tax_id != '': # ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(view_document.biz_info.contains(self.tax_id)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                print('non documentType2')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).count()
                                print('only sender , documentType2')

                            elif self.documentType == '' and self.recipient_email == '' and self.tax_id != '': # ไม่ใส่ recipient_email // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                print('only sender , tax_id 2')

                            elif self.tax_id == '' and self.documentType == '' and self.recipient_email != '': # ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).count()
                                print('only sender , recipient_email2')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType == '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.sender_email.contains(self.sender_email)).count()
                                print('only sender2')
                        elif self.recipient_email != '': # ใส่ recipient_email

                            if self.tax_id != '' and self.sender_email == '' and self.documentType == '': # ไม่ใส่ sender_email // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                print('non sender_email2')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType != '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                print('only recipient , documentType2')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType == '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id // ไม่ใส่ documentType
                                date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                                query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                print('only recipient2')

                        elif self.tax_id == '' and self.recipient_email == ''and self.sender_email == ''and self.documentType != '': # ใส่ documentType
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).offset(self.offset).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.documentType.contains(self.documentType)).count()
                            print('only documenType2')

                        elif self.tax_id != '' and self.recipient_email == '' and self.sender_email == '' and self.documentType == '': # ใส่ tax_id
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.biz_info.contains(self.tax_id)).limit(limit_ch).offset(self.offset).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.biz_info.contains(self.tax_id)).count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.biz_info.contains(self.tax_id)).count()
                            query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.biz_info.contains(self.tax_id)).count()
                            query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.biz_info.contains(self.tax_id)).count()
                            print('tax_id2')

                        elif self.tax_id != '' and self.recipient_email == ''and self.sender_email == ''and self.documentType != '': # ใส่ tax_id,documentType
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).offset(self.offset).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time<=date_end_tmp).filter(view_document.send_time>=date_start_tmp).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).count()
                            print('tax_id , documenType2')

                        elif self.sender_email == '' and self.tax_id == '' and self.recipient_email == '': #ไม่ใส่อะไรเลย
                            date_end_tmp = datetime.datetime.fromtimestamp(time.time())
                            date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time>=date_start_tmp).filter(view_document.send_time<=date_end_tmp).limit(limit_ch).offset(self.offset).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time>=date_start_tmp).filter(view_document.send_time<=date_end_tmp).count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time>=date_start_tmp).filter(view_document.send_time<=date_end_tmp).count()
                            query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time>=date_start_tmp).filter(view_document.send_time<=date_end_tmp).count()
                            query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time>=date_start_tmp).filter(view_document.send_time<=date_end_tmp).count()
                            print('non put2')

                    elif self.document_id != '':# กรอกช่อง id
                        date_start_tmp = datetime.datetime.fromtimestamp(self.date_start)
                        co_str = len(self.document_id)
                        # print (co_str)
                        if co_str > 13 : # ใส่ doc_id
                            # print ('doc_id')
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time>=date_start_tmp).filter(view_document.doc_id.contains(self.document_id)).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time>=date_start_tmp).filter(view_document.doc_id.contains(self.document_id)).count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time>=date_start_tmp).filter(view_document.doc_id.contains(self.document_id)).count()
                            query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time>=date_start_tmp).filter(view_document.doc_id.contains(self.document_id)).count()
                            query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time>=date_start_tmp).filter(view_document.doc_id.contains(self.document_id)).count()
                        elif co_str <= 13 : # ใส่ tracking_id
                            # print ('tracking_id')
                            query_document_tmp = view_document.query.order_by(asc(view_document.send_time)).filter(view_document.send_time>=date_start_tmp).filter(view_document.tracking_id.contains(self.document_id)).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.send_time>=date_start_tmp).filter(view_document.tracking_id.contains(self.document_id)).count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.send_time>=date_start_tmp).filter(view_document.tracking_id.contains(self.document_id)).count()
                            query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.send_time>=date_start_tmp).filter(view_document.tracking_id.contains(self.document_id)).count()
                            query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.send_time>=date_start_tmp).filter(view_document.tracking_id.contains(self.document_id)).count()
                        print ('have id2')
                elif self.date_start == '' and self.date_end != '' : # date_start ว่าง , date_end ไม่ว่าง
                    query_document_tmp = []
                    query_document_tmp_Active = 0
                    query_document_tmp_Reject = 0
                elif self.date_start == '' and self.date_end == '' : # date_start ว่าง , date_end ว่าง
                    if self.document_id != '':   # กรอกช่อง id
                        co_str = len(self.document_id)
                        # print (co_str)
                        if co_str > 13 :
                            # print ('doc_id')
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.doc_id.contains(self.document_id)).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.doc_id.contains(self.document_id)).count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.doc_id.contains(self.document_id)).count()
                            query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.doc_id.contains(self.document_id)).count()
                            query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.doc_id.contains(self.document_id)).count()
                        elif co_str <= 13 :
                            # print ('tracking_id')
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.tracking_id.contains(self.document_id)).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.tracking_id.contains(self.document_id)).count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.tracking_id.contains(self.document_id)).count()
                            query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.tracking_id.contains(self.document_id)).count()
                            query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.tracking_id.contains(self.document_id)).count()
                        print ('have id4')

                    if self.document_id =='': # ไม่กรอก id
                        if self.sender_email != '' and self.tax_id != '' and self.recipient_email != '' and self.documentType != '' : # ใส่ทั้งหมด

                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).offset(self.offset).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).count()
                            print('all put4')

                        elif self.sender_email != '': # ใส่ sender_email

                            if self.tax_id != '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).count()
                                print('non recipient4')

                            elif self.tax_id == '' and self.recipient_email != '' and self.documentType != '': # ไม่ใส่ tax_id
                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).count()
                                print('non tax4')

                            elif self.documentType == '' and self.recipient_email != '' and self.tax_id != '': # ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(view_document.biz_info.contains(self.tax_id)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType.contains(self.documentType)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                print('non documentType2')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType != '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.documentType == self.documentType).count()
                                print('only sender4')

                            elif self.documentType == '' and self.recipient_email == '' and self.tax_id != '': # ไม่ใส่ recipient_email // ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                print('only sender , tax_id 3')

                            elif self.tax_id == '' and self.documentType == '' and self.recipient_email != '': # ไม่ใส่ tax_id // ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.sender_email.contains(self.sender_email)).filter(view_document.recipient_email.contains(self.recipient_email)).count()
                                print('only sender , recipient_email 3')

                            elif self.tax_id == '' and self.recipient_email == '' and self.documentType == '': # ไม่ใส่ recipient_email // ไม่ใส่ tax_id // ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.sender_email.contains(self.sender_email)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.sender_email.contains(self.sender_email)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.sender_email.contains(self.sender_email)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.sender_email.contains(self.sender_email)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.sender_email.contains(self.sender_email)).count()
                                print('only sender4')

                        elif self.recipient_email != '': # ใส่ recipient_email
                            if self.tax_id != '' and self.sender_email == '' and self.documentType == '': # ไม่ใส่ sender_email // ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.biz_info.contains(self.tax_id)).count()
                                print('non sender_email 4')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType != '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.recipient_email.contains(self.recipient_email)).filter(view_document.documentType == self.documentType).count()
                                print('only recipient , documentType4')

                            elif self.tax_id == '' and self.sender_email == '' and self.documentType == '':# ไม่ใส่ sender_email // ไม่ใส่ tax_id // ไม่ใส่ documentType

                                query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.recipient_email.contains(self.recipient_email)).limit(limit_ch).offset(self.offset).all()
                                query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.recipient_email.contains(self.recipient_email)).count()
                                query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.recipient_email.contains(self.recipient_email)).count()
                                query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.recipient_email.contains(self.recipient_email)).count()
                                query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.recipient_email.contains(self.recipient_email)).count()
                                print('only recipient4')

                        elif self.tax_id == '' and self.recipient_email == ''and self.sender_email == ''and self.documentType != '': # ใส่ documentType

                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).offset(self.offset).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.documentType.contains(self.documentType)).count()
                            print('only documenType4')

                        elif self.tax_id != '' and self.recipient_email == ''and self.sender_email == ''and self.documentType == '': # ใส่ tax_id
                            print('tax_id4')
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.biz_info.contains(self.tax_id)).limit(limit_ch).offset(self.offset).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.biz_info.contains(self.tax_id)).count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.biz_info.contains(self.tax_id)).count()
                            query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.biz_info.contains(self.tax_id)).count()
                            query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.biz_info.contains(self.tax_id)).count()
                            print('tax_id4')

                        elif self.tax_id != '' and self.recipient_email == '' and self.sender_email == ''and self.documentType != '': # ใส่ tax_id,documentType

                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).limit(limit_ch).offset(self.offset).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).count()
                            query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').filter(view_document.biz_info.contains(self.tax_id)).filter(view_document.documentType.contains(self.documentType)).count()
                            print('tax_id , documenType 4')


                        elif self.sender_email == '' and self.tax_id == '' and self.recipient_email == ''and self.documentType == '':#ไม่ใส่อะไรเลย
                            query_document_tmp = view_document.query.order_by(desc(view_document.send_time)).limit(limit_ch).offset(self.offset).all()
                            query_document_tmp_Active = view_document.query.filter(view_document.status == 'ACTIVE').count()
                            query_document_tmp_Reject = view_document.query.filter(view_document.status == 'REJECT').count()
                            query_document_tmp_Inactive = view_document.query.filter(view_document.status == 'INACTIVE').count()
                            query_document_tmp_Delete = view_document.query.filter(view_document.status == 'DELETE').count()
                            print ('No anything')
            
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':str(e)}        
        try:
            if len(query_document_tmp) == 0 or query_document_tmp == None:
                return {'result':'ER','messageText':'data not found'}
            elif len(query_document_tmp) !=0 :
                tmp_data = {}
                documentJson_result = None
                string_list_timeline = ''
                concat_steptimeline = ''
                for u in range(len(query_document_tmp)):
                    sid_email = query_document_tmp[u].step_data_sid
                    jsonData_eval = eval(query_document_tmp[u].data_json)
                    arr_step_info = []
                    timestamp_info = []
                    step_time_1 = []
                    step_timeline = []
                    result = None
                    timing_1 = None
                    lis_details = []
                    list_string_timing = []
                    list_options_page = []

                    if 'step_num' in jsonData_eval:
                        step_status = ''
                        step_before = ''
                        my_step = ''
                        res_status_file = 'Y'
                        arr_step_totle = []
                        json_data_info = jsonData_eval
                        details_email_reject = []
                        details_email_incomplete = []
                        if 'step_detail' in json_data_info:
                            for s in range(len(json_data_info['step_detail'])):
                                json_info_step2 = {}
                                for su in range(len(json_data_info['step_detail'][s]['activity_code'])):
                                    oneMail = json_data_info['step_detail'][s]['one_email']
                                    step_2 = json_data_info['step_detail'][s]
                                    # if str(oneMail).replace(' ','').lower() == self.emailUser:
                                    if json_data_info['step_detail'][s]['activity_code'][su] == 'A03':
                                        print(timestamp_info)
                                        print(sid_email)
                                        if my_step == '':
                                            if json_data_info['step_detail'][s]['activity_status'][su] == 'Complete':
                                                step_status = 'Complete'
                                                timestemp = int(time.mktime(datetime.datetime.strptime(json_data_info['step_detail'][s]['activity_time'][su], "%Y-%m-%d %H:%M:%S").timetuple()))
                                                timestamp_info.append(timestemp)
                                                t1 = step_2['activity_time'][su]
                                                t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                                step_time_1.append(t2)
                                            elif json_data_info['step_detail'][s]['activity_status'][su] == 'Approve':
                                                step_status = 'Complete'
                                                timestemp = int(time.mktime(datetime.datetime.strptime(json_data_info['step_detail'][s]['activity_time'][su], "%Y-%m-%d %H:%M:%S").timetuple()))
                                                timestamp_info.append(timestemp)
                                                t1 = step_2['activity_time'][su]
                                                t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                                step_time_1.append(t2)
                                            elif json_data_info['step_detail'][s]['activity_status'][su] == 'Reject':
                                                step_status = 'Reject'
                                                timestemp = int(time.mktime(datetime.datetime.strptime(json_data_info['step_detail'][s]['activity_time'][su], "%Y-%m-%d %H:%M:%S").timetuple()))
                                                timestamp_info.append(timestemp)
                                                t1 = step_2['activity_time'][su]
                                                t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                                step_time_1.append(t2)
                                            else:
                                                try:
                                                    step_status  = 'Incomplete'
                                                    # t1 = step_2['activity_time'][su]
                                                    # t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                                    # step_time_1.append(t2)
                                                    details_email_incomplete.append({'email':json_data_info['step_detail'][s]['one_email'],'step_num':json_data_info['step_num']})
                                                except Exception as ex:
                                                    step_status = 'Incomplete'
                                        arr_step_info.append(step_status)
                                        arr_step_info.append(step_before)
                        print(arr_step_info)
                        if 'Reject' in arr_step_info:
                            res_status_file = 'R'
                            res_status_file_string = 'เอกสารปฏิเสธอนุมัติ'
                        elif 'Complete' in arr_step_info:
                            res_status_file = 'Y'
                            res_status_file_string = 'อนุมัติแล้ว'
                        elif 'Waitting' in arr_step_info:
                            res_status_file = 'W'
                            res_status_file_string = 'รออนุมัติ'
                        elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                            res_status_file = 'N'
                            res_status_file_string = 'กำลังดำเนินการ'
                        else:
                            res_status_file_string = 'อนุมัติแล้ว'
                        if res_status_file == 'W':
                            statusFile_count_wait = statusFile_count_wait + 1
                        elif res_status_file == 'Y':
                            statusFile_count_approve = statusFile_count_approve + 1
                        elif res_status_file == 'R':
                            statusFile_count_reject = statusFile_count_reject + 1
                        else:
                            statusFile_count_pendding = statusFile_count_pendding + 1
                        string_timing = ''
                        dateTime_String = query_document_tmp[u].send_time
                        start_send_time = dateTime_String.timestamp()
                        now = datetime.datetime.now()
                        timing = (now.timestamp()) - start_send_time
                        timing_1 = convert_hr_min_sec_v1(int(timing))
                        for yy in range(len(timing_1)):
                            if timing_1[yy] > 0:
                                if yy == 0:
                                    type_date = " วัน "
                                elif yy == 1:
                                    type_date = " ชั่วโมง "
                                elif yy == 2:
                                    type_date = " นาที "
                                elif yy == 3:
                                    type_date = " วินาที "
                                string_timing += str(timing_1[yy]) + type_date
                        # list_string_timing.append(string_timing)
                        # string_timing = ''
                        print ('list_steptime1',step_time_1)
                        if(len(step_time_1) != 0):
                            for i in range(len(step_time_1)):
                                if(i==0):
                                    print ('เริ่มต้น : ',start_send_time)
                                    result = step_time_1[i] - start_send_time
                                    # print ('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ',result)
                                    list_timeline = convert_hr_min_sec_v1(int(result))
                                    # print ('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ : ',list_timeline)
                                    for yy in range(len(list_timeline)):
                                        if list_timeline[yy] > 0:
                                            if yy == 0:
                                                type_date = " วัน "
                                            elif yy == 1:
                                                type_date = " ชั่วโมง "
                                            elif yy == 2:
                                                type_date = " นาที "
                                            elif yy == 3:
                                                type_date = " วินาที "
                                            string_list_timeline += str(list_timeline[yy]) + type_date
                                    print('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ (string)',string_list_timeline)
                                    step_timeline.append(string_list_timeline)
                                    string_list_timeline = ''
                                else:
                                    result = step_time_1[i] - step_time_1[i-1]
                                    # print ('ลำดับปัจจุบัน- ลำดับก่อนหน้า',result)
                                    list_timeline = convert_hr_min_sec_v1(int(result))
                                    for yy in range(len(list_timeline)):
                                        if list_timeline[yy] > 0:
                                            if yy == 0:
                                                type_date = " วัน "
                                            elif yy == 1:
                                                type_date = " ชั่วโมง "
                                            elif yy == 2:
                                                type_date = " นาที "
                                            elif yy == 3:
                                                type_date = " วินาที "
                                            string_list_timeline += str(list_timeline[yy]) + type_date
                                    print('เริ่มต้น - ลำดับก่อนหน้า (string)',string_list_timeline)
                                    step_timeline.append(string_list_timeline)
                            print ("สรุปเวลาการเซ็นแต่ละลำดับ :",step_timeline)
                            concat_steptimeline += 'ระยะเวลาดำเนินการ\n'
                            for j in range(len(step_timeline)):
                                if(j == (len(step_timeline))-1):
                                    concat_steptimeline += '-ลำดับที่ ' +str(j+1)+ ' : ' + str(step_timeline[j])
                                else:
                                    concat_steptimeline += '-ลำดับที่ ' +str(j+1)+ ' : ' + str(step_timeline[j]) + '\n'
                            print ('concat_steptimeline',concat_steptimeline)
                        elif(len(step_time_1) == 0):
                            concat_steptimeline += 'อยู่ระหว่างดำเนินการ'

                        # string_details_avg_time = ''
                        string_details_avg_time = 'ระยะเวลาทั้งหมดที่เอกสารถูกดำเนินการ\n'
                        if len(timestamp_info) != 0:
                            # end_time_document = timestamp_info[-1]
                            # result_start_and_end = end_time_document - start_send_time
                            end_time_document = timestamp_info[-1]
                            result_start_and_end = end_time_document - start_send_time
                            list_day_hr_min_sec = convert_hr_min_sec_v1(int(result_start_and_end))
                            for yy in range(len(list_day_hr_min_sec)):
                                if list_day_hr_min_sec[yy] > 0:
                                    if yy == 0:
                                        type_date = " วัน "
                                    elif yy == 1:
                                        type_date = " ชั่วโมง "
                                    elif yy == 2:
                                        type_date = " นาที "
                                    elif yy == 3:
                                        type_date = " วินาที "
                                    string_details_avg_time += str(list_day_hr_min_sec[yy]) + type_date
                        print(string_details_avg_time)
                        if res_status_file == 'N':
                            string_details_avg_time = ""
                        # th_dateTime_1 = convert_datetime_TH_1(int(dateTime_String.timestamp()))
                        th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                        ts = int(time.time())
                        date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                        year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                        datetime_display = int(dateTime_String.timestamp())
                        date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                        yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                        time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                        old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                        if date_time_today == date_time_db:
                            date_display_show = time_show_db
                        else:
                            if year_today == yar_db:
                                date_display_show = convert_datetime_TH_2_display(datetime_display)
                            else:
                                date_display_show = old_year
                        string_remark_description = ''
                        title_remark = ''
                        if res_status_file == 'R':
                            if len(details_email_reject) != 0:
                                for o in range(len(details_email_reject)):
                                    query_data = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(details_email_reject[o]['email'])).all()
                                    data_json_name = eval(query_data[0].citizen_data)['first_name_th'] + ' ' + eval(query_data[0].citizen_data)['last_name_th']
                                    # print(data_json_name)
                                    details_msg = {}
                                    details_msg['reject_by'] = details_email_reject[o]['email']
                                    details_msg['reject_in_step_num'] = (details_email_reject[o]['step_num'])
                                    details_msg['reject_in_datetime'] = details_email_reject[o]['datetime']
                                    title_remark = 'ยกเลิกโดย ลำดับที่ ' + str(details_email_reject[o]['step_num'])
                                    datetime_display = convert_datetime_TH_2(int(details_email_reject[o]['datetime_string']))
                                    string_remark_description +=  '\n-' + data_json_name + '\nวันที่ ' + datetime_display
                                    lis_details.append(details_msg)
                        elif res_status_file == 'N':
                            if len(details_email_incomplete) != 0:
                                for oi in range(len(details_email_incomplete)):
                                    tmp_step_num_list_0 = details_email_incomplete[0]['step_num']
                                    tmp_step_num_list = details_email_incomplete[oi]['step_num']
                                    if tmp_step_num_list_0 == tmp_step_num_list:
                                        query_data = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(details_email_incomplete[oi]['email'])).all()
                                        try:
                                            data_json_name = eval(query_data[0].citizen_data)['first_name_th'] + ' ' + eval(query_data[0].citizen_data)['last_name_th']
                                        except Exception as e:
                                            data_json_name = details_email_incomplete[oi]['email']

                                        details_msg = {}
                                        details_msg['pending_by'] = details_email_incomplete[oi]['email']
                                        details_msg['pending_in_step_num'] = (details_email_incomplete[oi]['step_num'])
                                        title_remark = 'รอการอนุมัติ ลำดับที่ ' + str(details_email_incomplete[oi]['step_num'])
                                        string_remark_description += '\n-' + data_json_name + ''
                                        lis_details.append(details_msg)
                    else:
                        step_status = ''
                        res_status_file = 'Y'
                        step_before = ''
                        step_list_before = []
                        step_list_ = []
                        step_list_next = []
                        arr_step_totle = []
                        step_me = ''
                        step_sum_status = []
                        sum_status_step_list = []
                        list_check_step = []
                        step_list_data = []
                        max_step = (len(jsonData_eval))
                        step_infomation = jsonData_eval
                        sum_status_step = []
                        details_email_reject = []
                        details_email_incomplete = []
                        lis_details = []
                        for i in range(len(step_infomation)):
                            list_check_step = []
                            json_step_info_2 = {}
                            step_list_data = []
                            step_ = step_infomation[i]
                            step_num = step_infomation[i]['step_num']
                            json_step_info_2['step_status'] = ''
                            for m in range(len(step_['step_detail'])):
                                oneMail = step_['step_detail'][m]['one_email']
                                # if str(oneMail).replace(' ','').lower() == self.emailUser:
                                #     step_me = step_infomation[i]['step_num']
                                #     step_me = int(step_me) - 1
                                step_2 = step_['step_detail'][m]
                                for k in range(len(step_2['activity_code'])):
                                    if step_2['activity_code'][k] == 'A03':
                                        # print()
                                        if step_2['activity_status'][k] == 'Complete':
                                            timestemp = int(time.mktime(datetime.datetime.strptime(step_2['activity_time'][k], "%Y-%m-%d %H:%M:%S").timetuple()))
                                            timestamp_info.append(timestemp)
                                            t1 = step_2['activity_time'][k]
                                            t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                            step_time_1.append(t2)
                                        elif step_2['activity_status'][k] == 'Approve':
                                            timestemp = int(time.mktime(datetime.datetime.strptime(step_2['activity_time'][k], "%Y-%m-%d %H:%M:%S").timetuple()))
                                            timestamp_info.append(timestemp)
                                            t1 = step_2['activity_time'][k]
                                            t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                            step_time_1.append(t2)
                                        elif step_2['activity_status'][k] == 'Reject':
                                            timestemp = int(time.mktime(datetime.datetime.strptime(step_2['activity_time'][k], "%Y-%m-%d %H:%M:%S").timetuple()))
                                            timestamp_info.append(timestemp)
                                            t1 = step_2['activity_time'][k]
                                            t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                            step_time_1.append(t2)
                                        json_step_info = {}
                                        json_step_info['activity_status'] = step_2['activity_status'][k]
                                        json_step_info['one_email'] = step_2['one_email']
                                        json_step_info['step_num'] = step_num
                                        list_check_step.append(json_step_info['activity_status'])
                                        step_list_data.append(json_step_info)
                                # print ('Round time', step_time_1)
                                json_step_info_2['step_info'] = step_list_data
                                if json_step_info_2['step_status'] == '':
                                    if 'Reject' in list_check_step:
                                        for kz in range(len(step_2['activity_code'])):
                                            if step_2['activity_code'][kz] == 'A03':
                                                details_email_reject.append({'email':step_2['one_email'],'step_num':step_num,'datetime':step_2['activity_time'][kz],'datetime_string':time.mktime(datetime.datetime.strptime(step_2['activity_time'][kz], "%Y-%m-%d %H:%M:%S").timetuple())})
                                        json_step_info_2['step_status'] = 'Reject'
                                    elif 'Complete' in list_check_step:
                                        json_step_info_2['step_status'] = 'Complete'
                                    elif 'Approve' in list_check_step:
                                        json_step_info_2['step_status'] = 'Complete'
                                    elif 'Incomplete' in list_check_step:
                                        # details_email_incomplete.append({'email':step_2['one_email'],'step_num':step_num})
                                        json_step_info_2['step_status'] = 'Incomplete'
                                    elif 'Pending' in list_check_step:
                                        # details_email_incomplete.append({'email':step_2['one_email'],'step_num':step_num})
                                        json_step_info_2['step_status'] = 'Incomplete'
                                    else:
                                        json_step_info_2['step_status'] = 'Complete'
                                if json_step_info_2['step_status'] == 'Incomplete':
                                    if 'Reject' in list_check_step:
                                        json_step_info_2['step_status'] = 'Reject'
                                    elif 'Complete' in list_check_step:
                                        json_step_info_2['step_status'] = 'Complete'
                                    elif 'Approve' in list_check_step:
                                        json_step_info_2['step_status'] = 'Complete'
                                    elif 'Incomplete' in list_check_step:
                                        details_email_incomplete.append({'email':step_2['one_email'],'step_num':step_num})
                                        json_step_info_2['step_status'] = 'Incomplete'
                                    elif 'Pending' in list_check_step:
                                        details_email_incomplete.append({'email':step_2['one_email'],'step_num':step_num})
                                        json_step_info_2['step_status'] = 'Incomplete'
                                    else:
                                        json_step_info_2['step_status'] = 'Complete'

                                sum_status_step_list.append(json_step_info_2['step_status'])
                            sum_status_step.append(json_step_info_2['step_status'])
                            arr_step_info.append(json_step_info_2['step_status'])
                        index_mystep = step_me
                        print(sid_email)
                        print(arr_step_info)
                        if 'Reject' in arr_step_info:
                            res_status_file = 'R'
                            res_status_file_string = 'เอกสารปฏิเสธอนุมัติ'
                        elif 'Incomplete_1' in arr_step_info or 'Pending_1' in arr_step_info:
                            res_status_file = 'W'
                            res_status_file_string = 'รออนุมัติ'
                        elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                            res_status_file = 'N'
                            res_status_file_string = 'กำลังดำเนินการ'
                        elif 'Wait__' in arr_step_info:
                            res_status_file = 'Z'
                            res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                        elif 'Waitting' in arr_step_info:
                            res_status_file = 'W'
                            res_status_file_string = 'รออนุมัติ'
                        else:
                            res_status_file_string = 'อนุมัติแล้ว'
                        if res_status_file == 'W':
                            statusFile_count_wait = statusFile_count_wait + 1
                        elif res_status_file == 'Y':
                            statusFile_count_approve = statusFile_count_approve + 1
                        elif res_status_file == 'R':
                            statusFile_count_reject = statusFile_count_reject + 1
                        else:
                            statusFile_count_pendding = statusFile_count_pendding + 1
                        string_timing = ''
                        dateTime_String = query_document_tmp[u].send_time
                        start_send_time = dateTime_String.timestamp()
                        now = datetime.datetime.now()
                        timing = (now.timestamp()) - start_send_time
                        timing_1 = convert_hr_min_sec_v1(int(timing))
                        for yy in range(len(timing_1)):
                            if timing_1[yy] > 0:
                                if yy == 0:
                                    type_date = " วัน "
                                elif yy == 1:
                                    type_date = " ชั่วโมง "
                                elif yy == 2:
                                    type_date = " นาที "
                                elif yy == 3:
                                    type_date = " วินาที "
                                string_timing += str(timing_1[yy]) + type_date
                        # list_string_timing.append(string_timing)
                        # string_timing = ''
                        print ('list_steptime1',step_time_1)
                        if(len(step_time_1) != 0):
                            string_list_timeline = ''
                            for i in range(len(step_time_1)):
                                if(i==0):
                                    print ('เริ่มต้น : ',start_send_time)
                                    result = step_time_1[i] - start_send_time
                                    # print ('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ',result)
                                    list_timeline = convert_hr_min_sec_v1(int(result))
                                    # print ('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ : ',list_timeline)
                                    for yy in range(len(list_timeline)):
                                        if list_timeline[yy] > 0:
                                            if yy == 0:
                                                type_date = " วัน "
                                            elif yy == 1:
                                                type_date = " ชั่วโมง "
                                            elif yy == 2:
                                                type_date = " นาที "
                                            elif yy == 3:
                                                type_date = " วินาที "
                                            string_list_timeline += str(list_timeline[yy]) + type_date
                                    print('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ (string)',string_list_timeline)
                                    step_timeline.append(string_list_timeline)
                                else:
                                    result = step_time_1[i] - step_time_1[i-1]
                                    # print ('ลำดับปัจจุบัน- ลำดับก่อนหน้า',result)
                                    list_timeline = convert_hr_min_sec_v1(int(result))
                                    for yy in range(len(list_timeline)):
                                        if list_timeline[yy] > 0:
                                            if yy == 0:
                                                type_date = " วัน "
                                            elif yy == 1:
                                                type_date = " ชั่วโมง "
                                            elif yy == 2:
                                                type_date = " นาที "
                                            elif yy == 3:
                                                type_date = " วินาที "
                                            string_list_timeline += str(list_timeline[yy]) + type_date
                                    print('เริ่มต้น - ลำดับก่อนหน้า (string)',string_list_timeline)
                                    step_timeline.append(string_list_timeline)
                                    string_list_timeline = ''
                            print ("สรุปเวลาการเซ็นแต่ละลำดับ :",step_timeline)
                            concat_steptimeline = ''
                            concat_steptimeline += 'ระยะเวลาดำเนินการ\n'
                            for j in range(len(step_timeline)):
                                if(j == (len(step_timeline))-1):
                                    concat_steptimeline += '-ลำดับที่ ' +str(j+1)+ ' : ' + str(step_timeline[j])
                                else:
                                    concat_steptimeline += '-ลำดับที่ ' +str(j+1)+ ' : ' + str(step_timeline[j]) + '\n'
                            print ('concat_steptimeline',concat_steptimeline)
                        elif(len(step_time_1) == 0):
                            concat_steptimeline += 'อยู่ระหว่างดำเนินการ'

                        # string_details_avg_time = ''
                        string_details_avg_time = 'ระยะเวลาทั้งหมดที่เอกสารถูกดำเนินการ\n'
                        if len(timestamp_info) != 0:
                            # end_time_document = timestamp_info[-1]
                            # result_start_and_end = end_time_document - start_send_time
                            end_time_document = timestamp_info[-1]
                            result_start_and_end = end_time_document - start_send_time
                            list_day_hr_min_sec = convert_hr_min_sec_v1(int(result_start_and_end))
                            print(end_time_document,start_send_time)
                            print(timestamp_info)
                            for yy in range(len(list_day_hr_min_sec)):
                                if list_day_hr_min_sec[yy] > 0:
                                    if yy == 0:
                                        type_date = " วัน "
                                    elif yy == 1:
                                        type_date = " ชั่วโมง "
                                    elif yy == 2:
                                        type_date = " นาที "
                                    elif yy == 3:
                                        type_date = " วินาที "
                                    string_details_avg_time += str(list_day_hr_min_sec[yy]) + type_date
                        print(string_details_avg_time)
                        if res_status_file == 'N':
                            string_details_avg_time = ""
                        # th_dateTime_1 = convert_datetime_TH_1(int(dateTime_String.timestamp()))
                        th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                        ts = int(time.time())
                        date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                        year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                        datetime_display = int(dateTime_String.timestamp())
                        date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                        yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                        time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                        old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                        if date_time_today == date_time_db:
                            date_display_show = time_show_db
                        else:
                            if year_today == yar_db:
                                date_display_show = convert_datetime_TH_2_display(datetime_display)
                            else:
                                date_display_show = old_year
                        string_remark_description = ''
                        title_remark = ''
                        if res_status_file == 'R':
                            if len(details_email_reject) != 0:
                                for o in range(len(details_email_reject)):
                                    query_data = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(details_email_reject[o]['email'])).all()
                                    try:
                                        data_json_name = eval(query_data[0].citizen_data)['first_name_th'] + ' ' + eval(query_data[0].citizen_data)['last_name_th']
                                    except Exception as e:
                                        data_json_name = details_email_incomplete[oi]['email']
                                    # print(data_json_name)
                                    details_msg = {}
                                    details_msg['reject_by'] = details_email_reject[o]['email']
                                    details_msg['reject_in_step_num'] = details_email_reject[o]['step_num']
                                    details_msg['reject_in_datetime'] = details_email_reject[o]['datetime']
                                    title_remark = 'ยกเลิกโดย ลำดับที่ ' + str(details_email_reject[o]['step_num'])
                                    datetime_display = convert_datetime_TH_2(int(details_email_reject[o]['datetime_string']))
                                    string_remark_description +=  '\n-' + data_json_name + '\nวันที่ ' + datetime_display
                                    lis_details.append(details_msg)
                        elif res_status_file == 'N':
                            if len(details_email_incomplete) != 0:
                                for oi in range(len(details_email_incomplete)):
                                    tmp_step_num_list_0 = details_email_incomplete[0]['step_num']
                                    tmp_step_num_list = details_email_incomplete[oi]['step_num']
                                    if tmp_step_num_list_0 == tmp_step_num_list:
                                        query_data = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(details_email_incomplete[oi]['email'])).all()
                                        try:
                                            data_json_name = eval(query_data[0].citizen_data)['first_name_th'] + ' ' + eval(query_data[0].citizen_data)['last_name_th']
                                        except Exception as e:
                                            data_json_name = details_email_incomplete[oi]['email']

                                        details_msg = {}
                                        details_msg['pending_by'] = details_email_incomplete[oi]['email']
                                        details_msg['pending_in_step_num'] = details_email_incomplete[oi]['step_num']
                                        
                                        title_remark = 'รอการอนุมัติ ลำดับที่ ' + str(details_email_incomplete[oi]['step_num'])
                                        string_remark_description += '\n-' + data_json_name + ''
                                        lis_details.append(details_msg)
                    tmp_json = {}
                    ts = int(time.time())
                    date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                    year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                    dateTime_timestamp = int((query_document_tmp[u].send_time).timestamp())
                    date_time_db = datetime.datetime.fromtimestamp(dateTime_timestamp).strftime('%Y-%m-%d')
                    yar_db = datetime.datetime.fromtimestamp(dateTime_timestamp).strftime('%Y')
                    time_show_db = datetime.datetime.fromtimestamp(dateTime_timestamp).strftime('%H:%M')
                    old_year = datetime.datetime.fromtimestamp(dateTime_timestamp).strftime('%d/%m/%Y')
                    if date_time_today == date_time_db:
                        date_display_show = time_show_db
                    else:
                        if year_today == yar_db:
                            date_display_show = convert_datetime_TH_2_display(dateTime_timestamp)
                        else:
                            date_display_show = old_year

                    if query_document_tmp[u].urgent_type != None:
                        documentUrgentType = query_document_tmp[u].urgent_type
                        if documentUrgentType == 'I':
                            documentUrgentString = 'ด่วนมาก'
                        elif documentUrgentType == 'U':
                            documentUrgentString = 'ด่วน'
                        elif documentUrgentType == 'M':
                            documentUrgentString = 'ปกติ'

                    if query_document_tmp[u].documentJson != None:
                        documentJson_result = eval(query_document_tmp[u].documentJson)
                        print(documentJson_result)
                        documentName = documentJson_result['document_name']
                        documentType = documentJson_result['document_type']
                    else:
                        documentName = None
                        documentType = None



                    tmp_json['send_time'] = query_document_tmp[u].send_time
                    tmp_json['dateTime'] = dateTime_timestamp
                    tmp_json['dateTime_String'] = str(query_document_tmp[u].send_time).split('+')[0]
                    tmp_json['dateTime_String_TH_1'] = convert_datetime_TH_2(dateTime_timestamp)
                    tmp_json['dateTime_display'] = date_display_show
                    tmp_json['date_String'] = str(query_document_tmp[u].send_time).split(' ')[0]
                    tmp_json['time_String'] = str(query_document_tmp[u].send_time).split(' ')[1].split('+')[0]

                    tmp_json['document_urgent_string'] = documentUrgentString
                    tmp_json['document_name'] = documentName
                    tmp_json['document_type'] = documentType
                    tmp_json['sender_name'] = query_document_tmp[u].sender_name
                    tmp_json['sender_email'] = query_document_tmp[u].sender_email
                    if tmp_json['sender_name'] == 'null null':
                        tmp_json['sender_name'] = tmp_json['sender_email']
                    tmp_json['recipient_email'] = eval(query_document_tmp[u].recipient_email)
                    tmp_json['document_id'] = query_document_tmp[u].doc_id
                    tmp_json['tracking_id'] = query_document_tmp[u].tracking_id
                    tmp_json['file_name'] = query_document_tmp[u].file_name
                    if query_document_tmp[u].string_pdf != None:
                        tmp_json['status_original_pdf_file'] = True
                    else:
                        tmp_json['status_original_pdf_file'] = False
                    if query_document_tmp[u].string_sign != None:
                        tmp_json['status_sign_pdf_file'] = True
                    else:
                        tmp_json['status_sign_pdf_file'] = False
                    # tmp_json['data_json'] = eval(query_document_tmp[u].data_json)
                    tmp_json['fid'] = query_document_tmp[u].fid
                    # tmp_json['document_type'] = query_document_tmp[u].documentType
                    # tmp_json['documentJson'] = query_document_tmp[u].documentJson
                    tmp_json['digit_sign'] = query_document_tmp[u].digit_sign
                    tmp_json['document_urgent'] = query_document_tmp[u].urgent_type

                    option_eval=eval(query_document_tmp[u].options_page)
                    list_options_page.append(option_eval)
                    tmp_json['options_page'] = list_options_page

                    tmp_json['stamp_all'] = query_document_tmp[u].sign_page_options
                    tmp_json['sidCode'] = query_document_tmp[u].step_data_sid
                    try:
                        tmp_json['email_center'] = eval(query_document_tmp[u].email_center)
                    except Exception as e:
                        tmp_json['email_center'] = query_document_tmp[u].email_center
                    # if เช็คค่า null ของ attempted_folder -v-
                    tmp_json['attempted_folder'] = query_document_tmp[u].attempted_folder
                    tmp_json['status_file_code'] = res_status_file
                    tmp_json['status_file_details'] = lis_details
                    tmp_json['status_file_string'] = res_status_file_string
                    tmp_json['string_details_avg_time'] = string_details_avg_time
                    tmp_json['timeline'] = concat_steptimeline
                    tmp_json['timing'] = string_timing
                    tmp_json['remark_description'] = title_remark + string_remark_description

                    tmp_json['step_Name'] = query_document_tmp[u].step_Name
                    tmp_json['documentDetails'] = query_document_tmp[u].documentDetails
                    tmp_json['condition_temp'] = query_document_tmp[u].condition_temp
                    tmp_json['step_Code'] = query_document_tmp[u].step_Code
                    tmp_json['status'] = query_document_tmp[u].status
                    # if tmp_json['status'] == 'ACTIVE':
                    #     count_Active += 1
                    # elif tmp_json['status'] == 'REJECT':
                    #    count_Reject += 1


                    tmp_biz_info = (query_document_tmp[u].biz_info)
                    if tmp_biz_info == 'None':
                        tmp_biz_info = 'None'
                        list_biz = []
                        dict_biz= {}
                        dict_biz['id'] = None
                        dict_biz['id_card_num'] = None
                        dict_biz['first_name_eng'] = None
                        dict_biz['first_name_th'] = None
                        list_biz.append(dict_biz)
                        tmp_json['biz_detail'] = list_biz

                    else :
                        tmp_biz_info = eval(tmp_biz_info)
                        if 'id' in tmp_biz_info:
                            tmp_id_biz = tmp_biz_info['id']
                            tmp_id_card_num_biz = tmp_biz_info['id_card_num']
                            tmp_first_name_eng_biz = tmp_biz_info['first_name_eng']
                            tmp_first_name_th_biz = tmp_biz_info['first_name_th']
                        tmp_json['biz_detail'] = [{'id':tmp_id_biz,'id_card_num':tmp_id_card_num_biz,'first_name_eng':tmp_first_name_eng_biz,'first_name_th':tmp_first_name_th_biz}]

                    # print (u)
                    sum_Document = sum_Document+1

                    if ((u+1) == len(query_document_tmp)):
                        last_time = (tmp_json['send_time'])
                        dt_object = int(datetime.datetime.timestamp(last_time))


                    tmp_list_result.append(tmp_json)
                tmp_data['data'] = tmp_list_result
                query_document_tmp_count = query_document_tmp_Active + query_document_tmp_Reject + query_document_tmp_Inactive + query_document_tmp_Delete
                tmp_data['sum_Document'] = query_document_tmp_count

                # tmp_data['Document_Status_Details']
                Document_Status_Details  = [{
                    'Incomplete_Pendding':statusFile_count_pendding,
                    'Complete_Approve':statusFile_count_approve,
                    'Reject':statusFile_count_reject
                }]

                tmp_data['Document_Status'] = [{
                    'ACTIVE':query_document_tmp_Active,
                    'REJECT':query_document_tmp_Reject,
                    'INACTIVE':query_document_tmp_Inactive,
                    'DELETE':query_document_tmp_Delete
                }]

                tmp_list_result2.append(tmp_data)
                return {'result':'OK','last_time':dt_object,'messageText':tmp_list_result2}
            else:
                return {'result':'ER','messageText':'data not found'}
        except exc.SQLAlchemyError as ex:
            db.session.rollback()
            raise
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            db.session.rollback()
            raise
            return {'result':'ER','messageText':'cant select','messageER':str(e)}
        finally:
            db.session.close()

    def search_admin_document(self,key,email,limit,offset):
        try:
            self.key = key
            self.limit = limit
            self.offset = offset
            self.email = email
            list_tmp = []
            tmp_list_sid_code = []
            tmp_list_result = []
            tmp_list_result2 = []
            count_document = 0
            count_rowDocument = 0
            count_rowDocument_StatusActive = 0
            count_rowDocument_StatusReject = 0
            count_rowDocument_StatusCancel = 0
            statusFile_count_approve = 0
            statusFile_count_pendding = 0
            statusFile_count_reject = 0
            statusFile_count_wait = 0
            step_time = []

            step_time_total = []
            t1 = None
            t2 = None

            sum_Document = 0
            Complete_Approve = 0
            Incomplete_Pendding = 0
            Reject = 0
            Wait = 0

            query_document_tmp = None
            query_document_tmp2 = None

            query_document_tmp_Active = 0
            query_document_tmp_Reject = 0
            query_document_tmp_count = 0

            key2 = '%' + str(self.key) + '%'
            # mail = find_email(self.key)
            endTime = ''
            ch,startTime = checkDatetime(self.key)
            if self.limit != '' and self.offset != '':
                if ch == True:
                    endTime = startTime.replace(hour=23, minute=59, second=59, microsecond=0)
                    print ('startTime: ',startTime)
                    print ('endtime: ',endTime)
                    query_document_tmp = view_document.query.filter(view_document.sender_email==self.email)\
                        .filter(view_document.status=='ACTIVE')\
                        .filter(view_document.update_time <= str(endTime))\
                        .filter(view_document.update_time >= str(startTime))\
                        .order_by(desc(view_document.update_time))\
                        .limit(self.limit)\
                        .offset(self.offset)\
                        .all()
                    query_document_tmp_Active = view_document.query.filter(view_document.sender_email==self.email)\
                        .filter(view_document.status=='ACTIVE')\
                        .filter(view_document.update_time <= str(endTime))\
                        .filter(view_document.update_time >= str(startTime))\
                        .order_by(desc(view_document.update_time))\
                        .count()
                    query_document_tmp_Reject = view_document.query.filter(view_document.sender_email==self.email)\
                        .filter(view_document.status=='REJECT')\
                        .filter(view_document.update_time <= str(endTime))\
                        .filter(view_document.update_time >= str(startTime))\
                        .order_by(desc(view_document.update_time))\
                        .count()
                    query_document_tmp_Inactive = view_document.query.filter(view_document.sender_email==self.email)\
                        .filter(view_document.status=='INACTIVE')\
                        .filter(view_document.update_time <= str(endTime))\
                        .filter(view_document.update_time >= str(startTime))\
                        .order_by(desc(view_document.update_time))\
                        .count()
                    query_document_tmp_Delete = view_document.query.filter(view_document.sender_email==self.email)\
                        .filter(view_document.status=='DELETE')\
                        .filter(view_document.update_time <= str(endTime))\
                        .filter(view_document.update_time >= str(startTime))\
                        .order_by(desc(view_document.update_time))\
                        .count()
                else:
                    query_document_tmp = view_document.query.filter(view_document.sender_email==self.email)\
                        .filter(view_document.status=='ACTIVE')\
                        .filter(or_(view_document.documentType.ilike(key2),view_document.recipient_email.ilike(key2),view_document.documentJson.ilike(key2),view_document.tracking_id.ilike(key2),view_document.biz_info.ilike(key2)))\
                        .limit(self.limit)\
                        .offset(self.offset)\
                        .all()
                    query_document_tmp_Active = view_document.query.filter(view_document.sender_email==self.email)\
                        .filter(view_document.status=='ACTIVE')\
                        .filter(or_(view_document.documentType.ilike(key2),view_document.recipient_email.ilike(key2),view_document.documentJson.ilike(key2),view_document.tracking_id.ilike(key2),view_document.biz_info.ilike(key2)))\
                        .count()
                    query_document_tmp_Reject = view_document.query.filter(view_document.sender_email==self.email)\
                        .filter(view_document.status=='REJECT')\
                        .filter(or_(view_document.documentType.ilike(key2),view_document.recipient_email.ilike(key2),view_document.documentJson.ilike(key2),view_document.tracking_id.ilike(key2),view_document.biz_info.ilike(key2)))\
                        .count()
                    query_document_tmp_Inactive = view_document.query.filter(view_document.sender_email==self.email)\
                        .filter(view_document.status=='INACTIVE')\
                        .filter(or_(view_document.documentType.ilike(key2),view_document.recipient_email.ilike(key2),view_document.documentJson.ilike(key2),view_document.tracking_id.ilike(key2),view_document.biz_info.ilike(key2)))\
                        .count()
                    query_document_tmp_Delete = view_document.query.filter(view_document.sender_email==self.email)\
                        .filter(view_document.status=='DELETE')\
                        .filter(or_(view_document.documentType.ilike(key2),view_document.recipient_email.ilike(key2),view_document.documentJson.ilike(key2),view_document.tracking_id.ilike(key2),view_document.biz_info.ilike(key2)))\
                        .count()
            else:
                if ch == True:
                    endTime = startTime.replace(hour=23, minute=59, second=59, microsecond=0)
                    print ('startTime: ',startTime)
                    print ('endtime: ',endTime)
                    query_document_tmp = view_document.query.filter(view_document.sender_email==self.email)\
                        .filter(view_document.status=='ACTIVE')\
                        .filter(view_document.update_time <= str(endTime))\
                        .filter(view_document.update_time >= str(startTime))\
                        .order_by(desc(view_document.update_time))\
                        .all()
                    query_document_tmp_Active = view_document.query.filter(view_document.sender_email==self.email)\
                        .filter(view_document.status=='ACTIVE')\
                        .filter(view_document.update_time <= str(endTime))\
                        .filter(view_document.update_time >= str(startTime))\
                        .order_by(desc(view_document.update_time))\
                        .count()
                    query_document_tmp_Reject = view_document.query.filter(view_document.sender_email==self.email)\
                        .filter(view_document.status=='REJECT')\
                        .filter(view_document.update_time <= str(endTime))\
                        .filter(view_document.update_time >= str(startTime))\
                        .order_by(desc(view_document.update_time))\
                        .count()
                    query_document_tmp_Inactive = view_document.query.filter(view_document.sender_email==self.email)\
                        .filter(view_document.status=='INACTIVE')\
                        .filter(view_document.update_time <= str(endTime))\
                        .filter(view_document.update_time >= str(startTime))\
                        .order_by(desc(view_document.update_time))\
                        .count()
                    query_document_tmp_Delete = view_document.query.filter(view_document.sender_email==self.email)\
                        .filter(view_document.status=='DELETE')\
                        .filter(view_document.update_time <= str(endTime))\
                        .filter(view_document.update_time >= str(startTime))\
                        .order_by(desc(view_document.update_time))\
                        .count()
                else:
                    query_document_tmp = view_document.query.filter(view_document.sender_email==self.email)\
                        .filter(view_document.status=='ACTIVE')\
                        .filter(or_(view_document.documentType.ilike(key2),view_document.recipient_email.ilike(key2),view_document.documentJson.ilike(key2),view_document.tracking_id.ilike(key2),view_document.biz_info.ilike(key2)))\
                        .all()
                    query_document_tmp_Active = view_document.query.filter(view_document.sender_email==self.email)\
                        .filter(view_document.status=='ACTIVE')\
                        .filter(or_(view_document.documentType.ilike(key2),view_document.recipient_email.ilike(key2),view_document.documentJson.ilike(key2),view_document.tracking_id.ilike(key2),view_document.biz_info.ilike(key2)))\
                        .count()
                    query_document_tmp_Reject = view_document.query.filter(view_document.sender_email==self.email)\
                        .filter(view_document.status=='REJECT')\
                        .filter(or_(view_document.documentType.ilike(key2),view_document.recipient_email.ilike(key2),view_document.documentJson.ilike(key2),view_document.tracking_id.ilike(key2),view_document.biz_info.ilike(key2)))\
                        .count()
                    query_document_tmp_Inactive = view_document.query.filter(view_document.sender_email==self.email)\
                        .filter(view_document.status=='INACTIVE')\
                        .filter(or_(view_document.documentType.ilike(key2),view_document.recipient_email.ilike(key2),view_document.documentJson.ilike(key2),view_document.tracking_id.ilike(key2),view_document.biz_info.ilike(key2)))\
                        .count()
                    query_document_tmp_Delete = view_document.query.filter(view_document.sender_email==self.email)\
                        .filter(view_document.status=='DELETE')\
                        .filter(or_(view_document.documentType.ilike(key2),view_document.recipient_email.ilike(key2),view_document.documentJson.ilike(key2),view_document.tracking_id.ilike(key2),view_document.biz_info.ilike(key2)))\
                        .count()
            try:
                if len(query_document_tmp) == 0 or query_document_tmp == None:
                    return {'result':'ER','messageText':'data not found'}
                elif len(query_document_tmp) !=0 :
                    tmp_data = {}
                    documentJson_result = None
                    string_list_timeline = ''
                    concat_steptimeline = ''
                    for u in range(len(query_document_tmp)):
                        sid_email = query_document_tmp[u].step_data_sid
                        jsonData_eval = eval(query_document_tmp[u].data_json)
                        arr_step_info = []
                        timestamp_info = []
                        step_time_1 = []
                        step_timeline = []
                        result = None
                        timing_1 = None
                        lis_details = []
                        list_string_timing = []
                        list_options_page = []

                        if 'step_num' in jsonData_eval:
                            step_status = ''
                            step_before = ''
                            my_step = ''
                            res_status_file = 'Y'
                            arr_step_totle = []
                            json_data_info = jsonData_eval
                            details_email_reject = []
                            details_email_incomplete = []
                            if 'step_detail' in json_data_info:
                                for s in range(len(json_data_info['step_detail'])):
                                    json_info_step2 = {}
                                    for su in range(len(json_data_info['step_detail'][s]['activity_code'])):
                                        oneMail = json_data_info['step_detail'][s]['one_email']
                                        step_2 = json_data_info['step_detail'][s]
                                        # if str(oneMail).replace(' ','').lower() == self.emailUser:
                                        if json_data_info['step_detail'][s]['activity_code'][su] == 'A03':
                                            print(timestamp_info)
                                            print(sid_email)
                                            if my_step == '':
                                                if json_data_info['step_detail'][s]['activity_status'][su] == 'Complete':
                                                    step_status = 'Complete'
                                                    timestemp = int(time.mktime(datetime.datetime.strptime(json_data_info['step_detail'][s]['activity_time'][su], "%Y-%m-%d %H:%M:%S").timetuple()))
                                                    timestamp_info.append(timestemp)
                                                    t1 = step_2['activity_time'][su]
                                                    t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                                    step_time_1.append(t2)
                                                elif json_data_info['step_detail'][s]['activity_status'][su] == 'Approve':
                                                    step_status = 'Complete'
                                                    timestemp = int(time.mktime(datetime.datetime.strptime(json_data_info['step_detail'][s]['activity_time'][su], "%Y-%m-%d %H:%M:%S").timetuple()))
                                                    timestamp_info.append(timestemp)
                                                    t1 = step_2['activity_time'][su]
                                                    t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                                    step_time_1.append(t2)
                                                elif json_data_info['step_detail'][s]['activity_status'][su] == 'Reject':
                                                    step_status = 'Reject'
                                                    timestemp = int(time.mktime(datetime.datetime.strptime(json_data_info['step_detail'][s]['activity_time'][su], "%Y-%m-%d %H:%M:%S").timetuple()))
                                                    timestamp_info.append(timestemp)
                                                    t1 = step_2['activity_time'][su]
                                                    t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                                    step_time_1.append(t2)
                                                else:
                                                    try:
                                                        step_status  = 'Incomplete'
                                                        # t1 = step_2['activity_time'][su]
                                                        # t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                                        # step_time_1.append(t2)
                                                        details_email_incomplete.append({'email':json_data_info['step_detail'][s]['one_email'],'step_num':json_data_info['step_num']})
                                                    except Exception as ex:
                                                        step_status = 'Incomplete'
                                            arr_step_info.append(step_status)
                                            arr_step_info.append(step_before)
                            print(arr_step_info)
                            if 'Reject' in arr_step_info:
                                res_status_file = 'R'
                                res_status_file_string = 'เอกสารปฏิเสธอนุมัติ'
                            elif 'Complete' in arr_step_info:
                                res_status_file = 'Y'
                                res_status_file_string = 'อนุมัติแล้ว'
                            elif 'Waitting' in arr_step_info:
                                res_status_file = 'W'
                                res_status_file_string = 'รออนุมัติ'
                            elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                                res_status_file = 'N'
                                res_status_file_string = 'กำลังดำเนินการ'
                            else:
                                res_status_file_string = 'อนุมัติแล้ว'
                            if res_status_file == 'W':
                                statusFile_count_wait = statusFile_count_wait + 1
                            elif res_status_file == 'Y':
                                statusFile_count_approve = statusFile_count_approve + 1
                            elif res_status_file == 'R':
                                statusFile_count_reject = statusFile_count_reject + 1
                            else:
                                statusFile_count_pendding = statusFile_count_pendding + 1
                            string_timing = ''
                            dateTime_String = query_document_tmp[u].send_time
                            start_send_time = dateTime_String.timestamp()
                            now = datetime.datetime.now()
                            timing = (now.timestamp()) - start_send_time
                            timing_1 = convert_hr_min_sec_v1(int(timing))
                            for yy in range(len(timing_1)):
                                if timing_1[yy] > 0:
                                    if yy == 0:
                                        type_date = " วัน "
                                    elif yy == 1:
                                        type_date = " ชั่วโมง "
                                    elif yy == 2:
                                        type_date = " นาที "
                                    elif yy == 3:
                                        type_date = " วินาที "
                                    string_timing += str(timing_1[yy]) + type_date
                            # list_string_timing.append(string_timing)
                            # string_timing = ''
                            print ('list_steptime1',step_time_1)
                            if(len(step_time_1) != 0):
                                for i in range(len(step_time_1)):
                                    if(i==0):
                                        print ('เริ่มต้น : ',start_send_time)
                                        result = step_time_1[i] - start_send_time
                                        # print ('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ',result)
                                        list_timeline = convert_hr_min_sec_v1(int(result))
                                        # print ('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ : ',list_timeline)
                                        for yy in range(len(list_timeline)):
                                            if list_timeline[yy] > 0:
                                                if yy == 0:
                                                    type_date = " วัน "
                                                elif yy == 1:
                                                    type_date = " ชั่วโมง "
                                                elif yy == 2:
                                                    type_date = " นาที "
                                                elif yy == 3:
                                                    type_date = " วินาที "
                                                string_list_timeline += str(list_timeline[yy]) + type_date
                                        print('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ (string)',string_list_timeline)
                                        step_timeline.append(string_list_timeline)
                                        string_list_timeline = ''
                                    else:
                                        result = step_time_1[i] - step_time_1[i-1]
                                        # print ('ลำดับปัจจุบัน- ลำดับก่อนหน้า',result)
                                        list_timeline = convert_hr_min_sec_v1(int(result))
                                        for yy in range(len(list_timeline)):
                                            if list_timeline[yy] > 0:
                                                if yy == 0:
                                                    type_date = " วัน "
                                                elif yy == 1:
                                                    type_date = " ชั่วโมง "
                                                elif yy == 2:
                                                    type_date = " นาที "
                                                elif yy == 3:
                                                    type_date = " วินาที "
                                                string_list_timeline += str(list_timeline[yy]) + type_date
                                        print('เริ่มต้น - ลำดับก่อนหน้า (string)',string_list_timeline)
                                        step_timeline.append(string_list_timeline)
                                print ("สรุปเวลาการเซ็นแต่ละลำดับ :",step_timeline)
                                concat_steptimeline += 'ระยะเวลาดำเนินการ\n'
                                for j in range(len(step_timeline)):
                                    if(j == (len(step_timeline))-1):
                                        concat_steptimeline += '-ลำดับที่ ' +str(j+1)+ ' : ' + str(step_timeline[j])
                                    else:
                                        concat_steptimeline += '-ลำดับที่ ' +str(j+1)+ ' : ' + str(step_timeline[j]) + '\n'
                                print ('concat_steptimeline',concat_steptimeline)
                            elif(len(step_time_1) == 0):
                                concat_steptimeline += 'อยู่ระหว่างดำเนินการ'

                            # string_details_avg_time = ''
                            string_details_avg_time = 'ระยะเวลาทั้งหมดที่เอกสารถูกดำเนินการ\n'
                            if len(timestamp_info) != 0:
                                # end_time_document = timestamp_info[-1]
                                # result_start_and_end = end_time_document - start_send_time
                                end_time_document = timestamp_info[-1]
                                result_start_and_end = end_time_document - start_send_time
                                list_day_hr_min_sec = convert_hr_min_sec_v1(int(result_start_and_end))
                                for yy in range(len(list_day_hr_min_sec)):
                                    if list_day_hr_min_sec[yy] > 0:
                                        if yy == 0:
                                            type_date = " วัน "
                                        elif yy == 1:
                                            type_date = " ชั่วโมง "
                                        elif yy == 2:
                                            type_date = " นาที "
                                        elif yy == 3:
                                            type_date = " วินาที "
                                        string_details_avg_time += str(list_day_hr_min_sec[yy]) + type_date
                            print(string_details_avg_time)
                            if res_status_file == 'N':
                                string_details_avg_time = ""
                            # th_dateTime_1 = convert_datetime_TH_1(int(dateTime_String.timestamp()))
                            th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                            ts = int(time.time())
                            date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                            year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                            datetime_display = int(dateTime_String.timestamp())
                            date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                            yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                            time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                            old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                            if date_time_today == date_time_db:
                                date_display_show = time_show_db
                            else:
                                if year_today == yar_db:
                                    date_display_show = convert_datetime_TH_2_display(datetime_display)
                                else:
                                    date_display_show = old_year
                            string_remark_description = ''
                            title_remark = ''
                            if res_status_file == 'R':
                                if len(details_email_reject) != 0:
                                    for o in range(len(details_email_reject)):
                                        query_data = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(details_email_reject[o]['email'])).all()
                                        data_json_name = eval(query_data[0].citizen_data)['first_name_th'] + ' ' + eval(query_data[0].citizen_data)['last_name_th']
                                        # print(data_json_name)
                                        details_msg = {}
                                        details_msg['reject_by'] = details_email_reject[o]['email']
                                        details_msg['reject_in_step_num'] = (details_email_reject[o]['step_num'])
                                        details_msg['reject_in_datetime'] = details_email_reject[o]['datetime']
                                        title_remark = 'ยกเลิกโดย ลำดับที่ ' + str(details_email_reject[o]['step_num'])
                                        datetime_display = convert_datetime_TH_2(int(details_email_reject[o]['datetime_string']))
                                        string_remark_description +=  '\n-' + data_json_name + '\nวันที่ ' + datetime_display
                                        lis_details.append(details_msg)
                            elif res_status_file == 'N':
                                if len(details_email_incomplete) != 0:
                                    for oi in range(len(details_email_incomplete)):
                                        tmp_step_num_list_0 = details_email_incomplete[0]['step_num']
                                        tmp_step_num_list = details_email_incomplete[oi]['step_num']
                                        if tmp_step_num_list_0 == tmp_step_num_list:
                                            query_data = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(details_email_incomplete[oi]['email'])).all()
                                            try:
                                                data_json_name = eval(query_data[0].citizen_data)['first_name_th'] + ' ' + eval(query_data[0].citizen_data)['last_name_th']
                                            except Exception as e:
                                                data_json_name = details_email_incomplete[oi]['email']

                                            details_msg = {}
                                            details_msg['pending_by'] = details_email_incomplete[oi]['email']
                                            details_msg['pending_in_step_num'] = (details_email_incomplete[oi]['step_num'])
                                            title_remark = 'รอการอนุมัติ ลำดับที่ ' + str(details_email_incomplete[oi]['step_num'])
                                            string_remark_description += '\n-' + data_json_name + ''
                                            lis_details.append(details_msg)
                        else:
                            step_status = ''
                            res_status_file = 'Y'
                            step_before = ''
                            step_list_before = []
                            step_list_ = []
                            step_list_next = []
                            arr_step_totle = []
                            step_me = ''
                            step_sum_status = []
                            sum_status_step_list = []
                            list_check_step = []
                            step_list_data = []
                            max_step = (len(jsonData_eval))
                            step_infomation = jsonData_eval
                            sum_status_step = []
                            details_email_reject = []
                            details_email_incomplete = []
                            lis_details = []
                            for i in range(len(step_infomation)):
                                list_check_step = []
                                json_step_info_2 = {}
                                step_list_data = []
                                step_ = step_infomation[i]
                                step_num = step_infomation[i]['step_num']
                                json_step_info_2['step_status'] = ''
                                for m in range(len(step_['step_detail'])):
                                    oneMail = step_['step_detail'][m]['one_email']
                                    # if str(oneMail).replace(' ','').lower() == self.emailUser:
                                    #     step_me = step_infomation[i]['step_num']
                                    #     step_me = int(step_me) - 1
                                    step_2 = step_['step_detail'][m]
                                    for k in range(len(step_2['activity_code'])):
                                        if step_2['activity_code'][k] == 'A03':
                                            # print()
                                            if step_2['activity_status'][k] == 'Complete':
                                                timestemp = int(time.mktime(datetime.datetime.strptime(step_2['activity_time'][k], "%Y-%m-%d %H:%M:%S").timetuple()))
                                                timestamp_info.append(timestemp)
                                                t1 = step_2['activity_time'][k]
                                                t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                                step_time_1.append(t2)
                                            elif step_2['activity_status'][k] == 'Approve':
                                                timestemp = int(time.mktime(datetime.datetime.strptime(step_2['activity_time'][k], "%Y-%m-%d %H:%M:%S").timetuple()))
                                                timestamp_info.append(timestemp)
                                                t1 = step_2['activity_time'][k]
                                                t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                                step_time_1.append(t2)
                                            elif step_2['activity_status'][k] == 'Reject':
                                                timestemp = int(time.mktime(datetime.datetime.strptime(step_2['activity_time'][k], "%Y-%m-%d %H:%M:%S").timetuple()))
                                                timestamp_info.append(timestemp)
                                                t1 = step_2['activity_time'][k]
                                                t2 = int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
                                                step_time_1.append(t2)
                                            json_step_info = {}
                                            json_step_info['activity_status'] = step_2['activity_status'][k]
                                            json_step_info['one_email'] = step_2['one_email']
                                            json_step_info['step_num'] = step_num
                                            list_check_step.append(json_step_info['activity_status'])
                                            step_list_data.append(json_step_info)
                                    # print ('Round time', step_time_1)
                                    json_step_info_2['step_info'] = step_list_data
                                    if json_step_info_2['step_status'] == '':
                                        if 'Reject' in list_check_step:
                                            for kz in range(len(step_2['activity_code'])):
                                                if step_2['activity_code'][kz] == 'A03':
                                                    details_email_reject.append({'email':step_2['one_email'],'step_num':step_num,'datetime':step_2['activity_time'][kz],'datetime_string':time.mktime(datetime.datetime.strptime(step_2['activity_time'][kz], "%Y-%m-%d %H:%M:%S").timetuple())})
                                            json_step_info_2['step_status'] = 'Reject'
                                        elif 'Complete' in list_check_step:
                                            json_step_info_2['step_status'] = 'Complete'
                                        elif 'Approve' in list_check_step:
                                            json_step_info_2['step_status'] = 'Complete'
                                        elif 'Incomplete' in list_check_step:
                                            # details_email_incomplete.append({'email':step_2['one_email'],'step_num':step_num})
                                            json_step_info_2['step_status'] = 'Incomplete'
                                        elif 'Pending' in list_check_step:
                                            # details_email_incomplete.append({'email':step_2['one_email'],'step_num':step_num})
                                            json_step_info_2['step_status'] = 'Incomplete'
                                        else:
                                            json_step_info_2['step_status'] = 'Complete'
                                    if json_step_info_2['step_status'] == 'Incomplete':
                                        if 'Reject' in list_check_step:
                                            json_step_info_2['step_status'] = 'Reject'
                                        elif 'Complete' in list_check_step:
                                            json_step_info_2['step_status'] = 'Complete'
                                        elif 'Approve' in list_check_step:
                                            json_step_info_2['step_status'] = 'Complete'
                                        elif 'Incomplete' in list_check_step:
                                            details_email_incomplete.append({'email':step_2['one_email'],'step_num':step_num})
                                            json_step_info_2['step_status'] = 'Incomplete'
                                        elif 'Pending' in list_check_step:
                                            details_email_incomplete.append({'email':step_2['one_email'],'step_num':step_num})
                                            json_step_info_2['step_status'] = 'Incomplete'
                                        else:
                                            json_step_info_2['step_status'] = 'Complete'

                                    sum_status_step_list.append(json_step_info_2['step_status'])
                                sum_status_step.append(json_step_info_2['step_status'])
                                arr_step_info.append(json_step_info_2['step_status'])
                            index_mystep = step_me
                            print(sid_email)
                            print(arr_step_info)
                            if 'Reject' in arr_step_info:
                                res_status_file = 'R'
                                res_status_file_string = 'เอกสารปฏิเสธอนุมัติ'
                            elif 'Incomplete_1' in arr_step_info or 'Pending_1' in arr_step_info:
                                res_status_file = 'W'
                                res_status_file_string = 'รออนุมัติ'
                            elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
                                res_status_file = 'N'
                                res_status_file_string = 'กำลังดำเนินการ'
                            elif 'Wait__' in arr_step_info:
                                res_status_file = 'Z'
                                res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                            elif 'Waitting' in arr_step_info:
                                res_status_file = 'W'
                                res_status_file_string = 'รออนุมัติ'
                            else:
                                res_status_file_string = 'อนุมัติแล้ว'
                            if res_status_file == 'W':
                                statusFile_count_wait = statusFile_count_wait + 1
                            elif res_status_file == 'Y':
                                statusFile_count_approve = statusFile_count_approve + 1
                            elif res_status_file == 'R':
                                statusFile_count_reject = statusFile_count_reject + 1
                            else:
                                statusFile_count_pendding = statusFile_count_pendding + 1
                            string_timing = ''
                            dateTime_String = query_document_tmp[u].send_time
                            start_send_time = dateTime_String.timestamp()
                            now = datetime.datetime.now()
                            timing = (now.timestamp()) - start_send_time
                            timing_1 = convert_hr_min_sec_v1(int(timing))
                            for yy in range(len(timing_1)):
                                if timing_1[yy] > 0:
                                    if yy == 0:
                                        type_date = " วัน "
                                    elif yy == 1:
                                        type_date = " ชั่วโมง "
                                    elif yy == 2:
                                        type_date = " นาที "
                                    elif yy == 3:
                                        type_date = " วินาที "
                                    string_timing += str(timing_1[yy]) + type_date
                            # list_string_timing.append(string_timing)
                            # string_timing = ''
                            print ('list_steptime1',step_time_1)
                            if(len(step_time_1) != 0):
                                string_list_timeline = ''
                                for i in range(len(step_time_1)):
                                    if(i==0):
                                        print ('เริ่มต้น : ',start_send_time)
                                        result = step_time_1[i] - start_send_time
                                        # print ('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ',result)
                                        list_timeline = convert_hr_min_sec_v1(int(result))
                                        # print ('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ : ',list_timeline)
                                        for yy in range(len(list_timeline)):
                                            if list_timeline[yy] > 0:
                                                if yy == 0:
                                                    type_date = " วัน "
                                                elif yy == 1:
                                                    type_date = " ชั่วโมง "
                                                elif yy == 2:
                                                    type_date = " นาที "
                                                elif yy == 3:
                                                    type_date = " วินาที "
                                                string_list_timeline += str(list_timeline[yy]) + type_date
                                        print('เริ่มต้น - ลำดับ1ที่เซนอนุมัติ (string)',string_list_timeline)
                                        step_timeline.append(string_list_timeline)
                                    else:
                                        result = step_time_1[i] - step_time_1[i-1]
                                        # print ('ลำดับปัจจุบัน- ลำดับก่อนหน้า',result)
                                        list_timeline = convert_hr_min_sec_v1(int(result))
                                        for yy in range(len(list_timeline)):
                                            if list_timeline[yy] > 0:
                                                if yy == 0:
                                                    type_date = " วัน "
                                                elif yy == 1:
                                                    type_date = " ชั่วโมง "
                                                elif yy == 2:
                                                    type_date = " นาที "
                                                elif yy == 3:
                                                    type_date = " วินาที "
                                                string_list_timeline += str(list_timeline[yy]) + type_date
                                        print('เริ่มต้น - ลำดับก่อนหน้า (string)',string_list_timeline)
                                        step_timeline.append(string_list_timeline)
                                        string_list_timeline = ''
                                print ("สรุปเวลาการเซ็นแต่ละลำดับ :",step_timeline)
                                concat_steptimeline = ''
                                concat_steptimeline += 'ระยะเวลาดำเนินการ\n'
                                for j in range(len(step_timeline)):
                                    if(j == (len(step_timeline))-1):
                                        concat_steptimeline += '-ลำดับที่ ' +str(j+1)+ ' : ' + str(step_timeline[j])
                                    else:
                                        concat_steptimeline += '-ลำดับที่ ' +str(j+1)+ ' : ' + str(step_timeline[j]) + '\n'
                                print ('concat_steptimeline',concat_steptimeline)
                            elif(len(step_time_1) == 0):
                                concat_steptimeline += 'อยู่ระหว่างดำเนินการ'

                            # string_details_avg_time = ''
                            string_details_avg_time = 'ระยะเวลาทั้งหมดที่เอกสารถูกดำเนินการ\n'
                            if len(timestamp_info) != 0:
                                # end_time_document = timestamp_info[-1]
                                # result_start_and_end = end_time_document - start_send_time
                                end_time_document = timestamp_info[-1]
                                result_start_and_end = end_time_document - start_send_time
                                list_day_hr_min_sec = convert_hr_min_sec_v1(int(result_start_and_end))
                                print(end_time_document,start_send_time)
                                print(timestamp_info)
                                for yy in range(len(list_day_hr_min_sec)):
                                    if list_day_hr_min_sec[yy] > 0:
                                        if yy == 0:
                                            type_date = " วัน "
                                        elif yy == 1:
                                            type_date = " ชั่วโมง "
                                        elif yy == 2:
                                            type_date = " นาที "
                                        elif yy == 3:
                                            type_date = " วินาที "
                                        string_details_avg_time += str(list_day_hr_min_sec[yy]) + type_date
                            print(string_details_avg_time)
                            if res_status_file == 'N':
                                string_details_avg_time = ""
                            # th_dateTime_1 = convert_datetime_TH_1(int(dateTime_String.timestamp()))
                            th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                            ts = int(time.time())
                            date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                            year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                            datetime_display = int(dateTime_String.timestamp())
                            date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                            yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                            time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                            old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                            if date_time_today == date_time_db:
                                date_display_show = time_show_db
                            else:
                                if year_today == yar_db:
                                    date_display_show = convert_datetime_TH_2_display(datetime_display)
                                else:
                                    date_display_show = old_year
                            string_remark_description = ''
                            title_remark = ''
                            if res_status_file == 'R':
                                if len(details_email_reject) != 0:
                                    for o in range(len(details_email_reject)):
                                        query_data = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(details_email_reject[o]['email'])).all()
                                        try:
                                            data_json_name = eval(query_data[0].citizen_data)['first_name_th'] + ' ' + eval(query_data[0].citizen_data)['last_name_th']
                                        except Exception as e:
                                            data_json_name = details_email_incomplete[oi]['email']
                                        # print(data_json_name)
                                        details_msg = {}
                                        details_msg['reject_by'] = details_email_reject[o]['email']
                                        details_msg['reject_in_step_num'] = details_email_reject[o]['step_num']
                                        details_msg['reject_in_datetime'] = details_email_reject[o]['datetime']
                                        title_remark = 'ยกเลิกโดย ลำดับที่ ' + details_email_reject[o]['step_num']
                                        datetime_display = convert_datetime_TH_2(int(details_email_reject[o]['datetime_string']))
                                        string_remark_description +=  '\n-' + data_json_name + '\nวันที่ ' + datetime_display
                                        lis_details.append(details_msg)
                            elif res_status_file == 'N':
                                if len(details_email_incomplete) != 0:
                                    for oi in range(len(details_email_incomplete)):
                                        tmp_step_num_list_0 = details_email_incomplete[0]['step_num']
                                        tmp_step_num_list = details_email_incomplete[oi]['step_num']
                                        if tmp_step_num_list_0 == tmp_step_num_list:
                                            query_data = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(details_email_incomplete[oi]['email'])).all()
                                            try:
                                                data_json_name = eval(query_data[0].citizen_data)['first_name_th'] + ' ' + eval(query_data[0].citizen_data)['last_name_th']
                                            except Exception as e:
                                                data_json_name = details_email_incomplete[oi]['email']

                                            details_msg = {}
                                            details_msg['pending_by'] = details_email_incomplete[oi]['email']
                                            details_msg['pending_in_step_num'] = details_email_incomplete[oi]['step_num']
                                            
                                            title_remark = 'รอการอนุมัติ ลำดับที่ ' + str(details_email_incomplete[oi]['step_num'])
                                            string_remark_description += '\n-' + data_json_name + ''
                                            lis_details.append(details_msg)
                        tmp_json = {}
                        ts = int(time.time())
                        date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                        year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                        dateTime_timestamp = int((query_document_tmp[u].send_time).timestamp())
                        date_time_db = datetime.datetime.fromtimestamp(dateTime_timestamp).strftime('%Y-%m-%d')
                        yar_db = datetime.datetime.fromtimestamp(dateTime_timestamp).strftime('%Y')
                        time_show_db = datetime.datetime.fromtimestamp(dateTime_timestamp).strftime('%H:%M')
                        old_year = datetime.datetime.fromtimestamp(dateTime_timestamp).strftime('%d/%m/%Y')
                        if date_time_today == date_time_db:
                            date_display_show = time_show_db
                        else:
                            if year_today == yar_db:
                                date_display_show = convert_datetime_TH_2_display(dateTime_timestamp)
                            else:
                                date_display_show = old_year

                        if query_document_tmp[u].urgent_type != None:
                            documentUrgentType = query_document_tmp[u].urgent_type
                            if documentUrgentType == 'I':
                                documentUrgentString = 'ด่วนมาก'
                            elif documentUrgentType == 'U':
                                documentUrgentString = 'ด่วน'
                            elif documentUrgentType == 'M':
                                documentUrgentString = 'ปกติ'

                        if query_document_tmp[u].documentJson != None:
                            documentJson_result = eval(query_document_tmp[u].documentJson)
                            print(documentJson_result)
                            documentName = documentJson_result['document_name']
                            documentType = documentJson_result['document_type']
                        else:
                            documentName = None
                            documentType = None



                        tmp_json['send_time'] = query_document_tmp[u].send_time
                        tmp_json['dateTime'] = dateTime_timestamp
                        tmp_json['dateTime_String'] = str(query_document_tmp[u].send_time).split('+')[0]
                        tmp_json['dateTime_String_TH_1'] = convert_datetime_TH_2(dateTime_timestamp)
                        tmp_json['dateTime_display'] = date_display_show
                        tmp_json['date_String'] = str(query_document_tmp[u].send_time).split(' ')[0]
                        tmp_json['time_String'] = str(query_document_tmp[u].send_time).split(' ')[1].split('+')[0]

                        tmp_json['document_urgent_string'] = documentUrgentString
                        tmp_json['document_name'] = documentName
                        tmp_json['document_type'] = documentType
                        tmp_json['sender_name'] = query_document_tmp[u].sender_name
                        tmp_json['sender_email'] = query_document_tmp[u].sender_email
                        if tmp_json['sender_name'] == 'null null':
                            tmp_json['sender_name'] = tmp_json['sender_email']
                        tmp_json['recipient_email'] = eval(query_document_tmp[u].recipient_email)
                        tmp_json['document_id'] = query_document_tmp[u].doc_id
                        tmp_json['tracking_id'] = query_document_tmp[u].tracking_id
                        tmp_json['file_name'] = query_document_tmp[u].file_name
                        if query_document_tmp[u].string_pdf != None:
                            tmp_json['status_original_pdf_file'] = True
                        else:
                            tmp_json['status_original_pdf_file'] = False
                        if query_document_tmp[u].string_sign != None:
                            tmp_json['status_sign_pdf_file'] = True
                        else:
                            tmp_json['status_sign_pdf_file'] = False
                        # tmp_json['data_json'] = eval(query_document_tmp[u].data_json)
                        tmp_json['fid'] = query_document_tmp[u].fid
                        # tmp_json['document_type'] = query_document_tmp[u].documentType
                        # tmp_json['documentJson'] = query_document_tmp[u].documentJson
                        tmp_json['digit_sign'] = query_document_tmp[u].digit_sign
                        tmp_json['document_urgent'] = query_document_tmp[u].urgent_type

                        option_eval=eval(query_document_tmp[u].options_page)
                        list_options_page.append(option_eval)
                        tmp_json['options_page'] = list_options_page

                        tmp_json['stamp_all'] = query_document_tmp[u].sign_page_options
                        tmp_json['sidCode'] = query_document_tmp[u].step_data_sid
                        try:
                            tmp_json['email_center'] = eval(query_document_tmp[u].email_center)
                        except Exception as e:
                            tmp_json['email_center'] = query_document_tmp[u].email_center
                        # if เช็คค่า null ของ attempted_folder -v-
                        tmp_json['attempted_folder'] = query_document_tmp[u].attempted_folder
                        tmp_json['status_file_code'] = res_status_file
                        tmp_json['status_file_details'] = lis_details
                        tmp_json['status_file_string'] = res_status_file_string
                        tmp_json['string_details_avg_time'] = string_details_avg_time
                        tmp_json['timeline'] = concat_steptimeline
                        tmp_json['timing'] = string_timing
                        tmp_json['remark_description'] = title_remark + string_remark_description

                        tmp_json['step_Name'] = query_document_tmp[u].step_Name
                        tmp_json['documentDetails'] = query_document_tmp[u].documentDetails
                        tmp_json['condition_temp'] = query_document_tmp[u].condition_temp
                        tmp_json['step_Code'] = query_document_tmp[u].step_Code
                        tmp_json['status'] = query_document_tmp[u].status
                        # if tmp_json['status'] == 'ACTIVE':
                        #     count_Active += 1
                        # elif tmp_json['status'] == 'REJECT':
                        #    count_Reject += 1


                        tmp_biz_info = (query_document_tmp[u].biz_info)
                        if tmp_biz_info == 'None':
                            tmp_biz_info = 'None'
                            list_biz = []
                            dict_biz= {}
                            dict_biz['id'] = None
                            dict_biz['id_card_num'] = None
                            dict_biz['first_name_eng'] = None
                            dict_biz['first_name_th'] = None
                            list_biz.append(dict_biz)
                            tmp_json['biz_detail'] = list_biz

                        else :
                            tmp_biz_info = eval(tmp_biz_info)
                            if 'id' in tmp_biz_info:
                                tmp_id_biz = tmp_biz_info['id']
                                tmp_id_card_num_biz = tmp_biz_info['id_card_num']
                                tmp_first_name_eng_biz = tmp_biz_info['first_name_eng']
                                tmp_first_name_th_biz = tmp_biz_info['first_name_th']
                            tmp_json['biz_detail'] = [{'id':tmp_id_biz,'id_card_num':tmp_id_card_num_biz,'first_name_eng':tmp_first_name_eng_biz,'first_name_th':tmp_first_name_th_biz}]

                        # print (u)
                        sum_Document = sum_Document+1

                        if ((u+1) == len(query_document_tmp)):
                            last_time = (tmp_json['send_time'])
                            dt_object = int(datetime.datetime.timestamp(last_time))


                        tmp_list_result.append(tmp_json)
                    tmp_data['data'] = tmp_list_result
                    query_document_tmp_count = query_document_tmp_Active + query_document_tmp_Reject + query_document_tmp_Inactive + query_document_tmp_Delete
                    tmp_data['sum_Document'] = query_document_tmp_count

                    # tmp_data['Document_Status_Details']
                    Document_Status_Details  = [{
                        'Incomplete_Pendding':statusFile_count_pendding,
                        'Complete_Approve':statusFile_count_approve,
                        'Reject':statusFile_count_reject
                    }]

                    tmp_data['Document_Status'] = [{
                        'ACTIVE':query_document_tmp_Active,
                        'REJECT':query_document_tmp_Reject,
                        'INACTIVE':query_document_tmp_Inactive,
                        'DELETE':query_document_tmp_Delete
                    }]

                    tmp_list_result2.append(tmp_data)
                    return {'result':'OK','messageText':tmp_list_result2}
                else:
                    return {'result':'ER','messageText':'data not found'}
            except exc.SQLAlchemyError as ex:
                db.session.rollback()
                raise
            except Exception as e:
                exc_type, exc_obj, exc_tb = sys.exc_info()
                fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                print(exc_type, fname, exc_tb.tb_lineno)
                db.session.rollback()
                raise
                return {'result':'ER','messageText':'cant select','messageER':str(e)}
            finally:
                db.session.close()

        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return ({'result':'ER','messageText':None,'messageER':str(e),'status_Code':200}),200
        
    def count_search_admin_document(self,key,email):
        try:
            self.key = key
            self.email = email

            key2 = '%' + str(self.key) + '%'
            # mail = find_email(self.key)
            endTime = ''
            ch,startTime = checkDatetime(self.key)
            
            if ch == True:
                endTime = startTime.replace(hour=23, minute=59, second=59, microsecond=0)
                print ('startTime: ',startTime)
                print ('endtime: ',endTime)
                query_document_tmp = view_document.query.filter(view_document.sender_email==self.email)\
                    .filter(view_document.status=='ACTIVE')\
                    .filter(view_document.update_time <= str(endTime))\
                    .filter(view_document.update_time >= str(startTime))\
                    .order_by(desc(view_document.update_time))\
                    .count()
            else:
                query_document_tmp = view_document.query.filter(view_document.sender_email==self.email)\
                    .filter(view_document.status=='ACTIVE')\
                    .filter(or_(view_document.documentType.ilike(key2),view_document.recipient_email.ilike(key2),view_document.documentJson.ilike(key2),view_document.tracking_id.ilike(key2),view_document.biz_info.ilike(key2)))\
                    .count()
            
            return ({'result':'OK','messageText':query_document_tmp,'messageER':None})
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return ({'result':'ER','messageText':None,'messageER':str(e),'status_Code':200}),200

    def select_ppl_expire(self):
        tmp_time_now = int(time.time())
        list_sid_noti = []
        # print('tmp_time_now',tmp_time_now)
        with slave.connect() as connection:
            result = connection.execute(text('SELECT "tb_send_detail"."stepnow","tb_send_detail"."send_time","tb_send_detail"."time_expire","tb_doc_detail"."options_page","tb_send_detail"."doc_id","tb_send_detail"."step_data_sid","tb_step_data"."update_time","tb_send_detail"."status_details" FROM "tb_send_detail" INNER JOIN "tb_step_data" ON "step_data_sid" = "sid" \
            INNER JOIN "tb_doc_detail" ON "step_data_sid" = "step_id" WHERE "document_status"=:val AND "status"=:status ORDER BY "send_time" DESC'),val='N',status='ACTIVE')
            connection.close()
        tmp_query = [dict(row) for row in result]
        for x in range(len(tmp_query)):
            tmpjsonquery = tmp_query[x]
            if tmpjsonquery['time_expire'] != None:
                time_expire = int(datetime.datetime.timestamp(tmpjsonquery['time_expire']))
                result_time = time_expire - tmp_time_now
                # print('result_time',result_time)
                list_timeline = convert_hr_min_sec_v1(int(result_time))
                string_list_timeline = ''
                time_minute = 0
                # print('result_time',result_time)
                # print('list_timeline',list_timeline)
                if result_time > 0 :
                    for yy in range(len(list_timeline)):
                        if list_timeline[yy] > 0:
                            if yy == 0:
                                type_date = " วัน "
                                time_minute += int(list_timeline[yy]) * 1440
                            elif yy == 1:
                                type_date = " ชั่วโมง "
                                time_minute += int(list_timeline[yy]) *  60
                            elif yy == 2:
                                type_date = " นาที "
                                time_minute += int(list_timeline[yy])
                            elif yy == 3:
                                type_date = " วินาที "
                            string_list_timeline += str(list_timeline[yy]) + type_date
                    # print('sid',tmpjsonquery['step_data_sid'])
                    # print('time_expire',tmpjsonquery['time_expire'])
                    # print('string_list_timeline',string_list_timeline)
                    # print('time_minute',time_minute)
                    if time_minute < 30 :
                        list_sid_noti.append(tmpjsonquery['step_data_sid'])
                    print('____________________________-')
        print('list_sid_noti',list_sid_noti)
        return {'result':'OK','messageText':list_sid_noti}

    def select_tb_bizpaperAndbizprofile_v2(self):
        json_data = []
        list_taxid = []
        result_bizprofile = None
        data = []

        try:
            with slave.connect() as connection:
                result = connection.execute(text('SELECT "tb_bizPaperless"."tax_id","tb_bizProfile"."bizTax","tb_bizProfile"."bizInfoJson"\
                FROM "tb_bizPaperless" INNER JOIN "tb_bizProfile" ON "tb_bizPaperless"."tax_id" = "tb_bizProfile"."bizTax"'))
                tmp_query = [dict(row) for row in result]
                connection.close()
            for x in range(len(tmp_query)):
                bizInfoJson = eval(tmp_query[x]['bizInfoJson'])
                tmp_query[x]['first_name_eng'] = bizInfoJson['first_name_eng']
                tmp_query[x]['first_name_th'] = bizInfoJson['first_name_th']
                tmp_query[x]['id_card_num'] = bizInfoJson['id_card_num']
                tmp_query[x]['id_card_type'] = bizInfoJson['id_card_type']
                tmp_query[x]['id'] = bizInfoJson['id']
                del tmp_query[x]['bizInfoJson']
                del tmp_query[x]['bizTax']
                del tmp_query[x]['tax_id']
            
            tmp_query = sorted(tmp_query, key=lambda k: k['first_name_th'], reverse=False)
            return {'result':'OK','messageText': tmp_query}

        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText': ex}

    def select_documentquery_(self,tax_id,str_datetime,end_datetime):
        self.tax_id = tax_id
        txtId = "%{}%".format(self.tax_id)
        # str_datetime = '2020-05-25 00:00:00'
        # end_datetime = '2020-05-25 23:59:59'
        # ts = int(time.time())
        # st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        # int(time.mktime(datetime.datetime.strptime(t1, "%Y-%m-%d %H:%M:%S").timetuple()))
        # str_datetime = str(st).split(' ')[0] + ' ' + '00:00:00'
        # end_datetime = str(st).split(' ')[0] + ' ' + '23:59:59'
        try:
            sql = ''' 
                SELECT
                    tb_send_detail.ID AS "id",
                    tb_doc_detail."documentJson" AS "documentJson"
                FROM
                    tb_send_detail
                    JOIN tb_doc_detail ON tb_doc_detail.step_id = tb_send_detail.step_data_sid
                    JOIN tb_step_data ON tb_step_data.sid = tb_send_detail.step_data_sid 
                WHERE
                    tb_step_data.update_time >= :str_datetime
                    AND tb_step_data.update_time <= :end_datetime
                    AND tb_step_data.biz_info LIKE :tax_id
                    AND tb_send_detail.document_status = 'Y'
            '''
            connection = slave.connect()
            result = connection.execute(text(sql),str_datetime=str_datetime,end_datetime=end_datetime,tax_id=txtId)
            connection.close()
            resultQuery = [dict(row) for row in result]
            if len(resultQuery) != 0:
                tmpdocument_type = []
                tmpcount = []
                tmpresult = []
                list_onemail2 = []
                for z in resultQuery:
                    if 'documentJson' in z:
                        try:
                            tmpdocuemntjson_1 = eval(z['documentJson'])
                            tmpdocument_type.append(tmpdocuemntjson_1['document_type'])
                        except Exception as e:
                            pass
                counter = Counter(tmpdocument_type)
                for x,y in counter.items():
                    json = {}
                    json['document_type'] = x
                    json['count'] = y
                    tmpresult.append(json)
                return tmpresult
            # query_log = db.session.query(paper_lesssender,paper_lessdocument)\
            #     .join(paper_lessdocument, paper_lessdocument.step_id == paper_lesssender.step_data_sid)\
            #     .join(paper_lessdatastep, paper_lessdatastep.sid == paper_lesssender.step_data_sid)\
            #     .filter(and_(paper_lessdatastep.update_time>=str_datetime,paper_lessdatastep.update_time<=end_datetime))\
            #     .filter(paper_lessdatastep.biz_info.like(txtId))\
            #     .filter(paper_lesssender.document_status=='Y')
            #     # .all()
            # print(query_log)
            return ''
            if len(query_log) != 0:
                tmpdocument_type = []
                tmpcount = []
                tmpresult = []
                list_onemail2 = []
                for z in query_log:
                    tmp_asdict = z._asdict()
                    if 'paper_lessdocument' in tmp_asdict:
                        tmppaper_lessdocument = tmp_asdict['paper_lessdocument'].__dict__
                        if 'documentJson' in tmppaper_lessdocument:
                            tmpdocuemntjson_1 = eval(tmppaper_lessdocument['documentJson'])
                            tmpdocument_type.append(tmpdocuemntjson_1['document_type'])
                counter = Counter(tmpdocument_type)
                for x,y in counter.items():
                    json = {}
                    json['document_type'] = x
                    json['count'] = y
                    tmpresult.append(json)
                return tmpresult
        except Exception as e:
            pass

    def select_activity(self,emailUser,offsets,limits):
        self.emailUser = emailUser
        self.offsets = offsets
        self.limits = limits
        txtapi1 = "%{}%".format('api/v4/step')
        txtapi2 = "%{}%".format('api/sign/v2')
        txtapi3 = "%{}".format('api/v2/comment')
        txtapi4 = "%{}%".format('api/v2/rejectdoc')
        txtapi5 = "%{}%".format('api/v1/tranfersign')
        list_arr = []
        print(emailUser)
        try:
            query_log = db.session.query(tb_transactionlogrequest)\
                    .join(paper_lesstoken_required, paper_lesstoken_required.hash_one_access_token == tb_transactionlogrequest.hash_token)\
                    .filter(paper_lesstoken_required.email_thai == self.emailUser)\
                    .filter(or_(tb_transactionlogrequest.url_request.like(txtapi1),tb_transactionlogrequest.url_request.like(txtapi2)\
                    ,tb_transactionlogrequest.url_request.like(txtapi3),tb_transactionlogrequest.url_request.like(txtapi4)\
                    ,tb_transactionlogrequest.url_request.like(txtapi5)))\
                    .order_by(desc(tb_transactionlogrequest.datetime)).distinct().offset(int(self.offsets)).limit(int(self.limits)).all()
            print('len()',len(query_log))
            for u in range(len(query_log)): 
                status = ''
                detail = ''
                tmp_dict_json = query_log[u].__dict__
                url_request = str(tmp_dict_json['url_request'])
                datetimes = str(tmp_dict_json['datetime']).split('+')[0]
                status_code = str(tmp_dict_json['statuscode'])
                Name = fine_name_surename(self.emailUser) 
                sid = eval(tmp_dict_json['request'])                  
                massage = sid 
                if 'sid' in sid :
                    sid = sid['sid']   
                elif 'sidCode' in sid :
                    sid = sid['sidCode']
                elif 'step_data_sid' in sid :
                    sid = sid['step_data_sid']
                data = select_trackingid_from_sid(sid)

                if 'api/sign/v2' in url_request :
                    status = 'ส่งเอกสาร'
                    detail = Name + ' ส่งเอกสารเลขที่ ' + data['docId'] + ' ไฟล์ : ' + data['fileName']
                elif 'api/v2/rejectdoc' in url_request:
                    status = 'ลบเอกสาร'
                    detail = Name + ' ลบเอกสารเลขที่ ' + data['docId'] + ' ไฟล์ : ' + data['fileName']
                elif 'api/v1/tranfersign' in url_request:
                    dats = datetime.datetime.strptime(datetimes, '%Y-%m-%d %H:%M:%S')        
                    datetime1 = dats.strftime('%Y-%m-%d %H:%M:00')
                    datetime2 = dats.strftime('%Y-%m-%d %H:%M:59')
                    temp_query = paper_lesstranfer.query.filter(paper_lesstranfer.sid == str(sid),paper_lesstranfer.datetime >= datetime1,paper_lesstranfer.datetime <= datetime2).first()
                    email_from = eval(temp_query.email_from)
                    email_to = eval(temp_query.email_to)
                    email_from, email_to = email_from[0], email_to[0]
                    txtDetail = ''
                    for i in range(len(email_from)):
                        txtDetail = txtDetail + ' จาก ' + str(email_from[i]) + ' เป็น ' + str(email_to[i])
                    status = 'โอนสิทธิ์อนุมัติ'
                    detail = Name + ' โอนสิทธิ์อนุมัติเอกสารเลขที่ ' + data['docId'] + ' ลำดับที่ ' + str(massage['step'][0]) + txtDetail
                elif 'api/v2/comment' in url_request:
                    if 'comment' in tmp_dict_json['request']:
                        status = 'บันทึกข้อความ'
                        detail = Name + ' บันทึกข้อความ : ' + massage['comment'] + ' ในเอกสารเลขที่ ' + data['docId'] + ' ลำดับที่ ' + massage['step'] + ' ไฟล์ : ' + data['fileName']
                    else:
                        status = 'ลบข้อความ'    
                        detail = Name + ' ลบข้อความเอกสารเลขที่ ' + data['docId'] + ' ไฟล์ : ' + data['fileName']
                elif 'api/v4/step' in url_request:
                    if 'Reject' in tmp_dict_json['request']:
                        status = 'ปฏิเสธอนุมัติ'
                        detail = Name + ' ปฏิเสธอนุมัติเอกสารเลขที่ ' + data['docId'] + ' ลำดับที่ ' + massage['step_num'] + ' ไฟล์ : ' + data['fileName']
                    elif 'Approve' in tmp_dict_json['request']:
                        status = 'อนุมัติเอกสาร'
                        detail = Name + ' อนุมัติเอกสารเลขที่ ' + data['docId'] + ' ลำดับที่ ' + massage['step_num'] + ' ไฟล์ : ' + data['fileName']
                    elif 'Complete' in tmp_dict_json['request']:
                        status = 'เซ็นเอกสาร'
                        detail = Name + ' เซ็นเอกสารเลขที่ ' + data['docId'] + ' ลำดับที่ ' + massage['step_num'] + ' ไฟล์ : ' + data['fileName']
                        
                if status_code == '200 OK':
                    status_code = 'SUCCESS'
                else:
                    status_code = 'FAIL'

                if status != '':
                    list_arr.append({
                        'status' : status,
                        'statusdetail' : detail,
                        'updatetime' : str(datetimes),
                        'url' : url_request,
                        'id' : tmp_dict_json['id'],
                        'tracking_id' : data['trackingId'],
                        'statuscode' : status_code,
                    })
            print(len(list_arr))
            return {'result':'OK','messageText':list_arr}

        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

    def select_activity_count(self,emailUser):
        self.emailUser = emailUser
        txtapi1 = "%{}%".format('api/v4/step')
        txtapi2 = "%{}%".format('/api/v3/upload_ppl')
        txtapi3 = "%{}".format('api/v2/comment')
        txtapi4 = "%{}%".format('api/v2/rejectdoc')
        txtapi5 = "%{}%".format('api/v1/tranfersign')
        txtNo1 = "%{}%".format('ppl_id') 
        txtNo2 = "{}".format('None')
        try:
            query_log = db.session.query(tb_transactionlogrequest)\
                    .join(paper_lesstoken_required, paper_lesstoken_required.hash_one_access_token == tb_transactionlogrequest.hash_token)\
                    .filter(paper_lesstoken_required.email_thai == self.emailUser)\
                    .filter(or_(tb_transactionlogrequest.url_request.like(txtapi1),tb_transactionlogrequest.url_request.like(txtapi2)\
                    ,tb_transactionlogrequest.url_request.like(txtapi3),tb_transactionlogrequest.url_request.like(txtapi4)\
                    ,tb_transactionlogrequest.url_request.like(txtapi5)),~tb_transactionlogrequest.request.like(txtNo1),~tb_transactionlogrequest.request.like(txtNo2))\
                    .order_by(desc(tb_transactionlogrequest.datetime)).distinct().count()
            list_arr = []
            list_arr.append({
                'count_history' : query_log
            })
            return {'result':'OK','messageText':list_arr}

        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

    def select_theme(self,tax_id):
        self.tax_id = tax_id
        # ts = int(time.time())
        # st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        try:
            if self.tax_id == '':
                return {'result':'ER','messageText':'Please complete all information'}
            elif len(self.tax_id) != 13:
                return {'result':'ER','messageText':'Incorrect information'}
            tmp_query = paper_lessbizPaperless.query.filter(paper_lessbizPaperless.tax_id==self.tax_id).first()
            if tmp_query != None:
                if tmp_query.path_logo != None and tmp_query.theme_color != None:
                    filename = str(tmp_query.path_logo).split('/')[3]
                    path = tmp_query.path_logo
                    color = tmp_query.theme_color
                    with open(str(path), "rb") as img:
                        # encoded_string = img.read()
                        img_string = (base64.b64encode(img.read())).decode()
                        arr = [{
                            'img_base64' : img_string,
                            'color' : str(color),
                            'filename' : filename
                        }]
                    return {'result':'OK','messageText':arr}
                else:
                    return {'result':'ER','messageText':'Business are not setting'}

            else :
                return {'result':'ER','messageText':'no business!'}
        except exc.SQLAlchemyError as ex:
            print(ex)
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'duplicate value!'}
        except Exception as ex:
            print(ex)
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':str(ex)}

    def select_get_template_tax_new_v12(self,username,taxId,offset,limit):
        self.username = username
        self.taxId = taxId
        self.offset = offset
        self.limit = limit
        tmp_json = {}
        tmp_arr_get = []
        try:
            tmp_list_status = ["ACTIVE"]
            query_temp = None
            print('user',self.username)
            print('tax',self.taxId)
            # if self.offset == None or self.limit == None :
            #     return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
            if self.taxId != None :
                print('tax')
                if self.offset == '' and self.limit == '' :
                    query_temp = db.session.query(
                        paper_lessstep.step_Code,
                        paper_lessstep.step_Data,
                        paper_lessstep.step_Max,
                        paper_lessstep.username,
                        paper_lessstep.email,
                        paper_lessstep.DateTime,
                        paper_lessstep.step_Description,
                        paper_lessstep.step_Name,
                        paper_lessstep.step_Upload,
                        paper_lessstep.template_biz,
                        paper_lessstep.qrCode_position,
                        paper_lessstep.status,
                        paper_lessstep.documentDetails,
                        paper_lessstep.urgent_type,
                        paper_lessstep.webhook,
                        paper_lessstep.condition_temp,
                        paper_lessstep.email_center,
                        paper_lessstep.formula_temp,
                        paper_lessstep.digit_sign,
                        paper_lessstep.page_sign_options,
                        paper_lessstep.options_page,
                        paper_lessstep.status_use,
                        paper_lessstep.time_expire,
                        paper_lessstep.importance_doc,
                        paper_lessstep.last_digit_sign,
                        paper_lessstep.status_ref,
                        paper_lessdocument_detail.documentJson)\
                        .join(paper_lessdocument_detail, paper_lessdocument_detail.documentType==paper_lessstep.documentDetails)\
                        .filter(paper_lessstep.status=='ACTIVE',paper_lessstep.template_biz.contains(self.taxId))\
                        .filter(paper_lessdocument_detail.documentStatus=="ACTIVE",paper_lessdocument_detail.biz_info!=None,paper_lessdocument_detail.biz_info!='',paper_lessdocument_detail.biz_info.contains(self.taxId))\
                        .order_by((paper_lessstep.documentDetails).asc())\
                        .all()              
                else:
                    query_temp = db.session.query(
                        paper_lessstep.step_Code,
                        paper_lessstep.step_Data,
                        paper_lessstep.step_Max,
                        paper_lessstep.username,
                        paper_lessstep.email,
                        paper_lessstep.DateTime,
                        paper_lessstep.step_Description,
                        paper_lessstep.step_Name,
                        paper_lessstep.step_Upload,
                        paper_lessstep.template_biz,
                        paper_lessstep.qrCode_position,
                        paper_lessstep.status,
                        paper_lessstep.documentDetails,
                        paper_lessstep.urgent_type,
                        paper_lessstep.webhook,
                        paper_lessstep.condition_temp,
                        paper_lessstep.email_center,
                        paper_lessstep.formula_temp,
                        paper_lessstep.digit_sign,
                        paper_lessstep.page_sign_options,
                        paper_lessstep.options_page,
                        paper_lessstep.status_use,
                        paper_lessstep.time_expire,
                        paper_lessstep.importance_doc,
                        paper_lessstep.last_digit_sign,
                        paper_lessstep.status_ref,
                        paper_lessdocument_detail.documentJson)\
                        .join(paper_lessdocument_detail, paper_lessdocument_detail.documentType==paper_lessstep.documentDetails)\
                        .filter(paper_lessstep.status=='ACTIVE',paper_lessstep.template_biz.contains(self.taxId))\
                        .filter(paper_lessdocument_detail.documentStatus=="ACTIVE",paper_lessdocument_detail.biz_info!=None,paper_lessdocument_detail.biz_info!='',paper_lessdocument_detail.biz_info.contains(self.taxId))\
                        .order_by((paper_lessstep.documentDetails).asc())\
                        .offset(int(self.offset)).limit(int(self.limit))\
                        .all()

            elif self.username != None:
                print('userUSER')
                if self.offset == '' or self.limit == '':
                    query_temp = db.session.query(
                        paper_lessstep.step_Code,
                        paper_lessstep.step_Data,
                        paper_lessstep.step_Max,
                        paper_lessstep.username,
                        paper_lessstep.email,
                        paper_lessstep.DateTime,
                        paper_lessstep.step_Description,
                        paper_lessstep.step_Name,
                        paper_lessstep.step_Upload,
                        paper_lessstep.template_biz,
                        paper_lessstep.qrCode_position,
                        paper_lessstep.status,
                        paper_lessstep.documentDetails,
                        paper_lessstep.urgent_type,
                        paper_lessstep.webhook,
                        paper_lessstep.condition_temp,
                        paper_lessstep.email_center,
                        paper_lessstep.formula_temp,
                        paper_lessstep.digit_sign,
                        paper_lessstep.page_sign_options,
                        paper_lessstep.options_page,
                        paper_lessstep.status_use,
                        paper_lessstep.time_expire,
                        paper_lessstep.importance_doc,
                        paper_lessstep.last_digit_sign,
                        paper_lessstep.status_ref,
                        paper_lessdocument_detail.documentJson,
                        paper_lessdocument_detail.documentUser,
                        paper_lessdocument_detail.documentStatus,
                        paper_lessdocument_detail.documentType)\
                        .filter(paper_lessstep.documentDetails == paper_lessdocument_detail.documentType)\
                        .filter(paper_lessstep.username==self.username,paper_lessstep.status=="ACTIVE")\
                        .filter(or_(paper_lessstep.template_biz=='',paper_lessstep.template_biz==None))\
                        .filter(paper_lessdocument_detail.documentUser == self.username)\
                        .filter(paper_lessdocument_detail.documentStatus == "ACTIVE")\
                        .filter(or_(paper_lessdocument_detail.biz_info=='',paper_lessdocument_detail.biz_info==None))\
                        .order_by((paper_lessstep.sid).asc())\
                        .all()
                else:
                    query_temp = db.session.query(
                        paper_lessstep.step_Code,
                        paper_lessstep.step_Data,
                        paper_lessstep.step_Max,
                        paper_lessstep.username,
                        paper_lessstep.email,
                        paper_lessstep.DateTime,
                        paper_lessstep.step_Description,
                        paper_lessstep.step_Name,
                        paper_lessstep.step_Upload,
                        paper_lessstep.template_biz,
                        paper_lessstep.qrCode_position,
                        paper_lessstep.status,
                        paper_lessstep.documentDetails,
                        paper_lessstep.urgent_type,
                        paper_lessstep.webhook,
                        paper_lessstep.condition_temp,
                        paper_lessstep.email_center,
                        paper_lessstep.formula_temp,
                        paper_lessstep.digit_sign,
                        paper_lessstep.page_sign_options,
                        paper_lessstep.options_page,
                        paper_lessstep.status_use,
                        paper_lessstep.time_expire,
                        paper_lessstep.importance_doc,
                        paper_lessstep.last_digit_sign,
                        paper_lessstep.status_ref,
                        paper_lessdocument_detail.documentJson,
                        paper_lessdocument_detail.documentUser,
                        paper_lessdocument_detail.documentStatus)\
                        .join(paper_lessdocument_detail, paper_lessdocument_detail.documentType==paper_lessstep.documentDetails)\
                        .filter(paper_lessstep.username==self.username,paper_lessstep.status=="ACTIVE")\
                        .filter(or_(paper_lessstep.template_biz=='',paper_lessstep.template_biz==None))\
                        .filter(paper_lessdocument_detail.documentUser == self.username)\
                        .filter(paper_lessdocument_detail.documentStatus == "ACTIVE")\
                        .order_by((paper_lessstep.sid).asc())\
                        .offset(int(self.offset)).limit(int(self.limit))\
                        .all()
            
            print('len',len(query_temp))
            
            for n in query_temp:                
                tmp_asdict = n._asdict()
                # print('tmp_asdict',tmp_asdict['status_use'])
                # print(tmp_asdict['step_Code'])
                tmp_importance_doc = None
                status_ref = tmp_asdict['status_ref']
                list_time_expire = []
                last_digit_sign = False
                if tmp_asdict['importance_doc'] != None:
                    if tmp_asdict['importance_doc'] == '0':
                        tmp_importance_doc = 'สำคัญมาก'
                    elif tmp_asdict['importance_doc'] == '1':
                        tmp_importance_doc = 'สำคัญปานกลาง'
                    elif tmp_asdict['importance_doc'] == '2':
                        tmp_importance_doc = 'สำคัญปกติ'
                if tmp_asdict['time_expire'] != None:
                    hour = int(tmp_asdict['time_expire']) % 24
                    day = int(int(tmp_asdict['time_expire']) / 24)
                    list_time_expire = [day,hour] 
                else:
                    list_time_expire = None
                if tmp_asdict['last_digit_sign'] == None:
                    last_digit_sign = None
                else:
                    last_digit_sign = bool(tmp_asdict['last_digit_sign'])
                try:
                    tmp_options_page = eval(tmp_asdict['options_page'])
                except Exception as e:
                    tmp_options_page = {}
                try:
                    tmpformula_temp = eval(tmp_asdict['formula_temp'])
                    tmpformula_temp_string = tmp_asdict['formula_temp']
                except Exception as e:
                    tmpformula_temp = None
                    tmpformula_temp_string = tmp_asdict['formula_temp']
                if tmp_asdict['qrCode_position'] != None:
                    try:
                        tmp_qrCode_position = eval(tmp_asdict['qrCode_position'])
                    except Exception as ex:
                        return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล qrCode_position ให้เป็น Json ได้'}
                else:
                    tmp_qrCode_position = None
                if tmp_asdict['documentDetails'] != None:
                    tmp_document_typeJson = eval(tmp_asdict['documentJson'])
                    tmp_document_typeJson_string = tmp_asdict['documentJson']
                else:
                    jsondetailsDoc = {}
                    jsondetailsDoc['document_type'] = None
                    jsondetailsDoc['document_name'] = None
                    jsondetailsDoc['document_remark'] = None
                    tmp_document_typeJson = jsondetailsDoc
                    tmp_document_typeJson_string = str(jsondetailsDoc)
                tmp_urgent_type = 'M'
                tmp_urgent_string_th = 'ปกติ'
                tmp_urgent_string_en = 'MEDIUM'
                if tmp_asdict['urgent_type'] != None:
                    tmp_urgent_type = tmp_asdict['urgent_type']
                    if tmp_urgent_type == 'M':
                        tmp_urgent_string_th = 'ปกติ'
                        tmp_urgent_string_en = 'MEDIUM'
                    elif tmp_urgent_type == 'U':
                        tmp_urgent_string_th = 'ด่วน'
                        tmp_urgent_string_en = 'URGENT'
                    elif tmp_urgent_type == 'I':
                        tmp_urgent_string_th = 'ด่วนมาก'
                        tmp_urgent_string_en = 'IMMEDIATE'
                try:
                    data_step = eval(tmp_asdict['step_Data'])
                except Exception as ex:
                    return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล Step ให้เป็น Json ได้'}
                try:
                    step_Upload = eval(tmp_asdict['step_Upload'])
                except Exception as ex:
                    return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล step_Upload ให้เป็น Json ได้'}
                if tmp_asdict['step_Max'] == 1:
                    tmp_data_step = [data_step]
                else:
                    tmp_data_step = data_step
                try:
                    data_step = tmp_asdict['step_Data']
                    data_step = eval(data_step)
                    if tmp_asdict['step_Max'] != 1:
                        step_infomation = list(eval(tmp_asdict['step_Data']))
                    else:
                        step_infomation = [data_step]
                    tmp_sign_detail_list = []
                    muti_sign = False
                    for i in range(len(step_infomation)):
                        sign_json_info = {}
                        tmp_sign_list_info = []
                        step_ = step_infomation[i]
                        step_num = step_infomation[i]['step_num']
                        # print(type(step_infomation[i]))
                        if 'step_sign' in step_:
                            tmp_stepsign = step_['step_sign']
                            tmp_status_stepsign = tmp_stepsign['status']
                            if tmp_status_stepsign == True:
                                muti_sign = True
                                tmp_data_stepsign = tmp_stepsign['data']
                                for y in range(len(tmp_data_stepsign)):
                                    step_signning = tmp_data_stepsign[y]
                                    tmp_sign_list_info.append(step_signning)
                        for u in range(len(step_['step_detail'])):
                            step_2 = step_['step_detail'][u]
                            for zz in range(len(step_2['activity_data'])): 
                                if 'status' in step_2['activity_data'][zz]:
                                    sign_json_info = step_2['activity_data'][zz]
                                    tmp_sign_list_info.append(sign_json_info)
                        sign_json_info = {
                            'data':tmp_sign_list_info,
                            'step_num':step_num
                        }
                        tmp_sign_detail_list.append(sign_json_info)
                    # json_sky['sign_info'] = tmp_sign_detail_list
                except Exception as e:
                    exc_type, exc_obj, exc_tb = sys.exc_info()
                    fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                    print(exc_type, fname, exc_tb.tb_lineno)
                    tmp_sign_detail_list = []
                # json_sky['multi_sign'] = muti_sign
                
                tmp_json = {
                    'stamp_all':tmp_asdict['page_sign_options'],
                    'step_Code':tmp_asdict['step_Code'],
                    'dateTime':tmp_asdict['DateTime'],
                    'dateTime_string':str(tmp_asdict['DateTime']).split('+')[0],
                    'condition_string':tmp_asdict['condition_temp'],
                    'step_Upload':json.loads(json.dumps(tmp_asdict['step_Upload'])),
                    'template_webhook':tmp_asdict['webhook'],
                    'email_center':tmp_asdict['email_center'],
                    'options_page_string':tmp_asdict['options_page'],
                    'options_page':tmp_options_page,
                    'formula_temp_string':tmpformula_temp_string,
                    'formula_temp':tmpformula_temp,
                    'digit_sign':bool(tmp_asdict['digit_sign']),
                    'username':tmp_asdict['username'],
                    'step_Max':int(tmp_asdict['step_Max']),
                    'step_Name':tmp_asdict['step_Name'],
                    'qrCode_position':tmp_qrCode_position,
                    'step_Description':tmp_asdict['step_Description'],
                    'document_details':tmp_document_typeJson,
                    'document_details_string':tmp_document_typeJson_string,
                    'email':tmp_asdict['email'],
                    'urgent_code':tmp_urgent_type,
                    'urgent_string_th':tmp_urgent_string_th,
                    'urgent_string_en':tmp_urgent_string_en,
                    'data_step':tmp_data_step,
                    'sign_info':tmp_sign_detail_list,
                    'multi_sign':muti_sign,
                    'status_use': tmp_asdict['status_use'],
                    'importance': tmp_importance_doc,
                    'time_expire': list_time_expire,
                    'last_digit_sign' : last_digit_sign,
                    'status_ref' : status_ref
                }
                tmp_arr_get.append(tmp_json)
            if len(tmp_arr_get) != 0:
                return {'result':'OK','messageText':tmp_arr_get,'status_Code':200}
            else:
                return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
        except Exception as ex:
            print(ex)
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล','messageER':str(ex)}
        finally:
            db.session.close()


    # def select_get_template_tax_new_v12(self,username,taxId,offset,limit):
    #     self.username = username
    #     self.taxId = taxId
    #     self.offset = offset
    #     self.limit = limit
    #     tmp_json = {}
    #     tmp_arr_get = []
    #     try:
    #         tmp_list_status = ["ACTIVE"]
    #         query_temp = None
    #         print('user',self.username)
    #         print('tax',self.taxId)
    #         # if self.offset == None or self.limit == None :
    #         #     return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
    #         if self.taxId != None :
    #             print('tax')
    #             if self.offset == '' and self.limit == '' :
    #                 query_temp = db.session.query(
    #                     paper_lessstep.step_Code,
    #                     paper_lessstep.step_Data,
    #                     paper_lessstep.step_Max,
    #                     paper_lessstep.username,
    #                     paper_lessstep.email,
    #                     paper_lessstep.DateTime,
    #                     paper_lessstep.step_Description,
    #                     paper_lessstep.step_Name,
    #                     paper_lessstep.step_Upload,
    #                     paper_lessstep.template_biz,
    #                     paper_lessstep.qrCode_position,
    #                     paper_lessstep.status,
    #                     paper_lessstep.documentDetails,
    #                     paper_lessstep.urgent_type,
    #                     paper_lessstep.webhook,
    #                     paper_lessstep.condition_temp,
    #                     paper_lessstep.email_center,
    #                     paper_lessstep.formula_temp,
    #                     paper_lessstep.digit_sign,
    #                     paper_lessstep.page_sign_options,
    #                     paper_lessstep.options_page,
    #                     paper_lessstep.status_use,
    #                     paper_lessstep.time_expire,
    #                     paper_lessstep.importance_doc,
    #                     paper_lessstep.last_digit_sign,
    #                     paper_lessdocument_detail.documentJson)\
    #                     .join(paper_lessdocument_detail, paper_lessdocument_detail.documentType==paper_lessstep.documentDetails)\
    #                     .filter(paper_lessstep.status=='ACTIVE',paper_lessstep.template_biz.contains(self.taxId))\
    #                     .filter(paper_lessdocument_detail.documentStatus=="ACTIVE",paper_lessdocument_detail.biz_info!=None,paper_lessdocument_detail.biz_info!='',paper_lessdocument_detail.biz_info.contains(self.taxId))\
    #                     .order_by((paper_lessstep.documentDetails).asc())\
    #                     .all()              
    #             else:
    #                 query_temp = db.session.query(
    #                     paper_lessstep.step_Code,
    #                     paper_lessstep.step_Data,
    #                     paper_lessstep.step_Max,
    #                     paper_lessstep.username,
    #                     paper_lessstep.email,
    #                     paper_lessstep.DateTime,
    #                     paper_lessstep.step_Description,
    #                     paper_lessstep.step_Name,
    #                     paper_lessstep.step_Upload,
    #                     paper_lessstep.template_biz,
    #                     paper_lessstep.qrCode_position,
    #                     paper_lessstep.status,
    #                     paper_lessstep.documentDetails,
    #                     paper_lessstep.urgent_type,
    #                     paper_lessstep.webhook,
    #                     paper_lessstep.condition_temp,
    #                     paper_lessstep.email_center,
    #                     paper_lessstep.formula_temp,
    #                     paper_lessstep.digit_sign,
    #                     paper_lessstep.page_sign_options,
    #                     paper_lessstep.options_page,
    #                     paper_lessstep.status_use,
    #                     paper_lessstep.time_expire,
    #                     paper_lessstep.importance_doc,
    #                     paper_lessstep.last_digit_sign,
    #                     paper_lessdocument_detail.documentJson)\
    #                     .join(paper_lessdocument_detail, paper_lessdocument_detail.documentType==paper_lessstep.documentDetails)\
    #                     .filter(paper_lessstep.status=='ACTIVE',paper_lessstep.template_biz.contains(self.taxId))\
    #                     .filter(paper_lessdocument_detail.documentStatus=="ACTIVE",paper_lessdocument_detail.biz_info!=None,paper_lessdocument_detail.biz_info!='',paper_lessdocument_detail.biz_info.contains(self.taxId))\
    #                     .order_by((paper_lessstep.documentDetails).asc())\
    #                     .offset(int(self.offset)).limit(int(self.limit))\
    #                     .all()

    #         elif self.username != None:
    #             print('userUSER')
    #             if self.offset == '' or self.limit == '':
    #                 query_temp = db.session.query(
    #                     paper_lessstep.step_Code,
    #                     paper_lessstep.step_Data,
    #                     paper_lessstep.step_Max,
    #                     paper_lessstep.username,
    #                     paper_lessstep.email,
    #                     paper_lessstep.DateTime,
    #                     paper_lessstep.step_Description,
    #                     paper_lessstep.step_Name,
    #                     paper_lessstep.step_Upload,
    #                     paper_lessstep.template_biz,
    #                     paper_lessstep.qrCode_position,
    #                     paper_lessstep.status,
    #                     paper_lessstep.documentDetails,
    #                     paper_lessstep.urgent_type,
    #                     paper_lessstep.webhook,
    #                     paper_lessstep.condition_temp,
    #                     paper_lessstep.email_center,
    #                     paper_lessstep.formula_temp,
    #                     paper_lessstep.digit_sign,
    #                     paper_lessstep.page_sign_options,
    #                     paper_lessstep.options_page,
    #                     paper_lessstep.status_use,
    #                     paper_lessstep.time_expire,
    #                     paper_lessstep.importance_doc,
    #                     paper_lessstep.last_digit_sign,
    #                     paper_lessdocument_detail.documentJson,
    #                     paper_lessdocument_detail.documentUser,
    #                     paper_lessdocument_detail.documentStatus,
    #                     paper_lessdocument_detail.documentType)\
    #                     .filter(paper_lessstep.documentDetails == paper_lessdocument_detail.documentType)\
    #                     .filter(paper_lessstep.username==self.username,paper_lessstep.status=="ACTIVE")\
    #                     .filter(or_(paper_lessstep.template_biz=='',paper_lessstep.template_biz==None))\
    #                     .filter(paper_lessdocument_detail.documentUser == self.username)\
    #                     .filter(paper_lessdocument_detail.documentStatus == "ACTIVE")\
    #                     .filter(or_(paper_lessdocument_detail.biz_info=='',paper_lessdocument_detail.biz_info==None))\
    #                     .order_by((paper_lessstep.sid).asc())\
    #                     .all()
    #             else:
    #                 query_temp = db.session.query(
    #                     paper_lessstep.step_Code,
    #                     paper_lessstep.step_Data,
    #                     paper_lessstep.step_Max,
    #                     paper_lessstep.username,
    #                     paper_lessstep.email,
    #                     paper_lessstep.DateTime,
    #                     paper_lessstep.step_Description,
    #                     paper_lessstep.step_Name,
    #                     paper_lessstep.step_Upload,
    #                     paper_lessstep.template_biz,
    #                     paper_lessstep.qrCode_position,
    #                     paper_lessstep.status,
    #                     paper_lessstep.documentDetails,
    #                     paper_lessstep.urgent_type,
    #                     paper_lessstep.webhook,
    #                     paper_lessstep.condition_temp,
    #                     paper_lessstep.email_center,
    #                     paper_lessstep.formula_temp,
    #                     paper_lessstep.digit_sign,
    #                     paper_lessstep.page_sign_options,
    #                     paper_lessstep.options_page,
    #                     paper_lessstep.status_use,
    #                     paper_lessstep.time_expire,
    #                     paper_lessstep.importance_doc,
    #                     paper_lessstep.last_digit_sign,
    #                     paper_lessdocument_detail.documentJson,
    #                     paper_lessdocument_detail.documentUser,
    #                     paper_lessdocument_detail.documentStatus)\
    #                     .join(paper_lessdocument_detail, paper_lessdocument_detail.documentType==paper_lessstep.documentDetails)\
    #                     .filter(paper_lessstep.username==self.username,paper_lessstep.status=="ACTIVE")\
    #                     .filter(or_(paper_lessstep.template_biz=='',paper_lessstep.template_biz==None))\
    #                     .filter(paper_lessdocument_detail.documentUser == self.username)\
    #                     .filter(paper_lessdocument_detail.documentStatus == "ACTIVE")\
    #                     .order_by((paper_lessstep.sid).asc())\
    #                     .offset(int(self.offset)).limit(int(self.limit))\
    #                     .all()
            
    #         print('len',len(query_temp))
            
    #         for n in query_temp:                
    #             tmp_asdict = n._asdict()
    #             # print('tmp_asdict',tmp_asdict['status_use'])
    #             # print(tmp_asdict['step_Code'])
    #             tmp_importance_doc = None
    #             list_time_expire = []
    #             last_digit_sign = False
    #             if tmp_asdict['importance_doc'] != None:
    #                 if tmp_asdict['importance_doc'] == '0':
    #                     tmp_importance_doc = 'สำคัญมาก'
    #                 elif tmp_asdict['importance_doc'] == '1':
    #                     tmp_importance_doc = 'สำคัญปานกลาง'
    #                 elif tmp_asdict['importance_doc'] == '2':
    #                     tmp_importance_doc = 'สำคัญปกติ'
    #             if tmp_asdict['time_expire'] != None:
    #                 hour = int(tmp_asdict['time_expire']) % 24
    #                 day = int(int(tmp_asdict['time_expire']) / 24)
    #                 list_time_expire = [day,hour] 
    #             else:
    #                 list_time_expire = None
    #             if tmp_asdict['last_digit_sign'] == None:
    #                 last_digit_sign = None
    #             else:
    #                 last_digit_sign = bool(tmp_asdict['last_digit_sign'])
    #             try:
    #                 tmp_options_page = eval(tmp_asdict['options_page'])
    #             except Exception as e:
    #                 tmp_options_page = {}
    #             try:
    #                 tmpformula_temp = eval(tmp_asdict['formula_temp'])
    #                 tmpformula_temp_string = tmp_asdict['formula_temp']
    #             except Exception as e:
    #                 tmpformula_temp = None
    #                 tmpformula_temp_string = tmp_asdict['formula_temp']
    #             if tmp_asdict['qrCode_position'] != None:
    #                 try:
    #                     tmp_qrCode_position = eval(tmp_asdict['qrCode_position'])
    #                 except Exception as ex:
    #                     return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล qrCode_position ให้เป็น Json ได้'}
    #             else:
    #                 tmp_qrCode_position = None
    #             if tmp_asdict['documentDetails'] != None:
    #                 tmp_document_typeJson = eval(tmp_asdict['documentJson'])
    #                 tmp_document_typeJson_string = tmp_asdict['documentJson']
    #             else:
    #                 jsondetailsDoc = {}
    #                 jsondetailsDoc['document_type'] = None
    #                 jsondetailsDoc['document_name'] = None
    #                 jsondetailsDoc['document_remark'] = None
    #                 tmp_document_typeJson = jsondetailsDoc
    #                 tmp_document_typeJson_string = str(jsondetailsDoc)
    #             tmp_urgent_type = 'M'
    #             tmp_urgent_string_th = 'ปกติ'
    #             tmp_urgent_string_en = 'MEDIUM'
    #             if tmp_asdict['urgent_type'] != None:
    #                 tmp_urgent_type = tmp_asdict['urgent_type']
    #                 if tmp_urgent_type == 'M':
    #                     tmp_urgent_string_th = 'ปกติ'
    #                     tmp_urgent_string_en = 'MEDIUM'
    #                 elif tmp_urgent_type == 'U':
    #                     tmp_urgent_string_th = 'ด่วน'
    #                     tmp_urgent_string_en = 'URGENT'
    #                 elif tmp_urgent_type == 'I':
    #                     tmp_urgent_string_th = 'ด่วนมาก'
    #                     tmp_urgent_string_en = 'IMMEDIATE'
    #             try:
    #                 data_step = eval(tmp_asdict['step_Data'])
    #             except Exception as ex:
    #                 return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล Step ให้เป็น Json ได้'}
    #             try:
    #                 step_Upload = eval(tmp_asdict['step_Upload'])
    #             except Exception as ex:
    #                 return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล step_Upload ให้เป็น Json ได้'}
    #             if tmp_asdict['step_Max'] == 1:
    #                 tmp_data_step = [data_step]
    #             else:
    #                 tmp_data_step = data_step
    #             try:
    #                 data_step = tmp_asdict['step_Data']
    #                 data_step = eval(data_step)
    #                 if tmp_asdict['step_Max'] != 1:
    #                     step_infomation = list(eval(tmp_asdict['step_Data']))
    #                 else:
    #                     step_infomation = [data_step]
    #                 tmp_sign_detail_list = []
    #                 muti_sign = False
    #                 for i in range(len(step_infomation)):
    #                     sign_json_info = {}
    #                     tmp_sign_list_info = []
    #                     step_ = step_infomation[i]
    #                     step_num = step_infomation[i]['step_num']
    #                     # print(type(step_infomation[i]))
    #                     if 'step_sign' in step_:
    #                         tmp_stepsign = step_['step_sign']
    #                         tmp_status_stepsign = tmp_stepsign['status']
    #                         if tmp_status_stepsign == True:
    #                             muti_sign = True
    #                             tmp_data_stepsign = tmp_stepsign['data']
    #                             for y in range(len(tmp_data_stepsign)):
    #                                 step_signning = tmp_data_stepsign[y]
    #                                 tmp_sign_list_info.append(step_signning)
    #                     for u in range(len(step_['step_detail'])):
    #                         step_2 = step_['step_detail'][u]
    #                         for zz in range(len(step_2['activity_data'])): 
    #                             if 'status' in step_2['activity_data'][zz]:
    #                                 sign_json_info = step_2['activity_data'][zz]
    #                                 tmp_sign_list_info.append(sign_json_info)
    #                     sign_json_info = {
    #                         'data':tmp_sign_list_info,
    #                         'step_num':step_num
    #                     }
    #                     tmp_sign_detail_list.append(sign_json_info)
    #                 # json_sky['sign_info'] = tmp_sign_detail_list
    #             except Exception as e:
    #                 exc_type, exc_obj, exc_tb = sys.exc_info()
    #                 fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
    #                 print(exc_type, fname, exc_tb.tb_lineno)
    #                 tmp_sign_detail_list = []
    #             # json_sky['multi_sign'] = muti_sign
                
    #             tmp_json = {
    #                 'stamp_all':tmp_asdict['page_sign_options'],
    #                 'step_Code':tmp_asdict['step_Code'],
    #                 'dateTime':tmp_asdict['DateTime'],
    #                 'dateTime_string':str(tmp_asdict['DateTime']).split('+')[0],
    #                 'condition_string':tmp_asdict['condition_temp'],
    #                 'step_Upload':json.loads(json.dumps(tmp_asdict['step_Upload'])),
    #                 'template_webhook':tmp_asdict['webhook'],
    #                 'email_center':tmp_asdict['email_center'],
    #                 'options_page_string':tmp_asdict['options_page'],
    #                 'options_page':tmp_options_page,
    #                 'formula_temp_string':tmpformula_temp_string,
    #                 'formula_temp':tmpformula_temp,
    #                 'digit_sign':bool(tmp_asdict['digit_sign']),
    #                 'username':tmp_asdict['username'],
    #                 'step_Max':int(tmp_asdict['step_Max']),
    #                 'step_Name':tmp_asdict['step_Name'],
    #                 'qrCode_position':tmp_qrCode_position,
    #                 'step_Description':tmp_asdict['step_Description'],
    #                 'document_details':tmp_document_typeJson,
    #                 'document_details_string':tmp_document_typeJson_string,
    #                 'email':tmp_asdict['email'],
    #                 'urgent_code':tmp_urgent_type,
    #                 'urgent_string_th':tmp_urgent_string_th,
    #                 'urgent_string_en':tmp_urgent_string_en,
    #                 'data_step':tmp_data_step,
    #                 'sign_info':tmp_sign_detail_list,
    #                 'multi_sign':muti_sign,
    #                 'status_use': tmp_asdict['status_use'],
    #                 'importance': tmp_importance_doc,
    #                 'time_expire': list_time_expire,
    #                 'last_digit_sign' : last_digit_sign,
    #             }
    #             tmp_arr_get.append(tmp_json)
    #         if len(tmp_arr_get) != 0:
    #             return {'result':'OK','messageText':tmp_arr_get,'status_Code':200}
    #         else:
    #             return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
    #     except Exception as ex:
    #         print(ex)
    #         exc_type, exc_obj, exc_tb = sys.exc_info()
    #         fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
    #         print(exc_type, fname, exc_tb.tb_lineno)
    #         return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล','messageER':str(ex)}
    #     finally:
    #         db.session.close()

    def select_get_templateandusername_new_biz_v2(self,username,template):
        self.template = template
        self.username = username
        try:
            arr_signpage = []
            arr_get = []
            for k in paper_lessstep.query.filter_by(step_Code=self.template,status='ACTIVE').order_by((paper_lessstep.sid).asc()):
                json_sky = {}
                tmp_muti_sign = False
                json_sky['status_use'] = k.status_use
                json_sky['stamp_all'] = k.page_sign_options
                json_sky['template_webhook'] = k.webhook
                json_sky['email_center'] = k.email_center
                json_sky['step_Code'] = k.step_Code
                json_sky['dateTime'] = k.DateTime
                json_sky['dateTime_string'] = str(k.DateTime).split('+')[0]
                json_sky['data_step'] = json.dumps(k.step_Data)
                json_sky['data_step'] = json.loads(json_sky['data_step'])
                json_sky['step_Upload'] = json.dumps(k.step_Upload)
                json_sky['step_Upload'] = json.loads(json_sky['step_Upload'])
                json_sky['step_Description'] = k.step_Description
                json_sky['condition_string'] = k.condition_temp
                json_sky['stamp_all'] = k.page_sign_options
                json_sky['options_page_string'] = str(k.options_page)
                json_sky['template_biz'] = str(k.template_biz)
                json_sky['status_use'] = str(k.status_use)
                json_sky['status_ref'] = (k.status_ref)
                try:
                    data_step = json_sky['data_step']
                    data_step = eval(data_step)
                    if k.step_Max != 1:
                        step_infomation = list(eval(k.step_Data))
                    else:
                        step_infomation = [data_step]
                    tmp_sign_detail_list = []
                    for i in range(len(step_infomation)):
                        sign_json_info = {}
                        tmp_sign_list_info = []
                        step_ = step_infomation[i]
                        step_num = step_infomation[i]['step_num']
                        if 'step_sign' in step_:
                            tmp_stepsign = step_['step_sign']
                            tmp_status_stepsign = tmp_stepsign['status']
                            if tmp_status_stepsign == True:
                                tmp_muti_sign = True
                                tmp_data_stepsign = tmp_stepsign['data']
                                for y in range(len(tmp_data_stepsign)):
                                    step_signning = tmp_data_stepsign[y]
                                    # print(step_signning)
                                    tmp_sign_list_info.append(step_signning)
                        # print(tmp_sign_list_info)
                        for u in range(len(step_['step_detail'])):
                            step_2 = step_['step_detail'][u]
                            for zz in range(len(step_2['activity_data'])): 
                                if 'status' in step_2['activity_data'][zz]:
                                    # print(step_2['activity_data'][zz])
                                    sign_json_info = step_2['activity_data'][zz]
                                    tmp_sign_list_info.append(sign_json_info)
                        sign_json_info = {
                            'data':tmp_sign_list_info,
                            'step_num':step_num
                        }
                        tmp_sign_detail_list.append(sign_json_info)
                        # print(tmp_sign_detail_list)
                    # print(tmp_sign_detail_list)
                    for n in range(len(tmp_sign_detail_list)):
                        tmp_data = tmp_sign_detail_list[n]
                        tmp_signdata = tmp_data['data']
                        for z in range(len(tmp_signdata)):
                            tmp_sign_page = tmp_signdata[z]
                            if 'sign_page' in tmp_sign_page:
                                # print()
                                arr_signpage.append(int(tmp_sign_page['sign_page']))
                        # print(tmp_data)
                    json_sky['page_require'] = max(arr_signpage)
                    json_sky['sign_info'] = (tmp_sign_detail_list)
                except Exception as e:
                    exc_type, exc_obj, exc_tb = sys.exc_info()
                    fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                    print(exc_type, fname, exc_tb.tb_lineno)
                    json_sky['sign_info'] = []
                json_sky['multi_sign'] = tmp_muti_sign
                try:
                    json_sky['options_page'] = eval(k.options_page)
                except Exception as e:
                    json_sky['options_page'] = {}
                try:
                    json_sky['formula_temp'] = eval(k.formula_temp)
                    json_sky['formula_temp_string'] = k.formula_temp
                except Exception as e:
                    json_sky['formula_temp'] = None
                    json_sky['formula_temp_string'] = None
                json_sky['digit_sign'] = bool(k.digit_sign)
                if k.documentDetails != None:
                    if str(k.documentDetails).replace(' ','') != '':
                        if k.template_biz == '':
                            result_detailDoc = paper_lessdocument_detail.query.filter_by(documentUser=self.username,documentStatus="ACTIVE",documentType=k.documentDetails).first()
                        else:
                            tmpeval = eval(k.template_biz)
                            tmp_id_card_num = tmpeval['id_card_num']
                            result_detailDoc = paper_lessdocument_detail.query.filter(paper_lessdocument_detail.biz_info.contains(tmp_id_card_num),paper_lessdocument_detail.documentStatus=="ACTIVE",paper_lessdocument_detail.documentType==k.documentDetails).first()
                        if result_detailDoc != None:
                            json_sky['document_details'] = eval(result_detailDoc.documentJson)
                            json_sky['document_details_string'] = result_detailDoc.documentJson
                        else:
                            jsondetailsDoc = {}
                            jsondetailsDoc['document_type'] = None
                            jsondetailsDoc['document_name'] = None
                            jsondetailsDoc['document_remark'] = None
                            json_sky['document_details'] = jsondetailsDoc
                            json_sky['document_details_string'] = str(jsondetailsDoc)
                    else:
                        jsondetailsDoc = {}
                        jsondetailsDoc['document_type'] = None
                        jsondetailsDoc['document_name'] = None
                        jsondetailsDoc['document_remark'] = None
                        json_sky['document_details'] = jsondetailsDoc
                        json_sky['document_details_string'] = str(jsondetailsDoc)
                else:
                    jsondetailsDoc = {}
                    jsondetailsDoc['document_type'] = None
                    jsondetailsDoc['document_name'] = None
                    jsondetailsDoc['document_remark'] = None
                    json_sky['document_details'] = jsondetailsDoc
                    json_sky['document_details_string'] = str(jsondetailsDoc)
                try:
                    json_sky['template_String'] = eval(k.template_images)
                except Exception as ex:
                    return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล template_String ให้เป็น Json ได้'}
                try:
                    data_step = eval(json_sky['data_step'])
                except Exception as ex:
                    return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล Step ให้เป็น Json ได้'}
                try:
                    step_Upload = eval(json_sky['step_Upload'])
                except Exception as ex:
                    return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล step_Upload ให้เป็น Json ได้'}
                json_sky['username'] = k.username
                json_sky['step_Max'] = k.step_Max
                json_sky['step_Name'] = k.step_Name
                if k.urgent_type != None:
                    json_sky['urgent_code'] = k.urgent_type
                    if k.urgent_type == 'M':
                        json_sky['urgent_string_th'] = 'ปกติ'
                        json_sky['urgent_string_en'] = 'MEDIUM'
                    elif k.urgent_type == 'U':
                        json_sky['urgent_string_th'] = 'ด่วน'
                        json_sky['urgent_string_en'] = 'URGENT'
                    elif k.urgent_type == 'I':
                        json_sky['urgent_string_th'] = 'ด่วนมาก'
                        json_sky['urgent_string_en'] = 'IMMEDIATE'
                else:
                    json_sky['urgent_code'] = None
                    json_sky['urgent_string_th'] = None
                    json_sky['urgent_string_en'] = None
                if k.qrCode_position != None:
                    try:
                        json_sky['qrCode_position'] = eval(k.qrCode_position)
                    except Exception as ex:
                        return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล qrCode_position ให้เป็น Json ได้'}
                else:
                    json_sky['qrCode_position'] = None
                json_sky['email'] = k.email
                if json_sky['step_Max'] == 1:
                    json_sky['data_step'] = [data_step]
                else:
                    json_sky['data_step'] = data_step
                json_sky['step_Upload'] = step_Upload
                tmp_importance_doc = None
                list_time_expire = []
                last_digit_sign = False
                if k.importance_doc != None:
                    if k.importance_doc == '0':
                        tmp_importance_doc = 'สำคัญมาก'
                    elif k.importance_doc == '1':
                        tmp_importance_doc = 'สำคัญปานกลาง'
                    elif k.importance_doc == '2':
                        tmp_importance_doc = 'สำคัญปกติ'
                    elif k.importance_doc == '3':
                        tmp_importance_doc = 'ไม่ได้กำหนดความสำคัญ'
                if k.time_expire != None:
                    hour = int(k.time_expire) % 24
                    day = int(int(k.time_expire) / 24)
                    list_time_expire = [day,hour] 
                else:
                    list_time_expire = None
                if k.last_digit_sign == None:
                    last_digit_sign = None
                else:
                    last_digit_sign = bool(k.last_digit_sign)
                json_sky['importance'] = tmp_importance_doc
                json_sky['time_expire'] = list_time_expire
                json_sky['last_digit_sign'] = last_digit_sign
                arr_get.append(json_sky)
            if len(arr_get) != 0:
                return {'result':'OK','messageText':arr_get,'status_Code':200}
            else:
                return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}

    # def select_get_templateandusername_new_biz_v2(self,username,template):
    #     self.template = template
    #     self.username = username
    #     try:
    #         arr_signpage = []
    #         arr_get = []
    #         for k in paper_lessstep.query.filter_by(step_Code=self.template,status='ACTIVE').order_by((paper_lessstep.sid).asc()):
    #             json_sky = {}
    #             tmp_muti_sign = False
    #             json_sky['status_use'] = k.status_use
    #             json_sky['stamp_all'] = k.page_sign_options
    #             json_sky['template_webhook'] = k.webhook
    #             json_sky['email_center'] = k.email_center
    #             json_sky['step_Code'] = k.step_Code
    #             json_sky['dateTime'] = k.DateTime
    #             json_sky['dateTime_string'] = str(k.DateTime).split('+')[0]
    #             json_sky['data_step'] = json.dumps(k.step_Data)
    #             json_sky['data_step'] = json.loads(json_sky['data_step'])
    #             json_sky['step_Upload'] = json.dumps(k.step_Upload)
    #             json_sky['step_Upload'] = json.loads(json_sky['step_Upload'])
    #             json_sky['step_Description'] = k.step_Description
    #             json_sky['condition_string'] = k.condition_temp
    #             json_sky['stamp_all'] = k.page_sign_options
    #             json_sky['options_page_string'] = str(k.options_page)
    #             json_sky['template_biz'] = str(k.template_biz)
    #             json_sky['status_use'] = str(k.status_use)
    #             try:
    #                 data_step = json_sky['data_step']
    #                 data_step = eval(data_step)
    #                 if k.step_Max != 1:
    #                     step_infomation = list(eval(k.step_Data))
    #                 else:
    #                     step_infomation = [data_step]
    #                 tmp_sign_detail_list = []
    #                 for i in range(len(step_infomation)):
    #                     sign_json_info = {}
    #                     tmp_sign_list_info = []
    #                     step_ = step_infomation[i]
    #                     step_num = step_infomation[i]['step_num']
    #                     if 'step_sign' in step_:
    #                         tmp_stepsign = step_['step_sign']
    #                         tmp_status_stepsign = tmp_stepsign['status']
    #                         if tmp_status_stepsign == True:
    #                             tmp_muti_sign = True
    #                             tmp_data_stepsign = tmp_stepsign['data']
    #                             for y in range(len(tmp_data_stepsign)):
    #                                 step_signning = tmp_data_stepsign[y]
    #                                 # print(step_signning)
    #                                 tmp_sign_list_info.append(step_signning)
    #                     # print(tmp_sign_list_info)
    #                     for u in range(len(step_['step_detail'])):
    #                         step_2 = step_['step_detail'][u]
    #                         for zz in range(len(step_2['activity_data'])): 
    #                             if 'status' in step_2['activity_data'][zz]:
    #                                 # print(step_2['activity_data'][zz])
    #                                 sign_json_info = step_2['activity_data'][zz]
    #                                 tmp_sign_list_info.append(sign_json_info)
    #                     sign_json_info = {
    #                         'data':tmp_sign_list_info,
    #                         'step_num':step_num
    #                     }
    #                     tmp_sign_detail_list.append(sign_json_info)
    #                     # print(tmp_sign_detail_list)
    #                 # print(tmp_sign_detail_list)
    #                 for n in range(len(tmp_sign_detail_list)):
    #                     tmp_data = tmp_sign_detail_list[n]
    #                     tmp_signdata = tmp_data['data']
    #                     for z in range(len(tmp_signdata)):
    #                         tmp_sign_page = tmp_signdata[z]
    #                         if 'sign_page' in tmp_sign_page:
    #                             # print()
    #                             arr_signpage.append(int(tmp_sign_page['sign_page']))
    #                     # print(tmp_data)
    #                 json_sky['page_require'] = max(arr_signpage)
    #                 json_sky['sign_info'] = (tmp_sign_detail_list)
    #             except Exception as e:
    #                 exc_type, exc_obj, exc_tb = sys.exc_info()
    #                 fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
    #                 print(exc_type, fname, exc_tb.tb_lineno)
    #                 json_sky['sign_info'] = []
    #             json_sky['multi_sign'] = tmp_muti_sign
    #             try:
    #                 json_sky['options_page'] = eval(k.options_page)
    #             except Exception as e:
    #                 json_sky['options_page'] = {}
    #             try:
    #                 json_sky['formula_temp'] = eval(k.formula_temp)
    #                 json_sky['formula_temp_string'] = k.formula_temp
    #             except Exception as e:
    #                 json_sky['formula_temp'] = None
    #                 json_sky['formula_temp_string'] = None
    #             json_sky['digit_sign'] = bool(k.digit_sign)
    #             if k.documentDetails != None:
    #                 if str(k.documentDetails).replace(' ','') != '':
    #                     if k.template_biz == '':
    #                         result_detailDoc = paper_lessdocument_detail.query.filter_by(documentUser=self.username,documentStatus="ACTIVE",documentType=k.documentDetails).first()
    #                     else:
    #                         tmpeval = eval(k.template_biz)
    #                         tmp_id_card_num = tmpeval['id_card_num']
    #                         result_detailDoc = paper_lessdocument_detail.query.filter(paper_lessdocument_detail.biz_info.contains(tmp_id_card_num),paper_lessdocument_detail.documentStatus=="ACTIVE",paper_lessdocument_detail.documentType==k.documentDetails).first()
    #                     if result_detailDoc != None:
    #                         json_sky['document_details'] = eval(result_detailDoc.documentJson)
    #                         json_sky['document_details_string'] = result_detailDoc.documentJson
    #                     else:
    #                         jsondetailsDoc = {}
    #                         jsondetailsDoc['document_type'] = None
    #                         jsondetailsDoc['document_name'] = None
    #                         jsondetailsDoc['document_remark'] = None
    #                         json_sky['document_details'] = jsondetailsDoc
    #                         json_sky['document_details_string'] = str(jsondetailsDoc)
    #                 else:
    #                     jsondetailsDoc = {}
    #                     jsondetailsDoc['document_type'] = None
    #                     jsondetailsDoc['document_name'] = None
    #                     jsondetailsDoc['document_remark'] = None
    #                     json_sky['document_details'] = jsondetailsDoc
    #                     json_sky['document_details_string'] = str(jsondetailsDoc)
    #             else:
    #                 jsondetailsDoc = {}
    #                 jsondetailsDoc['document_type'] = None
    #                 jsondetailsDoc['document_name'] = None
    #                 jsondetailsDoc['document_remark'] = None
    #                 json_sky['document_details'] = jsondetailsDoc
    #                 json_sky['document_details_string'] = str(jsondetailsDoc)
    #             try:
    #                 json_sky['template_String'] = eval(k.template_images)
    #             except Exception as ex:
    #                 return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล template_String ให้เป็น Json ได้'}
    #             try:
    #                 data_step = eval(json_sky['data_step'])
    #             except Exception as ex:
    #                 return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล Step ให้เป็น Json ได้'}
    #             try:
    #                 step_Upload = eval(json_sky['step_Upload'])
    #             except Exception as ex:
    #                 return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล step_Upload ให้เป็น Json ได้'}
    #             json_sky['username'] = k.username
    #             json_sky['step_Max'] = k.step_Max
    #             json_sky['step_Name'] = k.step_Name
    #             if k.urgent_type != None:
    #                 json_sky['urgent_code'] = k.urgent_type
    #                 if k.urgent_type == 'M':
    #                     json_sky['urgent_string_th'] = 'ปกติ'
    #                     json_sky['urgent_string_en'] = 'MEDIUM'
    #                 elif k.urgent_type == 'U':
    #                     json_sky['urgent_string_th'] = 'ด่วน'
    #                     json_sky['urgent_string_en'] = 'URGENT'
    #                 elif k.urgent_type == 'I':
    #                     json_sky['urgent_string_th'] = 'ด่วนมาก'
    #                     json_sky['urgent_string_en'] = 'IMMEDIATE'
    #             else:
    #                 json_sky['urgent_code'] = None
    #                 json_sky['urgent_string_th'] = None
    #                 json_sky['urgent_string_en'] = None
    #             if k.qrCode_position != None:
    #                 try:
    #                     json_sky['qrCode_position'] = eval(k.qrCode_position)
    #                 except Exception as ex:
    #                     return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล qrCode_position ให้เป็น Json ได้'}
    #             else:
    #                 json_sky['qrCode_position'] = None
    #             json_sky['email'] = k.email
    #             if json_sky['step_Max'] == 1:
    #                 json_sky['data_step'] = [data_step]
    #             else:
    #                 json_sky['data_step'] = data_step
    #             json_sky['step_Upload'] = step_Upload
    #             tmp_importance_doc = None
    #             list_time_expire = []
    #             last_digit_sign = False
    #             if k.importance_doc != None:
    #                 if k.importance_doc == '0':
    #                     tmp_importance_doc = 'สำคัญมาก'
    #                 elif k.importance_doc == '1':
    #                     tmp_importance_doc = 'สำคัญปานกลาง'
    #                 elif k.importance_doc == '2':
    #                     tmp_importance_doc = 'สำคัญปกติ'
    #                 elif k.importance_doc == '3':
    #                     tmp_importance_doc = 'ไม่ได้กำหนดความสำคัญ'
    #             if k.time_expire != None:
    #                 hour = int(k.time_expire) % 24
    #                 day = int(int(k.time_expire) / 24)
    #                 list_time_expire = [day,hour] 
    #             else:
    #                 list_time_expire = None
    #             if k.last_digit_sign == None:
    #                 last_digit_sign = None
    #             else:
    #                 last_digit_sign = bool(k.last_digit_sign)
    #             json_sky['importance'] = tmp_importance_doc
    #             json_sky['time_expire'] = list_time_expire
    #             json_sky['last_digit_sign'] = last_digit_sign
    #             arr_get.append(json_sky)
    #         if len(arr_get) != 0:
    #             return {'result':'OK','messageText':arr_get,'status_Code':200}
    #         else:
    #             return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
    #     except Exception as ex:
    #         exc_type, exc_obj, exc_tb = sys.exc_info()
    #         fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
    #         print(exc_type, fname, exc_tb.tb_lineno)
    #         return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}

    def select_report_avg_v2(self,doc_type, text_id, start_datetime, end_datetime, row_limit):    
        try:
            self.doc_type = doc_type
            self.text_id = text_id
            self.start_datetime = start_datetime
            self.end_datetime = end_datetime
            self.row_limit = row_limit
            txtId = "%{}%".format(self.text_id)
            queryString = ""     
            if self.doc_type != "" :
                queryString +=  "view_document.documentType == '" + self.doc_type +"'"
            if self.text_id != "":
                if queryString == "":
                    queryString += 'view_document.biz_info.like("' + txtId + '")'
                else:
                    queryString += ',view_document.biz_info.like("' + txtId + '")'
            else:
                if queryString == "":
                    queryString += 'view_document.biz_info == "None"'
                else:
                    queryString += ',view_document.biz_info == "None"'
            if self.start_datetime != "" :
                date_start_tmp = datetime.datetime.fromtimestamp(int(self.start_datetime))
                if queryString == "":
                    queryString += 'view_document.send_time >= "' + str(date_start_tmp) +'"'
                else:
                    queryString += ',view_document.send_time >= "' + str(date_start_tmp) + '"'         
            if self.end_datetime != "" :
                date_end_tmp = datetime.datetime.fromtimestamp(int(self.end_datetime))
                if queryString == "":
                    queryString += 'view_document.send_time <= "' + str(date_end_tmp) + '"'
                else:
                    queryString += ',view_document.send_time <= "' + str(date_end_tmp) + '"'         
            queryString = 'view_document.query.filter(' + queryString + ').limit('+ str(self.row_limit) +').all()'
            # print(queryString)
            result = eval(queryString)   
            # print('result',result)       
            db.session.close()  
            delta_list, mail_list = [], []
            for x in result:            
                send_time = x.send_time
                send_time = send_time.strftime('%Y-%m-%d %H:%M:%S')
                date_create = datetime.datetime.strptime(send_time, '%Y-%m-%d %H:%M:%S')                    
                dataJson = eval(x.data_json)            
                tmp_json = []
                if 'step_num' in dataJson:                
                    tmp_json.append(dataJson)
                else:
                    tmp_json = dataJson
                for dj in tmp_json:                
                    for dt in dj['step_detail']: 
                        status = dt['activity_status'][0]
                        if status == "Approve" or status == "Complete" or status == "Reject" :    
                            one_mail = dt['one_email']        
                            dates = dt['activity_time'][0]
                            date_approve = datetime.datetime.strptime(dates, '%Y-%m-%d %H:%M:%S')             
                            date_result = date_approve - date_create
                            date_create = date_approve 
                            mail_list.append(one_mail)
                            delta_list.append(date_result)                          
            data_result = []
            dict_ = Counter(mail_list)
            print(dict_)
            for x,y in dict_.items():
                list_data, data_dict = [], {}
                for i in range(len(mail_list)):
                    if mail_list[i] == x:
                        list_data.append(delta_list[i])       
                avg_time = sum(list_data, timedelta()) / len(list_data)              
                max_time = max(list_data)
                min_time = min(list_data)   
                sum_time = sum(list_data, timedelta())                         
                avg_time = avg_time.total_seconds()    
                max_time = max_time.total_seconds() 
                min_time = min_time.total_seconds() 
                sum_time = sum_time.total_seconds() 
                list_time = [avg_time,max_time,min_time,sum_time]
                for i in range(len(list_time)):     
                    timing_1 = convert_hr_min_sec_v1(int(list_time[i]))
                    string_timing = ''
                    for yy in range(len(timing_1)):
                        if timing_1[yy] > 0:
                            if yy == 0:
                                type_date = " วัน "
                            elif yy == 1:
                                type_date = " ชั่วโมง "
                            elif yy == 2:
                                type_date = " นาที "
                            elif yy == 3:
                                type_date = " วินาที "
                            string_timing += str(timing_1[yy]) + type_date                      
                    if i == 0:
                        data_dict['time_average'] = string_timing
                    elif i == 1:
                        data_dict['time_max'] = string_timing
                    elif i == 2:
                        data_dict['time_min'] = string_timing
                    elif i == 3:
                        data_dict['time_sum'] = string_timing                        
                data_dict['onemail'] = x
                name = fine_name_surename(x)
                data_dict['name'] = name
                data_dict['count_approve'] = len(list_data)
                data_result.append(data_dict)       
            return {'result':'OK','messageText': data_result,'status_Code':200,'messageER':None}
        except Exception as ex:
            print(ex)
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':None,'status_Code':200,'messageER':str(ex)}


    def select_docType(self,emailUser):
        self.emailUser = emailUser
        list_doctype = []
        list_json = []
        try:
            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdocumenttrash)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .join(paper_lessdocumenttrash, paper_lessdocumenttrash.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lessdocumenttrash.email_list.contains(self.emailUser))\
                .order_by(desc(paper_lesssender.send_time))\
                .all()
            for u in range(len(query_temp)):
                for z in range(len(query_temp[u])):
                    if z == 1 :
                        tmp_dict_json = query_temp[u][z].__dict__
                        documentJson = tmp_dict_json['documentJson']
                        documentJson_eval = eval(str(documentJson))
                        document_name = documentJson_eval['document_name']
                        if document_name not in list_doctype:
                            list_doctype.append(document_name)
                            list_json.append(documentJson_eval)
            return {'result':'OK','messageText':list_json}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

    def select_trash_recipient_count(self,emailUser,limit,offset,type_,key):
        self.emailUser = emailUser
        self.type_ = type_
        self.key = key
        if limit != '':
            self.limit = int(limit)
        else:
            self.limit = ''
        if offset != '':
            self.offset = int(offset)
        else:
            self.offset = ''
        sid_list = []
        sid_list_email = []
        json_Data = {}
        list_arr = []
        list_json = []
        query_temp = None
        try:
            tmp_list = []             
            count_rowDocument = 0
            count_rowDocument_StatusActive = 0
            count_rowDocument_StatusReject = 0
            count_rowDocument_StatusCancel = 0
            statusFile_count_approve = 0
            statusFile_count_pendding = 0
            statusFile_count_reject = 0
            statusFile_count_wait = 0
            list_temp_query = []
            tmp_sid_code_list = []
            arr_gruop = []
            arr_group_sid = []
            tmp_arr_sid = []
            tmp_group_id = None
            json_Data = {}
            str_time = (time.time())
            if self.type_ == 'view':
                if self.limit != '' and self.offset != '':
                    query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdocumenttrash)\
                        .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                        .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                        .join(paper_lessdocumenttrash, paper_lessdocumenttrash.sid==paper_lesssender.step_data_sid)\
                        .filter(paper_lessdocumenttrash.email_list.contains(self.emailUser))\
                        .order_by(desc(paper_lesssender.send_time))\
                        .limit(self.limit)\
                        .offset(self.offset)\
                        .count()
                else:
                    query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdocumenttrash)\
                        .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                        .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                        .join(paper_lessdocumenttrash, paper_lessdocumenttrash.sid==paper_lesssender.step_data_sid)\
                        .filter(paper_lessdocumenttrash.email_list.contains(self.emailUser))\
                        .order_by(desc(paper_lesssender.send_time))\
                        .count()
            elif self.type_ == 'search_doctype':
                key2 = '%' + str(self.key) + '%'
                if self.limit != '' and self.offset != '':
                    query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdocumenttrash)\
                        .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                        .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                        .join(paper_lessdocumenttrash, paper_lessdocumenttrash.sid==paper_lesssender.step_data_sid)\
                        .filter(paper_lessdocumenttrash.email_list.contains(self.emailUser))\
                        .filter(or_(paper_lessdocument.documentType == self.key,paper_lessdocument.documentJson.like(key2)))\
                        .order_by(desc(paper_lesssender.send_time))\
                        .limit(self.limit)\
                        .offset(self.offset)\
                        .count()
                else:
                    query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdocumenttrash)\
                        .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                        .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                        .join(paper_lessdocumenttrash, paper_lessdocumenttrash.sid==paper_lesssender.step_data_sid)\
                        .filter(paper_lessdocumenttrash.email_list.contains(self.emailUser))\
                        .filter(or_(paper_lessdocument.documentType == self.key,paper_lessdocument.documentJson.like(key2)))\
                        .order_by(desc(paper_lesssender.send_time))\
                        .count()
            elif self.type_ == 'search_document':
                key2 = '%' + str(self.key) + '%'
                mail = find_email(self.key)
                endTime = ''
                ch,startTime = checkDatetime(self.key)
                # print('ch',startTime)
                if self.limit != '' and self.offset != '':
                    if ch == True:
                        endTime = startTime.replace(hour=23, minute=59, second=59, microsecond=0)
                        # print('endTime',endTime)
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdocumenttrash)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .join(paper_lessdocumenttrash, paper_lessdocumenttrash.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lessdocumenttrash.email_list.contains(self.emailUser))\
                            .filter(paper_lessdocumenttrash.datetime <= endTime)\
                            .filter(paper_lessdocumenttrash.datetime >= startTime)\
                            .order_by(desc(paper_lesssender.send_time))\
                            .limit(self.limit)\
                            .offset(self.offset)\
                            .count()
                    else:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdocumenttrash)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .join(paper_lessdocumenttrash, paper_lessdocumenttrash.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lessdocumenttrash.email_list.contains(self.emailUser))\
                            .filter(or_(paper_lessdocumenttrash.email_update.ilike(key2),paper_lessdocumenttrash.email_update.ilike(mail)\
                            ,paper_lesssender.sender_name.ilike(key2),paper_lesssender.doc_id.ilike(key2),paper_lessdocument.documentJson.ilike(key2)))\
                            .order_by(desc(paper_lesssender.send_time))\
                            .limit(self.limit)\
                            .offset(self.offset)\
                            .count()
                else:
                    if ch == True:
                        endTime = startTime.replace(hour=23, minute=59, second=59, microsecond=0)
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdocumenttrash)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .join(paper_lessdocumenttrash, paper_lessdocumenttrash.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lessdocumenttrash.email_list.contains(self.emailUser))\
                            .filter(paper_lessdocumenttrash.datetime <= endTime)\
                            .filter(paper_lessdocumenttrash.datetime >= startTime)\
                            .order_by(desc(paper_lesssender.send_time))\
                            .count()
                    else:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdocumenttrash)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .join(paper_lessdocumenttrash, paper_lessdocumenttrash.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lessdocumenttrash.email_list.contains(self.emailUser))\
                            .filter(or_(paper_lessdocumenttrash.email_update.ilike(key2),paper_lessdocumenttrash.email_update.ilike(mail)\
                            ,paper_lesssender.sender_name.ilike(key2),paper_lesssender.doc_id.ilike(key2),paper_lessdocument.documentJson.ilike(key2)))\
                            .order_by(desc(paper_lesssender.send_time))\
                            .count()           
          

            end_time = (time.time())
            print(end_time -str_time)
            tmp = {}
            tmp['sum_doc_trash'] = query_temp
            list_arr.append(tmp)
            return {'result':'OK','messageText':list_arr}
            
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

    def select_trash_recipient(self,emailUser,limit,offset,type_,key):
        self.emailUser = emailUser
        self.type_ = type_
        self.key = key
        if limit != '':
            self.limit = int(limit)
        else:
            self.limit = ''
        if offset != '':
            self.offset = int(offset)
        else:
            self.offset = ''
        sid_list = []
        sid_list_email = []
        json_Data = {}
        list_arr = []
        list_json = []
        query_temp = None
        try:
            tmp_list = []             
            count_rowDocument = 0
            count_rowDocument_StatusActive = 0
            count_rowDocument_StatusReject = 0
            count_rowDocument_StatusCancel = 0
            statusFile_count_approve = 0
            statusFile_count_pendding = 0
            statusFile_count_reject = 0
            statusFile_count_wait = 0
            list_temp_query = []
            tmp_sid_code_list = []
            arr_gruop = []
            arr_group_sid = []
            tmp_arr_sid = []
            tmp_group_id = None
            json_Data = {}
            str_time = (time.time())
            if self.type_ == 'view':
                if self.limit != '' and self.offset != '':
                    query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdocumenttrash)\
                        .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                        .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                        .join(paper_lessdocumenttrash, paper_lessdocumenttrash.sid==paper_lesssender.step_data_sid)\
                        .filter(paper_lessdocumenttrash.email_list.contains(self.emailUser))\
                        .order_by(desc(paper_lesssender.send_time))\
                        .limit(self.limit)\
                        .offset(self.offset)\
                        .all()
                else:
                    query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdocumenttrash)\
                        .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                        .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                        .join(paper_lessdocumenttrash, paper_lessdocumenttrash.sid==paper_lesssender.step_data_sid)\
                        .filter(paper_lessdocumenttrash.email_list.contains(self.emailUser))\
                        .order_by(desc(paper_lesssender.send_time))\
                        .all()
            elif self.type_ == 'search_doctype':
                key2 = '%' + str(self.key) + '%'
                if self.limit != '' and self.offset != '':
                    query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdocumenttrash)\
                        .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                        .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                        .join(paper_lessdocumenttrash, paper_lessdocumenttrash.sid==paper_lesssender.step_data_sid)\
                        .filter(paper_lessdocumenttrash.email_list.contains(self.emailUser))\
                        .filter(or_(paper_lessdocument.documentType == self.key,paper_lessdocument.documentJson.like(key2)))\
                        .order_by(desc(paper_lesssender.send_time))\
                        .limit(self.limit)\
                        .offset(self.offset)\
                        .all()
                else:
                    query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdocumenttrash)\
                        .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                        .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                        .join(paper_lessdocumenttrash, paper_lessdocumenttrash.sid==paper_lesssender.step_data_sid)\
                        .filter(paper_lessdocumenttrash.email_list.contains(self.emailUser))\
                        .filter(or_(paper_lessdocument.documentType == self.key,paper_lessdocument.documentJson.like(key2)))\
                        .order_by(desc(paper_lesssender.send_time))\
                        .all()
            elif self.type_ == 'search_document':
                key2 = '%' + str(self.key) + '%'
                mail = find_email(self.key)
                endTime = ''
                ch,startTime = checkDatetime(self.key)
                # print('ch',startTime)
                if self.limit != '' and self.offset != '':
                    if ch == True:
                        endTime = startTime.replace(hour=23, minute=59, second=59, microsecond=0)
                        # print('endTime',endTime)
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdocumenttrash)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .join(paper_lessdocumenttrash, paper_lessdocumenttrash.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lessdocumenttrash.email_list.contains(self.emailUser))\
                            .filter(paper_lessdocumenttrash.datetime <= endTime)\
                            .filter(paper_lessdocumenttrash.datetime >= startTime)\
                            .order_by(desc(paper_lesssender.send_time))\
                            .limit(self.limit)\
                            .offset(self.offset)\
                            .all()
                    else:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdocumenttrash)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .join(paper_lessdocumenttrash, paper_lessdocumenttrash.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lessdocumenttrash.email_list.contains(self.emailUser))\
                            .filter(or_(paper_lessdocumenttrash.email_update.ilike(key2),paper_lessdocumenttrash.email_update.ilike(mail)\
                            ,paper_lesssender.sender_name.ilike(key2),paper_lesssender.doc_id.ilike(key2),paper_lessdocument.documentJson.ilike(key2)))\
                            .order_by(desc(paper_lesssender.send_time))\
                            .limit(self.limit)\
                            .offset(self.offset)\
                            .all()
                else:
                    if ch == True:
                        endTime = startTime.replace(hour=23, minute=59, second=59, microsecond=0)
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdocumenttrash)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .join(paper_lessdocumenttrash, paper_lessdocumenttrash.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lessdocumenttrash.email_list.contains(self.emailUser))\
                            .filter(paper_lessdocumenttrash.datetime <= endTime)\
                            .filter(paper_lessdocumenttrash.datetime >= startTime)\
                            .order_by(desc(paper_lesssender.send_time))\
                            .all()
                    else:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdocumenttrash)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .join(paper_lessdocumenttrash, paper_lessdocumenttrash.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lessdocumenttrash.email_list.contains(self.emailUser))\
                            .filter(or_(paper_lessdocumenttrash.email_update.ilike(key2),paper_lessdocumenttrash.email_update.ilike(mail)\
                            ,paper_lesssender.sender_name.ilike(key2),paper_lesssender.doc_id.ilike(key2),paper_lessdocument.documentJson.ilike(key2)))\
                            .order_by(desc(paper_lesssender.send_time))\
                            .all()
           
            end_time = (time.time())
            arr = []
            for u in range(len(query_temp)):
                arr_email_document = []
                tmp_req_email = []
                email_step_sum_w = []
                json_arr = []
                email_update = None
                email_update_name = None
                date_time = None
                date_time_str = None
                email_list = None
                
                for z in range(len(query_temp[u])):
                    if z == 0:
                        tmp_dict_json = query_temp[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state']) 
                        tmp_sicode = tmp_dict_json['step_data_sid']
                        tmp_sid_code_list.append(tmp_sicode)
                        tmp_send_time = tmp_dict_json['send_time']
                        tmp_document_id = tmp_dict_json['doc_id']
                        tmp_tracking_id = tmp_dict_json['tracking_id']
                        tmp_sender_name = tmp_dict_json['sender_name']
                        tmp_sender_email = tmp_dict_json['sender_email']
                        tmp_file_name = tmp_dict_json['file_name']
                        tmp_groupid = tmp_dict_json['group_id']
                        email_step_sum = tmp_dict_json['recipient_email']
                        if email_step_sum != None:
                            email_step_sum = eval(email_step_sum)
                        # print(email_step_sum)
                        tmpstatus_detail = tmp_dict_json['status_details']
                        tmpdocument_status = tmp_dict_json['document_status']
                        tmpstepnow = tmp_dict_json['stepnow']
                        status_groupid = False
                        if tmp_groupid != None:
                            tmp_groupid = eval(tmp_groupid)
                            if len(tmp_groupid) != 0:
                                status_groupid = True
                        if tmpstepnow != None:
                            tmpstepnow = int(tmpstepnow)
                        tmpstepmax = tmp_dict_json['stepmax']
                        if tmpstepmax != None:
                            tmpstepmax = int(tmpstepmax)
                        if tmpstatus_detail != None:
                            tmpstatus_detail = eval(tmpstatus_detail)                            
                            for z in range(len(tmpstatus_detail)):
                                email_step_sum_w.append(tmpstatus_detail[z]['email'])

                            if tmpdocument_status == 'N':
                                for x in range(len(tmpstatus_detail)):
                                    # print(tmp_sicode)
                                    # print(tmpstatus_detail[x])
                                    # email_step_sum_w.append(tmpstatus_detail[x]['email'])
                                    if self.emailUser not in arr_email_document:
                                        if self.emailUser in tmpstatus_detail[x]['email']:
                                            if tmpstatus_detail[x]['step_status_code'] == 'W':
                                                arr_email_document.append(self.emailUser)
                                                tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                                                break
                                            else:
                                                tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                        # print(email_step_sum_w)
                        if tmpdocument_status == 'Z':
                            res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                        elif tmpdocument_status == 'W':
                            res_status_file_string = 'รอคุณอนุมัติ'
                        elif tmpdocument_status == 'N':
                            res_status_file_string = 'กำลังดำเนินการ'
                        elif tmpdocument_status == 'R':
                            res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                        else:
                            res_status_file_string = ''
                                            # else:

                        # print(tmpstatus_detail)
                    if z == 1:
                        tmp_document_type = None
                        tmp_dict_json = query_temp[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state'])
                        tmp_sign_page_options = tmp_dict_json['sign_page_options']
                        tmp_document_type = tmp_dict_json['documentType']
                        tmp_options_page = []
                        if tmp_dict_json['options_page'] != None:
                            if tmp_dict_json['options_page'] != '':
                            # print(tmp_dict_json['options_page'],tmp_document_id)
                                tmp_options_page = [eval(tmp_dict_json['options_page'])]
                        else:
                            tmp_options_page = []
                        if len(tmp_options_page) != 0:
                            # print(tmp_options_page[0]['group_detail'])
                            tmp_status_group = False
                            if status_groupid == True:
                                if len(tmp_options_page) != 0:
                                    if 'group_detail' in tmp_options_page[0]:
                                        tmp_group_detail = tmp_options_page[0]['group_detail']
                                        if 'group_status' in tmp_group_detail:
                                            if tmp_group_detail['group_status'] == True:
                                                tmp_status_group = True
                                                tmpstepnum = tmp_group_detail['step_num']
                                        # if 'step_num' in tmp_group_detail:
                                        #     tmp_status_group = True
                                        #     tmp_group_stepnum = tmp_group_detail['step_num']
                            # if 'group_detail' in tmp_options_page[0]:
                            #     if 'group_status' in tmp_options_page[0]['group_detail']:
                            #         tmpgroupdetails = tmp_options_page[0]['group_detail']
                            #         if tmpgroupdetails['group_status'] == True:
                            #             tmpstepnum = tmpgroupdetails['step_num']
                                        # print(tmpstepnum)
                        if tmp_dict_json['documentJson'] != None:
                            documentJson_result = eval(tmp_dict_json['documentJson'])
                            documentName = documentJson_result['document_name']
                            documentType = documentJson_result['document_type']
                        else:
                            documentName = None
                            documentType = None
                        if tmp_dict_json['urgent_type'] != None:
                            documentUrgentType = tmp_dict_json['urgent_type']
                            if documentUrgentType == 'I':
                                documentUrgentString = 'ด่วนมาก'
                            elif documentUrgentType == 'U':
                                documentUrgentString = 'ด่วน'
                            elif documentUrgentType == 'M':
                                documentUrgentString = 'ปกติ'
                    tmp_biz_info = None
                    if z == 2:
                        if query_temp[u][z] != None:
                            if query_temp[u][z] != 'None':
                                
                                eval_biz_info = json.dumps(query_temp[u][z])
                                eval_biz_info = json.loads(eval_biz_info)
                                eval_biz_info = eval(eval_biz_info)
                                # eval_biz_info
                                # print(eval_biz_info)
                                if 'dept_name' in eval_biz_info:            
                                    tmp_biz_info = {
                                        'tax_id':eval_biz_info['id_card_num'],
                                        'role_name' : eval_biz_info['role_name'],
                                        'dept_name' : eval_biz_info['dept_name'],
                                        'role_level' : eval_biz_info['role_level']               
                                    }                                
                                elif 'dept_name' not in eval_biz_info:
                                    tmp_biz_info = {
                                        'tax_id':eval_biz_info['id_card_num'],
                                        'role_name' : eval_biz_info['role_name'],
                                        'dept_name' : [],
                                        'role_level' : eval_biz_info['role_level']               
                                    }
                    if z == 3:
                        tmp_dict_json = query_temp[u][z].__dict__
                        email_update = tmp_dict_json['email_update']
                        date_time = tmp_dict_json['datetime']
                        date_time_str = str(tmp_dict_json['datetime']).split('+')[0]
                        email_list = tmp_dict_json['email_list']
                        email_update_name = fine_name_surename(email_update)
                        # print('email_update',tmp_dict_json['email_update'])
                    dateTime_String = tmp_send_time
                    th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                    ts = int(time.time())
                    date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                    year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                    datetime_display = int(dateTime_String.timestamp())
                    date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                    yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                    time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                    old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                    if date_time_today == date_time_db:
                        date_display_show = time_show_db
                    else:
                        if year_today == yar_db:
                            date_display_show = convert_datetime_TH_2_display(datetime_display)
                        else:
                            date_display_show = old_year
                # print(email_step_sum_w)
                if tmp_status_group == True:
                    for ui in range(len(tmpstepnum)):
                        intstepnum = tmpstepnum[ui] - 1
                        # print(intstepnum)
                        for w in range(len(email_step_sum_w[intstepnum])):
                            tmp_req_email.append(email_step_sum_w[intstepnum][w])    
                json_arr.append({
                    'group_email':tmp_req_email,
                    'group_id':None,
                    'group_status':tmp_status_group,
                    'sidCode':tmp_sicode,
                    'document_name':documentName,
                    'document_type':tmp_document_type,
                    'document_urgent':documentUrgentType,
                    'document_urgent_string':documentUrgentString,
                    'dateTime_String':str(dateTime_String).split('+')[0],
                    'dateTime_String_TH_1':th_dateTime_2,
                    'dateTime_display':date_display_show,
                    'document_id':tmp_document_id,
                    'stamp_all':tmp_sign_page_options,
                    'options_page_document':tmp_options_page,
                    'max_step':tmpstepmax,
                    'step_now':tmpstepnow,
                    # 'dateTime_String_TH_2':th_dateTime_2,
                    'date_String':str(dateTime_String).split(' ')[0],
                    'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                    'status_file_code':tmpdocument_status,
                    'status_file_string':res_status_file_string,
                    'dateTime':int(dateTime_String.timestamp()),
                    'tracking_id':tmp_tracking_id,
                    'sender_name':tmp_sender_name,
                    'sender_email':tmp_sender_email,
                    'file_name':tmp_file_name,
                    'document_business':tmp_biz_info
                })
                list_arr.append({
                    'email_update' : email_update,
                    'date_time' : date_time,
                    'date_time_str' : date_time_str,
                    'email_list' : eval(str(email_list)),
                    'Document_Details' : json_arr,
                    'email_update_name' : email_update_name
                })
            # list_arr = sorted(list_arr, key=lambda k: k['dateTime'], reverse=True)
            json_Data['Document_Details'] = list_arr
                    # arr.append(tmp_dict_json)
            return {'result':'OK','messageText':list_arr}
            
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

    def select_trash_log_count(self,emailUser):
        self.emailUser = emailUser
        emailUser_search = "%'{}'%".format(self.emailUser)
        try:
            with slave.connect() as connection:
                result = connection.execute(text('SELECT COUNT("id") FROM "tb_document_trash" WHERE email_list LIKE :email'),email=emailUser_search)
                tmp = [dict(row) for row in result]
                connection.close()
            return {'result': 'OK', 'messageText': tmp,'messageER':None} 
        except Exception as ex:
            print(ex)
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result': 'ER', 'messageText': 'ERROR LOG','messageER':str(ex)}
    
    def select_tranferlog(self,sid):
        self.sid = sid
        list_json = []
        try:
            with slave.connect() as connection:
                result = connection.execute(text('SELECT "sid","action_status","step_num","email_from","email_to","datetime","status","id","email" FROM "tb_transferuser" WHERE sid=:val'),val=self.sid)
                tmp = [dict(row) for row in result]
                connection.close()
            for x in range(len(tmp)):
                action_status = tmp[x]['action_status']
                datetime = str(tmp[x]['datetime']).split('+')[0]
                if action_status == 'ADD':
                    action_status = 'เพิ่มลำดับอนุมัติ'
                elif  action_status == 'DELETE':
                    action_status = 'ลบลำดับอนุมัติ'
                elif action_status == 'TRANFER':
                    action_status = 'โอนสิทธิ์อนุมัติ'
                tmp[x]['action_status_str'] = action_status
                tmp[x]['datetime'] = datetime
                tmp[x]['step_num'] = eval(str(tmp[x]['step_num']))
                tmp[x]['email_from'] = eval(str(tmp[x]['email_from']))
                tmp[x]['email_to'] = eval(str(tmp[x]['email_to']))
            return {'result': 'OK', 'messageText': tmp,'messageER':None}     
        except Exception as ex:
            print(ex)
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result': 'ER', 'messageText': 'ไม่สามารถดูประวัติการเปลี่ยนแปลงลำดับได้','messageER':str(ex)}

    def select_sender_db_v3(self,userName,sidCode,emailUser):
        self.sidCode = sidCode
        self.userName = userName
        self.emailUser = emailUser
        json_data_res = {}
        list_data_res = []
        document_detail = ''
        status_tranfer = False
        acty_code = []
        sender_position = ''
        try:
            query_tranfer = db.session.query(
                    paper_lesstranfer.sid
                )\
                .filter(paper_lesstranfer.sid==self.sidCode)\
                .count()
            result_Select_step = paper_lessdatastep.query.filter(paper_lessdatastep.sid==self.sidCode).first()
            result_Select_sender = paper_lesssender.query.filter(paper_lesssender.step_data_sid==self.sidCode).first()
            result_Select_document = paper_lessdocument.query.filter(paper_lessdocument.step_id==self.sidCode).first()
            # result_Select_pdf = paper_lesspdf.query.filter(paper_lesspdf.fid==result_Select_document.fileid).first()
            if query_tranfer > 0 :
                status_tranfer = True
            else :
                status_tranfer = False
            json_data_res['status_tranfer'] = status_tranfer
            if result_Select_sender != None:
                sender_position = result_Select_sender.sender_position
                json_data_res['template_name'] = None
                json_data_res['condition_template'] = None
                if result_Select_sender.step_code != None:
                    result_template = paper_lessstep.query.filter(paper_lessstep.step_Code==result_Select_sender.step_code,paper_lessstep.status=='ACTIVE').first()
                    if result_template != None:
                        json_data_res['template_name'] = str(result_template.step_Name)
                        json_data_res['condition_template'] = str(result_template.condition_temp)
                json_data_res['tracking_id'] = result_Select_sender.tracking_id
                json_data_res['sender_email'] = result_Select_sender.sender_email                                    
                try:
                    result_name_eng = find_name_surename_by_username(result_Select_sender.sender_email)
                    tmp_account_name_eng = result_name_eng
                except Exception as e:
                    tmp_account_name_eng = result_Select_sender.sender_email  
                json_data_res['sender_name'] = result_Select_sender.sender_name
                json_data_res['sender_name_eng'] = tmp_account_name_eng
                json_data_res['send_time'] = result_Select_sender.send_time
                date_time_stamp_ = result_Select_sender.send_time.timestamp()
                date_time_stamp_ = int(date_time_stamp_)
                json_data_res['send_time_display'] = convert_datetime_TH_2_display_sendTime(date_time_stamp_)
                json_data_res['sender_position'] = result_Select_sender.sender_position
                json_data_res['send_time_string'] = str(result_Select_sender.send_time).split('+')[0]
                json_data_res['step_code'] = result_Select_sender.step_code
                json_data_res['step_data_sid'] = result_Select_sender.step_data_sid
                json_data_res['document_Id'] = result_Select_sender.doc_id
                json_data_res['template_webhook'] = result_Select_sender.template_webhook
                json_data_res['email_center'] = result_Select_sender.email_center
                json_data_res['file_name'] = result_Select_sender.file_name
                json_data_res['status'] = result_Select_sender.status
                json_data_res['status_ref'] = result_Select_sender.status_ref
                if result_Select_sender.list_ref != None and result_Select_sender.list_ref != [] and result_Select_sender.list_ref != '':
                    json_data_res['list_ref'] = eval(result_Select_sender.list_ref)
                else:
                    json_data_res['list_ref'] = (result_Select_sender.list_ref)
                result_url = get_url_image_pdf_v1(self.sidCode)
                if result_url['result'] == 'OK':
                    tmpmessageText = result_url['messageText']
                    tmp_url_image = tmpmessageText
                    # print(tmp_url_image)
                else:
                    tmp_url_image = []
                json_data_res['url_image'] = tmp_url_image
            if result_Select_document != None:
                if result_Select_document.options_page != None:
                    option_page = eval(result_Select_document.options_page)
                    # document_detail = option_page 
                    if 'service_properties' in option_page:
                        service_properties = option_page['service_properties']
                        # document_detail = service_properties
                        for nn in  range(len(service_properties)):
                            ser = eval(str(service_properties[nn]))
                            if 'name_service' in ser :
                                name_service = ser['name_service']
                                if name_service == 'GROUP':
                                    other = ser['other']
                                    for ni in range(len(other)):
                                        ot = eval(str(other[ni]))
                                        document_detail = eval(str(ot['properties']))
                if result_Select_document.data_document == None:
                    tmpdatadocumenttype = None
                else:
                    tmpdatadocumenttype = None
                    tmpchecksystem = data_doc(result_Select_document.data_document)
                    if tmpchecksystem['result'] == 'OK':
                        if 'sub' in tmpchecksystem['messageText']:
                            tmpdatadocumenttype = tmpchecksystem['messageText']['sub']
                json_data_res['type'] = tmpdatadocumenttype
                if result_Select_document.options_page != None:
                    json_data_res['options_page_document'] = [eval(result_Select_document.options_page)]
                    tmp_option_page = eval(result_Select_document.options_page)
                    if 'ca_req' in tmp_option_page:
                        pass                    
                else:
                    json_data_res['options_page_document'] = []
                json_data_res['document_data'] = document_detail
                json_data_res['document_time'] = int(result_Select_document.timest)
                json_data_res['document_details'] = eval(result_Select_document.documentJson)
                json_data_res['document_details_string'] = str(result_Select_document.documentJson)
                json_data_res['file_id'] = int(result_Select_document.fileid)
                json_data_res['urgent_code'] = result_Select_document.urgent_type
                json_data_res['attempted_folder'] = result_Select_document.attempted_folder
            if result_Select_step != None:
                step_infomation = eval(result_Select_step.data_json)
                if sender_position == 'Eform':
                    step_infomation = parse_json_for_eform(step_infomation)
                if 'step_num' in step_infomation:
                    json_data_res['step_info'] = [eval(result_Select_step.data_json)]
                else:
                    json_data_res['step_info'] = eval(result_Select_step.data_json)
                # json_data_res['step_info_01'] = eval(result_Select_step.data_json)
                json_data_res['view_details'] = eval(result_Select_step.view_details)
                json_data_res['qrCode_position'] = eval(result_Select_step.qrCode_position)
                if result_Select_step.qrCode_position != None or str(result_Select_step.qrCode_position).replace(' ','') != '':
                    json_data_res['qrCode_status'] = True
                else:
                    json_data_res['qrCode_status'] = False
            # if result_Select_pdf != None:
            #     if result_Select_pdf.string_sign != None:
            #         json_data_res['file_status'] = 'Complete'
            #     else:
            #         json_data_res['file_status'] = 'Incomplete'

            json_data_res['file_user_status_detail'] = []
            arr_step_info = []
            if 'step_num' in step_infomation:
                status_step_sum = ''
                sum_status_step_list = []
                list_check_step = []
                json_step_info_2 = {}
                step_list_data = []
                step_ = step_infomation
                time_success = None
                step_time_1 = []
                sendtime = json_data_res['send_time']
                step_num = step_infomation['step_num']
                json_step_info_2['step_status'] = ''
                for u in range(len(step_['step_detail'])):
                    print(step_['step_detail'][u])
                    step_2 = step_['step_detail'][u]
                    for k in range(len(step_2['activity_code'])):
                        acty_code.append(step_2['activity_code'])
                        if step_2['activity_code'][k] == 'A03':
                            json_step_info = {}
                            tmp_one_email = step_2['one_email']
                            json_step_info['activity_code'] = step_2['activity_code'][k]
                            json_step_info['activity_status'] = step_2['activity_status'][k]
                            json_step_info['rf_step'] = None
                            json_step_info['ref_step_num'] = None
                            json_step_info['one_email'] = step_2['one_email']
                            tmp_account_name = tmp_one_email
                            tmp_account_name_eng = tmp_one_email
                            if json_step_info['one_email'] != '':
                                result_name_eng = find_name_surename_by_username(tmp_one_email)
                                tmp_account_name_eng = result_name_eng
                                query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(tmp_one_email)).all()
                                if len(query_name_account) != 0:
                                    try:
                                        tmp_account_name = eval(query_name_account[0].citizen_data)
                                        tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                    except Exception as e:
                                        tmp_account_name = tmp_one_email
                                        exc_type, exc_obj, exc_tb = sys.exc_info()
                                        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                                        print(exc_type, fname, exc_tb.tb_lineno)
                            #process หา timeline
                            if (step_2['activity_status'][k] == 'Complete' or step_2['activity_status'][k] =='Reject' or step_2['activity_status'][k] == 'Approve'):
                                t1 = str(step_2['activity_time'][k])
                                time_success = change_to_Timestamp(t1)
                                step_time_1.append(time_success)
                            #สิ้นสุดการหา timeline
                            # if len(query_name_account) != 0:
                            #     tmp_account_name = eval(query_name_account[0].citizen_data)
                            #     try:
                            #         tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                            #     except Exception as e:
                            #         tmp_account_name=step_2['one_email']
                            # else:
                            #     tmp_account_name = step_2['one_email']
                            json_step_info['account_name'] = tmp_account_name
                            json_step_info['account_name_eng'] = tmp_account_name_eng
                            json_step_info['step_num'] = step_num
                            list_check_step.append(json_step_info['activity_status'])
                            step_list_data.append(json_step_info)
                        elif step_2['activity_code'][k] == 'A04':
                            json_step_info = {}
                            tmp_one_email = step_2['one_email']
                            json_step_info['activity_code'] = step_2['activity_code'][k]
                            json_step_info['activity_status'] = step_2['activity_status'][k]
                            json_step_info['rf_step'] = None
                            json_step_info['ref_step_num'] = None
                            json_step_info['one_email'] = step_2['one_email']
                            tmp_account_name = tmp_one_email
                            if json_step_info['one_email'] != '':
                                query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(tmp_one_email)).all()
                                if len(query_name_account) != 0:
                                    try:
                                        tmp_account_name = eval(query_name_account[0].citizen_data)
                                        tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                    except Exception as e:
                                        tmp_account_name = tmp_one_email
                                        exc_type, exc_obj, exc_tb = sys.exc_info()
                                        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                                        print(exc_type, fname, exc_tb.tb_lineno)
                            #process หา timeline
                            if (step_2['activity_status'][k] == 'Complete' or step_2['activity_status'][k] =='Reject' or step_2['activity_status'][k] == 'Approve'):
                                t1 = str(step_2['activity_time'][k])
                                print ('if activity_time',t1)
                                time_success = change_to_Timestamp(t1)
                                step_time_1.append(time_success)
                            #สิ้นสุดการหา timeline
                            # if len(query_name_account) != 0:
                            #     tmp_account_name = eval(query_name_account[0].citizen_data)
                            #     try:
                            #         tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                            #     except Exception as e:
                            #         tmp_account_name=step_2['one_email']
                            # else:
                            #     tmp_account_name = step_2['one_email']
                            json_step_info['account_name'] = tmp_account_name
                            json_step_info['step_num'] = step_num
                            list_check_step.append(json_step_info['activity_status'])
                            step_list_data.append(json_step_info)
                        elif step_2['activity_code'][k] == 'A05':
                            json_step_info = {}
                            tmp_one_email = step_2['one_email']
                            json_step_info['activity_code'] = step_2['activity_code'][k]
                            json_step_info['activity_status'] = step_2['activity_status'][k]
                            json_step_info['rf_step'] = None
                            json_step_info['ref_step_num'] = None
                            json_step_info['one_email'] = step_2['one_email']
                            tmp_account_name = tmp_one_email
                            if json_step_info['one_email'] != '':
                                query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(tmp_one_email)).all()
                                if len(query_name_account) != 0:
                                    try:
                                        tmp_account_name = eval(query_name_account[0].citizen_data)
                                        tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                    except Exception as e:
                                        tmp_account_name = tmp_one_email
                                        exc_type, exc_obj, exc_tb = sys.exc_info()
                                        fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                                        print(exc_type, fname, exc_tb.tb_lineno)
                            #process หา timeline
                            if (step_2['activity_status'][k] == 'Complete' or step_2['activity_status'][k] =='Reject' or step_2['activity_status'][k] == 'Approve'):
                                t1 = str(step_2['activity_time'][k])
                                print ('if activity_time',t1)
                                time_success = change_to_Timestamp(t1)
                                step_time_1.append(time_success)
                            #สิ้นสุดการหา timeline
                            # if len(query_name_account) != 0:
                            #     tmp_account_name = eval(query_name_account[0].citizen_data)
                            #     try:
                            #         tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                            #     except Exception as e:
                            #         tmp_account_name=step_2['one_email']
                            # else:
                            #     tmp_account_name = step_2['one_email']
                            json_step_info['account_name'] = tmp_account_name
                            json_step_info['step_num'] = step_num
                            list_check_step.append(json_step_info['activity_status'])
                            step_list_data.append(json_step_info)
                        
                    json_step_info_2['step_info'] = step_list_data
                    if json_step_info_2['step_status'] == '':
                        if 'Reject' in list_check_step:
                            json_step_info_2['step_status'] = 'Reject'
                        elif 'Complete' in list_check_step:
                            json_step_info_2['step_status'] = 'Complete'
                        elif 'Approve' in list_check_step:
                            json_step_info_2['step_status'] = 'Complete'
                        elif 'Incomplete' in list_check_step:
                            json_step_info_2['step_status'] = 'Incomplete'
                        elif 'Pending' in list_check_step:
                            json_step_info_2['step_status'] = 'Incomplete'
                        else:
                            json_step_info_2['step_status'] = 'Complete'
                    
                    sum_status_step_list.append(json_step_info_2['step_status'])
                    timeline_ = getTimeline(sendtime,step_time_1)
                    list_timeline = getlistTimeline(sendtime,step_time_1)
                    json_data_res['timeline'] = timeline_
                    json_data_res['timeline_list'] = list_timeline
                json_data_res['file_user_status_detail'].append(json_step_info_2)
                if 'Reject' in sum_status_step_list:
                    status_step_sum = 'Reject'
                    sendtime = json_data_res['send_time']
                    timing_ = timing(time_success,sendtime)
                    json_data_res['timing'] = timing_
                elif 'Incomplete' in sum_status_step_list:
                    status_step_sum = 'Incomplete'
                    now = datetime.datetime.now()
                    sendtime = json_data_res['send_time']
                    timing_ = timing(datetime.datetime.timestamp(now),sendtime)
                    json_data_res['timing'] = timing_
                elif 'Pending' in sum_status_step_list:
                    status_step_sum = 'Incomplete'
                    now = datetime.datetime.now()
                    sendtime = json_data_res['send_time']
                    timing_ = timing(datetime.datetime.timestamp(now),sendtime)
                    json_data_res['timing'] = timing_
                elif 'Complete' in sum_status_step_list:
                    status_step_sum = 'Complete'
                    sendtime = json_data_res['send_time']
                    timing_ = timing(time_success,sendtime)
                    json_data_res['timing'] = timing_
                elif 'Approve' in sum_status_step_list:
                    status_step_sum = 'Complete'
                    sendtime = json_data_res['send_time']
                    timing_ = timing(time_success,sendtime)
                    json_data_res['timing'] = timing_
                else:
                    status_step_sum = 'Complete'
                    sendtime = json_data_res['send_time']
                    timing_ = timing(time_success,sendtime)
                    json_data_res['timing'] = timing_
                json_data_res['file_status_sum'] = status_step_sum
            else:
                step_status = ''
                res_status_file = 'Y'
                res_status_file_string = 'อนุมัติแล้ว'
                step_before = ''
                step_list_before = []
                step_list_ = []
                step_list_next = []
                arr_step_totle = []
                step_me = ''
                step_sum_status = []
                sum_status_step_list = []
                list_check_step = []
                step_list_data = []
                max_step = (len(step_infomation))
                step_infomation = step_infomation
                sum_status_step = []
                tmp_status_sum = []
                arr_email_list = []
                email_step_sum = []
                email_one_sum = []
                time_success = None
                step_time_1 = []
                sendtime = json_data_res['send_time']
                for i in range(len(step_infomation)):
                    list_check_step = []
                    json_step_info_2 = {}
                    step_list_data = []
                    step_status = []
                    step_email = []
                    step_ = step_infomation[i]
                    step_num = step_infomation[i]['step_num']
                    json_step_info_2['step_status'] = ''
                    tmp_step_detail = step_['step_detail']
                    for u in range(len(tmp_step_detail)):
                        tmp_arr_step_detail = tmp_step_detail[u]
                        tmp_status = tmp_arr_step_detail['activity_status']
                        tmp_code = tmp_arr_step_detail['activity_code']
                        tmp_email = tmp_arr_step_detail['one_email']
                        for s in range(len(tmp_code)):
                            print(tmp_code[s])
                            if tmp_code[s] == 'A03':
                                step_status.append(tmp_status[s])
                                step_email.append(tmp_email)
                                email_one_sum.append(tmp_email)
                                #process หา timeline
                                if (tmp_arr_step_detail['activity_status'][s] == 'Complete' or tmp_arr_step_detail['activity_status'][s] =='Reject' or tmp_arr_step_detail['activity_status'][s] == 'Approve'):
                                    t1 = str(tmp_arr_step_detail['activity_time'][s])
                                    time_success = change_to_Timestamp(t1)
                                    step_time_1.append(time_success)
                            elif tmp_code[s] == 'A04':
                                step_status.append(tmp_status[s])
                                step_email.append(tmp_email)
                                email_one_sum.append(tmp_email)
                                #process หา timeline
                                if (tmp_arr_step_detail['activity_status'][s] == 'Complete' or tmp_arr_step_detail['activity_status'][s] =='Reject' or tmp_arr_step_detail['activity_status'][s] == 'Approve'):
                                    t1 = str(tmp_arr_step_detail['activity_time'][s])
                                    time_success = change_to_Timestamp(t1)
                                    step_time_1.append(time_success)
                                #สิ้นสุดการหา timeline
                            elif tmp_code[s] == 'A05':
                                step_status.append(tmp_status[s])
                                step_email.append(tmp_email)
                                email_one_sum.append(tmp_email)
                                #process หา timeline
                                if (tmp_arr_step_detail['activity_status'][s] == 'Complete' or tmp_arr_step_detail['activity_status'][s] =='Reject' or tmp_arr_step_detail['activity_status'][s] == 'Approve'):
                                    t1 = str(tmp_arr_step_detail['activity_time'][s])
                                    time_success = change_to_Timestamp(t1)
                                    step_time_1.append(time_success)
                                #สิ้นสุดการหา timeline
                        if sender_position == 'Eform':
                            if len(step_time_1) != 0:
                                sendtime = step_time_1[0]
                                sendtime = datetime.datetime.fromtimestamp(sendtime)
                        timeline_ = getTimeline(sendtime,step_time_1)
                        list_timeline = getlistTimeline(sendtime,step_time_1)
                        if sender_position == 'Eform':
                            list_timeline = parse_list_timeline_for_eform(list_timeline)
                        json_data_res['timeline'] = timeline_
                        json_data_res['timeline_list'] = list_timeline
                    email_step_sum.append(step_email)
                    if 'Reject' in step_status:
                        tmp_status_sum.append('Reject')
                    elif 'Approve' in step_status:
                        tmp_status_sum.append('Complete')
                    elif 'Complete' in step_status:
                        tmp_status_sum.append('Complete')
                    elif 'Incomplete' in step_status:
                        tmp_status_sum.append('Incomplete')
                    elif 'Pending' in step_status:
                        tmp_status_sum.append('Incomplete')
                    else:
                        tmp_status_sum.append('Complete')
                if self.emailUser in email_one_sum:
                    for zzi in range(len(step_infomation)):
                        list_check_step = []
                        json_step_info_2 = {}
                        step_list_data = []
                        step_status = []
                        step_ = step_infomation[zzi]
                        step_num = step_infomation[zzi]['step_num']
                        json_step_info_2['step_status'] = ''
                        tmp_step_detail = step_['step_detail']
                        for zi in range(len(tmp_step_detail)):
                            tmp_arr_step_detail_2 = tmp_step_detail[zi]
                            oneMail = tmp_arr_step_detail_2['one_email']
                            tmp_step_me = int(step_num) - 1
                            step_num_int2 = int(step_num)
                            if 'Reject' in tmp_status_sum:
                                arr_step_info.append('Reject')
                            elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Incomplete':
                                if self.emailUser not in arr_email_list:
                                    index_step_me = tmp_step_me
                                    if index_step_me != 0:
                                        while index_step_me > 0:
                                            if len(arr_step_info) == 0:
                                                index_step_me = index_step_me - 1
                                                if tmp_status_sum[index_step_me] == 'Incomplete':
                                                    arr_step_info.append('Incomplete')
                                                else:
                                                    arr_step_info.append('Wait')
                                                arr_email_list.append(self.emailUser)
                                            else:
                                                index_step_me = index_step_me - 1
                                                continue
                                    else:
                                        arr_step_info.append('Wait')
                            elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Complete':
                                # print('Complete')
                                if self.emailUser not in arr_email_list:
                                    for nz in range(step_num_int2,len(tmp_status_sum),1):
                                        if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                            arr_step_info.append('Incomplete')
                                        elif self.emailUser not in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                            arr_step_info.append('Progress')
                                    arr_email_list.append(self.emailUser)
                else:
                    for zzi in range(len(step_infomation)):
                        list_check_step = []
                        json_step_info_2 = {}
                        step_list_data = []
                        step_status = []
                        step_ = step_infomation[zzi]
                        step_num = step_infomation[zzi]['step_num']
                        json_step_info_2['step_status'] = ''
                        tmp_step_detail = step_['step_detail']
                        for zi in range(len(tmp_step_detail)):
                            tmp_arr_step_detail_2 = tmp_step_detail[zi]
                            oneMail = tmp_arr_step_detail_2['one_email']
                            tmp_step_me = int(step_num) - 1
                            step_num_int2 = int(step_num)
                            if 'Reject' in tmp_status_sum:
                                arr_step_info.append('Reject')
                            elif 'Incomplete' in tmp_status_sum:
                                arr_step_info.append('Progress')
                        # print(tmp_status_sum)


                if 'Reject' in arr_step_info:
                    res_status_file = 'R'
                    res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                elif 'Wait' in arr_step_info:
                    res_status_file = 'W'
                    res_status_file_string = 'รออนุมัติ'
                elif 'Incomplete' in arr_step_info:
                    res_status_file = 'Z'
                    res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                elif 'Progress' in arr_step_info:
                    res_status_file = 'N'
                    res_status_file_string = 'กำลังดำเนินการ'                    
                elif arr_step_info.count('Incomplete') >= 2:
                    res_status_file = 'Z'
                    res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                else:
                    res_status_file = 'Y'
                    res_status_file_string = 'อนุมัติแล้ว'
                json_data_res['status_file_code'] = res_status_file
                json_data_res['status_file_string'] = res_status_file_string
                status_step_sum = ''
                sum_status_step_list = []
                for i in range(len(step_infomation)):
                    list_check_step = []
                    json_step_info_2 = {}
                    step_list_data = []
                    step_ = step_infomation[i]
                    step_num = step_infomation[i]['step_num']
                    json_step_info_2['step_status'] = ''
                    for u in range(len(step_['step_detail'])):
                        step_2 = step_['step_detail'][u]
                        for k in range(len(step_2['activity_code'])):
                            acty_code.append(step_2['activity_code'][k])
                            if step_2['activity_code'][k] == 'A03':
                                json_step_info = {}
                                tmp_one_email = step_2['one_email']
                                json_step_info['activity_status'] = step_2['activity_status'][k]
                                json_step_info['activity_code'] = step_2['activity_code'][k]
                                json_step_info['rf_step'] = None
                                json_step_info['ref_step_num'] = None
                                json_step_info['one_email'] = step_2['one_email']
                                tmp_account_name = tmp_one_email
                                tmp_account_name_eng = tmp_one_email
                                if json_step_info['one_email'] != '':
                                    try:
                                        result_name_eng = find_name_surename_by_username(tmp_one_email)
                                        result_name = fine_name_surename(tmp_one_email)
                                        tmp_account_name_eng = result_name_eng
                                        tmp_account_name = result_name
                                    except Exception as e:
                                        tmp_account_name = tmp_one_email
                                        tmp_account_name_eng = tmp_one_email
                                    # query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(tmp_one_email)).all()
                                    # if len(query_name_account) != 0:
                                    #     try:
                                    #         tmp_account_name = eval(query_name_account[0].citizen_data)
                                    #         tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                    #     except Exception as e:
                                    #         tmp_account_name = tmp_one_email
                                    #         exc_type, exc_obj, exc_tb = sys.exc_info()
                                    #         fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                                    #         print(exc_type, fname, exc_tb.tb_lineno)
                                # json_step_info['activity_status'] = step_2['activity_status'][k]
                                # json_step_info['one_email'] = step_2['one_email']
                                # query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(step_2['one_email'])).all()
                                # if len(query_name_account) != 0:
                                #     tmp_account_name = eval(query_name_account[0].citizen_data)
                                #     try:
                                #         tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                #     except Exception as e:
                                #         tmp_account_name = step_2['one_email']
                                # else:
                                #     tmp_account_name = step_2['one_email']
                                json_step_info['account_name'] = tmp_account_name
                                json_step_info['account_name_eng'] = tmp_account_name_eng
                                json_step_info['step_num'] = step_num
                                list_check_step.append(json_step_info['activity_status'])
                                step_list_data.append(json_step_info)
                            elif step_2['activity_code'][k] == 'A04':
                                json_step_info = {}
                                tmp_one_email = step_2['one_email']
                                json_step_info['activity_status'] = step_2['activity_status'][k]
                                json_step_info['activity_code'] = step_2['activity_code'][k]
                                json_step_info['rf_step'] = None
                                json_step_info['ref_step_num'] = None
                                json_step_info['one_email'] = step_2['one_email']
                                tmp_account_name = tmp_one_email
                                tmp_account_name_eng = tmp_one_email
                                if json_step_info['one_email'] != '':
                                    try:
                                        result_name_eng = find_name_surename_by_username(tmp_one_email)
                                        result_name = find_name_surename(tmp_one_email)
                                        tmp_account_name_eng = result_name_eng
                                        tmp_account_name = result_name
                                    except Exception as e:
                                        tmp_account_name = tmp_one_email
                                        tmp_account_name_eng = tmp_one_email

                                    # query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(tmp_one_email)).all()
                                    # if len(query_name_account) != 0:
                                    #     try:
                                    #         tmp_account_name = eval(query_name_account[0].citizen_data)
                                    #         tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                    #     except Exception as e:
                                    #         tmp_account_name = tmp_one_email
                                    #         exc_type, exc_obj, exc_tb = sys.exc_info()
                                    #         fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                                    #         print(exc_type, fname, exc_tb.tb_lineno)
                                # json_step_info['activity_status'] = step_2['activity_status'][k]
                                # json_step_info['one_email'] = step_2['one_email']
                                # query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(step_2['one_email'])).all()
                                # if len(query_name_account) != 0:
                                #     tmp_account_name = eval(query_name_account[0].citizen_data)
                                #     try:
                                #         tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                #     except Exception as e:
                                #         tmp_account_name = step_2['one_email']
                                # else:
                                #     tmp_account_name = step_2['one_email']
                                json_step_info['account_name'] = tmp_account_name
                                json_step_info['account_name_eng'] = tmp_account_name_eng
                                json_step_info['step_num'] = step_num
                                list_check_step.append(json_step_info['activity_status'])
                                step_list_data.append(json_step_info)
                            elif step_2['activity_code'][k] == 'A05':
                                json_step_info = {}
                                tmp_one_email = step_2['one_email']
                                json_step_info['activity_status'] = step_2['activity_status'][k]
                                json_step_info['activity_code'] = step_2['activity_code'][k]
                                json_step_info['rf_step'] = None
                                json_step_info['ref_step_num'] = None
                                json_step_info['one_email'] = step_2['one_email']
                                tmp_account_name = tmp_one_email
                                tmp_account_name_eng = tmp_one_email
                                if json_step_info['one_email'] != '':                                    
                                    try:
                                        result_name_eng = find_name_surename_by_username(tmp_one_email)
                                        result_name = find_name_surename(tmp_one_email)
                                        tmp_account_name_eng = result_name_eng
                                        tmp_account_name = result_name
                                    except Exception as e:
                                        tmp_account_name = tmp_one_email
                                        tmp_account_name_eng = tmp_one_email
                                    # query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(tmp_one_email)).all()
                                    # if len(query_name_account) != 0:
                                    #     try:
                                    #         tmp_account_name = eval(query_name_account[0].citizen_data)
                                    #         tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                    #     except Exception as e:
                                    #         tmp_account_name = tmp_one_email
                                    #         exc_type, exc_obj, exc_tb = sys.exc_info()
                                    #         fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                                    #         print(exc_type, fname, exc_tb.tb_lineno)
                                # json_step_info['activity_status'] = step_2['activity_status'][k]
                                # json_step_info['one_email'] = step_2['one_email']
                                # query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.contains(step_2['one_email'])).all()
                                # if len(query_name_account) != 0:
                                #     tmp_account_name = eval(query_name_account[0].citizen_data)
                                #     try:
                                #         tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                #     except Exception as e:
                                #         tmp_account_name = step_2['one_email']
                                # else:
                                #     tmp_account_name = step_2['one_email']
                                json_step_info['account_name'] = tmp_account_name
                                json_step_info['account_name_eng'] = tmp_account_name_eng
                                json_step_info['step_num'] = step_num
                                list_check_step.append(json_step_info['activity_status'])
                                step_list_data.append(json_step_info)
                        json_step_info_2['step_info'] = step_list_data
                    if json_step_info_2['step_status'] == '':
                        if 'Reject' in list_check_step:
                            json_step_info_2['step_status'] = 'Reject'
                        elif 'Complete' in list_check_step:
                            json_step_info_2['step_status'] = 'Complete'
                        elif 'Approve' in list_check_step:
                            json_step_info_2['step_status'] = 'Complete'
                        elif 'Incomplete' in list_check_step:
                            json_step_info_2['step_status'] = 'Incomplete'
                        elif 'Pending' in list_check_step:
                            json_step_info_2['step_status'] = 'Incomplete'
                        else:
                            json_step_info_2['step_status'] = 'Complete'
                    sum_status_step_list.append(json_step_info_2['step_status'])
                    json_data_res['file_user_status_detail'].append(json_step_info_2)
                if 'Reject' in sum_status_step_list:
                    status_step_sum = 'Reject'
                    sendtime = json_data_res['send_time']
                    timing_ = timing(time_success,sendtime)
                    json_data_res['timing'] = timing_
                elif 'Incomplete' in sum_status_step_list:
                    status_step_sum = 'Incomplete'
                    now = datetime.datetime.now()
                    sendtime = json_data_res['send_time']
                    timing_ = timing(datetime.datetime.timestamp(now),sendtime)
                    json_data_res['timing'] = timing_
                elif 'Pending' in sum_status_step_list:
                    status_step_sum = 'Incomplete'
                    now = datetime.datetime.now()
                    sendtime = json_data_res['send_time']
                    timing_ = timing(datetime.datetime.timestamp(now),sendtime)
                    json_data_res['timing'] = timing_
                elif 'Complete' in sum_status_step_list:
                    status_step_sum = 'Complete'
                    sendtime = json_data_res['send_time']
                    timing_ = timing(time_success,sendtime)
                    json_data_res['timing'] = timing_
                elif 'Approve' in sum_status_step_list:
                    status_step_sum = 'Complete'
                    sendtime = json_data_res['send_time']
                    timing_ = timing(time_success,sendtime)
                    json_data_res['timing'] = timing_
                else:
                    status_step_sum = 'Complete'
                    sendtime = json_data_res['send_time']
                    timing_ = timing(time_success,sendtime)
                    json_data_res['timing'] = timing_
                json_data_res['file_status_sum'] = status_step_sum
                json_data_res['preview_eform'] = False
                if 'A04' in acty_code:
                    json_data_res['preview_eform'] = True
            list_data_res.append(json_data_res)
            if len(list_data_res) != 0:
                return {'result':'OK','messageText':list_data_res,'messageER':None}
            else:
                return {'result':'ER','messageText':[],'messageER':'not found sidcode'}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':[],'messageER':'notfound data' + str(ex)}
    
    def select_recipient_one_v1_new(self,email_thai,sidcode):
        self.sidcode = sidcode
        self.email_thai = email_thai
        try:
            sql = """ select "paper_lessdatastep" from "paper_lessdatastep" """
            
        except Exception as e:
            print(str(e))
            return {'result':'ER'}

    def select_recipient_one_v3_last(self,emailUser,sidcode):
        self.sidcode = sidcode
        self.emailUser = emailUser
        arr_tmp = []
        tmp_dict_ref = {}
        list_ref_all = []
        try:
            sql = ''' 
                SELECT
                    tb_step_data.data_json AS "data_json",
                    tb_step_data.update_time AS "update_time",
                    tb_step_data.upload_time AS "upload_time",
                    tb_step_data.biz_info AS "biz_info",
                    tb_step_data.view_details AS "view_details",
	                tb_step_data."qrCode_position" AS "qrCode_position",
                    tb_send_detail.send_user AS "send_user",
                    tb_send_detail.send_time AS "send_time",
                    tb_send_detail.status AS "status",
                    tb_send_detail.sender_name AS "sender_name",
                    tb_send_detail.sender_email AS "sender_email",
                    tb_send_detail.sender_position AS "sender_position",
                    tb_send_detail.file_id AS "file_id",
                    tb_send_detail.file_name AS "file_name",
                    tb_send_detail.tracking_id AS "tracking_id",
                    tb_send_detail.step_code AS "step_code",
                    tb_send_detail.step_data_sid AS "step_data_sid",
                    tb_send_detail.doc_id AS "document_Id",
                    tb_send_detail.template_webhook AS "template_webhook",
                    tb_send_detail.email_center AS "email_center",
                    tb_send_detail.recipient_email AS "recipient_email",
                    tb_send_detail.status_details AS "status_details",
                    tb_send_detail.document_status AS "document_status",
                    tb_send_detail.group_id AS "group_id",
                    tb_send_detail.stepnow AS "stepnow",
                    tb_send_detail.stepmax AS "stepmax",
                    tb_send_detail.status_service AS "status_service",
                    tb_send_detail.list_ref AS "list_ref",
                    tb_send_detail.ref_document AS "ref_document",
                    tb_send_detail.status_ref AS "status_ref",
                    tb_send_detail.last_digitsign AS "last_digitsign",
                    tb_doc_detail.typefile AS "typefile",
                    tb_doc_detail."documentJson" AS "documentJson",
                    tb_doc_detail."documentType" AS "documentType",
                    tb_doc_detail.urgent_type AS "urgent_type",
                    tb_doc_detail.digit_sign AS "digit_sign",
                    tb_doc_detail.attempted_folder AS "attempted_folder",
                    tb_doc_detail.sign_page_options AS "sign_page_options",
                    tb_doc_detail.options_page AS "options_page",
                    tb_doc_detail.data_document AS "data_document",
                    tb_pdf_storage.string_pdf AS "string_pdf",
                    tb_pdf_storage.string_sign AS "string_sign",
                    tb_pdf_storage.pdf_rejectorcancle AS "pdf_rejectorcancle",
                    tb_pdf_storage.path_pdf AS "path_pdf",
                    tb_pdf_storage.path_sign AS "path_sign",
                    tb_pdf_storage.PATH AS "path",
                    tb_pdf_storage.path_rejectorcancle AS "path_rejectorcancle" 
                FROM
                    tb_step_data
                    JOIN tb_send_detail ON tb_send_detail.step_data_sid = tb_step_data.sid
                    JOIN tb_doc_detail ON tb_doc_detail.step_id = tb_step_data.sid
                    JOIN tb_pdf_storage ON tb_pdf_storage.fid = tb_send_detail.file_id 
                WHERE
                    tb_step_data.sid = :tmpsid
            '''
            sql_CountTranfer = '''SELECT count(*) FROM tb_transferuser WHERE sid = :tmpsid '''
            connection = slave.connect() 
            result = connection.execute(text(sql),tmpsid=self.sidcode)
            result_CountTranfer = connection.execute(text(sql_CountTranfer),tmpsid=self.sidcode)
            resultQuery = [dict(row) for row in result]
            resultQuery_CountTranfer = [dict(row) for row in result_CountTranfer]
            status_tranfer = False
            status_grouphave = False
            arr_step_info = []
            list_step_email = []
            sign_detail = []
            sign_data = []
            tmp_status_file_code = 'Y'
            tmp_status_file_string = ''
            list_sign_info = []
            require_sign_info = []
            sign_detail_require = []
            acty_code = []
            tmp_tempname = ''
            tmp_condition = ''
            tmp_file_status_sum = ''
            tmp_file_user_status = ''
            tmp_timing = ''
            tmp_properties = ''
            statusGroup2 = False
            step_GroupV2 = []
            if resultQuery_CountTranfer[0]['count'] > 0:
                status_tranfer = True
            else:
                status_tranfer = False
            result_url = get_url_image_pdf_v1(self.sidcode)
            if result_url['result'] == 'OK':
                tmpmessageText = result_url['messageText']
                tmp_url_image = tmpmessageText
            else:
                tmp_url_image = []
            for n in range(len(resultQuery)):
                data = resultQuery[n]
                tmp_datetime = data['send_time']
                tmp_step_code = data['step_code']
                tmp_group_id = data['group_id']
                if data['list_ref'] != None and data['list_ref'] != [] and data['list_ref'] != '':
                    tmp_list_ref = eval(data['list_ref'])
                else:
                    tmp_list_ref = (data['list_ref'])
                tmp_status_service = data['status_service']  
                if tmp_group_id != None:
                    if tmp_group_id != '':
                            status_grouphave = True       
                if str(tmp_step_code).replace(' ','') != '':
                    sqlTemplate = '''
                        SELECT
                            tb_step_template."step_Name" AS "step_Name",
                            tb_step_template.condition_temp AS "condition_temp"
                        FROM
                            tb_step_template 
                        WHERE
                            tb_step_template."step_Code" =:tmpstepcode
                            AND tb_step_template.status =:tmpstatus
                    '''
                    resultTemplate = connection.execute(text(sqlTemplate),tmpstepcode=tmp_step_code,tmpstatus='ACTIVE')
                    resultQuery_Template= [dict(row) for row in resultTemplate]
                    if len(resultQuery_Template) > 0:
                        tmp_tempname = str(resultQuery_Template[0]['step_Name'])
                        tmp_condition = str(resultQuery_Template[0]['condition_temp'])
                document_timestamp = int(tmp_datetime.timestamp())
                tmp_datetime_display = convert_datetime_TH_2_display_sendTime(document_timestamp)
                try:
                    tmp_email_center = eval(data['email_center'])
                except Exception as e:
                    tmp_email_center = data['email_center']
                step_infomation = eval(data['data_json'])
                tmp_file_user_status_detail = []
                tmp_sign_detail_list = []
                tmp_list_step_infomation = []
                # print(step_infomation)
                if 'step_num' in step_infomation:
                    tmp_step_info = [eval(data['data_json'])]
                else:
                    tmp_step_info = eval(data['data_json'])
                if 'step_num' in step_infomation:
                    tmp_list_step_infomation.append(step_infomation)
                    step_infomation = tmp_list_step_infomation
                step_status = ''
                res_status_file = 'Y'
                step_before = ''
                step_list_before = []
                step_list_ = []
                step_list_next = []
                arr_step_totle = []
                step_me = ''
                step_sum_status = []
                sum_status_step_list = []
                list_check_step = []
                step_list_data = []
                max_step = (len(step_infomation))
                sum_status_step = []
                tmp_status_sum = []
                arr_email_list = []
                email_step_sum = []
                email_one_sum = []
                time_success = None
                step_time_1 = []
                sendtime = data['upload_time']
                list_my_email = []
                tmp_list_sign_id = []
                sign_info_id = []
                
                for i in range(len(step_infomation)):
                    list_check_step = []
                    json_step_info_2 = {}
                    step_list_data = []
                    step_status = []
                    step_email = []
                    tmp_step_num = ''
                    step_ = step_infomation[i]
                    step_num = step_infomation[i]['step_num']
                    json_step_info_2['step_status'] = ''
                    tmp_step_detail = step_['step_detail']
                    for u in range(len(tmp_step_detail)):
                        tmp_arr_step_detail = tmp_step_detail[u]
                        tmp_status = tmp_arr_step_detail['activity_status']
                        tmp_code = tmp_arr_step_detail['activity_code']
                        tmp_activity_data = tmp_arr_step_detail['activity_data']
                        tmp_time = tmp_arr_step_detail['activity_time']
                        for js in range(len(tmp_activity_data)):
                            if 'id' in tmp_activity_data[js]:
                                tmp_list_sign_id.append(tmp_activity_data[js]['id'])
                        tmp_email = str(tmp_arr_step_detail['one_email']).replace(' ','').lower()
                        if tmp_email == self.emailUser:                                    
                            tmp_step_num = u
                            for hg in range(len(tmp_code)):
                                if tmp_code[hg] == 'A03':
                                    sign_detail_require = []
                                    tmp_activity_data = tmp_arr_step_detail['activity_data'][hg]
                                    if 'status' in tmp_activity_data:
                                        if tmp_activity_data['status'] == 'incomplete':
                                            sign_detail_require.append(tmp_activity_data)
                                            list_my_email.append(u)
                            if 'step_sign' in  step_infomation[i]:
                                if  step_infomation[i]['step_sign']['status'] == True:
                                    tmp_data_ssign = step_infomation[i]['step_sign']['data']
                                    for zy in range(len(tmp_data_ssign)):
                                        if 'step_index' in tmp_data_ssign[zy]: 
                                            if len(tmp_data_ssign[zy]['step_index']) != 0:
                                                # print(tmp_step_num , tmp_data_ssign[zy]['step_index'])
                                                if tmp_step_num in tmp_data_ssign[zy]['step_index']:
                                                    if  tmp_data_ssign[zy]['status'] == 'incomplete':
                                                        sign_detail_require.append(tmp_data_ssign[zy])
                                            else:
                                                if 'id' in tmp_data_ssign[zy]:
                                                    if tmp_data_ssign[zy]['id'] not in tmp_list_sign_id:
                                                        if  tmp_data_ssign[zy]['status'] == 'incomplete':
                                                            sign_detail_require.append(tmp_data_ssign[zy])
                                                else:
                                                    sign_detail_require.append(tmp_data_ssign[zy])
                            # print(sign_detail_require , step_num)
                            info_step = {
                                'data':sign_detail_require,
                                'step_num':step_num
                            }
                            require_sign_info.append(info_step)
                        for s in range(len(tmp_code)):
                            if tmp_code[s] == 'A03':
                                step_status.append(tmp_status[s])
                                step_email.append(tmp_email)
                                email_one_sum.append(tmp_email)
                                #process หา timeline
                                if (tmp_arr_step_detail['activity_status'][s] == 'Complete' or tmp_arr_step_detail['activity_status'][s] =='Reject' or tmp_arr_step_detail['activity_status'][s] == 'Approve'):
                                    t1 = str(tmp_arr_step_detail['activity_time'][s])
                                    # print ('else activity_time',t1)
                                    time_success = change_to_Timestamp(t1)
                                    step_time_1.append(time_success)
                                #สิ้นสุดการหา timeline
                            elif tmp_code[s] == 'A04':
                                step_status.append(tmp_status[s])
                                step_email.append(tmp_email)
                                email_one_sum.append(tmp_email)
                                #process หา timeline
                                if (tmp_arr_step_detail['activity_status'][s] == 'Complete' or tmp_arr_step_detail['activity_status'][s] =='Reject' or tmp_arr_step_detail['activity_status'][s] == 'Approve'):
                                    # print(tmp_arr_step_detail['activity_time'][s])
                                    t1 = str(tmp_arr_step_detail['activity_time'][s])
                                    # print ('else activity_time',t1)
                                    time_success = change_to_Timestamp(t1)
                                    step_time_1.append(time_success)
                                #สิ้นสุดการหา timeline
                        timeline_ = getTimeline(sendtime,step_time_1)
                        tmp_timeline = timeline_  
                        list_timeline = getlistTimeline(sendtime,step_time_1)
                        tmp_timeline_list = list_timeline
                    email_step_sum.append(step_email)
                    if 'Reject' in step_status:
                        tmp_status_sum.append('Reject')
                    elif 'Approve' in step_status:
                        tmp_status_sum.append('Complete')
                    elif 'Complete' in step_status:
                        tmp_status_sum.append('Complete')
                    elif 'Incomplete' in step_status:
                        tmp_status_sum.append('Incomplete')
                    elif 'Pending' in step_status:
                        tmp_status_sum.append('Incomplete')
                    else:
                        tmp_status_sum.append('Complete')
                tmp_sign_pad = None
                # print(self.emailUser , email_one_sum)
                if self.emailUser in email_one_sum:
                    for zzi in range(len(step_infomation)):
                        list_check_step = []
                        json_step_info_2 = {}
                        step_list_data = []
                        step_status = []
                        step_ = step_infomation[zzi]
                        step_num = step_infomation[zzi]['step_num']
                        json_step_info_2['step_status'] = ''
                        tmp_step_detail = step_['step_detail']
                        
                        for zi in range(len(tmp_step_detail)):
                            tmp_arr_step_detail_2 = tmp_step_detail[zi]
                            oneMail = str(tmp_arr_step_detail_2['one_email']).replace(' ','').lower()
                            
                            tmp_step_me = int(step_num) - 1
                            step_num_int2 = int(step_num)
                            # print(oneMail, self.emailUser , tmp_status_sum[tmp_step_me])
                            if 'Reject' in tmp_status_sum:
                                arr_step_info.append('Reject')
                            elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Incomplete':
                                if self.emailUser not in arr_email_list:
                                    index_step_me = tmp_step_me
                                    if index_step_me != 0:
                                        while index_step_me > 0:
                                            if len(arr_step_info) == 0:
                                                index_step_me = index_step_me - 1
                                                if tmp_status_sum[index_step_me] == 'Incomplete':
                                                    arr_step_info.append('Incomplete')
                                                else:
                                                    if oneMail == self.emailUser:
                                                        if 'signpad' in step_:
                                                            tmp_sign_pad = step_['signpad']
                                                        else:
                                                            tmp_sign_pad = None
                                                    arr_step_info.append('Wait')
                                                arr_email_list.append(self.emailUser)
                                            else:
                                                index_step_me = index_step_me - 1
                                                continue
                                    else:
                                        if oneMail == self.emailUser:
                                            if 'signpad' in step_:
                                                tmp_sign_pad = step_['signpad']
                                            else:
                                                tmp_sign_pad = None
                                        arr_step_info.append('Wait')
                                if oneMail == self.emailUser:
                                    if 'signpad' in step_:
                                        tmp_sign_pad = step_['signpad']
                                    else:
                                        tmp_sign_pad = None
                            elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Complete':
                                if self.emailUser not in arr_email_list:
                                    for nz in range(step_num_int2,len(tmp_status_sum),1):
                                        if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                            arr_step_info.append('Incomplete')
                                        elif self.emailUser not in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                            arr_step_info.append('Progress')
                                    arr_email_list.append(self.emailUser)
                                if oneMail == self.emailUser:
                                    if 'signpad' in step_:
                                        tmp_sign_pad = step_['signpad']
                                    else:
                                        tmp_sign_pad = None
                    print(tmp_sign_pad)
                    if 'Reject' in arr_step_info:
                        res_status_file = 'R'
                        res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                    elif 'Wait' in arr_step_info:
                        res_status_file = 'W'
                        res_status_file_string = 'รออนุมัติ'
                    elif 'Incomplete' in arr_step_info:
                        res_status_file = 'Z'
                        res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                    elif 'Progress' in arr_step_info:
                        res_status_file = 'N'
                        res_status_file_string = 'กำลังดำเนินการ'                    
                    elif arr_step_info.count('Incomplete') >= 2:
                        res_status_file = 'Z'
                        res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                    else:
                        res_status_file = 'Y'
                        res_status_file_string = 'อนุมัติแล้ว'
                    tmp_status_file_code = res_status_file
                    tmp_status_file_string = res_status_file_string
                    status_step_sum = ''
                    sum_status_step_list = []
                    alr_mail = []
                    # json_data_res['step_info'] = eval(result_Select_step.data_json)
                    for i in range(len(step_infomation)):
                        sign_json_info = {}
                        tmp_sign_list_info = []
                        step_ = step_infomation[i]
                        step_num = step_infomation[i]['step_num']
                        json_step_info_2['step_status'] = ''
                        if 'step_sign' in step_:
                            tmp_stepsign = step_['step_sign']
                            tmp_status_stepsign = tmp_stepsign['status']
                            if tmp_status_stepsign == True:
                                tmp_data_stepsign = tmp_stepsign['data']
                                for y in range(len(tmp_data_stepsign)):
                                    step_signning = tmp_data_stepsign[y]
                                    if 'id' in step_signning:
                                        if step_signning['id'] not in tmp_list_sign_id:
                                            tmp_sign_list_info.append(step_signning)
                                        else:
                                            tmp_sign_list_info.append(step_signning)
                                    else:
                                        tmp_sign_list_info.append(step_signning)

                        for u in range(len(step_['step_detail'])):
                            step_2 = step_['step_detail'][u]
                            for k in range(len(step_2['activity_data'])): 
                                if 'status' in step_2['activity_data'][k]:                                            
                                    sign_json_info = step_2['activity_data'][k]
                                    if 'sign_llx' in step_2['activity_data'][k]:
                                        if 'id' in step_2['activity_data'][k]:
                                            if step_2['activity_data'][k]['id'] not in tmp_list_sign_id:
                                                tmp_sign_list_info.append(sign_json_info)
                                        else:
                                            tmp_sign_list_info.append(sign_json_info)
                        # print(tmp_sign_list_info)
                        sign_json_info = {
                            'data':tmp_sign_list_info,
                            'step_num':step_num
                        }
                        # print(sign_json_info)
                        tmp_sign_detail_list.append(sign_json_info)
                    list_step_all = []
                    for ii in range(len(step_infomation)):
                        list_step = []
                        step_ = step_infomation[ii]
                        for uu in range(len(step_['step_detail'])):
                            step_2 = step_['step_detail'][uu]
                            for kk in range(len(step_2['activity_code'])):
                                if step_2['activity_code'][kk] == 'A03':
                                    tmp_one_email = str(step_2['one_email']).replace(' ','').lower()
                                    list_step.append(step_2['activity_status'][kk])
                        # print('list_step',list_step)
                        list_step_all.append(list_step)
                    for i in range(len(step_infomation)):
                        list_step = []
                        list_check_step = []
                        json_step_info_2 = {}
                        step_list_data = []
                        step_ = step_infomation[i]
                        step_num = step_infomation[i]['step_num']
                        json_step_info_2['step_status'] = ''
                        for u in range(len(step_['step_detail'])):
                            # print('step_',step_)
                            step_2 = step_['step_detail'][u]
                            for k in range(len(step_2['activity_code'])):
                                print(step_2['activity_code'][k])
                                acty_code.append(step_2['activity_code'][k])
                                if step_2['activity_code'][k] == 'A03':
                                    tmp_one_email = str(step_2['one_email']).replace(' ','').lower()
                                    # list_step.append(step_2['activity_status'][k])
                                    # print('list_step',list_step)
                                    # print('step',step_2['activity_status'][k])
                                    if 'Complete' in list_step_all[i] or 'Approve' in list_step_all[i]:
                                        pass
                                    else:
                                        if self.emailUser == tmp_one_email:
                                            if self.emailUser not in alr_mail:
                                                # print('55555')
                                                # print('step_2',step_2)
                                                # arr_get[n]['data_json']['step_detail'][o]['activity_status'][s]
                                                # print(alr_mail ,step_2['activity_status'][k])
                                                if step_2['activity_status'][k] == 'Complete':
                                                    # alr_mail.append(step_2['one_email'])
                                                    tmp_file_user_status = step_2['activity_status'][k]
                                                elif step_2['activity_status'][k] == 'Approve':
                                                    # alr_mail.append(step_2['one_email'])
                                                    tmp_file_user_status = step_2['activity_status'][k]
                                                else:
                                                    alr_mail.append(step_2['one_email'])
                                                    tmp_file_user_status = step_2['activity_status'][k]
                                    # print(alr_mail)
                                    json_step_info = {}
                                    json_step_info['activity_status'] = step_2['activity_status'][k]
                                    json_step_info['one_email'] = tmp_one_email
                                    json_step_info['rf_step'] = None
                                    json_step_info['ref_step_num'] = None
                                    json_step_info['activity_code'] = step_2['activity_code'][k]
                                    if 'rf_step' in step_:
                                        if step_['rf_step'] != None:
                                            json_step_info['rf_step'] = step_['rf_step']
                                            try:
                                                json_step_info['ref_step_num'] = str(step_['rf_step']).split('-')[1]
                                            except Exception as e:
                                                json_step_info['ref_step_num'] = None
                                    tmp_account_name_eng = tmp_one_email
                                    tmp_account_name = tmp_one_email
                                    search = "%'{}'%".format(tmp_one_email)
                                    if json_step_info['one_email'] != '':
                                        try:
                                            result_name_eng = find_name_surename_by_username(tmp_one_email)
                                            result_name_th = fine_name_surename(tmp_one_email)
                                            tmp_account_name_eng = result_name_eng
                                            tmp_account_name = result_name_th
                                        except Exception as e:
                                            tmp_account_name = tmp_one_email
                                            tmp_account_name_eng = tmp_one_email
                                        # query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.like(search)).all()
                                        # if len(query_name_account) != 0:
                                        #     try:
                                        #         tmp_account_name = eval(query_name_account[0].citizen_data)
                                        #         tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                        #     except Exception as e:
                                        #         tmp_account_name = tmp_one_email
                                        #         exc_type, exc_obj, exc_tb = sys.exc_info()
                                        #         fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                                        #         print(exc_type, fname, exc_tb.tb_lineno)
                                    json_step_info['step_num'] = step_num
                                    json_step_info['account_name'] = tmp_account_name
                                    json_step_info['account_name_eng'] = tmp_account_name_eng
                                    list_check_step.append(json_step_info['activity_status'])
                                    step_list_data.append(json_step_info)
                                elif step_2['activity_code'][k] == 'A04':
                                    tmp_one_email = str(step_2['one_email']).replace(' ','').lower()
                                    # list_step.append(step_2['activity_status'][k])
                                    # print('list_step',list_step)
                                    # print('step',step_2['activity_status'][k])
                                    if 'Complete' in list_step_all[i] or 'Approve' in list_step_all[i]:
                                        pass
                                    else:
                                        if self.emailUser == tmp_one_email:
                                            if self.emailUser not in alr_mail:
                                                # print('55555')
                                                # print('step_2',step_2)
                                                # arr_get[n]['data_json']['step_detail'][o]['activity_status'][s]
                                                # print(alr_mail ,step_2['activity_status'][k])
                                                if step_2['activity_status'][k] == 'Complete':
                                                    # alr_mail.append(step_2['one_email'])
                                                    tmp_file_user_status = step_2['activity_status'][k]
                                                elif step_2['activity_status'][k] == 'Approve':
                                                    # alr_mail.append(step_2['one_email'])
                                                    tmp_file_user_status = step_2['activity_status'][k]
                                                else:
                                                    alr_mail.append(step_2['one_email'])
                                                    tmp_file_user_status = step_2['activity_status'][k]
                                    # print(alr_mail)
                                    json_step_info = {}
                                    json_step_info['activity_status'] = step_2['activity_status'][k]
                                    json_step_info['one_email'] = tmp_one_email
                                    json_step_info['rf_step'] = None
                                    json_step_info['ref_step_num'] = None
                                    json_step_info['activity_code'] = step_2['activity_code'][k]
                                    if 'rf_step' in step_:
                                        if step_['rf_step'] != None:
                                            json_step_info['rf_step'] = step_['rf_step']
                                            json_step_info['ref_step_num'] = str(step_['rf_step']).split('-')[1]
                                    tmp_account_name_eng = tmp_one_email
                                    tmp_account_name = tmp_one_email
                                    search = "%'{}'%".format(tmp_one_email)
                                    if json_step_info['one_email'] != '':
                                        try:
                                            result_name_eng = find_name_surename_by_username(tmp_one_email)
                                            result_name_th = fine_name_surename(tmp_one_email)
                                            tmp_account_name_eng = result_name_eng
                                            tmp_account_name = result_name_th
                                        except Exception as e:
                                            tmp_account_name = tmp_one_email
                                            tmp_account_name_eng = tmp_one_email
                                    json_step_info['step_num'] = step_num
                                    json_step_info['account_name'] = tmp_account_name
                                    json_step_info['account_name_eng'] = tmp_account_name_eng
                                    list_check_step.append(json_step_info['activity_status'])
                                    step_list_data.append(json_step_info)
                                json_step_info_2['step_info'] = step_list_data
                        if json_step_info_2['step_status'] == '':
                            if 'Reject' in list_check_step:
                                json_step_info_2['step_status'] = 'Reject'
                            elif 'Approve' in list_check_step:
                                json_step_info_2['step_status'] = 'Complete'
                            elif 'Complete' in list_check_step:
                                json_step_info_2['step_status'] = 'Complete'
                            elif 'Incomplete' in list_check_step:
                                json_step_info_2['step_status'] = 'Incomplete'
                            elif 'Pending' in list_check_step:
                                json_step_info_2['step_status'] = 'Incomplete'
                            else:
                                json_step_info_2['step_status'] = 'Complete'
                        # print(list_check_step)
                        if 'step_sign' in step_:
                            tmp_step_sign = step_['step_sign']
                            len_step_status = len(tmp_step_sign['data'])
                            # print(len_step_status)
                            if tmp_step_sign['status'] == True:
                                if 'Incomplete' in list_check_step and list_check_step.count('Incomplete') == len_step_status:
                                    json_step_info_2['step_status'] = 'Incomplete'
                                elif 'Complete' in list_check_step and list_check_step.count('Complete') == len_step_status:
                                    json_step_info_2['step_status'] = 'Complete'
                                else:
                                    json_step_info_2['step_status'] = 'Incomplete'
                                # for yt in range(len(list_check_step)):
                                #     tmp_status_step_one = list_check_step[yt]
                                    
                                #     print(tmp_status_step_one)
                        sum_status_step_list.append(json_step_info_2['step_status'])
                        tmp_file_user_status_detail.append(json_step_info_2)
                    if 'Reject' in sum_status_step_list:
                        status_step_sum = 'Reject'
                        # sendtime = json_data_res['send_time']
                        timing_ = timing(time_success,sendtime)
                        tmp_timing = timing_
                    elif 'Incomplete' in sum_status_step_list:
                        status_step_sum = 'Incomplete'
                        now = datetime.datetime.now()
                        # sendtime = json_data_res['send_time']
                        timing_ = timing(datetime.datetime.timestamp(now),sendtime)
                        tmp_timing = timing_
                    elif 'Pending' in sum_status_step_list:
                        status_step_sum = 'Incomplete'
                        now = datetime.datetime.now()
                        # sendtime = json_data_res['send_time']
                        timing_ = timing(datetime.datetime.timestamp(now),sendtime)
                        tmp_timing = timing_
                    elif 'Approve' in sum_status_step_list:
                        status_step_sum = 'Complete'
                        # sendtime = json_data_res['send_time']
                        timing_ = timing(time_success,sendtime)
                        tmp_timing = timing_
                    elif 'Complete' in sum_status_step_list:
                        status_step_sum = 'Complete'
                        # sendtime = json_data_res['send_time']
                        timing_ = timing(time_success,sendtime)
                        tmp_timing = timing_
                    else:
                        status_step_sum = 'Complete'
                        # sendtime = json_data_res['send_time']
                        timing_ = timing(time_success,sendtime)
                        tmp_timing = timing_
                    tmp_file_status_sum = status_step_sum
                else:
                    for zzi in range(len(step_infomation)):
                        list_check_step = []
                        json_step_info_2 = {}
                        step_list_data = []
                        step_status = []
                        step_ = step_infomation[zzi]
                        step_num = step_infomation[zzi]['step_num']
                        json_step_info_2['step_status'] = ''
                        tmp_step_detail = step_['step_detail']
                        
                        for zi in range(len(tmp_step_detail)):
                            tmp_arr_step_detail_2 = tmp_step_detail[zi]
                            oneMail = str(tmp_arr_step_detail_2['one_email']).replace(' ','').lower()
                            
                            tmp_step_me = int(step_num) - 1
                            step_num_int2 = int(step_num)
                            if 'Reject' in tmp_status_sum:
                                arr_step_info.append('Reject')
                            elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Incomplete':
                                if self.emailUser not in arr_email_list:
                                    index_step_me = tmp_step_me
                                    if index_step_me != 0:
                                        while index_step_me > 0:
                                            if len(arr_step_info) == 0:
                                                index_step_me = index_step_me - 1
                                                if tmp_status_sum[index_step_me] == 'Incomplete':
                                                    arr_step_info.append('Incomplete')
                                                else:
                                                    if oneMail == self.emailUser:
                                                        if 'signpad' in step_:
                                                            tmp_sign_pad = step_['signpad']
                                                        else:
                                                            tmp_sign_pad = None
                                                    arr_step_info.append('Wait')
                                                arr_email_list.append(self.emailUser)
                                            else:
                                                index_step_me = index_step_me - 1
                                                continue
                                    else:
                                        if oneMail == self.emailUser:
                                            if 'signpad' in step_:
                                                tmp_sign_pad = step_['signpad']
                                            else:
                                                tmp_sign_pad = None
                                        arr_step_info.append('Wait')
                                if oneMail == self.emailUser:
                                    if 'signpad' in step_:
                                        tmp_sign_pad = step_['signpad']
                                    else:
                                        tmp_sign_pad = None
                            elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Complete':
                                if self.emailUser not in arr_email_list:
                                    for nz in range(step_num_int2,len(tmp_status_sum),1):
                                        if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                            arr_step_info.append('Incomplete')
                                        elif self.emailUser not in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                            arr_step_info.append('Progress')
                                    arr_email_list.append(self.emailUser)
                                if oneMail == self.emailUser:
                                    if 'signpad' in step_:
                                        tmp_sign_pad = step_['signpad']
                                    else:
                                        tmp_sign_pad = None
                    if 'Reject' in arr_step_info:
                        res_status_file = 'R'
                        res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                    elif 'Wait' in arr_step_info:
                        res_status_file = 'W'
                        res_status_file_string = 'รออนุมัติ'
                    elif 'Incomplete' in arr_step_info:
                        res_status_file = 'Z'
                        res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                    elif 'Progress' in arr_step_info:
                        res_status_file = 'N'
                        res_status_file_string = 'กำลังดำเนินการ'                    
                    elif arr_step_info.count('Incomplete') >= 2:
                        res_status_file = 'Z'
                        res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                    else:
                        res_status_file = 'Y'
                        res_status_file_string = 'อนุมัติแล้ว'
                    tmp_status_file_code = res_status_file
                    tmp_status_file_string = res_status_file_string
                    status_step_sum = ''
                    sum_status_step_list = []
                    alr_mail = []
                    # json_data_res['step_info'] = eval(result_Select_step.data_json)
                    for i in range(len(step_infomation)):
                        sign_json_info = {}
                        tmp_sign_list_info = []
                        step_ = step_infomation[i]
                        step_num = step_infomation[i]['step_num']
                        json_step_info_2['step_status'] = ''
                        if 'step_sign' in step_:
                            tmp_stepsign = step_['step_sign']
                            tmp_status_stepsign = tmp_stepsign['status']
                            if tmp_status_stepsign == True:
                                tmp_data_stepsign = tmp_stepsign['data']
                                for y in range(len(tmp_data_stepsign)):
                                    step_signning = tmp_data_stepsign[y]
                                    if 'id' in step_signning:
                                        if step_signning['id'] not in tmp_list_sign_id:
                                            tmp_sign_list_info.append(step_signning)
                                        else:
                                            tmp_sign_list_info.append(step_signning)
                                    else:
                                        tmp_sign_list_info.append(step_signning)

                        for u in range(len(step_['step_detail'])):
                            step_2 = step_['step_detail'][u]
                            for k in range(len(step_2['activity_data'])): 
                                if 'status' in step_2['activity_data'][k]:                                            
                                    sign_json_info = step_2['activity_data'][k]
                                    if 'sign_llx' in step_2['activity_data'][k]:
                                        if 'id' in step_2['activity_data'][k]:
                                            if step_2['activity_data'][k]['id'] not in tmp_list_sign_id:
                                                tmp_sign_list_info.append(sign_json_info)
                                        else:
                                            tmp_sign_list_info.append(sign_json_info)
                        # print(tmp_sign_list_info)
                        sign_json_info = {
                            'data':tmp_sign_list_info,
                            'step_num':step_num
                        }
                        # print(sign_json_info)
                        tmp_sign_detail_list.append(sign_json_info)
                    for i in range(len(step_infomation)):
                        list_check_step = []
                        json_step_info_2 = {}
                        step_list_data = []
                        step_ = step_infomation[i]
                        step_num = step_infomation[i]['step_num']
                        json_step_info_2['step_status'] = ''
                        for u in range(len(step_['step_detail'])):
                            step_2 = step_['step_detail'][u]
                            for k in range(len(step_2['activity_code'])):
                                acty_code.append(step_2['activity_code'][k])
                                if step_2['activity_code'][k] == 'A03':
                                    tmp_one_email = str(step_2['one_email']).replace(' ','').lower()
                                    if self.emailUser == tmp_one_email:
                                        if self.emailUser not in alr_mail:
                                            # print(alr_mail ,step_2['activity_status'][k])
                                            # print('k',step_2['activity_code'][k])
                                            # print('kk',k)
                                            if step_2['activity_status'][k] == 'Complete':
                                                # alr_mail.append(step_2['one_email'])
                                                tmp_file_user_status = step_2['activity_status'][k]
                                            elif step_2['activity_status'][k] == 'Approve':
                                                # alr_mail.append(step_2['one_email'])
                                                tmp_file_user_status = step_2['activity_status'][k]
                                            else:
                                                alr_mail.append(step_2['one_email'])
                                                tmp_file_user_status = step_2['activity_status'][k]

                                    # print(alr_mail)
                                    json_step_info = {}
                                    json_step_info['activity_status'] = step_2['activity_status'][k]
                                    json_step_info['one_email'] = tmp_one_email
                                    json_step_info['rf_step'] = None
                                    json_step_info['ref_step_num'] = None
                                    if 'rf_step' in step_:
                                        if step_['rf_step'] != None:
                                            json_step_info['rf_step'] = step_['rf_step']
                                            json_step_info['ref_step_num'] = str(step_['rf_step']).split('-')[1]

                                    tmp_account_name = tmp_one_email
                                    tmp_account_name_eng = tmp_one_email
                                    search = "%'{}'%".format(tmp_one_email)
                                    if json_step_info['one_email'] != '':
                                        try:
                                            result_name_eng = find_name_surename_by_username(tmp_one_email)
                                            result_name_th = fine_name_surename(tmp_one_email)
                                            tmp_account_name_eng = result_name_eng
                                            tmp_account_name = result_name_th
                                        except Exception as e:
                                            tmp_account_name = tmp_one_email
                                            tmp_account_name_eng = tmp_one_email
                                        # query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.like(search)).all()
                                        # if len(query_name_account) != 0:
                                        #     try:
                                        #         tmp_account_name = eval(query_name_account[0].citizen_data)
                                        #         tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                        #     except Exception as e:
                                        #         tmp_account_name = tmp_one_email
                                        #         exc_type, exc_obj, exc_tb = sys.exc_info()
                                        #         fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                                        #         print(exc_type, fname, exc_tb.tb_lineno)
                                    json_step_info['step_num'] = step_num
                                    json_step_info['account_name'] = tmp_account_name
                                    json_step_info['account_name_eng'] = tmp_account_name_eng
                                    list_check_step.append(json_step_info['activity_status'])
                                    step_list_data.append(json_step_info)
                                elif step_2['activity_code'][k] == 'A04':
                                    tmp_one_email = str(step_2['one_email']).replace(' ','').lower()
                                    if self.emailUser == tmp_one_email:
                                        if self.emailUser not in alr_mail:
                                            if step_2['activity_status'][k] == 'Complete':
                                                # alr_mail.append(step_2['one_email'])
                                                tmp_file_user_status = step_2['activity_status'][k]
                                            elif step_2['activity_status'][k] == 'Approve':
                                                # alr_mail.append(step_2['one_email'])
                                                tmp_file_user_status = step_2['activity_status'][k]
                                            else:
                                                alr_mail.append(step_2['one_email'])
                                                tmp_file_user_status = step_2['activity_status'][k]

                                    # print(alr_mail)
                                    json_step_info = {}
                                    json_step_info['activity_status'] = step_2['activity_status'][k]
                                    json_step_info['one_email'] = tmp_one_email
                                    json_step_info['rf_step'] = None
                                    json_step_info['ref_step_num'] = None
                                    if 'rf_step' in step_:
                                        if step_['rf_step'] != None:
                                            json_step_info['rf_step'] = step_['rf_step']
                                            json_step_info['ref_step_num'] = str(step_['rf_step']).split('-')[1]
                                    tmp_account_name_eng = tmp_one_email
                                    tmp_account_name = tmp_one_email
                                    search = "%'{}'%".format(tmp_one_email)
                                    if json_step_info['one_email'] != '':
                                        try:
                                            result_name_eng = find_name_surename_by_username(tmp_one_email)
                                            result_name_th = fine_name_surename(tmp_one_email)
                                            tmp_account_name_eng = result_name_eng
                                            tmp_account_name = result_name_th
                                        except Exception as e:
                                            tmp_account_name = tmp_one_email
                                            tmp_account_name_eng = tmp_one_email
                                        # query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.like(search)).all()
                                        # if len(query_name_account) != 0:
                                        #     try:
                                        #         tmp_account_name = eval(query_name_account[0].citizen_data)
                                        #         tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                        #     except Exception as e:
                                        #         tmp_account_name = tmp_one_email
                                        #         exc_type, exc_obj, exc_tb = sys.exc_info()
                                        #         fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                                        #         print(exc_type, fname, exc_tb.tb_lineno)
                                    json_step_info['step_num'] = step_num
                                    json_step_info['account_name'] = tmp_account_name
                                    json_step_info['account_name_eng'] = tmp_account_name_eng
                                    list_check_step.append(json_step_info['activity_status'])
                                    step_list_data.append(json_step_info)
                            json_step_info_2['step_info'] = step_list_data
                        
                        
                        # print(json_step_info_2)
                        if json_step_info_2['step_status'] == '':
                            if 'Reject' in list_check_step:
                                json_step_info_2['step_status'] = 'Reject'
                            elif 'Approve' in list_check_step:
                                json_step_info_2['step_status'] = 'Complete'
                            elif 'Complete' in list_check_step:
                                json_step_info_2['step_status'] = 'Complete'
                            elif 'Incomplete' in list_check_step:
                                json_step_info_2['step_status'] = 'Incomplete'
                            elif 'Pending' in list_check_step:
                                json_step_info_2['step_status'] = 'Incomplete'
                            else:
                                json_step_info_2['step_status'] = 'Complete'
                        # print(list_check_step)
                        if 'step_sign' in step_:
                            tmp_step_sign = step_['step_sign']
                            len_step_status = len(tmp_step_sign['data'])
                            # print(len_step_status)
                            if tmp_step_sign['status'] == True:
                                if 'Incomplete' in list_check_step and list_check_step.count('Incomplete') == len_step_status:
                                    json_step_info_2['step_status'] = 'Incomplete'
                                elif 'Complete' in list_check_step and list_check_step.count('Complete') == len_step_status:
                                    json_step_info_2['step_status'] = 'Complete'
                                else:
                                    json_step_info_2['step_status'] = 'Incomplete'
                                # for yt in range(len(list_check_step)):
                                #     tmp_status_step_one = list_check_step[yt]
                                    
                                #     print(tmp_status_step_one)
                        sum_status_step_list.append(json_step_info_2['step_status'])
                        tmp_file_user_status_detail.append(json_step_info_2)
                    if 'Reject' in sum_status_step_list:
                        status_step_sum = 'Reject'
                        # sendtime = json_data_res['send_time']
                        timing_ = timing(time_success,sendtime)
                        tmp_timing = timing_
                    elif 'Incomplete' in sum_status_step_list:
                        status_step_sum = 'Incomplete'
                        now = datetime.datetime.now()
                        # sendtime = json_data_res['send_time']
                        timing_ = timing(datetime.datetime.timestamp(now),sendtime)
                        tmp_timing = timing_
                    elif 'Pending' in sum_status_step_list:
                        status_step_sum = 'Incomplete'
                        now = datetime.datetime.now()
                        # sendtime = json_data_res['send_time']
                        timing_ = timing(datetime.datetime.timestamp(now),sendtime)
                        tmp_timing = timing_
                    elif 'Approve' in sum_status_step_list:
                        status_step_sum = 'Complete'
                        # sendtime = json_data_res['send_time']
                        timing_ = timing(time_success,sendtime)
                        tmp_timing = timing_
                    elif 'Complete' in sum_status_step_list:
                        status_step_sum = 'Complete'
                        # sendtime = json_data_res['send_time']
                        timing_ = timing(time_success,sendtime)
                        tmp_timing = timing_
                    else:
                        status_step_sum = 'Complete'
                        # sendtime = json_data_res['send_time']
                        timing_ = timing(time_success,sendtime)
                        tmp_timing = timing_
                    tmp_file_status_sum = status_step_sum
                tmp_sign_detail = sign_detail
                
                tmp_view_details = eval(data['view_details'])
                if data['qrCode_position'] != None or str(data['qrCode_position']).replace(' ','') != '':
                    tmp_qrCode_position = eval(data['qrCode_position'])
                    tmp_qrCode_status = True
                else:
                    tmp_qrCode_position = data['qrCode_position']
                    tmp_qrCode_status = False          
                status_previeweform = False
                if 'A04' in acty_code:
                    status_previeweform = True   
                tmpstep_group = None
                tmpstatus_group = False
                if data['options_page'] != None:
                    option_page =  eval(data['options_page'])
                    if 'service_properties' in option_page:
                        service_properties = option_page['service_properties'] 
                        if 'group_detail' in option_page:
                            tmp_group_details = option_page['group_detail']
                            if 'group_status' in tmp_group_details:
                                if tmp_group_details['group_status'] == True:
                                    if tmp_group_details['group_type'] == '2':
                                        statusGroup2 = True
                                        for nn in  range(len(service_properties)):
                                            ser = eval(str(service_properties[nn]))
                                            if 'name_service' in ser :
                                                name_service = ser['name_service']
                                                if name_service == 'GROUP2':
                                                    other = ser['other']
                                                    for ni in range(len(other)):
                                                        ot = eval(str(other[ni]))
                                                        tmp_properties = ot['properties']
                                    else:
                                        for nn in  range(len(service_properties)):
                                            ser = eval(str(service_properties[nn]))
                                            if 'name_service' in ser :
                                                name_service = ser['name_service']
                                                if name_service == 'GROUP':
                                                    other = ser['other']
                                                    for ni in range(len(other)):
                                                        ot = eval(str(other[ni]))
                                                        tmp_properties = ot['properties']
                            
                if data['data_document'] == None:
                    tmpdatadocumenttype = None
                else:
                    tmpdatadocumenttype = None
                    tmpchecksystem = data_doc(data['data_document'])
                    if tmpchecksystem['result'] == 'OK':
                        if 'sub' in tmpchecksystem['messageText']:
                            tmpdatadocumenttype = tmpchecksystem['messageText']['sub']
                tmplast_digitsign = data['last_digitsign']
                if tmplast_digitsign == "None":
                    tmplast_digitsign = None
                if tmplast_digitsign == "true":
                    tmplast_digitsign = True
                if tmplast_digitsign == "false":
                    tmplast_digitsign = False
                if data['options_page'] == None:
                    tmp_option_page = []
                else:                                
                    tmp_option_page = eval(data['options_page'])
                    tmp_options_page_document = [tmp_option_page]
                    if 'ca_require' in tmp_option_page:
                        tmp_ca_require = tmp_option_page['ca_require']
                        if type(tmp_ca_require) is bool:
                            tmp_digit_sign = bool(tmp_ca_require)
                        else:
                            tmp_digit_sign = ""
                    else:
                        tmp_digit_sign = bool(data['digit_sign'])
                    if 'group_detail' in tmp_option_page:
                        tmp_group_details = tmp_option_page['group_detail']
                        if 'group_status' in tmp_group_details:
                            if tmp_group_details['group_status'] == True:
                                tmpstatus_group = True
                                tmpstep_group = tmp_group_details['step_num']
                tmp_documentJson = eval(data['documentJson'])
                tmp_strdocument = str(data['documentJson']) 
                if data['string_sign'] != None:
                    if data['string_sign'] != None and data['path_sign'] != None:
                        r = readfile_pdfsign_v1(data['path_sign'])
                        if 'basePDF' in r:
                            tmppdf = r['basePDF']
                        else:
                            tmppdf = data['string_sign']                                    
                    elif data['string_sign'] != None and data['path_sign'] == None:
                        tmppdf = data['string_sign']
                    tmp_file_status = 'Complete'
                else:
                    if data['string_sign'] == None and data['path_sign'] == None:
                        r = readfile_pdfsign_v1(data['path_pdf'])
                        if r['result'] == 'OK':
                            tmppdf = r['basePDF']
                        else:
                            tmppdf = data['string_pdf']
                    tmp_file_status = 'Incomplete'
                if tmp_list_ref != None and tmp_list_ref != '' and tmp_list_ref != []:
                    for r in range(len(tmp_list_ref)):
                        result_ref = connection.execute(text('SELECT "doc_id","file_name","file_id" FROM "tb_send_detail" JOIN "tb_pdf_storage" ON "fid" = "file_id" WHERE step_data_sid=:step_data_sid OR doc_id=:tmpdoc_id'),step_data_sid=tmp_list_ref[r],tmpdoc_id=tmp_list_ref[r])
                        tmp_query = [dict(row) for row in result_ref]
                        tmp_dict_ref = {
                            'sid' : tmp_list_ref[r],
                            'doc_id' : tmp_query[0]['doc_id'],
                            'file_name' : tmp_query[0]['file_name'],
                        }
                        list_ref_all.append(tmp_dict_ref)
                try:
                    tmpsender_name = eval(data['sender_name'])
                except Exception as e:
                    tmpsender_name = data['sender_name']
                tmpemail_sender = data['sender_email']
                connection.close()
                info = {
                    'type':tmpdatadocumenttype,
                    'preview_eform':status_previeweform,
                    'url_image':tmp_url_image,
                    'pdfData':tmppdf,
                    'attempted_folder':data['attempted_folder'],
                    'condition_template':tmp_condition,
                    'digit_sign':tmp_digit_sign,
                    'last_digitsign':tmplast_digitsign,
                    'document_Id':data['document_Id'],
                    'document_details':tmp_documentJson,
                    'document_details_string':tmp_strdocument,
                    'document_time':document_timestamp,
                    'email_center':tmp_email_center,
                    'file_id':int(data['file_id']),
                    'file_name':data['file_name'],
                    'file_status':tmp_file_status,
                    'file_status_sum':tmp_file_status_sum,
                    'file_user_status':tmp_file_user_status,
                    'file_user_status_detail':tmp_file_user_status_detail,
                    'options_page_document':tmp_options_page_document,
                    'qrCode_position':tmp_qrCode_position,
                    'qrCode_status':tmp_qrCode_status,
                    'send_time':tmp_datetime,
                    'send_time_display':tmp_datetime_display,
                    'send_time_string':str(tmp_datetime).split('+')[0],
                    'sender_email':tmpemail_sender,
                    'sender_name':tmpsender_name,
                    # 'sender_name_eng':find_name_surename_by_username(tmpemail_sender),
                    'sender_position':data['sender_position'],
                    'sign_detail':tmp_sign_detail,
                    'signpad':tmp_sign_pad,
                    'stamp_all':data['sign_page_options'],
                    'status':data['status'],
                    'status_file_code':tmp_status_file_code,
                    'status_file_string':tmp_status_file_string,
                    'step_code':data['step_code'],
                    'step_data_sid':data['step_data_sid'],
                    'step_info':tmp_step_info,
                    'template_name':tmp_tempname,
                    'template_webhook':data['template_webhook'],
                    'timeline':tmp_timeline,
                    'timeline_list':tmp_timeline_list,
                    'timing':tmp_timing,
                    'tracking_id':data['tracking_id'],
                    'urgent_code':data['urgent_type'],
                    'view_details':tmp_view_details,
                    'sign_info':tmp_sign_detail_list,
                    'sign_require':require_sign_info,
                    'group_status':tmpstatus_group,
                    'group_stepnum':tmpstep_group,
                    'document_data':tmp_properties,
                    'status_tranfer':status_tranfer,
                    'group':status_grouphave,
                    'list_ref' : list_ref_all,
                    'status_service' : tmp_status_service,
                    # 'group2': statusGroup2,
                    # 'step_GroupV2': step_GroupV2
                }
                arr_tmp.append(info)
            return {'result':'OK','messageText':arr_tmp}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':None,'messageER':str(e)}
        finally:
            connection.close()
      
    
    def select_querydocument_group_v1(self,email_one,document_type,group_id):
        self.email_one = email_one
        self.document_type = document_type
        self.group_id = group_id
        tmp_arrjson = []
        tmp_query = []
        count = 0
        search = "%'{}'%".format(self.email_one)
        try:
            if self.group_id != None and self.email_one != None and self.document_type == None:
                sql = '''
                    SELECT
                        tb_group_document.ID,
                        tb_group_document.sid_group,
                        tb_group_document.data_group,
                        tb_group_document.updatetime,
                        tb_group_document.email_group,
                        tb_group_document.status,
                        tb_group_document.create_by,
                        tb_group_document.update_by,
                        tb_group_document.step_group,
                        tb_group_document.step_group_detail,
                        tb_group_document.group_data_json,
                        tb_group_document.group_other,
                        tb_group_document.email_view_group,
                        tb_group_document.tracking_group,
                        tb_group_document.status_group,
                        tb_group_document.group_title,
                        tb_group_document.group_name,
                        tb_group_document.document_type,
                        tb_group_document.bizinfo,
                        tb_group_document.group_status,
                        tb_group_document.cover_page,
                        tb_group_document.calculate_fieds,
                        tb_group_document.maxstep,
                        tb_group_document.email_middle,
                        tb_group_document.html_data,
                        tb_group_document.json_data,
                        tb_group_document.average_data,
                        tb_group_document.pdf_org,
                        tb_group_document.pdf_sign,
                        tb_group_document.hash_id,
                        tb_process_request."id" AS "process_id",
                        CASE
                            WHEN tb_process_request.status = 'ONPROCESS' THEN
                        TRUE ELSE FALSE 
                        END AS process_status
                    FROM
                        tb_group_document
                        LEFT JOIN tb_process_request ON tb_process_request.group_id = "tb_group_document".ID :: TEXT 
                        AND tb_process_request.name_process = 'SIGN' 
                        AND tb_process_request.email = :tmpemail
                    WHERE
                        tb_group_document.status = :status 
                        AND tb_group_document.ID = :tmpid
                '''
                with engine.connect() as connection:
                    result_db = connection.execute(text(sql),status='ACTIVE',tmpid=self.group_id,tmpemail=self.email_one)
                    tmp_query = [dict(row) for row in result_db]
                    connection.close() 
            elif self.email_one != None and self.document_type != None and self.group_id == None:
                with engine.connect() as connection:
                    result_db = connection.execute(text('SELECT "tb_group_document".* FROM "tb_group_document" WHERE ("tb_group_document"."status"=:tmpstatus AND "tb_group_document"."document_type"=:tmpdocument_type AND ("tb_group_document"."email_view_group" LIKE :tmpemail_view_group OR "tb_group_document"."status_group" LIKE :tmpstatus_group)) '),tmpstatus='ACTIVE',tmpdocument_type=self.document_type,tmpid=self.group_id,tmpemail_view_group=search,tmpstatus_group=search)
                    tmp_query = [dict(row) for row in result_db]
                    connection.close()
            elif self.email_one != None and self.document_type == None and self.group_id == None:
                with engine.connect() as connection:
                    result_db = connection.execute(text('SELECT "tb_group_document".* FROM "tb_group_document" WHERE ("tb_group_document"."status"=:tmpstatus AND ("tb_group_document"."email_view_group" LIKE :tmpemail_view_group OR "tb_group_document"."status_group" LIKE :tmpstatus_group)) '),tmpstatus='ACTIVE',tmpid=self.group_id,tmpemail_view_group=search,tmpstatus_group=search)
                    tmp_query = [dict(row) for row in result_db]
                    connection.close()
            if len(tmp_query) != 0:
                for n in range(len(tmp_query)):
                    tmp_step_group_detail = None
                    tmp_pdf = None
                    jsonurl_info = None
                    tmp_group_title = None
                    tmp_cover_page = None
                    tmp_step_group = None
                    tmp_maxstep = None
                    list_file_name = []
                    tmp_arr_status_group = []
                    tmp_arr_status_email = []
                    tmp_arr_status_group_001 = []
                    tmparr_stepstatus = []
                    arr_email_list = []
                    json_tmp = {}
                    tmp_text_status = 'Y'
                    tmp_text_status_string = 'อนุมัติแล้ว'
                    tmp_arr_data_sum_01 = []
                    tmp_json = tmp_query[n]
                    tmp_processid =None
                    tmp_color = None
                    data_biz = None
                    tmp_groupid = tmp_json['id']
                    
                    tmp_sidgroup = tmp_json['sid_group']
                    tmp_updatetime = tmp_json['updatetime']
                    tmp_status = tmp_json['status']
                    tmp_group_other = tmp_json['group_other']
                    tmp_group_data_json = tmp_json['group_data_json']
                    tmp_status_group = tmp_json['status_group']
                    tmp_email_view_group = tmp_json['email_view_group']
                    tmp_group_status = tmp_json['group_status']
                    if tmp_group_status == None:
                        tmp_group_status = 'N'
                    tmp_calculate_fieds = tmp_json['calculate_fieds']
                    tmp_document_type = tmp_json['document_type']
                    tmp_group_title = tmp_json['group_title']
                    tmp_tracking_group = tmp_json['tracking_group']
                    tmp_json_data = tmp_json['json_data']
                    try:
                        tmp_average_data = eval(tmp_json['average_data'])
                    except Exception as e:
                        tmp_average_data = None
                    query_document = None
                    if 'bizinfo' in tmp_json :
                        if tmp_json['bizinfo'] != None:
                            if tmp_json['bizinfo'] != '':
                                eval_biz = eval(tmp_json['bizinfo'])
                                if type(eval_biz) == dict:
                                    for x in range(len(tmp_json['bizinfo'])):
                                        tmp_biz = {}
                                        tmp_biz['id_card_num'] = eval_biz['id_card_num']
                                        tmp_biz['first_name_th'] = eval_biz['first_name_th']
                                        tmp_biz['first_name_eng'] = eval_biz['first_name_eng']
                                        tmp_biz['role_name'] = eval_biz['role_name']
                                        tmp_biz['dept_id'] = eval_biz['dept_id']
                                    data_biz = tmp_biz
                                elif type(eval_biz) == list:
                                    for x in range(len(tmp_query['bizinfo'])):
                                        tmp_biz = {}
                                        tmp_biz['id_card_num'] = eval_biz[0]['id_card_num']
                                        tmp_biz['first_name_th'] = eval_biz[0]['first_name_th']
                                        tmp_biz['first_name_eng'] = eval_biz[0]['first_name_eng']
                                        tmp_biz['role_name'] = eval_biz[0]['role_name']
                                        tmp_biz['dept_id'] = eval_biz[0]['dept_id']
                                    data_biz = tmp_biz
                            else:
                                data_biz =None
                    if 'bizinfo' in tmp_json :
                        if tmp_json['bizinfo'] != None:
                            if tmp_json['bizinfo'] != '':
                                query_document = db.session.query(paper_lessdocument_detail)\
                                    .filter(and_(paper_lessdocument_detail.documentType==tmp_json['document_type'],paper_lessdocument_detail.documentStatus=='ACTIVE',paper_lessdocument_detail.biz_info.contains(data_biz['id_card_num'])))\
                                    .order_by(desc(paper_lessdocument_detail.documentUpdate)).first()
                            else:
                                query_document = db.session.query(paper_lessdocument_detail)\
                                    .filter(and_(paper_lessdocument_detail.documentType==tmp_json['document_type'],paper_lessdocument_detail.documentStatus=='ACTIVE',paper_lessdocument_detail.biz_info.contains==''))\
                                    .order_by(desc(paper_lessdocument_detail.documentUpdate)).first()
                    tmpdocumentdetail = None
                    if query_document != None:
                        tmpdocumentdetail = query_document.documentJson
                        if tmpdocumentdetail != None:
                            tmpdocumentdetail = eval(tmpdocumentdetail)
                    if tmp_group_title != None:
                        tmp_group_title = eval(tmp_group_title)
                    tmpurl_html_data = None
                    tmp_html_data = None
                    tmp_processid = tmp_json['process_id']
                    tmp_process_status = tmp_json['process_status']
                    if self.group_id != None and self.email_one != None and self.document_type == None:
                        tmp_maxstep = tmp_json['maxstep']
                        tmp_step_group = tmp_json['step_group']
                        tmp_step_group_detail = tmp_json['step_group_detail']
                        tmp_pdf_org = tmp_json['pdf_org']
                        tmp_pdf_sign = tmp_json['pdf_sign']
                        tmp_hashid = tmp_json['hash_id']
                        tmp_cover_page = tmp_json['cover_page']
                        tmp_html_data = tmp_json['html_data']
                        if tmp_html_data != None:
                            tmpurl_html_data = myUrl_domain + 'api/v1/html?group_id=' + str(tmp_groupid)
                        # query_process = db.session.query(tb_process_request)\
                        #     .filter(and_(tb_process_request.group_id==str(tmp_groupid),tb_process_request.email==self.email_one))\
                        #     .order_by(desc(tb_process_request.datetime)).first()
                        # if query_process != None:
                        #     tmp_json_process = query_process.__dict__
                        #     tmp_processid = tmp_json_process['id']
                        if tmp_maxstep != None:
                            tmp_maxstep = str(tmp_maxstep)
                        if tmp_step_group != None:
                            if tmp_step_group != '':
                                tmp_step_group = eval(tmp_step_group)
                                if len(tmp_step_group) != 0:
                                    tmp_step_group = tmp_step_group[0]
                                    print(tmp_step_group)
                        if tmp_cover_page != None:
                            if tmp_cover_page != '':
                                tmp_cover_page = eval(tmp_cover_page)
                            else:
                                tmp_cover_page = None
                        if tmp_step_group_detail != None:
                            tmp_step_group_detail = eval(tmp_step_group_detail)
                        if tmp_pdf_sign != None:
                            tmp_pdf = tmp_pdf_sign
                        else:
                            tmp_pdf = tmp_pdf_org
                        jsonurl_info = None
                        if tmp_pdf != None:
                            url_downloadpdf = myUrl_domain + 'api/v1/download/group_pdf?groupid=' + tmp_hashid
                            url_viewpdf = myUrl_domain + 'api/v1/view/group_pdf?groupid=' + tmp_hashid
                            jsonurl_info = {'view_pdf':url_viewpdf,'download_pdf':url_downloadpdf}
                        list_file_name = []
                        # path_image = os.getcwd() + '/storage/image/' + self.group_id
                        path_image = path_global_1 + '/storage/image/' + self.group_id
                        try:
                            for the_file in os.listdir(path_image):
                                file_path = os.path.join(path_image, the_file)
                                # print(file_path)
                                filename_only = str(file_path).split('/')[-1]
                                url_view_image = myUrl_domain + 'api/view2/pdf_image/' + self.group_id +'/' + filename_only
                                list_file_name.append({'image_Url': url_view_image})
                        except Exception as e:
                            list_file_name = []
                        
                    if tmp_calculate_fieds != None:
                        tmp_calculate_fieds = eval(tmp_calculate_fieds)
                    status_viewGroup = False
                    if tmp_email_view_group != None:
                        tmp_email_view_group = eval(tmp_email_view_group)
                        if len(tmp_email_view_group) != 0:
                            for z in range(len(tmp_email_view_group)):
                                if self.email_one in tmp_email_view_group[z]['email_view_group']:
                                    status_viewGroup = True
                    if tmp_group_status == 'Y':
                        tmp_text_status = 'Y'
                        tmp_text_status_string = 'อนุมัติแล้ว'
                    elif tmp_group_status == 'R':
                        tmp_text_status = 'R'
                        tmp_text_status_string = 'ปฎิเสธอนุมัติ'
                    elif tmp_group_status == 'N':
                        if tmp_status_group != None:
                            tmp_status_group = eval(tmp_status_group)
                            for z in range(len(tmp_status_group)):
                                tmpstatusgroup = tmp_status_group[z]
                                tmp_arr_status_group.append(tmpstatusgroup['status'])
                                tmp_arr_status_email.append(tmpstatusgroup['email_one'])
                        # print(tmp_arr_status_group)
                        # print(tmp_arr_status_email)
                        count_email = tmp_arr_status_email.count(self.email_one)
                        for g in range(len(tmp_arr_status_group)):
                            tmpstatus = tmp_arr_status_group[g]
                            tmpemailone = tmp_arr_status_email[g]
                            if type(tmpemailone) is list:
                                for h in tmpemailone:
                                    if str(self.email_one).lower() == str(h).lower().replace(' ',''):
                                        my_status = tmpstatus
                                        tmpemailone = self.email_one
                            if tmpemailone == self.email_one:
                                my_status = tmpstatus
                            index_stepnum = g - 1
                            tmpbefore_status = tmp_arr_status_group[index_stepnum]
                            tmpbefore_emailone = tmp_arr_status_email[index_stepnum] 
                            if 'Reject' in tmp_arr_status_group:
                                step_now = g
                                tmparr_stepstatus.append('Reject')
                            elif tmpemailone == self.email_one and my_status == 'Incomplete_input':
                                step_now = g
                                tmparr_stepstatus.append('Wait_input')
                            elif tmpemailone == self.email_one and my_status == 'Incomplete_1':
                                step_now = g
                                tmparr_stepstatus.append('Incomplete')
                            elif tmpemailone == self.email_one and my_status == 'Incomplete':                                      
                                if self.email_one not in arr_email_list:
                                    index_step_me = g
                                    if index_step_me != 0:
                                        while index_step_me > 0:
                                            if len(tmparr_stepstatus) == 0:
                                                index_step_me = index_step_me - 1
                                                if tmp_arr_status_group[index_step_me] == 'Incomplete_1':
                                                    step_now = g
                                                    tmparr_stepstatus.append('Incomplete')
                                                elif tmp_arr_status_group[index_step_me] == 'Incomplete':
                                                    step_now = g
                                                    tmparr_stepstatus.append('Incomplete')
                                                else:
                                                    step_now = g
                                                    tmparr_stepstatus.append('Wait')
                                                arr_email_list.append(self.email_one)
                                            else:
                                                index_step_me = index_step_me - 1
                                                continue
                                    else:
                                        step_now = g
                                        tmparr_stepstatus.append('Wait')
                            elif tmpemailone == self.email_one and my_status == 'Complete':                                    
                                if self.email_one not in arr_email_list:
                                    if count_email == 1:
                                        for nz in range(g,len(tmp_arr_status_group),1):
                                            if self.email_one in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Incomplete':
                                                step_now = g
                                                tmparr_stepstatus.append('Wait')
                                            elif self.email_one not in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Incomplete':
                                                step_now = g
                                                tmparr_stepstatus.append('Progress')
                                        arr_email_list.append(self.email_one)
                                    else:                                                
                                        for nz in range(g,len(tmp_arr_status_group),1):
                                            if self.email_one not in arr_email_list:
                                                if self.email_one in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Complete':
                                                    pass                                                    
                                                if self.email_one in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Incomplete':
                                                    step_now = g
                                                    tmparr_stepstatus.append('Wait')
                                                    arr_email_list.append(self.email_one)
                                                if self.email_one not in tmp_arr_status_email[nz] and tmp_arr_status_group[nz] == 'Incomplete':
                                                    step_now = g
                                                    tmparr_stepstatus.append('Progress')
                                                    arr_email_list.append(self.email_one)
                            tmp_arr_status_group_001.append(tmpstatus)
                        if 'Reject' in tmparr_stepstatus:
                            tmp_text_status = 'R'
                            tmp_text_status_string = 'เอกสารที่ส่งคืนแก้ไข'
                        elif 'Wait_input' in tmparr_stepstatus:
                            tmp_text_status = 'WI'
                            tmp_text_status_string = 'รอคุณกรอกข้อมูล'
                        elif 'V' in tmparr_stepstatus:   
                            tmp_text_status = 'V'
                            tmp_text_status_string = 'ดูเอกสาร'
                        elif 'Progress' in tmparr_stepstatus and 'Wait' in tmparr_stepstatus:
                            tmp_text_status = 'Z'
                            tmp_text_status_string = 'อยู่ในช่วงดำเนินการ'
                        elif 'Wait' in tmparr_stepstatus:
                            tmp_text_status = 'W'
                            tmp_text_status_string = 'รอคุณอนุมัติ'
                        elif 'Incomplete' in tmparr_stepstatus:
                            tmp_text_status = 'Z'
                            tmp_text_status_string = 'อยู่ในช่วงดำเนินการ'
                        elif 'Progress' in tmparr_stepstatus:
                            tmp_text_status = 'N'
                            tmp_text_status_string = 'กำลังดำเนินการ'                    
                        elif tmparr_stepstatus.count('Incomplete') >= 2:
                            tmp_text_status = 'Z'
                            tmp_text_status_string = 'อยู่ในช่วงดำเนินการ'
                        elif 'Incomplete' in tmparr_stepstatus and 'Complete' in tmparr_stepstatus:
                            tmp_text_status = 'N'
                            tmp_text_status_string = 'กำลังดำเนินการ'
                        else:
                            tmp_text_status_string = 'อนุมัติแล้ว'
                    if tmp_sidgroup != None:
                        tmp_sidgroup = eval(tmp_sidgroup)
                    if tmp_updatetime != None:
                        tmp_updatetime = tmp_updatetime
                        tmp_datetimeString = str(tmp_updatetime).split('+')[0]
                    if tmp_group_other != None:
                        tmp_group_other = eval(tmp_group_other)
                        for i in range(len(tmp_group_other)):
                            if 'color' in tmp_group_other[i]:
                                tmp_color = tmp_group_other[i]['color']
                    if tmp_group_data_json != None:
                        tmp_group_data_json = eval(tmp_group_data_json)
                        for o in range(len(tmp_group_data_json)):
                            if 'data_sum' in tmp_group_data_json[o]:
                                tmp_data_sum = tmp_group_data_json[o]['data_sum']
                                for z in range(len(tmp_data_sum)):
                                    if 'name' in tmp_data_sum[z]:
                                        tmp_key = str(tmp_data_sum[z]['name']).replace(' ','')
                                        tmp_value = (tmp_data_sum[z]['value'])
                                        json_tmp[tmp_key] = tmp_value
                                        # arr_data_sum.append({tmp_key:tmp_value})
                                tmp_arr_data_sum_01.append(json_tmp)
                            else:
                                if len(tmp_group_data_json[o]) != 0:
                                    tmp_group_data_json[o][0]['No_keyno_ppl'] = (o + 1)
                                    tmp_arr_data_sum_01.append(tmp_group_data_json[o][0])
                    if tmp_json_data != None:
                        if tmp_json_data != 'None':
                            tmp_arr_data_sum_01 = eval(tmp_json_data)
                    dateTime_String = tmp_updatetime
                    th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                    ts = int(time.time())
                    date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                    year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                    datetime_display = int(dateTime_String.timestamp())
                    date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                    yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                    time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                    old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                    if date_time_today == date_time_db:
                        date_display_show = time_show_db
                    else:
                        if year_today == yar_db:
                            date_display_show = convert_datetime_TH_2_display(datetime_display)
                        else:
                            date_display_show = old_year
                    if len(tmp_sidgroup) > 0:
                        if tmp_group_title != None:
                            if 'cover_column' in tmp_group_title:
                                if tmp_group_title['cover_column']:
                                    for x in range(len(tmp_group_title['cover_column'])):
                                        if 'display_key' in tmp_group_title['cover_column'][x]:
                                            if tmp_group_title['cover_column'][x]['display_key'] == '15_Detail+16_Detail2+18_Detail3':
                                                tmp_group_title['cover_column'][x]['display_key'] = 'Detail+Detail2+Detail3'
                                                stringspil = str(tmp_group_title['cover_column'][x]['display_key']).split('+')
                                                for ju in range(len(stringspil)):
                                                    pass
                                                    # for u in range(len(tmp_arr_data_sum_01)):
                                                    #     arr_detail = []
                                                    #     for n in tmp_arr_data_sum_01[u].keys():
                                                    #         if  stringspil[ju] in str(n).split('_'):
                                                    #             arr_detail.append(tmp_arr_data_sum_01[u][n])
                                                    #             # if
                                                    #     if ju == 0:
                                                    #         tmp_arr_data_sum_01[u]['Detail'] = arr_detail
                                                    #     else:
                                                    #         count_row = ju + 1
                                                    #         tmp_arr_data_sum_01[u]['Detail'+str(count_row)] = arr_detail
                                                # print(str(tmp_group_title['cover_column'][x]['display_key']) ,tmp_arr_data_sum_01[u] )
                                                # if str(tmp_group_title['cover_column'][x]['display_key'])in str(tmp_arr_data_sum_01[u]).split('_')[1] :
                        # print(tmp_arr_data_sum_01)
                        tmp_arrjson.append({
                            'status':tmp_status,
                            'group_id':tmp_groupid,
                            'sid_group':tmp_sidgroup,
                            'color_group':tmp_color,
                            'datetime':int(tmp_updatetime.timestamp()),
                            'datetime_string':tmp_datetimeString,
                            'datetime_display':date_display_show,
                            'datetime_thai':th_dateTime_2,
                            'document_count':len(tmp_sidgroup),
                            'document_data':tmp_arr_data_sum_01,
                            'status_group':tmp_text_status,
                            'status_group_string':tmp_text_status_string,
                            'viewgroup':status_viewGroup,
                            'calculate_fieds':tmp_calculate_fieds,
                            'image_display':list_file_name,
                            'sign_position':tmp_step_group_detail,
                            'pdf_info':tmp_pdf,
                            'url_info':jsonurl_info,
                            'document_type':tmp_document_type,
                            'group_title':tmp_group_title,
                            'cover_page':tmp_cover_page,
                            'biz_info':data_biz,
                            'document_type_detail':tmpdocumentdetail,
                            'step_group_document':tmp_step_group,
                            'max_step':tmp_maxstep,
                            'process_id':tmp_processid,
                            'html_data':tmp_html_data,
                            'html_url':tmpurl_html_data,
                            'tracking_id':tmp_tracking_group,
                            'average_data':tmp_average_data,
                            'process_status':tmp_process_status
                        })
                if len(tmp_arrjson) != 0:
                    list_arr = sorted(tmp_arrjson, key=lambda k: k['datetime'], reverse=True)
                else:
                    return {'result':'ER','messageER':'data not found'}
                return {'result':'OK','messageText':list_arr}
            else:
                return {'result':'ER','messageER':'data not found'}
        except Exception as e:
            print(str(e))
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(e)}

    def select_reference_doc(self,sidcode):
        self.sidcode = sidcode
        # self.emailUser = emailUser
        arr_tmp = []
        tmp_dict_ref = {}
        list_ref_all = []
        try:
            tmp_query = db.session.query(
                    paper_lessdatastep,
                    paper_lesssender,
                    paper_lessdocument,
                    paper_lesspdf,
                )\
                .join(paper_lesssender,paper_lesssender.step_data_sid==paper_lessdatastep.sid)\
                .join(paper_lessdocument,paper_lessdocument.step_id==paper_lessdatastep.sid)\
                .join(paper_lesspdf,paper_lesspdf.fid==paper_lessdocument.fileid)\
                .filter(paper_lessdatastep.sid==self.sidcode)\
                .filter(paper_lesssender.document_status=='Y')\
                .all()
            query_tranfer = db.session.query(
                    paper_lesstranfer.sid
                )\
                .filter(paper_lesstranfer.sid==self.sidcode)\
                .count()

            status_tranfer = False
            status_grouphave = False
            arr_step_info = []
            list_step_email = []
            sign_detail = []
            sign_data = []
            tmp_status_file_code = 'Y'
            tmp_status_file_string = ''
            list_sign_info = []
            require_sign_info = []
            sign_detail_require = []
            acty_code = []
            tmp_tempname = ''
            tmp_condition = ''
            tmp_file_status_sum = ''
            tmp_file_user_status = ''
            tmp_timing = ''
            tmp_properties = ''
            if query_tranfer > 0 :
                status_tranfer = True
            else :
                status_tranfer = False
            result_url = get_url_image_pdf_v1(self.sidcode)
            if result_url['result'] == 'OK':
                tmpmessageText = result_url['messageText']
                tmp_url_image = tmpmessageText
                # print(tmp_url_image)
            else:
                tmp_url_image = []
            for n in range(len(tmp_query)):
                for u in range(len(tmp_query[n])):
                    if u == 1:
                        tmpjson_sender = tmp_query[n][u].__dict__
                        tmp_datetime = tmpjson_sender['send_time']
                        tmp_step_code = tmpjson_sender['step_code']
                        tmp_group_id = tmpjson_sender['group_id']
                        if tmpjson_sender['list_ref'] != None and tmpjson_sender['list_ref'] != []:
                            tmp_list_ref = eval(tmpjson_sender['list_ref'])
                        else:
                            tmp_list_ref = (tmpjson_sender['list_ref'])
                        tmp_status_service = tmpjson_sender['status_service']
                        tmp_status_details = eval(str(tmpjson_sender['status_details']))
                        print (tmp_status_details)
                        if tmp_group_id != None:
                            if tmp_group_id != '':
                                  status_grouphave = True
                        # print(tmp_query[n][u])           
                        if str(tmp_step_code).replace(' ','') != '':
                            result_template = paper_lessstep.query.filter(paper_lessstep.step_Code==tmp_step_code,paper_lessstep.status=='ACTIVE').first()
                            if result_template != None:
                                tmp_tempname = str(result_template.step_Name)
                                tmp_condition = str(result_template.condition_temp)
                        document_timestamp = int(tmp_datetime.timestamp())
                        tmp_datetime_display = convert_datetime_TH_2_display_sendTime(document_timestamp)
                        try:
                            tmp_email_center = eval(tmpjson_sender['email_center'])
                        except Exception as e:
                            tmp_email_center = tmpjson_sender['email_center']
                    if u == 0:
                        tmpjson = tmp_query[n][u].__dict__
                        # del tmpjson['_sa_instance_state']
                        step_infomation = eval(tmpjson['data_json'])
                        tmp_file_user_status_detail = []
                        tmp_sign_detail_list = []
                        tmp_list_step_infomation = []
                        # print(step_infomation)
                        if 'step_num' in step_infomation:
                            tmp_step_info = [eval(tmpjson['data_json'])]
                        else:
                            tmp_step_info = eval(tmpjson['data_json'])
                        if 'step_num' in step_infomation:
                            tmp_list_step_infomation.append(step_infomation)
                            step_infomation = tmp_list_step_infomation
                        step_status = ''
                        res_status_file = 'Y'
                        step_before = ''
                        step_list_before = []
                        step_list_ = []
                        step_list_next = []
                        arr_step_totle = []
                        step_me = ''
                        step_sum_status = []
                        sum_status_step_list = []
                        list_check_step = []
                        step_list_data = []
                        max_step = (len(step_infomation))
                        sum_status_step = []
                        tmp_status_sum = []
                        arr_email_list = []
                        email_step_sum = []
                        email_one_sum = []
                        time_success = None
                        step_time_1 = []
                        sendtime = tmpjson['upload_time']
                        list_my_email = []
                        tmp_list_sign_id = []
                        sign_info_id = []
                        
                        for i in range(len(step_infomation)):
                            list_check_step = []
                            json_step_info_2 = {}
                            step_list_data = []
                            step_status = []
                            step_email = []
                            tmp_step_num = ''
                            step_ = step_infomation[i]
                            step_num = step_infomation[i]['step_num']
                            json_step_info_2['step_status'] = ''
                            tmp_step_detail = step_['step_detail']
                            for u in range(len(tmp_step_detail)):
                                tmp_arr_step_detail = tmp_step_detail[u]
                                tmp_status = tmp_arr_step_detail['activity_status']
                                tmp_code = tmp_arr_step_detail['activity_code']
                                tmp_activity_data = tmp_arr_step_detail['activity_data']
                                tmp_time = tmp_arr_step_detail['activity_time']
                                print(tmp_time)
                                for js in range(len(tmp_activity_data)):
                                    if 'id' in tmp_activity_data[js]:
                                        tmp_list_sign_id.append(tmp_activity_data[js]['id'])
                                tmp_email = str(tmp_arr_step_detail['one_email']).replace(' ','').lower()
                                # print(tmp_email)
                                # if tmp_email == self.emailUser:                                    
                                tmp_step_num = u
                                for hg in range(len(tmp_code)):
                                    if tmp_code[hg] == 'A03':
                                        sign_detail_require = []
                                        tmp_activity_data = tmp_arr_step_detail['activity_data'][hg]
                                        if 'status' in tmp_activity_data:
                                            if tmp_activity_data['status'] == 'incomplete':
                                                sign_detail_require.append(tmp_activity_data)
                                                list_my_email.append(u)
                                    if 'step_sign' in  step_infomation[i]:
                                        if  step_infomation[i]['step_sign']['status'] == True:
                                            tmp_data_ssign = step_infomation[i]['step_sign']['data']
                                            for zy in range(len(tmp_data_ssign)):
                                                if 'step_index' in tmp_data_ssign[zy]: 
                                                    if len(tmp_data_ssign[zy]['step_index']) != 0:
                                                        # print(tmp_step_num , tmp_data_ssign[zy]['step_index'])
                                                        if tmp_step_num in tmp_data_ssign[zy]['step_index']:
                                                            if  tmp_data_ssign[zy]['status'] == 'incomplete':
                                                                sign_detail_require.append(tmp_data_ssign[zy])
                                                    else:
                                                        if 'id' in tmp_data_ssign[zy]:
                                                            if tmp_data_ssign[zy]['id'] not in tmp_list_sign_id:
                                                                if  tmp_data_ssign[zy]['status'] == 'incomplete':
                                                                    sign_detail_require.append(tmp_data_ssign[zy])
                                                        else:
                                                            sign_detail_require.append(tmp_data_ssign[zy])
                                    # print(sign_detail_require , step_num)
                                    info_step = {
                                        'data':sign_detail_require,
                                        'step_num':step_num
                                    }
                                require_sign_info.append(info_step)
                                for s in range(len(tmp_code)):
                                    if tmp_code[s] == 'A03':
                                        step_status.append(tmp_status[s])
                                        step_email.append(tmp_email)
                                        email_one_sum.append(tmp_email)
                                        #process หา timeline
                                        if (tmp_arr_step_detail['activity_status'][s] == 'Complete' or tmp_arr_step_detail['activity_status'][s] =='Reject' or tmp_arr_step_detail['activity_status'][s] == 'Approve'):
                                            t1 = str(tmp_arr_step_detail['activity_time'][s])
                                            # print ('else activity_time',t1)
                                            time_success = change_to_Timestamp(t1)
                                            step_time_1.append(time_success)
                                        #สิ้นสุดการหา timeline
                                    elif tmp_code[s] == 'A04':
                                        print(tmp_status)
                                        print(tmp_time)
                                        step_status.append(tmp_status[s])
                                        step_email.append(tmp_email)
                                        email_one_sum.append(tmp_email)
                                        #process หา timeline
                                        if (tmp_arr_step_detail['activity_status'][s] == 'Complete' or tmp_arr_step_detail['activity_status'][s] =='Reject' or tmp_arr_step_detail['activity_status'][s] == 'Approve'):
                                            # print(tmp_arr_step_detail['activity_time'][s])
                                            t1 = str(tmp_arr_step_detail['activity_time'][s])
                                            # print ('else activity_time',t1)
                                            time_success = change_to_Timestamp(t1)
                                            step_time_1.append(time_success)
                                        #สิ้นสุดการหา timeline
                                timeline_ = getTimeline(sendtime,step_time_1)
                                tmp_timeline = timeline_  
                                list_timeline = getlistTimeline(sendtime,step_time_1)
                                tmp_timeline_list = list_timeline
                            email_step_sum.append(step_email)
                            if 'Reject' in step_status:
                                tmp_status_sum.append('Reject')
                            elif 'Approve' in step_status:
                                tmp_status_sum.append('Complete')
                            elif 'Complete' in step_status:
                                tmp_status_sum.append('Complete')
                            elif 'Incomplete' in step_status:
                                tmp_status_sum.append('Incomplete')
                            elif 'Pending' in step_status:
                                tmp_status_sum.append('Incomplete')
                            else:
                                tmp_status_sum.append('Complete')
                        tmp_sign_pad = None
                        # print(self.emailUser , email_one_sum)
                        # if self.emailUser in email_one_sum:
                        for zzi in range(len(step_infomation)):
                            list_check_step = []
                            json_step_info_2 = {}
                            step_list_data = []
                            step_status = []
                            step_ = step_infomation[zzi]
                            step_num = step_infomation[zzi]['step_num']
                            json_step_info_2['step_status'] = ''
                            tmp_step_detail = step_['step_detail']
                            
                            for zi in range(len(tmp_step_detail)):
                                tmp_arr_step_detail_2 = tmp_step_detail[zi]
                                oneMail = str(tmp_arr_step_detail_2['one_email']).replace(' ','').lower()
                                
                                tmp_step_me = int(step_num) - 1
                                step_num_int2 = int(step_num)
                                # print(oneMail, self.emailUser , tmp_status_sum[tmp_step_me])
                                print ('step_',step_)
                                if 'Reject' in tmp_status_sum:
                                    arr_step_info.append('Reject')
                                elif tmp_status_sum[tmp_step_me] == 'Incomplete':
                                    # if self.emailUser not in arr_email_list:
                                    index_step_me = tmp_step_me
                                    
                                    if index_step_me != 0:
                                        while index_step_me > 0:
                                            if len(arr_step_info) == 0:
                                                index_step_me = index_step_me - 1
                                                if tmp_status_sum[index_step_me] == 'Incomplete':
                                                    arr_step_info.append('Incomplete')
                                                else:
                                                    # if oneMail == self.emailUser:
                                                    if 'signpad' in step_:
                                                        tmp_sign_pad = step_['signpad']
                                                    else:
                                                        tmp_sign_pad = None
                                                    arr_step_info.append('Wait')
                                                # arr_email_list.append(self.emailUser)
                                            else:
                                                index_step_me = index_step_me - 1
                                                continue
                                    else:
                                        # if oneMail == self.emailUser:
                                        if 'signpad' in step_:
                                            tmp_sign_pad = step_['signpad']
                                        else:
                                            tmp_sign_pad = None
                                        arr_step_info.append('Wait')
                                    # if oneMail == self.emailUser:
                                    #     if 'signpad' in step_:
                                    #         tmp_sign_pad = step_['signpad']
                                    #     else:
                                    #         tmp_sign_pad = None
                                elif tmp_status_sum[tmp_step_me] == 'Complete':
                                    # if self.emailUser not in arr_email_list:
                                    for nz in range(step_num_int2,len(tmp_status_sum),1):
                                        if tmp_status_sum[nz] == 'Incomplete':
                                            arr_step_info.append('Incomplete')
                                        # elif self.emailUser not in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
                                        #     arr_step_info.append('Progress')
                                    # arr_email_list.append(self.emailUser)
                                    # if oneMail == self.emailUser:
                                    if 'signpad' in step_:
                                        tmp_sign_pad = step_['signpad']
                                    else:
                                        tmp_sign_pad = None
                        print(tmp_sign_pad)
                        if 'Reject' in arr_step_info:
                            res_status_file = 'R'
                            res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                        elif 'Wait' in arr_step_info:
                            res_status_file = 'W'
                            res_status_file_string = 'รออนุมัติ'
                        elif 'Incomplete' in arr_step_info:
                            res_status_file = 'Z'
                            res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                        elif 'Progress' in arr_step_info:
                            res_status_file = 'N'
                            res_status_file_string = 'กำลังดำเนินการ'                    
                        elif arr_step_info.count('Incomplete') >= 2:
                            res_status_file = 'Z'
                            res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                        else:
                            res_status_file = 'Y'
                            res_status_file_string = 'อนุมัติแล้ว'
                        tmp_status_file_code = res_status_file
                        tmp_status_file_string = res_status_file_string
                        status_step_sum = ''
                        sum_status_step_list = []
                        alr_mail = []
                        # json_data_res['step_info'] = eval(result_Select_step.data_json)
                        for i in range(len(step_infomation)):
                            sign_json_info = {}
                            tmp_sign_list_info = []
                            step_ = step_infomation[i]
                            step_num = step_infomation[i]['step_num']
                            json_step_info_2['step_status'] = ''
                            if 'step_sign' in step_:
                                tmp_stepsign = step_['step_sign']
                                tmp_status_stepsign = tmp_stepsign['status']
                                if tmp_status_stepsign == True:
                                    tmp_data_stepsign = tmp_stepsign['data']
                                    for y in range(len(tmp_data_stepsign)):
                                        step_signning = tmp_data_stepsign[y]
                                        if 'id' in step_signning:
                                            if step_signning['id'] not in tmp_list_sign_id:
                                                tmp_sign_list_info.append(step_signning)
                                            else:
                                                tmp_sign_list_info.append(step_signning)
                                        else:
                                            tmp_sign_list_info.append(step_signning)

                            for u in range(len(step_['step_detail'])):
                                step_2 = step_['step_detail'][u]
                                for k in range(len(step_2['activity_data'])): 
                                    if 'status' in step_2['activity_data'][k]:                                            
                                        sign_json_info = step_2['activity_data'][k]
                                        if 'sign_llx' in step_2['activity_data'][k]:
                                            if 'id' in step_2['activity_data'][k]:
                                                if step_2['activity_data'][k]['id'] not in tmp_list_sign_id:
                                                    tmp_sign_list_info.append(sign_json_info)
                                            else:
                                                tmp_sign_list_info.append(sign_json_info)
                            # print(tmp_sign_list_info)
                            sign_json_info = {
                                'data':tmp_sign_list_info,
                                'step_num':step_num
                            }
                            # print(sign_json_info)
                            tmp_sign_detail_list.append(sign_json_info)
                        list_step_all = []
                        for ii in range(len(step_infomation)):
                            list_step = []
                            step_ = step_infomation[ii]
                            for uu in range(len(step_['step_detail'])):
                                step_2 = step_['step_detail'][uu]
                                for kk in range(len(step_2['activity_code'])):
                                    if step_2['activity_code'][kk] == 'A03':
                                        tmp_one_email = str(step_2['one_email']).replace(' ','').lower()
                                        list_step.append(step_2['activity_status'][kk])
                            # print('list_step',list_step)
                            list_step_all.append(list_step)
                        for i in range(len(step_infomation)):
                            list_step = []
                            list_check_step = []
                            json_step_info_2 = {}
                            step_list_data = []
                            step_ = step_infomation[i]
                            step_num = step_infomation[i]['step_num']
                            json_step_info_2['step_status'] = ''
                            for u in range(len(step_['step_detail'])):
                                # print('step_',step_)
                                step_2 = step_['step_detail'][u]
                                for k in range(len(step_2['activity_code'])):
                                    print(step_2['activity_code'][k])
                                    acty_code.append(step_2['activity_code'][k])
                                    if step_2['activity_code'][k] == 'A03':
                                        tmp_one_email = str(step_2['one_email']).replace(' ','').lower()
                                        # list_step.append(step_2['activity_status'][k])
                                        # print('list_step',list_step)
                                        # print('step',step_2['activity_status'][k])
                                        if 'Complete' in list_step_all[i] or 'Approve' in list_step_all[i]:
                                            pass
                                        else:
                                            # if self.emailUser == tmp_one_email:
                                            #     if self.emailUser not in alr_mail:
                                                    # print('55555')
                                                    # print('step_2',step_2)
                                                    # arr_get[n]['data_json']['step_detail'][o]['activity_status'][s]
                                                    # print(alr_mail ,step_2['activity_status'][k])
                                            if step_2['activity_status'][k] == 'Complete':
                                                # alr_mail.append(step_2['one_email'])
                                                tmp_file_user_status = step_2['activity_status'][k]
                                            elif step_2['activity_status'][k] == 'Approve':
                                                # alr_mail.append(step_2['one_email'])
                                                tmp_file_user_status = step_2['activity_status'][k]
                                            else:
                                                alr_mail.append(step_2['one_email'])
                                                tmp_file_user_status = step_2['activity_status'][k]
                                        # print(alr_mail)
                                        json_step_info = {}
                                        json_step_info['activity_status'] = step_2['activity_status'][k]
                                        json_step_info['one_email'] = tmp_one_email
                                        json_step_info['rf_step'] = None
                                        json_step_info['ref_step_num'] = None
                                        json_step_info['activity_code'] = step_2['activity_code'][k]
                                        if 'rf_step' in step_:
                                            if step_['rf_step'] != None:
                                                json_step_info['rf_step'] = step_['rf_step']
                                                json_step_info['ref_step_num'] = str(step_['rf_step']).split('-')[1]

                                        tmp_account_name = tmp_one_email
                                        search = "%'{}'%".format(tmp_one_email)
                                        if json_step_info['one_email'] != '':
                                            query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.like(search)).all()
                                            if len(query_name_account) != 0:
                                                try:
                                                    tmp_account_name = eval(query_name_account[0].citizen_data)
                                                    tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                                except Exception as e:
                                                    tmp_account_name = tmp_one_email
                                                    exc_type, exc_obj, exc_tb = sys.exc_info()
                                                    fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                                                    print(exc_type, fname, exc_tb.tb_lineno)
                                        json_step_info['step_num'] = step_num
                                        json_step_info['account_name'] = tmp_account_name
                                        list_check_step.append(json_step_info['activity_status'])
                                        step_list_data.append(json_step_info)
                                    elif step_2['activity_code'][k] == 'A04':
                                        tmp_one_email = str(step_2['one_email']).replace(' ','').lower()
                                        # list_step.append(step_2['activity_status'][k])
                                        # print('list_step',list_step)
                                        # print('step',step_2['activity_status'][k])
                                        if 'Complete' in list_step_all[i] or 'Approve' in list_step_all[i]:
                                            pass
                                        else:
                                            # if self.emailUser == tmp_one_email:
                                            #     if self.emailUser not in alr_mail:
                                                    # print('55555')
                                                    # print('step_2',step_2)
                                                    # arr_get[n]['data_json']['step_detail'][o]['activity_status'][s]
                                                    # print(alr_mail ,step_2['activity_status'][k])
                                            if step_2['activity_status'][k] == 'Complete':
                                                # alr_mail.append(step_2['one_email'])
                                                tmp_file_user_status = step_2['activity_status'][k]
                                            elif step_2['activity_status'][k] == 'Approve':
                                                # alr_mail.append(step_2['one_email'])
                                                tmp_file_user_status = step_2['activity_status'][k]
                                            else:
                                                alr_mail.append(step_2['one_email'])
                                                tmp_file_user_status = step_2['activity_status'][k]
                                        # print(alr_mail)
                                        json_step_info = {}
                                        json_step_info['activity_status'] = step_2['activity_status'][k]
                                        json_step_info['one_email'] = tmp_one_email
                                        json_step_info['rf_step'] = None
                                        json_step_info['ref_step_num'] = None
                                        json_step_info['activity_code'] = step_2['activity_code'][k]
                                        if 'rf_step' in step_:
                                            if step_['rf_step'] != None:
                                                json_step_info['rf_step'] = step_['rf_step']
                                                json_step_info['ref_step_num'] = str(step_['rf_step']).split('-')[1]

                                        tmp_account_name = tmp_one_email
                                        search = "%'{}'%".format(tmp_one_email)
                                        if json_step_info['one_email'] != '':
                                            query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.like(search)).all()
                                            if len(query_name_account) != 0:
                                                try:
                                                    tmp_account_name = eval(query_name_account[0].citizen_data)
                                                    tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
                                                except Exception as e:
                                                    tmp_account_name = tmp_one_email
                                                    exc_type, exc_obj, exc_tb = sys.exc_info()
                                                    fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                                                    print(exc_type, fname, exc_tb.tb_lineno)
                                        json_step_info['step_num'] = step_num
                                        json_step_info['account_name'] = tmp_account_name
                                        list_check_step.append(json_step_info['activity_status'])
                                        step_list_data.append(json_step_info)
                                    json_step_info_2['step_info'] = step_list_data
                            if json_step_info_2['step_status'] == '':
                                if 'Reject' in list_check_step:
                                    json_step_info_2['step_status'] = 'Reject'
                                elif 'Approve' in list_check_step:
                                    json_step_info_2['step_status'] = 'Complete'
                                elif 'Complete' in list_check_step:
                                    json_step_info_2['step_status'] = 'Complete'
                                elif 'Incomplete' in list_check_step:
                                    json_step_info_2['step_status'] = 'Incomplete'
                                elif 'Pending' in list_check_step:
                                    json_step_info_2['step_status'] = 'Incomplete'
                                else:
                                    json_step_info_2['step_status'] = 'Complete'
                            # print(list_check_step)
                            if 'step_sign' in step_:
                                tmp_step_sign = step_['step_sign']
                                len_step_status = len(tmp_step_sign['data'])
                                # print(len_step_status)
                                if tmp_step_sign['status'] == True:
                                    if 'Incomplete' in list_check_step and list_check_step.count('Incomplete') == len_step_status:
                                        json_step_info_2['step_status'] = 'Incomplete'
                                    elif 'Complete' in list_check_step and list_check_step.count('Complete') == len_step_status:
                                        json_step_info_2['step_status'] = 'Complete'
                                    else:
                                        json_step_info_2['step_status'] = 'Incomplete'
                                    # for yt in range(len(list_check_step)):
                                    #     tmp_status_step_one = list_check_step[yt]
                                        
                                    #     print(tmp_status_step_one)
                            sum_status_step_list.append(json_step_info_2['step_status'])
                            tmp_file_user_status_detail.append(json_step_info_2)
                        if 'Reject' in sum_status_step_list:
                            status_step_sum = 'Reject'
                            # sendtime = json_data_res['send_time']
                            timing_ = timing(time_success,sendtime)
                            tmp_timing = timing_
                        elif 'Incomplete' in sum_status_step_list:
                            status_step_sum = 'Incomplete'
                            now = datetime.datetime.now()
                            # sendtime = json_data_res['send_time']
                            timing_ = timing(datetime.datetime.timestamp(now),sendtime)
                            tmp_timing = timing_
                        elif 'Pending' in sum_status_step_list:
                            status_step_sum = 'Incomplete'
                            now = datetime.datetime.now()
                            # sendtime = json_data_res['send_time']
                            timing_ = timing(datetime.datetime.timestamp(now),sendtime)
                            tmp_timing = timing_
                        elif 'Approve' in sum_status_step_list:
                            status_step_sum = 'Complete'
                            # sendtime = json_data_res['send_time']
                            timing_ = timing(time_success,sendtime)
                            tmp_timing = timing_
                        elif 'Complete' in sum_status_step_list:
                            status_step_sum = 'Complete'
                            # sendtime = json_data_res['send_time']
                            timing_ = timing(time_success,sendtime)
                            tmp_timing = timing_
                        else:
                            status_step_sum = 'Complete'
                            # sendtime = json_data_res['send_time']
                            timing_ = timing(time_success,sendtime)
                            tmp_timing = timing_
                        tmp_file_status_sum = status_step_sum
                        tmp_sign_detail = sign_detail
                        tmp_view_details = eval(tmpjson['view_details'])
                        if tmpjson['qrCode_position'] != None or str(tmpjson['qrCode_position']).replace(' ','') != '':
                            tmp_qrCode_position = eval(tmpjson['qrCode_position'])
                            tmp_qrCode_status = True
                        else:
                            tmp_qrCode_position = tmpjson['qrCode_position']
                            tmp_qrCode_status = False          
                        status_previeweform = False
                   
                        print(acty_code)
                        if 'A04' in acty_code:
                            status_previeweform = True    
                    if u == 2:
                        print ('2222')
                        tmpjson_document = tmp_query[n][u].__dict__
                        tmpstep_group = None
                        tmpstatus_group = False
                        if tmpjson_document['options_page'] != None:
                            option_page =  eval(tmpjson_document['options_page'])
                            if 'service_properties' in option_page:
                                service_properties = option_page['service_properties']
                                for nn in  range(len(service_properties)):
                                    ser = eval(str(service_properties[nn]))
                                    if 'name_service' in ser :
                                        name_service = ser['name_service']
                                        if name_service == 'GROUP':
                                            other = ser['other']
                                            for ni in range(len(other)):
                                                ot = eval(str(other[ni]))
                                                # tmp = {}
                                                # tmp = ot['properties']
                                                tmp_properties = ot['properties']
                        if tmpjson_document['options_page'] == None:
                            tmp_option_page = []
                        else:                                
                            tmp_option_page = eval(tmpjson_document['options_page'])
                            tmp_options_page_document = [tmp_option_page]
                            print(tmp_option_page)
                            if 'ca_require' in tmp_option_page:
                                tmp_ca_require = tmp_option_page['ca_require']
                                if type(tmp_ca_require) is bool:
                                    tmp_digit_sign = bool(tmp_ca_require)
                                else:
                                    tmp_digit_sign = ""
                            else:
                                tmp_digit_sign = bool(tmpjson_document['digit_sign'])
                            if 'group_detail' in tmp_option_page:
                                tmp_group_details = tmp_option_page['group_detail']
                                if 'group_status' in tmp_group_details:
                                    if tmp_group_details['group_status'] == True:
                                        tmpstatus_group = True
                                        tmpstep_group = tmp_group_details['step_num']
                            
                        tmp_documentJson = eval(tmpjson_document['documentJson'])
                        tmp_strdocument = str(tmpjson_document['documentJson'])
                    
                    if u == 3:
                        print ('3333')
                        tmpjson_pdf = tmp_query[n][u].__dict__
                        if tmpjson_pdf['string_sign'] != None:
                            if tmpjson_pdf['string_sign'] != None and tmpjson_pdf['path_sign'] != None:
                                r = readfile_pdfsign_v1(tmpjson_pdf['path_sign'])
                                tmppdf = r['basePDF']
                            elif tmpjson_pdf['string_sign'] != None and tmpjson_pdf['path_sign'] == None:
                                tmppdf = tmpjson_pdf['string_sign']
                            tmp_file_status = 'Complete'
                        else:
                            if tmpjson_pdf['string_sign'] == None and tmpjson_pdf['path_sign'] == None:
                                r = readfile_pdfsign_v1(tmpjson_pdf['path_pdf'])
                                if r['result'] == 'OK':
                                    tmppdf = r['basePDF']
                                else:
                                    tmppdf = tmpjson_pdf['string_pdf']
                            tmp_file_status = 'Incomplete'
                    
                    # if u == 4:
                    #     tmpjson_template = tmp_query[n][u].__dict__
                    #     tmp_tempname = str(tmpjson_template['step_Name'])
                    #     tmp_condition = str(tmpjson_template['condition_temp'])
                # print((list_check_step))
                # print(status_step_sum)
                if tmp_list_ref != None and tmp_list_ref != '' and tmp_list_ref != []:
                    print ('tmp_list_ref:',tmp_list_ref)
                    for r in range(len(tmp_list_ref)):
                        print ('tmp_list_ref_iiii:',tmp_list_ref[r])
                        with slave.connect() as connection:
                            result_ref = connection.execute(text('SELECT "doc_id","file_name","file_id" FROM "tb_send_detail" JOIN "tb_pdf_storage" ON "fid" = "file_id" WHERE step_data_sid=:step_data_sid'),step_data_sid=tmp_list_ref[r])
                            connection.close()
                        tmp_query = [dict(row) for row in result_ref]
                        tmp_dict_ref = {
                            'sid' : tmp_list_ref[r],
                            'doc_id' : tmp_query[0]['doc_id'],
                            'file_name' : tmp_query[0]['file_name'],
                        }
                        list_ref_all.append(tmp_dict_ref)
                info = {
                    'preview_eform':status_previeweform,
                    'url_image':tmp_url_image,
                    'pdfData':tmppdf,
                    'attempted_folder':tmpjson_document['attempted_folder'],
                    'condition_template':tmp_condition,
                    'digit_sign':tmp_digit_sign,
                    'document_Id':tmpjson_sender['doc_id'],
                    'document_details':tmp_documentJson,
                    'document_details_string':tmp_strdocument,
                    'document_time':document_timestamp,
                    'email_center':tmp_email_center,
                    'file_id':int(tmpjson_document['fileid']),
                    'file_name':tmpjson_sender['file_name'],
                    'file_status':tmp_file_status,
                    'file_status_sum':tmp_file_status_sum,
                    'file_user_status':tmp_file_user_status,
                    'file_user_status_detail':tmp_file_user_status_detail,
                    'options_page_document':tmp_options_page_document,
                    'qrCode_position':tmp_qrCode_position,
                    'qrCode_status':tmp_qrCode_status,
                    'send_time':tmp_datetime,
                    'send_time_display':tmp_datetime_display,
                    'send_time_string':str(tmp_datetime).split('+')[0],
                    'sender_email':tmpjson_sender['sender_email'],
                    'sender_name':tmpjson_sender['sender_name'],
                    'sender_position':tmpjson_sender['sender_position'],
                    'sign_detail':tmp_sign_detail,
                    'signpad':tmp_sign_pad,
                    'stamp_all':tmpjson_document['sign_page_options'],
                    'status':tmpjson_sender['status'],
                    'status_file_code':tmp_status_file_code,
                    'status_file_string':tmp_status_file_string,
                    'step_code':tmpjson_sender['step_code'],
                    'step_data_sid':tmpjson_sender['step_data_sid'],
                    'step_info':tmp_step_info,
                    'template_name':tmp_tempname,
                    'template_webhook':tmpjson_sender['template_webhook'],
                    'timeline':tmp_timeline,
                    'timeline_list':tmp_timeline_list,
                    'timing':tmp_timing,
                    'tracking_id':tmpjson_sender['tracking_id'],
                    'urgent_code':tmpjson_document['urgent_type'],
                    'view_details':tmp_view_details,
                    'sign_info':tmp_sign_detail_list,
                    'sign_require':require_sign_info,
                    'group_status':tmpstatus_group,
                    'group_stepnum':tmpstep_group,
                    'document_data':tmp_properties,
                    'status_tranfer':status_tranfer,
                    'group':status_grouphave,
                    'list_ref' : list_ref_all,
                    'status_service' : tmp_status_service,
                    'status_details' : tmp_status_details
                }
                arr_tmp.append(info)
            return {'result':'OK','messageText':arr_tmp}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':None,'messageER':str(e)}
    

    # def select_reference_doc(self,sidcode):
    #     self.sidcode = sidcode
    #     # self.emailUser = emailUser
    #     arr_tmp = []
    #     try:
    #         tmp_query = db.session.query(
    #                 paper_lessdatastep,
    #                 paper_lesssender,
    #                 paper_lessdocument,
    #                 paper_lesspdf,
    #             )\
    #             .join(paper_lesssender,paper_lesssender.step_data_sid==paper_lessdatastep.sid)\
    #             .join(paper_lessdocument,paper_lessdocument.step_id==paper_lessdatastep.sid)\
    #             .join(paper_lesspdf,paper_lesspdf.fid==paper_lessdocument.fileid)\
    #             .filter(paper_lessdatastep.sid==self.sidcode)\
    #             .filter(paper_lesssender.document_status=='Y')\
    #             .all()
    #         query_tranfer = db.session.query(
    #                 paper_lesstranfer.sid
    #             )\
    #             .filter(paper_lesstranfer.sid==self.sidcode)\
    #             .count()

    #         status_tranfer = False
    #         status_grouphave = False
    #         arr_step_info = []
    #         list_step_email = []
    #         sign_detail = []
    #         sign_data = []
    #         tmp_status_file_code = 'Y'
    #         tmp_status_file_string = ''
    #         list_sign_info = []
    #         require_sign_info = []
    #         sign_detail_require = []
    #         acty_code = []
    #         tmp_tempname = ''
    #         tmp_condition = ''
    #         tmp_file_status_sum = ''
    #         tmp_file_user_status = ''
    #         tmp_timing = ''
    #         tmp_properties = ''
    #         if query_tranfer > 0 :
    #             status_tranfer = True
    #         else :
    #             status_tranfer = False
    #         result_url = get_url_image_pdf_v1(self.sidcode)
    #         if result_url['result'] == 'OK':
    #             tmpmessageText = result_url['messageText']
    #             tmp_url_image = tmpmessageText
    #             # print(tmp_url_image)
    #         else:
    #             tmp_url_image = []
    #         for n in range(len(tmp_query)):
    #             for u in range(len(tmp_query[n])):
    #                 if u == 1:
    #                     tmpjson_sender = tmp_query[n][u].__dict__
    #                     tmp_datetime = tmpjson_sender['send_time']
    #                     tmp_step_code = tmpjson_sender['step_code']
    #                     tmp_group_id = tmpjson_sender['group_id']
    #                     if tmpjson_sender['list_ref'] != [] and tmpjson_sender['list_ref'] != None:
    #                         tmp_list_ref = eval(tmpjson_sender['list_ref'])
    #                     else:
    #                         tmp_list_ref = (tmpjson_sender['list_ref'])
    #                     tmp_status_service = tmpjson_sender['status_service']
    #                     tmp_status_details = eval(str(tmpjson_sender['status_details']))
    #                     print (tmp_status_details)
    #                     if tmp_group_id != None:
    #                         if tmp_group_id != '':
    #                               status_grouphave = True
    #                     # print(tmp_query[n][u])           
    #                     if str(tmp_step_code).replace(' ','') != '':
    #                         result_template = paper_lessstep.query.filter(paper_lessstep.step_Code==tmp_step_code,paper_lessstep.status=='ACTIVE').first()
    #                         if result_template != None:
    #                             tmp_tempname = str(result_template.step_Name)
    #                             tmp_condition = str(result_template.condition_temp)
    #                     document_timestamp = int(tmp_datetime.timestamp())
    #                     tmp_datetime_display = convert_datetime_TH_2_display_sendTime(document_timestamp)
    #                     try:
    #                         tmp_email_center = eval(tmpjson_sender['email_center'])
    #                     except Exception as e:
    #                         tmp_email_center = tmpjson_sender['email_center']
    #                 if u == 0:
    #                     tmpjson = tmp_query[n][u].__dict__
    #                     # del tmpjson['_sa_instance_state']
    #                     step_infomation = eval(tmpjson['data_json'])
    #                     tmp_file_user_status_detail = []
    #                     tmp_sign_detail_list = []
    #                     tmp_list_step_infomation = []
    #                     # print(step_infomation)
    #                     if 'step_num' in step_infomation:
    #                         tmp_step_info = [eval(tmpjson['data_json'])]
    #                     else:
    #                         tmp_step_info = eval(tmpjson['data_json'])
    #                     if 'step_num' in step_infomation:
    #                         tmp_list_step_infomation.append(step_infomation)
    #                         step_infomation = tmp_list_step_infomation
    #                     step_status = ''
    #                     res_status_file = 'Y'
    #                     step_before = ''
    #                     step_list_before = []
    #                     step_list_ = []
    #                     step_list_next = []
    #                     arr_step_totle = []
    #                     step_me = ''
    #                     step_sum_status = []
    #                     sum_status_step_list = []
    #                     list_check_step = []
    #                     step_list_data = []
    #                     max_step = (len(step_infomation))
    #                     sum_status_step = []
    #                     tmp_status_sum = []
    #                     arr_email_list = []
    #                     email_step_sum = []
    #                     email_one_sum = []
    #                     time_success = None
    #                     step_time_1 = []
    #                     sendtime = tmpjson['upload_time']
    #                     list_my_email = []
    #                     tmp_list_sign_id = []
    #                     sign_info_id = []
                        
    #                     for i in range(len(step_infomation)):
    #                         list_check_step = []
    #                         json_step_info_2 = {}
    #                         step_list_data = []
    #                         step_status = []
    #                         step_email = []
    #                         tmp_step_num = ''
    #                         step_ = step_infomation[i]
    #                         step_num = step_infomation[i]['step_num']
    #                         json_step_info_2['step_status'] = ''
    #                         tmp_step_detail = step_['step_detail']
    #                         for u in range(len(tmp_step_detail)):
    #                             tmp_arr_step_detail = tmp_step_detail[u]
    #                             tmp_status = tmp_arr_step_detail['activity_status']
    #                             tmp_code = tmp_arr_step_detail['activity_code']
    #                             tmp_activity_data = tmp_arr_step_detail['activity_data']
    #                             tmp_time = tmp_arr_step_detail['activity_time']
    #                             print(tmp_time)
    #                             for js in range(len(tmp_activity_data)):
    #                                 if 'id' in tmp_activity_data[js]:
    #                                     tmp_list_sign_id.append(tmp_activity_data[js]['id'])
    #                             tmp_email = str(tmp_arr_step_detail['one_email']).replace(' ','').lower()
    #                             # print(tmp_email)
    #                             # if tmp_email == self.emailUser:                                    
    #                             tmp_step_num = u
    #                             for hg in range(len(tmp_code)):
    #                                 if tmp_code[hg] == 'A03':
    #                                     sign_detail_require = []
    #                                     tmp_activity_data = tmp_arr_step_detail['activity_data'][hg]
    #                                     if 'status' in tmp_activity_data:
    #                                         if tmp_activity_data['status'] == 'incomplete':
    #                                             sign_detail_require.append(tmp_activity_data)
    #                                             list_my_email.append(u)
    #                                 if 'step_sign' in  step_infomation[i]:
    #                                     if  step_infomation[i]['step_sign']['status'] == True:
    #                                         tmp_data_ssign = step_infomation[i]['step_sign']['data']
    #                                         for zy in range(len(tmp_data_ssign)):
    #                                             if 'step_index' in tmp_data_ssign[zy]: 
    #                                                 if len(tmp_data_ssign[zy]['step_index']) != 0:
    #                                                     # print(tmp_step_num , tmp_data_ssign[zy]['step_index'])
    #                                                     if tmp_step_num in tmp_data_ssign[zy]['step_index']:
    #                                                         if  tmp_data_ssign[zy]['status'] == 'incomplete':
    #                                                             sign_detail_require.append(tmp_data_ssign[zy])
    #                                                 else:
    #                                                     if 'id' in tmp_data_ssign[zy]:
    #                                                         if tmp_data_ssign[zy]['id'] not in tmp_list_sign_id:
    #                                                             if  tmp_data_ssign[zy]['status'] == 'incomplete':
    #                                                                 sign_detail_require.append(tmp_data_ssign[zy])
    #                                                     else:
    #                                                         sign_detail_require.append(tmp_data_ssign[zy])
    #                                 # print(sign_detail_require , step_num)
    #                                 info_step = {
    #                                     'data':sign_detail_require,
    #                                     'step_num':step_num
    #                                 }
    #                             require_sign_info.append(info_step)
    #                             for s in range(len(tmp_code)):
    #                                 if tmp_code[s] == 'A03':
    #                                     step_status.append(tmp_status[s])
    #                                     step_email.append(tmp_email)
    #                                     email_one_sum.append(tmp_email)
    #                                     #process หา timeline
    #                                     if (tmp_arr_step_detail['activity_status'][s] == 'Complete' or tmp_arr_step_detail['activity_status'][s] =='Reject' or tmp_arr_step_detail['activity_status'][s] == 'Approve'):
    #                                         t1 = str(tmp_arr_step_detail['activity_time'][s])
    #                                         # print ('else activity_time',t1)
    #                                         time_success = change_to_Timestamp(t1)
    #                                         step_time_1.append(time_success)
    #                                     #สิ้นสุดการหา timeline
    #                                 elif tmp_code[s] == 'A04':
    #                                     print(tmp_status)
    #                                     print(tmp_time)
    #                                     step_status.append(tmp_status[s])
    #                                     step_email.append(tmp_email)
    #                                     email_one_sum.append(tmp_email)
    #                                     #process หา timeline
    #                                     if (tmp_arr_step_detail['activity_status'][s] == 'Complete' or tmp_arr_step_detail['activity_status'][s] =='Reject' or tmp_arr_step_detail['activity_status'][s] == 'Approve'):
    #                                         # print(tmp_arr_step_detail['activity_time'][s])
    #                                         t1 = str(tmp_arr_step_detail['activity_time'][s])
    #                                         # print ('else activity_time',t1)
    #                                         time_success = change_to_Timestamp(t1)
    #                                         step_time_1.append(time_success)
    #                                     #สิ้นสุดการหา timeline
    #                             timeline_ = getTimeline(sendtime,step_time_1)
    #                             tmp_timeline = timeline_  
    #                             list_timeline = getlistTimeline(sendtime,step_time_1)
    #                             tmp_timeline_list = list_timeline
    #                         email_step_sum.append(step_email)
    #                         if 'Reject' in step_status:
    #                             tmp_status_sum.append('Reject')
    #                         elif 'Approve' in step_status:
    #                             tmp_status_sum.append('Complete')
    #                         elif 'Complete' in step_status:
    #                             tmp_status_sum.append('Complete')
    #                         elif 'Incomplete' in step_status:
    #                             tmp_status_sum.append('Incomplete')
    #                         elif 'Pending' in step_status:
    #                             tmp_status_sum.append('Incomplete')
    #                         else:
    #                             tmp_status_sum.append('Complete')
    #                     tmp_sign_pad = None
    #                     # print(self.emailUser , email_one_sum)
    #                     # if self.emailUser in email_one_sum:
    #                     for zzi in range(len(step_infomation)):
    #                         list_check_step = []
    #                         json_step_info_2 = {}
    #                         step_list_data = []
    #                         step_status = []
    #                         step_ = step_infomation[zzi]
    #                         step_num = step_infomation[zzi]['step_num']
    #                         json_step_info_2['step_status'] = ''
    #                         tmp_step_detail = step_['step_detail']
                            
    #                         for zi in range(len(tmp_step_detail)):
    #                             tmp_arr_step_detail_2 = tmp_step_detail[zi]
    #                             oneMail = str(tmp_arr_step_detail_2['one_email']).replace(' ','').lower()
                                
    #                             tmp_step_me = int(step_num) - 1
    #                             step_num_int2 = int(step_num)
    #                             # print(oneMail, self.emailUser , tmp_status_sum[tmp_step_me])
    #                             print ('step_',step_)
    #                             if 'Reject' in tmp_status_sum:
    #                                 arr_step_info.append('Reject')
    #                             elif tmp_status_sum[tmp_step_me] == 'Incomplete':
    #                                 # if self.emailUser not in arr_email_list:
    #                                 index_step_me = tmp_step_me
                                    
    #                                 if index_step_me != 0:
    #                                     while index_step_me > 0:
    #                                         if len(arr_step_info) == 0:
    #                                             index_step_me = index_step_me - 1
    #                                             if tmp_status_sum[index_step_me] == 'Incomplete':
    #                                                 arr_step_info.append('Incomplete')
    #                                             else:
    #                                                 # if oneMail == self.emailUser:
    #                                                 if 'signpad' in step_:
    #                                                     tmp_sign_pad = step_['signpad']
    #                                                 else:
    #                                                     tmp_sign_pad = None
    #                                                 arr_step_info.append('Wait')
    #                                             # arr_email_list.append(self.emailUser)
    #                                         else:
    #                                             index_step_me = index_step_me - 1
    #                                             continue
    #                                 else:
    #                                     # if oneMail == self.emailUser:
    #                                     if 'signpad' in step_:
    #                                         tmp_sign_pad = step_['signpad']
    #                                     else:
    #                                         tmp_sign_pad = None
    #                                     arr_step_info.append('Wait')
    #                                 # if oneMail == self.emailUser:
    #                                 #     if 'signpad' in step_:
    #                                 #         tmp_sign_pad = step_['signpad']
    #                                 #     else:
    #                                 #         tmp_sign_pad = None
    #                             elif tmp_status_sum[tmp_step_me] == 'Complete':
    #                                 # if self.emailUser not in arr_email_list:
    #                                 for nz in range(step_num_int2,len(tmp_status_sum),1):
    #                                     if tmp_status_sum[nz] == 'Incomplete':
    #                                         arr_step_info.append('Incomplete')
    #                                     # elif self.emailUser not in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
    #                                     #     arr_step_info.append('Progress')
    #                                 # arr_email_list.append(self.emailUser)
    #                                 # if oneMail == self.emailUser:
    #                                 if 'signpad' in step_:
    #                                     tmp_sign_pad = step_['signpad']
    #                                 else:
    #                                     tmp_sign_pad = None
    #                     print(tmp_sign_pad)
    #                     if 'Reject' in arr_step_info:
    #                         res_status_file = 'R'
    #                         res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
    #                     elif 'Wait' in arr_step_info:
    #                         res_status_file = 'W'
    #                         res_status_file_string = 'รออนุมัติ'
    #                     elif 'Incomplete' in arr_step_info:
    #                         res_status_file = 'Z'
    #                         res_status_file_string = 'อยู่ในช่วงดำเนินการ'
    #                     elif 'Progress' in arr_step_info:
    #                         res_status_file = 'N'
    #                         res_status_file_string = 'กำลังดำเนินการ'                    
    #                     elif arr_step_info.count('Incomplete') >= 2:
    #                         res_status_file = 'Z'
    #                         res_status_file_string = 'อยู่ในช่วงดำเนินการ'
    #                     else:
    #                         res_status_file = 'Y'
    #                         res_status_file_string = 'อนุมัติแล้ว'
    #                     tmp_status_file_code = res_status_file
    #                     tmp_status_file_string = res_status_file_string
    #                     status_step_sum = ''
    #                     sum_status_step_list = []
    #                     alr_mail = []
    #                     # json_data_res['step_info'] = eval(result_Select_step.data_json)
    #                     for i in range(len(step_infomation)):
    #                         sign_json_info = {}
    #                         tmp_sign_list_info = []
    #                         step_ = step_infomation[i]
    #                         step_num = step_infomation[i]['step_num']
    #                         json_step_info_2['step_status'] = ''
    #                         if 'step_sign' in step_:
    #                             tmp_stepsign = step_['step_sign']
    #                             tmp_status_stepsign = tmp_stepsign['status']
    #                             if tmp_status_stepsign == True:
    #                                 tmp_data_stepsign = tmp_stepsign['data']
    #                                 for y in range(len(tmp_data_stepsign)):
    #                                     step_signning = tmp_data_stepsign[y]
    #                                     if 'id' in step_signning:
    #                                         if step_signning['id'] not in tmp_list_sign_id:
    #                                             tmp_sign_list_info.append(step_signning)
    #                                         else:
    #                                             tmp_sign_list_info.append(step_signning)
    #                                     else:
    #                                         tmp_sign_list_info.append(step_signning)

    #                         for u in range(len(step_['step_detail'])):
    #                             step_2 = step_['step_detail'][u]
    #                             for k in range(len(step_2['activity_data'])): 
    #                                 if 'status' in step_2['activity_data'][k]:                                            
    #                                     sign_json_info = step_2['activity_data'][k]
    #                                     if 'sign_llx' in step_2['activity_data'][k]:
    #                                         if 'id' in step_2['activity_data'][k]:
    #                                             if step_2['activity_data'][k]['id'] not in tmp_list_sign_id:
    #                                                 tmp_sign_list_info.append(sign_json_info)
    #                                         else:
    #                                             tmp_sign_list_info.append(sign_json_info)
    #                         # print(tmp_sign_list_info)
    #                         sign_json_info = {
    #                             'data':tmp_sign_list_info,
    #                             'step_num':step_num
    #                         }
    #                         # print(sign_json_info)
    #                         tmp_sign_detail_list.append(sign_json_info)
    #                     list_step_all = []
    #                     for ii in range(len(step_infomation)):
    #                         list_step = []
    #                         step_ = step_infomation[ii]
    #                         for uu in range(len(step_['step_detail'])):
    #                             step_2 = step_['step_detail'][uu]
    #                             for kk in range(len(step_2['activity_code'])):
    #                                 if step_2['activity_code'][kk] == 'A03':
    #                                     tmp_one_email = str(step_2['one_email']).replace(' ','').lower()
    #                                     list_step.append(step_2['activity_status'][kk])
    #                         # print('list_step',list_step)
    #                         list_step_all.append(list_step)
    #                     for i in range(len(step_infomation)):
    #                         list_step = []
    #                         list_check_step = []
    #                         json_step_info_2 = {}
    #                         step_list_data = []
    #                         step_ = step_infomation[i]
    #                         step_num = step_infomation[i]['step_num']
    #                         json_step_info_2['step_status'] = ''
    #                         for u in range(len(step_['step_detail'])):
    #                             # print('step_',step_)
    #                             step_2 = step_['step_detail'][u]
    #                             for k in range(len(step_2['activity_code'])):
    #                                 print(step_2['activity_code'][k])
    #                                 acty_code.append(step_2['activity_code'][k])
    #                                 if step_2['activity_code'][k] == 'A03':
    #                                     tmp_one_email = str(step_2['one_email']).replace(' ','').lower()
    #                                     # list_step.append(step_2['activity_status'][k])
    #                                     # print('list_step',list_step)
    #                                     # print('step',step_2['activity_status'][k])
    #                                     if 'Complete' in list_step_all[i] or 'Approve' in list_step_all[i]:
    #                                         pass
    #                                     else:
    #                                         # if self.emailUser == tmp_one_email:
    #                                         #     if self.emailUser not in alr_mail:
    #                                                 # print('55555')
    #                                                 # print('step_2',step_2)
    #                                                 # arr_get[n]['data_json']['step_detail'][o]['activity_status'][s]
    #                                                 # print(alr_mail ,step_2['activity_status'][k])
    #                                         if step_2['activity_status'][k] == 'Complete':
    #                                             # alr_mail.append(step_2['one_email'])
    #                                             tmp_file_user_status = step_2['activity_status'][k]
    #                                         elif step_2['activity_status'][k] == 'Approve':
    #                                             # alr_mail.append(step_2['one_email'])
    #                                             tmp_file_user_status = step_2['activity_status'][k]
    #                                         else:
    #                                             alr_mail.append(step_2['one_email'])
    #                                             tmp_file_user_status = step_2['activity_status'][k]
    #                                     # print(alr_mail)
    #                                     json_step_info = {}
    #                                     json_step_info['activity_status'] = step_2['activity_status'][k]
    #                                     json_step_info['one_email'] = tmp_one_email
    #                                     json_step_info['rf_step'] = None
    #                                     json_step_info['ref_step_num'] = None
    #                                     json_step_info['activity_code'] = step_2['activity_code'][k]
    #                                     if 'rf_step' in step_:
    #                                         if step_['rf_step'] != None:
    #                                             json_step_info['rf_step'] = step_['rf_step']
    #                                             json_step_info['ref_step_num'] = str(step_['rf_step']).split('-')[1]

    #                                     tmp_account_name = tmp_one_email
    #                                     search = "%'{}'%".format(tmp_one_email)
    #                                     if json_step_info['one_email'] != '':
    #                                         query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.like(search)).all()
    #                                         if len(query_name_account) != 0:
    #                                             try:
    #                                                 tmp_account_name = eval(query_name_account[0].citizen_data)
    #                                                 tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
    #                                             except Exception as e:
    #                                                 tmp_account_name = tmp_one_email
    #                                                 exc_type, exc_obj, exc_tb = sys.exc_info()
    #                                                 fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
    #                                                 print(exc_type, fname, exc_tb.tb_lineno)
    #                                     json_step_info['step_num'] = step_num
    #                                     json_step_info['account_name'] = tmp_account_name
    #                                     list_check_step.append(json_step_info['activity_status'])
    #                                     step_list_data.append(json_step_info)
    #                                 elif step_2['activity_code'][k] == 'A04':
    #                                     tmp_one_email = str(step_2['one_email']).replace(' ','').lower()
    #                                     # list_step.append(step_2['activity_status'][k])
    #                                     # print('list_step',list_step)
    #                                     # print('step',step_2['activity_status'][k])
    #                                     if 'Complete' in list_step_all[i] or 'Approve' in list_step_all[i]:
    #                                         pass
    #                                     else:
    #                                         # if self.emailUser == tmp_one_email:
    #                                         #     if self.emailUser not in alr_mail:
    #                                                 # print('55555')
    #                                                 # print('step_2',step_2)
    #                                                 # arr_get[n]['data_json']['step_detail'][o]['activity_status'][s]
    #                                                 # print(alr_mail ,step_2['activity_status'][k])
    #                                         if step_2['activity_status'][k] == 'Complete':
    #                                             # alr_mail.append(step_2['one_email'])
    #                                             tmp_file_user_status = step_2['activity_status'][k]
    #                                         elif step_2['activity_status'][k] == 'Approve':
    #                                             # alr_mail.append(step_2['one_email'])
    #                                             tmp_file_user_status = step_2['activity_status'][k]
    #                                         else:
    #                                             alr_mail.append(step_2['one_email'])
    #                                             tmp_file_user_status = step_2['activity_status'][k]
    #                                     # print(alr_mail)
    #                                     json_step_info = {}
    #                                     json_step_info['activity_status'] = step_2['activity_status'][k]
    #                                     json_step_info['one_email'] = tmp_one_email
    #                                     json_step_info['rf_step'] = None
    #                                     json_step_info['ref_step_num'] = None
    #                                     json_step_info['activity_code'] = step_2['activity_code'][k]
    #                                     if 'rf_step' in step_:
    #                                         if step_['rf_step'] != None:
    #                                             json_step_info['rf_step'] = step_['rf_step']
    #                                             json_step_info['ref_step_num'] = str(step_['rf_step']).split('-')[1]

    #                                     tmp_account_name = tmp_one_email
    #                                     search = "%'{}'%".format(tmp_one_email)
    #                                     if json_step_info['one_email'] != '':
    #                                         query_name_account = paper_lesslogin.query.filter(paper_lesslogin.citizen_data.like(search)).all()
    #                                         if len(query_name_account) != 0:
    #                                             try:
    #                                                 tmp_account_name = eval(query_name_account[0].citizen_data)
    #                                                 tmp_account_name = tmp_account_name['first_name_th'] + ' ' + tmp_account_name['last_name_th']
    #                                             except Exception as e:
    #                                                 tmp_account_name = tmp_one_email
    #                                                 exc_type, exc_obj, exc_tb = sys.exc_info()
    #                                                 fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
    #                                                 print(exc_type, fname, exc_tb.tb_lineno)
    #                                     json_step_info['step_num'] = step_num
    #                                     json_step_info['account_name'] = tmp_account_name
    #                                     list_check_step.append(json_step_info['activity_status'])
    #                                     step_list_data.append(json_step_info)
    #                                 json_step_info_2['step_info'] = step_list_data
    #                         if json_step_info_2['step_status'] == '':
    #                             if 'Reject' in list_check_step:
    #                                 json_step_info_2['step_status'] = 'Reject'
    #                             elif 'Approve' in list_check_step:
    #                                 json_step_info_2['step_status'] = 'Complete'
    #                             elif 'Complete' in list_check_step:
    #                                 json_step_info_2['step_status'] = 'Complete'
    #                             elif 'Incomplete' in list_check_step:
    #                                 json_step_info_2['step_status'] = 'Incomplete'
    #                             elif 'Pending' in list_check_step:
    #                                 json_step_info_2['step_status'] = 'Incomplete'
    #                             else:
    #                                 json_step_info_2['step_status'] = 'Complete'
    #                         # print(list_check_step)
    #                         if 'step_sign' in step_:
    #                             tmp_step_sign = step_['step_sign']
    #                             len_step_status = len(tmp_step_sign['data'])
    #                             # print(len_step_status)
    #                             if tmp_step_sign['status'] == True:
    #                                 if 'Incomplete' in list_check_step and list_check_step.count('Incomplete') == len_step_status:
    #                                     json_step_info_2['step_status'] = 'Incomplete'
    #                                 elif 'Complete' in list_check_step and list_check_step.count('Complete') == len_step_status:
    #                                     json_step_info_2['step_status'] = 'Complete'
    #                                 else:
    #                                     json_step_info_2['step_status'] = 'Incomplete'
    #                                 # for yt in range(len(list_check_step)):
    #                                 #     tmp_status_step_one = list_check_step[yt]
                                        
    #                                 #     print(tmp_status_step_one)
    #                         sum_status_step_list.append(json_step_info_2['step_status'])
    #                         tmp_file_user_status_detail.append(json_step_info_2)
    #                     if 'Reject' in sum_status_step_list:
    #                         status_step_sum = 'Reject'
    #                         # sendtime = json_data_res['send_time']
    #                         timing_ = timing(time_success,sendtime)
    #                         tmp_timing = timing_
    #                     elif 'Incomplete' in sum_status_step_list:
    #                         status_step_sum = 'Incomplete'
    #                         now = datetime.datetime.now()
    #                         # sendtime = json_data_res['send_time']
    #                         timing_ = timing(datetime.datetime.timestamp(now),sendtime)
    #                         tmp_timing = timing_
    #                     elif 'Pending' in sum_status_step_list:
    #                         status_step_sum = 'Incomplete'
    #                         now = datetime.datetime.now()
    #                         # sendtime = json_data_res['send_time']
    #                         timing_ = timing(datetime.datetime.timestamp(now),sendtime)
    #                         tmp_timing = timing_
    #                     elif 'Approve' in sum_status_step_list:
    #                         status_step_sum = 'Complete'
    #                         # sendtime = json_data_res['send_time']
    #                         timing_ = timing(time_success,sendtime)
    #                         tmp_timing = timing_
    #                     elif 'Complete' in sum_status_step_list:
    #                         status_step_sum = 'Complete'
    #                         # sendtime = json_data_res['send_time']
    #                         timing_ = timing(time_success,sendtime)
    #                         tmp_timing = timing_
    #                     else:
    #                         status_step_sum = 'Complete'
    #                         # sendtime = json_data_res['send_time']
    #                         timing_ = timing(time_success,sendtime)
    #                         tmp_timing = timing_
    #                     tmp_file_status_sum = status_step_sum
    #                     tmp_sign_detail = sign_detail
    #                     tmp_view_details = eval(tmpjson['view_details'])
    #                     if tmpjson['qrCode_position'] != None or str(tmpjson['qrCode_position']).replace(' ','') != '':
    #                         tmp_qrCode_position = eval(tmpjson['qrCode_position'])
    #                         tmp_qrCode_status = True
    #                     else:
    #                         tmp_qrCode_position = tmpjson['qrCode_position']
    #                         tmp_qrCode_status = False          
    #                     status_previeweform = False
                   
    #                     print(acty_code)
    #                     if 'A04' in acty_code:
    #                         status_previeweform = True    
    #                 if u == 2:
    #                     print ('2222')
    #                     tmpjson_document = tmp_query[n][u].__dict__
    #                     tmpstep_group = None
    #                     tmpstatus_group = False
    #                     if tmpjson_document['options_page'] != None:
    #                         option_page =  eval(tmpjson_document['options_page'])
    #                         if 'service_properties' in option_page:
    #                             service_properties = option_page['service_properties']
    #                             for nn in  range(len(service_properties)):
    #                                 ser = eval(str(service_properties[nn]))
    #                                 if 'name_service' in ser :
    #                                     name_service = ser['name_service']
    #                                     if name_service == 'GROUP':
    #                                         other = ser['other']
    #                                         for ni in range(len(other)):
    #                                             ot = eval(str(other[ni]))
    #                                             # tmp = {}
    #                                             # tmp = ot['properties']
    #                                             tmp_properties = ot['properties']
    #                     if tmpjson_document['options_page'] == None:
    #                         tmp_option_page = []
    #                     else:                                
    #                         tmp_option_page = eval(tmpjson_document['options_page'])
    #                         tmp_options_page_document = [tmp_option_page]
    #                         print(tmp_option_page)
    #                         if 'ca_require' in tmp_option_page:
    #                             tmp_ca_require = tmp_option_page['ca_require']
    #                             if type(tmp_ca_require) is bool:
    #                                 tmp_digit_sign = bool(tmp_ca_require)
    #                             else:
    #                                 tmp_digit_sign = ""
    #                         else:
    #                             tmp_digit_sign = bool(tmpjson_document['digit_sign'])
    #                         if 'group_detail' in tmp_option_page:
    #                             tmp_group_details = tmp_option_page['group_detail']
    #                             if 'group_status' in tmp_group_details:
    #                                 if tmp_group_details['group_status'] == True:
    #                                     tmpstatus_group = True
    #                                     tmpstep_group = tmp_group_details['step_num']
                            
    #                     tmp_documentJson = eval(tmpjson_document['documentJson'])
    #                     tmp_strdocument = str(tmpjson_document['documentJson'])
                    
    #                 if u == 3:
    #                     print ('3333')
    #                     tmpjson_pdf = tmp_query[n][u].__dict__
    #                     if tmpjson_pdf['string_sign'] != None:
    #                         if tmpjson_pdf['string_sign'] != None and tmpjson_pdf['path_sign'] != None:
    #                             r = readfile_pdfsign_v1(tmpjson_pdf['path_sign'])
    #                             tmppdf = r['basePDF']
    #                         elif tmpjson_pdf['string_sign'] != None and tmpjson_pdf['path_sign'] == None:
    #                             tmppdf = tmpjson_pdf['string_sign']
    #                         tmp_file_status = 'Complete'
    #                     else:
    #                         if tmpjson_pdf['string_sign'] == None and tmpjson_pdf['path_sign'] == None:
    #                             r = readfile_pdfsign_v1(tmpjson_pdf['path_pdf'])
    #                             if r['result'] == 'OK':
    #                                 tmppdf = r['basePDF']
    #                             else:
    #                                 tmppdf = tmpjson_pdf['string_pdf']
    #                         tmp_file_status = 'Incomplete'
                    
    #                 # if u == 4:
    #                 #     tmpjson_template = tmp_query[n][u].__dict__
    #                 #     tmp_tempname = str(tmpjson_template['step_Name'])
    #                 #     tmp_condition = str(tmpjson_template['condition_temp'])
    #             # print((list_check_step))
    #             # print(status_step_sum)
                
    #             info = {
    #                 'preview_eform':status_previeweform,
    #                 'url_image':tmp_url_image,
    #                 'pdfData':tmppdf,
    #                 'attempted_folder':tmpjson_document['attempted_folder'],
    #                 'condition_template':tmp_condition,
    #                 'digit_sign':tmp_digit_sign,
    #                 'document_Id':tmpjson_sender['doc_id'],
    #                 'document_details':tmp_documentJson,
    #                 'document_details_string':tmp_strdocument,
    #                 'document_time':document_timestamp,
    #                 'email_center':tmp_email_center,
    #                 'file_id':int(tmpjson_document['fileid']),
    #                 'file_name':tmpjson_sender['file_name'],
    #                 'file_status':tmp_file_status,
    #                 'file_status_sum':tmp_file_status_sum,
    #                 'file_user_status':tmp_file_user_status,
    #                 'file_user_status_detail':tmp_file_user_status_detail,
    #                 'options_page_document':tmp_options_page_document,
    #                 'qrCode_position':tmp_qrCode_position,
    #                 'qrCode_status':tmp_qrCode_status,
    #                 'send_time':tmp_datetime,
    #                 'send_time_display':tmp_datetime_display,
    #                 'send_time_string':str(tmp_datetime).split('+')[0],
    #                 'sender_email':tmpjson_sender['sender_email'],
    #                 'sender_name':tmpjson_sender['sender_name'],
    #                 'sender_position':tmpjson_sender['sender_position'],
    #                 'sign_detail':tmp_sign_detail,
    #                 'signpad':tmp_sign_pad,
    #                 'stamp_all':tmpjson_document['sign_page_options'],
    #                 'status':tmpjson_sender['status'],
    #                 'status_file_code':tmp_status_file_code,
    #                 'status_file_string':tmp_status_file_string,
    #                 'step_code':tmpjson_sender['step_code'],
    #                 'step_data_sid':tmpjson_sender['step_data_sid'],
    #                 'step_info':tmp_step_info,
    #                 'template_name':tmp_tempname,
    #                 'template_webhook':tmpjson_sender['template_webhook'],
    #                 'timeline':tmp_timeline,
    #                 'timeline_list':tmp_timeline_list,
    #                 'timing':tmp_timing,
    #                 'tracking_id':tmpjson_sender['tracking_id'],
    #                 'urgent_code':tmpjson_document['urgent_type'],
    #                 'view_details':tmp_view_details,
    #                 'sign_info':tmp_sign_detail_list,
    #                 'sign_require':require_sign_info,
    #                 'group_status':tmpstatus_group,
    #                 'group_stepnum':tmpstep_group,
    #                 'document_data':tmp_properties,
    #                 'status_tranfer':status_tranfer,
    #                 'group':status_grouphave,
    #                 'list_ref' : tmp_list_ref,
    #                 'status_service' : tmp_status_service,
    #                 'status_details' : tmp_status_details
    #             }
    #             arr_tmp.append(info)
    #         return {'result':'OK','messageText':arr_tmp}
    #     except Exception as e:
    #         exc_type, exc_obj, exc_tb = sys.exc_info()
    #         fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
    #         print(exc_type, fname, exc_tb.tb_lineno)
    #         return {'result':'ER','messageText':None,'messageER':str(e)}
    
    
    def select_querygroup_id_document_v1(self,sidcode):
        self.sidcode = sidcode
        tmp_qeury = db.session.query(paper_lesssender)\
            .filter(and_(paper_lesssender.status=='ACTIVE',paper_lesssender.step_data_sid==self.sidcode))\
            .first()
        if tmp_qeury != None:
            tmmpresult = {}
            tmp_json = tmp_qeury.__dict__
            if '_sa_instance_state' in tmp_json:
                tmp_json['_sa_instance_state'] = str(tmp_json['_sa_instance_state'])
            if tmp_json['group_id'] != None:
                tmmpresult['group_id'] = eval(tmp_json['group_id'])
            return {'result':'OK','messageText':tmmpresult}
        else:
            return {'result':'ER','messageText':'data not found'}

    def select_query_templategroup_v1(self,templagegroup_code):
        self.templagegroup_code = templagegroup_code
        sql = '''SELECT template,group_color,group_name,group_title,step_group,group_data,group_name,document_type,biz_info,cover_page,email_middle,webhook FROM tb_group_template WHERE status='ACTIVE' AND tid=:tid LIMIT 1 '''
        connection = slave.connect()
        result = connection.execute(text(sql),tid=self.templagegroup_code)
        resultQuery = [dict(row) for row in result]
        if len(resultQuery) != 0:
            tmmpresult = {}
            tmp_json = resultQuery[0]
            if tmp_json['template'] != None:
                tmmpresult['template'] = eval(tmp_json['template'])
            if tmp_json['group_color'] != None:
                tmmpresult['group_color'] = eval(tmp_json['group_color'])
            if tmp_json['group_name'] != None:
                tmmpresult['group_name'] = tmp_json['group_name']
            if tmp_json['group_title'] != None:
                tmmpresult['group_title'] = eval(tmp_json['group_title'])
            if tmp_json['step_group'] != None:
                tmmpresult['step_group'] = eval(tmp_json['step_group'])
            if tmp_json['group_data'] != None:
                tmmpresult['group_data'] = eval(tmp_json['group_data'])
            if tmp_json['group_name'] != None:
                tmmpresult['group_name'] = tmp_json['group_name']
            if tmp_json['document_type'] != None:
                tmmpresult['document_type'] = tmp_json['document_type']
            if tmp_json['biz_info'] != None:
                tmmpresult['biz_info'] = tmp_json['biz_info']
            if tmp_json['cover_page'] != None:
                tmmpresult['cover_page'] = tmp_json['cover_page']
            if tmp_json['email_middle'] != None:
                tmmpresult['email_middle'] = tmp_json['email_middle']
            if tmp_json['webhook'] != None:
                tmmpresult['webhook'] = tmp_json['webhook']
            return {'result':'OK','messageText':tmmpresult}
        else:
            return {'result':'ER','messageText':'data not found'}
        # tmp_qeury = db.session.query(tb_group_template)\
        #     .filter(and_(tb_group_template.status=='ACTIVE',tb_group_template.tid==self.templagegroup_code))\
        #     .first()
        return resultQuery
        if tmp_qeury != None:
            tmmpresult = {}
            tmp_json = tmp_qeury.__dict__
            if '_sa_instance_state' in tmp_json:
                tmp_json['_sa_instance_state'] = str(tmp_json['_sa_instance_state'])
            if tmp_json['template'] != None:
                tmmpresult['template'] = eval(tmp_json['template'])
            if tmp_json['group_color'] != None:
                tmmpresult['group_color'] = eval(tmp_json['group_color'])
            if tmp_json['group_name'] != None:
                tmmpresult['group_name'] = tmp_json['group_name']
            if tmp_json['group_title'] != None:
                tmmpresult['group_title'] = eval(tmp_json['group_title'])
            if tmp_json['step_group'] != None:
                tmmpresult['step_group'] = eval(tmp_json['step_group'])
            if tmp_json['group_data'] != None:
                tmmpresult['group_data'] = eval(tmp_json['group_data'])
            if tmp_json['group_name'] != None:
                tmmpresult['group_name'] = tmp_json['group_name']
            if tmp_json['document_type'] != None:
                tmmpresult['document_type'] = tmp_json['document_type']
            if tmp_json['biz_info'] != None:
                tmmpresult['biz_info'] = tmp_json['biz_info']
            if tmp_json['cover_page'] != None:
                tmmpresult['cover_page'] = tmp_json['cover_page']
            if tmp_json['email_middle'] != None:
                tmmpresult['email_middle'] = tmp_json['email_middle']
            return {'result':'OK','messageText':tmmpresult}
        else:
            return {'result':'ER','messageText':'data not found'}
            
    def select_document_type_forservice_v1(self,username,tax_id,documenttype):
        self.username = username
        self.tax_id = tax_id
        self.documenttype = documenttype
        if self.username != None and self.tax_id == None:
            tmp_qeury = db.session.query(paper_lessdocument_detail)\
                .filter(and_(paper_lessdocument_detail.documentUser==self.username,paper_lessdocument_detail.documentType==self.documenttype,paper_lessdocument_detail.documentStatus=='ACTIVE'))\
                .first()
        elif self.username == None and self.tax_id != None:
            tmp_qeury = db.session.query(paper_lessdocument_detail)\
                .filter(and_(paper_lessdocument_detail.biz_info.contains(self.tax_id),paper_lessdocument_detail.documentType==self.documenttype,paper_lessdocument_detail.documentStatus=='ACTIVE'))\
                .first()  
        if tmp_qeury != None:
            if tmp_qeury.other_service_permission != None:
                tmp_optionpage = eval(tmp_qeury.other_service_permission)
                return {'result':'OK','messageText':tmp_optionpage}
        return {'result':'ER'}
        
    def select_check_template_stepforgroup_v1(self,template_code_arr):
        self.template_code_arr = template_code_arr
        arr_tmpstepdata = []
        arr_tmpemail = []
        arr_tmpemail2= []
        tmp_email_middle = None
        tmp_qeury = db.session.query(paper_lessstep)\
            .filter(and_(paper_lessstep.step_Code.in_(self.template_code_arr),paper_lessstep.status=='ACTIVE'))\
            .all()
        for x in range(len(tmp_qeury)):
            arr_email = []
            arr_stepdetail = []
            arr_stepgroup_template = []
            tmp_template_code = tmp_qeury[x].step_Code
            try:
                tmp_email_middle = eval(tmp_qeury[x].email_center)
            except Exception as e:
                tmp_email_middle = tmp_qeury[x].email_center
            if tmp_qeury[x].options_page != None:
                tmpoptionpage = eval(tmp_qeury[x].options_page)
                if 'group_detail' in tmpoptionpage:
                    tmp_groupdetail = tmpoptionpage['group_detail']
                    if 'group_status' in tmp_groupdetail:
                        if tmp_groupdetail['group_status'] == True:
                            if len(tmp_groupdetail['step_num']) != 0:
                                for g in range(len(tmp_groupdetail['step_num'])):
                                    arr_stepgroup_template.append(tmp_groupdetail['step_num'][g]) 
            if tmp_qeury[x].step_Data != None:
                arr_tmp = []
                tmp_stepdata = tmp_qeury[x].step_Data
                tmp_stepdata = eval(tmp_stepdata)
                if 'step_num' in tmp_stepdata:
                    tmp_stepdata = [tmp_stepdata]
                tmp_stepdata = list(tmp_stepdata)
                arr_tmp.append(tmp_stepdata)
            for a in range(len(arr_tmp)):
                tmpdataq = arr_tmp[a]
                for f in range(len(tmpdataq)):
                    tmpstep_num = int(tmpdataq[f]['step_num'])
                    for u in range(len(arr_stepgroup_template)):
                        if tmpstep_num == arr_stepgroup_template[u]:
                            arr_stepdetail.append(tmpdataq[f])
            for g in range(len(arr_stepdetail)):
                tmpemail = []
                if 'step_detail' in arr_stepdetail[g]:
                    for t in range(len(arr_stepdetail[g]['step_detail'])):
                        if 'one_email' in arr_stepdetail[g]['step_detail'][t]:
                            tmponeemail = arr_stepdetail[g]['step_detail'][t]['one_email']
                            tmpemail.append(tmponeemail)
                arr_email.append(tmpemail)
                arr_tmpemail.append(tmpemail)
            arr_tmpemail2.append({'email':arr_email,'template_code':tmp_template_code})
        arr_emailsum = []
        arr_templatecode = []
        line_dict_0 = ''
        for y in range(len(arr_tmpemail2)):
            d = {}
            arr_emailonethai = []
            tmpgroupemail = arr_tmpemail2[y]['email']
            tmp_templatecode = arr_tmpemail2[y]['template_code']
            for r in range(len(tmpgroupemail)):
                if len(tmpgroupemail[r]) != 0:
                    for e in range(len(tmpgroupemail[r])):
                        arr_emailonethai.append(tmpgroupemail[r][e])
            arr_emailsum.append({'email':arr_emailonethai,'template_code':tmp_templatecode})
        print(arr_emailsum)
        if len(arr_emailsum) != 0:
            for i in range(len(arr_emailsum)):
                tmpcode =arr_emailsum[i]['template_code']
                now_tmp = arr_emailsum[i]['email']
                before_tmp = arr_emailsum[i-1]['email']
                if len(arr_emailsum[i]) != 0:
                    if before_tmp == now_tmp:
                        arr_templatecode.append(tmpcode)
        if len(arr_templatecode) == 0:
            for i in range(len(arr_emailsum)):
                if i == 0:
                    tmpcode = arr_emailsum[i]['template_code']
                    arr_templatecode.append(tmpcode)
        tmp_info = []
        tmp_info2 = []
        tmp_templatecodearr = []
        swit = False
        for y in range(len(arr_tmpemail2)):
            d = {}
            arr_emailonethai = []
            tmpgroupemail = arr_tmpemail2[y]['email']
            tmp_templatecode = arr_tmpemail2[y]['template_code']
            len_email = len(tmpgroupemail)
            # print(tmp_templatecode,tmpgroupemail,arr_templatecode)
            if tmp_templatecode in arr_templatecode:
                tmp_templatecodearr.append(tmp_templatecode)
                if len_email >= len(tmp_info) and swit == False:
                    for x in range(len(tmpgroupemail)):
                        name_user = fine_name_surename_list(tmpgroupemail[x])
                        title_user = fine_title_list(tmpgroupemail[x])
                        tmp_info.append({'email_one':tmpgroupemail[x],'name_one':name_user,'status':'Incomplete'})
                        tmp_info2.append({'email_one':tmpgroupemail[x],'name_one':name_user, 'title_one':title_user , 'sign_llx': '', 'sign_lly': '', 'sign_urx': '', 'sign_ury': '', 'sign_page': '1', 'status': 'incomplete'})
                    swit = True
                elif swit == True:
                    pass
                # print(tmp_templatecode)
        result_tmp = [{
            'template_code':tmp_templatecodearr,
            'step_group':tmp_info2,
            'group_data':tmp_info,
            'email_middle':tmp_email_middle
        }]
        return result_tmp
            
    def select_report_v3(self,email_list,document_type,start_datetime,end_datetime,tmp_tax_id):
        self.email_list = email_list
        self.document_type = document_type
        self.start_datetime = start_datetime
        self.end_datetime = end_datetime
        self.tmp_tax_id = tmp_tax_id
        tmp_list_sid_code = []
        count_document = 0
        count_rowDocument = 0
        count_rowDocument_StatusActive = 0
        count_rowDocument_StatusReject = 0
        count_rowDocument_StatusCancel = 0
        statusFile_count_approve = 0
        statusFile_count_pendding = 0
        statusFile_count_reject = 0
        statusFile_count_wait = 0
        step_time = []
        step_time_total = []
        t1 = None
        t2 = None
        try:
            time_setting = 'start'
            if self.start_datetime != "" and self.end_datetime != "":
                date_start_tmp = datetime.datetime.fromtimestamp(self.start_datetime)
                date_end_tmp = datetime.datetime.fromtimestamp(self.end_datetime)
            elif self.start_datetime != "" and self.end_datetime == "":
                date_start_tmp = datetime.datetime.fromtimestamp(self.start_datetime)
                date_end_tmp = datetime.datetime.fromtimestamp(time.time())
            else:
                time_setting = 'all'
        except Exception as e:
            time_setting = 'all'
        sid_list_email = []
        list_arr = []
        json_Data = {}
        try:
            for i in range(len(self.email_list)):
                if len(str(self.document_type).replace(' ','')) != 0:
                    if time_setting == 'start':
                        query_list = paper_lesssender.query.join(paper_lessdocument, paper_lesssender.step_data_sid==paper_lessdocument.step_id).filter(paper_lessdocument.documentType==self.document_type).filter(paper_lesssender.recipient_email.contains(self.email_list[i]),paper_lesssender.send_time>=date_start_tmp,paper_lesssender.send_time<=date_end_tmp).all()
                        db.session.close()
                    else:
                        query_list = paper_lesssender.query.join(paper_lessdocument, paper_lesssender.step_data_sid==paper_lessdocument.step_id).filter(paper_lessdocument.documentType==self.document_type).filter(paper_lesssender.recipient_email.contains(self.email_list[i])).all()
                        db.session.close()
                else:
                    if time_setting == 'start':
                        query_list = paper_lesssender.query.join(paper_lessdocument, paper_lesssender.step_data_sid==paper_lessdocument.step_id).filter().filter(paper_lesssender.recipient_email.contains(self.email_list[i]),paper_lesssender.send_time>=date_start_tmp,paper_lesssender.send_time<=date_end_tmp).all()
                        db.session.close()
                    else:
                        query_list = paper_lesssender.query.join(paper_lessdocument, paper_lesssender.step_data_sid==paper_lessdocument.step_id).filter().filter(paper_lesssender.recipient_email.contains(self.email_list[i])).all()
                        db.session.close()
                # query_list = paper_lesssender.query.filter(paper_lesssender.send_time>=date_start_tmp,paper_lesssender.send_time<=date_end_tmp).all()
                if len(query_list) != 0:
                    for u in range(len(query_list)):
                        sid_code = query_list[u].step_data_sid
                        if sid_code not in tmp_list_sid_code:
                            tmp_list_sid_code.append(sid_code)
                            count_document = count_document + 1
                            sid_list_email.append(sid_code)
            try:
                if str(self.tmp_tax_id).replace(' ','') != '':
                    query_email = paper_lessdatastep.query.filter(paper_lessdatastep.sid.in_(sid_list_email)).filter(paper_lessdatastep.biz_info.contains("'id_card_num': '"+self.tmp_tax_id+"'")).all()
                    db.session.close()
                else:
                    query_email = paper_lessdatastep.query.filter(paper_lessdatastep.sid.in_(sid_list_email)).all()
                    db.session.close()
               
             
                with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
                    future_to_url = {executor.submit(TradeExcelReport_v2,self.tmp_tax_id ,query_email): query_email for query_email in query_email}
                    for future in concurrent.futures.as_completed(future_to_url):
                        try:
                            db.session.close()
                            data = future.result(timeout = None)
                            list_arr.append(data[0])
                            db.session.close()
                        except Exception as exc:
                            print(' generated an exception: %s' % (exc))
                list_arr = sorted(list_arr, key=lambda k: k['dateTime'], reverse=True)
                json_Data['Document_Details'] = list_arr
                db.session.close()
                if len(list_arr)==0 :
                    return {'result':'ER','messageText':None,'status_Code':200,'messageER':'data not found'}
                return {'result':'OK','messageText':json_Data,'status_Code':200,'messageER':None}
               
            except Exception as e:
                exc_type, exc_obj, exc_tb = sys.exc_info()
                fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                print(exc_type, fname, exc_tb.tb_lineno)

                return {'result':'ER','messageText':None,'status_Code':200,'messageER':str(e)}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)

            return {'result':'ER','messageText':None,'status_Code':200,'messageER':str(e)}

    def select_sum_template(self,taxId,username,input_):
        self.taxId = taxId
        self.username = username
        self.input = input_
        list_ = []
        tmp_arr_get = []
        tmp_json = {}
        query_temp = None
        try:
            # if self.taxId == '' or self.taxId == None:
            #     return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
            ch,startTime = checkDatetime(self.input)
            
            if self.taxId != None:
                if ch == True:
                    # print('อัพเดตล่าสุด')
                    endTime = startTime.replace(hour=23, minute=59, second=59, microsecond=0)
                    query_temp = db.session.query(
                        paper_lessstep.step_Code,
                        paper_lessdocument_detail.documentJson)\
                        .join(paper_lessdocument_detail, paper_lessdocument_detail.documentType==paper_lessstep.documentDetails)\
                        .filter(paper_lessstep.DateTime <= endTime).filter(paper_lessstep.DateTime >= startTime)\
                        .filter(paper_lessstep.status=='ACTIVE',paper_lessstep.template_biz.contains(self.taxId))\
                        .filter(paper_lessdocument_detail.documentStatus=="ACTIVE",paper_lessdocument_detail.biz_info!=None,paper_lessdocument_detail.biz_info!='',paper_lessdocument_detail.biz_info.contains(self.taxId))\
                        .order_by((paper_lessstep.documentDetails).asc())\
                        .count()
                
                else:
                    # print('ประเภท ชื่อรูปแบบ')
                    input2 = '%' + str(self.input) + '%'
                    query_temp = db.session.query(
                        paper_lessstep.step_Code,
                        paper_lessdocument_detail.documentJson)\
                        .join(paper_lessdocument_detail, paper_lessdocument_detail.documentType==paper_lessstep.documentDetails)\
                        .filter(or_(paper_lessstep.step_Name.ilike(input2),paper_lessdocument_detail.documentJson.ilike(input2),paper_lessstep.email.ilike(input2)))\
                        .filter(paper_lessstep.status=='ACTIVE',paper_lessstep.template_biz.contains(self.taxId))\
                        .filter(paper_lessdocument_detail.documentStatus=="ACTIVE",paper_lessdocument_detail.biz_info!=None,paper_lessdocument_detail.biz_info!='',paper_lessdocument_detail.biz_info.contains(self.taxId))\
                        .order_by((paper_lessstep.documentDetails).asc())\
                        .count()
            
            elif self.username != None : 
                if ch == True:
                    endTime = startTime.replace(hour=23, minute=59, second=59, microsecond=0)
                    query_temp = db.session.query(
                        paper_lessstep.step_Code,
                        paper_lessdocument_detail.documentJson)\
                        .join(paper_lessdocument_detail, paper_lessdocument_detail.documentType==paper_lessstep.documentDetails)\
                        .filter(paper_lessstep.username==self.username,paper_lessstep.status=="ACTIVE")\
                        .filter(or_(paper_lessstep.template_biz=='',paper_lessstep.template_biz==None))\
                        .filter(paper_lessdocument_detail.documentUser == self.username)\
                        .filter(paper_lessdocument_detail.documentStatus == "ACTIVE")\
                        .filter(paper_lessstep.DateTime <= endTime).filter(paper_lessstep.DateTime >= startTime)\
                        .order_by((paper_lessstep.sid).asc())\
                        .count()
                else:
                    input2 = '%'+ str(self.input) + '%'
                    query_temp = db.session.query(
                        paper_lessstep.step_Code,
                        paper_lessdocument_detail.documentJson)\
                        .join(paper_lessdocument_detail, paper_lessdocument_detail.documentType==paper_lessstep.documentDetails)\
                        .filter(paper_lessstep.username==self.username,paper_lessstep.status=="ACTIVE")\
                        .filter(or_(paper_lessstep.template_biz=='',paper_lessstep.template_biz==None))\
                        .filter(paper_lessdocument_detail.documentUser == self.username)\
                        .filter(paper_lessdocument_detail.documentStatus == "ACTIVE")\
                        .filter(or_(paper_lessstep.step_Name.ilike(input2),paper_lessdocument_detail.documentJson.ilike(input2),paper_lessstep.email.ilike(input2)))\
                        .order_by((paper_lessstep.sid).asc())\
                        .count()
            # print(query_temp)
            tmp_json = {}
            tmp_json['sum_template'] = query_temp
            if (query_temp) != 0:
                return {'result':'OK','messageText':tmp_json,'status_Code':200}
            else:
                return {'result': 'OK', 'messageText': 'ไม่พบข้อมูล'}
        except Exception as ex:
            print(ex)
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล','messageER':str(ex)}
        finally:
            db.session.close()

    def select_testsql(self):
        from sqlalchemy import text
        with slave.connect() as connection:
            # print(connection)
        # engine = db.engine
        # connection = engine.connect()
            user = 'jirayuknot55'
            # sql = text('''SELECT * FROM "tb_citizen_Login" WHERE username='jirayuknot';''')
            result = connection.execute(text('SELECT "id","account_id","username","access_time","vertify_token","access_token","access_token_time","access_token_begin","one_access_token","citizen_data","hash_data",\
                "biz_information","secure_number","ipaddress" FROM "tb_citizen_Login" WHERE username=:val'),val=user)
            # print(result)
            tmp = [dict(row) for row in result]
            return tmp
            # for row in result:
            # print(tmp)
        # sql = text('select * from tb_citizen_Login')
        # result = db.session.execute(sql)
        # names = [row[0] for row in result]
        # print(names)

    def select_doc_id_serviceother(self,doc_id):
        self.doc_id = doc_id
        try:
            tmpjson = {}
            tmpdict = []
            tmp_query = paper_lesssender.query.filter(paper_lesssender.doc_id==self.doc_id).first()
            if tmp_query != None:
                tmpquery = tb_transaction_servicelog.query.filter(tb_transaction_servicelog.sidcode==tmp_query.step_data_sid).all()
                tmpjson['sidcode'] = tmp_query.step_data_sid
                tmpjson['document_id'] = self.doc_id
                if len(tmpquery) == 0:
                    return {'result':'ER','messageText':'data not found'}
                for x in range(len(tmpquery)):
                    tmpjson2 = {
                        'id':tmpquery[x].id,
                        'service':tmpquery[x].service_type,
                        'status':tmpquery[x].status,
                        'message':tmpquery[x].message_error,
                        'datetime':str(tmpquery[x].datetime)
                    }
                    tmpdict.append(tmpjson2)
                tmpjson['data'] = tmpdict
                return {'result':'OK','messageText':tmpjson}
            else:
                return {'result':'ER','messageText':'document id not found'}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}
        finally:
            db.session.close()

    def select_query_email_v1(self,user_id,tokencode):
        self.user_id = user_id
        try:
            sql = '''select username,citizen_data,biz_information FROM "tb_citizen_Login" where account_id =:tmpuserid '''
            with engine.connect() as connection:
                result = connection.execute(text(sql),tmpuserid=self.user_id)
            connection.close()
            data = [dict(row) for row in result]
            # print(data)
            if len(data) > 0:
                tmpuser = data[0]['username']
                tmp_citizen = data[0]['citizen_data']
                tmp_biz_information = data[0]['biz_information']
                if tmp_citizen != None:
                    tmpemail = eval(tmp_citizen)
                    tmpemail = tmpemail['thai_email']
            # tmp_query = paper_lesslogin.query.filter(paper_lesslogin.account_id==self.user_id).first()
            # if tmp_query != None:
            #     tmpuser = tmp_query.username
            #     tmp_citizen = tmp_query.citizen_data
            #     tmp_biz_information = tmp_query.biz_information
            #     if tmp_citizen != None:
            #         tmpemail = eval(tmp_citizen)
            #         tmpemail = tmpemail['thai_email']

                    return {'result':'OK','emailuser':tmpemail,'username':tmpuser,'token':tokencode,'citizen_data':tmp_citizen,'biz_info':tmp_biz_information}
            return {'result':'ER'}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}
        finally:
            connection.close()

    def select_stepdata_v1(self,tax_id):
        self.tax_id = tax_id
        try:
            tmpquery = [
                "9b831cdb-158e-4d85-9540-fbffd3d673de",
                "c89f65c9-a43d-40dc-9bb1-65c32ee29a88",
                "dccbfb37-6209-4099-b4b3-af697242f956",
                "040100eb-4976-447c-b51f-7afcf0360889",
                "c4aff26d-ccca-4a5f-8e53-49e957e17200",
                "6f059ad0-a2b5-4b4a-a6a9-3697deedab96",
                "1b9099eb-aab2-41d0-b63a-70c994b6e821",
                "71698d9c-c44c-4fff-9ef3-001692f43d6a"
            ]
            # tmpquery = paper_lessdatastep.query.filter(paper_lessdatastep.biz_info.contains(self.tax_id)).all()
            for z in range(len(tmpquery)):
                print(tmpquery[z])
                delete().delete_all_table_for_service(tmpquery[z])
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

    def select_dashboard_recipient_v5_list_thread(self,emailUser):
        self.emailUser = emailUser
        from collections import deque
        sid_list = []
        sid_list_email = []
        json_Data = {}
        list_arr = []
        list_json = []
        try:
            tmp_list = []             
            count_rowDocument = 0
            count_rowDocument_StatusActive = 0
            count_rowDocument_StatusReject = 0
            count_rowDocument_StatusCancel = 0
            statusFile_count_approve = 0
            statusFile_count_pendding = 0
            statusFile_count_reject = 0
            statusFile_count_wait = 0
            list_temp_query = []
            tmp_sid_code_list = []
            arr_gruop = []
            arr_group_sid = []
            tmp_arr_sid = []
            tmp_group_id = None
            json_Data = {}
            str_time = (time.time())
            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.contains(self.emailUser))\
                .order_by(desc(paper_lesssender.send_time))\
                .all()
            # .limit(100)\
            # .offset(0)\
            # print(query_temp)
            end_time = (time.time())
            print(end_time -str_time)
            
            # count_rowDocument_StatusActive = db.session.query(paper_lesssender, paper_lessdocument,paper_lessdatastep)\
            #     .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
            #     .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
            #     .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.contains(self.emailUser))\
            #     .order_by(desc(paper_lesssender.send_time))\
            #     .count()
            # count_rowDocument_StatusReject = db.session.query(paper_lesssender, paper_lessdocument,paper_lessdatastep)\
            #     .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
            #     .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
            #     .filter(paper_lesssender.status=='REJECT').filter(paper_lesssender.recipient_email.contains(self.emailUser))\
            #     .order_by(desc(paper_lesssender.send_time))\
            #     .count()
            # count_rowDocument_StatusCancel = db.session.query(paper_lesssender, paper_lessdocument,paper_lessdatastep)\
            #     .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
            #     .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
            #     .filter(paper_lesssender.status=='CANCEL').filter(paper_lesssender.recipient_email.contains(self.emailUser))\
            #     .order_by(desc(paper_lesssender.send_time))\
            #     .count()
            # return ''
            import multiprocessing
            a,b = split_list(query_temp)


            a1,a2 = split_list(a)
            b1,b2 = split_list(b)
          
            return_a1 = None
            return_a2 = None
            return_b1 = None
            return_b2 = None
            
            with concurrent.futures.ThreadPoolExecutor() as executor:
                a1 = executor.submit(listV5_2,emailUser,a1)
                a2 = executor.submit(listV5_2,emailUser,a2)
                b1 = executor.submit(listV5_2,emailUser,b1)
                b2= executor.submit(listV5_2,emailUser,b2)
                return_a1 = a1.result()
                return_a2 = a2.result()
                return_b1 = b1.result()
                return_b2 = b2.result()
            str_string_time = time.time()
            # list_arr += return_a1
            # list_arr += return_a2
            # list_arr += return_b1
            # list_arr += return_b2
            with concurrent.futures.ThreadPoolExecutor() as executor:
                executor.submit(list_arr.extend(return_a1))
                executor.submit(list_arr.extend(return_a2))
                executor.submit(list_arr.extend(return_b1))
                executor.submit(list_arr.extend(return_b2))
            end_string_time = time.time()
            print(end_string_time-str_string_time)
            # a,b = split_list(query_temp)
            # print(len(query_temp))
            # print(len(a))
            # print(len(b))
            # with concurrent.futures.ThreadPoolExecutor() as executor:
            #     r = executor.submit(listV5_2,emailUser,a).result()
            #     s = executor.submit(listV5_2,emailUser,b).result()
            #     # return_r = r
            #     # return_s = s.result()
            #     list_arr.extend(r)
            #     list_arr.extend(s)
                # for xr in range(len(return_r)):
                #     list_arr.append(return_r[xr])
                # for xy in range(len(return_s)):
                #     list_arr.append(return_r[xr])
            # with concurrent.futures.ThreadPoolExecutor() as executor:
            #     future_to_url = {executor.submit(listV5,self.emailUser,a): a for a in a}
            #     future_to_url_0 = {executor.submit(listV5,self.emailUser,b): b for b in b}
            #     # print(future_to_url[0])
            #     # print(future_to_url_0[0])
            #     for future in concurrent.futures.as_completed(future_to_url):
            #         try:
            #             db.session.close()
            #             data = future.result(timeout = None)
            #             list_arr.append(data[0])
            #             print('456')
            #             db.session.close()
            #         except Exception as exc:
            #             print(' generated an exception: %s' % (exc))
            #     for future in concurrent.futures.as_completed(future_to_url_0):
            #         try:
            #             db.session.close()
            #             data = future.result(timeout = None)
            #             list_arr.append(data[0])
            #             print('789')
            #             db.session.close()
            #         except Exception as exc:
            #             print(' generated an exception: %s' % (exc))

            
            
                    # arr.append(tmp_dict_json)
            list_arr = sorted(list_arr, key=lambda k: k['dateTime'], reverse=True)
            json_Data['Document_Details'] = list_arr
            return {'result':'OK','messageText':json_Data}
           
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

    def select_dashboard_recipient_v5_list(self,emailUser):
        self.emailUser = emailUser
        sid_list = []
        sid_list_email = []
        json_Data = {}
        list_arr = []
        list_json = []
        try:
            tmp_list = []             
            count_rowDocument = 0
            count_rowDocument_StatusActive = 0
            count_rowDocument_StatusReject = 0
            count_rowDocument_StatusCancel = 0
            statusFile_count_approve = 0
            statusFile_count_pendding = 0
            statusFile_count_reject = 0
            statusFile_count_wait = 0
            list_temp_query = []
            tmp_sid_code_list = []
            arr_gruop = []
            arr_group_sid = []
            tmp_arr_sid = []
            tmp_group_id = None
            json_Data = {}
            str_time = (time.time())
            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.contains(self.emailUser))\
                .order_by(desc(paper_lesssender.send_time))\
                .all()
            # .limit(100)\
            # .offset(0)\
            # print(query_temp)
            end_time = (time.time())
            # print(end_time -str_time)
            
            
            
            arr = []
            for u in range(len(query_temp)):
                arr_email_document = []
                tmp_req_email = []
                for z in range(len(query_temp[u])):
                    if z == 0:
                        tmp_dict_json = query_temp[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state']) 
                        tmp_sicode = tmp_dict_json['step_data_sid']
                        tmp_sid_code_list.append(tmp_sicode)
                        tmp_send_time = tmp_dict_json['send_time']
                        tmp_document_id = tmp_dict_json['doc_id']
                        tmp_tracking_id = tmp_dict_json['tracking_id']
                        tmp_sender_name = tmp_dict_json['sender_name']
                        tmp_sender_email = tmp_dict_json['sender_email']
                        tmp_file_name = tmp_dict_json['file_name']
                        tmp_groupid = tmp_dict_json['group_id']
                        email_step_sum = tmp_dict_json['recipient_email']
                        if email_step_sum != None:
                            email_step_sum = eval(email_step_sum)
                        # print(email_step_sum)
                        tmpstatus_detail = tmp_dict_json['status_details']
                        tmpdocument_status = tmp_dict_json['document_status']
                        tmpstepnow = tmp_dict_json['stepnow']
                        status_groupid = False
                        if tmp_groupid != None:
                            tmp_groupid = eval(tmp_groupid)
                            if len(tmp_groupid) != 0:
                                status_groupid = True
                        if tmpstepnow != None:
                            tmpstepnow = int(tmpstepnow)
                        tmpstepmax = tmp_dict_json['stepmax']
                        if tmpstepmax != None:
                            tmpstepmax = int(tmpstepmax)
                        if tmpstatus_detail != None:
                            tmpstatus_detail = eval(tmpstatus_detail)
                            if tmpdocument_status == 'N':
                                for x in range(len(tmpstatus_detail)):
                                    # print(tmp_sicode)
                                    # print(tmpstatus_detail[x])
                                    if self.emailUser not in arr_email_document:
                                        if self.emailUser in tmpstatus_detail[x]['email']:
                                            if tmpstatus_detail[x]['step_status_code'] == 'W':
                                                arr_email_document.append(self.emailUser)
                                                tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                                                break
                                            else:
                                                tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                        if tmpdocument_status == 'Z':
                            res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                        elif tmpdocument_status == 'W':
                            res_status_file_string = 'รอคุณอนุมัติ'
                        elif tmpdocument_status == 'N':
                            res_status_file_string = 'กำลังดำเนินการ'
                        elif tmpdocument_status == 'R':
                            res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                        else:
                            res_status_file_string = ''
                                            # else:

                        # print(tmpstatus_detail)
                    if z == 1:
                        tmp_document_type = None
                        tmp_dict_json = query_temp[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state'])
                        tmp_sign_page_options = tmp_dict_json['sign_page_options']
                        tmp_document_type = tmp_dict_json['documentType']
                        tmp_options_page = []
                        if tmp_dict_json['options_page'] != None:
                            if tmp_dict_json['options_page'] != '':
                            # print(tmp_dict_json['options_page'],tmp_document_id)
                                tmp_options_page = [eval(tmp_dict_json['options_page'])]
                        else:
                            tmp_options_page = []
                        if len(tmp_options_page) != 0:
                            # print(tmp_options_page[0]['group_detail'])
                            tmp_status_group = False
                            if status_groupid == True:
                                if len(tmp_options_page) != 0:
                                    if 'group_detail' in tmp_options_page[0]:
                                        tmp_group_detail = tmp_options_page[0]['group_detail']
                                        if 'group_status' in tmp_group_detail:
                                            if tmp_group_detail['group_status'] == True:
                                                tmp_status_group = True
                                                tmpstepnum = tmp_group_detail['step_num']
                                        # if 'step_num' in tmp_group_detail:
                                        #     tmp_status_group = True
                                        #     tmp_group_stepnum = tmp_group_detail['step_num']
                            # if 'group_detail' in tmp_options_page[0]:
                            #     if 'group_status' in tmp_options_page[0]['group_detail']:
                            #         tmpgroupdetails = tmp_options_page[0]['group_detail']
                            #         if tmpgroupdetails['group_status'] == True:
                            #             tmpstepnum = tmpgroupdetails['step_num']
                                        # print(tmpstepnum)
                        if tmp_dict_json['documentJson'] != None:
                            documentJson_result = eval(tmp_dict_json['documentJson'])
                            documentName = documentJson_result['document_name']
                            documentType = documentJson_result['document_type']
                        else:
                            documentName = None
                            documentType = None
                        if tmp_dict_json['urgent_type'] != None:
                            documentUrgentType = tmp_dict_json['urgent_type']
                            if documentUrgentType == 'I':
                                documentUrgentString = 'ด่วนมาก'
                            elif documentUrgentType == 'U':
                                documentUrgentString = 'ด่วน'
                            elif documentUrgentType == 'M':
                                documentUrgentString = 'ปกติ'
                    tmp_biz_info = None
                    if z == 2:
                        if query_temp[u][z] != None:
                            if query_temp[u][z] != 'None':
                                
                                eval_biz_info = json.dumps(query_temp[u][z])
                                eval_biz_info = json.loads(eval_biz_info)
                                eval_biz_info = eval(eval_biz_info)
                                # eval_biz_info
                                # print(eval_biz_info)
                                if 'dept_name' in eval_biz_info:            
                                    tmp_biz_info = {
                                        'tax_id':eval_biz_info['id_card_num'],
                                        'role_name' : eval_biz_info['role_name'],
                                        'dept_name' : eval_biz_info['dept_name'],
                                        'role_level' : eval_biz_info['role_level']               
                                    }                                
                                elif 'dept_name' not in eval_biz_info:
                                    tmp_biz_info = {
                                        'tax_id':eval_biz_info['id_card_num'],
                                        'role_name' : eval_biz_info['role_name'],
                                        'dept_name' : [],
                                        'role_level' : eval_biz_info['role_level']               
                                    }
                        
                    dateTime_String = tmp_send_time
                    th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                    ts = int(time.time())
                    date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                    year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                    datetime_display = int(dateTime_String.timestamp())
                    date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                    yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                    time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                    old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                    if date_time_today == date_time_db:
                        date_display_show = time_show_db
                    else:
                        if year_today == yar_db:
                            date_display_show = convert_datetime_TH_2_display(datetime_display)
                        else:
                            date_display_show = old_year

                if tmp_status_group == True:
                    for ui in range(len(tmpstepnum)):
                        intstepnum = tmpstepnum[ui] - 1
                        tmp_req_email.append(email_step_sum[intstepnum])    
                list_arr.append({
                    'group_email':tmp_req_email,
                    'group_id':None,
                    'group_status':tmp_status_group,
                    'sidCode':tmp_sicode,
                    'document_name':documentName,
                    'document_type':tmp_document_type,
                    'document_urgent':documentUrgentType,
                    'document_urgent_string':documentUrgentString,
                    'dateTime_String':str(dateTime_String).split('+')[0],
                    'dateTime_String_TH_1':th_dateTime_2,
                    'dateTime_display':date_display_show,
                    'document_id':tmp_document_id,
                    'stamp_all':tmp_sign_page_options,
                    'options_page_document':tmp_options_page,
                    'max_step':tmpstepmax,
                    'step_now':tmpstepnow,
                    # 'dateTime_String_TH_2':th_dateTime_2,
                    'date_String':str(dateTime_String).split(' ')[0],
                    'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                    'status_file_code':tmpdocument_status,
                    'status_file_string':res_status_file_string,
                    'dateTime':int(dateTime_String.timestamp()),
                    'tracking_id':tmp_tracking_id,
                    'sender_name':tmp_sender_name,
                    'sender_email':tmp_sender_email,
                    'file_name':tmp_file_name,
                    'document_business':tmp_biz_info
                })
            list_arr = sorted(list_arr, key=lambda k: k['dateTime'], reverse=True)
            json_Data['Document_Details'] = list_arr
                    # arr.append(tmp_dict_json)
            return {'result':'OK','messageText':json_Data}
            
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

    def select_dashboard_recipient_v6_list_update_time(self,emailUser,tmptimeapprove=None):
        self.emailUser = emailUser
        self.tmptimeapprove = tmptimeapprove
        if self.tmptimeapprove != None:
            self.tmptimeapprove = tmptimeapprove
        sid_list = []
        sid_list_email = []
        json_Data = {}
        list_arr = []
        list_json = []
        try:
            tmp_list = []             
            count_rowDocument = 0
            count_rowDocument_StatusActive = 0
            count_rowDocument_StatusReject = 0
            count_rowDocument_StatusCancel = 0
            statusFile_count_approve = 0
            statusFile_count_pendding = 0
            statusFile_count_reject = 0
            statusFile_count_wait = 0
            list_temp_query = []
            tmp_sid_code_list = []
            arr_gruop = []
            arr_group_sid = []
            tmp_arr_sid = []
            tmp_group_id = None
            json_Data = {}
            str_time = (time.time())
            if self.tmptimeapprove == True:
                query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.contains(self.emailUser))\
                    .order_by(desc(paper_lessdatastep.update_time))\
                    .all()
            else:
                query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.contains(self.emailUser))\
                    .order_by(desc(paper_lesssender.send_time))\
                    .all()
            # .limit(100)\
            # .offset(0)\
            # print(query_temp)
            end_time = (time.time())
            # print(end_time -str_time)
            
            
            
            arr = []
            for u in range(len(query_temp)):
                arr_email_document = []
                tmp_req_email = []
                for z in range(len(query_temp[u])):
                    if z == 0:
                        tmp_dict_json = query_temp[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state']) 
                        tmp_sicode = tmp_dict_json['step_data_sid']
                        tmp_sid_code_list.append(tmp_sicode)
                        tmp_send_time = tmp_dict_json['send_time']
                        tmp_document_id = tmp_dict_json['doc_id']
                        tmp_tracking_id = tmp_dict_json['tracking_id']
                        tmp_sender_name = tmp_dict_json['sender_name']
                        tmp_sender_email = tmp_dict_json['sender_email']
                        tmp_file_name = tmp_dict_json['file_name']
                        tmp_groupid = tmp_dict_json['group_id']
                        email_step_sum = tmp_dict_json['recipient_email']
                        if email_step_sum != None:
                            email_step_sum = eval(email_step_sum)
                        # print(email_step_sum)
                        tmpstatus_detail = tmp_dict_json['status_details']
                        tmpdocument_status = tmp_dict_json['document_status']
                        tmpstepnow = tmp_dict_json['stepnow']
                        status_groupid = False
                        if tmp_groupid != None:
                            tmp_groupid = eval(tmp_groupid)
                            if len(tmp_groupid) != 0:
                                status_groupid = True
                        if tmpstepnow != None:
                            tmpstepnow = int(tmpstepnow)
                        tmpstepmax = tmp_dict_json['stepmax']
                        if tmpstepmax != None:
                            tmpstepmax = int(tmpstepmax)
                        if tmpstatus_detail != None:
                            tmpstatus_detail = eval(tmpstatus_detail)
                            if tmpdocument_status == 'N':
                                for x in range(len(tmpstatus_detail)):
                                    # print(tmp_sicode)
                                    # print(tmpstatus_detail[x])
                                    if self.emailUser not in arr_email_document:
                                        if self.emailUser in tmpstatus_detail[x]['email']:
                                            if tmpstatus_detail[x]['step_status_code'] == 'W':
                                                arr_email_document.append(self.emailUser)
                                                tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                                                break
                                            else:
                                                tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                        if tmpdocument_status == 'Z':
                            res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                        elif tmpdocument_status == 'W':
                            res_status_file_string = 'รอคุณอนุมัติ'
                        elif tmpdocument_status == 'N':
                            res_status_file_string = 'กำลังดำเนินการ'
                        elif tmpdocument_status == 'R':
                            res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                        else:
                            res_status_file_string = ''
                                            # else:

                        # print(tmpstatus_detail)
                    if z == 1:
                        tmp_document_type = None
                        tmp_dict_json = query_temp[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state'])
                        tmp_sign_page_options = tmp_dict_json['sign_page_options']
                        tmp_document_type = tmp_dict_json['documentType']
                        tmp_options_page = []
                        if tmp_dict_json['options_page'] != None:
                            if tmp_dict_json['options_page'] != '':
                            # print(tmp_dict_json['options_page'],tmp_document_id)
                                tmp_options_page = [eval(tmp_dict_json['options_page'])]
                        else:
                            tmp_options_page = []
                        if len(tmp_options_page) != 0:
                            # print(tmp_options_page[0]['group_detail'])
                            tmp_status_group = False
                            if status_groupid == True:
                                if len(tmp_options_page) != 0:
                                    if 'group_detail' in tmp_options_page[0]:
                                        tmp_group_detail = tmp_options_page[0]['group_detail']
                                        if 'group_status' in tmp_group_detail:
                                            if tmp_group_detail['group_status'] == True:
                                                tmp_status_group = True
                                                tmpstepnum = tmp_group_detail['step_num']
                                        # if 'step_num' in tmp_group_detail:
                                        #     tmp_status_group = True
                                        #     tmp_group_stepnum = tmp_group_detail['step_num']
                            # if 'group_detail' in tmp_options_page[0]:
                            #     if 'group_status' in tmp_options_page[0]['group_detail']:
                            #         tmpgroupdetails = tmp_options_page[0]['group_detail']
                            #         if tmpgroupdetails['group_status'] == True:
                            #             tmpstepnum = tmpgroupdetails['step_num']
                                        # print(tmpstepnum)
                        if tmp_dict_json['documentJson'] != None:
                            documentJson_result = eval(tmp_dict_json['documentJson'])
                            documentName = documentJson_result['document_name']
                            documentType = documentJson_result['document_type']
                        else:
                            documentName = None
                            documentType = None
                        if tmp_dict_json['urgent_type'] != None:
                            documentUrgentType = tmp_dict_json['urgent_type']
                            if documentUrgentType == 'I':
                                documentUrgentString = 'ด่วนมาก'
                            elif documentUrgentType == 'U':
                                documentUrgentString = 'ด่วน'
                            elif documentUrgentType == 'M':
                                documentUrgentString = 'ปกติ'
                    tmp_biz_info = None
                    if z == 2:
                        if query_temp[u][z] != None:
                            if query_temp[u][z] != 'None':
                                
                                eval_biz_info = json.dumps(query_temp[u][z])
                                eval_biz_info = json.loads(eval_biz_info)
                                eval_biz_info = eval(eval_biz_info)
                                # eval_biz_info
                                # print(eval_biz_info)
                                if 'dept_name' in eval_biz_info:            
                                    tmp_biz_info = {
                                        'tax_id':eval_biz_info['id_card_num'],
                                        'role_name' : eval_biz_info['role_name'],
                                        'dept_name' : eval_biz_info['dept_name'],
                                        'role_level' : eval_biz_info['role_level']               
                                    }                                
                                elif 'dept_name' not in eval_biz_info:
                                    tmp_biz_info = {
                                        'tax_id':eval_biz_info['id_card_num'],
                                        'role_name' : eval_biz_info['role_name'],
                                        'dept_name' : [],
                                        'role_level' : eval_biz_info['role_level']               
                                    }

                    if z == 3:
                        tmptime_update = (query_temp[u][z])
                        tmptime_update_timestamp = int(tmptime_update.timestamp())
                        tmptime_update_string = str(tmptime_update).split('+')[0]
                        th_dateTime_2_last = convert_datetime_TH_2(int(tmptime_update.timestamp()))
                        print(th_dateTime_2_last,tmptime_update)
                        ts = int(time.time())
                        date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                        year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                        datetime_display_update = int(tmptime_update.timestamp())
                        date_time_db = datetime.datetime.fromtimestamp(datetime_display_update).strftime('%Y-%m-%d')
                        yar_db = datetime.datetime.fromtimestamp(datetime_display_update).strftime('%Y')
                        time_show_db = datetime.datetime.fromtimestamp(datetime_display_update).strftime('%H:%M')
                        old_year = datetime.datetime.fromtimestamp(datetime_display_update).strftime('%d/%m/%Y')
                        if date_time_today == date_time_db:
                            date_last_display_show = time_show_db
                        else:
                            if year_today == yar_db:
                                date_last_display_show = convert_datetime_TH_2_display(datetime_display_update)
                            else:
                                date_last_display_show = old_year

                    dateTime_String = tmp_send_time
                    th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                    ts = int(time.time())
                    date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                    year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                    datetime_display = int(dateTime_String.timestamp())
                    date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                    yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                    time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                    old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                    if date_time_today == date_time_db:
                        date_display_show = time_show_db
                    else:
                        if year_today == yar_db:
                            date_display_show = convert_datetime_TH_2_display(datetime_display)
                        else:
                            date_display_show = old_year

                if tmp_status_group == True:
                    for ui in range(len(tmpstepnum)):
                        intstepnum = tmpstepnum[ui] - 1
                        tmp_req_email.append(email_step_sum[intstepnum])    
                list_arr.append({
                    'group_email':tmp_req_email,
                    'group_id':None,
                    'group_status':tmp_status_group,
                    'sidCode':tmp_sicode,
                    'document_name':documentName,
                    'document_type':tmp_document_type,
                    'document_urgent':documentUrgentType,
                    'document_urgent_string':documentUrgentString,
                    'dateTime_String':str(dateTime_String).split('+')[0],
                    'dateTime_String_TH_1':th_dateTime_2,
                    'dateTime_display':date_display_show,
                    'document_id':tmp_document_id,
                    'stamp_all':tmp_sign_page_options,
                    'options_page_document':tmp_options_page,
                    'max_step':tmpstepmax,
                    'step_now':tmpstepnow,
                    # 'dateTime_String_TH_2':th_dateTime_2,
                    'date_String':str(dateTime_String).split(' ')[0],
                    'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                    'status_file_code':tmpdocument_status,
                    'status_file_string':res_status_file_string,
                    'dateTime':int(dateTime_String.timestamp()),
                    'tracking_id':tmp_tracking_id,
                    'sender_name':tmp_sender_name,
                    'sender_email':tmp_sender_email,
                    'file_name':tmp_file_name,
                    'document_business':tmp_biz_info,
                    'update_last':tmptime_update,
                    'update_last_String_TH_1':th_dateTime_2_last,
                    'update_last_display':date_last_display_show,
                    'update_last_String':tmptime_update_string,
                    'update_last_TimeStamp':tmptime_update_timestamp,
                })
            list_arr = sorted(list_arr, key=lambda k: k['dateTime'], reverse=True)
            if self.tmptimeapprove == True:
                list_arr = sorted(list_arr, key=lambda k: k['update_last_TimeStamp'], reverse=True)
            json_Data['Document_Details'] = list_arr
                    # arr.append(tmp_dict_json)
            return {'result':'OK','messageText':json_Data}
            
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

    
    def select_dashboard_recipient_v5_sum_filter(self,emailUser,document_type):
        self.emailUser = emailUser
        self.document_type = document_type
        sid_list = []
        sid_list_email = []
        json_Data = {}
        list_arr = []
        list_json = []
        try:
            tmp_list = []             
            count_rowDocument = 0
            count_rowDocument_StatusActive = 0
            count_rowDocument_StatusReject = 0
            count_rowDocument_StatusCancel = 0
            statusFile_count_approve = 0
            statusFile_count_pendding = 0
            statusFile_count_reject = 0
            statusFile_count_wait = 0
            statusFile_count_wait_group = 0
            statusFile_count_Z_group = 0
            statusFile_count_pendding_group = 0
            statusFile_count_Z = 0
            list_temp_query = []
            tmp_sid_code_list = []
            arr_gruop = []
            arr_group_sid = []
            tmp_arr_sid = []
            tmp_group_id = None
            json_Data = {}
            str_time = (time.time())
            search = "%'{}'%".format(self.emailUser)
            statusFile_count_reject = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                .filter(paper_lesssender.document_status=='R')\
                .filter(paper_lessdocument.documentType==self.document_type)\
                .order_by(desc(paper_lesssender.send_time))\
                .count()
            statusFile_count_reject_group = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                .filter(paper_lesssender.document_status=='R')\
                .filter(or_(paper_lesssender.group_id=='[]',paper_lesssender.group_id==None))\
                .filter(paper_lessdocument.documentType==self.document_type)\
                .order_by(desc(paper_lesssender.send_time))\
                .count()
            statusFile_count_approve = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                .filter(paper_lesssender.document_status=='Y')\
                .filter(paper_lessdocument.documentType==self.document_type)\
                .order_by(desc(paper_lesssender.send_time))\
                .count()
            statusFile_count_approve_group = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                .filter(paper_lesssender.document_status=='Y')\
                .filter(or_(paper_lesssender.group_id=='[]',paper_lesssender.group_id==None))\
                .filter(paper_lessdocument.documentType==self.document_type)\
                .order_by(desc(paper_lesssender.send_time))\
                .count()
            tmp_query = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                .filter(paper_lesssender.document_status=='N')\
                .filter(paper_lessdocument.documentType==self.document_type)\
                .order_by(desc(paper_lesssender.send_time))\
                .all()
            tmp_query_group = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                .filter(paper_lesssender.document_status=='N')\
                .filter(paper_lessdocument.documentType==self.document_type)\
                .filter(or_(paper_lesssender.group_id=='[]',paper_lesssender.group_id==None))\
                .order_by(desc(paper_lesssender.send_time))\
                .all()
            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                .filter(paper_lessdocument.documentType==self.document_type)\
                .order_by(desc(paper_lesssender.send_time))\
                .count()
            query_temp_statusgroup = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                .filter(paper_lessdocument.documentType==self.document_type)\
                .filter(or_(paper_lesssender.group_id=='[]',paper_lesssender.group_id==None))\
                .order_by(desc(paper_lesssender.send_time))\
                .count()
            # print(statusFile_count_approve)
            # print(statusFile_count_reject)
            # print(query_temp)
            # return ''
            end_time = (time.time())            
            arr = []
            for u in range(len(tmp_query_group)):
                arr_email_document = []
                tmp_req_email = []
                for z in range(len(tmp_query_group[u])):
                    if z == 0:
                        tmp_dict_json = tmp_query_group[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state']) 
                        
                        tmpdocument_status = tmp_dict_json['document_status']
                        tmpstatus_detail = tmp_dict_json['status_details']
                        if tmpstatus_detail != None:
                            tmpstatus_detail = eval(tmpstatus_detail)
                            if tmpdocument_status == 'N':
                                for x in range(len(tmpstatus_detail)):
                                    if self.emailUser not in arr_email_document:
                                        if self.emailUser in tmpstatus_detail[x]['email']:
                                            if tmpstatus_detail[x]['step_status_code'] == 'W':
                                                arr_email_document.append(self.emailUser)
                                                tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                                                break
                                            else:
                                                tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                        
                if tmpdocument_status == 'W':
                    statusFile_count_wait_group = statusFile_count_wait_group + 1
                elif tmpdocument_status == 'Z':
                    statusFile_count_Z_group = statusFile_count_Z_group + 1
                else:
                    statusFile_count_pendding_group = statusFile_count_pendding_group + 1
            for u in range(len(tmp_query)):
                arr_email_document = []
                tmp_req_email = []
                for z in range(len(tmp_query[u])):
                    if z == 0:
                        tmp_dict_json = tmp_query[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state']) 
                        
                        tmpdocument_status = tmp_dict_json['document_status']
                        tmpstatus_detail = tmp_dict_json['status_details']
                        if tmpstatus_detail != None:
                            tmpstatus_detail = eval(tmpstatus_detail)
                            if tmpdocument_status == 'N':
                                for x in range(len(tmpstatus_detail)):
                                    if self.emailUser not in arr_email_document:
                                        if self.emailUser in tmpstatus_detail[x]['email']:
                                            if tmpstatus_detail[x]['step_status_code'] == 'W':
                                                arr_email_document.append(self.emailUser)
                                                tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                                                break
                                            else:
                                                tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                        
                if tmpdocument_status == 'W':
                    statusFile_count_wait = statusFile_count_wait + 1
                elif tmpdocument_status == 'Z':
                    statusFile_count_Z = statusFile_count_Z + 1
                else:
                    statusFile_count_pendding = statusFile_count_pendding + 1
            json_Data['Document_Status_Details']  = {
                'status_Z':statusFile_count_Z,
                'Incomplete_Pendding':statusFile_count_pendding,
                'Complete_Approve':statusFile_count_approve,
                'Reject':statusFile_count_reject,
                'Wait':statusFile_count_wait
            }            
            json_Data['document_group_details']  = {
                'status_Z':statusFile_count_Z_group,
                'Incomplete_Pendding':statusFile_count_pendding_group,
                'Complete_Approve':statusFile_count_approve_group,
                'Reject':statusFile_count_reject_group,
                'Wait':statusFile_count_wait_group
            }
            json_Data['sum_Document'] = query_temp
            json_Data['document_group_true'] = query_temp_statusgroup
            return {'result':'OK','messageText':json_Data}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

    def select_dashboard_recipient_v5_sum(self,emailUser,groupstatus):
        self.emailUser = emailUser
        self.groupstatus = groupstatus
        sid_list = []
        sid_list_email = []
        json_Data = {}
        list_arr = []
        list_json = []
        try:
            tmp_list = []             
            count_rowDocument = 0
            count_rowDocument_StatusActive = 0
            count_rowDocument_StatusReject = 0
            count_rowDocument_StatusCancel = 0
            statusFile_count_approve = 0
            statusFile_count_pendding = 0
            statusFile_count_reject = 0
            statusFile_count_wait = 0
            statusFile_count_Z = 0
            statusFile_count_wait_group = 0
            statusFile_count_Z_group = 0
            statusFile_count_pendding_group = 0
            list_temp_query = []
            tmp_sid_code_list = []
            arr_gruop = []
            arr_group_sid = []
            tmp_arr_sid = []
            tmp_group_id = None
            json_Data = {}
            str_time = (time.time())
            search = "%'{}'%".format(self.emailUser)
            if self.groupstatus == None:
                statusFile_count_reject = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                    .filter(paper_lesssender.document_status=='R')\
                    .order_by(desc(paper_lesssender.send_time))\
                    .count()
                statusFile_count_reject_group = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                    .filter(or_(paper_lesssender.group_id=='[]',paper_lesssender.group_id==None))\
                    .filter(paper_lesssender.document_status=='R')\
                    .order_by(desc(paper_lesssender.send_time))\
                    .count()
                statusFile_count_approve = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                    .filter(paper_lesssender.document_status=='Y')\
                    .order_by(desc(paper_lesssender.send_time))\
                    .count()
                statusFile_count_approve_group = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                    .filter(or_(paper_lesssender.group_id=='[]',paper_lesssender.group_id==None))\
                    .filter(paper_lesssender.document_status=='Y')\
                    .order_by(desc(paper_lesssender.send_time))\
                    .count()
                tmp_query = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                    .filter(paper_lesssender.document_status=='N')\
                    .order_by(desc(paper_lesssender.send_time))\
                    .all()
                tmp_query_group = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                    .filter(or_(paper_lesssender.group_id=='[]',paper_lesssender.group_id==None))\
                    .filter(paper_lesssender.document_status=='N')\
                    .order_by(desc(paper_lesssender.send_time))\
                    .all()
                query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                    .order_by(desc(paper_lesssender.send_time))\
                    .count()
                query_temp_statusgroup = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                    .filter(or_(paper_lesssender.group_id=='[]',paper_lesssender.group_id==None))\
                    .order_by(desc(paper_lesssender.send_time))\
                    .count()
                # .count()
            elif self.groupstatus == False:
                statusFile_count_reject = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                    .filter(paper_lesssender.document_status=='R')\
                    .order_by(desc(paper_lesssender.send_time))\
                    .count()
                statusFile_count_approve = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                    .filter(paper_lesssender.document_status=='Y')\
                    .order_by(desc(paper_lesssender.send_time))\
                    .count()
                tmp_query = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                    .filter(paper_lesssender.document_status=='N')\
                    .order_by(desc(paper_lesssender.send_time))\
                    .all()
                query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                    .order_by(desc(paper_lesssender.send_time))\
                    .count()
            elif self.groupstatus == True:                
                statusFile_count_reject_group = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                    .filter(or_(paper_lesssender.group_id=='[]',paper_lesssender.group_id==None))\
                    .filter(paper_lesssender.document_status=='R')\
                    .order_by(desc(paper_lesssender.send_time))\
                    .count()
                statusFile_count_approve_group = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                    .filter(or_(paper_lesssender.group_id=='[]',paper_lesssender.group_id==None))\
                    .filter(paper_lesssender.document_status=='Y')\
                    .order_by(desc(paper_lesssender.send_time))\
                    .count()
                tmp_query_group = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                    .filter(or_(paper_lesssender.group_id=='[]',paper_lesssender.group_id==None))\
                    .filter(paper_lesssender.document_status=='N')\
                    .order_by(desc(paper_lesssender.send_time))\
                    .all()
                query_temp_statusgroup = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                    .filter(or_(paper_lesssender.group_id=='[]',paper_lesssender.group_id==None))\
                    .order_by(desc(paper_lesssender.send_time))\
                    .count()
                
            # print(statusFile_count_approve)
            # print(statusFile_count_reject)
            # print(query_temp_status)
            # return ''
            end_time = (time.time())
            print(end_time -str_time)
            
            arr = []
            if self.groupstatus == None:
                for u in range(len(tmp_query_group)):
                    arr_email_document = []
                    tmp_req_email = []
                    for z in range(len(tmp_query_group[u])):
                        if z == 0:
                            tmp_dict_json = tmp_query_group[u][z].__dict__
                            if '_sa_instance_state' in tmp_dict_json:
                                tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state']) 
                            
                            tmpdocument_status = tmp_dict_json['document_status']
                            tmpstatus_detail = tmp_dict_json['status_details']
                            if tmpstatus_detail != None:
                                tmpstatus_detail = eval(tmpstatus_detail)
                                if tmpdocument_status == 'N':
                                    for x in range(len(tmpstatus_detail)):
                                        if self.emailUser not in arr_email_document:
                                            if self.emailUser in tmpstatus_detail[x]['email']:
                                                if tmpstatus_detail[x]['step_status_code'] == 'W':
                                                    arr_email_document.append(self.emailUser)
                                                    tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                                                    break
                                                else:
                                                    tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                            
                    if tmpdocument_status == 'W':
                        statusFile_count_wait_group = statusFile_count_wait_group + 1
                    elif tmpdocument_status == 'Z':
                        statusFile_count_Z_group = statusFile_count_Z_group + 1
                    else:
                        statusFile_count_pendding_group = statusFile_count_pendding_group + 1
                for u in range(len(tmp_query)):
                    arr_email_document = []
                    tmp_req_email = []
                    for z in range(len(tmp_query[u])):
                        if z == 0:
                            tmp_dict_json = tmp_query[u][z].__dict__
                            if '_sa_instance_state' in tmp_dict_json:
                                tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state']) 
                            
                            tmpdocument_status = tmp_dict_json['document_status']
                            tmpstatus_detail = tmp_dict_json['status_details']
                            if tmpstatus_detail != None:
                                tmpstatus_detail = eval(tmpstatus_detail)
                                if tmpdocument_status == 'N':
                                    for x in range(len(tmpstatus_detail)):
                                        if self.emailUser not in arr_email_document:
                                            if self.emailUser in tmpstatus_detail[x]['email']:
                                                if tmpstatus_detail[x]['step_status_code'] == 'W':
                                                    arr_email_document.append(self.emailUser)
                                                    tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                                                    break
                                                else:
                                                    tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                            
                    if tmpdocument_status == 'W':
                        statusFile_count_wait = statusFile_count_wait + 1
                    elif tmpdocument_status == 'Z':
                        statusFile_count_Z = statusFile_count_Z + 1
                    else:
                        statusFile_count_pendding = statusFile_count_pendding + 1
                json_Data['Document_Status_Details']  = {
                    'status_Z':statusFile_count_Z,
                    'Incomplete_Pendding':statusFile_count_pendding,
                    'Complete_Approve':statusFile_count_approve,
                    'Reject':statusFile_count_reject,
                    'Wait':statusFile_count_wait
                }
                json_Data['document_group_details']  = {
                    'status_Z':statusFile_count_Z_group,
                    'Incomplete_Pendding':statusFile_count_pendding_group,
                    'Complete_Approve':statusFile_count_approve_group,
                    'Reject':statusFile_count_reject_group,
                    'Wait':statusFile_count_wait_group
                }
                json_Data['sum_Document'] = query_temp
                json_Data['document_group_true'] = query_temp_statusgroup
                return {'result':'OK','messageText':json_Data}
            elif self.groupstatus == False:
                for u in range(len(tmp_query)):
                    arr_email_document = []
                    tmp_req_email = []
                    for z in range(len(tmp_query[u])):
                        if z == 0:
                            tmp_dict_json = tmp_query[u][z].__dict__
                            if '_sa_instance_state' in tmp_dict_json:
                                tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state']) 
                            tmpsid = tmp_dict_json['step_data_sid']
                            
                            tmpdocument_status = tmp_dict_json['document_status']
                            tmpstatus_detail = tmp_dict_json['status_details']
                            if tmpstatus_detail != None:
                                tmpstatus_detail = eval(tmpstatus_detail)
                                if tmpdocument_status == 'N':
                                    for x in range(len(tmpstatus_detail)):
                                        if self.emailUser not in arr_email_document:
                                            if self.emailUser in tmpstatus_detail[x]['email']:
                                                if tmpstatus_detail[x]['step_status_code'] == 'W':
                                                    arr_email_document.append(self.emailUser)
                                                    tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                                                    break
                                                else:
                                                    tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                    if tmpdocument_status == 'W':
                        print(tmpdocument_status,tmpsid)
                        statusFile_count_wait = statusFile_count_wait + 1
                    elif tmpdocument_status == 'Z':
                        statusFile_count_Z = statusFile_count_Z + 1
                    else:
                        statusFile_count_pendding = statusFile_count_pendding + 1
                print(statusFile_count_wait)
                json_Data['Document_Status_Details']  = {
                    'status_Z':statusFile_count_Z,
                    'Incomplete_Pendding':statusFile_count_pendding,
                    'Complete_Approve':statusFile_count_approve,
                    'Reject':statusFile_count_reject,
                    'Wait':statusFile_count_wait
                }
                json_Data['sum_Document'] = query_temp
                return {'result':'OK','messageText':json_Data}
            elif self.groupstatus == True:
                for u in range(len(tmp_query_group)):
                    arr_email_document = []
                    tmp_req_email = []
                    for z in range(len(tmp_query_group[u])):
                        if z == 0:
                            tmp_dict_json = tmp_query_group[u][z].__dict__
                            if '_sa_instance_state' in tmp_dict_json:
                                tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state']) 
                            
                            tmpdocument_status = tmp_dict_json['document_status']
                            tmpstatus_detail = tmp_dict_json['status_details']
                            if tmpstatus_detail != None:
                                tmpstatus_detail = eval(tmpstatus_detail)
                                if tmpdocument_status == 'N':
                                    for x in range(len(tmpstatus_detail)):
                                        if self.emailUser not in arr_email_document:
                                            if self.emailUser in tmpstatus_detail[x]['email']:
                                                if tmpstatus_detail[x]['step_status_code'] == 'W':
                                                    arr_email_document.append(self.emailUser)
                                                    tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                                                    break
                                                else:
                                                    tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                            
                    if tmpdocument_status == 'W':
                        statusFile_count_wait_group = statusFile_count_wait_group + 1
                    elif tmpdocument_status == 'Z':
                        statusFile_count_Z_group = statusFile_count_Z_group + 1
                    else:
                        statusFile_count_pendding_group = statusFile_count_pendding_group + 1
                json_Data['document_group_details']  = {
                    'status_Z':statusFile_count_Z_group,
                    'Incomplete_Pendding':statusFile_count_pendding_group,
                    'Complete_Approve':statusFile_count_approve_group,
                    'Reject':statusFile_count_reject_group,
                    'Wait':statusFile_count_wait_group
                }
                json_Data['document_group_true'] = query_temp_statusgroup
                return {'result':'OK','messageText':json_Data}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}
        finally:
            db.session.close()
    
    def sleect_sid_datetimeupdate(self):
        try:
            arr_temp = []
            temp_query = paper_lesssender.query.join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid).filter(paper_lesssender.status=='ACTIVE').filter(paper_lessdatastep.update_time>='2020-03-25 08:30:00').filter(paper_lesssender.doc_id.contains('CS')).all()
            for z in range(len(temp_query)):
                arr_temp.append(temp_query[z].step_data_sid)
                # print(temp_query[z].step_data_sid)
            return arr_temp
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(e)}

    def select_all_sid_v1(self):
        try:
            arr_sid = []
            temp_query = paper_lesssender.query.filter(paper_lesssender.step_data_sid=='e2360cef-48f5-47cf-8a4b-ffb375bd8a29').all()
            db.session.close()
            for z in range(len(temp_query)):
                tmpsid = temp_query[z].step_data_sid
                # print(temp_query[z].step_data_sid)
                if tmpsid == 'e2360cef-48f5-47cf-8a4b-ffb375bd8a29':
                    result = select().select_datajson_form_step_data_update_sender_v1(tmpsid)
                    tmp_datadocument = str(result['messageText']['data_document'])
                    tmp_status_document = str(result['messageText']['status_document'])
                    tmp_max_step =  str(result['messageText']['max_step'])
                    tmp_step_now =  str(result['messageText']['step_now'])
                    tmp_update = paper_lesssender.query.filter(paper_lesssender.step_data_sid==tmpsid).first()
                    tmp_update.status_details = tmp_datadocument
                    tmp_update.document_status = tmp_status_document
                    tmp_update.stepnow = tmp_step_now
                    tmp_update.stepmax = tmp_max_step
                    # print(tmp_update)
                    db.session.commit()
                    db.session.close()
                    # arr_sid.append(temp_query[z].step_data_sid)
                
            # tmp_query_step = paper_lessdatastep.query.filter(paper_lessdatastep.sid.in_(arr_sid)).all()
            # for x in range(len(tmp_query_step)):
            #     result = select().select_datajson_form_step_data_update_sender_v1(tmp_query_step[x].sid)
            #     print(result)
            # for i in range(len(arr_sid)):
            #     tmp_query_step = paper_lessdatastep.query.filter(paper_lessdatastep.sid==arr_sid[i]).first()
            #     print(tmp_query_step)
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(e)}
    
    def recursive_status_file_v1(self,emailUser,limit,offset,status,list_sum,sum_row_tooffset,document_type,group_status):
        self.emailUser = emailUser
        self.status = status
        self.document_type = document_type
        if limit != '':
            self.limit = int(limit)
        else:
            self.limit = ''
        if offset != '':
            self.offset = int(offset)
        else:
            self.offset = ''
        self.group_status = group_status
        self.status = status
        self.list_sum = list_sum
        search = "%'{}'%".format(self.emailUser)
        tmp_status_group = False
        if self.document_type != '':
            if self.group_status == None:
                query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                    .filter(paper_lesssender.document_status=='N')\
                    .filter(paper_lessdocument.documentType==self.document_type)\
                    .order_by(desc(paper_lesssender.send_time))\
                    .limit(self.limit)\
                    .offset(self.offset)\
                    .all()
            elif self.group_status == False:
                query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                    .filter(paper_lesssender.document_status=='N')\
                    .filter(paper_lessdocument.documentType==self.document_type)\
                    .order_by(desc(paper_lesssender.send_time))\
                    .limit(self.limit)\
                    .offset(self.offset)\
                    .all()  
            elif self.group_status == True:
                query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                    .filter(paper_lesssender.document_status=='N')\
                    .filter(paper_lessdocument.documentType==self.document_type)\
                    .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                    .order_by(desc(paper_lesssender.send_time))\
                    .limit(self.limit)\
                    .offset(self.offset)\
                    .all()                   
        else:
            if self.group_status == None:
                query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                    .filter(paper_lesssender.document_status=='N')\
                    .order_by(desc(paper_lesssender.send_time))\
                    .limit(self.limit)\
                    .offset(self.offset)\
                    .all()
            elif self.group_status == False:
                query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                    .filter(paper_lesssender.document_status=='N')\
                    .order_by(desc(paper_lesssender.send_time))\
                    .limit(self.limit)\
                    .offset(self.offset)\
                    .all()
            elif self.group_status == True:
                query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                    .filter(paper_lesssender.document_status=='N')\
                    .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                    .order_by(desc(paper_lesssender.send_time))\
                    .limit(self.limit)\
                    .offset(self.offset)\
                    .all()
        for u in range(len(query_temp)):
            arr_email_document = []
            tmp_req_email = []
            email_step_sum_w = []
            for z in range(len(query_temp[u])):
                if z == 0:
                    tmp_dict_json = query_temp[u][z].__dict__
                    if '_sa_instance_state' in tmp_dict_json:
                        tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state']) 
                    tmp_sicode = tmp_dict_json['step_data_sid']
                    # tmp_sid_code_list.append(tmp_sicode)
                    tmp_send_time = tmp_dict_json['send_time']
                    tmp_document_id = tmp_dict_json['doc_id']
                    tmp_tracking_id = tmp_dict_json['tracking_id']
                    try:
                        tmp_sender_name = eval(tmp_dict_json['sender_name'])
                    except Exception as e:
                        tmp_sender_name = (tmp_dict_json['sender_name'])
                    tmp_sender_email = tmp_dict_json['sender_email']
                    tmp_file_name = tmp_dict_json['file_name']
                    tmp_groupid = tmp_dict_json['group_id']
                    email_step_sum = tmp_dict_json['recipient_email']
                    if email_step_sum != None:
                        email_step_sum = eval(email_step_sum)
                    # print(email_step_sum)
                    tmpstatus_detail = tmp_dict_json['status_details']
                    tmpdocument_status = tmp_dict_json['document_status']
                    tmpstepnow = tmp_dict_json['stepnow']
                    status_groupid = False
                    if tmp_groupid != None:
                        if tmp_groupid != "":
                            tmp_groupid = eval(tmp_groupid)
                            if len(tmp_groupid) != 0:
                                status_groupid = True
                    if tmpstepnow != None:
                        tmpstepnow = int(tmpstepnow)
                    tmpstepmax = tmp_dict_json['stepmax']
                    if tmpstepmax != None:
                        tmpstepmax = int(tmpstepmax)
                    if tmpstatus_detail != None:
                        tmpstatus_detail = eval(tmpstatus_detail)                            
                        for z in range(len(tmpstatus_detail)):
                            email_step_sum_w.append(tmpstatus_detail[z]['email'])

                        if tmpdocument_status == 'N':
                            for x in range(len(tmpstatus_detail)):
                                # print(tmp_sicode)
                                # print(tmpstatus_detail[x])
                                # email_step_sum_w.append(tmpstatus_detail[x]['email'])
                                if self.emailUser not in arr_email_document:
                                    if self.emailUser in tmpstatus_detail[x]['email']:
                                        if tmpstatus_detail[x]['step_status_code'] == 'W':
                                            arr_email_document.append(self.emailUser)
                                            tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                                            break
                                        else:
                                            tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                    print(tmp_sicode,tmpdocument_status)
                    if tmpdocument_status == 'Z':
                        res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                    elif tmpdocument_status == 'W':
                        res_status_file_string = 'รอคุณอนุมัติ'
                    elif tmpdocument_status == 'N':
                        res_status_file_string = 'กำลังดำเนินการ'
                    elif tmpdocument_status == 'R':
                        res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                    else:
                        res_status_file_string = ''
                                        # else:

                    # print(tmpstatus_detail)
                if z == 1:
                    tmp_document_type = None
                    tmp_dict_json = query_temp[u][z].__dict__
                    if '_sa_instance_state' in tmp_dict_json:
                        tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state'])
                    tmp_sign_page_options = tmp_dict_json['sign_page_options']
                    tmp_document_type = tmp_dict_json['documentType']
                    tmp_options_page = []
                    if tmp_dict_json['options_page'] != None:
                        if tmp_dict_json['options_page'] != '':
                        # print(tmp_dict_json['options_page'],tmp_document_id)
                            tmp_options_page = [eval(tmp_dict_json['options_page'])]
                    else:
                        tmp_options_page = []
                    if len(tmp_options_page) != 0:
                        # print(tmp_options_page[0]['group_detail'])
                        tmp_status_group = False
                        if status_groupid == True:
                            if len(tmp_options_page) != 0:
                                if 'group_detail' in tmp_options_page[0]:
                                    tmp_group_detail = tmp_options_page[0]['group_detail']
                                    if 'group_status' in tmp_group_detail:
                                        if tmp_group_detail['group_status'] == True:
                                            tmp_status_group = True
                                            tmpstepnum = tmp_group_detail['step_num']
                                    # if 'step_num' in tmp_group_detail:
                                    #     tmp_status_group = True
                                    #     tmp_group_stepnum = tmp_group_detail['step_num']
                        # if 'group_detail' in tmp_options_page[0]:
                        #     if 'group_status' in tmp_options_page[0]['group_detail']:
                        #         tmpgroupdetails = tmp_options_page[0]['group_detail']
                        #         if tmpgroupdetails['group_status'] == True:
                        #             tmpstepnum = tmpgroupdetails['step_num']
                                    # print(tmpstepnum)
                    if tmp_dict_json['documentJson'] != None:
                        documentJson_result = eval(tmp_dict_json['documentJson'])
                        documentName = documentJson_result['document_name']
                        documentType = documentJson_result['document_type']
                    else:
                        documentName = None
                        documentType = None
                    if tmp_dict_json['urgent_type'] != None:
                        documentUrgentType = tmp_dict_json['urgent_type']
                        if documentUrgentType == 'I':
                            documentUrgentString = 'ด่วนมาก'
                        elif documentUrgentType == 'U':
                            documentUrgentString = 'ด่วน'
                        elif documentUrgentType == 'M':
                            documentUrgentString = 'ปกติ'
                tmp_biz_info = None
                tmprole_name = None
                tmpdept_name = None
                tmprole_level = None
                tmpidcardnum = None
                if z == 2:
                    if query_temp[u][z] != None:
                        if query_temp[u][z] != 'None':
                            
                            eval_biz_info = json.dumps(query_temp[u][z])
                            eval_biz_info = json.loads(eval_biz_info)
                            # print(eval_biz_info, ' eval_biz_info')
                            try:
                                eval_biz_info = eval(eval_biz_info)
                            except Exception as e:
                                eval_biz_info = eval_biz_info
                            # eval_biz_info
                            # print(eval_biz_info)
                            if 'id_card_num' in eval_biz_info:
                                tmpidcardnum = eval_biz_info['id_card_num']
                            if 'role_name' in eval_biz_info:
                                tmprole_name = eval_biz_info['role_name']
                            if 'dept_name' in eval_biz_info:
                                tmpdept_name = eval_biz_info['dept_name']
                            if 'role_level' in eval_biz_info:
                                tmprole_level = eval_biz_info['role_level']
                            if 'dept_name' in eval_biz_info:            
                                tmp_biz_info = {
                                    'tax_id':eval_biz_info['id_card_num'],
                                    'role_name' : tmprole_name,
                                    'dept_name' : tmpdept_name,
                                    'role_level' :tmprole_level              
                                }                                
                            elif 'dept_name' not in eval_biz_info:
                                tmp_biz_info = {
                                    'tax_id':tmpidcardnum,
                                    'role_name' : tmprole_name,
                                    'dept_name' : [],
                                    'role_level' : tmprole_level             
                                }
                    
                dateTime_String = tmp_send_time
                th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                ts = int(time.time())
                date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                datetime_display = int(dateTime_String.timestamp())
                date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                if date_time_today == date_time_db:
                    date_display_show = time_show_db
                else:
                    if year_today == yar_db:
                        date_display_show = convert_datetime_TH_2_display(datetime_display)
                    else:
                        date_display_show = old_year
                # print(email_step_sum_w)
            if tmp_status_group == True:
                for ui in range(len(tmpstepnum)):
                    intstepnum = tmpstepnum[ui] - 1
                    try:
                        for w in range(len(email_step_sum_w[intstepnum])):
                            tmp_req_email.append(email_step_sum_w[intstepnum][w])
                    except Exception as e:
                        tmp_req_email = []    
                
            sender_name_eng = find_name_surename_by_username(tmp_sender_email)
            if tmpdocument_status == self.status:       
                if len(list_sum) < self.limit:
                    # sum_row_tooffset = sum_row_tooffset + 1 
                    # 100
                    sum_row_tooffset = u+1
                    list_sum.append({
                        'group_email':tmp_req_email,
                        'group_id':None,
                        'group_status':tmp_status_group,
                        'sidCode':tmp_sicode,
                        'document_name':documentName,
                        'document_type':tmp_document_type,
                        'document_urgent':documentUrgentType,
                        'document_urgent_string':documentUrgentString,
                        'dateTime_String':str(dateTime_String).split('+')[0],
                        'dateTime_String_TH_1':th_dateTime_2,
                        'dateTime_display':date_display_show,
                        'document_id':tmp_document_id,
                        'stamp_all':tmp_sign_page_options,
                        'options_page_document':tmp_options_page,
                        'max_step':tmpstepmax,
                        'step_now':tmpstepnow,
                        # 'dateTime_String_TH_2':th_dateTime_2,
                        'date_String':str(dateTime_String).split(' ')[0],
                        'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                        'status_file_code':tmpdocument_status,
                        'status_file_string':res_status_file_string,
                        'dateTime':int(dateTime_String.timestamp()),
                        'tracking_id':tmp_tracking_id,
                        'sender_name':tmp_sender_name,
                        'sender_email':tmp_sender_email,
                        'file_name':tmp_file_name,
                        'document_business':tmp_biz_info,
                        'sender_name_eng':sender_name_eng
                    })
                else:
                    # sum_row_tooffset = sum_row_tooffset + 1
                    # 13
                    pass
            else:
                # sum_row_tooffset = sum_row_tooffset + 1 
                # 32
                pass 
            # sum_row_tooffset = sum_row_tooffset + 1 
        return list_sum,sum_row_tooffset

    def sender_recursive_status_file_v1(self,username,emailUser,limit,offset,status,list_sum,sum_row_tooffset,document_type,group_id):
        self.username = username
        self.emailUser = emailUser
        self.status = status
        self.document_type = document_type
        if limit != '':
            self.limit = int(limit)
        else:
            self.limit = ''
        if offset != '':
            self.offset = int(offset)
        else:
            self.offset = ''
        self.status = status
        self.group_id = group_id
        self.list_sum = list_sum
        print(self.group_id)
        if self.document_type != '':
            if self.group_id == None:
                query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                    .filter(paper_lesssender.document_status=='N')\
                    .filter(paper_lessdocument.documentType==self.document_type)\
                    .order_by(desc(paper_lesssender.send_time))\
                    .limit(self.limit)\
                    .offset(self.offset)\
                    .all()
            elif self.group_id == True:
                query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                    .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                    .filter(paper_lesssender.document_status=='N')\
                    .filter(paper_lessdocument.documentType==self.document_type)\
                    .order_by(desc(paper_lesssender.send_time))\
                    .limit(self.limit)\
                    .offset(self.offset)\
                    .all()
            elif self.group_id == False:
                query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                    .filter(paper_lesssender.document_status=='N')\
                    .filter(paper_lessdocument.documentType==self.document_type)\
                    .order_by(desc(paper_lesssender.send_time))\
                    .limit(self.limit)\
                    .offset(self.offset)\
                    .all()
        else:
            if self.group_id == None:
                query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                    .filter(paper_lesssender.document_status=='N')\
                    .order_by(desc(paper_lesssender.send_time))\
                    .limit(self.limit)\
                    .offset(self.offset)\
                    .all()
            elif self.group_id == True:
                query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                    .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                    .filter(paper_lesssender.document_status=='N')\
                    .order_by(desc(paper_lesssender.send_time))\
                    .limit(self.limit)\
                    .offset(self.offset)\
                    .all()
            elif self.group_id == False:
                query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                    .filter(paper_lesssender.document_status=='N')\
                    .order_by(desc(paper_lesssender.send_time))\
                    .limit(self.limit)\
                    .offset(self.offset)\
                    .all()
                
        for u in range(len(query_temp)):
            arr_email_document = []
            tmp_req_email = []
            email_step_sum_w = []
            for z in range(len(query_temp[u])):
                if z == 0:
                    tmp_dict_json = query_temp[u][z].__dict__
                    if '_sa_instance_state' in tmp_dict_json:
                        tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state']) 
                    tmp_sicode = tmp_dict_json['step_data_sid']
                    # tmp_sid_code_list.append(tmp_sicode)
                    tmp_send_time = tmp_dict_json['send_time']
                    tmp_document_id = tmp_dict_json['doc_id']
                    tmp_tracking_id = tmp_dict_json['tracking_id']
                    tmp_sender_name = tmp_dict_json['sender_name']
                    tmp_sender_email = tmp_dict_json['sender_email']
                    tmp_file_name = tmp_dict_json['file_name']
                    tmp_groupid = tmp_dict_json['group_id']
                    email_step_sum = tmp_dict_json['recipient_email']
                    if email_step_sum != None:
                        email_step_sum = eval(email_step_sum)
                    # print(email_step_sum)
                    tmpstatus_detail = tmp_dict_json['status_details']
                    tmpdocument_status = tmp_dict_json['document_status']
                    tmpstepnow = tmp_dict_json['stepnow']
                    status_groupid = False
                    if tmp_groupid != None:
                        if tmp_groupid != "":
                            tmp_groupid = eval(tmp_groupid)
                            if len(tmp_groupid) != 0:
                                status_groupid = True
                    if tmpstepnow != None:
                        tmpstepnow = int(tmpstepnow)
                    tmpstepmax = tmp_dict_json['stepmax']
                    if tmpstepmax != None:
                        tmpstepmax = int(tmpstepmax)
                    if tmpstatus_detail != None:
                        tmpstatus_detail = eval(tmpstatus_detail)                            
                        for z in range(len(tmpstatus_detail)):
                            email_step_sum_w.append(tmpstatus_detail[z]['email'])

                        if tmpdocument_status == 'N':
                            for x in range(len(tmpstatus_detail)):
                                # print(tmp_sicode)
                                # print(tmpstatus_detail[x])
                                # email_step_sum_w.append(tmpstatus_detail[x]['email'])
                                if self.emailUser not in arr_email_document:
                                    if self.emailUser in tmpstatus_detail[x]['email']:
                                        if tmpstatus_detail[x]['step_status_code'] == 'W':
                                            arr_email_document.append(self.emailUser)
                                            tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                                            break
                                        else:
                                            tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                    # print(email_step_sum_w)
                    if tmpdocument_status == 'Z':
                        res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                    elif tmpdocument_status == 'W':
                        res_status_file_string = 'รอคุณอนุมัติ'
                    elif tmpdocument_status == 'N':
                        res_status_file_string = 'กำลังดำเนินการ'
                    elif tmpdocument_status == 'R':
                        res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                    else:
                        res_status_file_string = ''
                                        # else:

                    # print(tmpstatus_detail)
                if z == 1:
                    tmp_document_type = None
                    tmp_dict_json = query_temp[u][z].__dict__
                    if '_sa_instance_state' in tmp_dict_json:
                        tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state'])
                    tmp_sign_page_options = tmp_dict_json['sign_page_options']
                    tmp_document_type = tmp_dict_json['documentType']
                    tmp_options_page = []
                    if tmp_dict_json['options_page'] != None:
                        if tmp_dict_json['options_page'] != '':
                        # print(tmp_dict_json['options_page'],tmp_document_id)
                            tmp_options_page = [eval(tmp_dict_json['options_page'])]
                    else:
                        tmp_options_page = []
                    tmp_status_group = False
                    if len(tmp_options_page) != 0:
                        # print(tmp_options_page[0]['group_detail'])
                        tmp_status_group = False
                        if status_groupid == True:
                            if len(tmp_options_page) != 0:
                                if 'group_detail' in tmp_options_page[0]:
                                    tmp_group_detail = tmp_options_page[0]['group_detail']
                                    if 'group_status' in tmp_group_detail:
                                        if tmp_group_detail['group_status'] == True:
                                            tmp_status_group = True
                                            tmpstepnum = tmp_group_detail['step_num']
                                    # if 'step_num' in tmp_group_detail:
                                    #     tmp_status_group = True
                                    #     tmp_group_stepnum = tmp_group_detail['step_num']
                        # if 'group_detail' in tmp_options_page[0]:
                        #     if 'group_status' in tmp_options_page[0]['group_detail']:
                        #         tmpgroupdetails = tmp_options_page[0]['group_detail']
                        #         if tmpgroupdetails['group_status'] == True:
                        #             tmpstepnum = tmpgroupdetails['step_num']
                                    # print(tmpstepnum)
                    if tmp_dict_json['documentJson'] != None:
                        documentJson_result = eval(tmp_dict_json['documentJson'])
                        documentName = documentJson_result['document_name']
                        documentType = documentJson_result['document_type']
                    else:
                        documentName = None
                        documentType = None
                    if tmp_dict_json['urgent_type'] != None:
                        documentUrgentType = tmp_dict_json['urgent_type']
                        if documentUrgentType == 'I':
                            documentUrgentString = 'ด่วนมาก'
                        elif documentUrgentType == 'U':
                            documentUrgentString = 'ด่วน'
                        elif documentUrgentType == 'M':
                            documentUrgentString = 'ปกติ'
                tmp_biz_info = None
                tmprole_name = None
                tmpdept_name = None
                tmprole_level = None
                if z == 2:
                    if query_temp[u][z] != None:
                        if query_temp[u][z] != 'None':
                            
                            eval_biz_info = json.dumps(query_temp[u][z])
                            eval_biz_info = json.loads(eval_biz_info)
                            eval_biz_info = eval(eval_biz_info)
                            # eval_biz_info
                            # print(eval_biz_info)
                            if 'role_name' in eval_biz_info:
                                tmprole_name = eval_biz_info['role_name']
                            if 'dept_name' in eval_biz_info:
                                tmpdept_name = eval_biz_info['dept_name']
                            if 'role_level' in eval_biz_info:
                                tmprole_level = eval_biz_info['role_level']
                            if 'dept_name' in eval_biz_info:            
                                tmp_biz_info = {
                                    'tax_id':eval_biz_info['id_card_num'],
                                    'role_name' : tmprole_name,
                                    'dept_name' : tmpdept_name,
                                    'role_level' :tmprole_level              
                                }                                
                            elif 'dept_name' not in eval_biz_info:
                                tmp_biz_info = {
                                    'tax_id':eval_biz_info['id_card_num'],
                                    'role_name' : tmprole_name,
                                    'dept_name' : [],
                                    'role_level' : tmprole_level             
                                }
                    
                dateTime_String = tmp_send_time
                th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                ts = int(time.time())
                date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                datetime_display = int(dateTime_String.timestamp())
                date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                if date_time_today == date_time_db:
                    date_display_show = time_show_db
                else:
                    if year_today == yar_db:
                        date_display_show = convert_datetime_TH_2_display(datetime_display)
                    else:
                        date_display_show = old_year
                # print(email_step_sum_w)
            if tmp_status_group == True:
                for ui in range(len(tmpstepnum)):
                    intstepnum = tmpstepnum[ui] - 1
                    # print(intstepnum)
                    try:
                        for w in range(len(email_step_sum_w[intstepnum])):
                            tmp_req_email.append(email_step_sum_w[intstepnum][w])    
                            
                    except Exception as e:
                        pass
              
            if tmpdocument_status == self.status:       
                if len(list_sum) < self.limit:
                    # sum_row_tooffset = sum_row_tooffset + 1 
                    # 100
                    sum_row_tooffset = u+1
                    list_sum.append({
                        'group_email':tmp_req_email,
                        'group_id':None,
                        'group_status':tmp_status_group,
                        'sidCode':tmp_sicode,
                        'document_name':documentName,
                        'document_type':tmp_document_type,
                        'document_urgent':documentUrgentType,
                        'document_urgent_string':documentUrgentString,
                        'dateTime_String':str(dateTime_String).split('+')[0],
                        'dateTime_String_TH_1':th_dateTime_2,
                        'dateTime_display':date_display_show,
                        'document_id':tmp_document_id,
                        'stamp_all':tmp_sign_page_options,
                        'options_page_document':tmp_options_page,
                        'max_step':tmpstepmax,
                        'step_now':tmpstepnow,
                        # 'dateTime_String_TH_2':th_dateTime_2,
                        'date_String':str(dateTime_String).split(' ')[0],
                        'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                        'status_file_code':tmpdocument_status,
                        'status_file_string':res_status_file_string,
                        'dateTime':int(dateTime_String.timestamp()),
                        'tracking_id':tmp_tracking_id,
                        'sender_name':tmp_sender_name,
                        'sender_email':tmp_sender_email,
                        'file_name':tmp_file_name,
                        'document_business':tmp_biz_info
                    })
                else:
                    # sum_row_tooffset = sum_row_tooffset + 1
                    # 13
                    pass
            else:
                # sum_row_tooffset = sum_row_tooffset + 1 
                # 32
                pass 
            # sum_row_tooffset = sum_row_tooffset + 1 
        return list_sum,sum_row_tooffset

    def select_dashboard_recipient_v5_new_limitoffset_filter(self,emailUser,limit,offset,status,document_type,group_status=None,tmptimeapprove=None):
        self.emailUser = emailUser
        if limit != '':
            self.limit = int(limit)
        else:
            self.limit = ''
        if offset != '':
            self.offset = int(offset)
        else:
            self.offset = ''
        self.group_status = group_status
        if self.group_status != None:
            self.group_status = group_status
        self.tmptimeapprove = tmptimeapprove
        if self.tmptimeapprove != None:
            self.tmptimeapprove = tmptimeapprove
        self.status = status
        self.document_type = document_type
        self.all_status = ['W','N','Z']
        arr_list_sum = []
        json_Data = {}
        sum_row_tooffset = 0
        keep_lenstatus = []
        a = 0
        if self.status in self.all_status:
            for i in range(self.limit):
                if i > 0:
                    self.offset = self.offset + self.limit
                if len(arr_list_sum) < self.limit:
                    arr_list_sum,sum_row_tooffset = select_1().recursive_status_file_v1(self.emailUser,self.limit,self.offset,self.status,arr_list_sum,sum_row_tooffset,self.document_type,self.group_status)
                    keep_lenstatus = arr_list_sum
                    sum_row_tooffset = self.offset + sum_row_tooffset
                    if len(keep_lenstatus) == len(arr_list_sum):
                        a = a + 1
                        if a == 5:
                            list_arr = sorted(arr_list_sum, key=lambda k: k['dateTime'], reverse=True)
                            json_Data['Document_Details'] = list_arr
                            json_Data['offset'] = sum_row_tooffset
                            return {'result':'OK','messageText':json_Data}                    
                else:
                    list_arr = sorted(arr_list_sum, key=lambda k: k['dateTime'], reverse=True)
                    json_Data['Document_Details'] = list_arr
                    json_Data['offset'] = sum_row_tooffset
                    return {'result':'OK','messageText':json_Data} 
            list_arr = sorted(arr_list_sum, key=lambda k: k['dateTime'], reverse=True)
            json_Data['Document_Details'] = list_arr
            json_Data['offset'] = sum_row_tooffset
            print(len(list_arr))
            return {'result':'OK','messageText':json_Data} 
        sid_list = []
        sid_list_email = []
        json_Data = {}
        list_arr = []
        list_json = []
        try:
            tmp_list = []             
            count_rowDocument = 0
            count_rowDocument_StatusActive = 0
            count_rowDocument_StatusReject = 0
            count_rowDocument_StatusCancel = 0
            statusFile_count_approve = 0
            statusFile_count_pendding = 0
            statusFile_count_reject = 0
            statusFile_count_wait = 0
            list_temp_query = []
            tmp_sid_code_list = []
            arr_gruop = []
            arr_group_sid = []
            tmp_arr_sid = []
            tmp_group_id = None
            json_Data = {}
            str_time = (time.time())
            search = "%'{}'%".format(self.emailUser)
            if self.limit != '' and self.offset != '':
                if self.status != '' and self.document_type != '':
                    if self.group_status == None:
                        if self.tmptimeapprove == True:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(paper_lesssender.document_status==self.status)\
                                .filter(paper_lessdocument.documentType==self.document_type)\
                                .order_by(desc(paper_lessdatastep.update_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                        else:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(paper_lesssender.document_status==self.status)\
                                .filter(paper_lessdocument.documentType==self.document_type)\
                                .order_by(desc(paper_lesssender.send_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                    elif self.group_status == True:
                        if self.tmptimeapprove == True:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                                .filter(paper_lesssender.document_status==self.status)\
                                .filter(paper_lessdocument.documentType==self.document_type)\
                                .order_by(desc(paper_lessdatastep.update_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                        else:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                                .filter(paper_lesssender.document_status==self.status)\
                                .filter(paper_lessdocument.documentType==self.document_type)\
                                .order_by(desc(paper_lesssender.send_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                    elif self.group_status == False:
                        if self.tmptimeapprove == True:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(paper_lesssender.document_status==self.status)\
                                .filter(paper_lessdocument.documentType==self.document_type)\
                                .order_by(desc(paper_lessdatastep.update_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                        else:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(paper_lesssender.document_status==self.status)\
                                .filter(paper_lessdocument.documentType==self.document_type)\
                                .order_by(desc(paper_lesssender.send_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()                            
                elif self.status != '' and self.document_type == '':
                    print(self.group_status)
                    if self.group_status == None:
                        if self.tmptimeapprove == True:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(paper_lesssender.document_status==self.status)\
                                .order_by(desc(paper_lessdatastep.update_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                        else:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(paper_lesssender.document_status==self.status)\
                                .order_by(desc(paper_lesssender.send_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                    elif self.group_status == True:
                        if self.tmptimeapprove == True:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                                .filter(paper_lesssender.document_status==self.status)\
                                .order_by(desc(paper_lessdatastep.update_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                        else:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                                .filter(paper_lesssender.document_status==self.status)\
                                .order_by(desc(paper_lesssender.send_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                    elif self.group_status == False:
                        if self.tmptimeapprove == True:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(paper_lesssender.document_status==self.status)\
                                .order_by(desc(paper_lessdatastep.update_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                        else:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(paper_lesssender.document_status==self.status)\
                                .order_by(desc(paper_lesssender.send_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                elif self.status == '' and self.document_type != '':
                    if self.group_status == None:
                        if self.tmptimeapprove == True:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(paper_lessdocument.documentType==self.document_type)\
                                .order_by(desc(paper_lessdatastep.update_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                        else:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(paper_lessdocument.documentType==self.document_type)\
                                .order_by(desc(paper_lesssender.send_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                    elif self.group_status == True:
                        if self.tmptimeapprove == True:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                                .filter(paper_lessdocument.documentType==self.document_type)\
                                .order_by(desc(paper_lessdatastep.update_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                        else:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                                .filter(paper_lessdocument.documentType==self.document_type)\
                                .order_by(desc(paper_lesssender.send_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                    elif self.group_status == False:
                        if self.tmptimeapprove == True:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(paper_lessdocument.documentType==self.document_type)\
                                .order_by(desc(paper_lessdatastep.update_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                        else:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(paper_lessdocument.documentType==self.document_type)\
                                .order_by(desc(paper_lesssender.send_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()

                else:
                    if self.group_status == None:
                        if self.tmptimeapprove == True:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .order_by(desc(paper_lessdatastep.update_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                        else:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .order_by(desc(paper_lesssender.send_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                    elif self.group_status == True:
                        if self.tmptimeapprove == True:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                                .order_by(desc(paper_lessdatastep.update_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                        else:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                                .order_by(desc(paper_lesssender.send_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                    elif self.group_status == False:
                        if self.tmptimeapprove == True:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(paper_lessdocument.documentType==self.document_type)\
                                .order_by(desc(paper_lessdatastep.update_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                        else:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(paper_lessdocument.documentType==self.document_type)\
                                .order_by(desc(paper_lesssender.send_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
            else:                
                if self.status != '' and self.document_type != '':
                    if self.group_status == None:
                        if self.tmptimeapprove == True:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(paper_lesssender.document_status==self.status)\
                                .filter(paper_lessdocument.documentType==self.document_type)\
                                .order_by(desc(paper_lessdatastep.update_time))\
                                .all()
                        else:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(paper_lesssender.document_status==self.status)\
                                .filter(paper_lessdocument.documentType==self.document_type)\
                                .order_by(desc(paper_lesssender.send_time))\
                                .all()
                    elif self.group_status == True:
                        if self.tmptimeapprove == True:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                                .filter(paper_lesssender.document_status==self.status)\
                                .filter(paper_lessdocument.documentType==self.document_type)\
                                .order_by(desc(paper_lessdatastep.update_time))\
                                .all()
                        else:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                                .filter(paper_lesssender.document_status==self.status)\
                                .filter(paper_lessdocument.documentType==self.document_type)\
                                .order_by(desc(paper_lesssender.send_time))\
                                .all()
                    elif self.group_status == False:
                        if self.tmptimeapprove == True:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(paper_lesssender.document_status==self.status)\
                                .filter(paper_lessdocument.documentType==self.document_type)\
                                .order_by(desc(paper_lessdatastep.update_time))\
                                .all()
                        else:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(paper_lesssender.document_status==self.status)\
                                .filter(paper_lessdocument.documentType==self.document_type)\
                                .order_by(desc(paper_lesssender.send_time))\
                                .all()
                elif self.status != '' and self.document_type == '':
                    if self.group_status == None:
                        if self.tmptimeapprove == True:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(paper_lesssender.document_status==self.status)\
                                .order_by(desc(paper_lessdatastep.update_time))\
                                .all()
                        else:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(paper_lesssender.document_status==self.status)\
                                .order_by(desc(paper_lesssender.send_time))\
                                .all()
                    elif self.group_status == True:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                            .filter(paper_lesssender.document_status==self.status)\
                            .order_by(desc(paper_lesssender.send_time))\
                            .all()
                    elif self.group_status == False:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .filter(paper_lesssender.document_status==self.status)\
                            .order_by(desc(paper_lesssender.send_time))\
                            .all()
                elif self.status == '' and self.document_type != '':
                    if self.group_status == None:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .filter(paper_lessdocument.documentType==self.document_type)\
                            .order_by(desc(paper_lesssender.send_time))\
                            .all()
                    elif self.group_status == True:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                            .filter(paper_lessdocument.documentType==self.document_type)\
                            .order_by(desc(paper_lesssender.send_time))\
                            .all()       
                    elif self.group_status == False: 
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .filter(paper_lessdocument.documentType==self.document_type)\
                            .order_by(desc(paper_lesssender.send_time))\
                            .all()              
                else:
                    if self.group_status == None:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .order_by(desc(paper_lesssender.send_time))\
                            .all()
                    elif self.group_status == True:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .order_by(desc(paper_lesssender.send_time))\
                            .all()
                    elif self.group_status == False: 
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .order_by(desc(paper_lesssender.send_time))\
                            .all()
            
            # print(query_temp)
            end_time = (time.time())
            print(end_time -str_time)
            
            
            
            arr = []
            for u in range(len(query_temp)):
                arr_email_document = []
                tmp_req_email = []
                email_step_sum_w = []
                for z in range(len(query_temp[u])):
                    if z == 0:
                        tmp_dict_json = query_temp[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state']) 
                        tmp_sicode = tmp_dict_json['step_data_sid']
                        tmp_sid_code_list.append(tmp_sicode)
                        tmp_send_time = tmp_dict_json['send_time']
                        tmp_document_id = tmp_dict_json['doc_id']
                        tmp_tracking_id = tmp_dict_json['tracking_id']
                        tmp_sender_name = tmp_dict_json['sender_name']
                        tmp_sender_email = tmp_dict_json['sender_email']
                        tmp_file_name = tmp_dict_json['file_name']
                        tmp_groupid = tmp_dict_json['group_id']
                        email_step_sum = tmp_dict_json['recipient_email']
                        if email_step_sum != None:
                            email_step_sum = eval(email_step_sum)
                        # print(email_step_sum)
                        tmpstatus_detail = tmp_dict_json['status_details']
                        tmpdocument_status = tmp_dict_json['document_status']
                        tmpstepnow = tmp_dict_json['stepnow']
                        status_groupid = False
                        if tmp_groupid != None:
                            if tmp_groupid != '':
                                tmp_groupid = eval(tmp_groupid)
                                if len(tmp_groupid) != 0:
                                    status_groupid = True
                        if tmpstepnow != None:
                            tmpstepnow = int(tmpstepnow)
                        tmpstepmax = tmp_dict_json['stepmax']
                        if tmpstepmax != None:
                            tmpstepmax = int(tmpstepmax)
                        if tmpstatus_detail != None:
                            tmpstatus_detail = eval(tmpstatus_detail)                            
                            for z in range(len(tmpstatus_detail)):
                                email_step_sum_w.append(tmpstatus_detail[z]['email'])

                            if tmpdocument_status == 'N':
                                for x in range(len(tmpstatus_detail)):
                                    # print(tmp_sicode)
                                    # print(tmpstatus_detail[x])
                                    # email_step_sum_w.append(tmpstatus_detail[x]['email'])
                                    if self.emailUser not in arr_email_document:
                                        if self.emailUser in tmpstatus_detail[x]['email']:
                                            if tmpstatus_detail[x]['step_status_code'] == 'W':
                                                arr_email_document.append(self.emailUser)
                                                tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                                                break
                                            else:
                                                tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                        # print(email_step_sum_w)
                        if tmpdocument_status == 'Z':
                            res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                        elif tmpdocument_status == 'W':
                            res_status_file_string = 'รอคุณอนุมัติ'
                        elif tmpdocument_status == 'N':
                            res_status_file_string = 'กำลังดำเนินการ'
                        elif tmpdocument_status == 'R':
                            res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                        else:
                            res_status_file_string = ''
                                            # else:

                        # print(tmpstatus_detail)
                    if z == 1:
                        tmp_document_type = None
                        tmp_dict_json = query_temp[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state'])
                        tmp_sign_page_options = tmp_dict_json['sign_page_options']
                        tmp_document_type = tmp_dict_json['documentType']
                        tmp_options_page = []
                        if tmp_dict_json['options_page'] != None:
                            if tmp_dict_json['options_page'] != '':
                            # print(tmp_dict_json['options_page'],tmp_document_id)
                                tmp_options_page = [eval(tmp_dict_json['options_page'])]
                        else:
                            tmp_options_page = []
                        if len(tmp_options_page) != 0:
                            # print(tmp_options_page[0]['group_detail'])
                            tmp_status_group = False
                            if status_groupid == True:
                                if len(tmp_options_page) != 0:
                                    if 'group_detail' in tmp_options_page[0]:
                                        tmp_group_detail = tmp_options_page[0]['group_detail']
                                        if 'group_status' in tmp_group_detail:
                                            if tmp_group_detail['group_status'] == True:
                                                tmp_status_group = True
                                                tmpstepnum = tmp_group_detail['step_num']
                                        # if 'step_num' in tmp_group_detail:
                                        #     tmp_status_group = True
                                        #     tmp_group_stepnum = tmp_group_detail['step_num']
                            # if 'group_detail' in tmp_options_page[0]:
                            #     if 'group_status' in tmp_options_page[0]['group_detail']:
                            #         tmpgroupdetails = tmp_options_page[0]['group_detail']
                            #         if tmpgroupdetails['group_status'] == True:
                            #             tmpstepnum = tmpgroupdetails['step_num']
                                        # print(tmpstepnum)
                        if tmp_dict_json['documentJson'] != None:
                            documentJson_result = eval(tmp_dict_json['documentJson'])
                            documentName = documentJson_result['document_name']
                            documentType = documentJson_result['document_type']
                        else:
                            documentName = None
                            documentType = None
                        if tmp_dict_json['urgent_type'] != None:
                            documentUrgentType = tmp_dict_json['urgent_type']
                            if documentUrgentType == 'I':
                                documentUrgentString = 'ด่วนมาก'
                            elif documentUrgentType == 'U':
                                documentUrgentString = 'ด่วน'
                            elif documentUrgentType == 'M':
                                documentUrgentString = 'ปกติ'
                    tmp_biz_info = None
                    tmprole_name = None
                    tmpdept_name = None
                    tmprole_level = None
                    if z == 2:
                        if query_temp[u][z] != None:
                            if query_temp[u][z] != 'None':
                                
                                eval_biz_info = json.dumps(query_temp[u][z])
                                eval_biz_info = json.loads(eval_biz_info)
                                eval_biz_info = eval(eval_biz_info)
                                # eval_biz_info
                                # print(eval_biz_info)
                                if 'role_name' in eval_biz_info:
                                    tmprole_name = eval_biz_info['role_name']
                                if 'dept_name' in eval_biz_info:
                                    tmpdept_name = eval_biz_info['dept_name']
                                if 'role_level' in eval_biz_info:
                                    tmprole_level = eval_biz_info['role_level']
                                if 'dept_name' in eval_biz_info:            
                                    tmp_biz_info = {
                                        'tax_id':eval_biz_info['id_card_num'],
                                        'role_name' : tmprole_name,
                                        'dept_name' : tmpdept_name,
                                        'role_level' :tmprole_level              
                                    }                                
                                elif 'dept_name' not in eval_biz_info:
                                    tmp_biz_info = {
                                        'tax_id':eval_biz_info['id_card_num'],
                                        'role_name' : tmprole_name,
                                        'dept_name' : [],
                                        'role_level' : tmprole_level             
                                    }
                    if z == 3:
                        tmptime_update = (query_temp[u][z])
                        tmptime_update_string = str(query_temp[u][z]).split('+')[0]
                        th_dateTime_2_last = convert_datetime_TH_2(int(tmptime_update.timestamp()))
                        ts = int(time.time())
                        date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                        year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                        datetime_display = int(dateTime_String.timestamp())
                        date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                        yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                        time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                        old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                        if date_time_today == date_time_db:
                            date_last_display_show = time_show_db
                        else:
                            if year_today == yar_db:
                                date_last_display_show = convert_datetime_TH_2_display(datetime_display)
                            else:
                                date_last_display_show = old_year
                        
                    dateTime_String = tmp_send_time
                    th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                    ts = int(time.time())
                    date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                    year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                    datetime_display = int(dateTime_String.timestamp())
                    date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                    yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                    time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                    old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                    if date_time_today == date_time_db:
                        date_display_show = time_show_db
                    else:
                        if year_today == yar_db:
                            date_display_show = convert_datetime_TH_2_display(datetime_display)
                        else:
                            date_display_show = old_year
                # print(email_step_sum_w)
                if tmp_status_group == True:
                    for ui in range(len(tmpstepnum)):
                        intstepnum = tmpstepnum[ui] - 1
                        try:
                            for w in range(len(email_step_sum_w[intstepnum])):
                                tmp_req_email.append(email_step_sum_w[intstepnum][w])
                        except Exception as e:
                            tmp_req_email = []   
                list_arr.append({
                    'group_email':tmp_req_email,
                    'group_id':None,
                    'group_status':tmp_status_group,
                    'sidCode':tmp_sicode,
                    'document_name':documentName,
                    'document_type':tmp_document_type,
                    'document_urgent':documentUrgentType,
                    'document_urgent_string':documentUrgentString,
                    'dateTime_String':str(dateTime_String).split('+')[0],
                    'dateTime_String_TH_1':th_dateTime_2,
                    'dateTime_display':date_display_show,
                    'document_id':tmp_document_id,
                    'stamp_all':tmp_sign_page_options,
                    'options_page_document':tmp_options_page,
                    'max_step':tmpstepmax,
                    'step_now':tmpstepnow,
                    # 'dateTime_String_TH_2':th_dateTime_2,
                    'date_String':str(dateTime_String).split(' ')[0],
                    'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                    'status_file_code':tmpdocument_status,
                    'status_file_string':res_status_file_string,
                    'dateTime':int(dateTime_String.timestamp()),
                    'tracking_id':tmp_tracking_id,
                    'sender_name':tmp_sender_name,
                    'sender_email':tmp_sender_email,
                    'file_name':tmp_file_name,
                    'document_business':tmp_biz_info,
                    'group':status_groupid,
                    'update_last':tmptime_update,
                    'update_last_String_TH_1':th_dateTime_2_last,
                    'update_last_display':date_last_display_show,
                    'update_last_String':tmptime_update_string,
                })
            list_arr = sorted(list_arr, key=lambda k: k['dateTime'], reverse=True)
            json_Data['Document_Details'] = list_arr
            json_Data['offset'] = self.offset + self.limit
                    # arr.append(tmp_dict_json)
            return {'result':'OK','messageText':json_Data}
            
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

    def select_dashboard_recipient_v6_new_limitoffset_filter(self,emailUser,limit,offset,status,document_type,group_status=None,tmptimeapprove=None):
        self.emailUser = emailUser
        if limit != '':
            self.limit = int(limit)
        else:
            self.limit = ''
        if offset != '':
            self.offset = int(offset)
        else:
            self.offset = ''
        self.group_status = group_status
        if self.group_status != None:
            self.group_status = group_status
        self.tmptimeapprove = tmptimeapprove
        if self.tmptimeapprove != None:
            self.tmptimeapprove = tmptimeapprove
        self.status = status
        self.document_type = document_type
        self.all_status = ['W','N','Z']
        arr_list_sum = []
        json_Data = {}
        sum_row_tooffset = 0
        keep_lenstatus = []
        a = 0
        if self.status in self.all_status:
            for i in range(self.limit):
                if i > 0:
                    self.offset = self.offset + self.limit
                if len(arr_list_sum) < self.limit:
                    arr_list_sum,sum_row_tooffset = select_1().recursive_status_file_v1(self.emailUser,self.limit,self.offset,self.status,arr_list_sum,sum_row_tooffset,self.document_type,self.group_status)
                    keep_lenstatus = arr_list_sum
                    sum_row_tooffset = self.offset + sum_row_tooffset
                    if len(keep_lenstatus) == len(arr_list_sum):
                        a = a + 1
                        if a == 10:
                            list_arr = sorted(arr_list_sum, key=lambda k: k['dateTime'], reverse=True)
                            json_Data['Document_Details'] = list_arr
                            json_Data['offset'] = sum_row_tooffset
                            return {'result':'OK','messageText':json_Data}                    
                else:
                    list_arr = sorted(arr_list_sum, key=lambda k: k['dateTime'], reverse=True)
                    json_Data['Document_Details'] = list_arr
                    json_Data['offset'] = sum_row_tooffset
                    return {'result':'OK','messageText':json_Data} 
            list_arr = sorted(arr_list_sum, key=lambda k: k['dateTime'], reverse=True)
            json_Data['Document_Details'] = list_arr
            json_Data['offset'] = sum_row_tooffset
            print(len(list_arr))
            return {'result':'OK','messageText':json_Data} 
        sid_list = []
        sid_list_email = []
        json_Data = {}
        list_arr = []
        list_json = []
        try:
            tmp_list = []             
            count_rowDocument = 0
            count_rowDocument_StatusActive = 0
            count_rowDocument_StatusReject = 0
            count_rowDocument_StatusCancel = 0
            statusFile_count_approve = 0
            statusFile_count_pendding = 0
            statusFile_count_reject = 0
            statusFile_count_wait = 0
            list_temp_query = []
            tmp_sid_code_list = []
            arr_gruop = []
            arr_group_sid = []
            tmp_arr_sid = []
            tmp_group_id = None
            json_Data = {}
            str_time = (time.time())
            search = "%'{}'%".format(self.emailUser)
            if self.limit != '' and self.offset != '':
                if self.status != '' and self.document_type != '':
                    if self.group_status == None:
                        if self.tmptimeapprove == True:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(paper_lesssender.document_status==self.status)\
                                .filter(paper_lessdocument.documentType==self.document_type)\
                                .order_by(desc(paper_lessdatastep.update_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                        else:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(paper_lesssender.document_status==self.status)\
                                .filter(paper_lessdocument.documentType==self.document_type)\
                                .order_by(desc(paper_lesssender.send_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                    elif self.group_status == True:
                        if self.tmptimeapprove == True:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                                .filter(paper_lesssender.document_status==self.status)\
                                .filter(paper_lessdocument.documentType==self.document_type)\
                                .order_by(desc(paper_lessdatastep.update_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                        else:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                                .filter(paper_lesssender.document_status==self.status)\
                                .filter(paper_lessdocument.documentType==self.document_type)\
                                .order_by(desc(paper_lesssender.send_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                    elif self.group_status == False:
                        if self.tmptimeapprove == True:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(paper_lesssender.document_status==self.status)\
                                .filter(paper_lessdocument.documentType==self.document_type)\
                                .order_by(desc(paper_lessdatastep.update_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                        else:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(paper_lesssender.document_status==self.status)\
                                .filter(paper_lessdocument.documentType==self.document_type)\
                                .order_by(desc(paper_lesssender.send_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()                            
                elif self.status != '' and self.document_type == '':
                    # print(self.group_status)
                    if self.group_status == None:
                        if self.tmptimeapprove == True:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(paper_lesssender.document_status==self.status)\
                                .order_by(desc(paper_lessdatastep.update_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                        else:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(paper_lesssender.document_status==self.status)\
                                .order_by(desc(paper_lesssender.send_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                    elif self.group_status == True:
                        if self.tmptimeapprove == True:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                                .filter(paper_lesssender.document_status==self.status)\
                                .order_by(desc(paper_lessdatastep.update_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                        else:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                                .filter(paper_lesssender.document_status==self.status)\
                                .order_by(desc(paper_lesssender.send_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                    elif self.group_status == False:
                        if self.tmptimeapprove == True:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(paper_lesssender.document_status==self.status)\
                                .order_by(desc(paper_lessdatastep.update_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                        else:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(paper_lesssender.document_status==self.status)\
                                .order_by(desc(paper_lesssender.send_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                elif self.status == '' and self.document_type != '':
                    if self.group_status == None:
                        if self.tmptimeapprove == True:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(paper_lessdocument.documentType==self.document_type)\
                                .order_by(desc(paper_lessdatastep.update_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                        else:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(paper_lessdocument.documentType==self.document_type)\
                                .order_by(desc(paper_lesssender.send_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                    elif self.group_status == True:
                        if self.tmptimeapprove == True:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                                .filter(paper_lessdocument.documentType==self.document_type)\
                                .order_by(desc(paper_lessdatastep.update_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                        else:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                                .filter(paper_lessdocument.documentType==self.document_type)\
                                .order_by(desc(paper_lesssender.send_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                    elif self.group_status == False:
                        if self.tmptimeapprove == True:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(paper_lessdocument.documentType==self.document_type)\
                                .order_by(desc(paper_lessdatastep.update_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                        else:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(paper_lessdocument.documentType==self.document_type)\
                                .order_by(desc(paper_lesssender.send_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()

                else:
                    if self.group_status == None:
                        if self.tmptimeapprove == True:
                            # print ('TTTT')
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .order_by(desc(paper_lessdatastep.update_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                            # print ('query_temp:',query_temp)
                        else:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .order_by(desc(paper_lesssender.send_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                            
                    elif self.group_status == True:
                        if self.tmptimeapprove == True:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                                .order_by(desc(paper_lessdatastep.update_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                        else:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                                .order_by(desc(paper_lesssender.send_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                    elif self.group_status == False:
                        if self.tmptimeapprove == True:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(paper_lessdocument.documentType==self.document_type)\
                                .order_by(desc(paper_lessdatastep.update_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
                        else:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(paper_lessdocument.documentType==self.document_type)\
                                .order_by(desc(paper_lesssender.send_time))\
                                .limit(self.limit)\
                                .offset(self.offset)\
                                .all()
            else:                
                if self.status != '' and self.document_type != '':
                    if self.group_status == None:
                        if self.tmptimeapprove == True:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(paper_lesssender.document_status==self.status)\
                                .filter(paper_lessdocument.documentType==self.document_type)\
                                .order_by(desc(paper_lessdatastep.update_time))\
                                .all()
                        else:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(paper_lesssender.document_status==self.status)\
                                .filter(paper_lessdocument.documentType==self.document_type)\
                                .order_by(desc(paper_lesssender.send_time))\
                                .all()
                    elif self.group_status == True:
                        if self.tmptimeapprove == True:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                                .filter(paper_lesssender.document_status==self.status)\
                                .filter(paper_lessdocument.documentType==self.document_type)\
                                .order_by(desc(paper_lessdatastep.update_time))\
                                .all()
                        else:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                                .filter(paper_lesssender.document_status==self.status)\
                                .filter(paper_lessdocument.documentType==self.document_type)\
                                .order_by(desc(paper_lesssender.send_time))\
                                .all()
                    elif self.group_status == False:
                        if self.tmptimeapprove == True:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(paper_lesssender.document_status==self.status)\
                                .filter(paper_lessdocument.documentType==self.document_type)\
                                .order_by(desc(paper_lessdatastep.update_time))\
                                .all()
                        else:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(paper_lesssender.document_status==self.status)\
                                .filter(paper_lessdocument.documentType==self.document_type)\
                                .order_by(desc(paper_lesssender.send_time))\
                                .all()
                elif self.status != '' and self.document_type == '':
                    if self.group_status == None:
                        if self.tmptimeapprove == True:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(paper_lesssender.document_status==self.status)\
                                .order_by(desc(paper_lessdatastep.update_time))\
                                .all()
                        else:
                            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                                .filter(paper_lesssender.document_status==self.status)\
                                .order_by(desc(paper_lesssender.send_time))\
                                .all()
                    elif self.group_status == True:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                            .filter(paper_lesssender.document_status==self.status)\
                            .order_by(desc(paper_lesssender.send_time))\
                            .all()
                    elif self.group_status == False:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .filter(paper_lesssender.document_status==self.status)\
                            .order_by(desc(paper_lesssender.send_time))\
                            .all()
                elif self.status == '' and self.document_type != '':
                    if self.group_status == None:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .filter(paper_lessdocument.documentType==self.document_type)\
                            .order_by(desc(paper_lesssender.send_time))\
                            .all()
                    elif self.group_status == True:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                            .filter(paper_lessdocument.documentType==self.document_type)\
                            .order_by(desc(paper_lesssender.send_time))\
                            .all()       
                    elif self.group_status == False: 
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .filter(paper_lessdocument.documentType==self.document_type)\
                            .order_by(desc(paper_lesssender.send_time))\
                            .all()              
                else:
                    if self.group_status == None:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .order_by(desc(paper_lesssender.send_time))\
                            .all()
                    elif self.group_status == True:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .order_by(desc(paper_lesssender.send_time))\
                            .all()
                    elif self.group_status == False: 
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .order_by(desc(paper_lesssender.send_time))\
                            .all()
            
            # print(query_temp)
            end_time = (time.time())
            # print(end_time -str_time)
            
            
            
            arr = []
            for u in range(len(query_temp)):
                arr_email_document = []
                tmp_req_email = []
                email_step_sum_w = []
                for z in range(len(query_temp[u])):
                    if z == 0:
                        tmp_dict_json = query_temp[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state']) 
                        tmp_sicode = tmp_dict_json['step_data_sid']
                        tmp_sid_code_list.append(tmp_sicode)
                        tmp_send_time = tmp_dict_json['send_time']
                        tmp_document_id = tmp_dict_json['doc_id']
                        tmp_tracking_id = tmp_dict_json['tracking_id']
                        try:
                            tmp_sender_name = eval(tmp_dict_json['sender_name'])
                        except Exception as e:
                            tmp_sender_name = tmp_dict_json['sender_name']
                        tmp_sender_email = tmp_dict_json['sender_email']
                        tmp_file_name = tmp_dict_json['file_name']
                        tmp_groupid = tmp_dict_json['group_id']
                        email_step_sum = tmp_dict_json['recipient_email']
                        if email_step_sum != None:
                            email_step_sum = eval(email_step_sum)
                        # print(email_step_sum)
                        tmpstatus_detail = tmp_dict_json['status_details']
                        tmpdocument_status = tmp_dict_json['document_status']
                        tmpstepnow = tmp_dict_json['stepnow']
                        status_groupid = False
                        if tmp_groupid != None:
                            if tmp_groupid != '':
                                tmp_groupid = eval(tmp_groupid)
                                if len(tmp_groupid) != 0:
                                    status_groupid = True
                        if tmpstepnow != None:
                            tmpstepnow = int(tmpstepnow)
                        tmpstepmax = tmp_dict_json['stepmax']
                        if tmpstepmax != None:
                            tmpstepmax = int(tmpstepmax)
                        if tmpstatus_detail != None:
                            tmpstatus_detail = eval(tmpstatus_detail)                   
                            for z in range(len(tmpstatus_detail)):
                                email_step_sum_w.append(tmpstatus_detail[z]['email'])

                            if tmpdocument_status == 'N':
                                for x in range(len(tmpstatus_detail)):
                                    # print(tmp_sicode)
                                    # print(tmpstatus_detail[x])
                                    # email_step_sum_w.append(tmpstatus_detail[x]['email'])
                                    if self.emailUser not in arr_email_document:
                                        if self.emailUser in tmpstatus_detail[x]['email']:
                                            if tmpstatus_detail[x]['step_status_code'] == 'W':
                                                arr_email_document.append(self.emailUser)
                                                tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                                                break
                                            else:
                                                tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                        # print(email_step_sum_w)
                        if tmpdocument_status == 'Z':
                            res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                        elif tmpdocument_status == 'W':
                            res_status_file_string = 'รอคุณอนุมัติ'
                        elif tmpdocument_status == 'N':
                            res_status_file_string = 'กำลังดำเนินการ'
                        elif tmpdocument_status == 'R':
                            res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                        else:
                            res_status_file_string = ''
                                            # else:

                        # print(tmpstatus_detail)
                    if z == 1:
                        tmp_document_type = None
                        tmp_dict_json = query_temp[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state'])
                        tmp_sign_page_options = tmp_dict_json['sign_page_options']
                        tmp_document_type = tmp_dict_json['documentType']
                        tmp_options_page = []
                        if tmp_dict_json['options_page'] != None:
                            if tmp_dict_json['options_page'] != '':
                            # print(tmp_dict_json['options_page'],tmp_document_id)
                                tmp_options_page = [eval(tmp_dict_json['options_page'])]
                        else:
                            tmp_options_page = []
                        if len(tmp_options_page) != 0:
                            # print(tmp_options_page[0]['group_detail'])
                            tmp_status_group = False
                            if status_groupid == True:
                                if len(tmp_options_page) != 0:
                                    if 'group_detail' in tmp_options_page[0]:
                                        tmp_group_detail = tmp_options_page[0]['group_detail']
                                        if 'group_status' in tmp_group_detail:
                                            if tmp_group_detail['group_status'] == True:
                                                tmp_status_group = True
                                                tmpstepnum = tmp_group_detail['step_num']
                                        # if 'step_num' in tmp_group_detail:
                                        #     tmp_status_group = True
                                        #     tmp_group_stepnum = tmp_group_detail['step_num']
                            # if 'group_detail' in tmp_options_page[0]:
                            #     if 'group_status' in tmp_options_page[0]['group_detail']:
                            #         tmpgroupdetails = tmp_options_page[0]['group_detail']
                            #         if tmpgroupdetails['group_status'] == True:
                            #             tmpstepnum = tmpgroupdetails['step_num']
                                        # print(tmpstepnum)
                        if tmp_dict_json['documentJson'] != None:
                            documentJson_result = eval(tmp_dict_json['documentJson'])
                            documentName = documentJson_result['document_name']
                            documentType = documentJson_result['document_type']
                        else:
                            documentName = None
                            documentType = None
                        if tmp_dict_json['urgent_type'] != None:
                            documentUrgentType = tmp_dict_json['urgent_type']
                            if documentUrgentType == 'I':
                                documentUrgentString = 'ด่วนมาก'
                            elif documentUrgentType == 'U':
                                documentUrgentString = 'ด่วน'
                            elif documentUrgentType == 'M':
                                documentUrgentString = 'ปกติ'
                    tmp_biz_info = None
                    tmprole_name = None
                    tmpdept_name = None
                    tmprole_level = None
                    if z == 2:
                        if query_temp[u][z] != None:
                            if query_temp[u][z] != 'None':
                                
                                eval_biz_info = json.dumps(query_temp[u][z])
                                eval_biz_info = json.loads(eval_biz_info)
                                try:
                                    eval_biz_info = eval(eval_biz_info)
                                    if 'role_name' in eval_biz_info:
                                        tmprole_name = eval_biz_info['role_name']
                                    if 'dept_name' in eval_biz_info:
                                        tmpdept_name = eval_biz_info['dept_name']
                                    if 'role_level' in eval_biz_info:
                                        tmprole_level = eval_biz_info['role_level']
                                    if 'dept_name' in eval_biz_info:            
                                        tmp_biz_info = {
                                            'tax_id':eval_biz_info['id_card_num'],
                                            'role_name' : tmprole_name,
                                            'dept_name' : tmpdept_name,
                                            'role_level' :tmprole_level              
                                        }                                
                                    elif 'dept_name' not in eval_biz_info:
                                        tmp_biz_info = {
                                            'tax_id':eval_biz_info['id_card_num'],
                                            'role_name' : tmprole_name,
                                            'dept_name' : [],
                                            'role_level' : tmprole_level             
                                        }
                                except Exception as e:
                                    pass
                                
                                # eval_biz_info
                                # print(eval_biz_info)
                                
                    if z == 3:
                        tmptime_update = (query_temp[u][z])
                        tmptime_update_timestamp = int(tmptime_update.timestamp())
                        tmptime_update_string = str(tmptime_update).split('+')[0]
                        th_dateTime_2_last = convert_datetime_TH_2(int(tmptime_update.timestamp()))
                        # print(th_dateTime_2_last,tmptime_update)
                        ts = int(time.time())
                        date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                        year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                        datetime_display_update = int(tmptime_update.timestamp())
                        date_time_db = datetime.datetime.fromtimestamp(datetime_display_update).strftime('%Y-%m-%d')
                        yar_db = datetime.datetime.fromtimestamp(datetime_display_update).strftime('%Y')
                        time_show_db = datetime.datetime.fromtimestamp(datetime_display_update).strftime('%H:%M')
                        old_year = datetime.datetime.fromtimestamp(datetime_display_update).strftime('%d/%m/%Y')
                        if date_time_today == date_time_db:
                            date_last_display_show = time_show_db
                        else:
                            if year_today == yar_db:
                                date_last_display_show = convert_datetime_TH_2_display(datetime_display_update)
                            else:
                                date_last_display_show = old_year
                        
                    dateTime_String = tmp_send_time
                    th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                    ts = int(time.time())
                    date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                    year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                    datetime_display = int(dateTime_String.timestamp())
                    date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                    yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                    time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                    old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                    if date_time_today == date_time_db:
                        date_display_show = time_show_db
                    else:
                        if year_today == yar_db:
                            date_display_show = convert_datetime_TH_2_display(datetime_display)
                        else:
                            date_display_show = old_year
                # print(email_step_sum_w)
                if tmp_status_group == True:
                    for ui in range(len(tmpstepnum)):
                        intstepnum = tmpstepnum[ui] - 1
                        try:
                            for w in range(len(email_step_sum_w[intstepnum])):
                                tmp_req_email.append(email_step_sum_w[intstepnum][w])
                        except Exception as e:
                            tmp_req_email = []   
                sender_name_eng = find_name_surename_by_username(tmp_sender_email)
                list_arr.append({
                    'group_email':tmp_req_email,
                    'group_id':None,
                    'group_status':tmp_status_group,
                    'sidCode':tmp_sicode,
                    'document_name':documentName,
                    'document_type':tmp_document_type,
                    'document_urgent':documentUrgentType,
                    'document_urgent_string':documentUrgentString,
                    'dateTime_String':str(dateTime_String).split('+')[0],
                    'dateTime_String_TH_1':th_dateTime_2,
                    'dateTime_display':date_display_show,
                    'document_id':tmp_document_id,
                    'stamp_all':tmp_sign_page_options,
                    'options_page_document':tmp_options_page,
                    'max_step':tmpstepmax,
                    'step_now':tmpstepnow,
                    # 'dateTime_String_TH_2':th_dateTime_2,
                    'date_String':str(dateTime_String).split(' ')[0],
                    'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                    'status_file_code':tmpdocument_status,
                    'status_file_string':res_status_file_string,
                    'dateTime':int(dateTime_String.timestamp()),
                    'tracking_id':tmp_tracking_id,
                    'sender_name':tmp_sender_name,
                    'sender_email':tmp_sender_email,
                    'file_name':tmp_file_name,
                    'document_business':tmp_biz_info,
                    'group':status_groupid,
                    'update_last':tmptime_update,
                    'update_last_String_TH_1':th_dateTime_2_last,
                    'update_last_display':date_last_display_show,
                    'update_last_String':tmptime_update_string,
                    'update_last_TimeStamp':tmptime_update_timestamp,
                    'sender_name_eng':sender_name_eng
                })
            list_arr = sorted(list_arr, key=lambda k: k['dateTime'], reverse=True)
            if self.tmptimeapprove == True:
                list_arr = sorted(list_arr, key=lambda k: k['update_last_TimeStamp'], reverse=True)
            json_Data['Document_Details'] = list_arr
            json_Data['offset'] = self.offset + self.limit
                    # arr.append(tmp_dict_json)
            return {'result':'OK','messageText':json_Data}
            
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}
        finally:
            db.session.close()

    
    def select_dashboard_recipient_v5_new_limitoffset_search(self,emailUser,limit,offset,document_type,keyword):
        self.emailUser = emailUser
        if limit != '':
            self.limit = int(limit)
        else:
            self.limit = ''
        if offset != '':
            self.offset = int(offset)
        else:
            self.offset = ''
        self.document_type = document_type
        self.keyword = keyword
        sid_list = []
        sid_list_email = []
        json_Data = {}
        list_arr = []
        list_json = []
        try:
            tmp_list = []             
            count_rowDocument = 0
            count_rowDocument_StatusActive = 0
            count_rowDocument_StatusReject = 0
            count_rowDocument_StatusCancel = 0
            statusFile_count_approve = 0
            statusFile_count_pendding = 0
            statusFile_count_reject = 0
            statusFile_count_wait = 0
            list_temp_query = []
            tmp_sid_code_list = []
            arr_gruop = []
            arr_group_sid = []
            tmp_arr_sid = []
            tmp_group_id = None
            json_Data = {}
            str_time = (time.time())
            search = "%'{}'%".format(self.emailUser)
            if self.limit != '' and self.offset != '':
                if self.document_type != '' and self.keyword != '':
                    query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                        .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                        .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                        .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                        .filter(paper_lessdocument.documentType==self.document_type)\
                        .filter(or_(paper_lesssender.sender_name.contains(self.keyword),paper_lesssender.doc_id.contains(self.keyword),paper_lessdocument.options_page.contains(self.keyword)))\
                        .order_by(desc(paper_lesssender.send_time))\
                        .limit(self.limit)\
                        .offset(self.offset)\
                        .all()
                elif self.document_type != '' and self.keyword == '':
                    query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                        .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                        .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                        .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                        .filter(paper_lessdocument.documentType==self.document_type)\
                        .order_by(desc(paper_lesssender.send_time))\
                        .limit(self.limit)\
                        .offset(self.offset)\
                        .all()
                elif self.document_type == '' and self.keyword != '':
                    query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                        .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                        .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                        .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                        .filter(or_(paper_lesssender.sender_name.contains(self.keyword),paper_lesssender.doc_id.contains(self.keyword),paper_lessdocument.options_page.contains(self.keyword)))\
                        .order_by(desc(paper_lesssender.send_time))\
                        .limit(self.limit)\
                        .offset(self.offset)\
                        .all()
                else:
                    query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                        .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                        .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                        .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                        .order_by(desc(paper_lesssender.send_time))\
                        .limit(self.limit)\
                        .offset(self.offset)\
                        .all()
            else:
                if self.document_type != '' and self.keyword != '':
                    query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                        .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                        .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                        .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                        .filter(paper_lessdocument.documentType==self.document_type)\
                        .filter(or_(paper_lesssender.sender_name.contains(self.keyword),paper_lesssender.doc_id.contains(self.keyword),paper_lessdocument.options_page.contains(self.keyword)))\
                        .order_by(desc(paper_lesssender.send_time))\
                        .all()
                elif self.document_type != '' and self.keyword == '':
                    query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                        .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                        .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                        .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                        .filter(paper_lessdocument.documentType==self.document_type)\
                        .order_by(desc(paper_lesssender.send_time))\
                        .all()
                elif self.document_type == '' and self.keyword != '':
                    query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                        .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                        .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                        .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                        .filter(or_(paper_lesssender.sender_name.contains(self.keyword),paper_lesssender.doc_id.contains(self.keyword),paper_lessdocument.options_page.contains(self.keyword)))\
                        .order_by(desc(paper_lesssender.send_time))\
                        .all()
                else:
                    query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                        .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                        .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                        .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                        .order_by(desc(paper_lesssender.send_time))\
                        .all()
            
            # print(query_temp)
            end_time = (time.time())
            print(end_time -str_time)
            
            
            
            arr = []
            for u in range(len(query_temp)):
                arr_email_document = []
                tmp_req_email = []
                email_step_sum_w = []
                for z in range(len(query_temp[u])):
                    if z == 0:
                        tmp_dict_json = query_temp[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state']) 
                        tmp_sicode = tmp_dict_json['step_data_sid']
                        tmp_sid_code_list.append(tmp_sicode)
                        tmp_send_time = tmp_dict_json['send_time']
                        tmp_document_id = tmp_dict_json['doc_id']
                        tmp_tracking_id = tmp_dict_json['tracking_id']
                        tmp_sender_name = tmp_dict_json['sender_name']
                        tmp_sender_email = tmp_dict_json['sender_email']
                        tmp_file_name = tmp_dict_json['file_name']
                        tmp_groupid = tmp_dict_json['group_id']
                        email_step_sum = tmp_dict_json['recipient_email']
                        if email_step_sum != None:
                            email_step_sum = eval(email_step_sum)
                        # print(email_step_sum)
                        tmpstatus_detail = tmp_dict_json['status_details']
                        tmpdocument_status = tmp_dict_json['document_status']
                        tmpstepnow = tmp_dict_json['stepnow']
                        status_groupid = False
                        if tmp_groupid != None:
                            if tmp_groupid != '':
                                tmp_groupid = eval(tmp_groupid)
                                if len(tmp_groupid) != 0:
                                    status_groupid = True
                        if tmpstepnow != None:
                            tmpstepnow = int(tmpstepnow)
                        tmpstepmax = tmp_dict_json['stepmax']
                        if tmpstepmax != None:
                            tmpstepmax = int(tmpstepmax)
                        if tmpstatus_detail != None:
                            tmpstatus_detail = eval(tmpstatus_detail)                            
                            for z in range(len(tmpstatus_detail)):
                                email_step_sum_w.append(tmpstatus_detail[z]['email'])

                            if tmpdocument_status == 'N':
                                for x in range(len(tmpstatus_detail)):
                                    # print(tmp_sicode)
                                    # print(tmpstatus_detail[x])
                                    # email_step_sum_w.append(tmpstatus_detail[x]['email'])
                                    if self.emailUser not in arr_email_document:
                                        if self.emailUser in tmpstatus_detail[x]['email']:
                                            if tmpstatus_detail[x]['step_status_code'] == 'W':
                                                arr_email_document.append(self.emailUser)
                                                tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                                                break
                                            else:
                                                tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                        # print(email_step_sum_w)
                        if tmpdocument_status == 'Z':
                            res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                        elif tmpdocument_status == 'W':
                            res_status_file_string = 'รอคุณอนุมัติ'
                        elif tmpdocument_status == 'N':
                            res_status_file_string = 'กำลังดำเนินการ'
                        elif tmpdocument_status == 'R':
                            res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                        else:
                            res_status_file_string = ''
                                            # else:

                        # print(tmpstatus_detail)
                    if z == 1:
                        tmp_document_type = None
                        tmp_dict_json = query_temp[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state'])
                        tmp_sign_page_options = tmp_dict_json['sign_page_options']
                        tmp_document_type = tmp_dict_json['documentType']
                        tmp_options_page = []
                        if tmp_dict_json['options_page'] != None:
                            if tmp_dict_json['options_page'] != '':
                            # print(tmp_dict_json['options_page'],tmp_document_id)
                                tmp_options_page = [eval(tmp_dict_json['options_page'])]
                        else:
                            tmp_options_page = []
                        if len(tmp_options_page) != 0:
                            # print(tmp_options_page[0]['group_detail'])
                            tmp_status_group = False
                            if status_groupid == True:
                                if len(tmp_options_page) != 0:
                                    if 'group_detail' in tmp_options_page[0]:
                                        tmp_group_detail = tmp_options_page[0]['group_detail']
                                        if 'group_status' in tmp_group_detail:
                                            if tmp_group_detail['group_status'] == True:
                                                tmp_status_group = True
                                                tmpstepnum = tmp_group_detail['step_num']
                                        # if 'step_num' in tmp_group_detail:
                                        #     tmp_status_group = True
                                        #     tmp_group_stepnum = tmp_group_detail['step_num']
                            # if 'group_detail' in tmp_options_page[0]:
                            #     if 'group_status' in tmp_options_page[0]['group_detail']:
                            #         tmpgroupdetails = tmp_options_page[0]['group_detail']
                            #         if tmpgroupdetails['group_status'] == True:
                            #             tmpstepnum = tmpgroupdetails['step_num']
                                        # print(tmpstepnum)
                        if tmp_dict_json['documentJson'] != None:
                            documentJson_result = eval(tmp_dict_json['documentJson'])
                            documentName = documentJson_result['document_name']
                            documentType = documentJson_result['document_type']
                        else:
                            documentName = None
                            documentType = None
                        if tmp_dict_json['urgent_type'] != None:
                            documentUrgentType = tmp_dict_json['urgent_type']
                            if documentUrgentType == 'I':
                                documentUrgentString = 'ด่วนมาก'
                            elif documentUrgentType == 'U':
                                documentUrgentString = 'ด่วน'
                            elif documentUrgentType == 'M':
                                documentUrgentString = 'ปกติ'
                    tmp_biz_info = None
                    tmprole_name = None
                    tmpdept_name = None
                    tmprole_level = None
                    if z == 2:
                        if query_temp[u][z] != None:
                            if query_temp[u][z] != 'None':
                                
                                eval_biz_info = json.dumps(query_temp[u][z])
                                eval_biz_info = json.loads(eval_biz_info)
                                eval_biz_info = eval(eval_biz_info)
                                # eval_biz_info
                                # print(eval_biz_info)
                                if 'role_name' in eval_biz_info:
                                    tmprole_name = eval_biz_info['role_name']
                                if 'dept_name' in eval_biz_info:
                                    tmpdept_name = eval_biz_info['dept_name']
                                if 'role_level' in eval_biz_info:
                                    tmprole_level = eval_biz_info['role_level']
                                if 'dept_name' in eval_biz_info:            
                                    tmp_biz_info = {
                                        'tax_id':eval_biz_info['id_card_num'],
                                        'role_name' : tmprole_name,
                                        'dept_name' : tmpdept_name,
                                        'role_level' :tmprole_level              
                                    }                                
                                elif 'dept_name' not in eval_biz_info:
                                    tmp_biz_info = {
                                        'tax_id':eval_biz_info['id_card_num'],
                                        'role_name' : tmprole_name,
                                        'dept_name' : [],
                                        'role_level' : tmprole_level             
                                    }
                        
                    dateTime_String = tmp_send_time
                    th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                    ts = int(time.time())
                    date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                    year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                    datetime_display = int(dateTime_String.timestamp())
                    date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                    yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                    time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                    old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                    if date_time_today == date_time_db:
                        date_display_show = time_show_db
                    else:
                        if year_today == yar_db:
                            date_display_show = convert_datetime_TH_2_display(datetime_display)
                        else:
                            date_display_show = old_year
                # print(email_step_sum_w)
                if tmp_status_group == True:
                    for ui in range(len(tmpstepnum)):
                        intstepnum = tmpstepnum[ui] - 1
                        try:
                            for w in range(len(email_step_sum_w[intstepnum])):
                                tmp_req_email.append(email_step_sum_w[intstepnum][w])
                        except Exception as e:
                            tmp_req_email = []  
                list_arr.append({
                    'group_email':tmp_req_email,
                    'group_id':None,
                    'group_status':tmp_status_group,
                    'sidCode':tmp_sicode,
                    'document_name':documentName,
                    'document_type':tmp_document_type,
                    'document_urgent':documentUrgentType,
                    'document_urgent_string':documentUrgentString,
                    'dateTime_String':str(dateTime_String).split('+')[0],
                    'dateTime_String_TH_1':th_dateTime_2,
                    'dateTime_display':date_display_show,
                    'document_id':tmp_document_id,
                    'stamp_all':tmp_sign_page_options,
                    'options_page_document':tmp_options_page,
                    'max_step':tmpstepmax,
                    'step_now':tmpstepnow,
                    # 'dateTime_String_TH_2':th_dateTime_2,
                    'date_String':str(dateTime_String).split(' ')[0],
                    'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                    'status_file_code':tmpdocument_status,
                    'status_file_string':res_status_file_string,
                    'dateTime':int(dateTime_String.timestamp()),
                    'tracking_id':tmp_tracking_id,
                    'sender_name':tmp_sender_name,
                    'sender_email':tmp_sender_email,
                    'file_name':tmp_file_name,
                    'document_business':tmp_biz_info,
                    'group':status_groupid
                })
            list_arr = sorted(list_arr, key=lambda k: k['dateTime'], reverse=True)
            json_Data['Document_Details'] = list_arr
                    # arr.append(tmp_dict_json)
            return {'result':'OK','messageText':json_Data}
            
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

    def select_dashboard_recipient_v6_new_limitoffset_search(self,emailUser,limit,offset,document_type,keyword,tmptimeapprove=None):
        self.emailUser = emailUser
        if limit != '':
            self.limit = int(limit)
        else:
            self.limit = ''
        if offset != '':
            self.offset = int(offset)
        else:
            self.offset = ''
        self.document_type = document_type
        self.keyword = keyword
        self.tmptimeapprove = tmptimeapprove
        if self.tmptimeapprove != None:
            self.tmptimeapprove = tmptimeapprove
        sid_list = []
        sid_list_email = []
        json_Data = {}
        list_arr = []
        list_json = []
        try:
            tmp_list = []             
            count_rowDocument = 0
            count_rowDocument_StatusActive = 0
            count_rowDocument_StatusReject = 0
            count_rowDocument_StatusCancel = 0
            statusFile_count_approve = 0
            statusFile_count_pendding = 0
            statusFile_count_reject = 0
            statusFile_count_wait = 0
            list_temp_query = []
            tmp_sid_code_list = []
            arr_gruop = []
            arr_group_sid = []
            tmp_arr_sid = []
            tmp_group_id = None
            json_Data = {}
            str_time = (time.time())
            search = "%'{}'%".format(self.emailUser)
            search_keyword = "%{}%".format(self.keyword)
            if self.limit != '' and self.offset != '':
                if self.document_type != '' and self.keyword != '':
                    if self.tmptimeapprove == True:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .filter(paper_lessdocument.documentType==self.document_type)\
                            .filter(or_(paper_lesssender.sender_name.ilike(search_keyword),paper_lesssender.doc_id.ilike(search_keyword),paper_lessdocument.options_page.ilike(search_keyword)))\
                            .order_by(desc(paper_lessdatastep.update_time))\
                            .limit(self.limit)\
                            .offset(self.offset)\
                            .all()
                    else:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .filter(paper_lessdocument.documentType==self.document_type)\
                            .filter(or_(paper_lesssender.sender_name.ilike(search_keyword),paper_lesssender.doc_id.ilike(search_keyword),paper_lessdocument.options_page.ilike(search_keyword)))\
                            .order_by(desc(paper_lesssender.send_time))\
                            .limit(self.limit)\
                            .offset(self.offset)\
                            .all()
                elif self.document_type != '' and self.keyword == '':
                    if self.tmptimeapprove == True:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .filter(paper_lessdocument.documentType==self.document_type)\
                            .order_by(desc(paper_lessdatastep.update_time))\
                            .limit(self.limit)\
                            .offset(self.offset)\
                            .all()
                    else:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .filter(paper_lessdocument.documentType==self.document_type)\
                            .order_by(desc(paper_lesssender.send_time))\
                            .limit(self.limit)\
                            .offset(self.offset)\
                            .all()
                elif self.document_type == '' and self.keyword != '':
                    if self.tmptimeapprove == True:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .filter(or_(paper_lesssender.sender_name.ilike(search_keyword),paper_lesssender.doc_id.ilike(search_keyword),paper_lessdocument.options_page.ilike(search_keyword)))\
                            .order_by(desc(paper_lessdatastep.update_time))\
                            .limit(self.limit)\
                            .offset(self.offset)\
                            .all()
                    else:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .filter(or_(paper_lesssender.sender_name.ilike(search_keyword),paper_lesssender.doc_id.ilike(search_keyword),paper_lessdocument.options_page.ilike(search_keyword)))\
                            .order_by(desc(paper_lesssender.send_time))\
                            .limit(self.limit)\
                            .offset(self.offset)\
                            .all()
                else:
                    if self.tmptimeapprove == True:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .order_by(desc(paper_lessdatastep.update_time))\
                            .limit(self.limit)\
                            .offset(self.offset)\
                            .all()
                    else:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .order_by(desc(paper_lesssender.send_time))\
                            .limit(self.limit)\
                            .offset(self.offset)\
                            .all()
            else:
                if self.document_type != '' and self.keyword != '':
                    if self.tmptimeapprove == True:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .filter(paper_lessdocument.documentType==self.document_type)\
                            .filter(or_(paper_lesssender.sender_name.ilike(search_keyword),paper_lesssender.doc_id.ilike(search_keyword),paper_lessdocument.options_page.ilike(search_keyword)))\
                            .order_by(desc(paper_lessdatastep.update_time))\
                            .all()
                    else:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .filter(paper_lessdocument.documentType==self.document_type)\
                            .filter(or_(paper_lesssender.sender_name.ilike(search_keyword),paper_lesssender.doc_id.ilike(search_keyword),paper_lessdocument.options_page.ilike(search_keyword)))\
                            .order_by(desc(paper_lesssender.send_time))\
                            .all()
                elif self.document_type != '' and self.keyword == '':
                    if self.tmptimeapprove == True:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .filter(paper_lessdocument.documentType==self.document_type)\
                            .order_by(desc(paper_lessdatastep.update_time))\
                            .all()
                    else:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .filter(paper_lessdocument.documentType==self.document_type)\
                            .order_by(desc(paper_lesssender.send_time))\
                            .all()
                elif self.document_type == '' and self.keyword != '':
                    if self.tmptimeapprove == True:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .filter(or_(paper_lesssender.sender_name.ilike(search_keyword),paper_lesssender.doc_id.ilike(search_keyword),paper_lessdocument.options_page.ilike(search_keyword)))\
                            .order_by(desc(paper_lessdatastep.update_time))\
                            .all()
                    else:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .filter(or_(paper_lesssender.sender_name.ilike(search_keyword),paper_lesssender.doc_id.ilike(search_keyword),paper_lessdocument.options_page.ilike(search_keyword)))\
                            .order_by(desc(paper_lesssender.send_time))\
                            .all()
                else:
                    if self.tmptimeapprove == True:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .order_by(desc(paper_lessdatastep.update_time))\
                            .all()
                    else:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .order_by(desc(paper_lesssender.send_time))\
                            .all()
            
            # print(query_temp)
            end_time = (time.time())
            print(end_time -str_time)
            
            
            
            arr = []
            for u in range(len(query_temp)):
                arr_email_document = []
                tmp_req_email = []
                email_step_sum_w = []
                for z in range(len(query_temp[u])):
                    if z == 0:
                        tmp_dict_json = query_temp[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state']) 
                        tmp_sicode = tmp_dict_json['step_data_sid']
                        tmp_sid_code_list.append(tmp_sicode)
                        tmp_send_time = tmp_dict_json['send_time']
                        tmp_document_id = tmp_dict_json['doc_id']
                        tmp_tracking_id = tmp_dict_json['tracking_id']
                        try:
                            tmp_sender_name = eval(tmp_dict_json['sender_name'])
                        except Exception as e:
                            tmp_sender_name = tmp_dict_json['sender_name']
                        tmp_sender_email = tmp_dict_json['sender_email']
                        tmp_file_name = tmp_dict_json['file_name']
                        tmp_groupid = tmp_dict_json['group_id']
                        email_step_sum = tmp_dict_json['recipient_email']
                        if email_step_sum != None:
                            email_step_sum = eval(email_step_sum)
                        # print(email_step_sum)
                        tmpstatus_detail = tmp_dict_json['status_details']
                        tmpdocument_status = tmp_dict_json['document_status']
                        tmpstepnow = tmp_dict_json['stepnow']
                        status_groupid = False
                        if tmp_groupid != None:
                            if tmp_groupid != '':
                                tmp_groupid = eval(tmp_groupid)
                                if len(tmp_groupid) != 0:
                                    status_groupid = True
                        if tmpstepnow != None:
                            tmpstepnow = int(tmpstepnow)
                        tmpstepmax = tmp_dict_json['stepmax']
                        if tmpstepmax != None:
                            tmpstepmax = int(tmpstepmax)
                        if tmpstatus_detail != None:
                            tmpstatus_detail = eval(tmpstatus_detail)                            
                            for z in range(len(tmpstatus_detail)):
                                email_step_sum_w.append(tmpstatus_detail[z]['email'])

                            if tmpdocument_status == 'N':
                                for x in range(len(tmpstatus_detail)):
                                    # print(tmp_sicode)
                                    # print(tmpstatus_detail[x])
                                    # email_step_sum_w.append(tmpstatus_detail[x]['email'])
                                    if self.emailUser not in arr_email_document:
                                        if self.emailUser in tmpstatus_detail[x]['email']:
                                            if tmpstatus_detail[x]['step_status_code'] == 'W':
                                                arr_email_document.append(self.emailUser)
                                                tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                                                break
                                            else:
                                                tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                        # print(email_step_sum_w)
                        if tmpdocument_status == 'Z':
                            res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                        elif tmpdocument_status == 'W':
                            res_status_file_string = 'รอคุณอนุมัติ'
                        elif tmpdocument_status == 'N':
                            res_status_file_string = 'กำลังดำเนินการ'
                        elif tmpdocument_status == 'R':
                            res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                        else:
                            res_status_file_string = ''
                                            # else:

                        # print(tmpstatus_detail)
                    if z == 1:
                        tmp_document_type = None
                        tmp_dict_json = query_temp[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state'])
                        tmp_sign_page_options = tmp_dict_json['sign_page_options']
                        tmp_document_type = tmp_dict_json['documentType']
                        tmp_options_page = []
                        if tmp_dict_json['options_page'] != None:
                            if tmp_dict_json['options_page'] != '':
                            # print(tmp_dict_json['options_page'],tmp_document_id)
                                tmp_options_page = [eval(tmp_dict_json['options_page'])]
                        else:
                            tmp_options_page = []
                        if len(tmp_options_page) != 0:
                            # print(tmp_options_page[0]['group_detail'])
                            tmp_status_group = False
                            if status_groupid == True:
                                if len(tmp_options_page) != 0:
                                    if 'group_detail' in tmp_options_page[0]:
                                        tmp_group_detail = tmp_options_page[0]['group_detail']
                                        if 'group_status' in tmp_group_detail:
                                            if tmp_group_detail['group_status'] == True:
                                                tmp_status_group = True
                                                tmpstepnum = tmp_group_detail['step_num']
                                        # if 'step_num' in tmp_group_detail:
                                        #     tmp_status_group = True
                                        #     tmp_group_stepnum = tmp_group_detail['step_num']
                            # if 'group_detail' in tmp_options_page[0]:
                            #     if 'group_status' in tmp_options_page[0]['group_detail']:
                            #         tmpgroupdetails = tmp_options_page[0]['group_detail']
                            #         if tmpgroupdetails['group_status'] == True:
                            #             tmpstepnum = tmpgroupdetails['step_num']
                                        # print(tmpstepnum)
                        if tmp_dict_json['documentJson'] != None:
                            documentJson_result = eval(tmp_dict_json['documentJson'])
                            documentName = documentJson_result['document_name']
                            documentType = documentJson_result['document_type']
                        else:
                            documentName = None
                            documentType = None
                        if tmp_dict_json['urgent_type'] != None:
                            documentUrgentType = tmp_dict_json['urgent_type']
                            if documentUrgentType == 'I':
                                documentUrgentString = 'ด่วนมาก'
                            elif documentUrgentType == 'U':
                                documentUrgentString = 'ด่วน'
                            elif documentUrgentType == 'M':
                                documentUrgentString = 'ปกติ'
                    tmp_biz_info = None
                    tmprole_name = None
                    tmpdept_name = None
                    tmprole_level = None
                    if z == 2:
                        if query_temp[u][z] != None:
                            if query_temp[u][z] != 'None':
                                
                                eval_biz_info = json.dumps(query_temp[u][z])
                                eval_biz_info = json.loads(eval_biz_info)
                                eval_biz_info = eval(eval_biz_info)
                                # eval_biz_info
                                # print(eval_biz_info)
                                if 'role_name' in eval_biz_info:
                                    tmprole_name = eval_biz_info['role_name']
                                if 'dept_name' in eval_biz_info:
                                    tmpdept_name = eval_biz_info['dept_name']
                                if 'role_level' in eval_biz_info:
                                    tmprole_level = eval_biz_info['role_level']
                                if 'dept_name' in eval_biz_info:            
                                    tmp_biz_info = {
                                        'tax_id':eval_biz_info['id_card_num'],
                                        'role_name' : tmprole_name,
                                        'dept_name' : tmpdept_name,
                                        'role_level' :tmprole_level              
                                    }                                
                                elif 'dept_name' not in eval_biz_info:
                                    tmp_biz_info = {
                                        'tax_id':eval_biz_info['id_card_num'],
                                        'role_name' : tmprole_name,
                                        'dept_name' : [],
                                        'role_level' : tmprole_level             
                                    }

                    if z == 3:
                        tmptime_update = (query_temp[u][z])
                        tmptime_update_timestamp = int(tmptime_update.timestamp())
                        tmptime_update_string = str(tmptime_update).split('+')[0]
                        th_dateTime_2_last = convert_datetime_TH_2(int(tmptime_update.timestamp()))
                        # print(th_dateTime_2_last,tmptime_update)
                        ts = int(time.time())
                        date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                        year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                        datetime_display_update = int(tmptime_update.timestamp())
                        date_time_db = datetime.datetime.fromtimestamp(datetime_display_update).strftime('%Y-%m-%d')
                        yar_db = datetime.datetime.fromtimestamp(datetime_display_update).strftime('%Y')
                        time_show_db = datetime.datetime.fromtimestamp(datetime_display_update).strftime('%H:%M')
                        old_year = datetime.datetime.fromtimestamp(datetime_display_update).strftime('%d/%m/%Y')
                        if date_time_today == date_time_db:
                            date_last_display_show = time_show_db
                        else:
                            if year_today == yar_db:
                                date_last_display_show = convert_datetime_TH_2_display(datetime_display_update)
                            else:
                                date_last_display_show = old_year

                    dateTime_String = tmp_send_time
                    th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                    ts = int(time.time())
                    date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                    year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                    datetime_display = int(dateTime_String.timestamp())
                    date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                    yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                    time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                    old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                    if date_time_today == date_time_db:
                        date_display_show = time_show_db
                    else:
                        if year_today == yar_db:
                            date_display_show = convert_datetime_TH_2_display(datetime_display)
                        else:
                            date_display_show = old_year
                # print(email_step_sum_w)
                if tmp_status_group == True:
                    for ui in range(len(tmpstepnum)):
                        intstepnum = tmpstepnum[ui] - 1
                        try:
                            for w in range(len(email_step_sum_w[intstepnum])):
                                tmp_req_email.append(email_step_sum_w[intstepnum][w])
                        except Exception as e:
                            tmp_req_email = []  
                list_arr.append({
                    'group_email':tmp_req_email,
                    'group_id':None,
                    'group_status':tmp_status_group,
                    'sidCode':tmp_sicode,
                    'document_name':documentName,
                    'document_type':tmp_document_type,
                    'document_urgent':documentUrgentType,
                    'document_urgent_string':documentUrgentString,
                    'dateTime_String':str(dateTime_String).split('+')[0],
                    'dateTime_String_TH_1':th_dateTime_2,
                    'dateTime_display':date_display_show,
                    'document_id':tmp_document_id,
                    'stamp_all':tmp_sign_page_options,
                    'options_page_document':tmp_options_page,
                    'max_step':tmpstepmax,
                    'step_now':tmpstepnow,
                    # 'dateTime_String_TH_2':th_dateTime_2,
                    'date_String':str(dateTime_String).split(' ')[0],
                    'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                    'status_file_code':tmpdocument_status,
                    'status_file_string':res_status_file_string,
                    'dateTime':int(dateTime_String.timestamp()),
                    'tracking_id':tmp_tracking_id,
                    'sender_name':tmp_sender_name,
                    'sender_email':tmp_sender_email,
                    'file_name':tmp_file_name,
                    'document_business':tmp_biz_info,
                    'group':status_groupid,
                    'update_last':tmptime_update,
                    'update_last_String_TH_1':th_dateTime_2_last,
                    'update_last_display':date_last_display_show,
                    'update_last_String':tmptime_update_string,
                    'update_last_TimeStamp':tmptime_update_timestamp,
                })
            list_arr = sorted(list_arr, key=lambda k: k['dateTime'], reverse=True)
            if self.tmptimeapprove == True:
                list_arr = sorted(list_arr, key=lambda k: k['update_last_TimeStamp'], reverse=True)
            json_Data['Document_Details'] = list_arr
            json_Data['offset'] = self.offset + self.limit
                    # arr.append(tmp_dict_json)
            return {'result':'OK','messageText':json_Data}
            
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}
        finally:
            db.session.close()

    
    def select_dashboard_recipient_v5_new_limitoffset(self,emailUser,limit,offset,group_status=None,tmptimeapprove=None):
        self.emailUser = emailUser
        if limit != '':
            self.limit = int(limit)
        else:
            self.limit = ''
        if offset != '':
            self.offset = int(offset)
        else:
            self.offset = ''
        self.group_status =  group_status   
        if group_status != None:
            self.group_status = group_status
        self.tmptimeapprove = None
        if tmptimeapprove != None:
            self.tmptimeapprove = tmptimeapprove
        sid_list = []
        sid_list_email = []
        json_Data = {}
        list_arr = []
        list_json = []
        try:
            tmp_list = []             
            count_rowDocument = 0
            count_rowDocument_StatusActive = 0
            count_rowDocument_StatusReject = 0
            count_rowDocument_StatusCancel = 0
            statusFile_count_approve = 0
            statusFile_count_pendding = 0
            statusFile_count_reject = 0
            statusFile_count_wait = 0
            list_temp_query = []
            tmp_sid_code_list = []
            arr_gruop = []
            arr_group_sid = []
            tmp_arr_sid = []
            tmp_group_id = None
            json_Data = {}
            str_time = (time.time())
            search = "%'{}'%".format(self.emailUser)
            if self.limit != '' and self.offset != '':
                if self.group_status == None:
                    if self.tmptimeapprove == False:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .order_by(desc(paper_lesssender.send_time))\
                            .limit(self.limit)\
                            .offset(self.offset)\
                            .all()
                    else:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .order_by(desc(paper_lessdatastep.update_time))\
                            .limit(self.limit)\
                            .offset(self.offset)\
                            .all()
                elif self.group_status == True:
                    if self.tmptimeapprove == False:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .order_by(desc(paper_lesssender.send_time))\
                            .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                            .limit(self.limit)\
                            .offset(self.offset)\
                            .all()
                    else:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .order_by(desc(paper_lessdatastep.update_time))\
                            .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                            .limit(self.limit)\
                            .offset(self.offset)\
                            .all()
                elif self.group_status == False:
                    if self.tmptimeapprove == False:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .order_by(desc(paper_lesssender.send_time))\
                            .limit(self.limit)\
                            .offset(self.offset)\
                            .all()
                    else:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .order_by(desc(paper_lessdatastep.update_time))\
                            .limit(self.limit)\
                            .offset(self.offset)\
                            .all()
            else:
                if self.tmptimeapprove == False:
                    query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                        .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                        .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                        .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                        .order_by(desc(paper_lesssender.send_time))\
                        .all()
                else:
                    query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                        .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                        .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                        .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                        .order_by(desc(paper_lessdatastep.update_time))\
                        .all()                                                                                                                                                                                                                                                                           
            end_time = (time.time())
            arr = []
            for u in range(len(query_temp)):
                arr_email_document = []
                tmp_req_email = []
                email_step_sum_w = []
                for z in range(len(query_temp[u])):
                    if z == 0:
                        tmp_dict_json = query_temp[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state']) 
                        tmp_sicode = tmp_dict_json['step_data_sid']
                        tmp_sid_code_list.append(tmp_sicode)
                        tmp_send_time = tmp_dict_json['send_time']
                        tmp_document_id = tmp_dict_json['doc_id']
                        tmp_tracking_id = tmp_dict_json['tracking_id']
                        tmp_sender_name = tmp_dict_json['sender_name']
                        tmp_sender_email = tmp_dict_json['sender_email']
                        tmp_file_name = tmp_dict_json['file_name']
                        tmp_groupid = tmp_dict_json['group_id']
                        email_step_sum = tmp_dict_json['recipient_email']
                        # print(tmp_dict_json)
                        # expiry_date = tmp_dict_json['time_expire']
                        # importance = tmp_dict_json['importance']
                        # if importance == None:
                        #     importance_string = 'ไม่กำหนดความสำคัญ'
                        # elif importance == 'None':
                        #     importance_string = 'ไม่กำหนดความสำคัญ'
                        # elif importance == '0':
                        #     importance_string = 'สำคัญมาก'
                        # elif importance == '1':
                        #     importance_string = 'สำคัญปานกลาง'
                        # elif importance == '2':
                        #     importance_string = 'สำคัญปกติ'                       

                        # eform_id = tmp_dict_json['eform_id']
                        # last_digitsign = tmp_dict_json['last_digitsign']
                        # if last_digitsign == None:
                        #     last_digitsign = True 
                        if email_step_sum != None:
                            email_step_sum = eval(email_step_sum)
                        # print(email_step_sum)
                        tmpstatus_detail = tmp_dict_json['status_details']
                        tmpdocument_status = tmp_dict_json['document_status']
                        tmpstepnow = tmp_dict_json['stepnow']
                        status_groupid = False
                        if tmp_groupid != None:
                            if tmp_groupid != '':
                                tmp_groupid = eval(tmp_groupid)
                                if len(tmp_groupid) != 0:
                                    status_groupid = True
                        if tmpstepnow != None:
                            tmpstepnow = int(tmpstepnow)
                        tmpstepmax = tmp_dict_json['stepmax']
                        if tmpstepmax != None:
                            tmpstepmax = int(tmpstepmax)
                        if tmpstatus_detail != None:
                            tmpstatus_detail = eval(tmpstatus_detail)                            
                            for z in range(len(tmpstatus_detail)):
                                email_step_sum_w.append(tmpstatus_detail[z]['email'])

                            if tmpdocument_status == 'N':
                                for x in range(len(tmpstatus_detail)):
                                    # print(tmp_sicode)
                                    # print(tmpstatus_detail[x])
                                    # email_step_sum_w.append(tmpstatus_detail[x]['email'])
                                    if self.emailUser not in arr_email_document:
                                        if self.emailUser in tmpstatus_detail[x]['email']:
                                            if tmpstatus_detail[x]['step_status_code'] == 'W':
                                                arr_email_document.append(self.emailUser)
                                                tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                                                break
                                            else:
                                                tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                        # print(email_step_sum_w)
                        if tmpdocument_status == 'Z':
                            res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                        elif tmpdocument_status == 'W':
                            res_status_file_string = 'รอคุณอนุมัติ'
                        elif tmpdocument_status == 'N':
                            res_status_file_string = 'กำลังดำเนินการ'
                        elif tmpdocument_status == 'R':
                            res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                        else:
                            res_status_file_string = ''
                                            # else:

                        # print(tmpstatus_detail)
                    if z == 1:
                        tmp_document_type = None
                        tmp_dict_json = query_temp[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state'])
                        tmp_sign_page_options = tmp_dict_json['sign_page_options']
                        tmp_document_type = tmp_dict_json['documentType']
                        tmp_options_page = []
                        if tmp_dict_json['options_page'] != None:
                            if tmp_dict_json['options_page'] != '':
                            # print(tmp_dict_json['options_page'],tmp_document_id)
                                tmp_options_page = [eval(tmp_dict_json['options_page'])]
                        else:
                            tmp_options_page = []
                        if len(tmp_options_page) != 0:
                            # print(tmp_options_page[0]['group_detail'])
                            tmp_status_group = False
                            if status_groupid == True:
                                if len(tmp_options_page) != 0:
                                    if 'group_detail' in tmp_options_page[0]:
                                        tmp_group_detail = tmp_options_page[0]['group_detail']
                                        if 'group_status' in tmp_group_detail:
                                            if tmp_group_detail['group_status'] == True:
                                                tmp_status_group = True
                                                tmpstepnum = tmp_group_detail['step_num']
                                        # if 'step_num' in tmp_group_detail:
                                        #     tmp_status_group = True
                                        #     tmp_group_stepnum = tmp_group_detail['step_num']
                            # if 'group_detail' in tmp_options_page[0]:
                            #     if 'group_status' in tmp_options_page[0]['group_detail']:
                            #         tmpgroupdetails = tmp_options_page[0]['group_detail']
                            #         if tmpgroupdetails['group_status'] == True:
                            #             tmpstepnum = tmpgroupdetails['step_num']
                                        # print(tmpstepnum)
                        if tmp_dict_json['documentJson'] != None:
                            documentJson_result = eval(tmp_dict_json['documentJson'])
                            documentName = documentJson_result['document_name']
                            documentType = documentJson_result['document_type']
                        else:
                            documentName = None
                            documentType = None
                        if tmp_dict_json['urgent_type'] != None:
                            documentUrgentType = tmp_dict_json['urgent_type']
                            if documentUrgentType == 'I':
                                documentUrgentString = 'ด่วนมาก'
                            elif documentUrgentType == 'U':
                                documentUrgentString = 'ด่วน'
                            elif documentUrgentType == 'M':
                                documentUrgentString = 'ปกติ'
                    tmp_biz_info = None
                    tmprole_name = None
                    tmpdept_name = None
                    tmprole_level = None
                    if z == 2:
                        if query_temp[u][z] != None:
                            if query_temp[u][z] != 'None':
                                if query_temp[u][z] != '':
                                    eval_biz_info = json.dumps(query_temp[u][z])
                                    eval_biz_info = json.loads(eval_biz_info)
                                    eval_biz_info = eval(eval_biz_info)
                                    if 'role_name' in eval_biz_info:
                                        tmprole_name = eval_biz_info['role_name']
                                    if 'dept_name' in eval_biz_info:
                                        tmpdept_name = eval_biz_info['dept_name']
                                    if 'role_level' in eval_biz_info:
                                        tmprole_level = eval_biz_info['role_level']
                                    # eval_biz_info
                                    # print(eval_biz_info)
                                    if 'dept_name' in eval_biz_info:            
                                        tmp_biz_info = {
                                            'tax_id':eval_biz_info['id_card_num'],
                                            'role_name' : tmprole_name,
                                            'dept_name' : tmpdept_name,
                                            'role_level' : tmprole_level               
                                        }                                
                                    elif 'dept_name' not in eval_biz_info:
                                        tmp_biz_info = {
                                            'tax_id':eval_biz_info['id_card_num'],
                                            'role_name' : tmprole_name,
                                            'dept_name' : [],
                                            'role_level' : tmprole_level              
                                        }
                    
                    if z == 3:
                        tmptime_update = (query_temp[u][z])
                        tmptime_update_string = str(query_temp[u][z])
                        th_dateTime_2_last = convert_datetime_TH_2(int(tmptime_update.timestamp()))
                        ts = int(time.time())
                        date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                        year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                        datetime_display = int(tmptime_update.timestamp())
                        date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                        yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                        time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                        old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                        if date_time_today == date_time_db:
                            date_last_display_show = time_show_db
                        else:
                            if year_today == yar_db:
                                date_last_display_show = convert_datetime_TH_2_display(datetime_display)
                            else:
                                date_last_display_show = old_year
                        
                    dateTime_String = tmp_send_time
                    th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                    ts = int(time.time())
                    date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                    year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                    datetime_display = int(dateTime_String.timestamp())
                    date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                    yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                    time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                    old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                    if date_time_today == date_time_db:
                        date_display_show = time_show_db
                    else:
                        if year_today == yar_db:
                            date_display_show = convert_datetime_TH_2_display(datetime_display)
                        else:
                            date_display_show = old_year
                # print(email_step_sum_w)
                if tmp_status_group == True:
                    for ui in range(len(tmpstepnum)):
                        intstepnum = tmpstepnum[ui] - 1
                        try:
                            for w in range(len(email_step_sum_w[intstepnum])):
                                tmp_req_email.append(email_step_sum_w[intstepnum][w])
                        except Exception as e:
                            tmp_req_email = []
                list_arr.append({
                    'group_email':tmp_req_email,
                    'group_id':None,
                    'group_status':tmp_status_group,
                    'sidCode':tmp_sicode,
                    'document_name':documentName,
                    'document_type':tmp_document_type,
                    'document_urgent':documentUrgentType,
                    'document_urgent_string':documentUrgentString,
                    'dateTime_String':str(dateTime_String).split('+')[0],
                    'dateTime_String_TH_1':th_dateTime_2,
                    'dateTime_display':date_display_show,
                    'document_id':tmp_document_id,
                    'stamp_all':tmp_sign_page_options,
                    'options_page_document':tmp_options_page,
                    'max_step':tmpstepmax,
                    'step_now':tmpstepnow,
                    # 'dateTime_String_TH_2':th_dateTime_2,
                    'date_String':str(dateTime_String).split(' ')[0],
                    'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                    'status_file_code':tmpdocument_status,
                    'status_file_string':res_status_file_string,
                    'dateTime':int(dateTime_String.timestamp()),
                    'tracking_id':tmp_tracking_id,
                    'sender_name':tmp_sender_name,
                    'sender_email':tmp_sender_email,
                    'file_name':tmp_file_name,
                    'document_business':tmp_biz_info,
                    'group':status_groupid,
                    'update_last':tmptime_update,
                    'update_last_String_TH_1':th_dateTime_2_last,
                    'update_last_display':date_last_display_show,
                    'update_last_String':tmptime_update_string,
                    # 'importance':importance,
                    # 'importance_string':importance_string,
                    # 'last_digitsign':last_digitsign,
                    # 'time_expire':expiry_date
                })
            list_arr = sorted(list_arr, key=lambda k: k['dateTime'], reverse=True)
            json_Data['Document_Details'] = list_arr
                    # arr.append(tmp_dict_json)
            return {'result':'OK','messageText':json_Data}
            
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}

    def select_dashboard_recipient_v6_new_limitoffset(self,emailUser,limit,offset,group_status=None,tmptimeapprove=None,timestamp=None):
        self.emailUser = emailUser
        self.timestamp = timestamp
        if limit != '':
            self.limit = int(limit)
        else:
            self.limit = ''
        if offset != '':
            self.offset = int(offset)
        else:
            self.offset = ''
        self.group_status =  group_status   
        if group_status != None:
            self.group_status = group_status
        self.tmptimeapprove = None
        if tmptimeapprove != None:
            self.tmptimeapprove = tmptimeapprove
        if self.timestamp != None:
            self.timestamp = timestamp
            timestamp_to_date = datetime.datetime.fromtimestamp(self.timestamp)
        sid_list = []
        sid_list_email = []
        json_Data = {}
        list_arr = []
        list_json = []
        arr_email_document = []
        tmp_req_email = []
        email_step_sum_w = []
        try:
            tmp_list = []             
            count_rowDocument = 0
            count_rowDocument_StatusActive = 0
            count_rowDocument_StatusReject = 0
            count_rowDocument_StatusCancel = 0
            statusFile_count_approve = 0
            statusFile_count_pendding = 0
            statusFile_count_reject = 0
            statusFile_count_wait = 0
            list_temp_query = []
            tmp_sid_code_list = []
            arr_gruop = []
            arr_group_sid = []
            tmp_arr_sid = []
            tmp_group_id = None
            json_Data = {}
            str_time = (time.time())
            maxTimestamp = int(time.time())
            tmplast_timestamp = []
            tmpstatus = 'ACTIVE'
            search = "%'{}'%".format(self.emailUser)
            sql = ''' select
                    tb_send_detail.send_time AS "dateTime_String",
                    tb_send_detail.status AS "status",
                    tb_send_detail.sender_name AS "sender_name",
                    tb_send_detail.sender_email AS "sender_email",
                    tb_send_detail.sender_position AS "type",
                    tb_send_detail.file_name AS "file_name",
                    tb_send_detail.tracking_id AS "tracking_id",
                    tb_send_detail.step_code AS "template_code",
                    tb_send_detail.step_data_sid AS "sidCode",
                    tb_send_detail.doc_id AS "document_id",
                    tb_send_detail.status_details AS "status_details",
                    tb_send_detail.document_status AS "status_doc",
                    tb_send_detail.group_id AS "group_id",
                    tb_send_detail.stepnow AS "step_now",
                    tb_send_detail.stepmax AS "max_step",
	                tb_send_detail.recipient_email AS "recipient_email",
                    tb_doc_detail.timest AS "dateTime",
                    tb_doc_detail."documentJson" AS "documentJson",
                    tb_doc_detail."documentType" AS "document_type",
                    tb_doc_detail.urgent_type AS "document_urgent",
                    tb_doc_detail.digit_sign AS "digit_sign",
                    tb_doc_detail.sign_page_options AS "stamp_all",
                    tb_doc_detail.options_page AS "options_page_document",
                    tb_doc_detail.data_document AS "datadoc",
                    tb_step_data.biz_info AS "biz_info",
                    tb_step_data.update_time AS "update_last" 
                FROM
                    tb_send_detail
                    JOIN tb_doc_detail ON tb_doc_detail.step_id = tb_send_detail.step_data_sid
                    JOIN tb_step_data ON tb_step_data.sid = tb_send_detail.step_data_sid
                '''
            where = ''' WHERE tb_send_detail.status = :status AND tb_send_detail.recipient_email LIKE :email '''
            if self.group_status == True:
                where += ''' AND (tb_send_detail.group_id IS NULL OR tb_send_detail.group_id=:group_id_sym) '''
            orderby = ''' ORDER BY tb_send_detail.send_time DESC LIMIT :lim OFFSET :off '''
            sql += where + orderby
            # print(sql)
            with slave.connect() as connection:
                resultsql = connection.execute(text(sql),status=tmpstatus,email=search,lim=self.limit,off=self.offset,tmpgroup_id=None,group_id_sym='[]')
            connection.close()
            tmp_query = [dict(row) for row in resultsql]
            for n in range(len(tmp_query)):
                tmpdata = tmp_query[n]     
                arr_email_document = []           
                try:
                    tmpdata['sender_name'] = eval(tmpdata['sender_name'])
                except Exception as e:
                    tmpdata['sender_name'] = tmpdata['sender_name']
                email_step_sum = tmpdata['recipient_email']
                if email_step_sum != None:
                    email_step_sum = eval(email_step_sum)
                tmpstatus_detail = tmpdata['status_details']
                tmpdocument_status = tmpdata['status_doc']
                tmpstepnow = tmpdata['step_now']
                tmp_groupid = tmpdata['group_id']
                tmp_send_time = tmpdata['dateTime_String']
                status_groupid = False
                if tmp_groupid != None:
                    if tmp_groupid != '':
                        tmp_groupid = eval(tmp_groupid)
                        if len(tmp_groupid) != 0:
                            status_groupid = True
                if tmpstepnow != None:
                    tmpstepnow = int(tmpstepnow)
                tmpstepmax = tmpdata['max_step']
                if tmpstepmax != None:
                    tmpstepmax = int(tmpstepmax)
                if tmpstatus_detail != None:
                    tmpstatus_detail = eval(tmpstatus_detail)                            
                    for z in range(len(tmpstatus_detail)):
                        email_step_sum_w.append(tmpstatus_detail[z]['email'])
                    if tmpdocument_status == 'N':
                        for x in range(len(tmpstatus_detail)):
                            if self.emailUser not in arr_email_document:
                                if self.emailUser in tmpstatus_detail[x]['email']:
                                    if tmpstatus_detail[x]['step_status_code'] == 'W':
                                        arr_email_document.append(self.emailUser)
                                        tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                                        break
                                    else:
                                        tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                if tmpdocument_status == 'Z':
                    res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                elif tmpdocument_status == 'W':
                    res_status_file_string = 'รอคุณอนุมัติ'
                elif tmpdocument_status == 'N':
                    res_status_file_string = 'กำลังดำเนินการ'
                elif tmpdocument_status == 'R':
                    res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                else:
                    res_status_file_string = ''
                tmpdata['status_file_code'] = tmpdocument_status
                tmpdata['status_file_string'] = res_status_file_string
                tmp_options_page = []
                if tmpdata['options_page_document'] != None:
                    if tmpdata['options_page_document'] != '':
                        tmp_options_page = [eval(tmpdata['options_page_document'])]
                else:
                    tmp_options_page = []
                tmpdata['options_page_document'] = tmp_options_page
                if len(tmp_options_page) != 0:
                    tmp_status_group = False
                    if status_groupid == True:
                        if len(tmp_options_page) != 0:
                            if 'group_detail' in tmp_options_page[0]:
                                tmp_group_detail = tmp_options_page[0]['group_detail']
                                if 'group_status' in tmp_group_detail:
                                    if tmp_group_detail['group_status'] == True:
                                        tmp_status_group = True
                                        tmpstepnum = tmp_group_detail['step_num']
                if tmpdata['documentJson'] != None:
                    documentJson_result = eval(tmpdata['documentJson'])
                    tmpdata['document_name'] = documentJson_result['document_name']
                    tmpdata['document_type'] = documentJson_result['document_type']
                else:
                    documentName = None
                    documentType = None
                if tmpdata['document_urgent'] != None:
                    documentUrgentType = tmpdata['document_urgent']
                    if documentUrgentType == 'I':
                        tmpdata['document_urgent_string'] = 'ด่วนมาก'
                    elif documentUrgentType == 'U':
                        tmpdata['document_urgent_string'] = 'ด่วน'
                    elif documentUrgentType == 'M':
                        tmpdata['document_urgent_string'] = 'ปกติ'
                tmp_biz_info = None
                tmprole_name = None
                tmpdept_name = None
                tmprole_level = None
                if tmpdata['biz_info'] != None:
                    if tmpdata['biz_info'] != 'None':
                        if tmpdata['biz_info'] != '':
                            eval_biz_info = json.dumps(tmpdata['biz_info'])
                            eval_biz_info = json.loads(eval_biz_info)
                            eval_biz_info = eval(eval_biz_info)
                            if 'role_name' in eval_biz_info:
                                tmprole_name = eval_biz_info['role_name']
                            if 'dept_name' in eval_biz_info:
                                tmpdept_name = eval_biz_info['dept_name']
                            if 'role_level' in eval_biz_info:
                                tmprole_level = eval_biz_info['role_level']
                            # eval_biz_info
                            # print(eval_biz_info)
                            if 'dept_name' in eval_biz_info:            
                                tmp_biz_info = {
                                    'tax_id':eval_biz_info['id_card_num'],
                                    'role_name' : tmprole_name,
                                    'dept_name' : tmpdept_name,
                                    'role_level' : tmprole_level               
                                }                                
                            elif 'dept_name' not in eval_biz_info:
                                tmp_biz_info = {
                                    'tax_id':eval_biz_info['id_card_num'],
                                    'role_name' : tmprole_name,
                                    'dept_name' : [],
                                    'role_level' : tmprole_level              
                                }
                tmpdata['document_business'] = tmp_biz_info
                tmptime_update = (tmpdata['update_last'])
                tmptime_update_timestamp = int(tmptime_update.timestamp())
                tmptime_update_string = str(tmptime_update)
                th_dateTime_2_last = convert_datetime_TH_2(int(tmptime_update.timestamp()))
                ts = int(time.time())
                date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                datetime_display_update = int(tmptime_update.timestamp())
                date_time_db = datetime.datetime.fromtimestamp(datetime_display_update).strftime('%Y-%m-%d')
                yar_db = datetime.datetime.fromtimestamp(datetime_display_update).strftime('%Y')
                time_show_db = datetime.datetime.fromtimestamp(datetime_display_update).strftime('%H:%M')
                old_year = datetime.datetime.fromtimestamp(datetime_display_update).strftime('%d/%m/%Y')
                if date_time_today == date_time_db:
                    date_last_display_show = time_show_db
                else:
                    if year_today == yar_db:
                        date_last_display_show = convert_datetime_TH_2_display(datetime_display_update)
                    else:
                        date_last_display_show = old_year
                
                dateTime_String = tmp_send_time
                th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                ts = int(time.time())
                date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                datetime_display = int(dateTime_String.timestamp())
                date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                if date_time_today == date_time_db:
                    date_display_show = time_show_db
                else:
                    if year_today == yar_db:
                        date_display_show = convert_datetime_TH_2_display(datetime_display)
                    else:
                        date_display_show = old_year
                # print(email_step_sum_w)
                if tmp_status_group == True:
                    for ui in range(len(tmpstepnum)):
                        intstepnum = tmpstepnum[ui] - 1
                        try:
                            for w in range(len(email_step_sum_w[intstepnum])):
                                tmp_req_email.append(email_step_sum_w[intstepnum][w])
                        except Exception as e:
                            tmp_req_email = []
                tmpdata['date_String'] = str(dateTime_String).split(' ')[0]
                tmpdata['time_String'] = str(dateTime_String).split(' ')[1].split('+')[0]
                tmpdata['dateTime_String'] = str(dateTime_String).split('+')[0]
                tmpdata['dateTime_String_TH_1'] = th_dateTime_2
                tmpdata['dateTime_display'] = date_display_show
                tmpdata['dateTime'] = int(tmpdata['dateTime'])
                tmpdata['group_status'] = tmp_status_group
                tmpdata['step_now'] = int(tmpdata['step_now'])
                tmpdata['max_step'] = int(tmpdata['max_step'])
                tmpdata['update_last_String'] = str(tmptime_update).split('+')[0]
                tmpdata['update_last_String_TH_1'] = th_dateTime_2_last
                tmpdata['update_last_TimeStamp'] = tmptime_update_timestamp
                tmpdata['update_last_display'] = date_last_display_show
                tmplast_timestamp.append(tmptime_update_timestamp)
                del tmpdata['documentJson']
                del tmpdata['biz_info']
                del tmpdata['status_details']
                del tmpdata['recipient_email']
                del tmpdata['group_id']
                del tmpdata['datadoc']
            if len(tmplast_timestamp) > 0:
                maxTimestamp = (max(tmplast_timestamp))
            tmp_query = sorted(tmp_query, key=lambda k: k['dateTime'], reverse=True)
            if self.tmptimeapprove == True:
                tmp_query = sorted(tmp_query, key=lambda k: k['update_last_TimeStamp'], reverse=True)
            json_Data['Document_Details'] = tmp_query

            return {'result':'OK','messageText':json_Data,'timestamp':maxTimestamp}
            if self.limit != '' and self.offset != '':
                if self.group_status == None:
                    if self.tmptimeapprove == False:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .order_by(desc(paper_lesssender.send_time))\
                            .limit(self.limit)\
                            .offset(self.offset)\
                            .all()
                    else:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .order_by(desc(paper_lessdatastep.update_time))\
                            .limit(self.limit)\
                            .offset(self.offset)\
                            .all()
                elif self.group_status == True:
                    if self.tmptimeapprove == False:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .order_by(desc(paper_lesssender.send_time))\
                            .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                            .limit(self.limit)\
                            .offset(self.offset)\
                            .all()
                    else:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .order_by(desc(paper_lessdatastep.update_time))\
                            .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                            .limit(self.limit)\
                            .offset(self.offset)\
                            .all()
                elif self.group_status == False:
                    if self.tmptimeapprove == False:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .order_by(desc(paper_lesssender.send_time))\
                            .limit(self.limit)\
                            .offset(self.offset)\
                            # .all()
                        print(query_temp)
                    else:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                            .order_by(desc(paper_lessdatastep.update_time))\
                            .limit(self.limit)\
                            .offset(self.offset)\
                            # .all()
                        print(query_temp)
            else:
                if self.tmptimeapprove == False:
                    query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                        .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                        .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                        .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                        .order_by(desc(paper_lesssender.send_time))\
                        .all()
                else:
                    query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info,paper_lessdatastep.update_time)\
                        .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                        .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                        .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search))\
                        .order_by(desc(paper_lessdatastep.update_time))\
                        .all()                                                                                                                                                                                                                                                                                                                             
            end_time = (time.time())
            arr = []
            for u in range(len(query_temp)):
                arr_email_document = []
                tmp_req_email = []
                email_step_sum_w = []
                for z in range(len(query_temp[u])):
                    if z == 0:
                        tmp_dict_json = query_temp[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state']) 
                        tmp_sicode = tmp_dict_json['step_data_sid']
                        tmp_sid_code_list.append(tmp_sicode)
                        tmp_send_time = tmp_dict_json['send_time']
                        tmp_document_id = tmp_dict_json['doc_id']
                        tmp_tracking_id = tmp_dict_json['tracking_id']
                        try:
                            tmp_sender_name = eval(tmp_dict_json['sender_name'])
                        except Exception as e:
                            tmp_sender_name = tmp_dict_json['sender_name']
                        tmp_sender_email = tmp_dict_json['sender_email']
                        tmp_file_name = tmp_dict_json['file_name']
                        tmp_groupid = tmp_dict_json['group_id']
                        email_step_sum = tmp_dict_json['recipient_email']
                        # print(tmp_dict_json)
                        # expiry_date = tmp_dict_json['time_expire']
                        # importance = tmp_dict_json['importance']
                        # if importance == None:
                        #     importance_string = 'ไม่กำหนดความสำคัญ'
                        # elif importance == 'None':
                        #     importance_string = 'ไม่กำหนดความสำคัญ'
                        # elif importance == '0':
                        #     importance_string = 'สำคัญมาก'
                        # elif importance == '1':
                        #     importance_string = 'สำคัญปานกลาง'
                        # elif importance == '2':
                        #     importance_string = 'สำคัญปกติ'                       

                        # eform_id = tmp_dict_json['eform_id']
                        # last_digitsign = tmp_dict_json['last_digitsign']
                        # if last_digitsign == None:
                        #     last_digitsign = True 
                        if email_step_sum != None:
                            email_step_sum = eval(email_step_sum)
                        # print(email_step_sum)
                        tmpstatus_detail = tmp_dict_json['status_details']
                        tmpdocument_status = tmp_dict_json['document_status']
                        tmpstepnow = tmp_dict_json['stepnow']
                        status_groupid = False
                        if tmp_groupid != None:
                            if tmp_groupid != '':
                                tmp_groupid = eval(tmp_groupid)
                                if len(tmp_groupid) != 0:
                                    status_groupid = True
                        if tmpstepnow != None:
                            tmpstepnow = int(tmpstepnow)
                        tmpstepmax = tmp_dict_json['stepmax']
                        if tmpstepmax != None:
                            tmpstepmax = int(tmpstepmax)
                        if tmpstatus_detail != None:
                            tmpstatus_detail = eval(tmpstatus_detail)                            
                            for z in range(len(tmpstatus_detail)):
                                email_step_sum_w.append(tmpstatus_detail[z]['email'])

                            if tmpdocument_status == 'N':
                                for x in range(len(tmpstatus_detail)):
                                    # print(tmp_sicode)
                                    # print(tmpstatus_detail[x])
                                    # email_step_sum_w.append(tmpstatus_detail[x]['email'])
                                    if self.emailUser not in arr_email_document:
                                        if self.emailUser in tmpstatus_detail[x]['email']:
                                            if tmpstatus_detail[x]['step_status_code'] == 'W':
                                                arr_email_document.append(self.emailUser)
                                                tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                                                break
                                            else:
                                                tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                        # print(email_step_sum_w)
                        if tmpdocument_status == 'Z':
                            res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                        elif tmpdocument_status == 'W':
                            res_status_file_string = 'รอคุณอนุมัติ'
                        elif tmpdocument_status == 'N':
                            res_status_file_string = 'กำลังดำเนินการ'
                        elif tmpdocument_status == 'R':
                            res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                        else:
                            res_status_file_string = ''
                                            # else:

                        # print(tmpstatus_detail)
                    if z == 1:
                        tmp_document_type = None
                        tmp_dict_json = query_temp[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state'])
                        tmp_sign_page_options = tmp_dict_json['sign_page_options']
                        tmp_document_type = tmp_dict_json['documentType']
                        tmp_options_page = []
                        if tmp_dict_json['options_page'] != None:
                            if tmp_dict_json['options_page'] != '':
                            # print(tmp_dict_json['options_page'],tmp_document_id)
                                tmp_options_page = [eval(tmp_dict_json['options_page'])]
                        else:
                            tmp_options_page = []
                        if len(tmp_options_page) != 0:
                            # print(tmp_options_page[0]['group_detail'])
                            tmp_status_group = False
                            if status_groupid == True:
                                if len(tmp_options_page) != 0:
                                    if 'group_detail' in tmp_options_page[0]:
                                        tmp_group_detail = tmp_options_page[0]['group_detail']
                                        if 'group_status' in tmp_group_detail:
                                            if tmp_group_detail['group_status'] == True:
                                                tmp_status_group = True
                                                tmpstepnum = tmp_group_detail['step_num']
                                        # if 'step_num' in tmp_group_detail:
                                        #     tmp_status_group = True
                                        #     tmp_group_stepnum = tmp_group_detail['step_num']
                            # if 'group_detail' in tmp_options_page[0]:
                            #     if 'group_status' in tmp_options_page[0]['group_detail']:
                            #         tmpgroupdetails = tmp_options_page[0]['group_detail']
                            #         if tmpgroupdetails['group_status'] == True:
                            #             tmpstepnum = tmpgroupdetails['step_num']
                                        # print(tmpstepnum)
                        if tmp_dict_json['documentJson'] != None:
                            documentJson_result = eval(tmp_dict_json['documentJson'])
                            documentName = documentJson_result['document_name']
                            documentType = documentJson_result['document_type']
                        else:
                            documentName = None
                            documentType = None
                        if tmp_dict_json['urgent_type'] != None:
                            documentUrgentType = tmp_dict_json['urgent_type']
                            if documentUrgentType == 'I':
                                documentUrgentString = 'ด่วนมาก'
                            elif documentUrgentType == 'U':
                                documentUrgentString = 'ด่วน'
                            elif documentUrgentType == 'M':
                                documentUrgentString = 'ปกติ'
                    tmp_biz_info = None
                    tmprole_name = None
                    tmpdept_name = None
                    tmprole_level = None
                    if z == 2:
                        if query_temp[u][z] != None:
                            if query_temp[u][z] != 'None':
                                if query_temp[u][z] != '':
                                    eval_biz_info = json.dumps(query_temp[u][z])
                                    eval_biz_info = json.loads(eval_biz_info)
                                    eval_biz_info = eval(eval_biz_info)
                                    if 'role_name' in eval_biz_info:
                                        tmprole_name = eval_biz_info['role_name']
                                    if 'dept_name' in eval_biz_info:
                                        tmpdept_name = eval_biz_info['dept_name']
                                    if 'role_level' in eval_biz_info:
                                        tmprole_level = eval_biz_info['role_level']
                                    # eval_biz_info
                                    # print(eval_biz_info)
                                    if 'dept_name' in eval_biz_info:            
                                        tmp_biz_info = {
                                            'tax_id':eval_biz_info['id_card_num'],
                                            'role_name' : tmprole_name,
                                            'dept_name' : tmpdept_name,
                                            'role_level' : tmprole_level               
                                        }                                
                                    elif 'dept_name' not in eval_biz_info:
                                        tmp_biz_info = {
                                            'tax_id':eval_biz_info['id_card_num'],
                                            'role_name' : tmprole_name,
                                            'dept_name' : [],
                                            'role_level' : tmprole_level              
                                        }
                    
                    if z == 3:
                        tmptime_update = (query_temp[u][z])
                        tmptime_update_timestamp = int(tmptime_update.timestamp())
                        tmptime_update_string = str(query_temp[u][z])
                        th_dateTime_2_last = convert_datetime_TH_2(int(tmptime_update.timestamp()))
                        ts = int(time.time())
                        date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                        year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                        datetime_display_update = int(tmptime_update.timestamp())
                        date_time_db = datetime.datetime.fromtimestamp(datetime_display_update).strftime('%Y-%m-%d')
                        yar_db = datetime.datetime.fromtimestamp(datetime_display_update).strftime('%Y')
                        time_show_db = datetime.datetime.fromtimestamp(datetime_display_update).strftime('%H:%M')
                        old_year = datetime.datetime.fromtimestamp(datetime_display_update).strftime('%d/%m/%Y')
                        if date_time_today == date_time_db:
                            date_last_display_show = time_show_db
                        else:
                            if year_today == yar_db:
                                date_last_display_show = convert_datetime_TH_2_display(datetime_display_update)
                            else:
                                date_last_display_show = old_year
                        
                    dateTime_String = tmp_send_time
                    th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                    ts = int(time.time())
                    date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                    year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                    datetime_display = int(dateTime_String.timestamp())
                    date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                    yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                    time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                    old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                    if date_time_today == date_time_db:
                        date_display_show = time_show_db
                    else:
                        if year_today == yar_db:
                            date_display_show = convert_datetime_TH_2_display(datetime_display)
                        else:
                            date_display_show = old_year
                # print(email_step_sum_w)
                if tmp_status_group == True:
                    for ui in range(len(tmpstepnum)):
                        intstepnum = tmpstepnum[ui] - 1
                        try:
                            for w in range(len(email_step_sum_w[intstepnum])):
                                tmp_req_email.append(email_step_sum_w[intstepnum][w])
                        except Exception as e:
                            tmp_req_email = []
                # sender_name_eng = find_name_surename_by_username(tmp_sender_email)
                list_arr.append({
                    'group_email':tmp_req_email,
                    'group_id':None,
                    'group_status':tmp_status_group,
                    'sidCode':tmp_sicode,
                    'document_name':documentName,
                    'document_type':tmp_document_type,
                    'document_urgent':documentUrgentType,
                    'document_urgent_string':documentUrgentString,
                    'dateTime_String':str(dateTime_String).split('+')[0],
                    'dateTime_String_TH_1':th_dateTime_2,
                    'dateTime_display':date_display_show,
                    'document_id':tmp_document_id,
                    'stamp_all':tmp_sign_page_options,
                    'options_page_document':tmp_options_page,
                    'max_step':tmpstepmax,
                    'step_now':tmpstepnow,
                    # 'dateTime_String_TH_2':th_dateTime_2,
                    'date_String':str(dateTime_String).split(' ')[0],
                    'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                    'status_file_code':tmpdocument_status,
                    'status_file_string':res_status_file_string,
                    'dateTime':int(dateTime_String.timestamp()),
                    'tracking_id':tmp_tracking_id,
                    'sender_name':tmp_sender_name,
                    'sender_email':tmp_sender_email,
                    'file_name':tmp_file_name,
                    'document_business':tmp_biz_info,
                    'group':status_groupid,
                    'update_last':tmptime_update,
                    'update_last_String_TH_1':th_dateTime_2_last,
                    'update_last_display':date_last_display_show,
                    'update_last_String':tmptime_update_string,
                    'update_last_TimeStamp':tmptime_update_timestamp,
                    # 'sender_name_eng':sender_name_eng
                    # 'importance':importance,
                    # 'importance_string':importance_string,
                    # 'last_digitsign':last_digitsign,
                    # 'time_expire':expiry_date
                })
            list_arr = sorted(list_arr, key=lambda k: k['dateTime'], reverse=True)
            if self.tmptimeapprove == True:
                list_arr = sorted(list_arr, key=lambda k: k['update_last_TimeStamp'], reverse=True)
            json_Data['Document_Details'] = list_arr
                    # arr.append(tmp_dict_json)
            return {'result':'OK','messageText':json_Data}
            
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}
        finally:
            db.session.close()

    def select_dashboard_recipient_v6_list(self,emailUser,datetime_start,datetime_end,tmptimeapprove=None,timestamp=None):
        self.emailUser = emailUser
        self.datetime_start = datetime_start
        self.datetime_end = datetime_end
        self.tmptimeapprove = tmptimeapprove
        self.timestamp = timestamp
        if self.tmptimeapprove != None:
            self.tmptimeapprove = tmptimeapprove
        if self.timestamp != None:
            self.timestamp = timestamp
            timestamp_to_date = datetime.datetime.fromtimestamp(self.timestamp)
        sid_list = []
        sid_list_email = []
        json_Data = {}
        list_arr = []
        list_json = []
        try:
            tmp_list = []             
            count_rowDocument = 0
            count_rowDocument_StatusActive = 0
            count_rowDocument_StatusReject = 0
            count_rowDocument_StatusCancel = 0
            statusFile_count_approve = 0
            statusFile_count_pendding = 0
            statusFile_count_reject = 0
            statusFile_count_wait = 0
            list_temp_query = []
            tmp_sid_code_list = []
            arr_gruop = []
            arr_group_sid = []
            tmp_arr_sid = []
            tmp_group_id = None
            str_time = (time.time())
            date_start_tmp = datetime.datetime.fromtimestamp(self.datetime_start)
            date_end_tmp = datetime.datetime.fromtimestamp(self.datetime_end)
            print ('date_start_tmp:',date_start_tmp)
            print ('date_end_tmp:',date_end_tmp)
            search_email = "%'" +self.emailUser+ "'%"
            if self.timestamp == None:
                if self.tmptimeapprove == True:
                    query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep,paper_lessdatastep.update_time)\
                        .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                        .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                        .filter(or_(and_(paper_lessdatastep.update_time <= date_end_tmp,paper_lessdatastep.update_time >= date_start_tmp),and_(paper_lesssender.send_time <= date_end_tmp,paper_lesssender.send_time >= date_start_tmp)))\
                        .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search_email))\
                        .order_by(desc(paper_lessdatastep.update_time))\
                        .all() 
                else:
                    query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep,paper_lessdatastep.update_time)\
                        .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                        .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                        .filter(or_(and_(paper_lessdatastep.update_time <= date_end_tmp,paper_lessdatastep.update_time >= date_start_tmp),and_(paper_lesssender.send_time <= date_end_tmp,paper_lesssender.send_time >= date_start_tmp)))\
                        .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search_email))\
                        .order_by(desc(paper_lesssender.send_time))\
                        .all() 
            elif self.timestamp != None:
                print ('WITH TIME STAMP')
                if self.tmptimeapprove == True:
                    query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep,paper_lessdatastep.update_time)\
                        .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                        .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                        .filter(or_(and_(paper_lessdatastep.update_time >= timestamp_to_date),and_(paper_lesssender.send_time >= timestamp_to_date)))\
                        .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search_email))\
                        .order_by(desc(paper_lessdatastep.update_time))\
                        .all() 
                else:
                    query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep,paper_lessdatastep.update_time)\
                        .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                        .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                        .filter(or_(and_(paper_lessdatastep.update_time >= timestamp_to_date),and_(paper_lesssender.send_time >= timestamp_to_date)))\
                        .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.like(search_email))\
                        .order_by(desc(paper_lesssender.send_time))\
                        .all() 
            # print(query_temp)
            end_time = (time.time())
            # print(end_time -str_time)
            arr = []
            for u in range(len(query_temp)):
                arr_email_document = []
                tmp_req_email = []
                for z in range(len(query_temp[u])):
                    if z == 0:
                        tmp_dict = query_temp[u][2].__dict__
                        update_time = tmp_dict['update_time']
                        tmp_dict_json = query_temp[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state']) 
                        tmp_sicode = tmp_dict_json['step_data_sid']
                        tmp_sid_code_list.append(tmp_sicode)
                        tmp_send_time = tmp_dict_json['send_time']
                        # print(date_start_tmp)
                        # if str(date_start_tmp) >= str(tmp_send_time).split('+')[0] and str(tmp_send_time).split('+')[0] <= str(date_end_tmp):
                        #     tmp_timepaper = 'new'
                        #     if str(update_time).split('+')[0] == ''
                        # print(str(tmp_send_time).split('+')[0].split(':')[0])
                        if str(tmp_send_time).split('+')[0] == str(update_time).split('+')[0]:
                            tmp_timepaper = 'new'
                        else:
                            tmp_timepaper = 'update'
                        tmp_document_id = tmp_dict_json['doc_id']
                        tmp_tracking_id = tmp_dict_json['tracking_id']
                        try:
                            tmp_sender_name = eval(tmp_dict_json['sender_name'])
                        except Exception as e:
                            tmp_sender_name = tmp_dict_json['sender_name']
                        tmp_sender_email = tmp_dict_json['sender_email']
                        tmp_file_name = tmp_dict_json['file_name']
                        tmp_groupid = tmp_dict_json['group_id']
                        tmpstatus_detail = tmp_dict_json['status_details']
                        tmpdocument_status = tmp_dict_json['document_status']
                        tmpstepnow = tmp_dict_json['stepnow']
                        if tmpstepnow != None:
                            tmpstepnow = int(tmpstepnow)
                        tmpstepmax = tmp_dict_json['stepmax']
                        if tmpstepmax != None:
                            tmpstepmax = int(tmpstepmax)
                        status_groupid = False
                        if tmp_groupid != None:
                            tmp_groupid = eval(tmp_groupid)
                            if len(tmp_groupid) != 0:
                                status_groupid = True
                        if tmpstatus_detail != None:
                            tmpstatus_detail = eval(tmpstatus_detail)
                            if tmpdocument_status == 'N':
                                for x in range(len(tmpstatus_detail)):
                                    # print(tmp_sicode)
                                    # print(tmpstatus_detail[x])
                                    if self.emailUser not in arr_email_document:
                                        if self.emailUser in tmpstatus_detail[x]['email']:
                                            if tmpstatus_detail[x]['step_status_code'] == 'W':
                                                arr_email_document.append(self.emailUser)
                                                tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                                                break
                                            else:
                                                tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                        res_status_file_string = 'อนุมัติแล้ว'
                        if tmpdocument_status == 'Z':
                            res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                        elif tmpdocument_status == 'W':
                            res_status_file_string = 'รอคุณอนุมัติ'
                        elif tmpdocument_status == 'N':
                            res_status_file_string = 'กำลังดำเนินการ'
                        elif tmpdocument_status == 'R':
                            res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                                            # else:

                        # print(tmpstatus_detail)
                    if z == 1:
                        tmp_document_type = None
                        tmp_dict_json = query_temp[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state'])
                        tmp_sign_page_options = tmp_dict_json['sign_page_options']
                        tmp_document_type = tmp_dict_json['documentType']
                        tmp_options_page = []
                        if tmp_dict_json['options_page'] != None:
                            if tmp_dict_json['options_page'] != '':
                            # print(tmp_dict_json['options_page'],tmp_document_id)
                                tmp_options_page = [eval(tmp_dict_json['options_page'])]
                        else:
                            tmp_options_page = []
                        tmp_status_group = False
                        if len(tmp_options_page) != 0:
                            # print(tmp_options_page[0]['group_detail'])
                            
                            if status_groupid == True:
                                if len(tmp_options_page) != 0:
                                    if 'group_detail' in tmp_options_page[0]:
                                        tmp_group_detail = tmp_options_page[0]['group_detail']
                                        if 'group_status' in tmp_group_detail:
                                            if tmp_group_detail['group_status'] == True:
                                                tmp_status_group = True
                                                tmpstepnum = tmp_group_detail['step_num']
                        if tmp_dict_json['documentJson'] != None:
                            documentJson_result = eval(tmp_dict_json['documentJson'])
                            documentName = documentJson_result['document_name']
                            documentType = documentJson_result['document_type']
                        else:
                            documentName = None
                            documentType = None
                        if tmp_dict_json['urgent_type'] != None:
                            documentUrgentType = tmp_dict_json['urgent_type']
                            if documentUrgentType == 'I':
                                documentUrgentString = 'ด่วนมาก'
                            elif documentUrgentType == 'U':
                                documentUrgentString = 'ด่วน'
                            elif documentUrgentType == 'M':
                                documentUrgentString = 'ปกติ'
                    tmp_biz_info_json = None
                    if z == 2:
                        tmp_dict_json = query_temp[u][z].__dict__
                        tmp_biz_info = tmp_dict_json['biz_info']
                        if tmp_biz_info != None:
                            if tmp_biz_info != 'None':
                                
                                eval_biz_info = json.dumps(tmp_biz_info)
                                eval_biz_info = json.loads(eval_biz_info)
                                eval_biz_info = eval(eval_biz_info)
                                # eval_biz_info
                                # print(eval_biz_info)
                                if 'dept_name' in eval_biz_info:            
                                    tmp_biz_info_json = {
                                        'tax_id':eval_biz_info['id_card_num'],
                                        'role_name' : eval_biz_info['role_name'],
                                        'dept_name' : eval_biz_info['dept_name'],
                                        'role_level' : eval_biz_info['role_level']               
                                    }                                
                                elif 'dept_name' not in eval_biz_info:
                                    tmp_biz_info_json = {
                                        'tax_id':eval_biz_info['id_card_num'],
                                        'role_name' : eval_biz_info['role_name'],
                                        'dept_name' : [],
                                        'role_level' : eval_biz_info['role_level']               
                                    }
                        ####################kvang
                        step_now2 = 0
                        step_now = None
                        jsonData_eval = eval(tmp_dict_json['data_json'])
                        tmp_list_step_infomation = []
                        if 'step_num' in jsonData_eval:
                            tmp_step_info = [eval(tmp_dict_json['data_json'])]
                        else:
                            tmp_step_info = eval(tmp_dict_json['data_json'])
                        if 'step_num' in jsonData_eval:
                            tmp_list_step_infomation.append(jsonData_eval)
                            jsonData_eval = tmp_list_step_infomation
                        if 'step_num' in jsonData_eval:
                            pass
                        else:
                            tmp_sum_email = []
                            step_status = ''
                            res_status_file = 'Y'
                            res_status_file_string = ''
                            step_before = ''
                            step_list_before = []
                            step_list_ = []
                            step_list_next = []
                            arr_step_totle = []
                            step_me = ''
                            step_sum_status = []
                            sum_status_step_list = []
                            list_check_step = []
                            step_list_data = []
                            max_step = (len(jsonData_eval))
                            step_infomation = jsonData_eval
                            sum_status_step = []
                            tmp_status_sum = []
                            tmp_acvt_code_sum = []
                            arr_email_list = []
                            email_step_sum = []
                            arr_04_sid = []
                            for i in range(len(step_infomation)):
                                list_check_step = []
                                json_step_info_2 = {}
                                step_list_data = []
                                step_status = []
                                step_email = []
                                tmp_acvt_code = []
                                tmp_keep_status = []
                                tmp_acvt_status = []
                                step_ = step_infomation[i]
                                step_num = step_infomation[i]['step_num']
                                json_step_info_2['step_status'] = ''
                                tmp_step_detail = step_['step_detail']
                                for u in range(len(tmp_step_detail)):
                                    tmp_arr_step_detail = tmp_step_detail[u]
                                    tmp_status = tmp_arr_step_detail['activity_status']
                                    tmp_code = tmp_arr_step_detail['activity_code']
                                    tmp_email = tmp_arr_step_detail['one_email']
                                    for s in range(len(tmp_code)):
                                        if tmp_code[s] == 'A03':
                                            tmp_acvt_code.append(tmp_code[s])
                                            step_status.append(tmp_status[s])
                                            tmp_acvt_status.append(tmp_status[s])
                                            step_email.append(tmp_email)
                                            tmp_sum_email.append(tmp_email)
                                        # if tmp_code[s] == 'A04':
                                        #     tmp_acvt_code.append(tmp_code[s])
                                        #     tmp_acvt_status.append(tmp_status[s])
                                        #     arr_04_sid.append(tmp_sicode)
                                        #     step_email.append(tmp_email)
                                        #     tmp_sum_email.append(tmp_email)
                                email_step_sum.append(step_email)
                                print('email_step_sum',email_step_sum)
                            ##########kvang
                    if z == 3:
                        tmptime_update = (query_temp[u][z])
                        tmptime_update_timestamp = int(tmptime_update.timestamp())
                        tmptime_update_string = str(tmptime_update).split('+')[0]
                        th_dateTime_2_last = convert_datetime_TH_2(int(tmptime_update.timestamp()))
                        # print(th_dateTime_2_last,tmptime_update)
                        ts = int(time.time())
                        date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                        year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                        datetime_display_update = int(tmptime_update.timestamp())
                        date_time_db = datetime.datetime.fromtimestamp(datetime_display_update).strftime('%Y-%m-%d')
                        yar_db = datetime.datetime.fromtimestamp(datetime_display_update).strftime('%Y')
                        time_show_db = datetime.datetime.fromtimestamp(datetime_display_update).strftime('%H:%M')
                        old_year = datetime.datetime.fromtimestamp(datetime_display_update).strftime('%d/%m/%Y')
                        if date_time_today == date_time_db:
                            date_last_display_show = time_show_db
                        else:
                            if year_today == yar_db:
                                date_last_display_show = convert_datetime_TH_2_display(datetime_display_update)
                            else:
                                date_last_display_show = old_year

                    dateTime_String = tmp_send_time
                    th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                    ts = int(time.time())
                    date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                    year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                    datetime_display = int(dateTime_String.timestamp())
                    date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                    yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                    time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                    old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                    if date_time_today == date_time_db:
                        date_display_show = time_show_db
                    else:
                        if year_today == yar_db:
                            date_display_show = convert_datetime_TH_2_display(datetime_display)
                        else:
                            date_display_show = old_year
                # print('tmp_status_group',tmp_status_group)
                if tmp_status_group == True:
                    # print('tmpstepnum',tmpstepnum)
                    for ui in range(len(tmpstepnum)):
                        intstepnum = tmpstepnum[ui] - 1
                        # print('intstepnum',intstepnum)
                        # print(email_step_sum)
                        tmp_req_email.append(email_step_sum[intstepnum])
                sender_name_eng = find_name_surename_by_username(tmp_sender_email)
                list_arr.append({
                    'group_email':tmp_req_email,
                    'group_id':None,
                    'group_status':tmp_status_group,
                    'sidCode':tmp_sicode,
                    'document_name':documentName,
                    'document_type':tmp_document_type,
                    'document_urgent':documentUrgentType,
                    'document_urgent_string':documentUrgentString,
                    'dateTime_String':str(dateTime_String).split('+')[0],
                    'dateTime_String_TH_1':th_dateTime_2,
                    'dateTime_display':date_display_show,
                    'document_id':tmp_document_id,
                    'stamp_all':tmp_sign_page_options,
                    'options_page_document':tmp_options_page,
                    'max_step':tmpstepmax,
                    'step_now':tmpstepnow,
                    # 'dateTime_String_TH_2':th_dateTime_2,
                    'date_String':str(dateTime_String).split(' ')[0],
                    'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                    'status_file_code':tmpdocument_status,
                    'status_file_string':res_status_file_string,
                    'dateTime':int(dateTime_String.timestamp()),
                    'tracking_id':tmp_tracking_id,
                    'sender_name':tmp_sender_name,
                    'sender_email':tmp_sender_email,
                    'file_name':tmp_file_name,
                    'document_business':tmp_biz_info_json,
                    'time_paper': tmp_timepaper,
                    'update_last':tmptime_update,
                    'update_last_String_TH_1':th_dateTime_2_last,
                    'update_last_display':date_last_display_show,
                    'update_last_String':tmptime_update_string,
                    'update_last_TimeStamp':tmptime_update_timestamp,
                    'sender_name_eng':sender_name_eng
                })
            list_arr = sorted(list_arr, key=lambda k: k['dateTime'], reverse=True)
            if self.tmptimeapprove == True:
                list_arr = sorted(list_arr, key=lambda k: k['update_last_TimeStamp'], reverse=True)
            json_Data['Document_Details'] = list_arr
                    # arr.append(tmp_dict_json)
            return {'result':'OK','messageText':json_Data}
            #         if z == 0:
            #             tmpstatus_swicth = True
            #             tmp_dict_json = query_temp[u][z].__dict__
            #             # if '_sa_instance_state' in tmp_dict_json:
            #             #     del tmp_dict_json['_sa_instance_state']
           
            #             status_groupid = False
            #             if tmp_groupid != None:
            #                 tmp_groupid = eval(tmp_groupid)
            #                 if len(tmp_groupid) != 0:
            #                     status_groupid = True
            #             tmpstatus_file = tmp_dict_json['document_status']
            #             if tmpstatus_file != None:
            #                 tmpstatus_file = tmpstatus_file
            #                 if tmpstatus_file == 'N':
            #                     tmpstatus_swicth = False
            #             # print(tmpstatus_swicth,tmpstatus_file)
                            
            #         if z == 1:
            #             tmp_dict_json = query_temp[u][z].__dict__
            #             if '_sa_instance_state' in tmp_dict_json:
            #                 del tmp_dict_json['_sa_instance_state']
            #             tmp_sign_page_options = tmp_dict_json['sign_page_options']
            #             tmp_document_type = tmp_dict_json['documentType']
            #             tmp_options_page = []
            #             if tmp_dict_json['options_page'] != None:
            #                 if tmp_dict_json['options_page'] != '':
            #                 # print(tmp_dict_json['options_page'],tmp_document_id)
            #                     tmp_options_page = [eval(tmp_dict_json['options_page'])]
            #             else:
            #                 tmp_options_page = []
            #             if len(tmp_options_page) != 0:
            #                 # print(tmp_options_page[0]['group_detail'])
            #                 if 'group_detail' in tmp_options_page[0]:
            #                     if 'group_status' in tmp_options_page[0]['group_detail']:
            #                         tmpgroupdetails = tmp_options_page[0]['group_detail']
            #                         if tmpgroupdetails['group_status'] == True:
            #                             tmpstepnum = tmpgroupdetails['step_num']
            #                             # print(tmpstepnum)
            #             if tmp_dict_json['documentJson'] != None:
            #                 documentJson_result = eval(tmp_dict_json['documentJson'])
            #                 documentName = documentJson_result['document_name']
            #                 documentType = documentJson_result['document_type']
            #             else:
            #                 documentName = None
            #                 documentType = None
            #             if tmp_dict_json['urgent_type'] != None:
            #                 documentUrgentType = tmp_dict_json['urgent_type']
            #                 if documentUrgentType == 'I':
            #                     documentUrgentString = 'ด่วนมาก'
            #                 elif documentUrgentType == 'U':
            #                     documentUrgentString = 'ด่วน'
            #                 elif documentUrgentType == 'M':
            #                     documentUrgentString = 'ปกติ'
            #         if z == 2:
            #             tmp_dict_json = query_temp[u][z].__dict__
            #             tmp_biz_info = None 
            #             if '_sa_instance_state' in tmp_dict_json:
            #                 del tmp_dict_json['_sa_instance_state']
            #             step_now2 = 0
            #             step_now = None
            #             # jsonData_eval = eval(tmp_dict_json['data_json'])
            #             # arr_step_info = []
            #             # if tmp_dict_json['biz_info'] != None or tmp_dict_json['biz_info'] != '':
            #             #     if tmp_dict_json['biz_info'] != 'None':
            #             #         tmp_biz_info = None
            #             #         eval_biz_info = eval(tmp_dict_json['biz_info'])
            #             #         if 'dept_name' in eval_biz_info:            
            #             #             tmp_biz_info = {
            #             #                 'tax_id':eval_biz_info['id_card_num'],
            #             #                 'role_name' : eval_biz_info['role_name'],
            #             #                 'dept_name' : eval_biz_info['dept_name'],
            #             #                 'role_level' : eval_biz_info['role_level']               
            #             #             }                                
            #             #         elif 'dept_name' not in eval_biz_info:
            #             #             tmp_biz_info = {
            #             #                 'tax_id':eval_biz_info['id_card_num'],
            #             #                 'role_name' : eval_biz_info['role_name'],
            #             #                 'dept_name' : [],
            #             #                 'role_level' : eval_biz_info['role_level']               
            #             #             }
            #             tmp_biz_info = {}
            #             tmp_group_stepnum = []
            #             tmpemail = False
            #             tmp_status_group = False
            #             if status_groupid == True:
            #                 if len(tmp_options_page) != 0:
            #                     if 'group_detail' in tmp_options_page[0]:
            #                         tmp_group_detail = tmp_options_page[0]['group_detail']
            #                         if 'step_num' in tmp_group_detail:
            #                             tmp_status_group = True
            #                             tmp_group_stepnum = tmp_group_detail['step_num']
            #         #     tmp_list_step_infomation = []
            #         #     if 'step_num' in jsonData_eval:
            #         #         tmp_step_info = [eval(tmp_dict_json['data_json'])]
            #         #     else:
            #         #         tmp_step_info = eval(tmp_dict_json['data_json'])
            #         #     if 'step_num' in jsonData_eval:
            #         #         tmp_list_step_infomation.append(jsonData_eval)
            #         #         jsonData_eval = tmp_list_step_infomation
            #         #     # if tmpstatus_swicth == False:
            #         #     #     if 'step_num' in jsonData_eval:
            #         #     #         step_status = ''
            #         #     #         step_before = ''
            #         #     #         res_status_file = 'Y'
            #         #     #         arr_step_totle = []
            #         #     #         json_data_info = jsonData_eval
            #         #     #         if 'step_detail' in json_data_info:
            #         #     #             for s in range(len(json_data_info['step_detail'])):
            #         #     #                 json_info_step2 = {}
            #         #     #                 for u in range(len(json_data_info['step_detail'][s]['activity_code'])):
            #         #     #                     oneMail = str(json_data_info['step_detail'][s]['one_email']).replace(' ','').lower()
            #         #     #                     if str(oneMail).replace(' ','').lower() == self.emailUser:
            #         #     #                         if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
            #         #     #                             if step_before == '':
            #         #     #                                 try:
            #         #     #                                     if json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Complete':
            #         #     #                                         step_before = 'Complete'
            #         #     #                                     elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Approve':
            #         #     #                                         step_before = 'Complete'
            #         #     #                                     elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Reject':
            #         #     #                                         step_before = 'Reject'
            #         #     #                                 except Exception as e:
            #         #     #                                     step_before = ''
            #         #     #                             if step_before != 'Reject':
            #         #     #                                 if json_data_info['step_detail'][s]['activity_status'][u] == 'Complete':
            #         #     #                                     step_status = 'Complete'
            #         #     #                                 elif json_data_info['step_detail'][s]['activity_status'][u] == 'Approve':
            #         #     #                                     step_status = 'Complete'
            #         #     #                                 elif json_data_info['step_detail'][s]['activity_status'][u] == 'Reject':
            #         #     #                                     step_status = 'Reject'
            #         #     #                                 else:
            #         #     #                                     try:
            #         #     #                                         step_status  = 'Incomplete'
            #         #     #                                     except Exception as ex:
            #         #     #                                         step_status = 'Incomplete'
            #         #     #                             arr_step_info.append(step_status)
            #         #     #                             arr_step_info.append(step_before)
            #         #     #         if 'Reject' in arr_step_info:
            #         #     #             res_status_file = 'R'
            #         #     #             res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
            #         #     #         elif 'Complete' in arr_step_info:
            #         #     #             res_status_file = 'Y'
            #         #     #             res_status_file_string = 'อนุมัติแล้ว'
            #         #     #         elif 'Waitting' in arr_step_info:
            #         #     #             res_status_file = 'W'
            #         #     #             res_status_file_string = 'รอคุณอนุมัติ'
            #         #     #         elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
            #         #     #             res_status_file = 'W'
            #         #     #             res_status_file_string = 'รอคุณอนุมัติ'
            #         #     #         else:
            #         #     #             res_status_file_string = 'อนุมัติแล้ว'
            #         #     #         if res_status_file == 'W':
            #         #     #             statusFile_count_wait = statusFile_count_wait + 1
            #         #     #         elif res_status_file == 'Y':
            #         #     #             statusFile_count_approve = statusFile_count_approve + 1
            #         #     #         elif res_status_file == 'R':
            #         #     #             statusFile_count_reject = statusFile_count_reject + 1
            #         #     #         else:
            #         #     #             statusFile_count_pendding = statusFile_count_pendding + 1
            #         #     #     else:
            #         #     #         tmp_sum_email = []
            #         #     #         step_status = ''
            #         #     #         res_status_file = 'Y'
            #         #     #         res_status_file_string = ''
            #         #     #         step_before = ''
            #         #     #         step_list_before = []
            #         #     #         step_list_ = []
            #         #     #         step_list_next = []
            #         #     #         arr_step_totle = []
            #         #     #         step_me = ''
            #         #     #         step_sum_status = []
            #         #     #         sum_status_step_list = []
            #         #     #         list_check_step = []
            #         #     #         step_list_data = []
            #         #     #         max_step = (len(jsonData_eval))
            #         #     #         step_infomation = jsonData_eval
            #         #     #         sum_status_step = []
            #         #     #         tmp_status_sum = []
            #         #     #         tmp_acvt_code_sum = []
            #         #     #         arr_email_list = []
            #         #     #         email_step_sum = []
            #         #     #         arr_04_sid = []
            #         #     #         for i in range(len(step_infomation)):
            #         #     #             list_check_step = []
            #         #     #             json_step_info_2 = {}
            #         #     #             step_list_data = []
            #         #     #             step_status = []
            #         #     #             step_email = []
            #         #     #             tmp_acvt_code = []
            #         #     #             tmp_keep_status = []
            #         #     #             tmp_acvt_status = []
            #         #     #             step_ = step_infomation[i]
            #         #     #             step_num = step_infomation[i]['step_num']
            #         #     #             json_step_info_2['step_status'] = ''
            #         #     #             tmp_step_detail = step_['step_detail']
            #         #     #             for u in range(len(tmp_step_detail)):
            #         #     #                 tmp_arr_step_detail = tmp_step_detail[u]
            #         #     #                 tmp_status = tmp_arr_step_detail['activity_status']
            #         #     #                 tmp_code = tmp_arr_step_detail['activity_code']
            #         #     #                 tmp_email = tmp_arr_step_detail['one_email']
            #         #     #                 for s in range(len(tmp_code)):
            #         #     #                     if tmp_code[s] == 'A03':
            #         #     #                         tmp_acvt_code.append(tmp_code[s])
            #         #     #                         step_status.append(tmp_status[s])
            #         #     #                         tmp_acvt_status.append(tmp_status[s])
            #         #     #                         step_email.append(tmp_email)
            #         #     #                         tmp_sum_email.append(tmp_email)
            #         #     #                     # if tmp_code[s] == 'A04':
            #         #     #                     #     tmp_acvt_code.append(tmp_code[s])
            #         #     #                     #     tmp_acvt_status.append(tmp_status[s])
            #         #     #                     #     arr_04_sid.append(tmp_sicode)
            #         #     #                     #     step_email.append(tmp_email)
            #         #     #                     #     tmp_sum_email.append(tmp_email)
            #         #     #             email_step_sum.append(step_email)
            #         #     #             # print(step_status)
            #         #     #             # if tmp_sicode not in arr_04_sid:
            #         #     #             if 'step_sign' in step_:
            #         #     #                 tmp_step_sign = step_['step_sign']
            #         #     #                 if tmp_step_sign['status'] == True:
            #         #     #                     len_step_status = len(tmp_step_sign['data'])
                                            
            #         #     #                     # tmp_status_sum = []
            #         #     #                     # if 'Incomplete' in step_status and step_status.count('Incomplete') == len_step_status:
            #         #     #                     #     tmp_status_sum.append('Incomplete_1')
            #         #     #                     if 'Complete' in step_status and step_status.count('Complete') == len_step_status:
            #         #     #                         tmp_status_sum.append('Complete')
            #         #     #                     else:
            #         #     #                         for tyy in range(len(tmp_step_detail)):
            #         #     #                             tmp_arr_step_detail = tmp_step_detail[tyy]
            #         #     #                             tmp_status = tmp_arr_step_detail['activity_status']
            #         #     #                             tmp_code = tmp_arr_step_detail['activity_code']
            #         #     #                             tmp_email = tmp_arr_step_detail['one_email']
            #         #     #                             for zui in range(len(tmp_code)):
            #         #     #                                 if tmp_code[zui] == 'A03':
            #         #     #                                     if tmp_email == self.emailUser and tmp_status[zui] == 'Incomplete':
            #         #     #                                         tmp_status_sum.append('Incomplete')
            #         #     #                                         tmp_keep_status.append('Incomplete')
            #         #     #                                     elif tmp_email == self.emailUser and tmp_status[zui] == 'Complete':
            #         #     #                                         tmp_status_sum.append('Incomplete_1')
            #         #     #                                         tmp_keep_status.append('Incomplete')                                            
            #         #     #                         if 'Incomplete' not in tmp_keep_status:
            #         #     #                             tmp_status_sum.append('Incomplete_1')
            #         #     #                             tmp_keep_status.append('Incomplete')  
            #         #     #                 else:
            #         #     #                     if 'Reject' in step_status:
            #         #     #                         tmp_status_sum.append('Reject')
            #         #     #                     elif 'Approve' in step_status:
            #         #     #                         tmp_status_sum.append('Complete')
            #         #     #                     elif 'Complete' in step_status:
            #         #     #                         tmp_status_sum.append('Complete')
            #         #     #                     elif 'Incomplete' in step_status:
            #         #     #                         tmp_status_sum.append('Incomplete')
            #         #     #                     elif 'Pending' in step_status:
            #         #     #                         tmp_status_sum.append('Incomplete')
            #         #     #                     else:
            #         #     #                         tmp_status_sum.append('Complete')
            #         #     #             else:
            #         #     #                 if 'Reject' in step_status:
            #         #     #                     tmp_status_sum.append('Reject')
            #         #     #                 elif 'Approve' in step_status:
            #         #     #                     tmp_status_sum.append('Complete')
            #         #     #                 elif 'Complete' in step_status:
            #         #     #                     tmp_status_sum.append('Complete')
            #         #     #                 elif 'Incomplete' in step_status:
            #         #     #                     tmp_status_sum.append('Incomplete')
            #         #     #                 elif 'Pending' in step_status:
            #         #     #                     tmp_status_sum.append('Incomplete')
            #         #     #                 else:
            #         #     #                     tmp_status_sum.append('Complete')
            #         #     #             # else:
            #         #     #             #     if 'A03' in tmp_acvt_code:
            #         #     #             #         if 'Reject' in step_status:
            #         #     #             #             tmp_status_sum.append('Reject')
            #         #     #             #         elif 'Approve' in step_status:
            #         #     #             #             tmp_status_sum.append('Complete')
            #         #     #             #         elif 'Complete' in step_status:
            #         #     #             #             tmp_status_sum.append('Complete')
            #         #     #             #         elif 'Incomplete' in step_status:
            #         #     #             #             if 'Complete_input' in tmp_status_sum:
            #         #     #             #                 tmp_status_sum.append('Incomplete_sign')
            #         #     #             #             else:
            #         #     #             #                 tmp_status_sum.append('Incomplete')
            #         #     #             #         elif 'Pending' in step_status:
            #         #     #             #             tmp_status_sum.append('Incomplete')
            #         #     #             #         else:
            #         #     #             #             tmp_status_sum.append('Complete')
            #         #     #             #         tmp_acvt_code_sum.append('A03')
            #         #     #             #     elif 'A04' in tmp_acvt_code:
            #         #     #             #         if 'Complete' in tmp_acvt_status:
            #         #     #             #             tmp_status_sum.append('Complete_input')
            #         #     #             #         elif 'Incomplete' in tmp_acvt_status:
            #         #     #             #             tmp_status_sum.append('Incomplete_input')
            #         #     #             #         tmp_acvt_code_sum.append('A04')

            #         #     #                     # print(tmp_acvt_code)
            #         #     #                     # print(step_status)
            #         #     #                     # print(tmp_sicode)
            #         #     #                     # print(tmp_acvt_status)
            #         #     #         # print(tmp_status_sum , tmp_sicode)
            #         #     #         # return ''
            #         #     #         if len(tmp_status_sum) != 0:
            #         #     #             count_email = tmp_sum_email.count(self.emailUser)
            #         #     #             for zzi in range(len(step_infomation)):
            #         #     #                 list_check_step = []
            #         #     #                 json_step_info_2 = {}
            #         #     #                 step_list_data = []
            #         #     #                 step_status = []
            #         #     #                 step_ = step_infomation[zzi]
            #         #     #                 step_num = step_infomation[zzi]['step_num']
            #         #     #                 json_step_info_2['step_status'] = ''
            #         #     #                 tmp_step_detail = step_['step_detail']
                                        
            #         #     #                 for zi in range(len(tmp_step_detail)):
            #         #     #                     tmp_arr_step_detail_2 = tmp_step_detail[zi]
            #         #     #                     oneMail = str(tmp_arr_step_detail_2['one_email']).replace(' ','').lower()            
            #         #     #                     tmp_step_me = int(step_num) - 1
            #         #     #                     step_num_int2 = int(step_num)
            #         #     #                     # if len(arr_step_info) != 0:
            #         #     #                     #     break
            #         #     #                     # if tmp_sicode == 'd3aa8f08-f1d9-4e14-a2be-2c5a094a47aa':
            #         #     #                     #     print(step_num_int2)
            #         #     #                     #     print(len(tmp_status_sum) , tmp_step_me)
            #         #     #                     #     print(tmp_status_sum)
            #         #     #                     #     print(oneMail, oneMail == self.emailUser , tmp_status_sum[tmp_step_me] == 'Incomplete',arr_step_info , tmp_status_sum[tmp_step_me])
            #         #     #                     #     print(tmp_status_sum[tmp_step_me])
            #         #     #                     stop = False
            #         #     #                     for ii in range(len(tmp_status_sum)):
            #         #     #                         if stop == False :
            #         #     #                             list_status = Counter(tmp_status_sum)
            #         #     #                             if 'Complete' in list_status and len(list_status) == 1 :
            #         #     #                                 step_now2 = len(tmp_status_sum)
            #         #     #                                 stop = True
            #         #     #                             elif tmp_status_sum[ii] == 'Incomplete' or tmp_status_sum[ii] == 'Reject' or tmp_status_sum[ii] == 'Approve':
            #         #     #                                 step_now2 = ii+1
            #         #     #                                 stop = True
            #         #     #                     if 'Reject' in tmp_status_sum:
            #         #     #                         step_now = step_num_int2
            #         #     #                         arr_step_info.append('Reject')
            #         #     #                     elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Incomplete_input':
            #         #     #                         step_now = step_num_int2
            #         #     #                         arr_step_info.append('Wait_input')
            #         #     #                     elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Incomplete_1':
            #         #     #                         step_now = step_num_int2
            #         #     #                         arr_step_info.append('Incomplete')
            #         #     #                     elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Incomplete':                                        
            #         #     #                         if self.emailUser not in arr_email_list:
            #         #     #                             index_step_me = tmp_step_me
            #         #     #                             if index_step_me != 0:
            #         #     #                                 while index_step_me > 0:
            #         #     #                                     if len(arr_step_info) == 0:
            #         #     #                                         index_step_me = index_step_me - 1
            #         #     #                                         if tmp_status_sum[index_step_me] == 'Incomplete_1':
            #         #     #                                             step_now = step_num_int2
            #         #     #                                             arr_step_info.append('Incomplete')
            #         #     #                                         elif tmp_status_sum[index_step_me] == 'Incomplete':
            #         #     #                                             step_now = step_num_int2
            #         #     #                                             arr_step_info.append('Incomplete')
            #         #     #                                         else:
            #         #     #                                             step_now = step_num_int2
            #         #     #                                             arr_step_info.append('Wait')
            #         #     #                                         arr_email_list.append(self.emailUser)
            #         #     #                                     else:
            #         #     #                                         index_step_me = index_step_me - 1
            #         #     #                                         continue
            #         #     #                             else:
            #         #     #                                 step_now = step_num_int2
            #         #     #                                 arr_step_info.append('Wait')                                            
            #         #     #                     elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Complete':                                    
            #         #     #                         if self.emailUser not in arr_email_list:
            #         #     #                             if count_email == 1:
            #         #     #                                 for nz in range(step_num_int2,len(tmp_status_sum),1):
            #         #     #                                     if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
            #         #     #                                         step_now = step_num_int2
            #         #     #                                         arr_step_info.append('Wait')
            #         #     #                                     elif self.emailUser not in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
            #         #     #                                         step_now = step_num_int2
            #         #     #                                         arr_step_info.append('Progress')
            #         #     #                                 arr_email_list.append(self.emailUser)
            #         #     #                             else:                                                
            #         #     #                                 for nz in range(step_num_int2,len(tmp_status_sum),1):
            #         #     #                                     if self.emailUser not in arr_email_list:
            #         #     #                                         if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Complete':
            #         #     #                                             pass                                                    
            #         #     #                                         if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
            #         #     #                                             step_now = step_num_int2
            #         #     #                                             arr_step_info.append('Wait')
            #         #     #                                             arr_email_list.append(self.emailUser)
            #         #     #                                         if self.emailUser not in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
            #         #     #                                             step_now = step_num_int2
            #         #     #                                             arr_step_info.append('Progress')
            #         #     #                                             arr_email_list.append(self.emailUser)
                                                                
                                            
            #         #     #                     if step_now == None:                                  
            #         #     #                         step_now = step_num_int2
            #         #     #             if 'Reject' in arr_step_info:
            #         #     #                 res_status_file = 'R'
            #         #     #                 res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
            #         #     #             elif 'Wait_input' in arr_step_info:
            #         #     #                 res_status_file = 'WI'
            #         #     #                 res_status_file_string = 'รอคุณกรอกข้อมูล'
            #         #     #             elif 'Progress' in arr_step_info and 'Wait' in arr_step_info:
            #         #     #                 res_status_file = 'Z'
            #         #     #                 res_status_file_string = 'อยู่ในช่วงดำเนินการ'
            #         #     #             elif 'Wait' in arr_step_info:
            #         #     #                 res_status_file = 'W'
            #         #     #                 res_status_file_string = 'รอคุณอนุมัติ'
            #         #     #             elif 'Incomplete' in arr_step_info:
            #         #     #                 res_status_file = 'Z'
            #         #     #                 res_status_file_string = 'อยู่ในช่วงดำเนินการ'
            #         #     #             elif 'Progress' in arr_step_info:
            #         #     #                 res_status_file = 'N'
            #         #     #                 res_status_file_string = 'กำลังดำเนินการ'                    
            #         #     #             elif arr_step_info.count('Incomplete') >= 2:
            #         #     #                 res_status_file = 'Z'
            #         #     #                 res_status_file_string = 'อยู่ในช่วงดำเนินการ'
            #         #     #             elif 'Incomplete' in arr_step_info and 'Complete' in arr_step_info:
            #         #     #                 res_status_file = 'N'
            #         #     #                 res_status_file_string = 'กำลังดำเนินการ'
            #         #     #             else:
            #         #     #                 res_status_file_string = 'อนุมัติแล้ว'
            #         #     # else:
            #         #     #     max_step = (len(jsonData_eval)) - 1
            #         #     #     if tmpstatus_file == 'Y':
            #         #     #         step_now2 = max_step
            #         #     #         res_status_file = 'Y'
            #         #     #         res_status_file_string = 'อนุมัติแล้ว'
            #         #     #     elif tmpstatus_file == 'R':
            #         #     #         res_status_file = 'R'
            #         #     #         res_status_file_string = 'ปฏิเสธอนุมัติ'
            #         #     #     # print(tmpstatus_file)       
                    
            #         #     # if query_temp[u][z] != None:
            #         #     #     tmp_dict_json = query_temp[u][z].__dict__
            #         #     #     if '_sa_instance_state' in tmp_dict_json:
            #         #     #         del tmp_dict_json['_sa_instance_state']
            #         #     #     print(tmp_dict_json)
            #         #     #     tmp_data_group = tmp_dict_json['data_group']
            #         #     #     tmp_date_time_group = tmp_dict_json['updatetime']
                    
            #         # tmp_sid_code_group = []
            #         # if z == 2:
            #         #     tmp_dict_json = query_temp[u][z].__dict__
            #         #     if '_sa_instance_state' in tmp_dict_json:
            #         #         del tmp_dict_json['_sa_instance_state']
            #         #     tmp_group_id = tmp_dict_json['group_id']
                        
                    
            #         # if len(tmp_sid_code_group) != 0:
            #         #     for z in range(len(tmp_sid_code_group)):
            #         #         if tmp_sicode == tmp_sid_code_group[z]:
            #         #             print(tmp_sicode)
            #         list_temp_query.append(tmp_dict_json)
            #         dateTime_String = tmp_send_time
            #         th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
            #         ts = int(time.time())
            #         date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
            #         year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
            #         datetime_display = int(dateTime_String.timestamp())
            #         date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
            #         yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
            #         time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
            #         old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
            #         if date_time_today == date_time_db:
            #             date_display_show = time_show_db
            #         else:
            #             if year_today == yar_db:
            #                 date_display_show = convert_datetime_TH_2_display(datetime_display)
            #             else:
            #                 date_display_show = old_year
            #     count_rowDocument = len(tmp_sid_code_list)
            #     json_Data['sum_Document']  = count_rowDocument
            #     json_Data['DocumentInfo'] = {
            #         'Document_Active':count_rowDocument_StatusActive,
            #         'Document_Reject':count_rowDocument_StatusReject,
            #         'Document_Cancel':count_rowDocument_StatusCancel
            #     }
            #     step_now2 = 0
            #     # print(step_now2)
            #     int_step_now2 = step_now2 - 1
            #     tmp_req_email = []
            #     res_status_file = 'Y'
            #     res_status_file_string = 'อนุมัติ'
            #     max_step = 0
            #     email_step_sum = []
            #     # if res_status_file == 'W':
            #     #     statusFile_count_wait = statusFile_count_wait + 1
            #     # elif res_status_file == 'Y':
            #     #     statusFile_count_approve = statusFile_count_approve + 1
            #     # elif res_status_file == 'R':
            #     #     statusFile_count_reject = statusFile_count_reject + 1
            #     # else:
            #     #     statusFile_count_pendding = statusFile_count_pendding + 1
            # # return ''
            #     if tmp_status_group == True:
            #         # for ui in range(len(tmpstepnum)):
            #         #     intstepnum = tmpstepnum[ui] - 2
            #         #     # print(intstepnum)
            #         #     # print(email_step_sum)
            #         #     # print(tmp_sicode)
            #         #     # print(email_step_sum[intstepnum])
            #         #     for zy in range(len(email_step_sum[intstepnum])):
            #         #         tmp_req_email.append(email_step_sum[intstepnum][zy])
            #         if self.emailUser in tmp_req_email:
            #             if res_status_file == 'Y':
            #                 list_arr.append({
            #                     'group_email':tmp_req_email,
            #                     'group_id':None,
            #                     'group_status':tmp_status_group,
            #                     'sidCode':tmp_sicode,
            #                     'document_name':documentName,
            #                     'document_type':tmp_document_type,
            #                     'document_urgent':documentUrgentType,
            #                     'document_urgent_string':documentUrgentString,
            #                     'dateTime_String':str(dateTime_String).split('+')[0],
            #                     'dateTime_String_TH_1':th_dateTime_2,
            #                     'dateTime_display':date_display_show,
            #                     'document_id':tmp_document_id,
            #                     'stamp_all':tmp_sign_page_options,
            #                     'options_page_document':tmp_options_page,
            #                     'max_step':max_step,
            #                     'step_now':step_now2,
            #                     # 'dateTime_String_TH_2':th_dateTime_2,
            #                     'date_String':str(dateTime_String).split(' ')[0],
            #                     'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
            #                     'status_file_code':res_status_file,
            #                     'status_file_string':res_status_file_string,
            #                     'dateTime':int(dateTime_String.timestamp()),
            #                     'tracking_id':tmp_tracking_id,
            #                     'sender_name':tmp_sender_name,
            #                     'sender_email':tmp_sender_email,
            #                     'file_name':tmp_file_name,
            #                     'document_business':tmp_biz_info
            #                 })
            #         else:
            #             list_arr.append({
            #                 'group_email':tmp_req_email,
            #                 'group_id':None,
            #                 'group_status':tmp_status_group,
            #                 'sidCode':tmp_sicode,
            #                 'document_name':documentName,
            #                 'document_type':tmp_document_type,
            #                 'document_urgent':documentUrgentType,
            #                 'document_urgent_string':documentUrgentString,
            #                 'dateTime_String':str(dateTime_String).split('+')[0],
            #                 'dateTime_String_TH_1':th_dateTime_2,
            #                 'dateTime_display':date_display_show,
            #                 'document_id':tmp_document_id,
            #                 'stamp_all':tmp_sign_page_options,
            #                 'options_page_document':tmp_options_page,
            #                 'max_step':max_step,
            #                 'step_now':step_now2,
            #                 # 'dateTime_String_TH_2':th_dateTime_2,
            #                 'date_String':str(dateTime_String).split(' ')[0],
            #                 'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
            #                 'status_file_code':res_status_file,
            #                 'status_file_string':res_status_file_string,
            #                 'dateTime':int(dateTime_String.timestamp()),
            #                 'tracking_id':tmp_tracking_id,
            #                 'sender_name':tmp_sender_name,
            #                 'sender_email':tmp_sender_email,
            #                 'file_name':tmp_file_name,
            #                 'document_business':tmp_biz_info
            #             })
            #         # tmp_req_email = email_step_sum[int_step_now2]
            #     else:
            #         list_arr.append({
            #             'group_email':tmp_req_email,
            #             'group_id':None,
            #             'group_status':tmp_status_group,
            #             'sidCode':tmp_sicode,
            #             'document_name':documentName,
            #             'document_type':tmp_document_type,
            #             'document_urgent':documentUrgentType,
            #             'document_urgent_string':documentUrgentString,
            #             'dateTime_String':str(dateTime_String).split('+')[0],
            #             'dateTime_String_TH_1':th_dateTime_2,
            #             'dateTime_display':date_display_show,
            #             'document_id':tmp_document_id,
            #             'stamp_all':tmp_sign_page_options,
            #             'options_page_document':tmp_options_page,
            #             'max_step':max_step,
            #             'step_now':step_now2,
            #             # 'dateTime_String_TH_2':th_dateTime_2,
            #             'date_String':str(dateTime_String).split(' ')[0],
            #             'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
            #             'status_file_code':res_status_file,
            #             'status_file_string':res_status_file_string,
            #             'dateTime':int(dateTime_String.timestamp()),
            #             'tracking_id':tmp_tracking_id,
            #             'sender_name':tmp_sender_name,
            #             'sender_email':tmp_sender_email,
            #             'file_name':tmp_file_name,
            #             'document_business':tmp_biz_info
            #         })
            # json_Data['Document_Status_Details']  = {
            #     'Incomplete_Pendding':statusFile_count_pendding,
            #     'Complete_Approve':statusFile_count_approve,
            #     'Reject':statusFile_count_reject,
            #     'Wait':statusFile_count_wait
            # }
            # list_arr = sorted(list_arr, key=lambda k: k['dateTime'], reverse=True)
            # json_Data['Document_Details'] = list_arr
            # return {'result':'OK','messageText':json_Data,'status_Code':200,'messageER':None}
            
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}
        finally:
            db.session.close()

    
    # def select_dashboard_recipient_v6_list(self,emailUser,datetime_start,datetime_end):
    #     self.emailUser = emailUser
    #     self.datetime_start = datetime_start
    #     self.datetime_end = datetime_end
    #     sid_list = []
    #     sid_list_email = []
    #     json_Data = {}
    #     list_arr = []
    #     list_json = []
    #     try:
    #         tmp_list = []             
    #         count_rowDocument = 0
    #         count_rowDocument_StatusActive = 0
    #         count_rowDocument_StatusReject = 0
    #         count_rowDocument_StatusCancel = 0
    #         statusFile_count_approve = 0
    #         statusFile_count_pendding = 0
    #         statusFile_count_reject = 0
    #         statusFile_count_wait = 0
    #         list_temp_query = []
    #         tmp_sid_code_list = []
    #         arr_gruop = []
    #         arr_group_sid = []
    #         tmp_arr_sid = []
    #         tmp_group_id = None
    #         str_time = (time.time())
    #         date_start_tmp = datetime.datetime.fromtimestamp(self.datetime_start)
    #         date_end_tmp = datetime.datetime.fromtimestamp(self.datetime_end)
    #         query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep)\
    #             .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
    #             .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
    #             .filter(or_(and_(paper_lessdatastep.update_time <= date_end_tmp,paper_lessdatastep.update_time >= date_start_tmp),and_(paper_lesssender.send_time <= date_end_tmp,paper_lesssender.send_time >= date_start_tmp)))\
    #             .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.contains(self.emailUser))\
    #             .order_by(desc(paper_lesssender.send_time))\
    #             .all()   
    #         # print(query_temp)
    #         end_time = (time.time())
    #         print(end_time -str_time)
    #         arr = []
    #         for u in range(len(query_temp)):
    #             arr_email_document = []
    #             tmp_req_email = []
    #             for z in range(len(query_temp[u])):
    #                 if z == 0:
    #                     tmp_dict = query_temp[u][2].__dict__
    #                     update_time = tmp_dict['update_time']
    #                     tmp_dict_json = query_temp[u][z].__dict__
    #                     if '_sa_instance_state' in tmp_dict_json:
    #                         tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state']) 
    #                     tmp_sicode = tmp_dict_json['step_data_sid']
    #                     tmp_sid_code_list.append(tmp_sicode)
    #                     tmp_send_time = tmp_dict_json['send_time']
    #                     # print(date_start_tmp)
    #                     # if str(date_start_tmp) >= str(tmp_send_time).split('+')[0] and str(tmp_send_time).split('+')[0] <= str(date_end_tmp):
    #                     #     tmp_timepaper = 'new'
    #                     #     if str(update_time).split('+')[0] == ''
    #                     # print(str(tmp_send_time).split('+')[0].split(':')[0])
    #                     if str(tmp_send_time).split('+')[0] == str(update_time).split('+')[0]:
    #                         tmp_timepaper = 'new'
    #                     else:
    #                         tmp_timepaper = 'update'
    #                     tmp_document_id = tmp_dict_json['doc_id']
    #                     tmp_tracking_id = tmp_dict_json['tracking_id']
    #                     tmp_sender_name = tmp_dict_json['sender_name']
    #                     tmp_sender_email = tmp_dict_json['sender_email']
    #                     tmp_file_name = tmp_dict_json['file_name']
    #                     tmp_groupid = tmp_dict_json['group_id']
    #                     tmpstatus_detail = tmp_dict_json['status_details']
    #                     tmpdocument_status = tmp_dict_json['document_status']
    #                     tmpstepnow = tmp_dict_json['stepnow']
    #                     if tmpstepnow != None:
    #                         tmpstepnow = int(tmpstepnow)
    #                     tmpstepmax = tmp_dict_json['stepmax']
    #                     if tmpstepmax != None:
    #                         tmpstepmax = int(tmpstepmax)
    #                     status_groupid = False
    #                     if tmp_groupid != None:
    #                         tmp_groupid = eval(tmp_groupid)
    #                         if len(tmp_groupid) != 0:
    #                             status_groupid = True
    #                     if tmpstatus_detail != None:
    #                         tmpstatus_detail = eval(tmpstatus_detail)
    #                         if tmpdocument_status == 'N':
    #                             for x in range(len(tmpstatus_detail)):
    #                                 # print(tmp_sicode)
    #                                 # print(tmpstatus_detail[x])
    #                                 if self.emailUser not in arr_email_document:
    #                                     if self.emailUser in tmpstatus_detail[x]['email']:
    #                                         if tmpstatus_detail[x]['step_status_code'] == 'W':
    #                                             arr_email_document.append(self.emailUser)
    #                                             tmpdocument_status = tmpstatus_detail[x]['step_status_code']
    #                                             break
    #                                         else:
    #                                             tmpdocument_status = tmpstatus_detail[x]['step_status_code']
    #                     res_status_file_string = 'อนุมัติแล้ว'
    #                     if tmpdocument_status == 'Z':
    #                         res_status_file_string = 'อยู่ในช่วงดำเนินการ'
    #                     elif tmpdocument_status == 'W':
    #                         res_status_file_string = 'รอคุณอนุมัติ'
    #                     elif tmpdocument_status == 'N':
    #                         res_status_file_string = 'กำลังดำเนินการ'
    #                     elif tmpdocument_status == 'R':
    #                         res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
    #                                         # else:

    #                     # print(tmpstatus_detail)
    #                 if z == 1:
    #                     tmp_document_type = None
    #                     tmp_dict_json = query_temp[u][z].__dict__
    #                     if '_sa_instance_state' in tmp_dict_json:
    #                         tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state'])
    #                     tmp_sign_page_options = tmp_dict_json['sign_page_options']
    #                     tmp_document_type = tmp_dict_json['documentType']
    #                     tmp_options_page = []
    #                     if tmp_dict_json['options_page'] != None:
    #                         if tmp_dict_json['options_page'] != '':
    #                         # print(tmp_dict_json['options_page'],tmp_document_id)
    #                             tmp_options_page = [eval(tmp_dict_json['options_page'])]
    #                     else:
    #                         tmp_options_page = []
    #                     tmp_status_group = False
    #                     if len(tmp_options_page) != 0:
    #                         # print(tmp_options_page[0]['group_detail'])
                            
    #                         if status_groupid == True:
    #                             if len(tmp_options_page) != 0:
    #                                 if 'group_detail' in tmp_options_page[0]:
    #                                     tmp_group_detail = tmp_options_page[0]['group_detail']
    #                                     if 'group_status' in tmp_group_detail:
    #                                         if tmp_group_detail['group_status'] == True:
    #                                             tmp_status_group = True
    #                                             tmpstepnum = tmp_group_detail['step_num']
    #                     if tmp_dict_json['documentJson'] != None:
    #                         documentJson_result = eval(tmp_dict_json['documentJson'])
    #                         documentName = documentJson_result['document_name']
    #                         documentType = documentJson_result['document_type']
    #                     else:
    #                         documentName = None
    #                         documentType = None
    #                     if tmp_dict_json['urgent_type'] != None:
    #                         documentUrgentType = tmp_dict_json['urgent_type']
    #                         if documentUrgentType == 'I':
    #                             documentUrgentString = 'ด่วนมาก'
    #                         elif documentUrgentType == 'U':
    #                             documentUrgentString = 'ด่วน'
    #                         elif documentUrgentType == 'M':
    #                             documentUrgentString = 'ปกติ'
    #                 tmp_biz_info_json = None
    #                 if z == 2:
    #                     tmp_dict_json = query_temp[u][z].__dict__
    #                     tmp_biz_info = tmp_dict_json['biz_info']
    #                     if tmp_biz_info != None:
    #                         if tmp_biz_info != 'None':
                                
    #                             eval_biz_info = json.dumps(tmp_biz_info)
    #                             eval_biz_info = json.loads(eval_biz_info)
    #                             eval_biz_info = eval(eval_biz_info)
    #                             # eval_biz_info
    #                             # print(eval_biz_info)
    #                             if 'dept_name' in eval_biz_info:            
    #                                 tmp_biz_info_json = {
    #                                     'tax_id':eval_biz_info['id_card_num'],
    #                                     'role_name' : eval_biz_info['role_name'],
    #                                     'dept_name' : eval_biz_info['dept_name'],
    #                                     'role_level' : eval_biz_info['role_level']               
    #                                 }                                
    #                             elif 'dept_name' not in eval_biz_info:
    #                                 tmp_biz_info_json = {
    #                                     'tax_id':eval_biz_info['id_card_num'],
    #                                     'role_name' : eval_biz_info['role_name'],
    #                                     'dept_name' : [],
    #                                     'role_level' : eval_biz_info['role_level']               
    #                                 }
    #                 dateTime_String = tmp_send_time
    #                 th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
    #                 ts = int(time.time())
    #                 date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
    #                 year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
    #                 datetime_display = int(dateTime_String.timestamp())
    #                 date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
    #                 yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
    #                 time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
    #                 old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
    #                 if date_time_today == date_time_db:
    #                     date_display_show = time_show_db
    #                 else:
    #                     if year_today == yar_db:
    #                         date_display_show = convert_datetime_TH_2_display(datetime_display)
    #                     else:
    #                         date_display_show = old_year
    #             if tmp_status_group == True:
    #                 for ui in range(len(tmpstepnum)):
    #                     intstepnum = tmpstepnum[ui] - 1
    #                     tmp_req_email.append(email_step_sum[intstepnum])
    #             list_arr.append({
    #                 'group_email':tmp_req_email,
    #                 'group_id':None,
    #                 'group_status':tmp_status_group,
    #                 'sidCode':tmp_sicode,
    #                 'document_name':documentName,
    #                 'document_type':tmp_document_type,
    #                 'document_urgent':documentUrgentType,
    #                 'document_urgent_string':documentUrgentString,
    #                 'dateTime_String':str(dateTime_String).split('+')[0],
    #                 'dateTime_String_TH_1':th_dateTime_2,
    #                 'dateTime_display':date_display_show,
    #                 'document_id':tmp_document_id,
    #                 'stamp_all':tmp_sign_page_options,
    #                 'options_page_document':tmp_options_page,
    #                 'max_step':tmpstepmax,
    #                 'step_now':tmpstepnow,
    #                 # 'dateTime_String_TH_2':th_dateTime_2,
    #                 'date_String':str(dateTime_String).split(' ')[0],
    #                 'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
    #                 'status_file_code':tmpdocument_status,
    #                 'status_file_string':res_status_file_string,
    #                 'dateTime':int(dateTime_String.timestamp()),
    #                 'tracking_id':tmp_tracking_id,
    #                 'sender_name':tmp_sender_name,
    #                 'sender_email':tmp_sender_email,
    #                 'file_name':tmp_file_name,
    #                 'document_business':tmp_biz_info_json,
    #                 'time_paper': tmp_timepaper
    #             })
    #         list_arr = sorted(list_arr, key=lambda k: k['dateTime'], reverse=True)
    #         json_Data['Document_Details'] = list_arr
    #                 # arr.append(tmp_dict_json)
    #         return {'result':'OK','messageText':json_Data}
    #         #         if z == 0:
    #         #             tmpstatus_swicth = True
    #         #             tmp_dict_json = query_temp[u][z].__dict__
    #         #             # if '_sa_instance_state' in tmp_dict_json:
    #         #             #     del tmp_dict_json['_sa_instance_state']
           
    #         #             status_groupid = False
    #         #             if tmp_groupid != None:
    #         #                 tmp_groupid = eval(tmp_groupid)
    #         #                 if len(tmp_groupid) != 0:
    #         #                     status_groupid = True
    #         #             tmpstatus_file = tmp_dict_json['document_status']
    #         #             if tmpstatus_file != None:
    #         #                 tmpstatus_file = tmpstatus_file
    #         #                 if tmpstatus_file == 'N':
    #         #                     tmpstatus_swicth = False
    #         #             # print(tmpstatus_swicth,tmpstatus_file)
                            
    #         #         if z == 1:
    #         #             tmp_dict_json = query_temp[u][z].__dict__
    #         #             if '_sa_instance_state' in tmp_dict_json:
    #         #                 del tmp_dict_json['_sa_instance_state']
    #         #             tmp_sign_page_options = tmp_dict_json['sign_page_options']
    #         #             tmp_document_type = tmp_dict_json['documentType']
    #         #             tmp_options_page = []
    #         #             if tmp_dict_json['options_page'] != None:
    #         #                 if tmp_dict_json['options_page'] != '':
    #         #                 # print(tmp_dict_json['options_page'],tmp_document_id)
    #         #                     tmp_options_page = [eval(tmp_dict_json['options_page'])]
    #         #             else:
    #         #                 tmp_options_page = []
    #         #             if len(tmp_options_page) != 0:
    #         #                 # print(tmp_options_page[0]['group_detail'])
    #         #                 if 'group_detail' in tmp_options_page[0]:
    #         #                     if 'group_status' in tmp_options_page[0]['group_detail']:
    #         #                         tmpgroupdetails = tmp_options_page[0]['group_detail']
    #         #                         if tmpgroupdetails['group_status'] == True:
    #         #                             tmpstepnum = tmpgroupdetails['step_num']
    #         #                             # print(tmpstepnum)
    #         #             if tmp_dict_json['documentJson'] != None:
    #         #                 documentJson_result = eval(tmp_dict_json['documentJson'])
    #         #                 documentName = documentJson_result['document_name']
    #         #                 documentType = documentJson_result['document_type']
    #         #             else:
    #         #                 documentName = None
    #         #                 documentType = None
    #         #             if tmp_dict_json['urgent_type'] != None:
    #         #                 documentUrgentType = tmp_dict_json['urgent_type']
    #         #                 if documentUrgentType == 'I':
    #         #                     documentUrgentString = 'ด่วนมาก'
    #         #                 elif documentUrgentType == 'U':
    #         #                     documentUrgentString = 'ด่วน'
    #         #                 elif documentUrgentType == 'M':
    #         #                     documentUrgentString = 'ปกติ'
    #         #         if z == 2:
    #         #             tmp_dict_json = query_temp[u][z].__dict__
    #         #             tmp_biz_info = None 
    #         #             if '_sa_instance_state' in tmp_dict_json:
    #         #                 del tmp_dict_json['_sa_instance_state']
    #         #             step_now2 = 0
    #         #             step_now = None
    #         #             # jsonData_eval = eval(tmp_dict_json['data_json'])
    #         #             # arr_step_info = []
    #         #             # if tmp_dict_json['biz_info'] != None or tmp_dict_json['biz_info'] != '':
    #         #             #     if tmp_dict_json['biz_info'] != 'None':
    #         #             #         tmp_biz_info = None
    #         #             #         eval_biz_info = eval(tmp_dict_json['biz_info'])
    #         #             #         if 'dept_name' in eval_biz_info:            
    #         #             #             tmp_biz_info = {
    #         #             #                 'tax_id':eval_biz_info['id_card_num'],
    #         #             #                 'role_name' : eval_biz_info['role_name'],
    #         #             #                 'dept_name' : eval_biz_info['dept_name'],
    #         #             #                 'role_level' : eval_biz_info['role_level']               
    #         #             #             }                                
    #         #             #         elif 'dept_name' not in eval_biz_info:
    #         #             #             tmp_biz_info = {
    #         #             #                 'tax_id':eval_biz_info['id_card_num'],
    #         #             #                 'role_name' : eval_biz_info['role_name'],
    #         #             #                 'dept_name' : [],
    #         #             #                 'role_level' : eval_biz_info['role_level']               
    #         #             #             }
    #         #             tmp_biz_info = {}
    #         #             tmp_group_stepnum = []
    #         #             tmpemail = False
    #         #             tmp_status_group = False
    #         #             if status_groupid == True:
    #         #                 if len(tmp_options_page) != 0:
    #         #                     if 'group_detail' in tmp_options_page[0]:
    #         #                         tmp_group_detail = tmp_options_page[0]['group_detail']
    #         #                         if 'step_num' in tmp_group_detail:
    #         #                             tmp_status_group = True
    #         #                             tmp_group_stepnum = tmp_group_detail['step_num']
    #         #         #     tmp_list_step_infomation = []
    #         #         #     if 'step_num' in jsonData_eval:
    #         #         #         tmp_step_info = [eval(tmp_dict_json['data_json'])]
    #         #         #     else:
    #         #         #         tmp_step_info = eval(tmp_dict_json['data_json'])
    #         #         #     if 'step_num' in jsonData_eval:
    #         #         #         tmp_list_step_infomation.append(jsonData_eval)
    #         #         #         jsonData_eval = tmp_list_step_infomation
    #         #         #     # if tmpstatus_swicth == False:
    #         #         #     #     if 'step_num' in jsonData_eval:
    #         #         #     #         step_status = ''
    #         #         #     #         step_before = ''
    #         #         #     #         res_status_file = 'Y'
    #         #         #     #         arr_step_totle = []
    #         #         #     #         json_data_info = jsonData_eval
    #         #         #     #         if 'step_detail' in json_data_info:
    #         #         #     #             for s in range(len(json_data_info['step_detail'])):
    #         #         #     #                 json_info_step2 = {}
    #         #         #     #                 for u in range(len(json_data_info['step_detail'][s]['activity_code'])):
    #         #         #     #                     oneMail = str(json_data_info['step_detail'][s]['one_email']).replace(' ','').lower()
    #         #         #     #                     if str(oneMail).replace(' ','').lower() == self.emailUser:
    #         #         #     #                         if json_data_info['step_detail'][s]['activity_code'][u] == 'A03':
    #         #         #     #                             if step_before == '':
    #         #         #     #                                 try:
    #         #         #     #                                     if json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Complete':
    #         #         #     #                                         step_before = 'Complete'
    #         #         #     #                                     elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Approve':
    #         #         #     #                                         step_before = 'Complete'
    #         #         #     #                                     elif json_data_info['step_detail'][s - 1]['activity_status'][u] == 'Reject':
    #         #         #     #                                         step_before = 'Reject'
    #         #         #     #                                 except Exception as e:
    #         #         #     #                                     step_before = ''
    #         #         #     #                             if step_before != 'Reject':
    #         #         #     #                                 if json_data_info['step_detail'][s]['activity_status'][u] == 'Complete':
    #         #         #     #                                     step_status = 'Complete'
    #         #         #     #                                 elif json_data_info['step_detail'][s]['activity_status'][u] == 'Approve':
    #         #         #     #                                     step_status = 'Complete'
    #         #         #     #                                 elif json_data_info['step_detail'][s]['activity_status'][u] == 'Reject':
    #         #         #     #                                     step_status = 'Reject'
    #         #         #     #                                 else:
    #         #         #     #                                     try:
    #         #         #     #                                         step_status  = 'Incomplete'
    #         #         #     #                                     except Exception as ex:
    #         #         #     #                                         step_status = 'Incomplete'
    #         #         #     #                             arr_step_info.append(step_status)
    #         #         #     #                             arr_step_info.append(step_before)
    #         #         #     #         if 'Reject' in arr_step_info:
    #         #         #     #             res_status_file = 'R'
    #         #         #     #             res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
    #         #         #     #         elif 'Complete' in arr_step_info:
    #         #         #     #             res_status_file = 'Y'
    #         #         #     #             res_status_file_string = 'อนุมัติแล้ว'
    #         #         #     #         elif 'Waitting' in arr_step_info:
    #         #         #     #             res_status_file = 'W'
    #         #         #     #             res_status_file_string = 'รอคุณอนุมัติ'
    #         #         #     #         elif 'Incomplete' in arr_step_info or 'Pendding' in arr_step_info:
    #         #         #     #             res_status_file = 'W'
    #         #         #     #             res_status_file_string = 'รอคุณอนุมัติ'
    #         #         #     #         else:
    #         #         #     #             res_status_file_string = 'อนุมัติแล้ว'
    #         #         #     #         if res_status_file == 'W':
    #         #         #     #             statusFile_count_wait = statusFile_count_wait + 1
    #         #         #     #         elif res_status_file == 'Y':
    #         #         #     #             statusFile_count_approve = statusFile_count_approve + 1
    #         #         #     #         elif res_status_file == 'R':
    #         #         #     #             statusFile_count_reject = statusFile_count_reject + 1
    #         #         #     #         else:
    #         #         #     #             statusFile_count_pendding = statusFile_count_pendding + 1
    #         #         #     #     else:
    #         #         #     #         tmp_sum_email = []
    #         #         #     #         step_status = ''
    #         #         #     #         res_status_file = 'Y'
    #         #         #     #         res_status_file_string = ''
    #         #         #     #         step_before = ''
    #         #         #     #         step_list_before = []
    #         #         #     #         step_list_ = []
    #         #         #     #         step_list_next = []
    #         #         #     #         arr_step_totle = []
    #         #         #     #         step_me = ''
    #         #         #     #         step_sum_status = []
    #         #         #     #         sum_status_step_list = []
    #         #         #     #         list_check_step = []
    #         #         #     #         step_list_data = []
    #         #         #     #         max_step = (len(jsonData_eval))
    #         #         #     #         step_infomation = jsonData_eval
    #         #         #     #         sum_status_step = []
    #         #         #     #         tmp_status_sum = []
    #         #         #     #         tmp_acvt_code_sum = []
    #         #         #     #         arr_email_list = []
    #         #         #     #         email_step_sum = []
    #         #         #     #         arr_04_sid = []
    #         #         #     #         for i in range(len(step_infomation)):
    #         #         #     #             list_check_step = []
    #         #         #     #             json_step_info_2 = {}
    #         #         #     #             step_list_data = []
    #         #         #     #             step_status = []
    #         #         #     #             step_email = []
    #         #         #     #             tmp_acvt_code = []
    #         #         #     #             tmp_keep_status = []
    #         #         #     #             tmp_acvt_status = []
    #         #         #     #             step_ = step_infomation[i]
    #         #         #     #             step_num = step_infomation[i]['step_num']
    #         #         #     #             json_step_info_2['step_status'] = ''
    #         #         #     #             tmp_step_detail = step_['step_detail']
    #         #         #     #             for u in range(len(tmp_step_detail)):
    #         #         #     #                 tmp_arr_step_detail = tmp_step_detail[u]
    #         #         #     #                 tmp_status = tmp_arr_step_detail['activity_status']
    #         #         #     #                 tmp_code = tmp_arr_step_detail['activity_code']
    #         #         #     #                 tmp_email = tmp_arr_step_detail['one_email']
    #         #         #     #                 for s in range(len(tmp_code)):
    #         #         #     #                     if tmp_code[s] == 'A03':
    #         #         #     #                         tmp_acvt_code.append(tmp_code[s])
    #         #         #     #                         step_status.append(tmp_status[s])
    #         #         #     #                         tmp_acvt_status.append(tmp_status[s])
    #         #         #     #                         step_email.append(tmp_email)
    #         #         #     #                         tmp_sum_email.append(tmp_email)
    #         #         #     #                     # if tmp_code[s] == 'A04':
    #         #         #     #                     #     tmp_acvt_code.append(tmp_code[s])
    #         #         #     #                     #     tmp_acvt_status.append(tmp_status[s])
    #         #         #     #                     #     arr_04_sid.append(tmp_sicode)
    #         #         #     #                     #     step_email.append(tmp_email)
    #         #         #     #                     #     tmp_sum_email.append(tmp_email)
    #         #         #     #             email_step_sum.append(step_email)
    #         #         #     #             # print(step_status)
    #         #         #     #             # if tmp_sicode not in arr_04_sid:
    #         #         #     #             if 'step_sign' in step_:
    #         #         #     #                 tmp_step_sign = step_['step_sign']
    #         #         #     #                 if tmp_step_sign['status'] == True:
    #         #         #     #                     len_step_status = len(tmp_step_sign['data'])
                                            
    #         #         #     #                     # tmp_status_sum = []
    #         #         #     #                     # if 'Incomplete' in step_status and step_status.count('Incomplete') == len_step_status:
    #         #         #     #                     #     tmp_status_sum.append('Incomplete_1')
    #         #         #     #                     if 'Complete' in step_status and step_status.count('Complete') == len_step_status:
    #         #         #     #                         tmp_status_sum.append('Complete')
    #         #         #     #                     else:
    #         #         #     #                         for tyy in range(len(tmp_step_detail)):
    #         #         #     #                             tmp_arr_step_detail = tmp_step_detail[tyy]
    #         #         #     #                             tmp_status = tmp_arr_step_detail['activity_status']
    #         #         #     #                             tmp_code = tmp_arr_step_detail['activity_code']
    #         #         #     #                             tmp_email = tmp_arr_step_detail['one_email']
    #         #         #     #                             for zui in range(len(tmp_code)):
    #         #         #     #                                 if tmp_code[zui] == 'A03':
    #         #         #     #                                     if tmp_email == self.emailUser and tmp_status[zui] == 'Incomplete':
    #         #         #     #                                         tmp_status_sum.append('Incomplete')
    #         #         #     #                                         tmp_keep_status.append('Incomplete')
    #         #         #     #                                     elif tmp_email == self.emailUser and tmp_status[zui] == 'Complete':
    #         #         #     #                                         tmp_status_sum.append('Incomplete_1')
    #         #         #     #                                         tmp_keep_status.append('Incomplete')                                            
    #         #         #     #                         if 'Incomplete' not in tmp_keep_status:
    #         #         #     #                             tmp_status_sum.append('Incomplete_1')
    #         #         #     #                             tmp_keep_status.append('Incomplete')  
    #         #         #     #                 else:
    #         #         #     #                     if 'Reject' in step_status:
    #         #         #     #                         tmp_status_sum.append('Reject')
    #         #         #     #                     elif 'Approve' in step_status:
    #         #         #     #                         tmp_status_sum.append('Complete')
    #         #         #     #                     elif 'Complete' in step_status:
    #         #         #     #                         tmp_status_sum.append('Complete')
    #         #         #     #                     elif 'Incomplete' in step_status:
    #         #         #     #                         tmp_status_sum.append('Incomplete')
    #         #         #     #                     elif 'Pending' in step_status:
    #         #         #     #                         tmp_status_sum.append('Incomplete')
    #         #         #     #                     else:
    #         #         #     #                         tmp_status_sum.append('Complete')
    #         #         #     #             else:
    #         #         #     #                 if 'Reject' in step_status:
    #         #         #     #                     tmp_status_sum.append('Reject')
    #         #         #     #                 elif 'Approve' in step_status:
    #         #         #     #                     tmp_status_sum.append('Complete')
    #         #         #     #                 elif 'Complete' in step_status:
    #         #         #     #                     tmp_status_sum.append('Complete')
    #         #         #     #                 elif 'Incomplete' in step_status:
    #         #         #     #                     tmp_status_sum.append('Incomplete')
    #         #         #     #                 elif 'Pending' in step_status:
    #         #         #     #                     tmp_status_sum.append('Incomplete')
    #         #         #     #                 else:
    #         #         #     #                     tmp_status_sum.append('Complete')
    #         #         #     #             # else:
    #         #         #     #             #     if 'A03' in tmp_acvt_code:
    #         #         #     #             #         if 'Reject' in step_status:
    #         #         #     #             #             tmp_status_sum.append('Reject')
    #         #         #     #             #         elif 'Approve' in step_status:
    #         #         #     #             #             tmp_status_sum.append('Complete')
    #         #         #     #             #         elif 'Complete' in step_status:
    #         #         #     #             #             tmp_status_sum.append('Complete')
    #         #         #     #             #         elif 'Incomplete' in step_status:
    #         #         #     #             #             if 'Complete_input' in tmp_status_sum:
    #         #         #     #             #                 tmp_status_sum.append('Incomplete_sign')
    #         #         #     #             #             else:
    #         #         #     #             #                 tmp_status_sum.append('Incomplete')
    #         #         #     #             #         elif 'Pending' in step_status:
    #         #         #     #             #             tmp_status_sum.append('Incomplete')
    #         #         #     #             #         else:
    #         #         #     #             #             tmp_status_sum.append('Complete')
    #         #         #     #             #         tmp_acvt_code_sum.append('A03')
    #         #         #     #             #     elif 'A04' in tmp_acvt_code:
    #         #         #     #             #         if 'Complete' in tmp_acvt_status:
    #         #         #     #             #             tmp_status_sum.append('Complete_input')
    #         #         #     #             #         elif 'Incomplete' in tmp_acvt_status:
    #         #         #     #             #             tmp_status_sum.append('Incomplete_input')
    #         #         #     #             #         tmp_acvt_code_sum.append('A04')

    #         #         #     #                     # print(tmp_acvt_code)
    #         #         #     #                     # print(step_status)
    #         #         #     #                     # print(tmp_sicode)
    #         #         #     #                     # print(tmp_acvt_status)
    #         #         #     #         # print(tmp_status_sum , tmp_sicode)
    #         #         #     #         # return ''
    #         #         #     #         if len(tmp_status_sum) != 0:
    #         #         #     #             count_email = tmp_sum_email.count(self.emailUser)
    #         #         #     #             for zzi in range(len(step_infomation)):
    #         #         #     #                 list_check_step = []
    #         #         #     #                 json_step_info_2 = {}
    #         #         #     #                 step_list_data = []
    #         #         #     #                 step_status = []
    #         #         #     #                 step_ = step_infomation[zzi]
    #         #         #     #                 step_num = step_infomation[zzi]['step_num']
    #         #         #     #                 json_step_info_2['step_status'] = ''
    #         #         #     #                 tmp_step_detail = step_['step_detail']
                                        
    #         #         #     #                 for zi in range(len(tmp_step_detail)):
    #         #         #     #                     tmp_arr_step_detail_2 = tmp_step_detail[zi]
    #         #         #     #                     oneMail = str(tmp_arr_step_detail_2['one_email']).replace(' ','').lower()            
    #         #         #     #                     tmp_step_me = int(step_num) - 1
    #         #         #     #                     step_num_int2 = int(step_num)
    #         #         #     #                     # if len(arr_step_info) != 0:
    #         #         #     #                     #     break
    #         #         #     #                     # if tmp_sicode == 'd3aa8f08-f1d9-4e14-a2be-2c5a094a47aa':
    #         #         #     #                     #     print(step_num_int2)
    #         #         #     #                     #     print(len(tmp_status_sum) , tmp_step_me)
    #         #         #     #                     #     print(tmp_status_sum)
    #         #         #     #                     #     print(oneMail, oneMail == self.emailUser , tmp_status_sum[tmp_step_me] == 'Incomplete',arr_step_info , tmp_status_sum[tmp_step_me])
    #         #         #     #                     #     print(tmp_status_sum[tmp_step_me])
    #         #         #     #                     stop = False
    #         #         #     #                     for ii in range(len(tmp_status_sum)):
    #         #         #     #                         if stop == False :
    #         #         #     #                             list_status = Counter(tmp_status_sum)
    #         #         #     #                             if 'Complete' in list_status and len(list_status) == 1 :
    #         #         #     #                                 step_now2 = len(tmp_status_sum)
    #         #         #     #                                 stop = True
    #         #         #     #                             elif tmp_status_sum[ii] == 'Incomplete' or tmp_status_sum[ii] == 'Reject' or tmp_status_sum[ii] == 'Approve':
    #         #         #     #                                 step_now2 = ii+1
    #         #         #     #                                 stop = True
    #         #         #     #                     if 'Reject' in tmp_status_sum:
    #         #         #     #                         step_now = step_num_int2
    #         #         #     #                         arr_step_info.append('Reject')
    #         #         #     #                     elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Incomplete_input':
    #         #         #     #                         step_now = step_num_int2
    #         #         #     #                         arr_step_info.append('Wait_input')
    #         #         #     #                     elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Incomplete_1':
    #         #         #     #                         step_now = step_num_int2
    #         #         #     #                         arr_step_info.append('Incomplete')
    #         #         #     #                     elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Incomplete':                                        
    #         #         #     #                         if self.emailUser not in arr_email_list:
    #         #         #     #                             index_step_me = tmp_step_me
    #         #         #     #                             if index_step_me != 0:
    #         #         #     #                                 while index_step_me > 0:
    #         #         #     #                                     if len(arr_step_info) == 0:
    #         #         #     #                                         index_step_me = index_step_me - 1
    #         #         #     #                                         if tmp_status_sum[index_step_me] == 'Incomplete_1':
    #         #         #     #                                             step_now = step_num_int2
    #         #         #     #                                             arr_step_info.append('Incomplete')
    #         #         #     #                                         elif tmp_status_sum[index_step_me] == 'Incomplete':
    #         #         #     #                                             step_now = step_num_int2
    #         #         #     #                                             arr_step_info.append('Incomplete')
    #         #         #     #                                         else:
    #         #         #     #                                             step_now = step_num_int2
    #         #         #     #                                             arr_step_info.append('Wait')
    #         #         #     #                                         arr_email_list.append(self.emailUser)
    #         #         #     #                                     else:
    #         #         #     #                                         index_step_me = index_step_me - 1
    #         #         #     #                                         continue
    #         #         #     #                             else:
    #         #         #     #                                 step_now = step_num_int2
    #         #         #     #                                 arr_step_info.append('Wait')                                            
    #         #         #     #                     elif oneMail == self.emailUser and tmp_status_sum[tmp_step_me] == 'Complete':                                    
    #         #         #     #                         if self.emailUser not in arr_email_list:
    #         #         #     #                             if count_email == 1:
    #         #         #     #                                 for nz in range(step_num_int2,len(tmp_status_sum),1):
    #         #         #     #                                     if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
    #         #         #     #                                         step_now = step_num_int2
    #         #         #     #                                         arr_step_info.append('Wait')
    #         #         #     #                                     elif self.emailUser not in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
    #         #         #     #                                         step_now = step_num_int2
    #         #         #     #                                         arr_step_info.append('Progress')
    #         #         #     #                                 arr_email_list.append(self.emailUser)
    #         #         #     #                             else:                                                
    #         #         #     #                                 for nz in range(step_num_int2,len(tmp_status_sum),1):
    #         #         #     #                                     if self.emailUser not in arr_email_list:
    #         #         #     #                                         if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Complete':
    #         #         #     #                                             pass                                                    
    #         #         #     #                                         if self.emailUser in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
    #         #         #     #                                             step_now = step_num_int2
    #         #         #     #                                             arr_step_info.append('Wait')
    #         #         #     #                                             arr_email_list.append(self.emailUser)
    #         #         #     #                                         if self.emailUser not in email_step_sum[nz] and tmp_status_sum[nz] == 'Incomplete':
    #         #         #     #                                             step_now = step_num_int2
    #         #         #     #                                             arr_step_info.append('Progress')
    #         #         #     #                                             arr_email_list.append(self.emailUser)
                                                                
                                            
    #         #         #     #                     if step_now == None:                                  
    #         #         #     #                         step_now = step_num_int2
    #         #         #     #             if 'Reject' in arr_step_info:
    #         #         #     #                 res_status_file = 'R'
    #         #         #     #                 res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
    #         #         #     #             elif 'Wait_input' in arr_step_info:
    #         #         #     #                 res_status_file = 'WI'
    #         #         #     #                 res_status_file_string = 'รอคุณกรอกข้อมูล'
    #         #         #     #             elif 'Progress' in arr_step_info and 'Wait' in arr_step_info:
    #         #         #     #                 res_status_file = 'Z'
    #         #         #     #                 res_status_file_string = 'อยู่ในช่วงดำเนินการ'
    #         #         #     #             elif 'Wait' in arr_step_info:
    #         #         #     #                 res_status_file = 'W'
    #         #         #     #                 res_status_file_string = 'รอคุณอนุมัติ'
    #         #         #     #             elif 'Incomplete' in arr_step_info:
    #         #         #     #                 res_status_file = 'Z'
    #         #         #     #                 res_status_file_string = 'อยู่ในช่วงดำเนินการ'
    #         #         #     #             elif 'Progress' in arr_step_info:
    #         #         #     #                 res_status_file = 'N'
    #         #         #     #                 res_status_file_string = 'กำลังดำเนินการ'                    
    #         #         #     #             elif arr_step_info.count('Incomplete') >= 2:
    #         #         #     #                 res_status_file = 'Z'
    #         #         #     #                 res_status_file_string = 'อยู่ในช่วงดำเนินการ'
    #         #         #     #             elif 'Incomplete' in arr_step_info and 'Complete' in arr_step_info:
    #         #         #     #                 res_status_file = 'N'
    #         #         #     #                 res_status_file_string = 'กำลังดำเนินการ'
    #         #         #     #             else:
    #         #         #     #                 res_status_file_string = 'อนุมัติแล้ว'
    #         #         #     # else:
    #         #         #     #     max_step = (len(jsonData_eval)) - 1
    #         #         #     #     if tmpstatus_file == 'Y':
    #         #         #     #         step_now2 = max_step
    #         #         #     #         res_status_file = 'Y'
    #         #         #     #         res_status_file_string = 'อนุมัติแล้ว'
    #         #         #     #     elif tmpstatus_file == 'R':
    #         #         #     #         res_status_file = 'R'
    #         #         #     #         res_status_file_string = 'ปฏิเสธอนุมัติ'
    #         #         #     #     # print(tmpstatus_file)       
                    
    #         #         #     # if query_temp[u][z] != None:
    #         #         #     #     tmp_dict_json = query_temp[u][z].__dict__
    #         #         #     #     if '_sa_instance_state' in tmp_dict_json:
    #         #         #     #         del tmp_dict_json['_sa_instance_state']
    #         #         #     #     print(tmp_dict_json)
    #         #         #     #     tmp_data_group = tmp_dict_json['data_group']
    #         #         #     #     tmp_date_time_group = tmp_dict_json['updatetime']
                    
    #         #         # tmp_sid_code_group = []
    #         #         # if z == 2:
    #         #         #     tmp_dict_json = query_temp[u][z].__dict__
    #         #         #     if '_sa_instance_state' in tmp_dict_json:
    #         #         #         del tmp_dict_json['_sa_instance_state']
    #         #         #     tmp_group_id = tmp_dict_json['group_id']
                        
                    
    #         #         # if len(tmp_sid_code_group) != 0:
    #         #         #     for z in range(len(tmp_sid_code_group)):
    #         #         #         if tmp_sicode == tmp_sid_code_group[z]:
    #         #         #             print(tmp_sicode)
    #         #         list_temp_query.append(tmp_dict_json)
    #         #         dateTime_String = tmp_send_time
    #         #         th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
    #         #         ts = int(time.time())
    #         #         date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
    #         #         year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
    #         #         datetime_display = int(dateTime_String.timestamp())
    #         #         date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
    #         #         yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
    #         #         time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
    #         #         old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
    #         #         if date_time_today == date_time_db:
    #         #             date_display_show = time_show_db
    #         #         else:
    #         #             if year_today == yar_db:
    #         #                 date_display_show = convert_datetime_TH_2_display(datetime_display)
    #         #             else:
    #         #                 date_display_show = old_year
    #         #     count_rowDocument = len(tmp_sid_code_list)
    #         #     json_Data['sum_Document']  = count_rowDocument
    #         #     json_Data['DocumentInfo'] = {
    #         #         'Document_Active':count_rowDocument_StatusActive,
    #         #         'Document_Reject':count_rowDocument_StatusReject,
    #         #         'Document_Cancel':count_rowDocument_StatusCancel
    #         #     }
    #         #     step_now2 = 0
    #         #     # print(step_now2)
    #         #     int_step_now2 = step_now2 - 1
    #         #     tmp_req_email = []
    #         #     res_status_file = 'Y'
    #         #     res_status_file_string = 'อนุมัติ'
    #         #     max_step = 0
    #         #     email_step_sum = []
    #         #     # if res_status_file == 'W':
    #         #     #     statusFile_count_wait = statusFile_count_wait + 1
    #         #     # elif res_status_file == 'Y':
    #         #     #     statusFile_count_approve = statusFile_count_approve + 1
    #         #     # elif res_status_file == 'R':
    #         #     #     statusFile_count_reject = statusFile_count_reject + 1
    #         #     # else:
    #         #     #     statusFile_count_pendding = statusFile_count_pendding + 1
    #         # # return ''
    #         #     if tmp_status_group == True:
    #         #         # for ui in range(len(tmpstepnum)):
    #         #         #     intstepnum = tmpstepnum[ui] - 2
    #         #         #     # print(intstepnum)
    #         #         #     # print(email_step_sum)
    #         #         #     # print(tmp_sicode)
    #         #         #     # print(email_step_sum[intstepnum])
    #         #         #     for zy in range(len(email_step_sum[intstepnum])):
    #         #         #         tmp_req_email.append(email_step_sum[intstepnum][zy])
    #         #         if self.emailUser in tmp_req_email:
    #         #             if res_status_file == 'Y':
    #         #                 list_arr.append({
    #         #                     'group_email':tmp_req_email,
    #         #                     'group_id':None,
    #         #                     'group_status':tmp_status_group,
    #         #                     'sidCode':tmp_sicode,
    #         #                     'document_name':documentName,
    #         #                     'document_type':tmp_document_type,
    #         #                     'document_urgent':documentUrgentType,
    #         #                     'document_urgent_string':documentUrgentString,
    #         #                     'dateTime_String':str(dateTime_String).split('+')[0],
    #         #                     'dateTime_String_TH_1':th_dateTime_2,
    #         #                     'dateTime_display':date_display_show,
    #         #                     'document_id':tmp_document_id,
    #         #                     'stamp_all':tmp_sign_page_options,
    #         #                     'options_page_document':tmp_options_page,
    #         #                     'max_step':max_step,
    #         #                     'step_now':step_now2,
    #         #                     # 'dateTime_String_TH_2':th_dateTime_2,
    #         #                     'date_String':str(dateTime_String).split(' ')[0],
    #         #                     'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
    #         #                     'status_file_code':res_status_file,
    #         #                     'status_file_string':res_status_file_string,
    #         #                     'dateTime':int(dateTime_String.timestamp()),
    #         #                     'tracking_id':tmp_tracking_id,
    #         #                     'sender_name':tmp_sender_name,
    #         #                     'sender_email':tmp_sender_email,
    #         #                     'file_name':tmp_file_name,
    #         #                     'document_business':tmp_biz_info
    #         #                 })
    #         #         else:
    #         #             list_arr.append({
    #         #                 'group_email':tmp_req_email,
    #         #                 'group_id':None,
    #         #                 'group_status':tmp_status_group,
    #         #                 'sidCode':tmp_sicode,
    #         #                 'document_name':documentName,
    #         #                 'document_type':tmp_document_type,
    #         #                 'document_urgent':documentUrgentType,
    #         #                 'document_urgent_string':documentUrgentString,
    #         #                 'dateTime_String':str(dateTime_String).split('+')[0],
    #         #                 'dateTime_String_TH_1':th_dateTime_2,
    #         #                 'dateTime_display':date_display_show,
    #         #                 'document_id':tmp_document_id,
    #         #                 'stamp_all':tmp_sign_page_options,
    #         #                 'options_page_document':tmp_options_page,
    #         #                 'max_step':max_step,
    #         #                 'step_now':step_now2,
    #         #                 # 'dateTime_String_TH_2':th_dateTime_2,
    #         #                 'date_String':str(dateTime_String).split(' ')[0],
    #         #                 'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
    #         #                 'status_file_code':res_status_file,
    #         #                 'status_file_string':res_status_file_string,
    #         #                 'dateTime':int(dateTime_String.timestamp()),
    #         #                 'tracking_id':tmp_tracking_id,
    #         #                 'sender_name':tmp_sender_name,
    #         #                 'sender_email':tmp_sender_email,
    #         #                 'file_name':tmp_file_name,
    #         #                 'document_business':tmp_biz_info
    #         #             })
    #         #         # tmp_req_email = email_step_sum[int_step_now2]
    #         #     else:
    #         #         list_arr.append({
    #         #             'group_email':tmp_req_email,
    #         #             'group_id':None,
    #         #             'group_status':tmp_status_group,
    #         #             'sidCode':tmp_sicode,
    #         #             'document_name':documentName,
    #         #             'document_type':tmp_document_type,
    #         #             'document_urgent':documentUrgentType,
    #         #             'document_urgent_string':documentUrgentString,
    #         #             'dateTime_String':str(dateTime_String).split('+')[0],
    #         #             'dateTime_String_TH_1':th_dateTime_2,
    #         #             'dateTime_display':date_display_show,
    #         #             'document_id':tmp_document_id,
    #         #             'stamp_all':tmp_sign_page_options,
    #         #             'options_page_document':tmp_options_page,
    #         #             'max_step':max_step,
    #         #             'step_now':step_now2,
    #         #             # 'dateTime_String_TH_2':th_dateTime_2,
    #         #             'date_String':str(dateTime_String).split(' ')[0],
    #         #             'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
    #         #             'status_file_code':res_status_file,
    #         #             'status_file_string':res_status_file_string,
    #         #             'dateTime':int(dateTime_String.timestamp()),
    #         #             'tracking_id':tmp_tracking_id,
    #         #             'sender_name':tmp_sender_name,
    #         #             'sender_email':tmp_sender_email,
    #         #             'file_name':tmp_file_name,
    #         #             'document_business':tmp_biz_info
    #         #         })
    #         # json_Data['Document_Status_Details']  = {
    #         #     'Incomplete_Pendding':statusFile_count_pendding,
    #         #     'Complete_Approve':statusFile_count_approve,
    #         #     'Reject':statusFile_count_reject,
    #         #     'Wait':statusFile_count_wait
    #         # }
    #         # list_arr = sorted(list_arr, key=lambda k: k['dateTime'], reverse=True)
    #         # json_Data['Document_Details'] = list_arr
    #         # return {'result':'OK','messageText':json_Data,'status_Code':200,'messageER':None}
            
    #     except Exception as ex:
    #         exc_type, exc_obj, exc_tb = sys.exc_info()
    #         fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
    #         print(exc_type, fname, exc_tb.tb_lineno)
    #         return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}
    #     finally:
    #         db.session.close()

    def select_dashboard_recipient_v7_list(self,emailUser,datetime_start,datetime_end,tmptimeapprove=None):
        self.emailUser = emailUser
        self.datetime_start = datetime_start
        self.datetime_end = datetime_end
        self.tmptimeapprove = tmptimeapprove
        if self.tmptimeapprove != None:
            self.tmptimeapprove = tmptimeapprove
        sid_list = []
        sid_list_email = []
        json_Data = {}
        list_arr = []
        list_json = []
        try:
            tmp_list = []             
            count_rowDocument = 0
            count_rowDocument_StatusActive = 0
            count_rowDocument_StatusReject = 0
            count_rowDocument_StatusCancel = 0
            statusFile_count_approve = 0
            statusFile_count_pendding = 0
            statusFile_count_reject = 0
            statusFile_count_wait = 0
            list_temp_query = []
            tmp_sid_code_list = []
            arr_gruop = []
            arr_group_sid = []
            tmp_arr_sid = []
            tmp_group_id = None
            str_time = (time.time())
            date_start_tmp = datetime.datetime.fromtimestamp(self.datetime_start)
            date_end_tmp = datetime.datetime.fromtimestamp(self.datetime_end)
            if self.tmptimeapprove == True:
                query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep,paper_lessdatastep.update_time)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(or_(and_(paper_lessdatastep.update_time <= date_end_tmp,paper_lessdatastep.update_time >= date_start_tmp),and_(paper_lesssender.send_time <= date_end_tmp,paper_lesssender.send_time >= date_start_tmp)))\
                    .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.contains(self.emailUser))\
                    .order_by(desc(paper_lessdatastep.update_time))\
                    .all() 
            else:
                query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep,paper_lessdatastep.update_time)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(or_(and_(paper_lessdatastep.update_time <= date_end_tmp,paper_lessdatastep.update_time >= date_start_tmp),and_(paper_lesssender.send_time <= date_end_tmp,paper_lesssender.send_time >= date_start_tmp)))\
                    .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.recipient_email.contains(self.emailUser))\
                    .order_by(desc(paper_lesssender.send_time))\
                    .all() 
            # print(query_temp)
            end_time = (time.time())
            print(end_time -str_time)
            arr = []
            for u in range(len(query_temp)):
                arr_email_document = []
                tmp_req_email = []
                for z in range(len(query_temp[u])):
                    if z == 0:
                        tmp_dict = query_temp[u][2].__dict__
                        update_time = tmp_dict['update_time']
                        tmp_dict_json = query_temp[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state']) 
                        tmp_sicode = tmp_dict_json['step_data_sid']
                        tmp_sid_code_list.append(tmp_sicode)
                        tmp_send_time = tmp_dict_json['send_time']
                        # print(date_start_tmp)
                        # if str(date_start_tmp) >= str(tmp_send_time).split('+')[0] and str(tmp_send_time).split('+')[0] <= str(date_end_tmp):
                        #     tmp_timepaper = 'new'
                        #     if str(update_time).split('+')[0] == ''
                        # print(str(tmp_send_time).split('+')[0].split(':')[0])
                        if str(tmp_send_time).split('+')[0] == str(update_time).split('+')[0]:
                            tmp_timepaper = 'new'
                        else:
                            tmp_timepaper = 'update'
                        tmp_document_id = tmp_dict_json['doc_id']
                        tmp_tracking_id = tmp_dict_json['tracking_id']
                        tmp_sender_name = tmp_dict_json['sender_name']
                        tmp_sender_email = tmp_dict_json['sender_email']
                        tmp_file_name = tmp_dict_json['file_name']
                        tmp_groupid = tmp_dict_json['group_id']
                        tmpstatus_detail = tmp_dict_json['status_details']
                        tmpdocument_status = tmp_dict_json['document_status']
                        tmpstepnow = tmp_dict_json['stepnow']
                        if tmpstepnow != None:
                            tmpstepnow = int(tmpstepnow)
                        tmpstepmax = tmp_dict_json['stepmax']
                        if tmpstepmax != None:
                            tmpstepmax = int(tmpstepmax)
                        status_groupid = False
                        if tmp_groupid != None:
                            tmp_groupid = eval(tmp_groupid)
                            if len(tmp_groupid) != 0:
                                status_groupid = True
                        if tmpstatus_detail != None:
                            tmpstatus_detail = eval(tmpstatus_detail)
                            if tmpdocument_status == 'N':
                                for x in range(len(tmpstatus_detail)):
                                    # print(tmp_sicode)
                                    # print(tmpstatus_detail[x])
                                    if self.emailUser not in arr_email_document:
                                        if self.emailUser in tmpstatus_detail[x]['email']:
                                            if tmpstatus_detail[x]['step_status_code'] == 'W':
                                                arr_email_document.append(self.emailUser)
                                                tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                                                break
                                            else:
                                                tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                        res_status_file_string = 'อนุมัติแล้ว'
                        if tmpdocument_status == 'Z':
                            res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                        elif tmpdocument_status == 'W':
                            res_status_file_string = 'รอคุณอนุมัติ'
                        elif tmpdocument_status == 'N':
                            res_status_file_string = 'กำลังดำเนินการ'
                        elif tmpdocument_status == 'R':
                            res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                                            # else:

                        # print(tmpstatus_detail)
                    if z == 1:
                        tmp_document_type = None
                        tmp_dict_json = query_temp[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state'])
                        tmp_sign_page_options = tmp_dict_json['sign_page_options']
                        tmp_document_type = tmp_dict_json['documentType']
                        tmp_options_page = []
                        if tmp_dict_json['options_page'] != None:
                            if tmp_dict_json['options_page'] != '':
                            # print(tmp_dict_json['options_page'],tmp_document_id)
                                tmp_options_page = [eval(tmp_dict_json['options_page'])]
                        else:
                            tmp_options_page = []
                        tmp_status_group = False
                        if len(tmp_options_page) != 0:
                            # print(tmp_options_page[0]['group_detail'])
                            
                            if status_groupid == True:
                                if len(tmp_options_page) != 0:
                                    if 'group_detail' in tmp_options_page[0]:
                                        tmp_group_detail = tmp_options_page[0]['group_detail']
                                        if 'group_status' in tmp_group_detail:
                                            if tmp_group_detail['group_status'] == True:
                                                tmp_status_group = True
                                                tmpstepnum = tmp_group_detail['step_num']
                        if tmp_dict_json['documentJson'] != None:
                            documentJson_result = eval(tmp_dict_json['documentJson'])
                            documentName = documentJson_result['document_name']
                            documentType = documentJson_result['document_type']
                        else:
                            documentName = None
                            documentType = None
                        if tmp_dict_json['urgent_type'] != None:
                            documentUrgentType = tmp_dict_json['urgent_type']
                            if documentUrgentType == 'I':
                                documentUrgentString = 'ด่วนมาก'
                            elif documentUrgentType == 'U':
                                documentUrgentString = 'ด่วน'
                            elif documentUrgentType == 'M':
                                documentUrgentString = 'ปกติ'
                    tmp_biz_info_json = None
                    if z == 2:
                        tmp_dict_json = query_temp[u][z].__dict__
                        tmp_biz_info = tmp_dict_json['biz_info']
                        if tmp_biz_info != None:
                            if tmp_biz_info != 'None':
                                
                                eval_biz_info = json.dumps(tmp_biz_info)
                                eval_biz_info = json.loads(eval_biz_info)
                                eval_biz_info = eval(eval_biz_info)
                                # eval_biz_info
                                # print(eval_biz_info)
                                if 'dept_name' in eval_biz_info:            
                                    tmp_biz_info_json = {
                                        'tax_id':eval_biz_info['id_card_num'],
                                        'role_name' : eval_biz_info['role_name'],
                                        'dept_name' : eval_biz_info['dept_name'],
                                        'role_level' : eval_biz_info['role_level']               
                                    }                                
                                elif 'dept_name' not in eval_biz_info:
                                    tmp_biz_info_json = {
                                        'tax_id':eval_biz_info['id_card_num'],
                                        'role_name' : eval_biz_info['role_name'],
                                        'dept_name' : [],
                                        'role_level' : eval_biz_info['role_level']               
                                    }

                    if z == 3:
                        tmptime_update = (query_temp[u][z])
                        tmptime_update_timestamp = int(tmptime_update.timestamp())
                        tmptime_update_string = str(tmptime_update).split('+')[0]
                        th_dateTime_2_last = convert_datetime_TH_2(int(tmptime_update.timestamp()))
                        # print(th_dateTime_2_last,tmptime_update)
                        ts = int(time.time())
                        date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                        year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                        datetime_display_update = int(tmptime_update.timestamp())
                        date_time_db = datetime.datetime.fromtimestamp(datetime_display_update).strftime('%Y-%m-%d')
                        yar_db = datetime.datetime.fromtimestamp(datetime_display_update).strftime('%Y')
                        time_show_db = datetime.datetime.fromtimestamp(datetime_display_update).strftime('%H:%M')
                        old_year = datetime.datetime.fromtimestamp(datetime_display_update).strftime('%d/%m/%Y')
                        if date_time_today == date_time_db:
                            date_last_display_show = time_show_db
                        else:
                            if year_today == yar_db:
                                date_last_display_show = convert_datetime_TH_2_display(datetime_display_update)
                            else:
                                date_last_display_show = old_year

                    dateTime_String = tmp_send_time
                    th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                    ts = int(time.time())
                    date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                    year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                    datetime_display = int(dateTime_String.timestamp())
                    date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                    yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                    time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                    old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                    if date_time_today == date_time_db:
                        date_display_show = time_show_db
                    else:
                        if year_today == yar_db:
                            date_display_show = convert_datetime_TH_2_display(datetime_display)
                        else:
                            date_display_show = old_year
                if tmp_status_group == True:
                    for ui in range(len(tmpstepnum)):
                        intstepnum = tmpstepnum[ui] - 1
                        tmp_req_email.append(email_step_sum[intstepnum])
                list_arr.append({
                    'group_email':tmp_req_email,
                    'group_id':None,
                    'group_status':tmp_status_group,
                    'sidCode':tmp_sicode,
                    'document_name':documentName,
                    'document_type':tmp_document_type,
                    'document_urgent':documentUrgentType,
                    'document_urgent_string':documentUrgentString,
                    'dateTime_String':str(dateTime_String).split('+')[0],
                    'dateTime_String_TH_1':th_dateTime_2,
                    'dateTime_display':date_display_show,
                    'document_id':tmp_document_id,
                    'stamp_all':tmp_sign_page_options,
                    'options_page_document':tmp_options_page,
                    'max_step':tmpstepmax,
                    'step_now':tmpstepnow,
                    # 'dateTime_String_TH_2':th_dateTime_2,
                    'date_String':str(dateTime_String).split(' ')[0],
                    'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                    'status_file_code':tmpdocument_status,
                    'status_file_string':res_status_file_string,
                    'dateTime':int(dateTime_String.timestamp()),
                    'tracking_id':tmp_tracking_id,
                    'sender_name':tmp_sender_name,
                    'sender_email':tmp_sender_email,
                    'file_name':tmp_file_name,
                    'document_business':tmp_biz_info_json,
                    'time_paper': tmp_timepaper,
                    'update_last':tmptime_update,
                    'update_last_String_TH_1':th_dateTime_2_last,
                    'update_last_display':date_last_display_show,
                    'update_last_String':tmptime_update_string,
                    'update_last_TimeStamp':tmptime_update_timestamp,
                })
            list_arr = sorted(list_arr, key=lambda k: k['dateTime'], reverse=True)
            if self.tmptimeapprove == True:
                list_arr = sorted(list_arr, key=lambda k: k['update_last_TimeStamp'], reverse=True)
            json_Data['Document_Details'] = list_arr
                    # arr.append(tmp_dict_json)
            return {'result':'OK','messageText':json_Data}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}
        finally:
            db.session.close()

    
    def select_data_edit(self,sid_list):
        self.sid_list = sid_list
        try:
            for x in range(len(self.sid_list)):
                tmp_sidcode = self.sid_list[x]
                tmp_json =paper_lessdocument.query.filter(paper_lessdocument.step_id==tmp_sidcode).first()
                tmp_opt_page = eval(tmp_json.options_page)
                tmp_grp = tmp_opt_page['group_detail']
                print(tmp_grp['group_status'])
                tmp_grp['group_status'] = False
                tmp_json.options_page = str(tmp_opt_page)
                print(tmp_sidcode)
                db.session.commit()
        except Exception as e:
            print(str(e))
        finally:
            db.session.close()

    def select_data_edit_v2(self,sid_list):
        self.sid_list = sid_list
        try:
            for x in range(len(self.sid_list)):
                tmp_sidcode = self.sid_list[x]
                tmp_json =paper_lesssender.query.filter(paper_lesssender.step_data_sid==tmp_sidcode).first()
                # tmp_opt_page = eval(tmp_json.options_page)
                # tmp_grp = tmp_opt_page['group_detail']
                # print(tmp_grp['group_status'])
                # tmp_grp['group_status'] = False
                tmp_json.document_status = 'Y'
                db.session.commit()
        except Exception as e:
            print(str(e))
        finally:
            db.session.close()

    def select_data_groupform(self):
        tmp_sid_code_list = []
        try:
            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(paper_lesssender.status=='ACTIVE')\
                    .filter(paper_lesssender.send_time>='2020-04-15 10:00:00')\
                    .filter(paper_lessdocument.documentType=='SCS')\
                    .order_by(desc(paper_lesssender.send_time))\
                    .all()
            
            for u in range(len(query_temp)):
                arr_email_document = []
                tmp_req_email = []
                email_step_sum_w = []
                for z in range(len(query_temp[u])):
                    if z == 0:
                        tmp_dict_json = query_temp[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state']) 
                        tmp_sicode = tmp_dict_json['step_data_sid']
                        tmp_sid_code_list.append(tmp_sicode)
            
            return tmp_sid_code_list
        except Exception as e:
            print(str(e))
        finally:
            db.session.close()
        
    def select_filter_template(self,sidcode):
        self.sidcode = sidcode
        arr_stepcode = []
        try:
            query_temp = db.session.query(paper_lesstrack,paper_lessdocument)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesstrack.step_data_sid)\
                .filter(paper_lesstrack.step_data_sid.in_(self.sidcode))\
                .filter(not_(paper_lessdocument.options_page.contains('group_detail')))\
                .all()
            for z in range(len(query_temp)):
                tmpjson = {}
                for x in range(len(query_temp[z])):
                    if x == 0:
                        tmpjson['stepcode'] =query_temp[z][x].step_Code
                        tmpjson['sidcode'] =query_temp[z][x].step_data_sid
                        
                    if x == 1:
                        tmpjson['document_id'] =query_temp[z][x].document_id
                arr_stepcode.append(tmpjson)
            return (arr_stepcode)
        except Exception as e:
            print(str(e))
        finally:
            db.session.close()

    def edit_group_detail(self,sidcode):
        self.sidcode = sidcode
        for x in range(len(sidcode)):
            tmpsidcode = sidcode[x]['sidcode']
            tmpstepcode = sidcode[x]['stepcode']
            # if tmpstepcode == '33da0fdb-a8a9-4177-9506-5acf60232fbf':
            #     query_temp = db.session.query(paper_lessdocument).filter(paper_lessdocument.step_id==tmpsidcode).first()
            #     strjson = eval(query_temp.options_page)
            #     strjson['group_detail'] = {'assign_email': [], 'email_viewgroup': [], 'group_progress': False, 'group_status': True, 'group_type': '', 'step_num': [4]}
            #     query_temp.options_page = str(strjson)
            #     db.session.commit()
            # if tmpstepcode == '3be56b03-5edd-4258-8eec-696b5bd6c262' or tmpstepcode == 'de595399-ac55-47bf-a5a4-6ca89d76062c':
            #     query_temp = db.session.query(paper_lessdocument).filter(paper_lessdocument.step_id==tmpsidcode).first()
            #     strjson = eval(query_temp.options_page)
            #     strjson['group_detail'] = {'assign_email': [], 'email_viewgroup': [], 'group_progress': False, 'group_status': True, 'group_type': '', 'step_num': [5, 6, 7]}
            #     query_temp.options_page = str(strjson)
            #     db.session.commit()
            if tmpstepcode == '48913591-98a8-4ae5-a8bf-ba0f3acaacbb' or tmpstepcode == '197d6d73-d58a-4539-8eb2-14d2c4e3e1b3':
                query_temp = db.session.query(paper_lessdocument).filter(paper_lessdocument.step_id==tmpsidcode).first()
                strjson = eval(query_temp.options_page)
                strjson['group_detail'] = {'assign_email': [], 'group_progress': False, 'group_status': True, 'group_type': '', 'step_num': [5, 6, 7, 8]}
                query_temp.options_page = str(strjson)
                db.session.commit()
                db.session.close()
            


    def select_dashboard_sender_v3_sum(self,username,emailUser):
        self.username = username
        self.emailUser = emailUser
        sid_list = []
        sid_list_email = []
        json_Data = {}
        list_arr = []
        list_json = []
        try:
            tmp_list = []
             
            count_rowDocument = 0
            count_rowDocument_StatusActive = 0
            count_rowDocument_StatusReject = 0
            count_rowDocument_StatusCancel = 0
            statusFile_count_approve = 0
            statusFile_count_pendding = 0
            statusFile_count_reject = 0
            statusFile_count_wait = 0
            statusFile_count_wait_group = 0
            statusFile_count_Z_group = 0
            statusFile_count_pendding_group = 0
            statusFile_count_Z = 0
            list_temp_query = []
            tmp_sid_code_list = []
            str_time = (time.time())
            
            statusFile_count_reject = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                .filter(paper_lesssender.document_status=='R')\
                .order_by(desc(paper_lesssender.send_time))\
                .count()
            statusFile_count_reject_group = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                .filter(paper_lesssender.document_status=='R')\
                .order_by(desc(paper_lesssender.send_time))\
                .count()
            statusFile_count_approve = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                .filter(paper_lesssender.document_status=='Y')\
                .order_by(desc(paper_lesssender.send_time))\
                .count()
            statusFile_count_approve_group = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                .filter(paper_lesssender.document_status=='Y')\
                .order_by(desc(paper_lesssender.send_time))\
                .count()
            tmp_query = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                .filter(paper_lesssender.document_status=='N')\
                .order_by(desc(paper_lesssender.send_time))\
                .all()
            tmp_query_group = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                .filter(paper_lesssender.document_status=='N')\
                .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                .order_by(desc(paper_lesssender.send_time))\
                .all()
            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                .order_by(desc(paper_lesssender.send_time))\
                .count()
            query_temp_group = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                .order_by(desc(paper_lesssender.send_time))\
                .count()
            # print(statusFile_count_approve)
            # print(statusFile_count_reject)
            # print(query_temp)
            # return ''
            end_time = (time.time())
            print(end_time -str_time)
            
            arr = []
            for u in range(len(tmp_query_group)):
                arr_email_document = []
                tmp_req_email = []
                for z in range(len(tmp_query_group[u])):
                    if z == 0:
                        tmp_dict_json = tmp_query_group[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state']) 
                        
                        tmpdocument_status = tmp_dict_json['document_status']
                        tmpstatus_detail = tmp_dict_json['status_details']
                        if tmpstatus_detail != None:
                            tmpstatus_detail = eval(tmpstatus_detail)
                            if tmpdocument_status == 'N':
                                for x in range(len(tmpstatus_detail)):
                                    if self.emailUser not in arr_email_document:
                                        if self.emailUser in tmpstatus_detail[x]['email']:
                                            if tmpstatus_detail[x]['step_status_code'] == 'W':
                                                arr_email_document.append(self.emailUser)
                                                tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                                                break
                                            else:
                                                tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                        
                if tmpdocument_status == 'W':
                    statusFile_count_wait_group = statusFile_count_wait_group + 1
                elif tmpdocument_status == 'Z':
                    statusFile_count_Z_group = statusFile_count_Z_group + 1
                else:
                    statusFile_count_pendding_group = statusFile_count_pendding_group + 1
            for u in range(len(tmp_query)):
                arr_email_document = []
                tmp_req_email = []
                for z in range(len(tmp_query[u])):
                    if z == 0:
                        tmp_dict_json = tmp_query[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state']) 
                        
                        tmpdocument_status = tmp_dict_json['document_status']
                        tmpstatus_detail = tmp_dict_json['status_details']
                        if tmpstatus_detail != None:
                            tmpstatus_detail = eval(tmpstatus_detail)
                            if tmpdocument_status == 'N':
                                for x in range(len(tmpstatus_detail)):
                                    if self.emailUser not in arr_email_document:
                                        if self.emailUser in tmpstatus_detail[x]['email']:
                                            if tmpstatus_detail[x]['step_status_code'] == 'W':
                                                arr_email_document.append(self.emailUser)
                                                tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                                                break
                                            else:
                                                tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                        
                if tmpdocument_status == 'W':
                    statusFile_count_wait = statusFile_count_wait + 1
                elif tmpdocument_status == 'Z':
                    statusFile_count_Z = statusFile_count_Z + 1
                else:
                    statusFile_count_pendding = statusFile_count_pendding + 1
            json_Data['Document_Status_Details']  = {
                'status_Z':statusFile_count_Z,
                'Incomplete_Pendding':statusFile_count_pendding,
                'Complete_Approve':statusFile_count_approve,
                'Reject':statusFile_count_reject,
                'Wait':statusFile_count_wait
            }            
            json_Data['document_group_details']  = {
                'status_Z':statusFile_count_Z_group,
                'Incomplete_Pendding':statusFile_count_pendding_group,
                'Complete_Approve':statusFile_count_approve_group,
                'Reject':statusFile_count_reject_group,
                'Wait':statusFile_count_wait_group
            }
            json_Data['sum_Document'] = query_temp
            json_Data['document_status_group'] = query_temp_group
            return {'result':'OK','messageText':json_Data}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}
        finally:
            db.session.close()

    def select_dashboard_sender_v3_sum_filter(self,username,emailUser,document_type):
        self.username = username
        self.emailUser = emailUser
        self.document_type = document_type
        sid_list = []
        sid_list_email = []
        json_Data = {}
        list_arr = []
        list_json = []
        try:
            tmp_list = []
             
            count_rowDocument = 0
            count_rowDocument_StatusActive = 0
            count_rowDocument_StatusReject = 0
            count_rowDocument_StatusCancel = 0
            statusFile_count_approve = 0
            statusFile_count_pendding = 0
            statusFile_count_reject = 0
            statusFile_count_wait = 0
            statusFile_count_wait_group = 0
            statusFile_count_approve_group = 0
            statusFile_count_pendding_group = 0
            statusFile_count_reject_group = 0
            statusFile_count_Z_group = 0
            statusFile_count_Z = 0
            list_temp_query = []
            tmp_sid_code_list = []
            str_time = (time.time())
            statusFile_count_reject = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                .filter(paper_lesssender.document_status=='R')\
                .filter(paper_lessdocument.documentType==self.document_type)\
                .order_by(desc(paper_lesssender.send_time))\
                .count()
            statusFile_count_reject_group = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                .filter(paper_lesssender.document_status=='R')\
                .filter(paper_lessdocument.documentType==self.document_type)\
                .order_by(desc(paper_lesssender.send_time))\
                .count()
            statusFile_count_approve = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                .filter(paper_lesssender.document_status=='Y')\
                .filter(paper_lessdocument.documentType==self.document_type)\
                .order_by(desc(paper_lesssender.send_time))\
                .count()
            statusFile_count_approve_group = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                .filter(paper_lesssender.document_status=='Y')\
                .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                .filter(paper_lessdocument.documentType==self.document_type)\
                .order_by(desc(paper_lesssender.send_time))\
                .count()
            tmp_query = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                .filter(paper_lesssender.document_status=='N')\
                .filter(paper_lessdocument.documentType==self.document_type)\
                .order_by(desc(paper_lesssender.send_time))\
                .all()
            tmp_query_group = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                .filter(paper_lesssender.document_status=='N')\
                .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                .filter(paper_lessdocument.documentType==self.document_type)\
                .order_by(desc(paper_lesssender.send_time))\
                .all()
            query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                .filter(paper_lessdocument.documentType==self.document_type)\
                .order_by(desc(paper_lesssender.send_time))\
                .count()
            query_temp_group = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                .order_by(desc(paper_lesssender.send_time))\
                .count()
            # print(statusFile_count_approve)
            # print(statusFile_count_reject)
            # print(query_temp)
            # return ''
            end_time = (time.time())
            print(end_time -str_time)
            
            arr = []
            for u in range(len(tmp_query)):
                arr_email_document = []
                tmp_req_email = []
                for z in range(len(tmp_query[u])):
                    if z == 0:
                        tmp_dict_json = tmp_query[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state']) 
                        
                        tmpdocument_status = tmp_dict_json['document_status']
                        tmpstatus_detail = tmp_dict_json['status_details']
                        if tmpstatus_detail != None:
                            tmpstatus_detail = eval(tmpstatus_detail)
                            if tmpdocument_status == 'N':
                                for x in range(len(tmpstatus_detail)):
                                    if self.emailUser not in arr_email_document:
                                        if self.emailUser in tmpstatus_detail[x]['email']:
                                            if tmpstatus_detail[x]['step_status_code'] == 'W':
                                                arr_email_document.append(self.emailUser)
                                                tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                                                break
                                            else:
                                                tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                        
                if tmpdocument_status == 'W':
                    statusFile_count_wait = statusFile_count_wait + 1
                elif tmpdocument_status == 'Z':
                    statusFile_count_Z = statusFile_count_Z + 1
                else:
                    statusFile_count_pendding = statusFile_count_pendding + 1
            for u in range(len(tmp_query_group)):
                arr_email_document = []
                tmp_req_email = []
                for z in range(len(tmp_query_group[u])):
                    if z == 0:
                        tmp_dict_json = tmp_query_group[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state']) 
                        
                        tmpdocument_status = tmp_dict_json['document_status']
                        tmpstatus_detail = tmp_dict_json['status_details']
                        if tmpstatus_detail != None:
                            tmpstatus_detail = eval(tmpstatus_detail)
                            if tmpdocument_status == 'N':
                                for x in range(len(tmpstatus_detail)):
                                    if self.emailUser not in arr_email_document:
                                        if self.emailUser in tmpstatus_detail[x]['email']:
                                            if tmpstatus_detail[x]['step_status_code'] == 'W':
                                                arr_email_document.append(self.emailUser)
                                                tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                                                break
                                            else:
                                                tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                        
                if tmpdocument_status == 'W':
                    statusFile_count_wait_group = statusFile_count_wait_group + 1
                elif tmpdocument_status == 'Z':
                    statusFile_count_Z_group = statusFile_count_Z_group + 1
                else:
                    statusFile_count_pendding_group = statusFile_count_pendding_group + 1
            json_Data['Document_Status_Details']  = {
                'status_Z':statusFile_count_Z,
                'Incomplete_Pendding':statusFile_count_pendding,
                'Complete_Approve':statusFile_count_approve,
                'Reject':statusFile_count_reject,
                'Wait':statusFile_count_wait
            }            
            json_Data['document_group_details']  = {
                'status_Z':statusFile_count_Z_group,
                'Incomplete_Pendding':statusFile_count_pendding_group,
                'Complete_Approve':statusFile_count_approve_group,
                'Reject':statusFile_count_reject_group,
                'Wait':statusFile_count_wait_group
            }
            json_Data['sum_Document'] = query_temp
            json_Data['document_status_group'] = query_temp_group
            return {'result':'OK','messageText':json_Data}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}
        finally:
            db.session.close()

    def select_dashboard_sender_v3_new_limitoffset(self,username,emailUser,limit,offset,group_status=None):
        self.username = username
        self.emailUser = emailUser
        if limit != '':
            self.limit = int(limit)
        else:
            self.limit = ''
        if offset != '':
            self.offset = int(offset)
        else:
            self.offset = ''
        self.group_status = group_status
        if self.group_status == None:
            self.group_status = group_status
                        
        sid_list = []
        sid_list_email = []
        json_Data = {}
        list_arr = []
        list_json = []
        try:
            tmp_list = []             
            count_rowDocument = 0
            count_rowDocument_StatusActive = 0
            count_rowDocument_StatusReject = 0
            count_rowDocument_StatusCancel = 0
            statusFile_count_approve = 0
            statusFile_count_pendding = 0
            statusFile_count_reject = 0
            statusFile_count_wait = 0
            list_temp_query = []
            tmp_sid_code_list = []
            arr_gruop = []
            arr_group_sid = []
            tmp_arr_sid = []
            tmp_group_id = None
            json_Data = {}
            str_time = (time.time())
            if self.limit != '' and self.offset != '':
                if self.group_status == None:
                    query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                        .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                        .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                        .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                        .order_by(desc(paper_lesssender.send_time))\
                        .limit(self.limit)\
                        .offset(self.offset)\
                        .all()
                elif self.group_status == True:
                    query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                        .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                        .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                        .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                        .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                        .order_by(desc(paper_lesssender.send_time))\
                        .limit(self.limit)\
                        .offset(self.offset)\
                        .all()
                elif self.group_status == False:
                    query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                        .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                        .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                        .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                        .order_by(desc(paper_lesssender.send_time))\
                        .limit(self.limit)\
                        .offset(self.offset)\
                        .all()
            else:
                query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                    .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                    .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                    .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                    .order_by(desc(paper_lesssender.send_time))\
                    .all()
            
            # print(query_temp)
            end_time = (time.time())
            print(end_time -str_time)
            
            
            
            arr = []
            for u in range(len(query_temp)):
                arr_email_document = []
                tmp_req_email = []
                email_step_sum_w = []
                for z in range(len(query_temp[u])):
                    if z == 0:
                        tmp_dict_json = query_temp[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state']) 
                        tmp_sicode = tmp_dict_json['step_data_sid']
                        tmp_sid_code_list.append(tmp_sicode)
                        tmp_send_time = tmp_dict_json['send_time']
                        tmp_document_id = tmp_dict_json['doc_id']
                        tmp_tracking_id = tmp_dict_json['tracking_id']
                        try:
                            tmp_sender_name = eval(tmp_dict_json['sender_name'])
                        except Exception as e:
                            tmp_sender_name = tmp_dict_json['sender_name']                        
                        tmp_sender_email = tmp_dict_json['sender_email']
                        tmp_file_name = tmp_dict_json['file_name']
                        tmp_groupid = tmp_dict_json['group_id']
                        email_step_sum = tmp_dict_json['recipient_email']
                        if email_step_sum != None:
                            email_step_sum = eval(email_step_sum)
                        # print(email_step_sum)
                        tmpstatus_detail = tmp_dict_json['status_details']
                        tmpdocument_status = tmp_dict_json['document_status']
                        tmpstepnow = tmp_dict_json['stepnow']
                        status_groupid = False                       
                        if tmp_groupid != None:
                            if tmp_groupid != "":
                                tmp_groupid = eval(tmp_groupid)
                            if len(tmp_groupid) != 0:
                                status_groupid = True
                        if tmpstepnow != None:
                            tmpstepnow = int(tmpstepnow)
                        tmpstepmax = tmp_dict_json['stepmax']
                        if tmpstepmax != None:
                            tmpstepmax = int(tmpstepmax)
                        if tmpstatus_detail != None:
                            tmpstatus_detail = eval(tmpstatus_detail)                            
                            for z in range(len(tmpstatus_detail)):
                                email_step_sum_w.append(tmpstatus_detail[z]['email'])

                            if tmpdocument_status == 'N':
                                for x in range(len(tmpstatus_detail)):
                                    # print(tmp_sicode)
                                    # print(tmpstatus_detail[x])
                                    # email_step_sum_w.append(tmpstatus_detail[x]['email'])
                                    if self.emailUser not in arr_email_document:
                                        if self.emailUser in tmpstatus_detail[x]['email']:
                                            if tmpstatus_detail[x]['step_status_code'] == 'W':
                                                arr_email_document.append(self.emailUser)
                                                tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                                                break
                                            else:
                                                tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                        # print(email_step_sum_w)
                        if tmpdocument_status == 'Z':
                            res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                        elif tmpdocument_status == 'W':
                            res_status_file_string = 'รอคุณอนุมัติ'
                        elif tmpdocument_status == 'N':
                            res_status_file_string = 'กำลังดำเนินการ'
                        elif tmpdocument_status == 'R':
                            res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                        else:
                            res_status_file_string = ''
                                            # else:

                        # print(tmpstatus_detail)
                    if z == 1:
                        tmp_document_type = None
                        tmp_dict_json = query_temp[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state'])
                        tmp_sign_page_options = tmp_dict_json['sign_page_options']
                        tmp_document_type = tmp_dict_json['documentType']
                        tmp_options_page = []
                        if tmp_dict_json['options_page'] != None:
                            if tmp_dict_json['options_page'] != '':
                            # print(tmp_dict_json['options_page'],tmp_document_id)
                                tmp_options_page = [eval(tmp_dict_json['options_page'])]
                        else:
                            tmp_options_page = []
                        if len(tmp_options_page) != 0:
                            # print(tmp_options_page[0]['group_detail'])
                            tmp_status_group = False
                            if status_groupid == True:
                                if len(tmp_options_page) != 0:
                                    if 'group_detail' in tmp_options_page[0]:
                                        tmp_group_detail = tmp_options_page[0]['group_detail']
                                        if 'group_status' in tmp_group_detail:
                                            if tmp_group_detail['group_status'] == True:
                                                tmp_status_group = True
                                                tmpstepnum = tmp_group_detail['step_num']
                                        # if 'step_num' in tmp_group_detail:
                                        #     tmp_status_group = True
                                        #     tmp_group_stepnum = tmp_group_detail['step_num']
                            # if 'group_detail' in tmp_options_page[0]:
                            #     if 'group_status' in tmp_options_page[0]['group_detail']:
                            #         tmpgroupdetails = tmp_options_page[0]['group_detail']
                            #         if tmpgroupdetails['group_status'] == True:
                            #             tmpstepnum = tmpgroupdetails['step_num']
                                        # print(tmpstepnum)
                        if tmp_dict_json['documentJson'] != None:
                            documentJson_result = eval(tmp_dict_json['documentJson'])
                            documentName = documentJson_result['document_name']
                            documentType = documentJson_result['document_type']
                        else:
                            documentName = None
                            documentType = None
                        if tmp_dict_json['urgent_type'] != None:
                            documentUrgentType = tmp_dict_json['urgent_type']
                            if documentUrgentType == 'I':
                                documentUrgentString = 'ด่วนมาก'
                            elif documentUrgentType == 'U':
                                documentUrgentString = 'ด่วน'
                            elif documentUrgentType == 'M':
                                documentUrgentString = 'ปกติ'
                    tmp_biz_info = None
                    tmprole_name = None
                    tmpdept_name = None
                    tmprole_level = None
                    if z == 2:
                        if query_temp[u][z] != None:
                            if query_temp[u][z] != 'None':
                                
                                eval_biz_info = json.dumps(query_temp[u][z])
                                eval_biz_info = json.loads(eval_biz_info)
                                try:
                                    eval_biz_info = eval(eval_biz_info)
                                    # eval_biz_info
                                    # print(eval_biz_info)
                                    if 'role_name' in eval_biz_info:
                                        tmprole_name = eval_biz_info['role_name']
                                    if 'dept_name' in eval_biz_info:
                                        tmpdept_name = eval_biz_info['dept_name']
                                    if 'role_level' in eval_biz_info:
                                        tmprole_level = eval_biz_info['role_level']
                                    if 'dept_name' in eval_biz_info:            
                                        tmp_biz_info = {
                                            'tax_id':eval_biz_info['id_card_num'],
                                            'role_name' : tmprole_name,
                                            'dept_name' : tmpdept_name,
                                            'role_level' :tmprole_level              
                                        }                                
                                    elif 'dept_name' not in eval_biz_info:
                                        tmp_biz_info = {
                                            'tax_id':eval_biz_info['id_card_num'],
                                            'role_name' : tmprole_name,
                                            'dept_name' : [],
                                            'role_level' : tmprole_level             
                                        }
                                except Exception as e:
                                    pass
                                
                        
                    dateTime_String = tmp_send_time
                    th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                    ts = int(time.time())
                    date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                    year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                    datetime_display = int(dateTime_String.timestamp())
                    date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                    yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                    time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                    old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                    if date_time_today == date_time_db:
                        date_display_show = time_show_db
                    else:
                        if year_today == yar_db:
                            date_display_show = convert_datetime_TH_2_display(datetime_display)
                        else:
                            date_display_show = old_year
                # print(email_step_sum_w)
                try:
                    if tmp_status_group == True:
                        for ui in range(len(tmpstepnum)):
                            intstepnum = tmpstepnum[ui] - 1
                            # print(intstepnum)
                            for w in range(len(email_step_sum_w[intstepnum])):
                                tmp_req_email.append(email_step_sum_w[intstepnum][w])
                except Exception as e:
                    tmp_req_email = []
                list_arr.append({
                    'group_email':tmp_req_email,
                    'group_id':None,
                    'group_status':tmp_status_group,
                    'sidCode':tmp_sicode,
                    'document_name':documentName,
                    'document_type':tmp_document_type,
                    'document_urgent':documentUrgentType,
                    'document_urgent_string':documentUrgentString,
                    'dateTime_String':str(dateTime_String).split('+')[0],
                    'dateTime_String_TH_1':th_dateTime_2,
                    'dateTime_display':date_display_show,
                    'document_id':tmp_document_id,
                    'stamp_all':tmp_sign_page_options,
                    'options_page_document':tmp_options_page,
                    'max_step':tmpstepmax,
                    'step_now':tmpstepnow,
                    # 'dateTime_String_TH_2':th_dateTime_2,
                    'date_String':str(dateTime_String).split(' ')[0],
                    'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                    'status_file_code':tmpdocument_status,
                    'status_file_string':res_status_file_string,
                    'dateTime':int(dateTime_String.timestamp()),
                    'tracking_id':tmp_tracking_id,
                    'sender_name':tmp_sender_name,
                    'sender_email':tmp_sender_email,
                    'file_name':tmp_file_name,
                    'document_business':tmp_biz_info
                })
            list_arr = sorted(list_arr, key=lambda k: k['dateTime'], reverse=True)
            json_Data['Document_Details'] = list_arr
                    # arr.append(tmp_dict_json)
            return {'result':'OK','messageText':json_Data}            
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}
        finally:
            db.session.close()

    def select_dashboard_sender_v3_new_limitoffset_search(self,username,emailUser,limit,offset,document_type,keyword):
        self.username = username
        self.emailUser = emailUser
        if limit != '':
            self.limit = int(limit)
        else:
            self.limit = ''
        if offset != '':
            self.offset = int(offset)
        else:
            self.offset = ''
        self.document_type = document_type
        self.keyword = keyword
        sid_list = []
        sid_list_email = []
        json_Data = {}
        list_arr = []
        list_json = []
        try:
            tmp_list = []             
            count_rowDocument = 0
            count_rowDocument_StatusActive = 0
            count_rowDocument_StatusReject = 0
            count_rowDocument_StatusCancel = 0
            statusFile_count_approve = 0
            statusFile_count_pendding = 0
            statusFile_count_reject = 0
            statusFile_count_wait = 0
            list_temp_query = []
            tmp_sid_code_list = []
            arr_gruop = []
            arr_group_sid = []
            tmp_arr_sid = []
            tmp_group_id = None
            json_Data = {}
            search_keyword = "%{}%".format(self.keyword)
            # search_keyword = "% %"
            str_time = (time.time())
            if self.limit != '' and self.offset != '':
                if self.document_type != '' and self.keyword != '':
                    query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                        .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                        .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                        .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                        .filter(paper_lessdocument.documentType==self.document_type)\
                        .filter(or_(paper_lesssender.sender_name.ilike(search_keyword),paper_lesssender.doc_id.ilike(search_keyword),paper_lessdocument.options_page.ilike(search_keyword)))\
                        .order_by(desc(paper_lesssender.send_time))\
                        .limit(self.limit)\
                        .offset(self.offset)\
                        .all()
                elif self.document_type != '' and self.keyword == '':
                    query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                        .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                        .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                        .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                        .filter(paper_lessdocument.documentType==self.document_type)\
                        .order_by(desc(paper_lesssender.send_time))\
                        .limit(self.limit)\
                        .offset(self.offset)\
                        .all()
                elif self.document_type == '' and self.keyword != '':
                    query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                        .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                        .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                        .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                        .filter(or_(paper_lesssender.sender_name.ilike(search_keyword),paper_lesssender.doc_id.ilike(search_keyword),paper_lessdocument.options_page.ilike(search_keyword)))\
                        .order_by(desc(paper_lesssender.send_time))\
                        .limit(self.limit)\
                        .offset(self.offset)\
                        .all()
                else:
                    query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                        .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                        .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                        .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                        .order_by(desc(paper_lesssender.send_time))\
                        .limit(self.limit)\
                        .offset(self.offset)\
                        .all()
            else:
                if self.document_type != '' and self.keyword != '':
                    query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                        .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                        .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                        .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                        .filter(paper_lessdocument.documentType==self.document_type)\
                        .filter(or_(paper_lesssender.sender_name.ilike(search_keyword),paper_lesssender.doc_id.ilike(search_keyword),paper_lessdocument.options_page.ilike(search_keyword)))\
                        .order_by(desc(paper_lesssender.send_time))\
                        .all()
                elif self.document_type != '' and self.keyword == '':
                    query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                        .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                        .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                        .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                        .filter(paper_lessdocument.documentType==self.document_type)\
                        .order_by(desc(paper_lesssender.send_time))\
                        .all()
                elif self.document_type == '' and self.keyword != '':
                    query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                        .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                        .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                        .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                        .filter(or_(paper_lesssender.sender_name.ilike(search_keyword),paper_lesssender.doc_id.ilike(search_keyword),paper_lessdocument.options_page.ilike(search_keyword)))\
                        .order_by(desc(paper_lesssender.send_time))\
                        .all()
                else:
                    query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                        .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                        .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                        .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                        .order_by(desc(paper_lesssender.send_time))\
                        .all()
            
            # print(query_temp)
            end_time = (time.time())
            print(end_time -str_time)
            
            
            
            arr = []
            for u in range(len(query_temp)):
                arr_email_document = []
                tmp_req_email = []
                email_step_sum_w = []
                for z in range(len(query_temp[u])):
                    if z == 0:
                        tmp_dict_json = query_temp[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state']) 
                        tmp_sicode = tmp_dict_json['step_data_sid']
                        tmp_sid_code_list.append(tmp_sicode)
                        tmp_send_time = tmp_dict_json['send_time']
                        tmp_document_id = tmp_dict_json['doc_id']
                        tmp_tracking_id = tmp_dict_json['tracking_id']
                        try:
                            tmp_sender_name = eval(tmp_dict_json['sender_name'])
                        except Exception as e:
                            tmp_sender_name = tmp_dict_json['sender_name']
                        tmp_sender_email = tmp_dict_json['sender_email']
                        tmp_file_name = tmp_dict_json['file_name']
                        tmp_groupid = tmp_dict_json['group_id']
                        email_step_sum = tmp_dict_json['recipient_email']
                        if email_step_sum != None:
                            email_step_sum = eval(email_step_sum)
                        # print(email_step_sum)
                        tmpstatus_detail = tmp_dict_json['status_details']
                        tmpdocument_status = tmp_dict_json['document_status']
                        tmpstepnow = tmp_dict_json['stepnow']
                        status_groupid = False
                        if tmp_groupid != None:
                            tmp_groupid = eval(tmp_groupid)
                            if len(tmp_groupid) != 0:
                                status_groupid = True
                        if tmpstepnow != None:
                            tmpstepnow = int(tmpstepnow)
                        tmpstepmax = tmp_dict_json['stepmax']
                        if tmpstepmax != None:
                            tmpstepmax = int(tmpstepmax)
                        if tmpstatus_detail != None:
                            tmpstatus_detail = eval(tmpstatus_detail)                            
                            for z in range(len(tmpstatus_detail)):
                                email_step_sum_w.append(tmpstatus_detail[z]['email'])

                            if tmpdocument_status == 'N':
                                for x in range(len(tmpstatus_detail)):
                                    # print(tmp_sicode)
                                    # print(tmpstatus_detail[x])
                                    # email_step_sum_w.append(tmpstatus_detail[x]['email'])
                                    if self.emailUser not in arr_email_document:
                                        if self.emailUser in tmpstatus_detail[x]['email']:
                                            if tmpstatus_detail[x]['step_status_code'] == 'W':
                                                arr_email_document.append(self.emailUser)
                                                tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                                                break
                                            else:
                                                tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                        # print(email_step_sum_w)
                        if tmpdocument_status == 'Z':
                            res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                        elif tmpdocument_status == 'W':
                            res_status_file_string = 'รอคุณอนุมัติ'
                        elif tmpdocument_status == 'N':
                            res_status_file_string = 'กำลังดำเนินการ'
                        elif tmpdocument_status == 'R':
                            res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                        else:
                            res_status_file_string = ''
                                            # else:

                        # print(tmpstatus_detail)
                    if z == 1:
                        tmp_document_type = None
                        tmp_dict_json = query_temp[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state'])
                        tmp_sign_page_options = tmp_dict_json['sign_page_options']
                        tmp_document_type = tmp_dict_json['documentType']
                        tmp_options_page = []
                        if tmp_dict_json['options_page'] != None:
                            if tmp_dict_json['options_page'] != '':
                            # print(tmp_dict_json['options_page'],tmp_document_id)
                                tmp_options_page = [eval(tmp_dict_json['options_page'])]
                        else:
                            tmp_options_page = []
                        if len(tmp_options_page) != 0:
                            # print(tmp_options_page[0]['group_detail'])
                            tmp_status_group = False
                            if status_groupid == True:
                                if len(tmp_options_page) != 0:
                                    if 'group_detail' in tmp_options_page[0]:
                                        tmp_group_detail = tmp_options_page[0]['group_detail']
                                        if 'group_status' in tmp_group_detail:
                                            if tmp_group_detail['group_status'] == True:
                                                tmp_status_group = True
                                                tmpstepnum = tmp_group_detail['step_num']
                                        # if 'step_num' in tmp_group_detail:
                                        #     tmp_status_group = True
                                        #     tmp_group_stepnum = tmp_group_detail['step_num']
                            # if 'group_detail' in tmp_options_page[0]:
                            #     if 'group_status' in tmp_options_page[0]['group_detail']:
                            #         tmpgroupdetails = tmp_options_page[0]['group_detail']
                            #         if tmpgroupdetails['group_status'] == True:
                            #             tmpstepnum = tmpgroupdetails['step_num']
                                        # print(tmpstepnum)
                        if tmp_dict_json['documentJson'] != None:
                            documentJson_result = eval(tmp_dict_json['documentJson'])
                            documentName = documentJson_result['document_name']
                            documentType = documentJson_result['document_type']
                        else:
                            documentName = None
                            documentType = None
                        if tmp_dict_json['urgent_type'] != None:
                            documentUrgentType = tmp_dict_json['urgent_type']
                            if documentUrgentType == 'I':
                                documentUrgentString = 'ด่วนมาก'
                            elif documentUrgentType == 'U':
                                documentUrgentString = 'ด่วน'
                            elif documentUrgentType == 'M':
                                documentUrgentString = 'ปกติ'
                    tmp_biz_info = None
                    tmprole_name = None
                    tmpdept_name = None
                    tmprole_level = None
                    if z == 2:
                        if query_temp[u][z] != None:
                            if query_temp[u][z] != 'None':
                                
                                eval_biz_info = json.dumps(query_temp[u][z])
                                eval_biz_info = json.loads(eval_biz_info)
                                eval_biz_info = eval(eval_biz_info)
                                # eval_biz_info
                                # print(eval_biz_info)
                                if 'role_name' in eval_biz_info:
                                    tmprole_name = eval_biz_info['role_name']
                                if 'dept_name' in eval_biz_info:
                                    tmpdept_name = eval_biz_info['dept_name']
                                if 'role_level' in eval_biz_info:
                                    tmprole_level = eval_biz_info['role_level']
                                if 'dept_name' in eval_biz_info:            
                                    tmp_biz_info = {
                                        'tax_id':eval_biz_info['id_card_num'],
                                        'role_name' : tmprole_name,
                                        'dept_name' : tmpdept_name,
                                        'role_level' :tmprole_level              
                                    }                                
                                elif 'dept_name' not in eval_biz_info:
                                    tmp_biz_info = {
                                        'tax_id':eval_biz_info['id_card_num'],
                                        'role_name' : tmprole_name,
                                        'dept_name' : [],
                                        'role_level' : tmprole_level             
                                    }
                        
                    dateTime_String = tmp_send_time
                    th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                    ts = int(time.time())
                    date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                    year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                    datetime_display = int(dateTime_String.timestamp())
                    date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                    yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                    time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                    old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                    if date_time_today == date_time_db:
                        date_display_show = time_show_db
                    else:
                        if year_today == yar_db:
                            date_display_show = convert_datetime_TH_2_display(datetime_display)
                        else:
                            date_display_show = old_year
                # print(email_step_sum_w)
                try:
                    if tmp_status_group == True:
                        for ui in range(len(tmpstepnum)):
                            intstepnum = tmpstepnum[ui] - 1
                            # print(intstepnum)
                            for w in range(len(email_step_sum_w[intstepnum])):
                                tmp_req_email.append(email_step_sum_w[intstepnum][w])
                except Exception as e:
                    tmp_req_email = []  
                list_arr.append({
                    'group_email':tmp_req_email,
                    'group_id':None,
                    'group_status':tmp_status_group,
                    'sidCode':tmp_sicode,
                    'document_name':documentName,
                    'document_type':tmp_document_type,
                    'document_urgent':documentUrgentType,
                    'document_urgent_string':documentUrgentString,
                    'dateTime_String':str(dateTime_String).split('+')[0],
                    'dateTime_String_TH_1':th_dateTime_2,
                    'dateTime_display':date_display_show,
                    'document_id':tmp_document_id,
                    'stamp_all':tmp_sign_page_options,
                    'options_page_document':tmp_options_page,
                    'max_step':tmpstepmax,
                    'step_now':tmpstepnow,
                    # 'dateTime_String_TH_2':th_dateTime_2,
                    'date_String':str(dateTime_String).split(' ')[0],
                    'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                    'status_file_code':tmpdocument_status,
                    'status_file_string':res_status_file_string,
                    'dateTime':int(dateTime_String.timestamp()),
                    'tracking_id':tmp_tracking_id,
                    'sender_name':tmp_sender_name,
                    'sender_email':tmp_sender_email,
                    'file_name':tmp_file_name,
                    'document_business':tmp_biz_info
                })
            list_arr = sorted(list_arr, key=lambda k: k['dateTime'], reverse=True)
            json_Data['Document_Details'] = list_arr
                    # arr.append(tmp_dict_json)
            return {'result':'OK','messageText':json_Data}
            
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}
        finally:
            db.session.close()

    def select_dashboard_sender_v3_new_limitoffset_filter(self,username,emailUser,limit,offset,status,document_type,group_status):
        self.username = username
        self.emailUser = emailUser
        if limit != '':
            self.limit = int(limit)
        else:
            self.limit = ''
        if offset != '':
            self.offset = int(offset)
        else:
            self.offset = ''
        self.group_status = group_status
        if self.group_status != None:
            self.group_status = group_status
        self.status = status
        self.document_type = document_type
        self.all_status = ['W','N','Z']
        arr_list_sum = []
        json_Data = {}
        sum_row_tooffset = 0
        keep_lenstatus = []
        a = 0
        if self.status in self.all_status:
            for i in range(self.limit):
                if i > 0:
                    self.offset = self.offset + self.limit
                if len(arr_list_sum) < self.limit:
                    arr_list_sum,sum_row_tooffset = select_1().sender_recursive_status_file_v1(self.username,self.emailUser,self.limit,self.offset,self.status,arr_list_sum,sum_row_tooffset,self.document_type,self.group_status)
                    keep_lenstatus = arr_list_sum
                    sum_row_tooffset = self.offset + sum_row_tooffset
                    if len(keep_lenstatus) == len(arr_list_sum):
                        a = a + 1
                        if a == 5:
                            list_arr = sorted(arr_list_sum, key=lambda k: k['dateTime'], reverse=True)
                            json_Data['Document_Details'] = list_arr
                            json_Data['offset'] = sum_row_tooffset                            
                            print(len(list_arr))
                            return {'result':'OK','messageText':json_Data}                    
                else:
                    list_arr = sorted(arr_list_sum, key=lambda k: k['dateTime'], reverse=True)
                    json_Data['Document_Details'] = list_arr
                    json_Data['offset'] = sum_row_tooffset
                    print(len(list_arr))
                    return {'result':'OK','messageText':json_Data} 
            list_arr = sorted(arr_list_sum, key=lambda k: k['dateTime'], reverse=True)
            json_Data['Document_Details'] = list_arr
            json_Data['offset'] = sum_row_tooffset
            print(len(list_arr))
            return {'result':'OK','messageText':json_Data} 
        sid_list = []
        sid_list_email = []
        json_Data = {}
        list_arr = []
        list_json = []
        try:
            tmp_list = []             
            count_rowDocument = 0
            count_rowDocument_StatusActive = 0
            count_rowDocument_StatusReject = 0
            count_rowDocument_StatusCancel = 0
            statusFile_count_approve = 0
            statusFile_count_pendding = 0
            statusFile_count_reject = 0
            statusFile_count_wait = 0
            list_temp_query = []
            tmp_sid_code_list = []
            arr_gruop = []
            arr_group_sid = []
            tmp_arr_sid = []
            tmp_group_id = None
            json_Data = {}
            str_time = (time.time())
            if self.limit != '' and self.offset != '':
                if self.status != '' and self.document_type != '':
                    if self.group_status == None: 
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                            .filter(paper_lesssender.document_status==self.status)\
                            .filter(paper_lessdocument.documentType==self.document_type)\
                            .order_by(desc(paper_lesssender.send_time))\
                            .limit(self.limit)\
                            .offset(self.offset)\
                            .all()
                    elif self.group_status == True:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                            .filter(paper_lesssender.document_status==self.status)\
                            .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                            .filter(paper_lessdocument.documentType==self.document_type)\
                            .order_by(desc(paper_lesssender.send_time))\
                            .limit(self.limit)\
                            .offset(self.offset)\
                            .all()
                    elif self.group_status == False:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                            .filter(paper_lesssender.document_status==self.status)\
                            .filter(paper_lessdocument.documentType==self.document_type)\
                            .order_by(desc(paper_lesssender.send_time))\
                            .limit(self.limit)\
                            .offset(self.offset)\
                            .all()
       
                elif self.status != '' and self.document_type == '':
                    print(self.group_status)
                    if self.group_status == None: 
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                            .filter(paper_lesssender.document_status==self.status)\
                            .order_by(desc(paper_lesssender.send_time))\
                            .limit(self.limit)\
                            .offset(self.offset)\
                            .all()
                    elif self.group_status == True:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                            .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                            .filter(paper_lesssender.document_status==self.status)\
                            .order_by(desc(paper_lesssender.send_time))\
                            .limit(self.limit)\
                            .offset(self.offset)\
                            .all()
                    elif self.group_status == False:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                            .filter(paper_lesssender.document_status==self.status)\
                            .order_by(desc(paper_lesssender.send_time))\
                            .limit(self.limit)\
                            .offset(self.offset)\
                            .all()
                elif self.status == '' and self.document_type != '':
                    if self.group_status == None: 
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                            .filter(paper_lessdocument.documentType==self.document_type)\
                            .order_by(desc(paper_lesssender.send_time))\
                            .limit(self.limit)\
                            .offset(self.offset)\
                            .all()
                    elif self.group_status == True:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                            .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                            .filter(paper_lessdocument.documentType==self.document_type)\
                            .order_by(desc(paper_lesssender.send_time))\
                            .limit(self.limit)\
                            .offset(self.offset)\
                            .all()
                    elif self.group_status == False:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                            .filter(paper_lessdocument.documentType==self.document_type)\
                            .order_by(desc(paper_lesssender.send_time))\
                            .limit(self.limit)\
                            .offset(self.offset)\
                            .all()
                else:
                    if self.group_status == None: 
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                            .order_by(desc(paper_lesssender.send_time))\
                            .limit(self.limit)\
                            .offset(self.offset)\
                            .all()
                    elif self.group_status == True:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                            .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                            .order_by(desc(paper_lesssender.send_time))\
                            .limit(self.limit)\
                            .offset(self.offset)\
                            .all()
                    elif self.group_status == False:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                            .order_by(desc(paper_lesssender.send_time))\
                            .limit(self.limit)\
                            .offset(self.offset)\
                            .all()
            else:                
                if self.status != '' and self.document_type != '':
                    if self.group_status == None: 
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                            .filter(paper_lesssender.document_status==self.status)\
                            .filter(paper_lessdocument.documentType==self.document_type)\
                            .order_by(desc(paper_lesssender.send_time))\
                            .all()
                    elif self.group_status == True:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                            .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                            .filter(paper_lesssender.document_status==self.status)\
                            .filter(paper_lessdocument.documentType==self.document_type)\
                            .order_by(desc(paper_lesssender.send_time))\
                            .all()
                    elif self.group_status == False:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                            .filter(paper_lesssender.document_status==self.status)\
                            .filter(paper_lessdocument.documentType==self.document_type)\
                            .order_by(desc(paper_lesssender.send_time))\
                            .all()
                elif self.status != '' and self.document_type == '':
                    if self.group_status == None: 
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                            .filter(paper_lesssender.document_status==self.status)\
                            .order_by(desc(paper_lesssender.send_time))\
                            .all()
                    elif self.group_status == True:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                            .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                            .filter(paper_lesssender.document_status==self.status)\
                            .order_by(desc(paper_lesssender.send_time))\
                            .all()
                    elif self.group_status == False:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                            .filter(paper_lesssender.document_status==self.status)\
                            .order_by(desc(paper_lesssender.send_time))\
                            .all()
                    
                elif self.status == '' and self.document_type != '':
                    if self.group_status == None: 
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                            .filter(paper_lessdocument.documentType==self.document_type)\
                            .order_by(desc(paper_lesssender.send_time))\
                            .all()
                    elif self.group_status == True:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                            .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                            .filter(paper_lessdocument.documentType==self.document_type)\
                            .order_by(desc(paper_lesssender.send_time))\
                            .all()
                    elif self.group_status == False:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                            .filter(paper_lessdocument.documentType==self.document_type)\
                            .order_by(desc(paper_lesssender.send_time))\
                            .all()
                else:
                    if self.group_status == None: 
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                            .order_by(desc(paper_lesssender.send_time))\
                            .all()
                    elif self.group_status == True:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(or_(paper_lesssender.group_id==None,paper_lesssender.group_id=='[]'))\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                            .order_by(desc(paper_lesssender.send_time))\
                            .all()
                    elif self.group_status == False:
                        query_temp = db.session.query(paper_lesssender,paper_lessdocument,paper_lessdatastep.biz_info)\
                            .join(paper_lessdocument, paper_lessdocument.step_id==paper_lesssender.step_data_sid)\
                            .join(paper_lessdatastep, paper_lessdatastep.sid==paper_lesssender.step_data_sid)\
                            .filter(paper_lesssender.status=='ACTIVE').filter(paper_lesssender.send_user==self.username)\
                            .order_by(desc(paper_lesssender.send_time))\
                            .all()
            
            # print(query_temp)
            end_time = (time.time())
            print(end_time -str_time)
            
            
            
            arr = []
            for u in range(len(query_temp)):
                arr_email_document = []
                tmp_req_email = []
                email_step_sum_w = []
                for z in range(len(query_temp[u])):
                    if z == 0:
                        tmp_dict_json = query_temp[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state']) 
                        tmp_sicode = tmp_dict_json['step_data_sid']
                        tmp_sid_code_list.append(tmp_sicode)
                        tmp_send_time = tmp_dict_json['send_time']
                        tmp_document_id = tmp_dict_json['doc_id']
                        tmp_tracking_id = tmp_dict_json['tracking_id']
                        tmp_sender_name = tmp_dict_json['sender_name']
                        tmp_sender_email = tmp_dict_json['sender_email']
                        tmp_file_name = tmp_dict_json['file_name']
                        tmp_groupid = tmp_dict_json['group_id']
                        email_step_sum = tmp_dict_json['recipient_email']
                        if email_step_sum != None:
                            email_step_sum = eval(email_step_sum)
                        # print(email_step_sum)
                        tmpstatus_detail = tmp_dict_json['status_details']
                        tmpdocument_status = tmp_dict_json['document_status']
                        tmpstepnow = tmp_dict_json['stepnow']
                        status_groupid = False
                        if tmp_groupid != None:
                            tmp_groupid = eval(tmp_groupid)
                            if len(tmp_groupid) != 0:
                                status_groupid = True
                        if tmpstepnow != None:
                            tmpstepnow = int(tmpstepnow)
                        tmpstepmax = tmp_dict_json['stepmax']
                        if tmpstepmax != None:
                            tmpstepmax = int(tmpstepmax)
                        if tmpstatus_detail != None:
                            tmpstatus_detail = eval(tmpstatus_detail)                            
                            for z in range(len(tmpstatus_detail)):
                                email_step_sum_w.append(tmpstatus_detail[z]['email'])

                            if tmpdocument_status == 'N':
                                for x in range(len(tmpstatus_detail)):
                                    # print(tmp_sicode)
                                    # print(tmpstatus_detail[x])
                                    # email_step_sum_w.append(tmpstatus_detail[x]['email'])
                                    if self.emailUser not in arr_email_document:
                                        if self.emailUser in tmpstatus_detail[x]['email']:
                                            if tmpstatus_detail[x]['step_status_code'] == 'W':
                                                arr_email_document.append(self.emailUser)
                                                tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                                                break
                                            else:
                                                tmpdocument_status = tmpstatus_detail[x]['step_status_code']
                        # print(email_step_sum_w)
                        if tmpdocument_status == 'Z':
                            res_status_file_string = 'อยู่ในช่วงดำเนินการ'
                        elif tmpdocument_status == 'W':
                            res_status_file_string = 'รอคุณอนุมัติ'
                        elif tmpdocument_status == 'N':
                            res_status_file_string = 'กำลังดำเนินการ'
                        elif tmpdocument_status == 'R':
                            res_status_file_string = 'เอกสารที่ส่งคืนแก้ไข'
                        else:
                            res_status_file_string = ''
                                            # else:

                        # print(tmpstatus_detail)
                    if z == 1:
                        tmp_document_type = None
                        tmp_dict_json = query_temp[u][z].__dict__
                        if '_sa_instance_state' in tmp_dict_json:
                            tmp_dict_json['_sa_instance_state'] = str(tmp_dict_json['_sa_instance_state'])
                        tmp_sign_page_options = tmp_dict_json['sign_page_options']
                        tmp_document_type = tmp_dict_json['documentType']
                        tmp_options_page = []
                        if tmp_dict_json['options_page'] != None:
                            if tmp_dict_json['options_page'] != '':
                            # print(tmp_dict_json['options_page'],tmp_document_id)
                                tmp_options_page = [eval(tmp_dict_json['options_page'])]
                        else:
                            tmp_options_page = []
                        if len(tmp_options_page) != 0:
                            # print(tmp_options_page[0]['group_detail'])
                            tmp_status_group = False
                            if status_groupid == True:
                                if len(tmp_options_page) != 0:
                                    if 'group_detail' in tmp_options_page[0]:
                                        tmp_group_detail = tmp_options_page[0]['group_detail']
                                        if 'group_status' in tmp_group_detail:
                                            if tmp_group_detail['group_status'] == True:
                                                tmp_status_group = True
                                                tmpstepnum = tmp_group_detail['step_num']
                                        # if 'step_num' in tmp_group_detail:
                                        #     tmp_status_group = True
                                        #     tmp_group_stepnum = tmp_group_detail['step_num']
                            # if 'group_detail' in tmp_options_page[0]:
                            #     if 'group_status' in tmp_options_page[0]['group_detail']:
                            #         tmpgroupdetails = tmp_options_page[0]['group_detail']
                            #         if tmpgroupdetails['group_status'] == True:
                            #             tmpstepnum = tmpgroupdetails['step_num']
                                        # print(tmpstepnum)
                        if tmp_dict_json['documentJson'] != None:
                            documentJson_result = eval(tmp_dict_json['documentJson'])
                            documentName = documentJson_result['document_name']
                            documentType = documentJson_result['document_type']
                        else:
                            documentName = None
                            documentType = None
                        if tmp_dict_json['urgent_type'] != None:
                            documentUrgentType = tmp_dict_json['urgent_type']
                            if documentUrgentType == 'I':
                                documentUrgentString = 'ด่วนมาก'
                            elif documentUrgentType == 'U':
                                documentUrgentString = 'ด่วน'
                            elif documentUrgentType == 'M':
                                documentUrgentString = 'ปกติ'
                    tmp_biz_info = None
                    tmprole_name = None
                    tmpdept_name = None
                    tmprole_level = None
                    if z == 2:
                        if query_temp[u][z] != None:
                            if query_temp[u][z] != 'None':
                                
                                eval_biz_info = json.dumps(query_temp[u][z])
                                eval_biz_info = json.loads(eval_biz_info)
                                eval_biz_info = eval(eval_biz_info)
                                # eval_biz_info
                                # print(eval_biz_info)
                                if 'role_name' in eval_biz_info:
                                    tmprole_name = eval_biz_info['role_name']
                                if 'dept_name' in eval_biz_info:
                                    tmpdept_name = eval_biz_info['dept_name']
                                if 'role_level' in eval_biz_info:
                                    tmprole_level = eval_biz_info['role_level']
                                if 'dept_name' in eval_biz_info:            
                                    tmp_biz_info = {
                                        'tax_id':eval_biz_info['id_card_num'],
                                        'role_name' : tmprole_name,
                                        'dept_name' : tmpdept_name,
                                        'role_level' :tmprole_level              
                                    }                                
                                elif 'dept_name' not in eval_biz_info:
                                    tmp_biz_info = {
                                        'tax_id':eval_biz_info['id_card_num'],
                                        'role_name' : tmprole_name,
                                        'dept_name' : [],
                                        'role_level' : tmprole_level             
                                    }
                        
                    dateTime_String = tmp_send_time
                    th_dateTime_2 = convert_datetime_TH_2(int(dateTime_String.timestamp()))
                    ts = int(time.time())
                    date_time_today = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d')
                    year_today = datetime.datetime.fromtimestamp(ts).strftime('%Y')
                    datetime_display = int(dateTime_String.timestamp())
                    date_time_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y-%m-%d')
                    yar_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%Y')
                    time_show_db = datetime.datetime.fromtimestamp(datetime_display).strftime('%H:%M')
                    old_year = datetime.datetime.fromtimestamp(datetime_display).strftime('%d/%m/%Y')
                    if date_time_today == date_time_db:
                        date_display_show = time_show_db
                    else:
                        if year_today == yar_db:
                            date_display_show = convert_datetime_TH_2_display(datetime_display)
                        else:
                            date_display_show = old_year
                # print(email_step_sum_w)
                try:
                    if tmp_status_group == True:
                        for ui in range(len(tmpstepnum)):
                            intstepnum = tmpstepnum[ui] - 1
                            # print(intstepnum)
                            for w in range(len(email_step_sum_w[intstepnum])):
                                tmp_req_email.append(email_step_sum_w[intstepnum][w])
                except Exception as e:
                    tmp_req_email = []   
                list_arr.append({
                    'group_email':tmp_req_email,
                    'group_id':None,
                    'group_status':tmp_status_group,
                    'sidCode':tmp_sicode,
                    'document_name':documentName,
                    'document_type':tmp_document_type,
                    'document_urgent':documentUrgentType,
                    'document_urgent_string':documentUrgentString,
                    'dateTime_String':str(dateTime_String).split('+')[0],
                    'dateTime_String_TH_1':th_dateTime_2,
                    'dateTime_display':date_display_show,
                    'document_id':tmp_document_id,
                    'stamp_all':tmp_sign_page_options,
                    'options_page_document':tmp_options_page,
                    'max_step':tmpstepmax,
                    'step_now':tmpstepnow,
                    # 'dateTime_String_TH_2':th_dateTime_2,
                    'date_String':str(dateTime_String).split(' ')[0],
                    'time_String':str(dateTime_String).split(' ')[1].split('+')[0],
                    'status_file_code':tmpdocument_status,
                    'status_file_string':res_status_file_string,
                    'dateTime':int(dateTime_String.timestamp()),
                    'tracking_id':tmp_tracking_id,
                    'sender_name':tmp_sender_name,
                    'sender_email':tmp_sender_email,
                    'file_name':tmp_file_name,
                    'document_business':tmp_biz_info
                })
            list_arr = sorted(list_arr, key=lambda k: k['dateTime'], reverse=True)
            json_Data['Document_Details'] = list_arr
            json_Data['offset'] = self.offset + self.limit
                    # arr.append(tmp_dict_json)
            return {'result':'OK','messageText':json_Data}
            
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':'not found','status_Code':200,'messageER':str(ex)}
        finally:
            db.session.close()

    def select_get_template_Reject_v11(self, username,offset,limit):
        self.username = username
        self.limit = limit
        self.offset = offset
        try:
            arr_get = []
            query_ = None
            # if self.offset == '' or self.limit == '' :
            #     return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
            if self.limit == '' and self.offset == '':
                query_ = paper_lessstep.query.filter_by(username=self.username,status="REJECT")\
                    .order_by((paper_lessstep.sid).asc())\
                    .all()
            else :
                query_ = paper_lessstep.query.filter_by(username=self.username,status="REJECT")\
                    .order_by((paper_lessstep.sid).asc())\
                    .offset(int(self.offset)).limit(int(self.limit))\
                    .all()
            for k in query_:
                json_sky = {}
                json_sky['status_use'] = k.status_use
                json_sky['step_Code'] = k.step_Code
                json_sky['dateTime'] = k.DateTime
                json_sky['dateTime_string'] = str(k.DateTime).split('+')[0]
                json_sky['data_step'] = json.dumps(k.step_Data)
                json_sky['data_step'] = json.loads(json_sky['data_step'])
                # json_sky['template_String'] = k.template_images
                json_sky['step_Upload'] = json.dumps(k.step_Upload)
                json_sky['step_Upload'] = json.loads(json_sky['step_Upload'])
                json_sky['options_page'] = k.options_page
                json_sky['status_ref'] = k.status_ref
                try:
                    data_step = eval(json_sky['data_step'])
                except Exception as ex:
                    return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล Step ให้เป็น Json ได้'}
                try:
                    step_Upload = eval(json_sky['step_Upload'])
                except Exception as ex:
                    return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล step_Upload ให้เป็น Json ได้'}
                json_sky['username'] = k.username
                json_sky['step_Max'] = k.step_Max
                json_sky['step_Name'] = k.step_Name
                json_sky['status_Update'] = k.status_Update
                json_sky['status_Update_string'] = str(k.status_Update).split('+')[0]
                if k.qrCode_position != None:
                    try:
                        json_sky['qrCode_position'] = eval(k.qrCode_position)
                    except Exception as ex:
                        return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล qrCode_position ให้เป็น Json ได้'}
                else:
                    json_sky['qrCode_position'] = None
                json_sky['step_Description'] = k.step_Description
                json_sky['email'] = k.email
                if json_sky['step_Max'] == 1:
                    json_sky['data_step'] = [data_step]
                else:
                    json_sky['data_step'] = data_step
                json_sky['step_Upload'] = step_Upload
                if k.urgent_type != None:
                    json_sky['urgent_code'] = k.urgent_type
                    if k.urgent_type == 'M':
                        json_sky['urgent_string_th'] = 'ปกติ'
                        json_sky['urgent_string_en'] = 'MEDIUM'
                    elif k.urgent_type == 'U':
                        json_sky['urgent_string_th'] = 'ด่วน'
                        json_sky['urgent_string_en'] = 'URGENT'
                    elif k.urgent_type == 'I':
                        json_sky['urgent_string_th'] = 'ด่วนมาก'
                        json_sky['urgent_string_en'] = 'IMMEDIATE'
                else:
                    json_sky['urgent_code'] = None
                    json_sky['urgent_string_th'] = None
                    json_sky['urgent_string_en'] = None
                if k.documentDetails != None:
                    if str(k.documentDetails).replace(' ','') != '':
                        result_detailDoc = paper_lessdocument_detail.query.filter_by(documentUser=k.username,documentType=k.documentDetails).first()
                        if result_detailDoc != None:
                            json_sky['document_details'] = eval(result_detailDoc.documentJson)
                            json_sky['document_details_string'] = result_detailDoc.documentJson
                        else:
                            jsondetailsDoc = {}
                            jsondetailsDoc['document_type'] = None
                            jsondetailsDoc['document_name'] = None
                            jsondetailsDoc['document_remark'] = None
                            json_sky['document_details'] = jsondetailsDoc
                            json_sky['document_details_string'] = str(jsondetailsDoc)
                    else:
                        jsondetailsDoc = {}
                        jsondetailsDoc['document_type'] = None
                        jsondetailsDoc['document_name'] = None
                        jsondetailsDoc['document_remark'] = None
                        json_sky['document_details'] = jsondetailsDoc
                        json_sky['document_details_string'] = str(jsondetailsDoc)
                else:
                    jsondetailsDoc = {}
                    jsondetailsDoc['document_type'] = None
                    jsondetailsDoc['document_name'] = None
                    jsondetailsDoc['document_remark'] = None
                    json_sky['document_details'] = jsondetailsDoc
                    json_sky['document_details_string'] = str(jsondetailsDoc)
                arr_get.append(json_sky)
            print(len(arr_get))
            if len(arr_get) != 0:
                return {'result':'OK','messageText':arr_get,'status_Code':200}
            else:
                return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
        except Exception as ex:
            return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
        finally:
            db.session.close()

    # def select_get_template_Reject_v11(self, username,offset,limit):
    #     self.username = username
    #     self.limit = limit
    #     self.offset = offset
    #     try:
    #         arr_get = []
    #         query_ = None
    #         # if self.offset == '' or self.limit == '' :
    #         #     return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
    #         if self.limit == '' and self.offset == '':
    #             query_ = paper_lessstep.query.filter_by(username=self.username,status="REJECT")\
    #                 .order_by((paper_lessstep.sid).asc())\
    #                 .all()
    #         else :
    #             query_ = paper_lessstep.query.filter_by(username=self.username,status="REJECT")\
    #                 .order_by((paper_lessstep.sid).asc())\
    #                 .offset(int(self.offset)).limit(int(self.limit))\
    #                 .all()
    #         for k in query_:
    #             json_sky = {}
    #             json_sky['status_use'] = k.status_use
    #             json_sky['step_Code'] = k.step_Code
    #             json_sky['dateTime'] = k.DateTime
    #             json_sky['dateTime_string'] = str(k.DateTime).split('+')[0]
    #             json_sky['data_step'] = json.dumps(k.step_Data)
    #             json_sky['data_step'] = json.loads(json_sky['data_step'])
    #             # json_sky['template_String'] = k.template_images
    #             json_sky['step_Upload'] = json.dumps(k.step_Upload)
    #             json_sky['step_Upload'] = json.loads(json_sky['step_Upload'])
    #             json_sky['options_page'] = k.options_page
    #             try:
    #                 data_step = eval(json_sky['data_step'])
    #             except Exception as ex:
    #                 return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล Step ให้เป็น Json ได้'}
    #             try:
    #                 step_Upload = eval(json_sky['step_Upload'])
    #             except Exception as ex:
    #                 return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล step_Upload ให้เป็น Json ได้'}
    #             json_sky['username'] = k.username
    #             json_sky['step_Max'] = k.step_Max
    #             json_sky['step_Name'] = k.step_Name
    #             json_sky['status_Update'] = k.status_Update
    #             json_sky['status_Update_string'] = str(k.status_Update).split('+')[0]
    #             if k.qrCode_position != None:
    #                 try:
    #                     json_sky['qrCode_position'] = eval(k.qrCode_position)
    #                 except Exception as ex:
    #                     return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล qrCode_position ให้เป็น Json ได้'}
    #             else:
    #                 json_sky['qrCode_position'] = None
    #             json_sky['step_Description'] = k.step_Description
    #             json_sky['email'] = k.email
    #             if json_sky['step_Max'] == 1:
    #                 json_sky['data_step'] = [data_step]
    #             else:
    #                 json_sky['data_step'] = data_step
    #             json_sky['step_Upload'] = step_Upload
    #             if k.urgent_type != None:
    #                 json_sky['urgent_code'] = k.urgent_type
    #                 if k.urgent_type == 'M':
    #                     json_sky['urgent_string_th'] = 'ปกติ'
    #                     json_sky['urgent_string_en'] = 'MEDIUM'
    #                 elif k.urgent_type == 'U':
    #                     json_sky['urgent_string_th'] = 'ด่วน'
    #                     json_sky['urgent_string_en'] = 'URGENT'
    #                 elif k.urgent_type == 'I':
    #                     json_sky['urgent_string_th'] = 'ด่วนมาก'
    #                     json_sky['urgent_string_en'] = 'IMMEDIATE'
    #             else:
    #                 json_sky['urgent_code'] = None
    #                 json_sky['urgent_string_th'] = None
    #                 json_sky['urgent_string_en'] = None
    #             if k.documentDetails != None:
    #                 if str(k.documentDetails).replace(' ','') != '':
    #                     result_detailDoc = paper_lessdocument_detail.query.filter_by(documentUser=k.username,documentType=k.documentDetails).first()
    #                     if result_detailDoc != None:
    #                         json_sky['document_details'] = eval(result_detailDoc.documentJson)
    #                         json_sky['document_details_string'] = result_detailDoc.documentJson
    #                     else:
    #                         jsondetailsDoc = {}
    #                         jsondetailsDoc['document_type'] = None
    #                         jsondetailsDoc['document_name'] = None
    #                         jsondetailsDoc['document_remark'] = None
    #                         json_sky['document_details'] = jsondetailsDoc
    #                         json_sky['document_details_string'] = str(jsondetailsDoc)
    #                 else:
    #                     jsondetailsDoc = {}
    #                     jsondetailsDoc['document_type'] = None
    #                     jsondetailsDoc['document_name'] = None
    #                     jsondetailsDoc['document_remark'] = None
    #                     json_sky['document_details'] = jsondetailsDoc
    #                     json_sky['document_details_string'] = str(jsondetailsDoc)
    #             else:
    #                 jsondetailsDoc = {}
    #                 jsondetailsDoc['document_type'] = None
    #                 jsondetailsDoc['document_name'] = None
    #                 jsondetailsDoc['document_remark'] = None
    #                 json_sky['document_details'] = jsondetailsDoc
    #                 json_sky['document_details_string'] = str(jsondetailsDoc)
    #             arr_get.append(json_sky)
    #         print(len(arr_get))
    #         if len(arr_get) != 0:
    #             return {'result':'OK','messageText':arr_get,'status_Code':200}
    #         else:
    #             return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
    #     except Exception as ex:
    #         return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}

    def select_check_templateTaxV12(self,username,taxId):
        self.username = username
        self.taxId = taxId
        tmp_json = {}
        tmp_arr_get = []
        try:
            tmp_list_status = ["ACTIVE"]
            query_temp = None
            # print('user',self.username)
            # print('tax',self.taxId)
            if self.taxId != None :
                # print('tax')
                query_temp = db.session.query(
                    paper_lessstep.step_Code)\
                    .join(paper_lessdocument_detail, paper_lessdocument_detail.documentType==paper_lessstep.documentDetails)\
                    .filter(paper_lessstep.status=='ACTIVE',paper_lessstep.template_biz.contains(self.taxId))\
                    .filter(paper_lessdocument_detail.documentStatus=="ACTIVE",paper_lessdocument_detail.biz_info!=None,paper_lessdocument_detail.biz_info!='',paper_lessdocument_detail.biz_info.contains(self.taxId))\
                    .order_by((paper_lessstep.documentDetails).asc())\
                    .count()
            
               
            elif self.username != None:
                # print('userUSER')
                query_temp = db.session.query(
                    paper_lessstep.step_Code)\
                    .join(paper_lessdocument_detail, paper_lessdocument_detail.documentType==paper_lessstep.documentDetails)\
                    .filter(paper_lessstep.username==self.username,paper_lessstep.status=="ACTIVE")\
                    .filter(or_(paper_lessstep.template_biz=='',paper_lessstep.template_biz==None))\
                    .filter(paper_lessdocument_detail.documentUser == self.username)\
                    .filter(paper_lessdocument_detail.documentStatus == "ACTIVE")\
                    .order_by((paper_lessstep.sid).asc())\
                    .count()
            # len_arrget = len(query_temp)
            print(query_temp)
            tmp_json = {}
            tmp_json['sum_template'] = query_temp
            if query_temp != 0:
                return {'result':'OK','messageText':tmp_json,'status_Code':200}
            else:
                return {'result': 'ER', 'messageText': '0'}
        except Exception as ex:
            print(ex)
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล','messageER':str(ex)}
        finally:
            db.session.close()

    def select_template_paper(self,taxId,username,offset,limit,input_):
        self.taxId = taxId
        self.username = username
        self.offset = offset
        self.limit = limit
        self.input = input_
        list_ = []
        tmp_arr_get = []
        tmp_json = {}
        query_temp = None
        try:
            # if self.taxId == '' or self.taxId == None or self.input == '':
            #     return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล'}
            ch,startTime = checkDatetime(self.input)
            if self.taxId != None:
                if self.limit == '' and self.offset == '':
                    # print('All')
                    if ch == True:
                        print('อัพเดตล่าสุด')
                        endTime = startTime.replace(hour=23, minute=59, second=59, microsecond=0)
                        print(startTime)
                        print(endTime)
                        query_temp = db.session.query(
                            paper_lessstep.step_Code,
                            paper_lessstep.step_Data,
                            paper_lessstep.step_Max,
                            paper_lessstep.username,
                            paper_lessstep.email,
                            paper_lessstep.DateTime,
                            paper_lessstep.step_Description,
                            paper_lessstep.step_Name,
                            paper_lessstep.step_Upload,
                            paper_lessstep.template_biz,
                            paper_lessstep.qrCode_position,
                            paper_lessstep.status,
                            paper_lessstep.documentDetails,
                            paper_lessstep.urgent_type,
                            paper_lessstep.webhook,
                            paper_lessstep.condition_temp,
                            paper_lessstep.email_center,
                            paper_lessstep.formula_temp,
                            paper_lessstep.digit_sign,
                            paper_lessstep.page_sign_options,
                            paper_lessstep.options_page,
                            paper_lessstep.status_use,
                            paper_lessdocument_detail.documentJson)\
                            .join(paper_lessdocument_detail, paper_lessdocument_detail.documentType==paper_lessstep.documentDetails)\
                            .filter(paper_lessstep.status=='ACTIVE',paper_lessstep.template_biz.contains(self.taxId))\
                            .filter(paper_lessdocument_detail.documentStatus=="ACTIVE",paper_lessdocument_detail.biz_info!=None,paper_lessdocument_detail.biz_info!='',paper_lessdocument_detail.biz_info.contains(self.taxId))\
                            .filter(paper_lessstep.DateTime <= endTime).filter(paper_lessstep.DateTime >= startTime)\
                            .order_by((paper_lessstep.documentDetails).asc())\
                            .all()
                    
                    else:
                        # print('ประเภท ชื่อรูปแบบ')
                        input2 = '%' + str(self.input) + '%'
                        query_temp = db.session.query(
                            paper_lessstep.step_Code,
                            paper_lessstep.step_Data,
                            paper_lessstep.step_Max,
                            paper_lessstep.username,
                            paper_lessstep.email,
                            paper_lessstep.DateTime,
                            paper_lessstep.step_Description,
                            paper_lessstep.step_Name,
                            paper_lessstep.step_Upload,
                            paper_lessstep.template_biz,
                            paper_lessstep.qrCode_position,
                            paper_lessstep.status,
                            paper_lessstep.documentDetails,
                            paper_lessstep.urgent_type,
                            paper_lessstep.webhook,
                            paper_lessstep.condition_temp,
                            paper_lessstep.email_center,
                            paper_lessstep.formula_temp,
                            paper_lessstep.digit_sign,
                            paper_lessstep.page_sign_options,
                            paper_lessstep.status_use,
                            paper_lessstep.options_page,
                            paper_lessdocument_detail.documentJson)\
                            .join(paper_lessdocument_detail, paper_lessdocument_detail.documentType==paper_lessstep.documentDetails)\
                            .filter(or_(paper_lessstep.step_Name.ilike(input2),paper_lessdocument_detail.documentJson.ilike(input2),paper_lessstep.email.ilike(input2)))\
                            .filter(paper_lessstep.status=='ACTIVE',paper_lessstep.template_biz.contains(self.taxId))\
                            .filter(paper_lessdocument_detail.documentStatus=="ACTIVE",paper_lessdocument_detail.biz_info!=None,paper_lessdocument_detail.biz_info!='',paper_lessdocument_detail.biz_info.contains(self.taxId))\
                            .order_by((paper_lessstep.documentDetails).asc())\
                            .all()
                
                else:
                    print('else')
                    if ch == True:
                        endTime = startTime.replace(hour=23, minute=59, second=59, microsecond=0)
                        query_temp = db.session.query(
                            paper_lessstep.step_Code,
                            paper_lessstep.step_Data,
                            paper_lessstep.step_Max,
                            paper_lessstep.username,
                            paper_lessstep.email,
                            paper_lessstep.DateTime,
                            paper_lessstep.step_Description,
                            paper_lessstep.step_Name,
                            paper_lessstep.step_Upload,
                            paper_lessstep.template_biz,
                            paper_lessstep.qrCode_position,
                            paper_lessstep.status,
                            paper_lessstep.documentDetails,
                            paper_lessstep.urgent_type,
                            paper_lessstep.webhook,
                            paper_lessstep.condition_temp,
                            paper_lessstep.email_center,
                            paper_lessstep.formula_temp,
                            paper_lessstep.digit_sign,
                            paper_lessstep.page_sign_options,
                            paper_lessstep.options_page,
                            paper_lessstep.status_use,
                            paper_lessdocument_detail.documentJson)\
                            .join(paper_lessdocument_detail, paper_lessdocument_detail.documentType==paper_lessstep.documentDetails)\
                            .filter(paper_lessstep.DateTime <= endTime).filter(paper_lessstep.DateTime >= startTime)\
                            .filter(paper_lessstep.status=='ACTIVE',paper_lessstep.template_biz.contains(self.taxId))\
                            .filter(paper_lessdocument_detail.documentStatus=="ACTIVE",paper_lessdocument_detail.biz_info!=None,paper_lessdocument_detail.biz_info!='',paper_lessdocument_detail.biz_info.contains(self.taxId))\
                            .order_by((paper_lessstep.documentDetails).asc())\
                            .offset(int(self.offset)).limit(int(self.limit))\
                            .all()
                   
                    else:
                        input2 = '%' + str(self.input) + '%'
                        print('ประเภท ชื่อรูปแบบ')
                        query_temp = db.session.query(
                            paper_lessstep.step_Code,
                            paper_lessstep.step_Data,
                            paper_lessstep.step_Max,
                            paper_lessstep.username,
                            paper_lessstep.email,
                            paper_lessstep.DateTime,
                            paper_lessstep.step_Description,
                            paper_lessstep.step_Name,
                            paper_lessstep.step_Upload,
                            paper_lessstep.template_biz,
                            paper_lessstep.qrCode_position,
                            paper_lessstep.status,
                            paper_lessstep.documentDetails,
                            paper_lessstep.urgent_type,
                            paper_lessstep.webhook,
                            paper_lessstep.condition_temp,
                            paper_lessstep.email_center,
                            paper_lessstep.formula_temp,
                            paper_lessstep.digit_sign,
                            paper_lessstep.page_sign_options,
                            paper_lessstep.options_page,
                            paper_lessstep.status_use,
                            paper_lessdocument_detail.documentJson)\
                            .join(paper_lessdocument_detail, paper_lessdocument_detail.documentType==paper_lessstep.documentDetails)\
                            .filter(or_(paper_lessstep.step_Name.ilike(input2),paper_lessdocument_detail.documentJson.ilike(input2),paper_lessstep.email.ilike(input2)))\
                            .filter(paper_lessstep.status=='ACTIVE',paper_lessstep.template_biz.contains(self.taxId))\
                            .filter(paper_lessdocument_detail.documentStatus=="ACTIVE",paper_lessdocument_detail.biz_info!=None,paper_lessdocument_detail.biz_info!='',paper_lessdocument_detail.biz_info.contains(self.taxId))\
                            .order_by((paper_lessstep.documentDetails).asc())\
                            .offset(int(self.offset)).limit(int(self.limit))\
                            .all()
            
            elif self.username != None:
                if self.limit == '' and self.offset == '':
                    # print('All')
                    if ch == True:
                        # print('อัพเดตล่าสุด')
                        endTime = startTime.replace(hour=23, minute=59, second=59, microsecond=0)
                        query_temp = db.session.query(
                            paper_lessstep.step_Code,
                            paper_lessstep.step_Data,
                            paper_lessstep.step_Max,
                            paper_lessstep.username,
                            paper_lessstep.email,
                            paper_lessstep.DateTime,
                            paper_lessstep.step_Description,
                            paper_lessstep.step_Name,
                            paper_lessstep.step_Upload,
                            paper_lessstep.template_biz,
                            paper_lessstep.qrCode_position,
                            paper_lessstep.status,
                            paper_lessstep.documentDetails,
                            paper_lessstep.urgent_type,
                            paper_lessstep.webhook,
                            paper_lessstep.condition_temp,
                            paper_lessstep.email_center,
                            paper_lessstep.formula_temp,
                            paper_lessstep.digit_sign,
                            paper_lessstep.page_sign_options,
                            paper_lessstep.options_page,
                            paper_lessstep.status_use,
                            paper_lessdocument_detail.documentJson)\
                            .join(paper_lessdocument_detail, paper_lessdocument_detail.documentType==paper_lessstep.documentDetails)\
                            .filter(paper_lessstep.username==self.username,paper_lessstep.status=="ACTIVE")\
                            .filter(or_(paper_lessstep.template_biz=='',paper_lessstep.template_biz==None))\
                            .filter(paper_lessdocument_detail.documentUser == self.username)\
                            .filter(paper_lessdocument_detail.documentStatus == "ACTIVE")\
                            .filter(paper_lessstep.DateTime <= endTime).filter(paper_lessstep.DateTime >= startTime)\
                            .order_by((paper_lessstep.sid).asc())\
                            .all()
                    else:
                        # print('ประเภท ชื่อรูปแบบ')
                        input2 = '%' + str(self.input) + '%'
                        query_temp = db.session.query(
                            paper_lessstep.step_Code,
                            paper_lessstep.step_Data,
                            paper_lessstep.step_Max,
                            paper_lessstep.username,
                            paper_lessstep.email,
                            paper_lessstep.DateTime,
                            paper_lessstep.step_Description,
                            paper_lessstep.step_Name,
                            paper_lessstep.step_Upload,
                            paper_lessstep.template_biz,
                            paper_lessstep.qrCode_position,
                            paper_lessstep.status,
                            paper_lessstep.documentDetails,
                            paper_lessstep.urgent_type,
                            paper_lessstep.webhook,
                            paper_lessstep.condition_temp,
                            paper_lessstep.email_center,
                            paper_lessstep.formula_temp,
                            paper_lessstep.digit_sign,
                            paper_lessstep.page_sign_options,
                            paper_lessstep.status_use,
                            paper_lessstep.options_page,
                            paper_lessdocument_detail.documentJson)\
                            .join(paper_lessdocument_detail, paper_lessdocument_detail.documentType==paper_lessstep.documentDetails)\
                            .filter(paper_lessstep.username==self.username,paper_lessstep.status=="ACTIVE")\
                            .filter(or_(paper_lessstep.template_biz=='',paper_lessstep.template_biz==None))\
                            .filter(paper_lessdocument_detail.documentUser == self.username)\
                            .filter(paper_lessdocument_detail.documentStatus == "ACTIVE")\
                            .filter(or_(paper_lessstep.step_Name.ilike(input2),paper_lessdocument_detail.documentJson.ilike(input2),paper_lessstep.email.ilike(input2)))\
                            .order_by((paper_lessstep.sid).asc())\
                            .all()
                
                else:
                    if ch == True:
                        # print('อัพเดตล่าสุด')
                        endTime = startTime.replace(hour=23, minute=59, second=59, microsecond=0)
                        query_temp = db.session.query(
                            paper_lessstep.step_Code,
                            paper_lessstep.step_Data,
                            paper_lessstep.step_Max,
                            paper_lessstep.username,
                            paper_lessstep.email,
                            paper_lessstep.DateTime,
                            paper_lessstep.step_Description,
                            paper_lessstep.step_Name,
                            paper_lessstep.step_Upload,
                            paper_lessstep.template_biz,
                            paper_lessstep.qrCode_position,
                            paper_lessstep.status,
                            paper_lessstep.documentDetails,
                            paper_lessstep.urgent_type,
                            paper_lessstep.webhook,
                            paper_lessstep.condition_temp,
                            paper_lessstep.email_center,
                            paper_lessstep.formula_temp,
                            paper_lessstep.digit_sign,
                            paper_lessstep.page_sign_options,
                            paper_lessstep.options_page,
                            paper_lessstep.status_use,
                            paper_lessdocument_detail.documentJson)\
                            .join(paper_lessdocument_detail, paper_lessdocument_detail.documentType==paper_lessstep.documentDetails)\
                            .filter(paper_lessstep.username==self.username,paper_lessstep.status=="ACTIVE")\
                            .filter(or_(paper_lessstep.template_biz=='',paper_lessstep.template_biz==None))\
                            .filter(paper_lessdocument_detail.documentUser == self.username)\
                            .filter(paper_lessdocument_detail.documentStatus == "ACTIVE")\
                            .filter(paper_lessstep.DateTime <= endTime).filter(paper_lessstep.DateTime >= startTime)\
                            .order_by((paper_lessstep.sid).asc())\
                            .offset(int(self.offset)).limit(int(self.limit))\
                            .all()
                    else:
                        input2 = '%' + str(self.input) + '%'
                        print('ประเภท ชื่อรูปแบบ')
                        query_temp = db.session.query(
                            paper_lessstep.step_Code,
                            paper_lessstep.step_Data,
                            paper_lessstep.step_Max,
                            paper_lessstep.username,
                            paper_lessstep.email,
                            paper_lessstep.DateTime,
                            paper_lessstep.step_Description,
                            paper_lessstep.step_Name,
                            paper_lessstep.step_Upload,
                            paper_lessstep.template_biz,
                            paper_lessstep.qrCode_position,
                            paper_lessstep.status,
                            paper_lessstep.documentDetails,
                            paper_lessstep.urgent_type,
                            paper_lessstep.webhook,
                            paper_lessstep.condition_temp,
                            paper_lessstep.email_center,
                            paper_lessstep.formula_temp,
                            paper_lessstep.digit_sign,
                            paper_lessstep.page_sign_options,
                            paper_lessstep.status_use,
                            paper_lessstep.options_page,
                            paper_lessdocument_detail.documentJson)\
                            .join(paper_lessdocument_detail, paper_lessdocument_detail.documentType==paper_lessstep.documentDetails)\
                            .filter(paper_lessstep.username==self.username,paper_lessstep.status=="ACTIVE")\
                            .filter(or_(paper_lessstep.template_biz=='',paper_lessstep.template_biz==None))\
                            .filter(paper_lessdocument_detail.documentUser == self.username)\
                            .filter(paper_lessdocument_detail.documentStatus == "ACTIVE")\
                            .filter(or_(paper_lessstep.step_Name.ilike(input2),paper_lessdocument_detail.documentJson.ilike(input2),paper_lessstep.email.ilike(input2)))\
                            .order_by((paper_lessstep.sid).asc())\
                            .offset(int(self.offset)).limit(int(self.limit))\
                            .all()
                
            print(len(query_temp))
            for n in query_temp:                
                tmp_asdict = n._asdict()
                status_use1 = tmp_asdict['status_use']
                try:
                    tmp_options_page = eval(tmp_asdict['options_page'])
                except Exception as e:
                    tmp_options_page = {}
                try:
                    tmpformula_temp = eval(tmp_asdict['formula_temp'])
                    tmpformula_temp_string = tmp_asdict['formula_temp']
                except Exception as e:
                    tmpformula_temp = None
                    tmpformula_temp_string = tmp_asdict['formula_temp']
                if tmp_asdict['qrCode_position'] != None:
                    try:
                        tmp_qrCode_position = eval(tmp_asdict['qrCode_position'])
                    except Exception as ex:
                        return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล qrCode_position ให้เป็น Json ได้'}
                else:
                    tmp_qrCode_position = None
                if tmp_asdict['documentDetails'] != None:
                    tmp_document_typeJson = eval(tmp_asdict['documentJson'])
                    tmp_document_typeJson_string = tmp_asdict['documentJson']
                else:
                    jsondetailsDoc = {}
                    jsondetailsDoc['document_type'] = None
                    jsondetailsDoc['document_name'] = None
                    jsondetailsDoc['document_remark'] = None
                    tmp_document_typeJson = jsondetailsDoc
                    tmp_document_typeJson_string = str(jsondetailsDoc)
                tmp_urgent_type = 'M'
                tmp_urgent_string_th = 'ปกติ'
                tmp_urgent_string_en = 'MEDIUM'
                if tmp_asdict['urgent_type'] != None:
                    tmp_urgent_type = tmp_asdict['urgent_type']
                    if tmp_urgent_type == 'M':
                        tmp_urgent_string_th = 'ปกติ'
                        tmp_urgent_string_en = 'MEDIUM'
                    elif tmp_urgent_type == 'U':
                        tmp_urgent_string_th = 'ด่วน'
                        tmp_urgent_string_en = 'URGENT'
                    elif tmp_urgent_type == 'I':
                        tmp_urgent_string_th = 'ด่วนมาก'
                        tmp_urgent_string_en = 'IMMEDIATE'
                try:
                    data_step = eval(tmp_asdict['step_Data'])
                except Exception as ex:
                    return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล Step ให้เป็น Json ได้'}
                try:
                    step_Upload = eval(tmp_asdict['step_Upload'])
                except Exception as ex:
                    return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล step_Upload ให้เป็น Json ได้'}
                if tmp_asdict['step_Max'] == 1:
                    tmp_data_step = [data_step]
                else:
                    tmp_data_step = data_step
                try:
                    data_step = tmp_asdict['step_Data']
                    data_step = eval(data_step)
                    if tmp_asdict['step_Max'] != 1:
                        step_infomation = list(eval(tmp_asdict['step_Data']))
                    else:
                        step_infomation = [data_step]
                    tmp_sign_detail_list = []
                    muti_sign = False
                    for i in range(len(step_infomation)):
                        sign_json_info = {}
                        tmp_sign_list_info = []
                        step_ = step_infomation[i]
                        step_num = step_infomation[i]['step_num']
                        # print(type(step_infomation[i]))
                        if 'step_sign' in step_:
                            tmp_stepsign = step_['step_sign']
                            tmp_status_stepsign = tmp_stepsign['status']
                            if tmp_status_stepsign == True:
                                muti_sign = True
                                tmp_data_stepsign = tmp_stepsign['data']
                                for y in range(len(tmp_data_stepsign)):
                                    step_signning = tmp_data_stepsign[y]
                                    tmp_sign_list_info.append(step_signning)
                        for u in range(len(step_['step_detail'])):
                            step_2 = step_['step_detail'][u]
                            for zz in range(len(step_2['activity_data'])): 
                                if 'status' in step_2['activity_data'][zz]:
                                    sign_json_info = step_2['activity_data'][zz]
                                    tmp_sign_list_info.append(sign_json_info)
                        sign_json_info = {
                            'data':tmp_sign_list_info,
                            'step_num':step_num
                        }
                        tmp_sign_detail_list.append(sign_json_info)
                    # json_sky['sign_info'] = tmp_sign_detail_list
                except Exception as e:
                    exc_type, exc_obj, exc_tb = sys.exc_info()
                    fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
                    print(exc_type, fname, exc_tb.tb_lineno)
                    tmp_sign_detail_list = []
                # json_sky['multi_sign'] = muti_sign
                tmp_json = {
                    'stamp_all':tmp_asdict['page_sign_options'],
                    'step_Code':tmp_asdict['step_Code'],
                    'dateTime':tmp_asdict['DateTime'],
                    'dateTime_string':str(tmp_asdict['DateTime']).split('+')[0],
                    'condition_string':tmp_asdict['condition_temp'],
                    'step_Upload':json.loads(json.dumps(tmp_asdict['step_Upload'])),
                    'template_webhook':tmp_asdict['webhook'],
                    'email_center':tmp_asdict['email_center'],
                    'options_page_string':tmp_asdict['options_page'],
                    'options_page':tmp_options_page,
                    'formula_temp_string':tmpformula_temp_string,
                    'formula_temp':tmpformula_temp,
                    'digit_sign':bool(tmp_asdict['digit_sign']),
                    'username':tmp_asdict['username'],
                    'step_Max':int(tmp_asdict['step_Max']),
                    'step_Name':tmp_asdict['step_Name'],
                    'qrCode_position':tmp_qrCode_position,
                    'step_Description':tmp_asdict['step_Description'],
                    'document_details':tmp_document_typeJson,
                    'document_details_string':tmp_document_typeJson_string,
                    'email':tmp_asdict['email'],
                    'urgent_code':tmp_urgent_type,
                    'urgent_string_th':tmp_urgent_string_th,
                    'urgent_string_en':tmp_urgent_string_en,
                    'data_step':tmp_data_step,
                    'sign_info':tmp_sign_detail_list,
                    'multi_sign':muti_sign,
                    'status_use': status_use1
                }
                tmp_arr_get.append(tmp_json)
            print(len(tmp_arr_get))
            if len(tmp_arr_get) != 0:
                return {'result':'OK','messageText':tmp_arr_get,'status_Code':200}
            else:
                return {'result': 'OK', 'messageText': 'ไม่พบข้อมูล'}
        except Exception as ex:
            print(ex)
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result': 'ER', 'messageText': 'ไม่พบข้อมูล','messageER':str(ex)}
        finally:
            db.session.close()

class insert_1():
    def insert_group_v2(self,sidcode,group_email,email_create,group_step_num,datasum_group,arr_color,group_view_email,datasign,groupstatus_email,group_title=None,\
        cover_name=None,bizinfo=None,group_status=None,cover_page=None,calculate_fieds=None,maxstep=None,email_middle=None,doctype_group=None,tmp_bizinfo=None,arr_string_options_page=None,html_data=None,json_data=None):
        self.sidcode = sidcode
        self.group_email = group_email
        self.email_create = email_create
        self.group_step_num = group_step_num
        self.datasum_group = datasum_group
        self.arr_color = arr_color
        self.group_view_email = group_view_email
        self.datasign = datasign
        self.groupstatus_email = groupstatus_email
        self.group_title = None
        self.cover_name = None
        # self.document_type = None
        self.bizinfo = None
        self.group_status = None
        self.cover_page = None
        self.calculate_fieds = None
        self.maxstep = None
        self.email_middle = None
        self.html_data = None
        self.json_data = None
        if group_title != None:
            self.group_title = str(group_title)
        if cover_name != None:
            self.cover_name = str(cover_name)
        # if document_type != None:
        #     self.document_type = str(document_type)
        if bizinfo != None:
            self.bizinfo = str(bizinfo)
        if group_status != None:
            self.group_status = str(group_status)
        if cover_page != None:
            self.cover_page = str(cover_page)
        if calculate_fieds != None:
            self.calculate_fieds = str(calculate_fieds)
        if maxstep != None:
            self.maxstep = str(maxstep)
        if email_middle != None:
            self.email_middle = str(email_middle)
        if html_data != None:
            self.html_data = str(html_data)
        if json_data != None:
            self.json_data = str(json_data)
        if doctype_group != None:
            self.doctype_group = str(doctype_group)
        if tmp_bizinfo != None:
            self.tmp_bizinfo = str(tmp_bizinfo)
        if arr_string_options_page != None:
            self.arr_string_options_page = str(arr_string_options_page)
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        # arr_string_options_page = []
        try:
            select_result = paper_lessdocument.query.filter(paper_lessdocument.step_id.in_(self.sidcode)).all()
            for n in select_result:
                tmpjson = n.__dict__
                if '_sa_instance_state' in tmpjson:
                    del tmpjson['_sa_instance_state']
                tmp_options_page = tmpjson['options_page']
                try:
                    tmp_options_page = eval(tmp_options_page)
                except Exception as e:
                    tmp_options_page = ''
                if 'subject_text' in tmp_options_page:
                    tmp_subject_text = tmp_options_page['subject_text']
                if 'body_text' in tmp_options_page:
                    tmp_body_text = tmp_options_page['body_text']
                json_data = {
                    "subject_text":tmp_subject_text,
                    "body_text":tmp_body_text
                }
                # arr_string_options_page.append(json_data)
            random_digit = random.randint(1, 3)
            if random_digit == 1:
                tracking = get_random_string(9)
            elif random_digit == 2:
                tracking = random_string_digit_generator()
            elif random_digit == 3:
                tracking = random_digit_string_generator()
            tracking = string_check(tracking,random_digit)
            tracking = id_generator(4) + (''.join(tracking))
            # print(self.email_middle)
            tmpgroup_color = self.arr_color[0]['color']
            insert_result = tb_group_document_2(sid_group=str(self.sidcode),data_group=str(self.arr_string_options_page),updatetime=str(st),email_group=str(self.group_email),status='ACTIVE',create_by=self.email_create\
                ,update_by=self.email_create,step_group=str(self.group_step_num),pdf_org=None,pdf_sign=None,step_group_detail=str(self.datasign)\
                ,group_data_json=str(self.datasum_group),group_other=str(self.arr_color),email_view_group=str(self.group_view_email),hash_id=None,tracking_group=tracking\
                ,status_group=str(self.groupstatus_email),group_title=self.group_title,group_name=self.cover_name,bizinfo=self.bizinfo\
                ,group_status=self.group_status,cover_page=self.cover_page,calculate_fieds=self.calculate_fieds,maxstep=self.maxstep,email_middle=str(self.email_middle),html_data=self.html_data,json_data=self.json_data,doctype_group=self.doctype_group,bizinfo_group=self.tmp_bizinfo)
            db.session.add(insert_result)
            db.session.flush()
            db.session.commit()
            return {'result':'OK','messageText':{'group_id':insert_result.id,'tracking_group':insert_result.tracking_group,'group_color':tmpgroup_color}}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            print(str(e))
            return {'result':'ER','messageText':str(e)}
        finally:
            db.session.close()


    def insert_paper_template_sql(self,step_Code,step_Data,step_Max,username,email,DateTime,step_Name,step_Upload,step_Description=None,template_images=None,qrCode_position=None,status_Update=None,documentDetails=None,urgent_type=None,template_biz=None,condition_temp=None,webhook=None,email_center=None,formula_temp=None,digit_sign=None,page_sign_options=None,options_page=None,use_status=None,time_expire=None,importance=None,last_digitsign=None,status_ref=None):
        self.step_Code = step_Code
        self.step_Data = step_Data
        self.step_Max = step_Max
        self.username = username
        self.email = email
        self.DateTime = DateTime
        self.step_Description = step_Description
        self.step_Name = str(step_Name)
        self.step_Upload = step_Upload
        self.template_images = template_images
        self.qrCode_position = qrCode_position
        self.status = 'ACTIVE'
        self.status_Update = status_Update
        self.documentDetails = documentDetails
        self.urgent_type = urgent_type
        self.template_biz = template_biz
        self.time_expire = time_expire
        self.importance = importance
        self.last_digitsign = last_digitsign
        if use_status != None:
            self.use_status = use_status
        else:
            self.use_status = 'ACTIVE'
        try:
            tmp_eval_tax_id = eval(self.template_biz)
            tmp_tax_id = tmp_eval_tax_id['id_card_num']
        except Exception as e:
            tmp_tax_id = ''
        self.condition_temp = condition_temp
        self.webhook = webhook
        self.email_center = email_center
        self.formula_temp = str(formula_temp)
        self.digit_sign = digit_sign
        if str(self.urgent_type).replace(' ','') == '':
             self.urgent_type = 'M'
        self.page_sign_options = page_sign_options
        self.options_page = str(options_page)
        total_time = None
        if self.time_expire != None :
            time_ex_eval = eval(self.time_expire)
            status = time_ex_eval['status']
            if status == True:
                data_ex = eval(str(time_ex_eval['data_ex']))
                day = data_ex['day']
                hour = data_ex['hour']
                total_time = (int(day) * 24) + int(hour)
        self.status_ref = status_ref
        try:
            where_sql = ' WHERE "step_Name"=:step_name AND "username"=:username AND "status"=:status'
            template_biz = None
            if tmp_tax_id != '':
                print('if')
                where_sql += ' AND "template_biz" LIKE :template_biz'
                template_biz = "%'{}'%".format(tmp_tax_id)
                # count_row02 = paper_lessstep.query.filter(paper_lessstep.step_Name==self.step_Name,paper_lessstep.username==self.username,paper_lessstep.status=='ACTIVE',paper_lessstep.template_biz.contains(tmp_tax_id)).count()
            else:
                template_biz = ''
                where_sql += ' AND "template_biz"=:template_biz'
                # count_row02 = paper_lessstep.query.filter(paper_lessstep.step_Name==self.step_Name,paper_lessstep.username==self.username,paper_lessstep.status=='ACTIVE',paper_lessstep.template_biz=='').count()
            text_sql = 'SELECT COUNT("sid") FROM "tb_step_template"' + where_sql
            with slave.connect() as connection:
                result_all = connection.execute(text(text_sql),step_name=self.step_Name,username=self.username,status='ACTIVE',template_biz=template_biz)
                count_row = [dict(row) for row in result_all]
                connection.close()
            if count_row[0]['count'] == 0:
                with engine.connect() as connection:
                    result =  connection.execute('insert into tb_step_template ("step_Code","step_Data","step_Max","username", \
                    "email","DateTime","step_Description","step_Name","step_Upload","template_images","template_biz","qrCode_position", \
                    "status","status_Update","documentDetails","urgent_type","condition_temp","webhook","email_center", \
                    "formula_temp","digit_sign","page_sign_options","options_page","status_use","time_expire","importance_doc", \
                    "last_digit_sign","status_ref")\
                    values (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s) \
                    returning "sid"',self.step_Code,self.step_Data,self.step_Max,self.username,self.email,self.DateTime,self.step_Description,self.step_Name,self.step_Upload,\
                    json.dumps(self.template_images),self.template_biz,self.qrCode_position,self.status,self.status_Update,self.documentDetails,self.urgent_type,\
                    self.condition_temp,self.webhook,self.email_center,self.formula_temp,self.digit_sign,self.page_sign_options,self.options_page,\
                    self.use_status,total_time,self.importance,self.last_digitsign,self.status_ref)
                    connection.close()
                    insert_template = [dict(row) for row in result]
                # insert_template = paper_lessstep(step_Code=self.step_Code,step_Data=self.step_Data,step_Max=self.step_Max,username=self.username,email=self.email,DateTime=self.DateTime,
                # step_Description=self.step_Description,step_Name=self.step_Name,step_Upload=self.step_Upload,
                # template_images=json.dumps(self.template_images),template_biz=self.template_biz,qrCode_position=self.qrCode_position,
                # status=self.status,status_Update=self.status_Update,documentDetails=self.documentDetails,urgent_type=self.urgent_type,
                # condition_temp=self.condition_temp,webhook=self.webhook,email_center=self.email_center,formula_temp=self.formula_temp,digit_sign=self.digit_sign,page_sign_options=self.page_sign_options,options_page=self.options_page,
                # status_use=self.use_status,time_expire=total_time,importance_doc=self.importance,last_digit_sign=self.last_digitsign)
                # db.session.add(insert_template)
                # db.session.flush()
                # db.session.commit()
                return {'result':'OK','messageText':insert_template[0]['sid']}
            else:
                return {'result':'ER','messageText':'Duplicate Value!'}
        except exc.SQLAlchemyError as ex:
            print(ex)
            print(str(ex))
            return {'result':'ER','messageText':'Duplicate Value!'}
        except Exception as ex:
            print(ex)
            print('EX',str(ex))
            return {'result':'ER','messageText':str(ex)}
        finally:
            db.session.close()

    def insert_upload_ppl(self,template,step,step_data,name_file,convert_id,file_string,step_data_Upload,biz_detail,qrCode_position,document_type,type_file,document_json,urgent_type,digit_sign,attempted_name,sign_page_options,options_page,send_user,status,sender_name,sender_email,sender_position,step_code,sender_webhook,email_center,time_expire,importance,eform_id,last_digitsign):
        self.template = template
        self.step = step
        self.step_data = step_data
        self.name_file = name_file
        self.convert_id = convert_id
        self.file_string = file_string
        self.step_data_Upload = step_data_Upload
        self.biz_detail = biz_detail
        self.qrCode_position = qrCode_position
        self.document_type = document_type
        self.type_file = type_file
        self.document_json = document_json
        self.urgent_type = urgent_type
        self.digit_sign = digit_sign
        self.attempted_name = attempted_name
        self.sign_page_options = sign_page_options
        self.options_page = options_page
        self.send_user = send_user
        self.status = status
        self.sender_name = sender_name
        self.sender_email = sender_email
        self.sender_position = sender_position
        self.step_code = step_code
        self.sender_webhook= sender_webhook
        self.email_center = email_center
        self.time_expire = time_expire
        self.importance = importance
        self.eform_id = eform_id
        self.last_digitsign = last_digitsign
        FileSize = base64Tobytes(self.file_string)
        try:
            eval(self.step_data)
        except Exception as ex:
            return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล step_data ให้เป็น Json ได้','status_Code':400}
        
        try:
            sha512encode = hashlib.sha512(str(self.file_string).encode('utf-8')).hexdigest()
            tmp_filestringbase64 = str(self.file_string)
            # INSERT TO tb_pdf_storage
            # res_insert_pdf = insert().insert_paper_pdf(str(self.file_string),sha512encode)
            res_insert_pdf = insert_1().insert_paper_pdf_sql(str(self.file_string),sha512encode)
            if res_insert_pdf['result'] == 'OK':
                res_track = insert_1().insert_paper_tracking_sql(self.convert_id,res_insert_pdf['messageText'],self.template,self.step)
                print('res_track',res_track)
                hash_sid_code = res_track['hash_sid_code']
                if res_track['result'] == 'OK':
                    ts = int(time.time())
                    st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
                    result_insert = insert_1().insert_paper_datastep_sql(res_track['step_data_sid'],self.step_data,st,self.step_data_Upload,self.step,self.biz_detail,self.qrCode_position)
                    if result_insert['result'] == 'OK':
                            convert_pdf_image_v1(res_track['step_data_sid'],tmp_filestringbase64)
                            tracking_code = res_track['messageText']
                            step_data_sid = res_track['step_data_sid']
                            convert_id = res_track['convert_id']
                            file_id = res_insert_pdf['messageText']
                            file_name = self.name_file
                            result_DocumentID = document_().genarate_document_ID(self.document_type)
                            print('result_DocumentID',result_DocumentID)
                            if result_DocumentID['result'] == 'OK':
                                # INSERT TO tb_doc
                                # resinsert_doc = insert().insert_document_new_v(step_data_sid,self.type_file,file_id,self.document_json,self.document_type,self.urgent_type,self.digit_sign,self.attempted_name,result_DocumentID['messageText']['documentID'],self.sign_page_options,self.options_page)
                                resinsert_doc = insert_1().insert_document_sql(step_data_sid,self.type_file,file_id,self.document_json,self.document_type,self.urgent_type,self.digit_sign,self.attempted_name,result_DocumentID['messageText']['documentID'],self.sign_page_options,self.options_page)
                                print('resinsert_doc',resinsert_doc)
                                if resinsert_doc['result'] =='OK':
                                    ts = int(time.time())
                                    st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
                                    sendtime = datetime.datetime.fromtimestamp(ts).strftime('%d-%m-%Y %H:%M:%S')
                                    print('resinsert_doc',resinsert_doc)
                                    # INSERT TO tb_send_detail
                                    # res_insert_sender = insert().insert_paper_sender_v2(self.send_user,st,self.status,self.sender_name,self.sender_email,self.sender_position,file_id,file_name,tracking_code,step_data_sid,self.step_code,resinsert_doc['document_Id'],self.sender_webhook,self.email_center)
                                    res_insert_sender = insert_1().insert_paper_sender_sql(self.send_user,st,self.status,self.sender_name,self.sender_email,self.sender_position,file_id,file_name,tracking_code,step_data_sid,self.template,resinsert_doc['document_Id'],self.sender_webhook,self.email_center,self.time_expire,sendtime,self.importance,self.eform_id,self.last_digitsign,FileSize)
                                    print('res_insert_sender',res_insert_sender)
                                    if res_insert_sender['result'] == 'OK':
                                        try:
                                            eval(self.step_data)
                                        except Exception as ex:
                                            return jsonify({'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล sign_json ให้เป็น Json ได้ '}),200
                                        # INSERT TO tb_data_sign
                                        # res_insert_sign = insert().insert_sign_data(step_data_sid,self.step_data,file_id)
                                        res_insert_sign = insert_1().insert_sign_data_sql(step_data_sid,self.step_data,file_id)
                                        print('res_insert_sign',res_insert_sign)
                                        if res_insert_sign['result'] == 'OK':
                                            arr_tmp = [{
                                                "convert_id": null,
                                                "file_id": file_id,
                                                "file_name": file_name,
                                                "step_data_sid": step_data_sid,
                                                "tracking_code": tracking_code,
                                                "ref_Code" : resinsert_doc['document_Id'],
                                                "paperless_id" : hash_sid_code
                                            }]
                                            return {'result':'OK','messageText':arr_tmp,'status_Code':200}
                                        else:
                                            return {'result':'ER','messageText':res_insert_sign['messageText'],'status_Code':200}
                                    else:
                                        return {'result':'ER','messageText':res_insert_sender['messageText'],'status_Code':200}
                                    # return jsonify({'result':'OK','messageText':resinsert_doc['messageText'],'messageER':None,'document_Id':resinsert_doc['document_Id'],'status_Code':200,'ref_Code':resinsert_doc['ref_id']}),200
                                else:
                                    return {'result':'ER','messageText':result_DocumentID['messageText'],'messageER':result_DocumentID['messageER'],'status_Code':200}
                            else:
                                return {'result':'ER','messageText':result_DocumentID['messageText'],'messageER':result_DocumentID['messageER'],'status_Code':200}
                    else:
                        return {'result':'ER','messageText':result_insert['messageText'],'messageER':result_insert['messageER'],'status_Code':200}
                else:
                    return {'result':'ER','messageText':res_track['messageText'],'status_Code':200}
            else:
                return {'result':'ER','messageText':res_insert_pdf['messageText'],'status_Code':200}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            print('e',e)
            return {'result':'ER','messageText':str(e)}
        finally:
            db.session.close()

    def insert_upload_ppl_v2(self,template,step,step_data,name_file,convert_id,file_string,step_data_Upload,biz_detail,qrCode_position,document_type,type_file,document_json,urgent_type,digit_sign,attempted_name,sign_page_options,options_page,send_user,status,sender_name,sender_email,sender_position,step_code,sender_webhook,email_center,time_expire,importance,eform_id,last_digitsign,status_ref,list_ref,tax_id,datadoc=None,document_id=None,messagePages=None):
        self.template = template
        self.step = step
        self.step_data = step_data
        self.name_file = name_file
        self.convert_id = convert_id
        self.file_string = file_string
        self.step_data_Upload = step_data_Upload
        self.biz_detail = biz_detail
        self.qrCode_position = qrCode_position
        self.document_type = document_type
        self.type_file = type_file
        self.document_json = document_json
        self.urgent_type = urgent_type
        self.digit_sign = digit_sign
        self.attempted_name = attempted_name
        self.sign_page_options = sign_page_options
        self.options_page = options_page
        self.send_user = send_user
        self.status = status
        self.sender_name = sender_name
        self.sender_email = sender_email
        self.sender_position = sender_position
        self.step_code = step_code
        self.sender_webhook= sender_webhook
        self.email_center = email_center
        self.time_expire = time_expire
        self.importance = importance
        self.eform_id = eform_id
        self.last_digitsign = last_digitsign
        self.status_ref = status_ref
        self.list_ref = list_ref
        self.status_service = []
        self.tax_id = (tax_id)
        self.datadoc = datadoc
        self.messagePages = messagePages
        transaction = None
        if self.messagePages == 'noti2trans':
            transaction = '2'
        elif self.messagePages == 'notiadmin':
            return {'result':'ER','messageText':'pdf more than 51','status_Code':200} 
        print(self.tax_id)
        FileSize = base64Tobytes(self.file_string)
        try:
            eval(self.step_data)
        except Exception as ex:
            return {'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล step_data ให้เป็น Json ได้','status_Code':400}
        
        try:
            sha512encode = hashlib.sha512(str(self.file_string).encode('utf-8')).hexdigest()
            tmp_filestringbase64 = str(self.file_string)
            # INSERT TO tb_pdf_storage
            # res_insert_pdf = insert().insert_paper_pdf(str(self.file_string),sha512encode)
            res_insert_pdf = insert_1().insert_paper_pdf_sql(str(self.file_string),sha512encode)
            if res_insert_pdf['result'] == 'OK':
                res_track = insert_1().insert_paper_tracking_sql(self.convert_id,res_insert_pdf['messageText'],self.template,self.step)
                # print('res_track',res_track)
                hash_sid_code = res_track['hash_sid_code']
                if res_track['result'] == 'OK':
                    ts = int(time.time())
                    st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
                    result_insert = insert_1().insert_paper_datastep_sql(res_track['step_data_sid'],self.step_data,st,self.step_data_Upload,self.step,self.biz_detail,self.qrCode_position)
                    if result_insert['result'] == 'OK':
                            convert_pdf_image_v1(res_track['step_data_sid'],tmp_filestringbase64)
                            tracking_code = res_track['messageText']
                            step_data_sid = res_track['step_data_sid']
                            convert_id = res_track['convert_id']
                            file_id = res_insert_pdf['messageText']
                            file_name = self.name_file
                            if document_id != None:
                                result_DocumentID = {}
                                result_DocumentID['result'] = "OK"
                                result_DocumentID['messageText'] = {}
                                result_DocumentID['messageText']['documentID'] = document_id
                            else:
                                result_DocumentID = document_().genarate_document_ID(self.document_type)
                            if result_DocumentID['result'] == 'OK':
                                # INSERT TO tb_doc
                                # resinsert_doc = insert().insert_document_new_v(step_data_sid,self.type_file,file_id,self.document_json,self.document_type,self.urgent_type,self.digit_sign,self.attempted_name,result_DocumentID['messageText']['documentID'],self.sign_page_options,self.options_page)
                                resinsert_doc = insert_1().insert_document_sql_v2(step_data_sid,self.type_file,file_id,self.document_json,self.document_type,self.urgent_type,self.digit_sign,self.attempted_name,result_DocumentID['messageText']['documentID'],self.sign_page_options,self.options_page,datadoc)
                                print('resinsert_doc',resinsert_doc)
                                if resinsert_doc['result'] =='OK':
                                    ts = int(time.time())
                                    st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
                                    sendtime = datetime.datetime.fromtimestamp(ts).strftime('%d-%m-%Y %H:%M:%S')
                                    print('resinsert_doc',resinsert_doc)
                                    # INSERT TO tb_send_detail
                                    # res_insert_sender = insert().insert_paper_sender_v2(self.send_user,st,self.status,self.sender_name,self.sender_email,self.sender_position,file_id,file_name,tracking_code,step_data_sid,self.step_code,resinsert_doc['document_Id'],self.sender_webhook,self.email_center)
                                    res_insert_sender = insert_1().insert_paper_sender_sql_v2(self.send_user,st,self.status,self.sender_name,self.sender_email,self.sender_position,file_id,file_name,tracking_code,step_data_sid,self.template,resinsert_doc['document_Id'],self.sender_webhook,self.email_center,self.time_expire,sendtime,self.importance,self.eform_id,self.last_digitsign,self.status_ref,self.list_ref,self.status_service,FileSize,self.tax_id,transaction)
                                    print('res_insert_sender',res_insert_sender)
                                    if res_insert_sender['result'] == 'OK':
                                        try:
                                            eval(self.step_data)
                                        except Exception as ex:
                                            return jsonify({'result': 'ER', 'messageText': 'ไม่สามารถแปลงข้อมูล sign_json ให้เป็น Json ได้ '}),200
                                        # INSERT TO tb_data_sign
                                        # res_insert_sign = insert().insert_sign_data(step_data_sid,self.step_data,file_id)
                                        res_insert_sign = insert_1().insert_sign_data_sql(step_data_sid,self.step_data,file_id)
                                        print('res_insert_sign',res_insert_sign)
                                        if res_insert_sign['result'] == 'OK':
                                            arr_tmp = [{
                                                "convert_id": null,
                                                "file_id": file_id,
                                                "file_name": file_name,
                                                "step_data_sid": step_data_sid,
                                                "tracking_code": tracking_code,
                                                "ref_Code" : resinsert_doc['document_Id'],
                                                "paperless_id" : hash_sid_code,
                                            }]
                                            return {'result':'OK','messageText':arr_tmp,'status_Code':200}
                                        else:
                                            return {'result':'ER','messageText':res_insert_sign['messageText'],'status_Code':200}
                                    else:
                                        return {'result':'ER','messageText':res_insert_sender['messageText'],'status_Code':200}
                                    # return jsonify({'result':'OK','messageText':resinsert_doc['messageText'],'messageER':None,'document_Id':resinsert_doc['document_Id'],'status_Code':200,'ref_Code':resinsert_doc['ref_id']}),200
                                else:
                                    return {'result':'ER','messageText':result_DocumentID['messageText'],'messageER':result_DocumentID['messageER'],'status_Code':200}
                            else:
                                return {'result':'ER','messageText':result_DocumentID['messageText'],'messageER':result_DocumentID['messageER'],'status_Code':200}
                    else:
                        return {'result':'ER','messageText':result_insert['messageText'],'messageER':result_insert['messageER'],'status_Code':200}
                else:
                    return {'result':'ER','messageText':res_track['messageText'],'status_Code':200}
            else:
                return {'result':'ER','messageText':res_insert_pdf['messageText'],'status_Code':200}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            print('e',e)
            return {'result':'ER','messageText':str(e)}
        finally:
            db.session.close()

    def insert_paper_pdf_sql_v2(self,string_pdf,hash_pdf):
        self.string_pdf = string_pdf
        self.hash_pdf = hash_pdf
        try:
            message_pathpdf = None
            message_pathpdf_hash = None
            r = createfile_pdfsign_v1(self.string_pdf,self.hash_pdf)
            if r['result'] == 'OK':
                message_pathpdf = str(r['path_pdf'])
                message_pathpdf_hash = str(r['path_pdfhash'])
                message_path_pdfsign = str(r['path_pdfsign'])
                message_path_data = str(r['path_data'])
            with engine.connect() as connection:
                insert_pdf =  connection.execute('insert into tb_pdf_storage ("string_pdf","hash_pdf","string_sign","hash_sign","pdf_rejectorcancle","path_pdf","path_sign","path") \
                values (%s,%s,%s,%s,%s,%s,%s) \
                returning "fid"',self.string_pdf,self.hash_pdf,None,None,None,message_pathpdf,None,message_path_data)
                tmp = [dict(row) for row in insert_pdf]
                connection.close()
            return {'result':'OK','messageText':tmp[0]['fid']}
        except exc.SQLAlchemyError as ex:
            print(ex)
            return {'result':'ER','messageText':'Duplicate Value!'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}
        finally:
            db.session.close()

    def insert_paper_pdf_sql(self,string_pdf,hash_pdf):
        self.string_pdf = string_pdf
        self.hash_pdf = hash_pdf
        try:
            message_pathpdf = None
            message_pathpdf_hash = None
            message_path_data = None
            r = createfile_pdfsign_v1(self.string_pdf,self.hash_pdf)
            if r['result'] == 'OK':
                message_pathpdf = str(r['path_pdf'])
                message_pathpdf_hash = str(r['path_pdfhash'])
                message_path_pdfsign = str(r['path_pdfsign'])
                message_path_data = str(r['path_data'])
            with engine.connect() as connection:
                # insert_pdf =  connection.execute('insert into tb_pdf_storage ("path_pdf","path_sign","path") \
                # values (%s,%s,%s) \
                # returning "fid"',message_pathpdf,None,message_path_data)
                # # insert_pdf =  connection.execute('insert into tb_pdf_storage ("string_pdf","hash_pdf","string_sign","hash_sign","pdf_rejectorcancle") \
                # # values (%s,%s,%s,%s,%s) \
                # # returning "fid"',self.string_pdf,self.hash_pdf,None,None,None)
                # tmp = [dict(row) for row in insert_pdf]
                # connection.close()
                insert_pdf =  connection.execute('insert into tb_pdf_storage ("string_pdf","hash_pdf","string_sign","hash_sign","pdf_rejectorcancle","path_pdf","path_sign","path") \
                values (%s,%s,%s,%s,%s,%s,%s,%s) \
                returning "fid"',self.string_pdf,self.hash_pdf,None,None,None,message_pathpdf,None,message_path_data)
                # insert_pdf =  connection.execute('insert into tb_pdf_storage ("string_pdf","hash_pdf","string_sign","hash_sign","pdf_rejectorcancle") \
                # values (%s,%s,%s,%s,%s) \
                # returning "fid"',self.string_pdf,self.hash_pdf,None,None,None)
                tmp = [dict(row) for row in insert_pdf]
                connection.close()
            return {'result':'OK','messageText':tmp[0]['fid']}
        except exc.SQLAlchemyError as ex:
            print(ex)
            return {'result':'ER','messageText':'Duplicate Value!'}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            print(str(ex))
            return {'result':'ER','messageText':str(ex)}
        finally:
            db.session.close()

    def insert_sign_data_sql(self,sid,data_json,file_id):
        self.sid = sid
        self.data_json = data_json
        self.file_id = file_id
        try:
            get_count_row = paper_lesssign.query.filter_by(sid=self.sid).count()
            if get_count_row == 0:
                with engine.connect() as connection:
                    insert_paper_track =  connection.execute('insert into tb_sign_data ("sid","sign_json","file_id") values (%s,%s,%s) \
                    returning "sid"',self.sid,self.data_json,self.file_id)
                    tmp = [dict(row) for row in insert_paper_track]
                    connection.close()
                return {'result':'OK','messageText':'insert sign_json OK!'}
            else:
                return {'result': 'ER', 'messageText': 'insert sign_json ER!'}
        except Exception as ex:
            return {'result':'ER','messageText':str(ex)}
        finally:
            db.session.close()

    def insert_paper_sender_sql(self,send_user,send_time,status,sender_name,sender_email,sender_position,file_id,file_name,tracking_id,step_data_sid,step_code,doc_id,webhook,email_center,time_expire,sendtime,importance,eform_id,last_digitsign,FileSize):
        self.send_user = send_user
        self.send_time = send_time
        self.status = status
        self.sender_name = sender_name
        self.sender_email = sender_email
        self.sender_position = sender_position
        self.file_id = file_id
        self.file_name = file_name
        self.tracking_id = tracking_id
        self.step_data_sid = step_data_sid
        self.step_code = step_code
        self.doc_id = doc_id
        self.webhook = webhook
        self.email_center = email_center
        self.eform_id = eform_id
        query_select = paper_lessdatastep.query.filter(paper_lessdatastep.sid==self.step_data_sid).first()
        result_fiter_email = insert().select_filter_email_recp_v1(query_select.data_json)
        result_select = select().select_datajson_form_step_data_update_sender_v1(self.step_data_sid)
        self.detail_status = str(result_select['messageText']['data_document'])
        self.document_status = result_select['messageText']['status_document']
        self.max_step = str(result_select['messageText']['max_step'])
        self.step_now = str(result_select['messageText']['step_now'])
        self.time_expire = time_expire
        self.sendtime2 = sendtime
        self.importance = importance
        self.last_digitsign = str(last_digitsign)
        self.FileSize = FileSize
        if len(result_fiter_email) != 0:
            email_recp = result_fiter_email
        else:
            email_recp = []
        try:
            datetime_expire = None
            if self.time_expire != None:
                time_ex_eval = eval(self.time_expire)
                if 'status' in time_ex_eval:
                    status = time_ex_eval['status']
                    if status == True:
                        data_ex = eval(str(time_ex_eval['data_ex']))
                        day = data_ex['day']
                        hour = data_ex['hour']
                        flashback = timedelta(days  = int(day))
                        date_format = '%d-%m-%Y %H:%M:%S'
                        date_obj = datetime.datetime.strptime(self.sendtime2, date_format)
                        datetime_expire =date_obj + flashback
                else:
                    data_ex = time_ex_eval
                    day = data_ex[0]
                    hour = data_ex[1]
                    flashback = timedelta(days  = int(day))
                    date_format = '%d-%m-%Y %H:%M:%S'
                    date_obj = datetime.datetime.strptime(self.sendtime2, date_format)
                    datetime_expire =date_obj + flashback
            with engine.connect() as connection:
                insert_sender =  connection.execute('insert into tb_send_detail ("send_user","send_time","status","sender_name","sender_email","sender_position","file_id","file_name",tracking_id,step_data_sid,step_code,doc_id,template_webhook,email_center,recipient_email,status_details,document_status,group_id,stepnow,stepmax,time_expire,importance,eform_id,last_digitsign,filesize) \
                values (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s) returning "step_data_sid"',\
                self.send_user,self.send_time,self.status,self.sender_name,self.sender_email,self.sender_position,self.file_id,self.file_name,self.tracking_id,\
                self.step_data_sid,self.step_code,self.doc_id,self.webhook,self.email_center,str(email_recp),self.detail_status,self.document_status,None,self.step_now,self.max_step,datetime_expire,str(self.importance),self.eform_id,self.last_digitsign,FileSize)
                tmp = [dict(row) for row in insert_sender]
                connection.close()
            return {'result':'OK','messageText':'insert sender OK!'}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            print('e',ex)
            return {'result':'ER','messageText':str(ex)}
        finally:
            db.session.close()

    def insert_paper_sender_sql_v2(self,send_user,send_time,status,sender_name,sender_email,sender_position,file_id,file_name,tracking_id,step_data_sid,step_code,doc_id,webhook,email_center,time_expire,sendtime,importance,eform_id,last_digitsign,status_ref,list_ref,status_service,FileSize,tax_id,transaction):
        self.send_user = send_user
        self.send_time = send_time
        self.status = status
        self.sender_name = sender_name
        self.sender_email = sender_email
        self.sender_position = sender_position
        self.file_id = file_id
        self.file_name = file_name
        self.tracking_id = tracking_id
        self.step_data_sid = step_data_sid
        self.step_code = step_code
        self.doc_id = doc_id
        self.webhook = webhook
        self.email_center = email_center
        self.eform_id = eform_id
        query_select = paper_lessdatastep.query.filter(paper_lessdatastep.sid==self.step_data_sid).first()
        result_fiter_email = insert().select_filter_email_recp_v1(query_select.data_json)
        result_select = select().select_datajson_form_step_data_update_sender_v1(self.step_data_sid)
        self.detail_status = str(result_select['messageText']['data_document'])
        self.document_status = result_select['messageText']['status_document']
        self.max_step = str(result_select['messageText']['max_step'])
        self.step_now = str(result_select['messageText']['step_now'])
        self.time_expire = time_expire
        self.sendtime2 = sendtime
        self.importance = importance
        self.last_digitsign = str(last_digitsign)
        self.status_ref = status_ref
        self.list_ref = list_ref
        self.status_service = status_service
        self.FileSize = FileSize
        self.tax_id = tax_id
        self.transaction = transaction
        if len(result_fiter_email) != 0:
            email_recp = result_fiter_email
        else:
            email_recp = []
        try:
            datetime_expire = None
            if self.time_expire != None:
                time_ex_eval = eval(self.time_expire)
                if 'status' in time_ex_eval:
                    status = time_ex_eval['status']
                    if status == True:
                        data_ex = eval(str(time_ex_eval['data_ex']))
                        day = data_ex['day']
                        hour = data_ex['hour']
                        flashback = timedelta(days  = int(day))
                        date_format = '%d-%m-%Y %H:%M:%S'
                        date_obj = datetime.datetime.strptime(self.sendtime2, date_format)
                        datetime_expire =date_obj + flashback
                else:
                    data_ex = time_ex_eval
                    day = data_ex[0]
                    hour = data_ex[1]
                    flashback = timedelta(days  = int(day))
                    date_format = '%d-%m-%Y %H:%M:%S'
                    date_obj = datetime.datetime.strptime(self.sendtime2, date_format)
                    datetime_expire =date_obj + flashback
            with engine.connect() as connection:
                insert_sender =  connection.execute('insert into tb_send_detail ("send_user","send_time","status","sender_name","sender_email","sender_position","file_id","file_name",tracking_id,step_data_sid,step_code,doc_id,template_webhook,email_center,recipient_email,status_details,document_status,group_id,stepnow,stepmax,time_expire,importance,eform_id,last_digitsign,status_ref,list_ref,status_service,filesize,tax_id,transaction) \
                values (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s) returning "step_data_sid"',\
                self.send_user,self.send_time,self.status,self.sender_name,self.sender_email,self.sender_position,self.file_id,self.file_name,self.tracking_id,\
                self.step_data_sid,self.step_code,self.doc_id,self.webhook,self.email_center,str(email_recp),self.detail_status,self.document_status,None,self.step_now,self.max_step,datetime_expire,str(self.importance),self.eform_id,self.last_digitsign,self.status_ref,str(self.list_ref),self.status_service,self.FileSize,self.tax_id,self.transaction)
                tmp = [dict(row) for row in insert_sender]
                connection.close()
            return {'result':'OK','messageText':'insert sender OK!'}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            print('e',ex)
            return {'result':'ER','messageText':str(ex)}
        finally:
            db.session.close()

    def insert_paper_tracking_sql(self,convert_id,file_id,step_Code,step):
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        self.t_dateTime = st
        random_digit = random.randint(1, 3)
        if random_digit == 1:
            tracking = get_random_string(9)
        elif random_digit == 2:
            tracking = random_string_digit_generator()
        elif random_digit == 3:
            tracking = random_digit_string_generator()
        tracking = string_check(tracking,random_digit)
        tracking = id_generator(3) + (''.join(tracking))
        try:
            tracking = gen_digit_tracking(tracking)
            if tracking['result'] == 'OK':
                tracking = tracking['messageText']
        except Exception as e:
            tracking = id_generator(4) + (''.join(tracking))
        self.convert_id = convert_id
        self.file_id = file_id
        self.step_Code = step_Code
        self.step = step
        self.uuid_step = str(uuid.uuid4())
        self.hash_sidcode = hashlib.sha512(str(self.uuid_step).encode('utf-8')).hexdigest()
        try:
            with engine.connect() as connection:
                insert_paper_track =  connection.execute('insert into tb_track_paper ("tracking","t_dateTime","Step","convert_id","file_id","step_Code","step_data_sid","hash_sid_code") values (%s,%s,%s,%s,%s,%s,%s,%s) \
                returning "tid","hash_sid_code"',tracking,self.t_dateTime,self.step,self.convert_id,self.file_id,self.step_Code,self.uuid_step,self.hash_sidcode)
                tmp = [dict(row) for row in insert_paper_track]
                connection.close()
            print('hash_sid_code',tmp)
            return {'result':'OK','messageText':tracking,'convert_id':self.convert_id,'paper_trackid':tmp[0]['tid'],'step_data_sid':self.uuid_step,'hash_sid_code':tmp[0]['hash_sid_code']}
        except exc.SQLAlchemyError as ex:
            print(ex)
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            print('e',ex)
            return {'result':'ER','messageText':str(ex)}
        finally:
            db.session.close()


    def insert_paper_datastep_sql(self,sid,data_json,update_time,data_json_Upload,step_Max,biz_info,qrCode_position):
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        self.sid                = sid
        self.data_json          = data_json
        self.update_time        = update_time
        self.data_json_Upload   = data_json_Upload
        self.step_Max           = int(step_Max)
        self.biz_info           = str(biz_info)
        eval_json               = eval(self.data_json)
        self.qrCode_position    = qrCode_position
        try:
            if self.step_Max > 1:
                for k in range(len(eval_json)):
                    if 'step_detail' in eval_json[k]:
                        for n in range(len(eval_json[k]['step_detail'])):
                            if  'A01' in eval_json[k]['step_detail'][n]['activity_code']:
                                eval_json[k]['step_detail'][n]['activity_time'] = [st]
                            if  'A03' in eval_json[k]['step_detail'][n]['activity_code']:
                                eval_json[k]['step_detail'][n]['activity_time'] = [st]
                            if  'A03' in eval_json[k]['step_detail'][n]['activity_code'] and 'A02' in eval_json[k]['step_detail'][n]['activity_code']:
                                eval_json[k]['step_detail'][n]['activity_time'] = [st,st]                            
                            if  'A03' in eval_json[k]['step_detail'][n]['activity_code'] and 'A04' in eval_json[k]['step_detail'][n]['activity_code']:
                                eval_json[k]['step_detail'][n]['activity_time'] = [st,st]     
                with engine.connect() as connection:
                    insert_datastep =  connection.execute('insert into tb_step_data ("sid","data_json","update_time","data_json_Upload","upload_time","biz_info","view_details","qrCode_position") values (%s,%s,%s,%s,%s,%s,%s,%s) returning "sid"'\
                    ,self.sid,json.dumps(eval_json),self.update_time,self.data_json_Upload,st,self.biz_info,"[]",self.qrCode_position)
                    tmp = [dict(row) for row in insert_datastep]
                    connection.close()
                return {'result':'OK','messageText':'insert step_data OK!'}
            else:
                if 'step_detail' in eval_json:
                    for n in range(len(eval_json['step_detail'])):
                        if  'A01' in eval_json['step_detail'][n]['activity_code']:
                            eval_json['step_detail'][n]['activity_time'] = [st]
                        if  'A03' in eval_json['step_detail'][n]['activity_code']:
                            eval_json['step_detail'][n]['activity_time'] = [st]
                        if  'A03' in eval_json['step_detail'][n]['activity_code'] and 'A02' in eval_json['step_detail'][n]['activity_code']:
                            eval_json['step_detail'][n]['activity_time'] = [st,st]
                        if  'A03' in eval_json['step_detail'][n]['activity_code'] and 'A04' in eval_json['step_detail'][n]['activity_code']:
                            eval_json['step_detail'][n]['activity_time'] = [st,st]     
                with engine.connect() as connection:
                    insert_datastep =  connection.execute('insert into tb_step_data ("sid","data_json","update_time","data_json_Upload","upload_time","biz_info","view_details","qrCode_position") values (%s,%s,%s,%s,%s,%s,%s,%s) returning "sid"'\
                    ,self.sid,json.dumps(eval_json),self.update_time,self.data_json_Upload,st,self.biz_info,"[]",self.qrCode_position)
                    tmp = [dict(row) for row in insert_datastep]
                    connection.close()
                return {'result':'OK','messageText':'insert step_data OK!'}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            print('e',ex)
            return {'result':'ER','messageText':str(ex)}
        finally:
            db.session.close()

    def insert_document_sql(self,sid,typefile,fileid,documentJson=None,documentType=None,urgent_type=None,digit_sign=None,attempted_name=None,documentID=None,sign_page_options=None,options_page=None):
        self.sid = sid
        self.typefile = typefile
        self.fileid = fileid
        ts = int(time.time())
        self.documentJson = documentJson
        self.documentType = documentType
        if self.documentType != None:
            self.documentType = documentType
        else:
            self.documentType = 'OTHER'
        self.urgent_type = urgent_type
        self.digit_sign = digit_sign
        self.attempted_name = attempted_name
        self.documentID = documentID
        self.sign_page_options = sign_page_options
        result_data_document = None
        info = {
            'sub':'ppl',
            'document_type':self.documentType,
            'tracking':'',
            'formdata_eform':'',
            'iat':ts
        }
        result_data_document = generate_data_document(info)
        if result_data_document != None:
            result_data_document = result_data_document.decode('utf-8')
            # result_data_document = str(result_data_document)
        if options_page != None:
            self.options_page = str(options_page)
        else:
            self.options_page = None
        try:
            with engine.connect() as connection:
                result_insert = connection.execute('INSERT INTO tb_doc_detail ("timest", "step_id", "typefile", "fileid", "document_id" ,"documentJson","documentType","urgent_type","digit_sign","attempted_folder","sign_page_options","options_page","data_document") VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s) RETURNING "step_id"',\
                str(ts),self.sid,self.typefile,self.fileid,None,self.documentJson,self.documentType,self.urgent_type,self.digit_sign,self.attempted_name,self.sign_page_options,self.options_page,result_data_document)
                tmp = [dict(row) for row in result_insert]
                connection.close()
            # jam_hash = hash(self.sid) % 10**2
            # doc_id = "F-"  + str(ts)[-5:] + str(jam_hash) + str(self.fileid)[-1:] + str(insert_document.id)[-1:].upper()
            doc_id = self.documentID
            ref_code = self.documentType + '-R' + ''.join(random_digit_generator())
            res_refCode = check_insert_refCode_new_v(ref_code,self.sid,self.documentType)
            if res_refCode['result'] == 'OK':
                update_doc_id = paper_lessdocument.query.filter_by(step_id=self.sid).first()
                update_doc_id.document_id = doc_id
                db.session.commit()
                return {'result':'OK','messageText':'insert document details and refcode and documentid ok','document_Id':doc_id,'ref_id':res_refCode['messageText']}
            else:
                return {'result':'OK','messageText':'insert document details and documentid ok refcode ' + res_refCode['messageText']  +'!','document_Id':doc_id,'ref_id':res_refCode['messageText']}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            print('e',ex)
            return {'result':'ER','messageText':None,'messageER':str(ex)}
        finally:
            db.session.close()
        
    def insert_document_sql_v2(self,sid,typefile,fileid,documentJson=None,documentType=None,urgent_type=None,digit_sign=None,attempted_name=None,documentID=None,sign_page_options=None,options_page=None,data_doc=None):
        self.sid = sid
        self.typefile = typefile
        self.fileid = fileid
        ts = int(time.time())
        self.documentJson = documentJson
        self.documentType = documentType
        if self.documentType != None:
            self.documentType = documentType
        else:
            self.documentType = 'OTHER'
        self.urgent_type = urgent_type
        self.digit_sign = digit_sign
        self.attempted_name = attempted_name
        self.documentID = documentID
        self.sign_page_options = sign_page_options
        self.data_doc = data_doc
        result_data_document = None
        info = {
            'sub':'ppl',
            'document_type':self.documentType,
            'tracking':'',
            'formdata_eform':'',
            'iat':ts
        }
        result_data_document = generate_data_document(info)
        if result_data_document != None:
            result_data_document = result_data_document.decode('utf-8')
            # result_data_document = str(result_data_document)
        if self.data_doc != None:
            result_data_document = self.data_doc
        if options_page != None:
            self.options_page = str(options_page)
        else:
            self.options_page = None
        try:
            with engine.connect() as connection:
                result_insert = connection.execute('INSERT INTO tb_doc_detail ("timest", "step_id", "typefile", "fileid", "document_id" ,"documentJson","documentType","urgent_type","digit_sign","attempted_folder","sign_page_options","options_page","data_document") VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s) RETURNING "step_id"',\
                str(ts),self.sid,self.typefile,self.fileid,None,self.documentJson,self.documentType,self.urgent_type,self.digit_sign,self.attempted_name,self.sign_page_options,self.options_page,result_data_document)
                tmp = [dict(row) for row in result_insert]
                connection.close()
            # jam_hash = hash(self.sid) % 10**2
            # doc_id = "F-"  + str(ts)[-5:] + str(jam_hash) + str(self.fileid)[-1:] + str(insert_document.id)[-1:].upper()
            doc_id = self.documentID
            ref_code = self.documentType + '-R' + ''.join(random_digit_generator())
            res_refCode = check_insert_refCode_new_v(ref_code,self.sid,self.documentType)
            if res_refCode['result'] == 'OK':
                update_doc_id = paper_lessdocument.query.filter_by(step_id=self.sid).first()
                update_doc_id.document_id = doc_id
                db.session.commit()
                return {'result':'OK','messageText':'insert document details and refcode and documentid ok','document_Id':doc_id,'ref_id':res_refCode['messageText']}
            else:
                return {'result':'OK','messageText':'insert document details and documentid ok refcode ' + res_refCode['messageText']  +'!','document_Id':doc_id,'ref_id':res_refCode['messageText']}
        except Exception as ex:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            print('e',ex)
            return {'result':'ER','messageText':None,'messageER':str(ex)}
        finally:
            db.session.close()

    def insert_document_trash(self,sid,email,datetime,list_onemail):
        self.sid = str(sid)
        self.email = str(email)
        self.datetime = datetime
        self.list_onemail = str(list_onemail)
        # ts = int(time.time())
        # st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
        try:
            with engine.connect() as connection:
                result_insert = connection.execute(text('INSERT INTO tb_document_trash ("sid", "email_update", "datetime","email_list") VALUES (:sid,:email_update,:datetime,:email_list)'),sid=self.sid,email_update=self.email,datetime=self.datetime,email_list=self.list_onemail)
                connection.close()
            return {'result':'OK','messageText':None}
            # insert_result = paper_lessdocumenttrash(sid=self.sid,email_update=self.email,datetime=str(st))
            # db.session.add(insert_result)
            # db.session.flush()
            # db.session.commit()
            # print('insert success')

        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':str(e)}
        finally:
            db.session.close()

    def insert_tranferuser(self,sid,action_status,step_num,email_from,email_to,datetime,status,email):      
        self.sid = str(sid)
        self.action_status = str(action_status)
        self.step_num = str(step_num)
        self.email_from = str(email_from)
        self.email_to = str(email_to)
        self.datetime = datetime
        self.status = str(status)
        self.email = email
        try:
            insert_result = paper_lesstranfer(sid=self.sid,action_status=self.action_status,step_num=self.step_num,email_from=self.email_from,email_to=self.email_to,datetime=self.datetime,status=self.status,email = self.email)
            db.session.add(insert_result)
            db.session.flush()
            db.session.commit()
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':str(e)}
        finally:
            db.session.close()
    
    def insert_template_group_v1():
        self.group_id = group_id
        try:
            insert_result = tb_group_document(group_name=None,group_code=None,template=None,document_type=None,group_title=None,step_group=None,status=None,create_date=None,update_date=None,biz_info=None,create_by=None,update_by=None)
            db.session.add(insert_result)
            db.session.flush()
            db.session.commit()
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result':'ER','messageText':str(e)}
        finally:
            db.session.close()

class delete_1():
    def delete_tash(self,username,email_User,sidCode):
        self.username = username
        self.email_User = email_User
        self.sidCode = sidCode
        list_onemail = []
        list_json = []
        doc_id = None
        msg = ''
        tmp_json = {}
        ts = int(time.time())
        st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
        try:
            update = 'DELETE'
            with engine.connect() as connection:
                result = connection.execute(text('UPDATE "tb_send_detail" SET status=:val2 WHERE step_data_sid=:val'),val=self.sidCode,val2=update)
                # tmp = [dict(row) for row in result]
                result_update_time = connection.execute('UPDATE "tb_step_data" SET "update_time"=%s WHERE "sid"=%s',str(st),self.sidCode)
            connection.close()
            list_onemail,doc_id = getEmail_complete(self.sidCode)
            list_onemail.append(self.email_User)
            ts = int(time.time())
            st = datetime.datetime.fromtimestamp(ts).strftime('%d/%b/%Y %H:%M:%S')
            st1 = datetime.datetime.fromtimestamp(ts).strftime('%d/%m/%Y %H:%M:%S')
            result_insert = insert_1().insert_document_trash(sidCode,email_User,st,list_onemail)
            if result_insert['result'] == 'OK':
                name_sure = fine_name_surename(self.email_User)
                msg = 'แจ้งเตือน Paperless\n' + 'เลขที่เอกสาร ' + str(doc_id) + '\n\n'
                msg += 'มีการลบเอกสาร ' + ' โดยคุณ' + str(name_sure) + '\nเวลา ' + (st1)
                tmp_json['msg'] = msg
                tmp_json['list_onemail'] = list_onemail
                list_json.append(tmp_json)
                return {'result': 'OK', 'messageText': list_json,'messageER':None}
            else:
                return {'result': 'ER', 'messageText': 'insert error','messageER':None}
        except Exception as e:
            return 
            print(ex)
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            return {'result': 'ER', 'messageText': 'error','messageER':str(ex)}
        finally:
            db.session.close()
        
    def del_group_from_document_v1(self,sidcode,group_id,email_updateby):
        self.sidcode = sidcode
        self.group_id = group_id
        self.email_updateby = email_updateby
        try:
            for x in range(len(self.group_id)):
                tmp_groupid = self.group_id[x]
                tmp_query = tb_group_document.query.filter(tb_group_document.id== tmp_groupid).first()
                if tmp_query != None:
                    tmp_sidgroup = eval(tmp_query.sid_group)
                    tmp_data_group = eval(tmp_query.data_group)
                    tmp_email_group = eval(tmp_query.email_group)
                    tmp_group_data_json = eval(tmp_query.group_data_json)
                    tmp_step_group = eval(tmp_query.step_group)
                    tmp_sidcode = self.sidcode
                    index_yu = tmp_sidgroup.index(tmp_sidcode)
                    tmp_data_group.pop(index_yu)
                    tmp_email_group.pop(index_yu)
                    tmp_step_group.pop(index_yu)
                    if 'data_sum' in tmp_group_data_json[0]:
                        tmp_group_data_json.pop(index_yu)
                    else:
                        tmp_group_data_json.pop(index_yu)
                        # print(tmp_group_data_json.pop(index_yu))
                        # tmp_group_data_json.pop(index_yu)
                        # print()
                        # return ''
                        # tmp_group_data_json[0].pop(index_yu)
                    tmp_sidgroup.remove(tmp_sidcode)
                    tmp_query.sid_group = str(tmp_sidgroup)
                    tmp_query.data_group = str(tmp_data_group)                
                    tmp_query.email_group = str(tmp_email_group)
                    tmp_query.group_data_json = str(tmp_group_data_json)
                    tmp_query.step_group = str(tmp_step_group)
                    tmp_query.update_by = self.email_updateby                           
                    db.session.commit()
                    tmp_db = paper_lesssender.query.filter(paper_lesssender.step_data_sid==(self.sidcode)).all()
                    for u in range(len(tmp_db)):
                        tmp_groupid_evl = eval(tmp_db[u].group_id)
                        tmp_groupid_evl.remove(tmp_groupid)
                        tmp_db[u].group_id = str(tmp_groupid_evl)
                        db.session.commit()
            return {'result':'OK','messageText':'success'}
        except Exception as e:
            exc_type, exc_obj, exc_tb = sys.exc_info()
            fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
            print(exc_type, fname, exc_tb.tb_lineno)
            print('error',str(e))
            return {'result':'ER','messageText':str(e)}
        finally:
            db.session.close()

        